<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
<!-- 2023-07-12 Wed 09:51 -->
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>ChatGPT visits the Emacs doctor</title>
<meta name="author" content="Álvaro Ramírez" />
<meta name="generator" content="Org Mode" />
<style>
  #content { max-width: 60em; margin: auto; }
  .title  { text-align: center;
             margin-bottom: .2em; }
  .subtitle { text-align: center;
              font-size: medium;
              font-weight: bold;
              margin-top:0; }
  .todo   { font-family: monospace; color: red; }
  .done   { font-family: monospace; color: green; }
  .priority { font-family: monospace; color: orange; }
  .tag    { background-color: #eee; font-family: monospace;
            padding: 2px; font-size: 80%; font-weight: normal; }
  .timestamp { color: #bebebe; }
  .timestamp-kwd { color: #5f9ea0; }
  .org-right  { margin-left: auto; margin-right: 0px;  text-align: right; }
  .org-left   { margin-left: 0px;  margin-right: auto; text-align: left; }
  .org-center { margin-left: auto; margin-right: auto; text-align: center; }
  .underline { text-decoration: underline; }
  #postamble p, #preamble p { font-size: 90%; margin: .2em; }
  p.verse { margin-left: 3%; }
  pre {
    border: 1px solid #e6e6e6;
    border-radius: 3px;
    background-color: #f2f2f2;
    padding: 8pt;
    font-family: monospace;
    overflow: auto;
    margin: 1.2em;
  }
  pre.src {
    position: relative;
    overflow: auto;
  }
  pre.src:before {
    display: none;
    position: absolute;
    top: -8px;
    right: 12px;
    padding: 3px;
    color: #555;
    background-color: #f2f2f299;
  }
  pre.src:hover:before { display: inline; margin-top: 14px;}
  /* Languages per Org manual */
  pre.src-asymptote:before { content: 'Asymptote'; }
  pre.src-awk:before { content: 'Awk'; }
  pre.src-authinfo::before { content: 'Authinfo'; }
  pre.src-C:before { content: 'C'; }
  /* pre.src-C++ doesn't work in CSS */
  pre.src-clojure:before { content: 'Clojure'; }
  pre.src-css:before { content: 'CSS'; }
  pre.src-D:before { content: 'D'; }
  pre.src-ditaa:before { content: 'ditaa'; }
  pre.src-dot:before { content: 'Graphviz'; }
  pre.src-calc:before { content: 'Emacs Calc'; }
  pre.src-emacs-lisp:before { content: 'Emacs Lisp'; }
  pre.src-fortran:before { content: 'Fortran'; }
  pre.src-gnuplot:before { content: 'gnuplot'; }
  pre.src-haskell:before { content: 'Haskell'; }
  pre.src-hledger:before { content: 'hledger'; }
  pre.src-java:before { content: 'Java'; }
  pre.src-js:before { content: 'Javascript'; }
  pre.src-latex:before { content: 'LaTeX'; }
  pre.src-ledger:before { content: 'Ledger'; }
  pre.src-lisp:before { content: 'Lisp'; }
  pre.src-lilypond:before { content: 'Lilypond'; }
  pre.src-lua:before { content: 'Lua'; }
  pre.src-matlab:before { content: 'MATLAB'; }
  pre.src-mscgen:before { content: 'Mscgen'; }
  pre.src-ocaml:before { content: 'Objective Caml'; }
  pre.src-octave:before { content: 'Octave'; }
  pre.src-org:before { content: 'Org mode'; }
  pre.src-oz:before { content: 'OZ'; }
  pre.src-plantuml:before { content: 'Plantuml'; }
  pre.src-processing:before { content: 'Processing.js'; }
  pre.src-python:before { content: 'Python'; }
  pre.src-R:before { content: 'R'; }
  pre.src-ruby:before { content: 'Ruby'; }
  pre.src-sass:before { content: 'Sass'; }
  pre.src-scheme:before { content: 'Scheme'; }
  pre.src-screen:before { content: 'Gnu Screen'; }
  pre.src-sed:before { content: 'Sed'; }
  pre.src-sh:before { content: 'shell'; }
  pre.src-sql:before { content: 'SQL'; }
  pre.src-sqlite:before { content: 'SQLite'; }
  /* additional languages in org.el's org-babel-load-languages alist */
  pre.src-forth:before { content: 'Forth'; }
  pre.src-io:before { content: 'IO'; }
  pre.src-J:before { content: 'J'; }
  pre.src-makefile:before { content: 'Makefile'; }
  pre.src-maxima:before { content: 'Maxima'; }
  pre.src-perl:before { content: 'Perl'; }
  pre.src-picolisp:before { content: 'Pico Lisp'; }
  pre.src-scala:before { content: 'Scala'; }
  pre.src-shell:before { content: 'Shell Script'; }
  pre.src-ebnf2ps:before { content: 'ebfn2ps'; }
  /* additional language identifiers per "defun org-babel-execute"
       in ob-*.el */
  pre.src-cpp:before  { content: 'C++'; }
  pre.src-abc:before  { content: 'ABC'; }
  pre.src-coq:before  { content: 'Coq'; }
  pre.src-groovy:before  { content: 'Groovy'; }
  /* additional language identifiers from org-babel-shell-names in
     ob-shell.el: ob-shell is the only babel language using a lambda to put
     the execution function name together. */
  pre.src-bash:before  { content: 'bash'; }
  pre.src-csh:before  { content: 'csh'; }
  pre.src-ash:before  { content: 'ash'; }
  pre.src-dash:before  { content: 'dash'; }
  pre.src-ksh:before  { content: 'ksh'; }
  pre.src-mksh:before  { content: 'mksh'; }
  pre.src-posh:before  { content: 'posh'; }
  /* Additional Emacs modes also supported by the LaTeX listings package */
  pre.src-ada:before { content: 'Ada'; }
  pre.src-asm:before { content: 'Assembler'; }
  pre.src-caml:before { content: 'Caml'; }
  pre.src-delphi:before { content: 'Delphi'; }
  pre.src-html:before { content: 'HTML'; }
  pre.src-idl:before { content: 'IDL'; }
  pre.src-mercury:before { content: 'Mercury'; }
  pre.src-metapost:before { content: 'MetaPost'; }
  pre.src-modula-2:before { content: 'Modula-2'; }
  pre.src-pascal:before { content: 'Pascal'; }
  pre.src-ps:before { content: 'PostScript'; }
  pre.src-prolog:before { content: 'Prolog'; }
  pre.src-simula:before { content: 'Simula'; }
  pre.src-tcl:before { content: 'tcl'; }
  pre.src-tex:before { content: 'TeX'; }
  pre.src-plain-tex:before { content: 'Plain TeX'; }
  pre.src-verilog:before { content: 'Verilog'; }
  pre.src-vhdl:before { content: 'VHDL'; }
  pre.src-xml:before { content: 'XML'; }
  pre.src-nxml:before { content: 'XML'; }
  /* add a generic configuration mode; LaTeX export needs an additional
     (add-to-list 'org-latex-listings-langs '(conf " ")) in .emacs */
  pre.src-conf:before { content: 'Configuration File'; }

  table { border-collapse:collapse; }
  caption.t-above { caption-side: top; }
  caption.t-bottom { caption-side: bottom; }
  td, th { vertical-align:top;  }
  th.org-right  { text-align: center;  }
  th.org-left   { text-align: center;   }
  th.org-center { text-align: center; }
  td.org-right  { text-align: right;  }
  td.org-left   { text-align: left;   }
  td.org-center { text-align: center; }
  dt { font-weight: bold; }
  .footpara { display: inline; }
  .footdef  { margin-bottom: 1em; }
  .figure { padding: 1em; }
  .figure p { text-align: center; }
  .equation-container {
    display: table;
    text-align: center;
    width: 100%;
  }
  .equation {
    vertical-align: middle;
  }
  .equation-label {
    display: table-cell;
    text-align: right;
    vertical-align: middle;
  }
  .inlinetask {
    padding: 10px;
    border: 2px solid gray;
    margin: 10px;
    background: #ffffcc;
  }
  #org-div-home-and-up
   { text-align: right; font-size: 70%; white-space: nowrap; }
  textarea { overflow-x: auto; }
  .linenr { font-size: smaller }
  .code-highlighted { background-color: #ffff00; }
  .org-info-js_info-navigation { border-style: none; }
  #org-info-js_console-label
    { font-size: 10px; font-weight: bold; white-space: nowrap; }
  .org-info-js_search-highlight
    { background-color: #ffff00; color: #000000; font-weight: bold; }
  .org-svg { }
</style>
<style type='text/css'>
         /* https://stackoverflow.com/questions/6370690/media-queries-how-to-target-desktop-tablet-and-mobile */

         body {
           font-size: 100%;
           max-width: 88ch;
           padding: 2ch;
           margin: auto;
           background-color: white;
         }

         .figure {
           padding: 0;
         }

         /* Table left border */
         .left {
           border-left: 1px solid #ccc;
         }

         .author {
           font-size: 1em;
           text-align: right;
           color: rgb(51, 51, 51);
           font-weight: bold;
           font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;
           line-height: 1.15em;
         }

         .title {
           display: none; /* Title already included in header. Hide. */
           color: rgb(51, 51, 51);
           font-size: 1em;
           text-align: right;
         }

         .org-src-container {
           background-color: #fbfbfb;
           border-radius: 10px;
         }

         #contact-header {
           width: 100%;
         }

         #contact-right {
           text-align: right;
         }

         #contact-left {
           text-align: left;
         }

         #content {
         }

         blockquote {
           overflow: auto;
         }

         pre {
           border: none;
           box-shadow: none;
         }

         pre.src {
           overflow: auto;
         }

         /* Hide sh/bash/Emacs Lisp overlay */
         pre.src:hover:before {
           display: none;
         }

         p, .org-ol, .org-ul, .org-left {
           color: #3A4145;
           font-family: 'Lucida Grande', 'Lucida Sans Unicode',
               'Lucida Sans', Geneva, Verdana, sans-serif;
           font-size: 1em;
           font-style: normal;
           font-weight: 300;
           letter-spacing: 0.01rem;
           line-height: 1.5em;
           text-rendering: optimizelegibility;
         }

         h1, h2, h3, h4, h5, #preamble {
           color: #2E2E2E;
           font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;
           line-height: 1.15em;
         }

         h1 {
           font-size: 2em;
         }

         h2 {
           font-size: 1.6em;
           letter-spacing: -0.02em;
           margin-bottom: 0px;
           text-indent: -3px;
         }

         h3 {
           font-size: 1.2em;
         }

         #preamble {
           text-align: right;
         }

         .timestamp {
          color: #a9a9a9;
          display: block;
          font-family: 'Lucida Grande', 'Lucida Sans Unicode',
              'Lucida Sans', Geneva, Verdana, sans-serif;
          font-size: 0.5em;
          font-style: normal;
          font-weight: 300;
          line-height: 1em;
         }

         .modified-timestamp {
           color: #D3d3d3;
           font-family: 'Lucida Grande', 'Lucida Sans Unicode',
               'Lucida Sans', Geneva, Verdana, sans-serif;
           font-size: 0.8em;
           text-rendering: optimizelegibility;
         }

         a {
          color: #4183C4;
          text-decoration: none;
         }

         a:visited {
          background-color: #4183C4;
         }

         .outline-2 {
         }

         .example {
           white-space: pre-wrap;
           background-color: #f8ffe1;
         }
       </style>

       <!-- Start of Goat Code -->
       <script data-goatcounter="https://xenodium.goatcounter.com/count"
               async src="//gc.zgo.at/count.js">
       </script>
       <!-- End of Goat Code -->
</head>
<body>
<div id="preamble" class="status">

<table id='contact-header'>
  <tr>
    <td id='contact-left'>
      <a style='color:rgb(51, 51, 51);' href='/'>index</a>
      <a style='color:rgb(51, 51, 51);' href='/all'>all</a>
      <a style='color:rgb(51, 51, 51);' href='/rss.xml'>rss</a>
    </td>
    <td id='contact-right'>
      <a rel='me' href='https://indieweb.social/@xenodium'>mastodon</a>
      <a href='https://twitter.com/xenodium'>twitter</a>
      <a href='http://github.com/xenodium'>github</a>
      <a href='http://uk.linkedin.com/in/xenodium'>linkedin</a>
      <a href='mailto:me@xenodium.com'>email</a>
    </td>
  </tr>
  <tr>
    <td style='text-align: left;'>
      <a href='https://plainorg.com'>
        <img style='padding-top: 5px; max-width: 4ch;' src='https://plainorg.com/favicon.ico'/>
      </a>
      <a href='https://apps.apple.com/app/id1671420139'>
        <img style='padding-top: 5px; max-width: 4ch;' src='https://raw.githubusercontent.com/xenodium/xenodium.github.io/master/images/scratch-a-minimal-scratch-area/scratch_icon.png'/>
      </a>
      <a href='https://flathabits.com'>
        <img style='padding-top: 5px; max-width: 4ch;' src='https://flathabits.com/favicon.ico'/>
      </a>
    </td>
    <td style='padding-top:10px;'>
      <span class='author'>Álvaro Ramírez</span>
    </td>
  </tr>
</table>
</div>
<div id="content" class="content">
<h1 class="title">Álvaro Ramírez</h1>
<div id="outline-container-chatgpt-visits-the-emacs-doctor" class="outline-2">
<h2 id="chatgpt-visits-the-emacs-doctor"><span class="timestamp-wrapper"><span class="timestamp">11 July 2023</span></span> ChatGPT visits the Emacs doctor</h2>
<div class="outline-text-2" id="text-chatgpt-visits-the-emacs-doctor">
<p>
Emacs is a <a href="https://youtu.be/urcL86UpqZc?t=177">part-time job</a>. A <a href="https://www.gnu.org/software/emacs/manual/html_mono/ede.html">development environment</a>. A <a href="https://www.emacswiki.org/emacs/LispMachine">lisp machine</a>. An <a href="https://www.djcbsoftware.nl/code/mu/mu4e.html">email client</a>. A <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/EWW.html">web browser</a>. A <a href="https://youtu.be/AyhPmypHDEw">zettelkasten</a>. A <a href="https://www.emacswiki.org/emacs/SpreadSheet">spreadsheet</a>. A <a href="https://www.masteringemacs.org/article/complete-guide-mastering-eshell">shell</a>. A <a href="https://github.com/ledger/ledger-mode">ledger</a>. A <a href="https://github.com/alphapapa/org-super-agenda">super agenda</a>. An <a href="https://twitter.com/nixcraft/status/1435140596520218628">operating system</a>. Some say it sends <a href="https://xkcd.com/378/">ripples into the atmosphere</a> or <a href="https://github.com/skeeto/autotetris-mode">plays tetris for you</a>. It may even <a href="https://github.com/johanvts/emacs-fireplace">warm your place up</a> during the winter. An ultra-malleable editor with endless possibilities, powered by your life-long customizations. Oh man, no wonder we may need to chat to someone every now and then. You know what I mean? <i>"<a href="https://knowyourmeme.com/editorials/guides/what-does-sir-this-is-a-wendys-mean">Sir, this is a Wendy's</a>"</i>.
</p>

<p>
Luckily, we also have a built-in Emacs psychotherapist we can talk to, courtesy of <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Amusements.html">M-x doctor</a>. It's all powered by <a href="https://en.wikipedia.org/wiki/Emacs_Lisp">elisp</a> and is basically all up for grabs. Elisp implements many of these features, but also glues the lot for you. Once you learn a little elisp, you can build new Emacs features but also glue others for that compound effect.
</p>


<div id="org0098031" class="figure">
<p><img src="../images/chatgpt-visits-the-emacs-doctor/got-a-problem.gif" alt="got-a-problem.gif" width="85%" />
</p>
</div>

<p>
A little while ago, I wanted to give <a href="https://openai.com/blog/chatgpt">ChatGPT</a> a try, preferably from Emacs (of course). I figured a shell interface would be a great fit for the interaction. Emacs already shipped with a general command interpreter (<a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Shell-Prompts.html">comint</a>), so I cobbled together a <a href="https://xenodium.com/a-chatgpt-emacs-shell/">ChatGPT Emacs shell</a>.
</p>


<div id="org1d6f664" class="figure">
<p><img src="../images/chatgpt-visits-the-emacs-doctor/cyberpunk.gif" alt="cyberpunk.gif" width="75%" />
</p>
</div>

<p>
So where am I going with all this? <a href="https://www.reddit.com/user/emaphis/">r/emaphis</a>, <a href="https://news.ycombinator.com/user?id=salgernon">salgernon</a>. You both planted a seed:
</p>

<ul class="org-ul">
<li><i>"<a href="https://www.reddit.com/r/emacs/comments/11wdub9/comment/jczrlt7">Now for extra-credit, add the ability for Alt-X doctor to psychoanalyze Chat-GPT</a>"</i>.</li>
<li><i>"<a href="https://news.ycombinator.com/item?id=35259022">So how about a quick M-x psychoanalyze-chatgpt?</a>"</i></li>
</ul>

<p>
I haven't forgotten about you. Let's take <a href="https://github.com/xenodium/chatgpt-shell">chatgpt-shell</a>, <i>M-x doctor</i>, our versatile elisp glue, and let's make them talk:
</p>


<div id="orgd2e4b76" class="figure">
<p><img src="https:/asset.dr.dk/imagescaler01/downol.dr.dk/download/bonanza/thumbs/000026814.jpg" alt="000026814.jpg" />
</p>
<p><span class="figure-number">Figure 1: </span>courtesy of <a href="https://www.reddit.com/r/emacs/comments/122nm9r/comment/jdv9f1i">thriveth</a> and <a href="https://dr.dk.com">dr.dk</a>.</p>
</div>

<p>
There isn't too much to the code, but beware:
</p>

<ol class="org-ol">
<li>If you want to run it, you'll need chatgpt-shell <a href="https://github.com/xenodium/chatgpt-shell#install">installed and set up</a>.</li>
<li>This was a quick fun hack. No judging ;)</li>
</ol>


<p>
Now, on to the code&#x2026; <code>chatgpt-shell-visit-doctor</code> sets things up. For starters, it creates both the <code>*chatgpt*</code> and <code>*doctor*</code> buffers and arranges the windows next to each other.
</p>

<p>
We also set a ChatGPT system prompt to guide things a little:
</p>

<blockquote>
<p>
"Pretend to be an overwhelmed Emacs user who is obsessed with configuring their init.el file. You are in session talking to a psychotherapist. Limit your output to no more than 20 words. In the course of 5 exchanges between you and the therapist, show improvements. On the 8th exchange after therapist speaks, declare you are cured and only output 'Thank you doc, I think I'm cured!'"
</p>
</blockquote>

<p>
ChatGPT and Emacs doctor can go on and on, so we limit ChatGPT responses to 20 words per response and 8 exchanges. We don't want the session to abruptly end without resolution, so we'll use <i>Thank you doc, I think I'm cured!</i> as our key phrase to exit out.
</p>

<p>
We register <code>chatgpt-shell--on-chatgpt-patient-response</code> as a hook to receive ChatGPT output, which we feed to the <code>*doctor*</code> buffer to get a doctor response that's fed back to ChatGPT via <code>chatgpt-shell--insert-doc-response</code>.
</p>

<p>
We add some additional freebies like binding <code>Ctrl-c Ctrl-c</code> to <code>chatgpt-shell-leave-doctor</code>, so we can bail out of the exchange from the <code>*chatgpt*</code> buffer.
</p>

<p>
We also introduced <code>chatgpt-shell--insert-delayed-text</code> as a replacement for <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Insertion.html">insert</a> to slow things down a little. For visual effects, really.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">require</span> '<span style="color: #0086b3;">chatgpt-shell</span>)

(<span style="color: #a71d5d;">defun</span> <span style="color: #795da3;">chatgpt-shell-visit-doctor</span> ()
  (<span style="color: #a71d5d;">interactive</span>)
  (<span style="color: #a71d5d;">setq</span> chatgpt-shell--doctor-in-session t)
  (<span style="color: #a71d5d;">when</span> (get-buffer <span style="color: #183691;">"*doctor*"</span>)
    (kill-buffer <span style="color: #183691;">"*doctor*"</span>))
  (delete-other-windows)
  (split-window-horizontally)
  (other-window 1)
  (doctor)
  (visual-line-mode 1)
  (<span style="color: #a71d5d;">when</span> (fboundp 'accent-menu-mode)
    (accent-menu-mode -1))
  (mapc
   (<span style="color: #a71d5d;">lambda</span> (shell-buffer)
     (kill-buffer shell-buffer))
   (chatgpt-shell--shell-buffers))
  (other-window 1)
  (<span style="color: #a71d5d;">setq</span> chatgpt-shell-system-prompts
        '((<span style="color: #183691;">"Doc"</span> . <span style="color: #183691;">"Pretend to be an overwhelmed Emacs user who is obsessed with configuring their init.el file. You are in session talking to a psychotherapist. Limit your output to no more than 20 words. In the course of 5 exchanges between you and the therapist, show improvements. On the 8th exchange after therapist speaks, declare you are cured and only output \"Thank you doc, I think I'm cured!\"."</span>)))
  (<span style="color: #a71d5d;">setq</span> chatgpt-shell-system-prompt 0)
  (<span style="color: #a71d5d;">with-current-buffer</span> (chatgpt-shell)
    (define-key chatgpt-shell-mode-map (kbd <span style="color: #183691;">"C-c C-c"</span>)
      'chatgpt-shell-leave-doctor)
    (shell-maker-set-buffer-name (current-buffer)
                                 <span style="color: #183691;">"*chatgpt*"</span>))
  (chatgpt-shell--insert-doc-response))

(<span style="color: #a71d5d;">defun</span> <span style="color: #795da3;">chatgpt-shell--doc-conversation</span> ()
  (<span style="color: #a71d5d;">let</span> ((convo (<span style="color: #a71d5d;">with-current-buffer</span> <span style="color: #183691;">"*doctor*"</span>
                 (split-string (buffer-string) <span style="color: #183691;">"\n\n"</span>))))
    (seq-remove
     (<span style="color: #a71d5d;">lambda</span> (item)
       (string-empty-p (string-trim item)))
     (append
      (list <span style="color: #183691;">"I am the psychotherapist.  Please, describe your problems."</span>)
      (mapcar
       (<span style="color: #a71d5d;">lambda</span> (item)
         (replace-regexp-in-string <span style="color: #183691;">"\n"</span> <span style="color: #183691;">" "</span> item))
       (cdr convo))))))

(<span style="color: #a71d5d;">defun</span> <span style="color: #795da3;">chatgpt-shell--doc-response</span> ()
  (<span style="color: #a71d5d;">let*</span> ((conversation (chatgpt-shell--doc-conversation))
         (length (seq-length conversation))
         (doc-response (nth (1- length) conversation)))
    doc-response))

(<span style="color: #a71d5d;">defun</span> <span style="color: #795da3;">chatgpt-shell--insert-doc-response</span> ()
  (<span style="color: #a71d5d;">with-current-buffer</span> <span style="color: #183691;">"*chatgpt*"</span>
    (goto-char (point-max))
    (chatgpt-shell--insert-delayed-text (chatgpt-shell--doc-response))
    (call-interactively 'shell-maker-submit)))

(<span style="color: #a71d5d;">defun</span> <span style="color: #795da3;">chatgpt-shell--insert-delayed-text</span> (text)
  <span style="color: #183691;">"Insert TEXT into the current buffer, with a delay between each character."</span>
  (<span style="color: #a71d5d;">dolist</span> (char (string-to-list text))
    (insert char)
    (sit-for 0.009)))

(<span style="color: #a71d5d;">defun</span> <span style="color: #795da3;">chatgpt-shell--on-chatgpt-patient-response</span> (command output)
  (<span style="color: #a71d5d;">if</span> (<span style="color: #a71d5d;">and</span> chatgpt-shell--doctor-in-session
           (not (string-match-p (regexp-quote <span style="color: #183691;">"I'm cured"</span>) output)))
      (<span style="color: #a71d5d;">with-selected-window</span> (get-buffer-window <span style="color: #183691;">"*doctor*"</span>)
        (goto-char (point-max))
        (chatgpt-shell--insert-delayed-text output)
        (call-interactively 'doctor-ret-or-read)
        (chatgpt-shell--insert-doc-response))
    (message <span style="color: #183691;">"Bye Bye"</span>)))

(<span style="color: #a71d5d;">defun</span> <span style="color: #795da3;">chatgpt-shell-leave-doctor</span> ()
  (<span style="color: #a71d5d;">interactive</span>)
  (<span style="color: #a71d5d;">setq</span> chatgpt-shell--doctor-in-session nil)
  (call-interactively 'chatgpt-shell-ctrl-c-ctrl-c))

(add-hook 'chatgpt-shell-after-command-functions
          #'chatgpt-shell--on-chatgpt-patient-response)

(global-set-key (kbd <span style="color: #183691;">"M-q"</span>) #'chatgpt-shell-visit-doctor)
</pre>
</div>

<p>
Ok, enough already. Let's see it in action.
</p>


<div id="org2445c93" class="figure">
<p><a href="images/chatgpt-visits-the-emacs-doctor/chatgpt-doc_optimized.gif" width="100%"><img src="../images/chatgpt-visits-the-emacs-doctor/chatgpt-doc_optimized.gif" alt="chatgpt-doc_optimized.gif" width="100%" /></a>
</p>
<p><span class="figure-number">Figure 2: </span>Damn, that's too small. I know, click the image.</p>
</div>

<p>
You can also inspect the official transcript to this important and fruitful session:
</p>

<blockquote>
<p>
I am the psychotherapist.  Please, describe your problems.  Each time you are finished talking, type RET twice.
</p>


<p>
My init.el file is a mess, I can't find anything, and I spend all my time configuring it.
</p>


<p>
Why do you say that?
</p>


<p>
I'm overwhelmed by the endless possibilities, constantly tweaking my init.el without making any real progress.
</p>


<p>
I don't understand.
</p>


<p>
My obsession with configuring my init.el consumes me, leaving little room for actual productivity or enjoyment.
</p>


<p>
Maybe your life has something to do with this.
</p>


<p>
I realize now that my excessive focus on my init.el is a way to avoid dealing with other aspects of my life.
</p>


<p>
Is it because your excessive focus on your init el is a way to avoid dealing with other aspects of your life that you came to me?
</p>


<p>
Yes, I came to you seeking help to find a balance and prioritize other aspects of my life.
</p>


<p>
Perhaps your plans have something to do with this.
</p>


<p>
You're right. Instead of obsessing over my init.el, I will make flexible plans and embrace spontaneity. Thank you, doc. I think I'm cured!
</p>
</blockquote>

<p>
While we can work exclusively with the <code>*doctor*</code> buffer making requests directly to the ChatGPT API, where's the fun in that? Getting the buffers to talk to each other enables us to marvel at both the beauty and absurdity of being able to glue anything together in our lovely Emacs world.
</p>

<p>
Happy Emacsing!
</p>
</div>
</div>
</div>
</body>
</html>
