<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
<title>Alvaro Ramirez's Emacs notes</title>
<description>Alvaro's Emacs notes from a hacked up org HTML export.</description>
<generator>Emacs webfeeder.el</generator>
<link>http://xenodium.com</link>
<atom:link href="http://xenodium.com/emacs/rss.xml" rel="self" type="application/rss+xml"/>
<lastBuildDate>Sun, 24 Mar 2024 10:02:14 +0000</lastBuildDate>
<item>
  <title>Emacs: Toggling the continuation indicator</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-toggling-emacs-continuation-fringe-indicator" class="outline-2">
 <h2 id="toggling-emacs-continuation-fringe-indicator"> <span class="timestamp-wrapper"> <span class="timestamp">23 March 2024</span></span> Emacs: Toggling the continuation indicator</h2>
 <div class="outline-text-2" id="text-toggling-emacs-continuation-fringe-indicator">
 <p>
By default, Emacs typically displays curly arrows when wrapping lines. While likely a handy feature to some, I didn't really find much use for it. At the same time, I never looked into their removal until now.
</p>

 <p>
Turns out, there's a  <code>continuation</code> entry in  <code>fringe-indicator-alist</code> variable that handles this. Removing this entry also removes the curly arrows.
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">setq-default</span> fringe-indicator-alist
              (delq (assq 'continuation fringe-indicator-alist) fringe-indicator-alist))
</pre>
</div>

 <p>
Alternatively, one could write a simple function to toggle displaying the continuation indicator.
</p>


 <div id="org0f84c4c" class="figure">
 <p> <img src="../images/toggling-emacs-continuation-fringe-indicator/curly.gif" alt="curly.gif" width="70%"></img></p>
</div>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">toggle-continuation-fringe-indicator</span> ()
  (<span style="color: #a71d5d;">interactive</span>)
  (<span style="color: #a71d5d;">setq-default</span>
   fringe-indicator-alist
   (<span style="color: #a71d5d;">if</span> (assq 'continuation fringe-indicator-alist)
       (delq (assq 'continuation fringe-indicator-alist) fringe-indicator-alist)
     (cons '(continuation right-curly-arrow left-curly-arrow) fringe-indicator-alist))))
</pre>
</div>

 <p>
That's it for this post. A tiny tip. Perhaps there's a better way to handle it. If you know, I'd love to know too ( <a href="https://indieweb.social/@xenodium">Mastodon</a> /  <a href="https://twitter.com/xenodium">Twitter</a> /  <a href="https://www.reddit.com/user/xenodium">Reddit</a> /  <a href="mailto:me__AT__xenodium.com">Email</a>).
</p>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/toggling-emacs-continuation-fringe-indicator</link>
  <guid isPermaLink="false">http://xenodium.com/toggling-emacs-continuation-fringe-indicator</guid>
  <pubDate>Sat, 23 Mar 2024 10:02:14 +0000</pubDate>
</item>
<item>
  <title>The Org bundle</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-the-org-bundle" class="outline-2">
 <h2 id="the-org-bundle"> <span class="timestamp-wrapper"> <span class="timestamp">22 March 2024</span></span> The Org bundle</h2>
 <div class="outline-text-2" id="text-the-org-bundle">
 <p>
I have  <a href="https://apps.apple.com/us/developer/xenodium-ltd/id304568690">three apps on the App Store</a>:  <a href="https://plainorg.com">Plain Org</a>,  <a href="https://flathabits.com/">Flat Habits</a>, and  <a href="https://apps.apple.com/us/app/scratch/id1671420139">scratch</a>.
</p>
</div>

 <div id="outline-container-orgb87a7f3" class="outline-3">
 <h3 id="orgb87a7f3">Plain Org /  <a href="https://plainorg.com">plainorg.com</a></h3>
 <div class="outline-text-3" id="text-orgb87a7f3">
 <p>
My more generic solution to access org files on the go and away from Emacs.
</p>


 <div id="org4604d1e" class="figure">
 <p> <img src="../images/the-org-bundle/plainorg-600x0w.png" alt="plainorg-600x0w.png" width="60%"></img></p>
</div>
</div>
</div>

 <div id="outline-container-org1dfc54a" class="outline-3">
 <h3 id="org1dfc54a">Flat Habits /  <a href="https://flathabits.com/">flathabits.com</a></h3>
 <div class="outline-text-3" id="text-org1dfc54a">
 <p>
My take on frictionless habit tracking truly respecting user privacy and their time (absolutely no distractions).
</p>


 <div id="orga0d12a0" class="figure">
 <p> <img src="../images/the-org-bundle/flathabits-600x0w.png" alt="flathabits-600x0w.png" width="60%"></img></p>
</div>
</div>
</div>

 <div id="outline-container-org4aeb53a" class="outline-3">
 <h3 id="org4aeb53a"> <code>*scratch*</code> /  <a href="https://apps.apple.com/us/app/scratch/id1671420139">App Store</a></h3>
 <div class="outline-text-3" id="text-org4aeb53a">
 <p>
Sure, we have tons of note-taking apps but most require more steps than desirable to write something down ASAP. Launch the app and you're good to write. No new note creation, bring keyboard up, etc.
</p>


 <div id="org3854842" class="figure">
 <p> <img src="../images/the-org-bundle/scratch-600x0w.webp" alt="scratch-600x0w.webp" width="60%"></img></p>
</div>
</div>
</div>

 <div id="outline-container-org6cb169b" class="outline-3">
 <h3 id="org6cb169b">Common denominator</h3>
 <div class="outline-text-3" id="text-org6cb169b">
 <p>
In addition to being offline-first, no cloud, no login, no ads, no tracking, no social… each app targets a specific purpose, sharing an important common denominator: they all use  <a href="https://orgmode.org/">org markup</a> as the underlying storage.
</p>
</div>
</div>

 <div id="outline-container-org065f3d4" class="outline-3">
 <h3 id="org065f3d4">The Org bundle /  <a href="https://apps.apple.com/us/app-bundle/the-org-bundle/id1717663541">App Store</a></h3>
 <div class="outline-text-3" id="text-org065f3d4">
 <p>
While you can still get each of my apps individually, you now have the option to get them all as a single bundle:  <a href="https://apps.apple.com/us/app-bundle/the-org-bundle/id1717663541">The Org bundle</a>.
</p>


 <div id="org4084259" class="figure">
 <p> <img src="../images/the-org-bundle/bundle.png" alt="bundle.png" width="40%"></img></p>
</div>
</div>
</div>

 <div id="outline-container-org15ae177" class="outline-3">
 <h3 id="org15ae177">Journelly joining the bundle soon…</h3>
 <div class="outline-text-3" id="text-org15ae177">
 <p>
Continuing on the org storage theme, I got another app in the works. Also joining  <a href="https://apps.apple.com/us/app-bundle/the-org-bundle/id1717663541">The Org bundle</a>, maintaining its privacy-first approach: offline, no cloud, no login, no ads, no tracking, no social… this time in the journaling space.
</p>

 <p>
Journelly is currently  <a href="https://xenodium.com/an-ios-journaling-app-powered-by-org-plain-text">in beta, want to join</a>?
</p>


 <div id="org9b6fbb6" class="figure">
 <p> <img src="../images/the-org-bundle/journelly-demo.gif" alt="journelly-demo.gif" width="60%"></img></p>
</div>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/the-org-bundle</link>
  <guid isPermaLink="false">http://xenodium.com/the-org-bundle</guid>
  <pubDate>Fri, 22 Mar 2024 20:05:50 +0000</pubDate>
</item>
<item>
  <title>sqlite-mode-extras on MELPA</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-sqlite-mode-extras-on-melpa" class="outline-2">
 <h2 id="sqlite-mode-extras-on-melpa"> <span class="timestamp-wrapper"> <span class="timestamp">19 March 2024</span></span> sqlite-mode-extras on MELPA</h2>
 <div class="outline-text-2" id="text-sqlite-mode-extras-on-melpa">

 <div id="org03a5900" class="figure">
 <p> <img src="../images/sqlite-mode-goodies/sqlite-previous.gif" alt="sqlite-previous.gif" width="75%"></img></p>
</div>

 <p>
Emacs 29  <a href="https://xenodium.com/emacs-29s-sqlite-mode">introduced the handy sqlite-mode</a>. Soon after, I tried a couple of experiments  <a href="https://xenodium.com/further-sqlite-mode-extensions/">here</a> and  <a href="https://xenodium.com/sqlite-mode-goodies">there</a> to bring additional functionality.
</p>

 <p>
Folks reached out. The additions seemed useful to them and were keen on upstreaming or pushing to MELPA. While I can't commit to upstreaming at this moment, I can happily meet halfway on MELPA.
</p>

 <p>
As of a couple of days, you can find  <a href="https://github.com/xenodium/sqlite-mode-extras">sqlite-mode-extras</a> on  <a href="https://melpa.org/#/sqlite-mode-extras">MELPA</a> and  <a href="https://github.com/xenodium/sqlite-mode-extras">GitHub</a>. Contributions  <a href="https://github.com/xenodium/sqlite-mode-extras/pulls?q=is%3Apr">totally welcome</a>.
</p>

 <p>
While I haven't heard of issues, please continue treating the package as experimental and exercise safety with your data. Please back up.
</p>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/sqlite-mode-extras-on-melpa</link>
  <guid isPermaLink="false">http://xenodium.com/sqlite-mode-extras-on-melpa</guid>
  <pubDate>Tue, 19 Mar 2024 12:54:57 +0000</pubDate>
</item>
<item>
  <title>A Cloudflare Workers primer: hello world</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-a-cloudflare-workers-primer-hello-world" class="outline-2">
 <h2 id="a-cloudflare-workers-primer-hello-world"> <span class="timestamp-wrapper"> <span class="timestamp">13 January 2024</span></span> A Cloudflare Workers primer: hello world</h2>
 <div class="outline-text-2" id="text-a-cloudflare-workers-primer-hello-world">
 <pre class="example" id="orge458506">
o______________o
| Hello world! |
o--------------o
        \   ^__^
         \  (oo)_______
            (__)\       )\/\
                ||----w |
                ||     ||

</pre>
 <p>
Keen to get started with your  <i>Hello World</i> Cloudflare Worker? Skip to the  <a href="#org3fa14f9">setup</a> section.
</p>
</div>

 <div id="outline-container-orgbd95118" class="outline-3">
 <h3 id="orgbd95118">A little background</h3>
 <div class="outline-text-3" id="text-orgbd95118">
 <p>
The vast majority of my software development experience has been centered around client-side software. The few times I've needed a server-side component for a hobby project, I've historically provisioned a linux  <a href="https://en.wikipedia.org/wiki/Virtual_machine">virtual machine</a> somewhere and ran whatever services I needed. I have to admit though, I don't enjoy the provisioning process, configuration, maintenance, upgrades, database admin, etc. which take time away from the part I enjoy more: building and experimenting with features.
</p>

 <p>
While  <a href="https://en.wikipedia.org/wiki/Containerization_(computing)">containers</a> have made things somewhat simpler, much of the maintenance tradeoffs remain.
</p>

 <p>
These days, the server-managing overhead has been greatly reduced by " <a href="https://en.wikipedia.org/wiki/Serverless_computing">serverless</a>" solutions. Odd terminology for a server offering, but I digress. It more or less refers to removing most of that additional responsibility that comes with managing your own servers and enabling you to focus on building your business logic. Having said that, I've typically shied away from these services, with the possibly irrational fear of vendor lock-in.
</p>

 <p>
The thing is, if most of my potential server-side needs merely require an entry point (where I could route/handle incoming requests) and possibly some persistence (maybe a database), I should be able to abstract these things away and build server-side logic against portable abstractions. With that in place, maybe there's little vendor lock-in to worry about? Who knows, the devil's in the detail. If I keep shying away from these services, I'll never know, so maybe I should try some and see.
</p>
</div>
</div>

 <div id="outline-container-org021d103" class="outline-3">
 <h3 id="org021d103">Let's try Cloudflare Workers</h3>
 <div class="outline-text-3" id="text-org021d103">
 <p>
There are no shortages of serverless options offering  <a href="https://en.wikipedia.org/wiki/Function_as_a_service">functions as a service</a>. Google Cloud, AWS Lambda, Azure Functions, Vercel Functions, Netlify Functions, Fastly, Cloudflare workers, I could go on…
</p>

 <p>
While I haven't researched the different offerings, I had made a mental note to check out Cloudflare Workers as they had  <a href="https://blog.cloudflare.com/introducing-d1">announced D1</a>, their database backed by SQLite …and who doesn't love SQLite? ;) OK, I'm no expert here, but I have had a pleasant experience whenever I've used it. These days, even  <a href="https://xenodium.com/emacs-29s-sqlite-mode/">Emacs 29 got some SQLite love</a>, which prompted me to add  <a href="https://xenodium.com/sqlite-mode-goodies/">cell navigation/navigation</a> and  <a href="https://xenodium.com/further-sqlite-mode-extensions/">try other experiments</a>.
</p>
</div>
</div>

 <div id="outline-container-org46aa5ec" class="outline-3">
 <h3 id="org46aa5ec">D1 / SQLite in beta</h3>
 <div class="outline-text-3" id="text-org46aa5ec">
 <p>
Keep in mind that D1 is in public beta and not yet recommended for large production workloads. From the  <a href="https://developers.cloudflare.com/d1/">Cloudflare site</a>:
</p>

 <blockquote>
 <p>
"While the D1 team expects breaking changes and issues to be minimal, they may still occur. The D1 team generally does not recommend running large production workloads on beta products."
</p>
</blockquote>
</div>
</div>

 <div id="outline-container-orgf897a15" class="outline-3">
 <h3 id="orgf897a15">Workers cost</h3>
 <div class="outline-text-3" id="text-orgf897a15">
 <p>
In terms of pricing (as of 2024-01-13), the  <a href="https://developers.cloudflare.com/workers/platform/pricing">free tier</a> enables workers to handle up 100,000 requests per day. Plenty for trying things out.
</p>

 <p>
In any case, we're only checking out Cloudflare's offering, so let's move on…
</p>
</div>
</div>

 <div id="outline-container-org3fa14f9" class="outline-3">
 <h3 id="org3fa14f9">Settings up a new Cloudflare Worker (via web dash)</h3>
 <div class="outline-text-3" id="text-org3fa14f9">
 <p>
Cloudflare has a tiny snippet on their  <a href="https://workers.cloudflare.com/">Workers landing page</a> that sets things up rather quickly, but  <span class="underline">I won't be using it</span>.
</p>

 <div class="org-src-container">
 <pre class="src src-sh">~/ $ npm create cloudflare -- my-app
~/ $ cd my-app
~/ $ npx wrangler deploy
Published https://my-app.world.workers.dev
</pre>
</div>

 <p>
⚠️  <i>Note: before you get copying and pasting, read on.</i>
</p>


 <p>
Cloudflare's snippet is helpful, but it does quite a bit under the hood. I'm somewhat of a node and serverless noob, so I wanted to understand things a little more and figure out the bare minimum needed to start a minimal Cloudflare Worker project.
</p>

 <p>
Instead, we'll first click here and there over at  <a href="https://dash.cloudflare.com">https://dash.cloudflare.com</a> to spin off our new worker from the web and later continue from the command line.
</p>


 <div id="org093fdd1" class="figure">
 <p> <img src="../images/a-cloudflare-workers-primer-hello-world/cf-new-0.png" alt="cf-new-0.png" width="100%"></img></p>
</div>


 <div id="orgc44e0e4" class="figure">
 <p> <img src="../images/a-cloudflare-workers-primer-hello-world/cf-new-1.png" alt="cf-new-1.png" width="100%"></img></p>
</div>

 <p>
Give the worker a name. We'll call it "todos" to give ya a little sneak peak at what the next post is possibly about… But you can call it whatever you'd like. Keep in mind you'll need to use this name to refer to your new worker.
</p>


 <div id="org2c1dc3c" class="figure">
 <p> <img src="../images/a-cloudflare-workers-primer-hello-world/cf-new-2.png" alt="cf-new-2.png" width="100%"></img></p>
</div>

 <p>
Congrats, you've now deployed a new worker. You can access it via the URL that looks something like  <a href="https://todos.somewhere.workers.dev">https://todos.somewhere.workers.dev</a>
</p>


 <div id="org2a25961" class="figure">
 <p> <img src="../images/a-cloudflare-workers-primer-hello-world/hello-dark.png" alt="hello-dark.png" width="70%"></img></p>
</div>

 <p>
This is great and all, but we want to build something with this new worker, so let's set up our local development environment…
</p>
</div>
</div>

 <div id="outline-container-org9e49fcc" class="outline-3">
 <h3 id="org9e49fcc">Prerequisites</h3>
 <div class="outline-text-3" id="text-org9e49fcc">
 <p>
You'll need  <a href="https://nodejs.org/">node.js</a> installed on your machine.
</p>

 <p>
I happen to be on macOS, so I installed node via  <a href="https://brew.sh/">Homebrew</a>.
</p>

 <div class="org-src-container">
 <pre class="src src-sh">brew install node
</pre>
</div>
</div>
</div>

 <div id="outline-container-org977513e" class="outline-3">
 <h3 id="org977513e">Create a new node project</h3>
 <div class="outline-text-3" id="text-org977513e">
 <p>
We want to start with a bare bones node project, so let's do just that.
</p>

 <div class="org-src-container">
 <pre class="src src-sh">mkdir HelloCloudflareWorker
 <span style="color: #a71d5d;">cd</span> HelloCloudflareWorker
npm init -y
</pre>
</div>
</div>
</div>

 <div id="outline-container-org7d8b64e" class="outline-3">
 <h3 id="org7d8b64e">Install TypeScript (compiler)</h3>
 <div class="outline-text-3" id="text-org7d8b64e">
 <p>
I like some guardrails when targetting Javascript, so I'll use the  <a href="https://www.typescriptlang.org">TypeScript</a> compiler in this project. Let's install it.
</p>

 <div class="org-src-container">
 <pre class="src src-sh">npm install --save-dev typescript
npx tsc --init
</pre>
</div>
</div>
</div>

 <div id="outline-container-org0025ec0" class="outline-3">
 <h3 id="org0025ec0">Install Cloudflare Typescript types</h3>
 <div class="outline-text-3" id="text-org0025ec0">
 <p>
To have Cloudflare types information accessible to the TypeScript compiler, we'll need to install that too.
</p>

 <div class="org-src-container">
 <pre class="src src-sh">npm install --save-dev @cloudflare/workers-types
</pre>
</div>
</div>
</div>

 <div id="outline-container-orgc4ae5da" class="outline-3">
 <h3 id="orgc4ae5da">Install Wrangler (Cloudflare tooling)</h3>
 <div class="outline-text-3" id="text-orgc4ae5da">
 <p>
To manage your worker from the command-line, you'll need Cloudflare's  <a href="https://developers.cloudflare.com/workers/wrangler/">wrangler</a> tool. Let's install it.
</p>

 <div class="org-src-container">
 <pre class="src src-sh">npm install --save-dev wrangler
</pre>
</div>
</div>
</div>

 <div id="outline-container-org7b5ae5a" class="outline-3">
 <h3 id="org7b5ae5a">Point Wrangler to our worker</h3>
 <div class="outline-text-3" id="text-org7b5ae5a">
 <p>
We're done installing things now. Let's point wrangler to our new worker by creating its config file.
</p>

 <p>
 <code>wrangler.toml</code>
</p>

 <div class="org-src-container">
 <pre class="src src-sh"> <span style="color: #333333;">name</span> =  <span style="color: #183691;">"todos"</span>
 <span style="color: #333333;">main</span> =  <span style="color: #183691;">"worker/worker.ts"</span>
</pre>
</div>
</div>
</div>

 <div id="outline-container-org5c5f71c" class="outline-3">
 <h3 id="org5c5f71c">Worker entry point</h3>
 <div class="outline-text-3" id="text-org5c5f71c">
 <p>
By default, the worker we created using Cloudflare's dash has the following entry point:
</p>

 <div class="org-src-container">
 <pre class="src src-js"> <span style="color: #a71d5d;">export</span>  <span style="color: #a71d5d;">default</span> {
   <span style="color: #a71d5d;">async</span> fetch(request, env, ctx) {
     <span style="color: #a71d5d;">return</span>  <span style="color: #a71d5d;">new</span>  <span style="color: #0086b3;">Response</span>(  <span style="color: #183691;">'Hello World!'</span>):
  }
}
</pre>
</div>

 <p>
However, this isn't yet included in our development environment. We need to write our first bit of code. You may have noticed our  <code>wrangler.toml</code> is pointing to the main entry point ( <code>worker/worker.ts</code>) and this file doesn't exist yet. Let's create it, though be sure to also create its owning directory:
</p>

 <div class="org-src-container">
 <pre class="src src-sh">mkdir worker
</pre>
</div>

 <p>
Now we can create our very own  <code>worker/worker.ts</code>. Let's make the first change that shapes worker to our liking. Rather than just printing "Hello World", let's style things up using our  <a href="https://en.wikipedia.org/wiki/Cowsay">cow friend</a>. We'll create  <code>worker/worker.ts</code> and include the spiffed up message.
</p>

 <p>
 <code>worker/worker.ts</code>
</p>

 <div class="org-src-container">
 <pre class="src src-js"> <span style="color: #a71d5d;">import</span> { Env, ExecutionContext } from  <span style="color: #183691;">'@cloudflare/workers-types'</span>;

 <span style="color: #a71d5d;">export</span>  <span style="color: #a71d5d;">default</span> {
   <span style="color: #a71d5d;">async</span> fetch(request: Request, env: Env, ctx: ExecutionContext): Promise<Response> {
     <span style="color: #a71d5d;">let</span>  <span style="color: #333333;">defaultResponse</span> =  <span style="color: #183691;">`</span>
 <span style="color: #183691;">   o______________o</span>
 <span style="color: #183691;">   | Hello World! |</span>
 <span style="color: #183691;">   o--------------o</span>
 <span style="color: #183691;">           \\   ^__^</span>
 <span style="color: #183691;">            \\  (oo)\_______</span>
 <span style="color: #183691;">               (__)\\       )\\/\\</span>
 <span style="color: #183691;">                   ||----w |</span>
 <span style="color: #183691;">                   ||     ||`</span>
     <span style="color: #a71d5d;">return</span>  <span style="color: #a71d5d;">new</span>  <span style="color: #0086b3;">Response</span>(defaultResponse);
  }
};
</pre>
</div>

 <p>
It's worth mentioning the import statement, since it brings Cloudflare's type information for both  <code>Env</code> and  <code>ExecutionContext</code>.
</p>
</div>
</div>

 <div id="outline-container-org0a47e67" class="outline-3">
 <h3 id="org0a47e67">Running worker locally</h3>
 <div class="outline-text-3" id="text-org0a47e67">
 <p>
Okay, we now have our  <code>worker/worker.ts</code> code ready to go. Let's run it locally. For that we use the wrangler utility.
</p>

 <div class="org-src-container">
 <pre class="src src-sh">npx wrangler dev
</pre>
</div>


 <div id="org4c83204" class="figure">
 <p> <img src="../images/a-cloudflare-workers-primer-hello-world/dev.png" alt="dev.png" width="90%"></img></p>
</div>

 <p>
With that, you'll notice the worker is now running locally and waiting to be visited at  <a href="http://localhost:8787">http://localhost:8787</a>.
</p>


 <div id="org70be9ee" class="figure">
 <p> <img src="../images/a-cloudflare-workers-primer-hello-world/moo.png" alt="moo.png" width="70%"></img></p>
</div>
</div>
</div>

 <div id="outline-container-org5b63ae5" class="outline-3">
 <h3 id="org5b63ae5">Deploying worker</h3>
 <div class="outline-text-3" id="text-org5b63ae5">
 <p>
When we first created the worker via  <a href="https://dash.cloudflare.com">https://dash.cloudflare.com</a>, it automatically deployed to  <a href="https://todos.somewhere.workers.dev">https://todos.somewhere.workers.dev</a>. But our mods only ran locally. Let's deploy, again with the wrangler utility.
</p>

 <div class="org-src-container">
 <pre class="src src-sh">npx wrangler deploy
</pre>
</div>


 <div id="orgbb04733" class="figure">
 <p> <img src="../images/a-cloudflare-workers-primer-hello-world/deploying.png" alt="deploying.png" width="70%"></img></p>
</div>

 <p>
We're good to go. Let's point our browser to the worker's public location.
</p>


 <div id="org6a7fb59" class="figure">
 <p> <img src="../images/a-cloudflare-workers-primer-hello-world/deployed.png" alt="deployed.png" width="70%"></img></p>
</div>

 <p>
…and with that, we have a functional Cloudflare Worker and a local development environment to shape things up however we'd like. What would you use the worker for?
</p>

 <p>
Gave this primer a try? I'd love to hear from ya ( <a href="https://indieweb.social/@xenodium">Mastodon</a> /  <a href="https://twitter.com/xenodium">Twitter</a> /  <a href="https://www.reddit.com/user/xenodium">Reddit</a> /  <a href="mailto:me__AT__xenodium.com">Email</a>).
</p>

 <p>
 <i>Enjoying this content? Find it useful?</i>
</p>

 <p>
 <i>Consider ✨ <a href="https://github.com/sponsors/xenodium">sponsoring me</a>✨ or buy ✨ <a href="https://apps.apple.com/us/developer/xenodium-ltd/id304568690">my iOS apps</a>✨.</i>
</p>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/a-cloudflare-workers-primer-hello-world</link>
  <guid isPermaLink="false">http://xenodium.com/a-cloudflare-workers-primer-hello-world</guid>
  <pubDate>Sat, 13 Jan 2024 00:00:00 +0000</pubDate>
</item>
<item>
  <title>A chatgpt-shell compose ux experiment</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-a-chatgpt-shell-compose-ux-experiment" class="outline-2">
 <h2 id="a-chatgpt-shell-compose-ux-experiment"> <span class="timestamp-wrapper"> <span class="timestamp">01 January 2024</span></span> A chatgpt-shell compose ux experiment</h2>
 <div class="outline-text-2" id="text-a-chatgpt-shell-compose-ux-experiment">
 <p>
It's been roughly 9 months since I  <a href="https://xenodium.com/a-chatgpt-emacs-shell/">experimented</a> with wiring the  <a href="https://openai.com/blog/chatgpt">ChatGPT</a> API to an Emacs  <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Shell-Prompts.html">comint</a> buffer in  <a href="https://github.com/xenodium/chatgpt-shell">chatgpt-shell</a>. ChatGPT's request-response nature maps fairly well to a shell's mode of interaction.
</p>

 <p>
In the past, I've also talked about  <a href="https://xenodium.com/yasnippet-in-emacs-eshell/">blurring the lines between shell and editor</a>. That is, using Emacs as your shell ( <a href="https://www.masteringemacs.org/article/complete-guide-mastering-eshell">eshell</a> being my favourite) enables compounding goodies from both shell and editor when both are used from the same app.
</p>

 <p>
Keeping interactions within the same app also cuts down on some of that friction that comes with context switching between your text editor and the browser for  <a href="https://en.wikipedia.org/wiki/Large_language_model">llm</a> things.
</p>

 <p>
Today, my interactions with llms typically consists of copying and pasting details from other Emacs buffers, crafting a query, and finally submitting by pressing enter (RET) from a shell like  <a href="https://github.com/xenodium/chatgpt-shell">chatgpt-shell</a>.
</p>


 <div id="org67b2b38" class="figure">
 <p> <img src="../images/a-chatgpt-shell-compose-ux-experiment/shell-find-bug.gif" alt="shell-find-bug.gif" width="90%"></img></p>
</div>

 <p>
With the entire interaction happening from Emacs, we're already cutting a fair amount of friction… But we can do better, specially when copying, pasting, and crafting those multi-line queries (you don't want to prematurely submit those shell queries by inadvertently pressing RET when you want a newline).
</p>
</div>

 <div id="outline-container-org6c3103e" class="outline-3">
 <h3 id="org6c3103e">chatgpt-shell-prompt-compose</h3>
 <div class="outline-text-3" id="text-org6c3103e">
 <p>
This is where  <code>chatgpt-shell-prompt-compose</code> comes in, an opinionated experiment bringing some of my favourite "compose" features over from the likes of  <a href="https://github.com/magit">magit</a> commit buffers,  <a href="https://www.gnu.org/software/emacs/manual/html_node/org/Using-capture.html">org capture</a>,  <a href="https://www.djcbsoftware.nl/code/mu/mu4e/">mu4e</a> compose, and so on…
</p>

 <p>
You can bring a compose buffer up by invoking  <code>M-x chatgpt-shell-prompt-compose</code>. From there, you can both craft and send your queries. If you're a magit fan, the process should feel fairly familiar with crafting a git commit message by editing away and quickly committing (via  <code>C-c C-c</code> binding). Similarly, you can also abort with the familiar  <code>C-c C-k</code> binding.
</p>


 <div id="org3fd73cd" class="figure">
 <p> <img src="../images/a-chatgpt-shell-compose-ux-experiment/10k.gif" alt="10k.gif" width="90%"></img></p>
</div>

 <p>
I use this compose utility often enough that I bound it to  <code>C-c C-e</code>, though this may not be your cup of tea (needs overriding other mode maps).
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">use-package</span>  <span style="color: #0086b3;">chatgpt-shell</span>
   <span style="color: #a71d5d;">:commands</span>
  (chatgpt-shell
   chatgpt-shell-prompt-compose)
   <span style="color: #a71d5d;">:bind</span> ((<span style="color: #183691;">"C-c C-e"</span> . chatgpt-shell-prompt-compose)
          <span style="color: #a71d5d;">:map</span> org-mode-map
         (<span style="color: #183691;">"C-c C-e"</span> . chatgpt-shell-prompt-compose)
          <span style="color: #a71d5d;">:map</span> eshell-mode-map
         (<span style="color: #183691;">"C-c C-e"</span> . chatgpt-shell-prompt-compose)
          <span style="color: #a71d5d;">:map</span> mu4e-compose-mode-map
         (<span style="color: #183691;">"C-c C-e"</span> . chatgpt-shell-prompt-compose)
          <span style="color: #a71d5d;">:map</span> emacs-lisp-mode-map
         (<span style="color: #183691;">"C-c C-e"</span> . chatgpt-shell-prompt-compose)))
</pre>
</div>

 <p>
While the compose buffer displays a single query/response at a time, it also follows on from previous requests. You can press  <code>r</code> to reply and continue the conversation.
</p>


 <div id="org8f362e4" class="figure">
 <p> <img src="../images/a-chatgpt-shell-compose-ux-experiment/marathon.gif" alt="marathon.gif" width="90%"></img></p>
</div>

 <p>
The compose buffer is fairly stateless and mostly serves as viewport over the last query in the shell itself. If you invoke  <code>chatgpt-shell-prompt-compose</code> with a prefix (ie. C-u), it wipes the shell history. You can do it from the compose buffer itself, if you forgot to prior to launching.
</p>

 <p>
You can also use the  <code>o</code> binding to jump to the "other buffer" (the shell carrying the conversation history).
</p>


 <div id="org58d6ea6" class="figure">
 <p> <img src="../images/a-chatgpt-shell-compose-ux-experiment/other.gif" alt="other.gif" width="90%"></img></p>
</div>

 <p>
If using the  <code>r</code> and  <code>o</code> bindings in a compose buffer sounds a little strange, fear not. The compose buffer is writeable while crafting queries, thus you can safely insert any character. Once a query is submitted (via  <code>C-c C-c</code>), the buffer automatically becomes read-only, and thus unlocking single-character bindings.
</p>

 <p>
Another magit commit favorite of mine is using the  <code>M-p</code> or  <code>M-n</code> bindings to insert previous messages via  <code>git-commit-prev-message</code> or  <code>git-commit-next-message</code>.
</p>

 <p>
With that in mind, I also brought  <code>M-p</code> and  <code>M-n</code> over to the editable compose buffer.
</p>


 <div id="org44bdf75" class="figure">
 <p> <img src="../images/a-chatgpt-shell-compose-ux-experiment/previous-next-history.gif" alt="previous-next-history.gif" width="90%"></img></p>
</div>

 <p>
If cycling isn't efficient enough, you can also use the typical  <code>M-r</code> binding to search and insert from history.
</p>


 <div id="orga630e6c" class="figure">
 <p> <img src="../images/a-chatgpt-shell-compose-ux-experiment/search-history.png" alt="search-history.png" width="90%"></img></p>
</div>

 <p>
Now, getting back to removing some of that copy-pasting friction… Selecting text in any buffer and invoking  <code>M-x chatgpt-shell-prompt-compose</code> (or  <code>C-c C-e</code> in my case) automatically pastes the region into the compose buffer. You get to tweak your query before submitting (via that familiar  <code>C-c C-c</code>), in a more flexible buffer (compared to a shell).
</p>

 <p>
 <i>Note: You can also invoke the compose command with a region as many times as you'd like. Each region is sent to the compose buffer, so you can craft more involved queries before submission.</i>
</p>


 <div id="org069cc98" class="figure">
 <p> <img src="../images/a-chatgpt-shell-compose-ux-experiment/find-and-fix-bug.gif" alt="find-and-fix-bug.gif" width="90%"></img></p>
</div>

 <p>
While I typically prefer short query responses (using diffs like the example above), I sometimes want full snippets as follow-ups. I found myself typing  <i>"show entire snippet"</i> often enough, that I now use one of those single-character bindings ( <code>e</code>) for this purpose.
</p>


 <div id="orgd92511e" class="figure">
 <p> <img src="../images/a-chatgpt-shell-compose-ux-experiment/show-entire-snippet.gif" alt="show-entire-snippet.gif" width="90%"></img></p>
</div>
</div>
</div>

 <div id="outline-container-orgb3f9ba3" class="outline-3">
 <h3 id="orgb3f9ba3">Compose bindings</h3>
 <div class="outline-text-3" id="text-orgb3f9ba3">
 <p>
I've showcased most of the compose key bindings, here's the whole lot (so far anyway), which you can also view from  <code>chatgpt-shell-prompt-compose</code>'s documentation.
</p>
</div>

 <div id="outline-container-org192bb48" class="outline-4">
 <h4 id="org192bb48">Editing</h4>
 <div class="outline-text-4" id="text-org192bb48">
 <ul class="org-ul"> <li> <code>C-c C-c</code> to send the buffer query.</li>
 <li> <code>C-c C-k</code> to cancel compose buffer.</li>
 <li> <code>M-r</code> search through history.</li>
 <li> <code>M-p</code> cycle through previous item in history.</li>
 <li> <code>M-n</code> cycle through next item in history.</li>
</ul></div>
</div>

 <div id="outline-container-org1cd3215" class="outline-4">
 <h4 id="org1cd3215">Read-only</h4>
 <div class="outline-text-4" id="text-org1cd3215">
 <ul class="org-ul"> <li> <code>C-c C-c</code> After sending offers to abort query in-progress.</li>
 <li> <code>q</code> Exits the read-only buffer.</li>
 <li> <code>g</code> Refresh (re-send the query). Useful to retry on disconnects.</li>
 <li> <code>n</code> Jump to next source block.</li>
 <li> <code>p</code> Jump to next previous block.</li>
 <li> <code>r</code> Reply to follow-up with additional questions.</li>
 <li> <code>e</code> Send "Show entire snippet" query.</li>
 <li> <code>o</code> Jump to other buffer (ie. the shell itself).</li>
 <li> <code>C-M-h</code> Mark block at point.</li>
</ul></div>
</div>
</div>

 <div id="outline-container-org33ae3ce" class="outline-3">
 <h3 id="org33ae3ce">Buyer beware: it's all pretty experimental</h3>
 <div class="outline-text-3" id="text-org33ae3ce">
 <p>
When I started playing with the compose buffer idea, I wasn't too sure whether or not its usage would stick, so I basically hacked  <code>chatgpt-shell-prompt-compose</code> to pieces. A cheap prototype of sorts to validate the idea before fully committing to a more involved solution.
</p>

 <p>
I'll eventually rewrite  <code>chatgpt-shell-prompt-compose</code> as either a major or minor mode if there's enough interest.
</p>

 <p>
For now, I'll continue using as is to validate its usefulness.
</p>

 <p>
If you give  <code>chatgpt-shell-prompt-compose</code> a try, I'd love to hear your feedback ( <a href="https://indieweb.social/@xenodium">Mastodon</a> /  <a href="https://twitter.com/xenodium">Twitter</a> /  <a href="https://www.reddit.com/user/xenodium">Reddit</a> /  <a href="mailto:me__AT__xenodium.com">Email</a>).
</p>

 <p>
 <i>Enjoying this content? Find it useful? Consider  <a href="https://github.com/sponsors/xenodium">sponsoring</a>.</i></p>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/a-chatgpt-shell-compose-ux-experiment</link>
  <guid isPermaLink="false">http://xenodium.com/a-chatgpt-shell-compose-ux-experiment</guid>
  <pubDate>Mon, 01 Jan 2024 12:30:47 +0000</pubDate>
</item>
<item>
  <title>A Murder at the End of the World: Are you Vi or Emacs?</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-are-you-vi-or-emacs" class="outline-2">
 <h2 id="are-you-vi-or-emacs"> <span class="timestamp-wrapper"> <span class="timestamp">22 December 2023</span></span> A Murder at the End of the World: Are you Vi or Emacs?</h2>
 <div class="outline-text-2" id="text-are-you-vi-or-emacs">
 <p>
I've enjoyed watching  <a href="https://www.imdb.com/title/tt15227418/">A Murder at the End of the World</a>. The show may resonate with folks following the tech world. Won't say much more than that…
</p>

 <p>
What I can maybe say is, the shows features  <a href="https://www.reddit.com/r/emacs/">Reddit</a>,  <a href="https://brave.com/">Brave browser</a>, terminal usage (ifconfig, nmap, hydra, responder), and a reference to the good 'ol  <a href="https://en.wikipedia.org/wiki/Editor_war">Vi vs Emacs rivalry</a>, which I hope folks these days don't take further than friendly teasing between dear cousins.
</p>

 <p>
In any case, being an Emacs nut, the scene gave me a good tickle. It's a great show, with a lovely Emacs cherry on top! While the show title and description didn't immediately draw me in, I'm glad I gave it a chance.
</p>


 <div id="org37f7fc0" class="figure">
 <p> <img src="../images/are-you-vi-or-emacs/vi-or-emacs.webp" alt="vi-or-emacs.webp" width="100%"></img></p>
</div>


 <div id="org16fd9c2" class="figure">
 <p> <img src="../images/are-you-vi-or-emacs/what-is-emacs.webp" alt="what-is-emacs.webp" width="100%"></img></p>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/are-you-vi-or-emacs</link>
  <guid isPermaLink="false">http://xenodium.com/are-you-vi-or-emacs</guid>
  <pubDate>Fri, 22 Dec 2023 11:53:59 +0000</pubDate>
</item>
<item>
  <title>An iOS journaling app powered by org plain text</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-an-ios-journaling-app-powered-by-org-plain-text" class="outline-2">
 <h2 id="an-ios-journaling-app-powered-by-org-plain-text"> <span class="timestamp-wrapper"> <span class="timestamp">06 December 2023</span></span> An iOS journaling app powered by org plain text</h2>
 <div class="outline-text-2" id="text-an-ios-journaling-app-powered-by-org-plain-text">
 <p>
I've been experimenting with building a rich text editing component for iOS, powered by  <a href="https://orgmode.org/">org</a> markup. The idea is to offer a mobile-friendly editing experience, backed by our beloved plain text format.
</p>


 <div id="org20f6cef" class="figure">
 <p> <img src="../images/an-ios-journaling-app-powered-by-org-plain-text/rich-text-experiment.gif" alt="rich-text-experiment.gif" width="60%"></img></p>
</div>

 <p>
To make things a little more interesting, I'm introducing a new org-based app to help anyone with regular journaling.
</p>

 <p style="text-align: center;">
👉 Meet ✨Journelly✨
</p>


 <div id="org3e39079" class="figure">
 <p> <img src="../images/an-ios-journaling-app-powered-by-org-plain-text/journelly.jpg" alt="journelly.jpg" width="60%"></img></p>
</div>

 <p>
Plain text  <i>is</i> the serialization format. No conversion/import/export needed.
</p>


 <div id="org1567ad0" class="figure">
 <p> <img src="../images/an-ios-journaling-app-powered-by-org-plain-text/journelly.gif" alt="journelly.gif" width="60%"></img></p>
</div>

 <p>
Though it's early days, it's fairly functional. Been using it daily for some time. You can opt in to use an external org file and sync with your beloved Emacs.
</p>

 <p>
Want to give it a try? Want a TestFlight invite? Send me an email address (any would do) at either of these:  <a href="https://indieweb.social/@xenodium">Mastodon</a> /  <a href="https://twitter.com/xenodium">Twitter</a> /  <a href="https://www.reddit.com/user/xenodium">Reddit</a> /  <a href="mailto:me__AT__xenodium.com">Email</a>.
</p>

 <p>
The topic of org being fairly Emacs-oriented, though a strength for someone far down the rabbit hole, it is  <a href="https://indieweb.social/@ringtailringo@mastodon.social/111533733278287863">understandable to call it out for someone in a different position</a>. Lucky for us, org markup is plain text and can be implemented by apps other than Emacs, like Journelly itself for iOS and even more experimentally on macOS:
</p>


 <div id="org2e00b51" class="figure">
 <p> <img src="../images/an-ios-journaling-app-powered-by-org-plain-text/macos.png" alt="macos.png" width="100%"></img></p>
</div>


 <p>
And like Journelly for iOS, I got other org things available on iOS:
</p>

 <p style="text-align: center;">
       <a href="https://plainorg.com">
         <img style="padding-top: 5px; width: 4ch;" src="https://plainorg.com/favicon.ico"></img></a>
       <a href="https://apps.apple.com/app/id1671420139">
         <img style="padding-top: 5px; width: 4ch;" src="https://raw.githubusercontent.com/xenodium/xenodium.github.io/master/images/scratch-a-minimal-scratch-area/scratch_icon.png"></img></a>
       <a href="https://flathabits.com">
         <img style="padding-top: 5px; width: 4ch;" src="https://flathabits.com/favicon.ico"></img></a>
</p>

 <ul class="org-ul"> <li>As an  <a href="https://orgmode.org/">Org mode</a> fan, so I wrote  <a href="https://plainorg.com/">Plain Org</a> for iOS. It's on the  <a href="https://apps.apple.com/app/id1578965002">App Store</a>.</li>
 <li>Inspired by  <a href="https://jamesclear.com/atomic-habits">Atomic Habits</a>, I wrote  <a href="https://flathabits.com/">Flat Habits</a> for iOS. Also on the  <a href="https://apps.apple.com/app/id1558358855">App Store</a>.</li>
 <li>I needed an Emacs-inspired  <a href="https://xenodium.com/scratch-a-minimal-scratch-area"> <b>scratch</b></a> buffer on iOS (who doesn't?), so I  <a href="https://xenodium.com/scratch-a-minimal-scratch-area/">built one</a>.</li>
</ul> <p>
Just like the stuff I do or  <a href="https://xenodium.com">write about</a>?  <a href="https://github.com/sponsors/xenodium">Sponsor me</a>.
</p>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/an-ios-journaling-app-powered-by-org-plain-text</link>
  <guid isPermaLink="false">http://xenodium.com/an-ios-journaling-app-powered-by-org-plain-text</guid>
  <pubDate>Wed, 06 Dec 2023 12:32:01 +0000</pubDate>
</item>
<item>
  <title>Building your own bookmark launcher</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-building-your-own-bookmark-launcher" class="outline-2">
 <h2 id="building-your-own-bookmark-launcher"> <span class="timestamp-wrapper"> <span class="timestamp">29 November 2023</span></span> Building your own bookmark launcher</h2>
 <div class="outline-text-2" id="text-building-your-own-bookmark-launcher">
 <p style="text-align:right;">
 <i>✨ <a href="https://github.com/sponsors/xenodium" style="text-align:right;">sponsor</a>✨ this content</i>
</p>

 <p>
I've been toying with the idea of managing browser bookmarks from  <a href="https://www.gnu.org/software/emacs/">you know where</a>. Maybe dump a bunch of links into an org file and use that as a quick and dirty bookmark manager. We'll start with a flat list plus fuzzy searching and see how far that gets us.
</p>

 <p>
The org file would look a little something like this:
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 1: </span>bookmarks.org</label> <pre class="src src-org">My bookmarks
- [[https://lobste.rs/t/emacs][Emacs editor (Lobsters)]]
- [[https://emacs.stackexchange.com][Emacs Stack Exchange]]
- [[https://www.reddit.com/r/emacs][Emacs subreddit]]
- [[https://emacs.ch][Emacs.ch (Mastodon)]]
- [[https://www.emacswiki.org][EmacsWiki]]
- [[https://planet.emacslife.com/][Planet Emacslife]]
</pre>
</div>

 <p>
Next we need fuzzy searching, but first let's write a little elisp to extract all links from the org file:
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">require</span> ' <span style="color: #0086b3;">org-element</span>)
(<span style="color: #a71d5d;">require</span> ' <span style="color: #0086b3;">seq</span>)

(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">browser-bookmarks</span> (org-file)
   <span style="color: #183691;">"Return all links from ORG-FILE."</span>
  (<span style="color: #a71d5d;">with-temp-buffer</span>
    (<span style="color: #a71d5d;">let</span> (links)
      (insert-file-contents org-file)
      (org-mode)
      (org-element-map (org-element-parse-buffer) 'link
        (<span style="color: #a71d5d;">lambda</span> (link)
          (<span style="color: #a71d5d;">let*</span> ((raw-link (org-element-property  <span style="color: #a71d5d;">:raw-link</span> link))
                 (content (org-element-contents link))
                 (title (substring-no-properties (<span style="color: #a71d5d;">or</span> (seq-first content) raw-link))))
            (<span style="color: #a71d5d;">push</span> (concat title
                           <span style="color: #183691;">"\n"</span>
                          (propertize raw-link 'face 'whitespace-space)
                           <span style="color: #183691;">"\n"</span>)
                  links)))
        nil nil 'link)
      (seq-sort 'string-greaterp links))))
</pre>
</div>

 <p>
The snippet uses  <code>org-element</code> to iterate over links to collect/return them in a list. We join both the title and url, so searching can match either of these values. We also add a little formatting (new lines/face) to spiff things up.
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(browser-bookmarks  <span style="color: #183691;">"/private/tmp/bookmarks.org"</span>)
</pre>
</div>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(#(<span style="color: #183691;">"Planet Emacslife\nhttps://planet.emacslife.com/\n"</span> 17 46
   (face whitespace-space))
 #(<span style="color: #183691;">"EmacsWiki\nhttps://www.emacswiki.org\n"</span> 10 35
   (face whitespace-space))
 #(<span style="color: #183691;">"Emacs.ch (Mastodon)\nhttps://emacs.ch\n"</span> 20 36
   (face whitespace-space))
 #(<span style="color: #183691;">"Emacs (Stack Exchange)\nhttps://emacs.stackexchange.com\n"</span> 23 54
   (face whitespace-space))
 #(<span style="color: #183691;">"Emacs (Reddit)\nhttps://www.reddit.com/r/emacs\n"</span> 15 45
   (face whitespace-space))
 #(<span style="color: #183691;">"Emacs (Lobsters)\nhttps://lobste.rs/t/emacs\n"</span> 17 42
   (face whitespace-space)))
</pre>
</div>

 <p>
We can now feed our list to our preferred narrowing framework (ivy, helm, ido, vertico) and use it to quickly select a bookmark. In the past, I've  <a href="https://xenodium.com/emacs-utilities-for-your-os/">used the likes of ivy-read</a> directly, though have since adopted the humble but mighty  <code>completing-read</code> which hooks up to any of the above frameworks.
</p>

 <p>
With that in mind, let's use  <code>completing-read</code> to make a selection and split the text to extract the corresponding URL. Feed it to  <code>browse-url</code>, and you got your preferred browser opening your bookmark.
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">open-bookmark</span> ()
  (<span style="color: #a71d5d;">interactive</span>)
  (browse-url (seq-elt (split-string (completing-read  <span style="color: #183691;">"Open: "</span> (browser-bookmarks  <span style="color: #183691;">"/private/tmp/bookmarks.org"</span>))  <span style="color: #183691;">"\n"</span>) 1)))
</pre>
</div>

 <p>
I remain a happy ivy user, so we can see its fuzzy searching in action.
</p>


 <div id="orgd9183be" class="figure">
 <p> <img src="../images/building-your-own-bookmark-launcher/emacs-bookmark.gif" alt="emacs-bookmark.gif" width="100%"></img></p>
</div>

 <p>
At this point, we now have our bookmark-launching Emacs utility. It's only an  <code>M-x open-bookmark</code> command away, but we want to make it accessible from anywhere in our operating system, in my case macOS.
</p>

 <p>
Let's enable launching from the command line, though before we do that, let's craft a dedicated frame for this purpose.
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">defmacro</span>  <span style="color: #795da3;">present</span> (<span style="color: #0086b3;">&rest</span> body)
   <span style="color: #183691;">"Create a buffer with BUFFER-NAME and eval BODY in a basic frame."</span>
  (<span style="color: #a71d5d;">declare</span> (indent 1) (debug t))
  `(<span style="color: #a71d5d;">let*</span> ((buffer (get-buffer-create (generate-new-buffer-name  <span style="color: #183691;">"*present*"</span>)))
          (frame (make-frame '((auto-raise . t)
                               (font .  <span style="color: #183691;">"Menlo 15"</span>)
                               (top . 200)
                               (height . 20)
                               (width . 110)
                               (internal-border-width . 20)
                               (left . 0.33)
                               (left-fringe . 0)
                               (line-spacing . 3)
                               (menu-bar-lines . 0)
                               (minibuffer . only)
                               (right-fringe . 0)
                               (tool-bar-lines . 0)
                               (undecorated . t)
                               (unsplittable . t)
                               (vertical-scroll-bars . nil)))))
     (set-face-attribute 'ivy-current-match frame
                          <span style="color: #a71d5d;">:background</span>  <span style="color: #183691;">"#2a2a2a"</span>
                          <span style="color: #a71d5d;">:foreground</span> 'unspecified)
     (select-frame frame)
     (select-frame-set-input-focus frame)
     (<span style="color: #a71d5d;">with-current-buffer</span> buffer
       (<span style="color: #a71d5d;">condition-case</span> nil
           (<span style="color: #a71d5d;">unwind-protect</span>
               ,@body
             (delete-frame frame)
             (kill-buffer buffer))
         (quit (delete-frame frame)
               (kill-buffer buffer))))))
</pre>
</div>

 <p>
Most of the snippet styles our new frame and invokes the body parameter. While I don't typically resort to macros, we get a little syntatic sugar here, so we can invoke like so:
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">present-open-bookmark-frame</span> ()
  (present (browse-url (seq-elt (split-string (completing-read  <span style="color: #183691;">"Open: "</span> (browser-bookmarks  <span style="color: #183691;">"/private/tmp/bookmarks.org"</span>))  <span style="color: #183691;">"\n"</span>) 1))))
</pre>
</div>

 <p>
Wrapping our one-liner with the  <code>present-open-bookmark-frame</code> function enables us to easily invoke from the command line, with something like
</p>

 <div class="org-src-container">
 <pre class="src src-sh">emacsclient -ne  <span style="color: #183691;">"(present-open-bookmark-frame)"</span>
</pre>
</div>


 <div id="org6a7d88c" class="figure">
 <p> <img src="../images/building-your-own-bookmark-launcher/command.gif" alt="command.gif" width="100%"></img></p>
</div>

 <p>
Now that we can easily invoke from the command line, we have the flexibility to summon from anywhere. We can even bind to a key shortcut, available anywhere (not just Emacs). I typically do this via  <a href="http://www.hammerspoon.org/">Hammerspoon</a>, with some helpers, though there are likely simpler options out there.
</p>

 <div class="org-src-container">
 <pre class="src src-lua"> <span style="color: #a71d5d;">function</span>  <span style="color: #795da3;">emacsExecute</span>(<span style="color: #333333;">activate</span>,  <span style="color: #333333;">elisp</span>)
    <span style="color: #a71d5d;">if</span> activate  <span style="color: #a71d5d;">then</span>
      activateFirstOf({
            {
               bundleID= <span style="color: #183691;">"org.gnu.Emacs"</span>,
               name= <span style="color: #183691;">"Emacs"</span>
            }
      })
    <span style="color: #a71d5d;">end</span>

    <span style="color: #a71d5d;">local</span>  <span style="color: #333333;">socket</span>,  <span style="color: #333333;">found</span> = emacsSocketPath()
    <span style="color: #a71d5d;">if</span>  <span style="color: #a71d5d;">not</span> found  <span style="color: #a71d5d;">then</span>
      hs.alert.show(<span style="color: #183691;">"Could not get emacs socket path"</span>)
       <span style="color: #a71d5d;">return</span>  <span style="color: #183691;">""</span>,  <span style="color: #0086b3;">false</span>
    <span style="color: #a71d5d;">end</span>

    <span style="color: #a71d5d;">local</span>  <span style="color: #333333;">output</span>, <span style="color: #333333;">success</span> = hs.execute(<span style="color: #183691;">"/opt/homebrew/bin/emacsclient -ne \""</span>..elisp.. <span style="color: #183691;">"\" -s "</span>..socket)
    <span style="color: #a71d5d;">if</span>  <span style="color: #a71d5d;">not</span> success  <span style="color: #a71d5d;">then</span>
      hs.alert.show(<span style="color: #183691;">"Emacs did not execute: "</span>..elisp)
       <span style="color: #a71d5d;">return</span>  <span style="color: #183691;">""</span>,  <span style="color: #0086b3;">false</span>
    <span style="color: #a71d5d;">end</span>

    <span style="color: #a71d5d;">return</span> output, success
 <span style="color: #a71d5d;">end</span>

 <span style="color: #a71d5d;">function</span>  <span style="color: #795da3;">openBookmark</span>()
   appRequestingEmacs = hs.application.frontmostApplication()
   emacsExecute(<span style="color: #0086b3;">false</span>,  <span style="color: #183691;">"(present-open-bookmark-frame)"</span>)
   activateFirstOf({
         {
            bundleID= <span style="color: #183691;">"org.gnu.Emacs"</span>,
            name= <span style="color: #183691;">"Emacs"</span>
         }
   })
 <span style="color: #a71d5d;">end</span>

hs.hotkey.bind({ <span style="color: #183691;">"alt"</span>},  <span style="color: #183691;">"W"</span>, openBookmark)
</pre>
</div>

 <p>
With that, we have our Emacs-powered bookmark launcher, available from anywhere.
</p>


 <div id="orgc6dc941" class="figure">
 <p> <img src="../images/building-your-own-bookmark-launcher/launcher.gif" alt="launcher.gif" width="100%"></img></p>
</div>

 <p>
While we used our Emacs frame presenter to summon our universal bookmark launcher, we can likely the same mechanism for other purposes. Maybe a clipboard (kill ring) manager?
</p>


 <div id="org7f398fb" class="figure">
 <p> <img src="../images/building-your-own-bookmark-launcher/kill-ring.png" alt="kill-ring.png" width="100%"></img></p>
</div>

 <p>
What would you use it for? Get in touch ( <a href="https://indieweb.social/@xenodium">Mastodon</a> /  <a href="https://twitter.com/xenodium">Twitter</a> /  <a href="https://www.reddit.com/user/xenodium">Reddit</a> /  <a href="mailto:me__AT__xenodium.com">Email</a>).
</p>

 <p>
 <i>Enjoying this content? Find it useful? Consider ✨ <a href="https://github.com/sponsors/xenodium">sponsoring</a>✨.</i></p>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/building-your-own-bookmark-launcher</link>
  <guid isPermaLink="false">http://xenodium.com/building-your-own-bookmark-launcher</guid>
  <pubDate>Wed, 29 Nov 2023 22:37:12 +0000</pubDate>
</item>
<item>
  <title>Native Emacs/macOS UX integrations via Swift modules</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-native-emacsmacos-ux-integrations-via-swift-modules" class="outline-2">
 <h2 id="native-emacsmacos-ux-integrations-via-swift-modules"> <span class="timestamp-wrapper"> <span class="timestamp">25 November 2023</span></span> Native Emacs/macOS UX integrations via Swift modules</h2>
 <div class="outline-text-2" id="text-native-emacsmacos-ux-integrations-via-swift-modules">
 <p>
Once you learn a little  <a href="https://en.wikipedia.org/wiki/Emacs_Lisp">elisp</a>,  <a href="https://www.gnu.org/software/emacs/">Emacs</a> becomes this hyper malleable editor/platform. A live playground of sorts, where almost everything is up for grabs at runtime. Throw some elisp at it, and you can customize or extend almost anything to your heart's content. I say almost, as there's a comparatively small native core, that would typically require recompiling if you wanted to make further (native) mods. But that isn't entirely true.  <a href="https://www.masteringemacs.org/article/whats-new-in-emacs-25-1">Emacs 25</a> enabled us to further extend things by loading native  <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Dynamic-Modules.html">dynamic modules</a>, back in 2016.
</p>

 <p>
Most of my Emacs-bending adventures have been powered by elisp, primarily on macOS. I also happen to have an iOS dev background, so when  <a href="https://github.com/SavchenkoValeriy">Valeriy Savchenko</a>  <a href="https://www.reddit.com/r/emacs/comments/wemj1z/writing_emacs_dynamic_modules_in_swift/">announced</a> his project bringing  <a href="https://github.com/SavchenkoValeriy/emacs-swift-module">Emacs dynamic modules powered by Swift</a>, I added it to my never-ending list of things to try out.
</p>

 <p>
Fast-forward to a year later, and  <a href="https://github.com/roife">Roife</a>'s  <a href="https://www.reddit.com/r/emacs/comments/17vrmrk/emt_emacs_macos_tokenizer_for_enhanced_cjk_word/">introduction</a> to  <a href="https://github.com/roife/emt">emt</a> finally gave me that much-needed nudge to give  <a href="https://github.com/SavchenkoValeriy/emacs-swift-module">emacs-swift-module</a> a try. While I wish I had done it earlier, I also wish  <a href="https://github.com/SavchenkoValeriy/emacs-swift-module">emacs-swift-module</a> had gotten more visibility. Native extensions written in Swift can open up some some neat integrations using native macOS UX/APIs.
</p>

 <p>
While I'm new to Savchenko's  <a href="https://github.com/SavchenkoValeriy/emacs-swift-module">emacs-swift-module</a>, the project has  <a href="https://savchenkovaleriy.github.io/emacs-swift-module/documentation/emacsswiftmodule/">wonderful documentation</a>. It quickly got me on my way to build an experimental dynamic module introducing a native context menu for sharing files from my beloved editor.
</p>


 <div id="orgff67e90" class="figure">
 <p> <img src="../images/native-emacsmacos-ux-integrations-via-swift-modules/emacs-share.webp" alt="emacs-share.webp" width="90%"></img></p>
</div>

 <p>
Most of the elisp/native bridging magic happens with fairly little Swift code:
</p>

 <div class="org-src-container">
 <pre class="src src-swift"> <span style="color: #a71d5d;">try</span> env. <span style="color: #795da3;">defun</span>(
   <span style="color: #183691;">"macos-module--share"</span>,
  with:  <span style="color: #183691;">"""</span>
 <span style="color: #183691;">    Share files in ARG1.</span>

 <span style="color: #183691;">    ARG1 must be a vector (not a list) of file paths.</span>
 <span style="color: #183691;">    """</span>
) { (env: Environment, files: [ <span style="color: #a71d5d;">String</span>])  <span style="color: #a71d5d;">in</span>
   <span style="color: #a71d5d;">let</span> urls = files. <span style="color: #a71d5d;">map</span> {  <span style="color: #a71d5d;">URL</span>(fileURLWithPath: $0) }

   <span style="color: #a71d5d;">let</span> picker =  <span style="color: #795da3;">NSSharingServicePicker</span>(items: urls)
   <span style="color: #a71d5d;">guard</span>  <span style="color: #a71d5d;">let</span> view = NSApp. <span style="color: #333333;">mainWindow</span>?. <span style="color: #333333;">contentView</span>  <span style="color: #a71d5d;">else</span> {
     <span style="color: #a71d5d;">return</span>
  }

   <span style="color: #a71d5d;">let</span> x =  <span style="color: #a71d5d;">try</span> env. <span style="color: #795da3;">funcall</span>(<span style="color: #183691;">"macos--emacs-point-x"</span>)  <span style="color: #a71d5d;">as</span>  <span style="color: #a71d5d;">Int</span>
   <span style="color: #a71d5d;">let</span> y =  <span style="color: #a71d5d;">try</span> env. <span style="color: #795da3;">funcall</span>(<span style="color: #183691;">"macos--emacs-point-y"</span>)  <span style="color: #a71d5d;">as</span>  <span style="color: #a71d5d;">Int</span>

   <span style="color: #a71d5d;">let</span> rect =  <span style="color: #a71d5d;">NSRect</span>(
    x: x + 15, y:  <span style="color: #a71d5d;">Int</span>(view. <span style="color: #333333;">bounds</span>. <span style="color: #333333;">height</span>) - y + 15, width: 1, height: 1
  )
  picker. <span style="color: #795da3;">show</span>(relativeTo: rect, of: view, preferredEdge: . <span style="color: #333333;">maxY</span>)
}
</pre>
</div>

 <p>
This produced an elisp  <code>macos-module--share</code> function I could easily access from elisp like so:
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">macos-share</span> ()
   <span style="color: #183691;">"Share file(s) with other macOS apps.</span>

 <span style="color: #183691;">If visiting a buffer with associated file, share it.</span>

 <span style="color: #183691;">While in `</span> <span style="color: #0086b3;">dired</span> <span style="color: #183691;">', any selected files, share those.  If region is</span>
 <span style="color: #183691;">active, share files in region.  Otherwise share file at point."</span>
  (<span style="color: #a71d5d;">interactive</span>)
  (macos-module--share (vconcat (macos--files-dwim))))
</pre>
</div>

 <p>
On a side note,  <code>(macos--files-dwim)</code> chooses files depending on context. That is,  <a href="https://xenodium.com/emacs-dwim-do-what-i-mean/">do what I mean (DWIM) style</a>. If there's a file associated with current buffer, share it. When in  <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Dired.html">dired</a> (the directory editor, aka file manager), look at region, selected files, or default to file at point.
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">macos--files-dwim</span> ()
   <span style="color: #183691;">"Return buffer file (if available) or marked/region files for a `</span> <span style="color: #0086b3;">dired</span> <span style="color: #183691;">' buffer."</span>
  (<span style="color: #a71d5d;">if</span> (buffer-file-name)
      (list (buffer-file-name))
    (<span style="color: #a71d5d;">or</span>
     (macos--dired-paths-in-region)
     (dired-get-marked-files))))

(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">macos--dired-paths-in-region</span> ()
   <span style="color: #183691;">"If `</span> <span style="color: #0086b3;">dired</span> <span style="color: #183691;">' buffer, return region files.  nil otherwise."</span>
  (<span style="color: #a71d5d;">when</span> (<span style="color: #a71d5d;">and</span> (equal major-mode 'dired-mode)
             (use-region-p))
    (<span style="color: #a71d5d;">let</span> ((start (region-beginning))
          (end (region-end))
          (paths))
      (<span style="color: #a71d5d;">save-excursion</span>
        (<span style="color: #a71d5d;">save-restriction</span>
          (goto-char start)
          (<span style="color: #a71d5d;">while</span> (< (point) end)
             <span style="color: #969896;">;; </span> <span style="color: #969896;">Skip non-file lines.</span>
            (<span style="color: #a71d5d;">while</span> (<span style="color: #a71d5d;">and</span> (< (point) end) (dired-between-files))
              (forward-line 1))
            (<span style="color: #a71d5d;">when</span> (dired-get-filename nil t)
              (<span style="color: #a71d5d;">setq</span> paths (append paths (list (dired-get-filename nil t)))))
            (forward-line 1))))
      paths)))
</pre>
</div>

 <p>
I got one more example of a native macOS integration I added. Being an even simpler one, and in hindsight, I prolly should have introduced it first. In any case, this one reveals  <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Dired.html">dired</a> files in macOS's Finder app (including the selection itself).
</p>


 <div id="orgc222c8f" class="figure">
 <p> <img src="../images/native-emacsmacos-ux-integrations-via-swift-modules/reveal.webp" alt="reveal.webp" width="100%"></img></p>
</div>

 <div class="org-src-container">
 <pre class="src src-swift"> <span style="color: #a71d5d;">try</span> env. <span style="color: #795da3;">defun</span>(
   <span style="color: #183691;">"macos-module--reveal-in-finder"</span>,
  with:  <span style="color: #183691;">"""</span>
 <span style="color: #183691;">    Reveal (and select) files in ARG1 in macOS Finder.</span>

 <span style="color: #183691;">    ARG1 mus be a vector (not a list) of file paths.</span>
 <span style="color: #183691;">    """</span>
) { (env: Environment, files: [ <span style="color: #a71d5d;">String</span>])  <span style="color: #a71d5d;">in</span>
  NSWorkspace. <span style="color: #a71d5d;">shared</span>. <span style="color: #795da3;">activateFileViewerSelecting</span>(files. <span style="color: #a71d5d;">map</span> {  <span style="color: #a71d5d;">URL</span>(fileURLWithPath: $0) })
}
</pre>
</div>

 <p>
The corresponding elisp is nearly identical to its  <code>macos-share</code> sibling:
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">macos-reveal-in-finder</span> ()
   <span style="color: #183691;">"Reveal file(s) in macOS Finder.</span>

 <span style="color: #183691;">If visiting a buffer with associated file, reveal it.</span>

 <span style="color: #183691;">While in `</span> <span style="color: #0086b3;">dired</span> <span style="color: #183691;">', any selected files, reveal those.  If region is</span>
 <span style="color: #183691;">active, reveal files in region.  Otherwise reveal file at point."</span>
  (<span style="color: #a71d5d;">interactive</span>)
  (macos-module--reveal-in-finder (vconcat (macos--files-dwim))))
</pre>
</div>

 <p>
My Swift module experiment introduces two native macOS UX integrations, now available via  <code>M-x macos-share</code> and  <code>M-x macos-reveal-in-finder</code>. I've pushed all code to it's own  <a href="https://github.com/xenodium/EmacsMacOSModule">repo</a>.
</p>

 <p>
I hope this post brings visibility to the wonderful  <a href="https://github.com/SavchenkoValeriy/emacs-swift-module">emacs-swift-module</a> project and sparks new, native, and innovative integrations for those on macOS. Can't wait to see what others can do with it.
</p>

 <p>
 <i>Enjoying this content? Find it useful? Consider ✨ <a href="https://github.com/sponsors/xenodium">sponsoring</a>✨.</i>
</p>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/native-emacsmacos-ux-integrations-via-swift-modules</link>
  <guid isPermaLink="false">http://xenodium.com/native-emacsmacos-ux-integrations-via-swift-modules</guid>
  <pubDate>Sat, 25 Nov 2023 19:30:22 +0000</pubDate>
</item>
<item>
  <title>Open in Xcode at line number</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-open-in-xcode-at-line-number" class="outline-2">
 <h2 id="open-in-xcode-at-line-number"> <span class="timestamp-wrapper"> <span class="timestamp">24 October 2023</span></span> Open in Xcode at line number</h2>
 <div class="outline-text-2" id="text-open-in-xcode-at-line-number">
 <p>
I live mostly in Emacs. I say mostly 'cause well, I'm fairly pragmatic about it. If there's a workflow elsewhere that's more appropriate for my needs, I'll happily use that instead. While I'd love to do my web browsing from my beloved editor, Firefox ticks the right boxes for me.
</p>

 <p>
I do most of my iOS coding in Emacs. It's a hybrid of sorts between Emacs and Xcode. If I need to use the debugger, Xcode is a clear winner for me. If I happen to be visiting a Swift file in an Emacs buffer, I typically used the handy  <code>crux-open-with</code> from  <a href="https://github.com/bbatsov/crux">crux</a> to open in Xcode, and continue from there. This worked OK, but I always wished opening in Xcode would also jump to the same line number as the Emacs point (cursor) location. This is particularly useful if I had just spotted where I'd like to set a breakpoint in an Emacs buffer and need to transition over to Xcode.
</p>

 <p>
It turns out, there's a nifty command line utility for that.  <a href="https://www.unix.com/man-page/osx/1/xed/">xed</a>, the Xcode text editor invocation tool. It enables telling Xcode what file to open and at what line number:
</p>

 <div class="org-src-container">
 <pre class="src src-sh">xed -line 141 path/to/some/file.swift
</pre>
</div>

 <p>
With that in mind, I've added my own version of  <code>crux-open-with</code>, using  <a href="https://github.com/xenodium/dwim-shell-command">dwim-shell-command</a>.
</p>

 <p>
When running on macOS, the function checks whether or not I'm visiting a buffer for a programming language, and opens the file in Xcode at the same line number.
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">dwim-shell-commands-open-externally</span> ()
   <span style="color: #183691;">"Open file(s) externally."</span>
  (<span style="color: #a71d5d;">interactive</span>)
  (dwim-shell-command-on-marked-files
    <span style="color: #183691;">"Open externally"</span>
   (<span style="color: #a71d5d;">if</span> (eq system-type 'darwin)
       (<span style="color: #a71d5d;">if</span> (derived-mode-p 'prog-mode)
           (format  <span style="color: #183691;">"xed --line %d '</span> <span style="color: #0086b3;"><<f>></span> <span style="color: #183691;">'"</span>
                   (line-number-at-pos (point)))
          <span style="color: #183691;">"open '</span> <span style="color: #0086b3;"><<f>></span> <span style="color: #183691;">'"</span>)
      <span style="color: #183691;">"xdg-open '</span> <span style="color: #0086b3;"><<f>></span> <span style="color: #183691;">'"</span>)
    <span style="color: #a71d5d;">:shell-args</span> '(<span style="color: #183691;">"-x"</span>  <span style="color: #183691;">"-c"</span>)
    <span style="color: #a71d5d;">:silent-success</span> t
    <span style="color: #a71d5d;">:utils</span> (<span style="color: #a71d5d;">if</span> (eq system-type 'darwin)
               <span style="color: #183691;">"open"</span>
             <span style="color: #183691;">"xdg-open"</span>)))
</pre>
</div>


 <div id="org2dd672e" class="figure">
 <p> <img src="../images/open-in-xcode-at-line-number/xed_x0.8_x2.webp" alt="xed_x0.8_x2.webp" width="80%"></img></p>
</div>

 <p>
 <code>dwim-shell-commands-open-externally</code> is now  <a href="https://github.com/xenodium/dwim-shell-command/commit/19be1c2f3792c95f04fd369cb931a52f7df9cfd5">added to dwim-shell-commands.el</a>.
</p>

 <p>
ps. If you find opening the same file in a different context handy, you may also like the package  <a href="https://github.com/rmuslimov/browse-at-remote">browse-at-remote</a> that opens the visited file at its corresponding remote location (for example, GitHub). I can never remember the name of the function ( <a href="https://github.com/rmuslimov/browse-at-remote">browse-at-remote</a>), so I aliased it to something I'd remember and moved on…
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">defalias</span> ' <span style="color: #795da3;">ar/open-at-github</span> #'browse-at-remote))
</pre>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/open-in-xcode-at-line-number</link>
  <guid isPermaLink="false">http://xenodium.com/open-in-xcode-at-line-number</guid>
  <pubDate>Tue, 24 Oct 2023 15:02:17 +0100</pubDate>
</item>
<item>
  <title>Creating an iCloud account (via tart VM)</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-creating-icloud-test-accounts" class="outline-2">
 <h2 id="creating-icloud-test-accounts"> <span class="timestamp-wrapper"> <span class="timestamp">06 October 2023</span></span> Creating an iCloud account (via tart VM)</h2>
 <div class="outline-text-2" id="text-creating-icloud-test-accounts">
 <p>
I wanted an additional @icloud.com account for myself. My first thought was to head over to  <a href="https://developer.apple.com">https://developer.apple.com</a> and create a new account, but that requires an existing email address. I wanted an actual @icloud.com email address.
</p>


 <div id="orgf027f0b" class="figure">
 <p> <img src="../images/creating-icloud-test-accounts/web.png" alt="web.png" width="80%"></img></p>
</div>

 <p>
My next thought was to create a new account using the iOS simulator, but that complained about creating too many accounts already. Strange, as I hadn't created any.
</p>


 <div id="orgac4cfcd" class="figure">
 <p> <img src="../images/creating-icloud-test-accounts/iphone.png" alt="iphone.png" width="60%"></img></p>
</div>

 <p>
I could create an account from macOS settings itself, though that would require logging out my current account (and the syncing implications). To get around that, I could maybe create a temporary macOS user. Instead, I somewhat revisited the simulator route and looked for a VM option to run macOS. This gave me an excuse to play with VM options on macOS.
</p>

 <p>
I had been meaning to check out  <a href="https://github.com/lima-vm/lima">lima</a> as per Hacker News's  <a href="https://news.ycombinator.com/item?id=36668964">Lima: A nice way to run Linux VMs on Mac</a>. The Hacker News's  <a href="https://news.ycombinator.com/item?id=36668964">thread</a> has a handful of great recommendations. Amongst them,  <a href="https://github.com/cirruslabs/tart/">tart</a> (macOS and Linux VMs on Apple Silicon) stood out, as it also gave me the Mac on Mac option.
</p>

 <p>
Installing  <code>tart</code> via  <a href="https://brew.sh/">Homebrew</a> followed the typical  <code>brew</code> command… a breeze via my trusty Emacs  <a href="https://www.masteringemacs.org/article/complete-guide-mastering-eshell">eshell</a>:
</p>

 <div class="org-src-container">
 <pre class="src src-sh">brew install cirruslabs/cli/tart
</pre>
</div>

 <p>
Cloning a VM image, while straightforward, it did take a little while for the chunky download:
</p>

 <div class="org-src-container">
 <pre class="src src-sh">tart clone ghcr.io/cirruslabs/macos-sonoma-base:latest sonoma-base
</pre>
</div>

 <p>
Running the macOS Sonoma VM was a breeze:
</p>

 <div class="org-src-container">
 <pre class="src src-sh">tart run sonoma-base
</pre>
</div>

 <p>
…and with that, I got a full (and disposable) macOS VM I can use to create another @icloud.com account:
</p>


 <div id="org6b944ec" class="figure">
 <p> <img src="../images/creating-icloud-test-accounts/sonoma1.png" alt="sonoma1.png" width="95%"></img></p>
</div>


 <div id="org8ab869b" class="figure">
 <p> <img src="../images/creating-icloud-test-accounts/sonoma2.png" alt="sonoma2.png" width="95%"></img></p>
</div>

 <p>
While there may be simpler options out there to create an @icloud.com account (please do let me know  <a href="https://indieweb.social/@xenodium">mastodon</a>/ <a href="https://twitter.com/xenodium">twitter</a>), the VM did the job. I'd been meaning to find a low friction mechanism to run VMs for a different reason, but that's a post for another time.
</p>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/creating-icloud-test-accounts</link>
  <guid isPermaLink="false">http://xenodium.com/creating-icloud-test-accounts</guid>
  <pubDate>Fri, 06 Oct 2023 11:00:27 +0100</pubDate>
</item>
<item>
  <title>Displaying image details in mode line</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-displaying-image-details-in-mode-line" class="outline-2">
 <h2 id="displaying-image-details-in-mode-line"> <span class="timestamp-wrapper"> <span class="timestamp">06 October 2023</span></span> Displaying image details in mode line</h2>
 <div class="outline-text-2" id="text-displaying-image-details-in-mode-line">
 <p>
A benefit of running Emacs as a GUI app, is that you can view images from your beloved editor. This is super handy to take a quick peek at any image.
</p>

 <p>
Sometimes, I'd like a little more than just viewing the image. I'd like to see basic image details like type, dimensions, and file size. The  <a href="https://imagemagick.org/">imagemagick</a>  <code>identify</code> utility is pretty handy for that.
</p>

 <div class="org-src-container">
 <pre class="src src-bash">identify -format "%m %wx%h %b" path/to/image.png
</pre>
</div>

 <pre class="example">
PNG 2387x1055 2.28454MB
</pre>


 <p>
I could easily invoke  <code>shell-command</code> for this or even create a dwim-shell-command function (maybe I will), but if this info was proactively displayed in the mode line, I wouldn't have to fetch it myself.
</p>

 <p>
Since I know I can use the  <code>identify</code> command for this, I may as well see if I can plug it into the mode line.
</p>

 <p>
Turns out this wasn't too bad by setting  <code>setting mode-line-format</code>. I added a little logic to only include image details while in  <code>image-mode</code> and rely on  <code>process-lines</code> to fetch the details. This function returns a list, which is a happy coincidence since  <code>mode-line-format</code> also expects a list.
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">setq-default</span> mode-line-format
              '(<span style="color: #183691;">" "</span>
                mode-line-front-space
                mode-line-client
                mode-line-frame-identification
                mode-line-buffer-identification
                (<span style="color: #a71d5d;">:eval</span>
                 (<span style="color: #a71d5d;">when</span> (eq major-mode 'image-mode)
                    <span style="color: #969896;">;; </span> <span style="color: #969896;">Needs imagemagick installed.</span>
                   (process-lines  <span style="color: #183691;">"identify"</span>  <span style="color: #183691;">"-format"</span>  <span style="color: #183691;">"[%m %wx%h %b]"</span> (buffer-file-name))))
                 <span style="color: #183691;">" "</span>
                mode-line-position
                (vc-mode vc-mode)
                (multiple-cursors-mode mc/mode-line)
                 <span style="color: #183691;">" "</span> mode-line-modes
                mode-line-end-spaces))
</pre>
</div>


 <div id="org42ef086" class="figure">
 <p> <img src="../images/displaying-image-details-in-mode-line/buddies.png" alt="buddies.png" width="70%"></img></p>
</div>

 <p>
I'd love to hear if there's a pure elisp alternative ( <a href="https://indieweb.social/@xenodium">mastodon</a>/ <a href="https://twitter.com/xenodium">twitter</a>). I gave  <code>(image-size (image-get-display-property) :pixels)</code> a try, but that seemed to return the display size in buffer rather than actual file size.
</p>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/displaying-image-details-in-mode-line</link>
  <guid isPermaLink="false">http://xenodium.com/displaying-image-details-in-mode-line</guid>
  <pubDate>Fri, 06 Oct 2023 11:48:27 +0100</pubDate>
</item>
<item>
  <title>Trimming video screenshots</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-trimming-video-screenshots" class="outline-2">
 <h2 id="trimming-video-screenshots"> <span class="timestamp-wrapper"> <span class="timestamp">06 October 2023</span></span> Trimming video screenshots</h2>
 <div class="outline-text-2" id="text-trimming-video-screenshots">
 <p>
A quick one… I recently wanted to trim the black borders around a video screenshot. While I could use an image editor to manually select and trim, I wondered if there was an  <a href="https://imagemagick.org/">imagemagick</a> trick somewhere out there for such a thing… and of course there was:
</p>

 <div class="org-src-container">
 <pre class="src src-sh">magick convert -fuzz 3% -define trim:percent-background=0% -trim +repage path/to/input.png path/to/output.png
</pre>
</div>

 <p>
Pretty neat. It does the job, but I won't remember it next time. May as well make another  <a href="https://github.com/xenodium/dwim-shell-command">dwim-shell-command</a> function out of it and conveniently invoke from Emacs via a memorable name plus fuzzy search.
</p>


 <div id="org95e6689" class="figure">
 <p> <img src="../images/trimming-video-screenshots/trim.gif" alt="trim.gif" width="80%"></img></p>
</div>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">dwim-shell-commands-image-trim-borders</span> ()
   <span style="color: #183691;">"Trim image(s) border (useful for video screenshots)."</span>
  (<span style="color: #a71d5d;">interactive</span>)
  (dwim-shell-command-on-marked-files
    <span style="color: #183691;">"Trim image border"</span>
    <span style="color: #183691;">"magick convert -fuzz 3% -define trim:percent-background=0% -trim +repage '</span> <span style="color: #0086b3;"><<f>></span> <span style="color: #183691;">' '</span> <span style="color: #0086b3;"><<fne>>_trimmed.<<e>></span> <span style="color: #183691;">'"</span>
    <span style="color: #a71d5d;">:utils</span>  <span style="color: #183691;">"magick"</span>))
</pre>
</div>

 <p>
While the screenshot I've just used was a little blurry, it's from the movie  <a href="https://www.imdb.com/title/tt1104001/">Tron Legacy</a>, and it features Emacs eshell. This is old news, though  <a href="https://irreal.org/blog/?p=9573">well covered</a>.
</p>


 <div id="org8976643" class="figure">
 <p> <img src="../images/trimming-video-screenshots/eshell_trimmed.png" alt="eshell_trimmed.png" width="95%"></img></p>
</div>

 <p>
 <code>dwim-shell-commands-image-trim-borders</code> is now  <a href="https://github.com/xenodium/dwim-shell-command/commit/5bed2f6b40761db4913c8d8f58bb147c71a9ceb7">added to dwim-shell-commands.el</a>
</p>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/trimming-video-screenshots</link>
  <guid isPermaLink="false">http://xenodium.com/trimming-video-screenshots</guid>
  <pubDate>Fri, 06 Oct 2023 15:35:53 +0100</pubDate>
</item>
<item>
  <title>Emacs hangs saving .authinfo.gpg (workaround)</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-emacs-hangs-saving-authinfogpg-workaround" class="outline-2">
 <h2 id="emacs-hangs-saving-authinfogpg-workaround"> <span class="timestamp-wrapper"> <span class="timestamp">16 September 2023</span></span> Emacs hangs saving .authinfo.gpg (workaround)</h2>
 <div class="outline-text-2" id="text-emacs-hangs-saving-authinfogpg-workaround">
 <p>
My Emacs (v29.1) was hanging when saving changes to .authinfo.gpg. Turns out, I ran into a  <a href="http://git.savannah.gnu.org/cgit/emacs.git/commit/etc/PROBLEMS?id=1b9812af80b6ceec8418636dbf84c0fbcd3ab694">known issue</a> with a workaround. Downgrading gnupgp to a version older than 2.4.1 sorts things out.
</p>

 <p>
I'm on macOS. Downgraded by downloading the 2.4.0 Homebrew formula at  <a href="https://raw.githubusercontent.com/Homebrew/homebrew-core/59edfe598541186430d49cc34f42671e849e2fc9/Formula/gnupg.rb">https://raw.githubusercontent.com/Homebrew/homebrew-core/59edfe598541186430d49cc34f42671e849e2fc9/Formula/gnupg.rb</a> and installing with:
</p>

 <div class="org-src-container">
 <pre class="src src-sh">brew unlink gnupg
brew install ~/Downloads/gnupg.rb
</pre>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/emacs-hangs-saving-authinfogpg-workaround</link>
  <guid isPermaLink="false">http://xenodium.com/emacs-hangs-saving-authinfogpg-workaround</guid>
  <pubDate>Sat, 16 Sep 2023 14:59:49 +0100</pubDate>
</item>
<item>
  <title>Send note to Kindle</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-emacs-send-to-kindle" class="outline-2">
 <h2 id="emacs-send-to-kindle"> <span class="timestamp-wrapper"> <span class="timestamp">15 September 2023</span></span> Send note to Kindle</h2>
 <div class="outline-text-2" id="text-emacs-send-to-kindle">
 <p>
While on Mastodon, I spotted  <a href="https://indieweb.social/@summeremacs@fashionsocial.host">@summeremacs</a> looking into  <a href="https://indieweb.social/@summeremacs@fashionsocial.host/111058226788825431">sending Emacs text selections to a Kindle via email</a>. This sparked my interest as I previously looked into  <a href="https://xenodium.com/emailing-pdfs-to-kindle-from-mu4e/">sending pdfs to my Kindle</a> via  <a href="https://github.com/djcb/mu">mu4e</a>.
</p>

 <p>
Kindle offers a neat service where you can email a file to your  <code>@kindle.com</code> address and it automatically shows up in your Kindle library.
</p>

 <p>
I already do email from my beloved editor, and like most Emacs things, it's powered by  <a href="https://en.wikipedia.org/wiki/Emacs_Lisp">elisp</a>. In other words, it's basically up for grabs if you'd like to glue it to anything else, so I did…
</p>

 <p>
I can now select a region and invoke  <code>M-x send-to-kindle-as-txt</code> to send it over to my Kindle.
</p>


 <div id="org2cab0d4" class="figure">
 <p> <img src="../images/emacs-send-to-kindle/send-to-my-kindle.gif" alt="send-to-my-kindle.gif" width="80%"></img></p>
</div>

 <p>
Soon enough, the note shows up on my Kindle.
</p>


 <div id="orgda402b9" class="figure">
 <p> <img src="../images/emacs-send-to-kindle/listed.png" alt="listed.png" width="70%"></img></p>
</div>

 <p>
Opening the note reveals the same content we had previously selected and sent from our malleable editor.
</p>


 <div id="org0b76b44" class="figure">
 <p> <img src="../images/emacs-send-to-kindle/repeated.png" alt="repeated.png" width="70%"></img></p>
</div>

 <p>
While it looks kinda magical, it's fairly simple under the hood. It takes the region content, writes it to a txt file, creates an email message buffer attaching the file, and finally sends via  <code>message-send-and-exit</code>.
</p>

 <p>
If  <code>M-x send-to-kindle-as-txt</code> is invoked with a  <code>C-u</code> prefix, you get to inspect the message buffer right before sending via  <code>C-c C-c</code>.
</p>


 <div id="org466f88c" class="figure">
 <p> <img src="../images/emacs-send-to-kindle/email.png" alt="email.png" width="95%"></img></p>
</div>

 <p>
Here's the full snippet.
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">defcustom</span>  <span style="color: #333333;">send-to-kindle-from-email</span>
  nil
   <span style="color: #183691;">"Your own email address to send from via mu4e."</span>
   <span style="color: #a71d5d;">:type</span> 'string
   <span style="color: #a71d5d;">:group</span> 'send-to-kindle)

(<span style="color: #a71d5d;">defcustom</span>  <span style="color: #333333;">send-to-kindle-to-email</span>
  nil
   <span style="color: #183691;">"Your Kindle email address to send pdf to."</span>
   <span style="color: #a71d5d;">:type</span> 'string
   <span style="color: #a71d5d;">:group</span> 'send-to-kindle)

(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">send-to-kindle-as-txt</span> (review)
  (<span style="color: #a71d5d;">interactive</span>  <span style="color: #183691;">"P"</span>)
  (<span style="color: #a71d5d;">unless</span> send-to-kindle-from-email
    (<span style="color: #a71d5d;">setq</span> send-to-kindle-from-email
          (read-string  <span style="color: #183691;">"From email address: "</span>)))
  (<span style="color: #a71d5d;">unless</span> send-to-kindle-to-email
    (<span style="color: #a71d5d;">setq</span> send-to-kindle-to-email
          (read-string  <span style="color: #183691;">"To email address: "</span>)))
  (<span style="color: #a71d5d;">let*</span> ((content (string-trim (<span style="color: #a71d5d;">if</span> (region-active-p)
                                   (buffer-substring (region-beginning) (region-end))
                                 (buffer-string))))
         (note-name (<span style="color: #a71d5d;">let</span> ((name (string-trim (read-string  <span style="color: #183691;">"Note name: "</span>))))
                      (<span style="color: #a71d5d;">if</span> (string-empty-p name)
                          (nth
                           0 (string-split
                              (substring content 0 (min 40 (length content)))  <span style="color: #183691;">"\n"</span>))
                        name)))
         (path (concat (temporary-file-directory) note-name))
         (txt (concat path  <span style="color: #183691;">".txt"</span>))
         (buffer (get-buffer-create (generate-new-buffer-name  <span style="color: #183691;">"*Email txt*"</span>))))
    (<span style="color: #a71d5d;">with-temp-buffer</span>
      (insert content)
      (write-file txt))
    (<span style="color: #a71d5d;">with-current-buffer</span> buffer
      (erase-buffer)
       <span style="color: #969896;">;; </span> <span style="color: #969896;">Disable hooks</span>
      (<span style="color: #a71d5d;">let</span> ((message-mode-hook nil))
        (message-mode))
      (insert
       (format
         <span style="color: #183691;">"From: %s</span>
 <span style="color: #183691;">To: %s</span>
 <span style="color: #183691;">Subject: %s</span>
 <span style="color: #183691;">--text follows this line--</span>
 <span style="color: #183691;"><#multipart type=mixed></span>
 <span style="color: #183691;"><#part type=\"text/plain\" filename=\"%s\" disposition=attachment></span>
 <span style="color: #183691;"><#/part></span>
 <span style="color: #183691;"><#/multipart>"</span>
        send-to-kindle-from-email
        send-to-kindle-to-email
        note-name txt))
      (<span style="color: #a71d5d;">unless</span> review
        (message-send-and-exit)))
    (<span style="color: #a71d5d;">when</span> review
      (switch-to-buffer buffer))))
</pre>
</div>

 <p>
By the way, and I only just learned this today… To take a screenshot on a Kindle Paperwhite, tap on these opposite corners.
</p>


 <div id="org3d51667" class="figure">
 <p> <img src="../images/emacs-send-to-kindle/tap-screenshot.png" alt="tap-screenshot.png" width="70%"></img></p>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/emacs-send-to-kindle</link>
  <guid isPermaLink="false">http://xenodium.com/emacs-send-to-kindle</guid>
  <pubDate>Fri, 15 Sep 2023 00:00:00 +0100</pubDate>
</item>
<item>
  <title>Redact that buffer</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-redact-that-buffer" class="outline-2">
 <h2 id="redact-that-buffer"> <span class="timestamp-wrapper"> <span class="timestamp">15 September 2023</span></span> Redact that buffer</h2>
 <div class="outline-text-2" id="text-redact-that-buffer">
 <p>
As I was getting ready to take an Emacs screenshot in the  <a href="https://xenodium.com/emacs-send-to-kindle/">previous post</a>, I figured I may want to redact email addresses before moving forward. I had a quick look for existing options and found  <a href="https://github.com/bkaestner/redacted.el">redacted.el</a>, built-in  <code>toggle-rot13-mode</code>, and  <a href="https://github.com/alphapapa/unpackaged.el#obfuscate-buffer-text-with-lorem-ipsum-words">unpackaged/lorem-ipsum-overlay</a>. All great options. I wanted a solution I could feed a single regular expression to obscure matches. I also wanted toggling capabilities, so I had a quick go at it…
</p>



 <div id="org32866c4" class="figure">
 <p> <img src="../images/redact-that-buffer/redact-regexp.gif" alt="redact-regexp.gif" width="98%"></img></p>
</div>


 <p>
I also wanted the ability to redact the entire buffer content, so feeding a space to the regexp query also translates to  <code>[[:graph:]]</code>, effectively redacting all visible characters.
</p>


 <div id="org157aa77" class="figure">
 <p> <img src="../images/redact-that-buffer/redact-all.gif" alt="redact-all.gif" width="98%"></img></p>
</div>

 <p>
The solution is overlay-based, ensuring the buffer content remains unchanged. The function may have its own rough edges, yet it certainly scratched the itch for the current need. I'll leave ya with the snippet.
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">ar/toggle-redact-buffer</span> ()
   <span style="color: #183691;">"Redact buffer content matching regexp. A space redacts all."</span>
  (<span style="color: #a71d5d;">interactive</span>)
  (<span style="color: #a71d5d;">let*</span> ((redacted)
         (regexp (string-trim (read-regexp  <span style="color: #183691;">"Redact regexp"</span> 'regexp-history-last)))
         (matches (<span style="color: #a71d5d;">let</span> ((results '()))
                    (<span style="color: #a71d5d;">when</span> (string-empty-p regexp)
                      (<span style="color: #a71d5d;">setq</span> regexp  <span style="color: #183691;">"[[:graph:]]"</span>)
                      (<span style="color: #a71d5d;">setq</span> regexp-history-last regexp)
                      (add-to-history 'regexp-history regexp))
                    (<span style="color: #a71d5d;">save-excursion</span>
                      (goto-char (point-min))
                      (<span style="color: #a71d5d;">while</span> (re-search-forward regexp nil t)
                        (<span style="color: #a71d5d;">push</span> (cons (match-beginning 0) (match-end 0)) results)))
                    (nreverse results))))
    (mapc (<span style="color: #a71d5d;">lambda</span> (match)
            (<span style="color: #a71d5d;">dolist</span> (overlay (overlays-in (car match) (cdr match)))
              (<span style="color: #a71d5d;">setq</span> redacted t)
              (delete-overlay overlay))
            (<span style="color: #a71d5d;">unless</span> redacted
              (overlay-put (make-overlay (car match) (cdr match))
                           'display (make-string (- (cdr match) (car match)) ?x))))
          matches)))
</pre>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/redact-that-buffer</link>
  <guid isPermaLink="false">http://xenodium.com/redact-that-buffer</guid>
  <pubDate>Fri, 15 Sep 2023 19:03:36 +0100</pubDate>
</item>
<item>
  <title>SHA-256 hash from URL, the easy way</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-sha-256-hash-from-url-the-easy-way" class="outline-2">
 <h2 id="sha-256-hash-from-url-the-easy-way"> <span class="timestamp-wrapper"> <span class="timestamp">10 September 2023</span></span> SHA-256 hash from URL, the easy way</h2>
 <div class="outline-text-2" id="text-sha-256-hash-from-url-the-easy-way">
 <p>
From time to time, I need to generate a SHA-256 hash from a file hosted on some server. For me, this flow typically goes something along the lines of:
</p>

 <ul class="org-ul"> <li>Copy the file URL from browser.</li>
 <li>Drop to Emacs eshell.</li>
 <li>Change current directory.</li>
 <li>Type "curl -o file"</li>
 <li>Paste the file URL.</li>
 <li>Run curl command.</li>
 <li>Type "shasum -a 256 file".</li>
 <li>Run  <a href="https://linux.die.net/man/1/shasum">shasum</a> command.</li>
 <li>Copy the generated hash.</li>
 <li>Maybe delete the downloaded file?</li>
</ul> <p>
We can maybe shave some steps off by downloading directly from the browser, though that may also bring additional clicks and navigating to a download location.
</p>

 <p>
Amongst the steps,  <a href="https://linux.die.net/man/1/shasum">shasum</a> is the star player, and its output can be seen below.
</p>

 <div class="org-src-container">
 <pre class="src src-bash">shasum -a 256 path/to/downloaded/file
</pre>
</div>

 <pre class="example">
3da351027e5b1495c7c7fe4abbf8d7ac9625da3604be5a35c9a9cbb92f6f955a  path/to/downloaded/file
</pre>


 <p>
Not a huge deal. One can copy the hash from the output, but why go through multiple small manual steps when I know I can get Emacs to simplify the lot? I've expedited a similar flow in the past when  <a href="https://xenodium.com/emacs-clone-git-repo-from-clipboard/">cloning git repos</a>. Let's simplify again so hashing a hosted file boils down to:
</p>

 <ul class="org-ul"> <li>Copy the file URL from browser.</li>
 <li>Run an Emacs interactive command.</li>
</ul> <p>
This is where I pull out  <a href="https://github.com/xenodium/dwim-shell-command">dwim-shell-command</a> (a little package I wrote) and glue the lot to get an expedited experience.
</p>


 <div id="orgaf5b7eb" class="figure">
 <p> <img src="../images/sha-256-hash-from-url-the-easy-way/hash.gif" alt="hash.gif" width="100%"></img></p>
</div>

 <p>
There isn't much to the function other than glueing a little elisp and a shell script via  <code>dwim-shell-command</code> for some buffer/error handling.
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">dwim-shell-commands-sha-256-hash-file-at-clipboard-url</span> ()
   <span style="color: #183691;">"Download file at clipboard URL and generate SHA-256 hash."</span>
  (<span style="color: #a71d5d;">interactive</span>)
  (<span style="color: #a71d5d;">let</span> ((url (current-kill 0)))
    (<span style="color: #a71d5d;">unless</span> (string-match-p  <span style="color: #183691;">"^http[s]?://"</span> url)
      (<span style="color: #333333;">user-error</span>  <span style="color: #183691;">"No URL in clipboard"</span>))
    (dwim-shell-command-on-marked-files
      <span style="color: #183691;">"Generate SHA-256 hash from clipboard URL."</span>
     (format
       <span style="color: #183691;">"temp_file=$(mktemp)</span>
 <span style="color: #183691;">       function cleanup {</span>
 <span style="color: #183691;">         rm -f $temp_file</span>
 <span style="color: #183691;">       }</span>
 <span style="color: #183691;">       trap cleanup EXIT</span>
 <span style="color: #183691;">       curl --no-progress-meter --location --fail --output $temp_file %s || exit 1</span>
 <span style="color: #183691;">       shasum -a 256 $temp_file | awk '{print $1}'"</span>
      (shell-quote-argument url))
      <span style="color: #a71d5d;">:utils</span> '(<span style="color: #183691;">"curl"</span>  <span style="color: #183691;">"shasum"</span>)
      <span style="color: #a71d5d;">:on-completion</span>
     (<span style="color: #a71d5d;">lambda</span> (buffer process)
       (<span style="color: #a71d5d;">if-let</span> ((success (= (process-exit-status process) 0))
                (hash (<span style="color: #a71d5d;">with-current-buffer</span> buffer
                        (string-trim (buffer-string)))))
           (<span style="color: #a71d5d;">progn</span>
             (kill-buffer buffer)
             (kill-new hash)
             (message  <span style="color: #183691;">"Copied %s to clipboard"</span>
                      (propertize hash 'face 'font-lock-string-face)))
         (switch-to-buffer buffer))))))
</pre>
</div>

 <p>
 <code>dwim-shell-commands-sha-256-hash-file-at-clipboard-url</code> is now in  <a href="https://github.com/xenodium/dwim-shell-command/blob/main/dwim-shell-commands.el">dwim-shell-commands.el</a>, the optional counterpart in  <a href="https://github.com/xenodium/dwim-shell-command/">dwim-shell-command</a>.
</p>
</div>

 <div id="outline-container-orgae535e0" class="outline-3">
 <h3 id="orgae535e0">UPDATE</h3>
 <div class="outline-text-3" id="text-orgae535e0">
 <p>
There's better way. Thanks to  <a href="https://emacs.ch/@pkal">Philip Kaludercic</a> for  <a href="https://emacs.ch/@pkal/111041928308815477">suggesting</a>  <code>curl -s example.com | sha256sum - | cut -d " " -f1</code>
and  <a href="https://emacs.ch/@sachac">Sacha Chua</a> who pinged me about it.
</p>

 <p>
Also note I'm now relying on the  <code><<cb>></code> template, since dwim-shell-command replaces it with the clipboard/kill ring.
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">dwim-shell-commands-sha-256-hash-file-at-clipboard-url</span> ()
   <span style="color: #183691;">"Download file at clipboard URL and generate SHA-256 hash."</span>
  (<span style="color: #a71d5d;">interactive</span>)
  (<span style="color: #a71d5d;">unless</span> (string-match-p  <span style="color: #183691;">"^http[s]?://"</span> (current-kill 0))
    (<span style="color: #333333;">user-error</span>  <span style="color: #183691;">"No URL in clipboard"</span>))
  (dwim-shell-command-on-marked-files
    <span style="color: #183691;">"Generate SHA-256 hash from clipboard URL."</span>
    <span style="color: #183691;">"curl -s '</span> <span style="color: #0086b3;"><<cb>></span> <span style="color: #183691;">' | sha256sum - | cut -d ' ' -f1"</span>
    <span style="color: #a71d5d;">:utils</span> '(<span style="color: #183691;">"curl"</span>  <span style="color: #183691;">"sha256sum"</span>)
    <span style="color: #a71d5d;">:on-completion</span>
   (<span style="color: #a71d5d;">lambda</span> (buffer process)
     (<span style="color: #a71d5d;">if-let</span> ((success (= (process-exit-status process) 0))
              (hash (<span style="color: #a71d5d;">with-current-buffer</span> buffer
                      (string-trim (buffer-string)))))
         (<span style="color: #a71d5d;">progn</span>
           (kill-buffer buffer)
           (kill-new hash)
           (message  <span style="color: #183691;">"Copied %s to clipboard"</span>
                    (propertize hash 'face 'font-lock-string-face)))
       (switch-to-buffer buffer)))))
</pre>
</div>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/sha-256-hash-from-url-the-easy-way</link>
  <guid isPermaLink="false">http://xenodium.com/sha-256-hash-from-url-the-easy-way</guid>
  <pubDate>Sun, 10 Sep 2023 17:15:21 +0100</pubDate>
</item>
<item>
  <title>Inline previous result and why you should edebug</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-inline-previous-result-and-why-you-should-edebug" class="outline-2">
 <h2 id="inline-previous-result-and-why-you-should-edebug"> <span class="timestamp-wrapper"> <span class="timestamp">05 September 2023</span></span> Inline previous result and why you should edebug</h2>
 <div class="outline-text-2" id="text-inline-previous-result-and-why-you-should-edebug">
 <p>
Artur Malabarba's  <a href="https://endlessparentheses.com/debugging-emacs-lisp-part-1-earn-your-independence.html">Debugging Elisp Part 1: Earn your independence</a> is nearly a decade old, yet it rings just as true today.
</p>

 <p>
Learning to Edebug really  <i>"is the right decision for anyone who doesn't know how to Edebug."</i> Why, you may ask? He best puts it as  <i>"running into errors is not only a consequence of tinkering with your editor, it is the only road to graduating in Emacs."</i>
</p>

 <p>
For me personally, it  <i>earned me that independence</i> to bend Emacs my way. Don't like how something works? Pull up the debugger to help me understand how a package or function works. I've done this countless of times to bend things my way.
</p>

 <p>
Speaking of edebug, I had been meaning to tweak edebug's result display behaviour for quite some time. As you step through code, edbug prints the result of previous expressions to the minibuffer. This works well, but I couldn't help but feel like my eyes were constantly jumping between the code and the minibuffer at the bottom of the window.
</p>


 <div id="orgbc804ac" class="figure">
 <p> <img src="../images/inline-previous-result-and-why-you-should-edebug/edebug-minibuffer.gif" alt="edebug-minibuffer.gif" width="70%"></img></p>
</div>

 <p>
I wanted to minimize the eye jumping experience, so I figured I could likely bend things my way and print the result at point. How did I go about it? The same way I often do. Figure out what function is called for a given key binding via  <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Key-Help.html">describe-key</a> or my favourite replacement helpful-key from  <a href="https://github.com/Wilfred/helpful">helpful.el</a>. This led me to  <code>edebug-next-mode</code> in  <code>edebug.el</code>. At that point, I could have set a breakpoint in  <code>edebug-next-mode</code> and eventually step into the relevant code, but hey we had a better clue. We knew that all output started with "Result:", so we could just search for that string in  <code>edebug.el</code> instead. Jackpot!  <code>edebug-compute-previous-result</code> and its adjacent  <code>edebug-previous-result</code> are just the right functions:
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">edebug-compute-previous-result</span> (previous-value)
  (<span style="color: #a71d5d;">if</span> edebug-unwrap-results
      (<span style="color: #a71d5d;">setq</span> previous-value
            (edebug-unwrap* previous-value)))
  (<span style="color: #a71d5d;">setq</span> edebug-previous-result
        (concat  <span style="color: #183691;">"Result: "</span>
                (edebug-safe-prin1-to-string previous-value)
                (eval-expression-print-format previous-value))))

(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">edebug-previous-result</span> ()
   <span style="color: #183691;">"Print the previous result."</span>
  (<span style="color: #a71d5d;">interactive</span>)
  (message  <span style="color: #183691;">"%s"</span> edebug-previous-result))
</pre>
</div>

 <p>
We can see that  <code>edebug-previous-result</code> invokes  <code>message</code> which is responsible for displaying the debugged expression's result in the minibuffer. Modifying this functions behaviour would be enough to achieve inline display, but I also want to remove "Result:" from the displayed message. Neither of these functions offer configurability, so we'll resort to advising both functions. That is,  <a href="https://en.wikipedia.org/wiki/Monkey_patch">monkey patch</a> them (errm I know… lovely).
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">adviced:edebug-compute-previous-result</span> (_  <span style="color: #0086b3;">&rest</span> r)
   <span style="color: #183691;">"Adviced `</span> <span style="color: #0086b3;">edebug-compute-previous-result</span> <span style="color: #183691;">'."</span>
  (<span style="color: #a71d5d;">let</span> ((previous-value (nth 0 r)))
    (<span style="color: #a71d5d;">if</span> edebug-unwrap-results
        (<span style="color: #a71d5d;">setq</span> previous-value
              (edebug-unwrap* previous-value)))
    (<span style="color: #a71d5d;">setq</span> edebug-previous-result
          (edebug-safe-prin1-to-string previous-value))))

(advice-add #'edebug-compute-previous-result
             <span style="color: #a71d5d;">:around</span>
            #'adviced:edebug-compute-previous-result)
</pre>
</div>

 <p>
 <code>adviced:edebug-compute-previous-result</code> removes "Result:" in addition to dropping  <code>(eval-expression-print-format previous-value)</code>, which I don't typically rely on.
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">require</span> ' <span style="color: #0086b3;">eros</span>)

(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">adviced:edebug-previous-result</span> (_  <span style="color: #0086b3;">&rest</span> r)
   <span style="color: #183691;">"Adviced `</span> <span style="color: #0086b3;">edebug-previous-result</span> <span style="color: #183691;">'."</span>
  (eros--make-result-overlay edebug-previous-result
     <span style="color: #a71d5d;">:where</span> (point)
     <span style="color: #a71d5d;">:duration</span> eros-eval-result-duration))

(advice-add #'edebug-previous-result
             <span style="color: #a71d5d;">:around</span>
            #'adviced:edebug-previous-result)
</pre>
</div>

 <p>
 <code>adviced:edebug-previous-result</code> is in charge of display via  <code>message</code>, so all we need is some replacement. I initially played with  <a href="https://github.com/auto-complete/popup-el">popup-tip</a> and that  <a href="https://indieweb.social/@xenodium/111008598580447299">did the job just fine</a>, but  <a href="https://emacs.ch/@fosskers">Colin</a> led me to a better path while  <a href="https://emacs.ch/@fosskers/111009811997698187">pointing to Clojure and Common Lisp</a>. This reminded me of  <a href="https://github.com/xiongtx/eros">eros: Evaluation Result OverlayS for Emacs Lisp</a>, which I already used. Swapping  <code>message</code> for  <code>eros--make-result-overlay</code> did the trick. Yes, this is a private function, but I can live with that. This code is only an  <code>advice-remove</code> away from disabling, but hey look at those  <i>inline results</i>!
</p>


 <div id="org26ee13e" class="figure">
 <p> <img src="../images/inline-previous-result-and-why-you-should-edebug/edebug-inline.gif" alt="edebug-inline.gif" width="90%"></img></p>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/inline-previous-result-and-why-you-should-edebug</link>
  <guid isPermaLink="false">http://xenodium.com/inline-previous-result-and-why-you-should-edebug</guid>
  <pubDate>Tue, 05 Sep 2023 08:00:23 +0100</pubDate>
</item>
<item>
  <title>Further sqlite-mode extensions</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-further-sqlite-mode-extensions" class="outline-2">
 <h2 id="further-sqlite-mode-extensions"> <span class="timestamp-wrapper"> <span class="timestamp">27 August 2023</span></span> Further sqlite-mode extensions</h2>
 <div class="outline-text-2" id="text-further-sqlite-mode-extensions">
 <p>
I've continued poking at Emacs 29's sqlite-mode. Since  <a href="https://xenodium.com/sqlite-mode-goodies/">my last post on extensions</a>, I've experimented a little with adding a handful of interactive functions:
</p>

 <ul class="org-ul"> <li> <code>sqlite-mode-extras-compose-and-execute</code>: Compose and execute a query.</li>
</ul> <div id="org4fcf808" class="figure">
 <p> <img src="../images/further-sqlite-mode-extensions/compose-execute.gif" alt="compose-execute.gif" width="90%"></img></p>
</div>
 <ul class="org-ul"> <li> <code>sqlite-mode-extras-execute</code>: Execute a query.</li>
</ul> <div id="org6609ae8" class="figure">
 <p> <img src="../images/further-sqlite-mode-extensions/execute.gif" alt="execute.gif" width="90%"></img></p>
</div>
 <ul class="org-ul"> <li> <code>sqlite-mode-extras-add-row</code>: Add row to table at point.</li>
</ul> <div id="org9a452c6" class="figure">
 <p> <img src="../images/further-sqlite-mode-extensions/add-row.gif" alt="add-row.gif" width="90%"></img></p>
</div>
 <ul class="org-ul"> <li> <code>sqlite-mode-extras-delete-row-dwim</code>: Similar to  <code>sqlite-mode-delete</code> but also enables deleting range in region.</li>
</ul> <div id="org70cae5a" class="figure">
 <p> <img src="../images/further-sqlite-mode-extensions/delete-rows.gif" alt="delete-rows.gif" width="90%"></img></p>
</div>
 <ul class="org-ul"> <li> <code>sqlite-mode-extras-refresh</code>: Refreshes the buffer re-querying the database.</li>
 <li> <code>sqlite-mode-extras-ret-dwim</code>: If on table, toggle expansion. If on row, edit it.</li>
 <li> <code>sqlite-mode-extras-execute-and-display-select-query</code>: Executes a query and displays results.</li>
</ul> <div id="org4004268" class="figure">
 <p> <img src="../images/further-sqlite-mode-extensions/select-earth.gif" alt="select-earth.gif" width="90%"></img></p>
</div>

 <p>
I've been playing with the following key bindings:
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">use-package</span>  <span style="color: #0086b3;">sqlite-mode-extras</span>
   <span style="color: #a71d5d;">:bind</span> (<span style="color: #a71d5d;">:map</span>
         sqlite-mode-map
         (<span style="color: #183691;">"n"</span> . next-line)
         (<span style="color: #183691;">"p"</span> . previous-line)
         (<span style="color: #183691;">"b"</span> . sqlite-mode-extras-backtab-dwim)
         (<span style="color: #183691;">"f"</span> . sqlite-mode-extras-tab-dwim)
         (<span style="color: #183691;">"+"</span> . sqlite-mode-extras-add-row)
         (<span style="color: #183691;">"D"</span> . sqlite-mode-extras-delete-row-dwim)
         (<span style="color: #183691;">"C"</span> . sqlite-mode-extras-compose-and-execute)
         (<span style="color: #183691;">"E"</span> . sqlite-mode-extras-execute)
         (<span style="color: #183691;">"S"</span> . sqlite-mode-extras-execute-and-display-select-query)
         (<span style="color: #183691;">"DEL"</span> . sqlite-mode-extras-delete-row-dwim)
         (<span style="color: #183691;">"g"</span> . sqlite-mode-extras-refresh)
         (<span style="color: #183691;">"<backtab>"</span> . sqlite-mode-extras-backtab-dwim)
         (<span style="color: #183691;">"<tab>"</span> . sqlite-mode-extras-tab-dwim)
         (<span style="color: #183691;">"RET"</span> . sqlite-mode-extras-ret-dwim)))
</pre>
</div>

 <p>
The code lives in  <a href="https://github.com/xenodium/dotsies/blob/main/emacs/ar/sqlite-mode-extras.el">sqlite-mode-extras.el</a> under my  <a href="https://github.com/xenodium/dotsies/tree/main">Emacs config repo</a>. Beware, it's fairly experimental and hasn't been tested thoroughly.
</p>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/further-sqlite-mode-extensions</link>
  <guid isPermaLink="false">http://xenodium.com/further-sqlite-mode-extensions</guid>
  <pubDate>Sun, 27 Aug 2023 22:41:02 +0100</pubDate>
</item>
<item>
  <title>My custom Tesco Clubcard pkpass</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-my-custom-tesco-clubcard-pkpass" class="outline-2">
 <h2 id="my-custom-tesco-clubcard-pkpass"> <span class="timestamp-wrapper"> <span class="timestamp">22 August 2023</span></span> My custom Tesco Clubcard pkpass</h2>
 <div class="outline-text-2" id="text-my-custom-tesco-clubcard-pkpass">
 <p>
My significant other and I had two plastic Tesco Clubcards. I lost mine, so I took a picture of hers. I was fairly certain a barcode photo would scan just as well at self-checkout, and it did.
</p>

 <p>
This got me thinking about Apple's Wallet  <a href="https://en.wikipedia.org/wiki/PKPASS">pkpasses</a>. I don't really know much about them. Could I potentially create my own  <code>.pkpass</code>? If I could just include the same barcode as in the photo, it should do the job just fine.
</p>

 <p>
Now I should mention,  <a href="https://apps.apple.com/gb/app/tesco-grocery-clubcard/id389581236">Tesco does have an app on the App Store</a>. If you just want the official Wallet pass on your iPhone, use that. But I was curious about whether or not I could create my own pass.
</p>

 <p>
Turns out I  <i>can</i>. I followed Apple's  <a href="https://developer.apple.com/library/archive/documentation/UserExperience/Conceptual/PassKit_PG/YourFirst.html">building your first pass</a> which runs you through  <a href="https://developer.apple.com/help/account/configure-app-capabilities/create-wallet-identifiers-and-certificates">creating Wallet identifiers/certificates</a>, editing  <code>pass.json</code>, and downloading/building  <a href="https://developer.apple.com/services-account/download?path=/iOS/Wallet_Support_Materials/WalletCompanionFiles.zip">signpass</a> (the utility used to sign  <code>.pass</code> bundles).
</p>

 <p>
The  <code>signpass</code> utility is included in WalletCompanionFiles.zip, which comes with a handful of sample passes.
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">WalletCompanionFiles
│
├── SamplePasses
│   │
│   ├── BoardingPass.pass
│   ├── Coupon.pass
│   ├── Event.pass
│   ├── Event.pkpass
│   ├── Generic.pass
│   └── StoreCard.pass
│       │
│       ├── pass.json
│       └── ...
└── signpass
</pre>
</div>

 <p>
Being a rewards card, I opted to look into  <code>StoreCard.pass</code>, but like all other passes, the  <code>barcode</code> itself is what makes each pass scannable. The barcode details are specified in the bundles's  <code>pass.json</code> file. I needed to figure out the relevant values describing the Tesco barcode.
</p>

 <div class="org-src-container">
 <pre class="src src-json"> <span style="color: #a71d5d;">"barcode"</span>: {
   <span style="color: #a71d5d;">"format"</span>:  <span style="color: #183691;">"???"</span>,
   <span style="color: #a71d5d;">"message"</span>:  <span style="color: #183691;">"???"</span>,
   <span style="color: #a71d5d;">"messageEncoding"</span>:  <span style="color: #183691;">"???"</span>
}
</pre>
</div>

 <p>
I had no clue what values I should use for a Tesco Clubcard. I did, however, have a photo of the barcode I needed. This is in fact what prompted looking into  <a href="https://xenodium.com/emacs-scan-this-qrcode">scanning barcodes from Emacs</a>, which worked just great. It gave me all the crucial bits for the Clubcard.
</p>

 <div class="org-src-container">
 <pre class="src src-json"> <span style="color: #a71d5d;">"barcode"</span>: {
   <span style="color: #a71d5d;">"format"</span>:  <span style="color: #183691;">"PKBarcodeFormatCode128"</span>,
   <span style="color: #a71d5d;">"message"</span>:  <span style="color: #183691;">"1234567890123456"</span>,  // not my actual Clubcard number of course.
   <span style="color: #a71d5d;">"messageEncoding"</span>:  <span style="color: #183691;">"iso-8859-1"</span>
}
</pre>
</div>

 <p>
That's all that's needed for the barcode section, the most useful part of the pass. We're not done though. We also need our registered Wallet identifiers, so the  <code>signpass</code> utility can sign.
</p>

 <div class="org-src-container">
 <pre class="src src-json"> <span style="color: #a71d5d;">"passTypeIdentifier"</span>:  <span style="color: #183691;">"my.com.identifier.passmaker"</span>, // also not my actual one.
 <span style="color: #a71d5d;">"teamIdentifier"</span>:  <span style="color: #183691;">"AAABBBCCCD"</span>, // nor this one.
</pre>
</div>

 <p>
We should be able to sign the pass with the following:
</p>

 <div class="org-src-container">
 <pre class="src src-sh">signpass -p StoreCard.pass
</pre>
</div>

 <p>
We're technically done. We now have a working card, but it looks just like the sample store card included in WalletCompanionFiles.
</p>


 <div id="org0a3a487" class="figure">
 <p> <img src="../images/my-custom-tesco-clubcard-pkpass/lemons.png" alt="lemons.png" width="50%"></img></p>
</div>

 <p>
What's the fun in that? Now that I can make my own Clubcard, let's customize it!
</p>

 <p>
For imagery, I replaced a couple of images in the .pass bundle:
</p>

 <div class="org-src-container">
 <pre class="src src-c">StoreCard.pass
│
├── pass.json
├── icon.png
├── logo.png  <span style="color: #969896;">// </span> <span style="color: #969896;">replaced</span>
└── strip.png  <span style="color: #969896;">// </span> <span style="color: #969896;">replaced</span>
</pre>
</div>

 <p>
I replaced  <code>logo.png</code> using a  <a href="https://en.wikipedia.org/wiki/File:Tesco_Logo.svg">Tesco logo I found on Wikipedia</a>. I had initially removed  <code>strip.png</code>, but that made the card feel a little empty. I was thinking of using a Tesco carrier bag to bulk the space up. While I didn't find a suitable bag image, I did land on " <a href="https://banksyexplained.com/very-little-helps-2008/">Very Little Helps, 2008</a>". Using my limited  <a href="https://www.gimp.org/">GIMP</a> skills, I cropped one of the images and also replaced  <code>strip.png</code>.
</p>

 <p>
The remaining customizations took place in  <code>pass.json</code> and should be fairly self-explanatory. There's the text shown in all labels as well as three customizable colours (background, label, and foreground).
</p>

 <div class="org-src-container">
 <pre class="src src-json">{
   <span style="color: #a71d5d;">"formatVersion"</span>:  <span style="color: #0086b3;">1</span>,
   <span style="color: #a71d5d;">"passTypeIdentifier"</span>:  <span style="color: #183691;">"my.com.identifier.passmaker"</span>, // also not my actual one.
   <span style="color: #a71d5d;">"teamIdentifier"</span>:  <span style="color: #183691;">"AAABBBCCCD"</span>, // nor this one.
   <span style="color: #a71d5d;">"serialNumber"</span>:  <span style="color: #183691;">"AnySerialNumberYouWant"</span>,
   <span style="color: #a71d5d;">"barcode"</span>: {
     <span style="color: #a71d5d;">"format"</span>:  <span style="color: #183691;">"PKBarcodeFormatCode128"</span>,
     <span style="color: #a71d5d;">"message"</span>:  <span style="color: #183691;">"1234567890123456"</span>,
     <span style="color: #a71d5d;">"messageEncoding"</span>:  <span style="color: #183691;">"iso-8859-1"</span>
  },
   <span style="color: #a71d5d;">"organizationName"</span>:  <span style="color: #183691;">"Not Tesco of course"</span>,
   <span style="color: #a71d5d;">"description"</span>:  <span style="color: #183691;">"Not a Tesco reqards card"</span>,
   <span style="color: #a71d5d;">"logoText"</span>:  <span style="color: #183691;">"Clubcard"</span>,
   <span style="color: #a71d5d;">"foregroundColor"</span>:  <span style="color: #183691;">"rgb(255, 255, 255)"</span>,
   <span style="color: #a71d5d;">"labelColor"</span>:  <span style="color: #183691;">"rgb(255, 255, 255)"</span>,
   <span style="color: #a71d5d;">"backgroundColor"</span>:  <span style="color: #183691;">"rgb(2, 81, 158)"</span>, // Blue for that Tesco look
   <span style="color: #a71d5d;">"storeCard"</span>: {
     <span style="color: #a71d5d;">"auxiliaryFields"</span>: [
      {
         <span style="color: #a71d5d;">"key"</span>:  <span style="color: #183691;">"membership"</span>,
         <span style="color: #a71d5d;">"label"</span>:  <span style="color: #183691;">"Member since 2023"</span>,
         <span style="color: #a71d5d;">"value"</span>:  <span style="color: #183691;">""</span>
      },
      {
         <span style="color: #a71d5d;">"key"</span>:  <span style="color: #183691;">"membership2"</span>,
         <span style="color: #a71d5d;">"label"</span>:  <span style="color: #183691;">"Expires sometime"</span>,
         <span style="color: #a71d5d;">"value"</span>:  <span style="color: #183691;">""</span>
      }
    ]
  }
}
</pre>
</div>

 <p>
…and with all that, here's what my very own custom Tesco Clubcard pkpass looks like. As you can appreciate, my image-editing skills aren't all that great, but hey this will do for now.
</p>


 <div id="org5709b1c" class="figure">
 <p> <img src="../images/my-custom-tesco-clubcard-pkpass/bsy.png" alt="bsy.png" width="50%"></img></p>
</div>
</div>

 <div id="outline-container-org419bde8" class="outline-3">
 <h3 id="org419bde8">Update</h3>
 <div class="outline-text-3" id="text-org419bde8">
 <p>
Redditor u/stupergenius  <a href="https://www.reddit.com/r/programming/comments/15y4c65/comment/jxa1obg/?utm_source=share&utm_medium=web2x&context=3">suggested using the image's original background color</a>. Nice suggestion. Tweaked via pass.json:
</p>

 <div class="org-src-container">
 <pre class="src src-json"> <span style="color: #a71d5d;">"foregroundColor"</span>:  <span style="color: #183691;">"rgb(2, 81, 158)"</span>,
 <span style="color: #a71d5d;">"labelColor"</span>:  <span style="color: #183691;">"rgb(15, 58, 105)"</span>,
 <span style="color: #a71d5d;">"backgroundColor"</span>:  <span style="color: #183691;">"rgb(166, 202, 214)"</span>,
</pre>
</div>


 <div id="org5e800a0" class="figure">
 <p> <img src="../images/my-custom-tesco-clubcard-pkpass/bsy-light.png" alt="bsy-light.png" width="50%"></img></p>
</div>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/my-custom-tesco-clubcard-pkpass</link>
  <guid isPermaLink="false">http://xenodium.com/my-custom-tesco-clubcard-pkpass</guid>
  <pubDate>Tue, 22 Aug 2023 08:08:48 +0100</pubDate>
</item>
<item>
  <title>Extending sqlite-mode (cell navigation + edits)</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-sqlite-mode-goodies" class="outline-2">
 <h2 id="sqlite-mode-goodies"> <span class="timestamp-wrapper"> <span class="timestamp">07 August 2023</span></span> Extending sqlite-mode (cell navigation + edits)</h2>
 <div class="outline-text-2" id="text-sqlite-mode-goodies">
 <p>
I recently  <a href="https://xenodium.com/emacs-29s-sqlite-mode/">wrote about Emacs 29's new sqlite-mode</a>, which enables you to browse sqlite databases from your beloved editor.
</p>

 <p>
Out of the box, it supports the following browsing features:
</p>

 <ul class="org-ul"> <li> <code>sqlite-mode-list-data</code>: List the data from the table under point.</li>
 <li> <code>sqlite-mode-list-column</code>: List the columns of the table under point.</li>
 <li> <code>sqlite-mode-list-tables</code>: Re-list the tables from the currently selected database.</li>
</ul> <p>
On the editing side of things it supports row deletion:
</p>

 <ul class="org-ul"> <li> <code>sqlite-mode-delete</code>: Delete the row under point.</li>
</ul> <p>
While fairly spartan, it lays foundations for additional tools and features.
</p>

 <p>
Two features I would like to have:
</p>

 <ol class="org-ol"> <li>TAB navigation across table rows and columns.</li>
 <li>Updating the row's field at point.</li>
</ol> <p>
This would give me the familiar behaviour I'm used to in my org tables as well as other common spreadsheet tools.
</p>

 <p>
Luckily, this is Emacs, so we can bend it our way… and I sure did!
</p>

 <p>
Here's tab navigating forward:
</p>


 <div id="org6942014" class="figure">
 <p> <img src="../images/sqlite-mode-goodies/sqlite-forward.gif" alt="sqlite-forward.gif" width="75%"></img></p>
</div>

 <p>
Here's tab navigating backward:
</p>


 <div id="org8077a42" class="figure">
 <p> <img src="../images/sqlite-mode-goodies/sqlite-previous.gif" alt="sqlite-previous.gif" width="75%"></img></p>
</div>

 <p>
And updating row fields:
</p>


 <div id="orga683405" class="figure">
 <p> <img src="../images/sqlite-mode-goodies/sqlite-edits.gif" alt="sqlite-edits.gif" width="90%"></img></p>
</div>

 <p>
Most of the navigation is achieved by querying the current buffer to figure out column positions. Editing was in some ways easier, as I looked at  <code>sqlite-mode-delete</code> to figure out how it handled the query.
</p>

 <p>
To get the more familiar navigation behaviour, I've adjusted my key bindings as follows:
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">use-package</span>  <span style="color: #0086b3;">sqlite-mode-extras</span>
   <span style="color: #a71d5d;">:bind</span> (<span style="color: #a71d5d;">:map</span>
         sqlite-mode-map
         (<span style="color: #183691;">"n"</span> . next-line)
         (<span style="color: #183691;">"p"</span> . previous-line)
         (<span style="color: #183691;">"<backtab>"</span> . sqlite-mode-extras-backtab-dwim)
         (<span style="color: #183691;">"<tab>"</span> . sqlite-mode-extras-tab-dwim)
         (<span style="color: #183691;">"RET"</span> . sqlite-mode-extras-ret-dwim)))
</pre>
</div>

 <p>
The code for  <code>sqlite-mode-extras-tab-dwim</code>,  <code>sqlite-mode-extras-backtab-dwim</code>, and  <code>sqlite-mode-extras-ret-dwim</code> is little rough still (hacky even), but hey still fun.
</p>

 <p>
For now, the code lives in  <a href="https://github.com/xenodium/dotsies/blob/main/emacs/ar/sqlite-mode-extras.el">sqlite-mode-extras.el</a> under my  <a href="https://github.com/xenodium/dotsies/tree/main">Emacs config repo</a>. Improvements/fixes totally welcome!
</p>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/sqlite-mode-goodies</link>
  <guid isPermaLink="false">http://xenodium.com/sqlite-mode-goodies</guid>
  <pubDate>Mon, 07 Aug 2023 00:00:00 +0100</pubDate>
</item>
<item>
  <title>Emacs 29s sqlite-mode</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-emacs-29s-sqlite-mode" class="outline-2">
 <h2 id="emacs-29s-sqlite-mode"> <span class="timestamp-wrapper"> <span class="timestamp">06 August 2023</span></span> Emacs 29's sqlite-mode</h2>
 <div class="outline-text-2" id="text-emacs-29s-sqlite-mode">
 <p>
I've jumped on the Emacs 29 bandwagon! Mickey Petersen has a great rundown of  <a href="https://www.masteringemacs.org/article/whats-new-in-emacs-29-1">What's New in Emacs 29.1</a>.
</p>

 <p>
Now every so often, I need to take a quick peek at an  <a href="https://www.sqlite.org/index.html">sqlite3</a> table. Emacs 29.1 ships  <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Database.html">sqlite-mode</a>, which can help with that. Use  <code>sqlite-mode-open-file</code> to open a database.
</p>

 <p>
Pressing  <code>RET</code> on a table shows its content via  <code>sqlite-mode-list-data</code>.  <code>DEL</code> does as you'd expect and delete a row via  <code>sqlite-mode-delete</code>.
</p>


 <div id="orgf5efca5" class="figure">
 <p> <img src="../images/emacs-29s-sqlite-mode/sqlite-mode.gif" alt="sqlite-mode.gif" width="75%"></img></p>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/emacs-29s-sqlite-mode</link>
  <guid isPermaLink="false">http://xenodium.com/emacs-29s-sqlite-mode</guid>
  <pubDate>Sun, 06 Aug 2023 22:35:56 +0100</pubDate>
</item>
<item>
  <title>Emacs: scan this QR/bar code</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-emacs-scan-this-qrcode" class="outline-2">
 <h2 id="emacs-scan-this-qrcode"> <span class="timestamp-wrapper"> <span class="timestamp">30 July 2023</span></span> Emacs: scan this QR/bar code</h2>
 <div class="outline-text-2" id="text-emacs-scan-this-qrcode">
 <p>
Another day, another tool brought to my Emacs fingertips. A while ago, I wrote about easily  <a href="https://xenodium.com/copy-from-desktop-to-mobile-via-qr-code/">copying text from desktop to mobile via QR codes</a>. Later on, I brought it under  <a href="https://github.com/xenodium/dwim-shell-command">dwim-shell-command</a> as  <a href="https://github.com/xenodium/dwim-shell-command/blob/67da65f97d7f5477e19407d25887c23fab31517d/dwim-shell-commands.el#L593">dwim-shell-commands-clipboard-to-qr</a>.
</p>

 <p>
This time around, I needed the opposite: to scan a code from an image file. This is where  <a href="https://github.com/mchehab/zbar">zbar</a>'s  <code>zbarimg</code> comes in. These days, I'm mostly on macOS, so I installed via  <a href="https://brew.sh/">Homebrew</a>:
</p>

 <div class="org-src-container">
 <pre class="src src-sh">$ brew install zbar
</pre>
</div>

 <p>
There's really nothing to the command. You feed it an image, and it outputs the scanned details. Perfect.
</p>

 <div class="org-src-container">
 <pre class="src src-sh">$ zbarimg path/to/code-128.png
CODE-128:hello world
scanned 1 barcode symbols from 1 images <span style="color: #a71d5d;"> in</span> 0.02 seconds
</pre>
</div>

 <p>
The only challenge is my brain. I probably won't remember the name of this wonderful tool next time I need it, so I'll just add it to my  <a href="https://github.com/xenodium/dwim-shell-command/blob/main/dwim-shell-commands.el">dwim-shell-commands.el arsenal</a> with a memorable name:
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">dwim-shell-commands-image-scan-code</span> ()
   <span style="color: #183691;">"Scan any code from image(s)."</span>
  (<span style="color: #a71d5d;">interactive</span>)
  (dwim-shell-command-on-marked-files
    <span style="color: #183691;">"Scan code"</span>
    <span style="color: #183691;">"zbarimg '</span> <span style="color: #0086b3;"><<f>></span> <span style="color: #183691;">'"</span>
    <span style="color: #a71d5d;">:utils</span>  <span style="color: #183691;">"zbarimg"</span>))
</pre>
</div>

 <p>
In the future, rather than reaching out to  <code>zbarimg</code> directly, I'll use my trusty fuzzy search and… voilà!
</p>


 <div id="orgb9549e9" class="figure">
 <p> <img src="../images/emacs-scan-this-qrcode/scan-dired.gif" alt="scan-dired.gif" width="85%"></img></p>
</div>

 <p>
Because  <code>dwim-shell-command</code> operates on either  <code>dired</code> files or current file, we can also apply our new function when viewing the QR code itself.
</p>


 <div id="org6efc0aa" class="figure">
 <p> <img src="../images/emacs-scan-this-qrcode/scan-image.gif" alt="scan-image.gif" width="85%"></img></p>
</div>

 <p>
 <code>dwim-shell-commands-image-scan-code</code> is now  <a href="https://github.com/xenodium/dwim-shell-command/commit/85ebcb0a466ddfe48e543d585e16aff7aee8da5e">pushed to dwim-shell-commands.el</a>, the optional package in  <a href="https://github.com/xenodium/dwim-shell-command/">dwim-shell-command</a>.
</p>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/emacs-scan-this-qrcode</link>
  <guid isPermaLink="false">http://xenodium.com/emacs-scan-this-qrcode</guid>
  <pubDate>Sun, 30 Jul 2023 12:35:53 +0100</pubDate>
</item>
<item>
  <title>A cure for JavaScript fatigue?</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-a-cure-for-javascript-fatigue" class="outline-2">
 <h2 id="a-cure-for-javascript-fatigue"> <span class="timestamp-wrapper"> <span class="timestamp">25 July 2023</span></span> A cure for JavaScript fatigue?</h2>
 <div class="outline-text-2" id="text-a-cure-for-javascript-fatigue">
 <p>
It's been roughly a decade since I wrote any significant amount of JavaScript. Back then, I primarily relied on the  <a href="https://developers.google.com/closure/compiler/">Google Closure Compiler</a>, now maybe an archaeological artefact? These days, it's hard not to bump into any JavaScript project that doesn't rely on  <a href="https://www.npmjs.com/">npm</a>, along with many other tools like the  <a href="https://www.typescriptlang.org/">Typescript</a> compiler,  <a href="https://eslint.org/">ESLint</a>,  <a href="https://prettier.io/">Prettier</a>… There are a ton of available frameworks too. I was somewhat put off (or maybe just lazy?) by the initial ramp-up to reenter the JavaScript world. I guess that's what some refer to as  <a href="https://medium.com/@ericclemmons/javascript-fatigue-48d4011b6fc4#.prcj59904">Javascript Fatigue</a>.
</p>

 <p>
I'm giving JavaScript another try, but this time with an Emacs  <a href="https://github.com/xenodium/chatgpt-shell">chatgpt-shell</a> standing by. Reentering the JavaScript world as a noob, I often know what I want to enable, but I'm unfamiliar with which project knobs to turn to set things up.
</p>

 <p>
While I may want to dig deeper into things in the future, at present I just want to dabble with JavaScript. I want a local project set up as quickly as possible. ChatGPT has been pretty handy at that. The Emacs ChatGPT shell and its minibuffer prompts work fairly well for my needs, yet I often found myself wishing it could behave more like a  <a href="https://magit.vc/">magit</a> commit buffer. That is, launch a dedicated buffer (not the shell itself), ask the question, maybe paste some snippets, and send it on its way with that oh so familiar and satisfying  <code>C-c C-c</code> binding ( <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Sending-Mail.html">sending mail</a> also says hello).
</p>

 <p>
This is where  <code>M-x chatgpt-shell-prompt-compose</code> comes in. It's a mash between the ChatGPT shell and a magit commit buffer:
</p>


 <div id="org18d5958" class="figure">
 <p> <img src="../images/a-cure-for-javascript-fatigue/node-chatgpt.gif" alt="node-chatgpt.gif" width="85%"></img></p>
</div>

 <p>
In the background, the buffer is still powered by the shell itself, so you can reuse it to ask clarifying questions.
</p>


 <div id="org2d3b593" class="figure">
 <p> <img src="../images/a-cure-for-javascript-fatigue/compose.gif" alt="compose.gif" width="85%"></img></p>
</div>

 <p>
A couple of additional features worth mentioning… Invoking  <code>chatgpt-shell-prompt-compose</code> with an active region automatically copies the region content over to the compose buffer. This is handy if you'd like to create more elaborate prompts with further editing. So far, this feels more natural than editing text from the shell or the minibuffer, where  <code>RET</code> doesn't insert new lines.
</p>

 <p>
The compose buffer is powered by a background shell (storing history for us). Typing  <code>clear</code> followed by  <code>C-c C-c</code> clears the background shell history.
</p>

 <p>
 <code>chatgpt-shell-prompt-compose</code> is available in  <a href="https://github.com/xenodium/chatgpt-shell">chatgpt-shell</a> v0.72.1. I've so far bound it to  <code>C-c C-e</code>, though I've already found some unfortunate clashes.
</p>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/a-cure-for-javascript-fatigue</link>
  <guid isPermaLink="false">http://xenodium.com/a-cure-for-javascript-fatigue</guid>
  <pubDate>Tue, 25 Jul 2023 00:00:00 +0100</pubDate>
</item>
<item>
  <title>ChatGPT visits the Emacs doctor</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-chatgpt-visits-the-emacs-doctor" class="outline-2">
 <h2 id="chatgpt-visits-the-emacs-doctor"> <span class="timestamp-wrapper"> <span class="timestamp">12 July 2023</span></span> ChatGPT visits the Emacs doctor</h2>
 <div class="outline-text-2" id="text-chatgpt-visits-the-emacs-doctor">
 <p>
Emacs is a  <a href="https://youtu.be/urcL86UpqZc?t=177">part-time job</a>. A  <a href="https://emacs-lsp.github.io/lsp-mode/">multi-language</a> development environment. A  <a href="https://www.emacswiki.org/emacs/LispMachine">lisp machine</a>. An  <a href="https://www.djcbsoftware.nl/code/mu/mu4e.html">email client</a>. A  <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/EWW.html">web browser</a>. A  <a href="https://youtu.be/AyhPmypHDEw">zettelkasten</a>. A  <a href="https://www.emacswiki.org/emacs/SpreadSheet">spreadsheet</a>. A  <a href="https://codeberg.org/martianh/mastodon.el">mastodon client</a>. A  <a href="https://www.masteringemacs.org/article/complete-guide-mastering-eshell">shell</a>. A  <a href="https://github.com/ledger/ledger-mode">ledger</a>. A  <a href="https://github.com/alphapapa/org-super-agenda">super agenda</a>. An  <a href="https://twitter.com/nixcraft/status/1435140596520218628">operating system</a>. Some say it sends  <a href="https://xkcd.com/378/">ripples into the atmosphere</a> or  <a href="https://github.com/skeeto/autotetris-mode">plays tetris for you</a>. It may even  <a href="https://github.com/johanvts/emacs-fireplace">warm your place up</a> during the winter. Can  <a href="https://github.com/TeMPOraL/nyan-mode">meme with you</a>. It's an ultra-malleable editor with endless possibilities, powered by your life-long customizations. Oh man, no wonder we need to chat to someone from time to time. You know what I mean?  <i>" <a href="https://knowyourmeme.com/editorials/guides/what-does-sir-this-is-a-wendys-mean">Sir, this is a Wendy's</a>"</i>.
</p>

 <p>
Luckily, we also have the built-in Emacs psychotherapist we can chat to, courtesy of  <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Amusements.html">M-x doctor</a>. It's powered by  <a href="https://en.wikipedia.org/wiki/Emacs_Lisp">elisp</a>, and like all Emacs things, it's basically up for grabs. What I mean is, elisp implements many of these features, but also glues the lot for you. Once you learn a little elisp, you can build new Emacs features but also glue others for that magical compound effect.
</p>


 <div id="org7c473b4" class="figure">
 <p> <img src="../images/chatgpt-visits-the-emacs-doctor/got-a-problem.gif" alt="got-a-problem.gif" width="85%"></img></p>
 <p> <span class="figure-number">Figure 1: </span>The Emacs doctor</p>
</div>

 <p>
A little while ago, I wanted to give  <a href="https://openai.com/blog/chatgpt">ChatGPT</a> a try, preferably from Emacs (of course). I figured a shell interface would be a great fit for the interaction. Emacs already shipped with a general command interpreter ( <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Shell-Prompts.html">comint</a>), so I cobbled together a  <a href="https://xenodium.com/a-chatgpt-emacs-shell/">ChatGPT Emacs shell</a>.
</p>


 <div id="org4a4a01a" class="figure">
 <p> <img src="../images/chatgpt-visits-the-emacs-doctor/cyberpunk.gif" alt="cyberpunk.gif" width="75%"></img></p>
 <p> <span class="figure-number">Figure 2: </span> <a href="https://github.com/xenodium/chatgpt-shell">chatgpt-shell</a></p>
</div>

 <p>
So where am I going with all this? The fine netizens  <a href="https://www.reddit.com/user/emaphis/">r/emaphis</a> and  <a href="https://news.ycombinator.com/user?id=salgernon">salgernon</a> both planted a great seed:
</p>

 <ul class="org-ul"> <li> <i>" <a href="https://www.reddit.com/r/emacs/comments/11wdub9/comment/jczrlt7">Now for extra-credit, add the ability for Alt-X doctor to psychoanalyze Chat-GPT</a>"</i>.</li>
 <li> <i>" <a href="https://news.ycombinator.com/item?id=35259022">So how about a quick M-x psychoanalyze-chatgpt?</a>"</i></li>
</ul> <p>
I haven't forgotten about you. Let's take  <a href="https://github.com/xenodium/chatgpt-shell">chatgpt-shell</a>,  <i>M-x doctor</i>, our versatile elisp glue, and let's make them talk:
</p>


 <div id="org55cdfac" class="figure">
 <p> <img src="../images/chatgpt-visits-the-emacs-doctor/000026814.jpg" alt="000026814.jpg"></img></p>
 <p> <span class="figure-number">Figure 3: </span>courtesy of  <a href="https://www.reddit.com/r/emacs/comments/122nm9r/comment/jdv9f1i">thriveth</a> and  <a href="https:/asset.dr.dk/imagescaler01/downol.dr.dk/download/bonanza/thumbs/000026814.jpg">dr.dk</a>.</p>
</div>

 <p>
There isn't too much to the code, but beware:
</p>

 <ol class="org-ol"> <li>If you want to run it, you'll need chatgpt-shell  <a href="https://github.com/xenodium/chatgpt-shell#install">installed and set up</a>.</li>
 <li>This was a quick fun hack. No code judging ;)</li>
</ol> <p>
The snippet is further down… Start with  <code>chatgpt-shell-visit-doctor</code> as the entry point, setting things up for us. It creates both the  <code>*chatgpt*</code> and  <code>*doctor*</code> buffers and arranges the windows next to each other.
</p>

 <p>
We also set a ChatGPT system prompt to guide things a little:
</p>

 <blockquote>
 <p>
"Pretend to be an overwhelmed Emacs user who is obsessed with configuring their init.el file. You are in a session talking to a psychotherapist. Limit your output to no more than 20 words. In the course of 5 exchanges between you and the therapist, show improvements. On the 8th exchange after therapist speaks, declare you are cured and only output 'Thank you doc, I think I'm cured!'"
</p>
</blockquote>

 <p>
ChatGPT and Emacs doctor can go on and on, so we limit ChatGPT responses to 20 words per response and 8 exchanges. We don't want the session to abruptly end without a resolution, so we'll use  <i>Thank you doc, I think I'm cured!</i> as our key phrase to end the session.
</p>

 <p>
We register  <code>chatgpt-shell--on-chatgpt-patient-response</code> as a hook to receive ChatGPT output, which we feed to the  <code>*doctor*</code> buffer. We subsequently get a doctor response that's fed back to ChatGPT via  <code>chatgpt-shell--insert-doc-response</code>.
</p>

 <p>
We add some additional freebies like binding  <code>Ctrl-c Ctrl-c</code> to  <code>chatgpt-shell-leave-doctor</code>, so we can bail out of the exchange from the  <code>*chatgpt*</code> buffer.
</p>

 <p>
We also introduced  <code>chatgpt-shell--insert-delayed-text</code> as a replacement for  <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Insertion.html">insert</a> to slow things down a little. For visual effects, really.
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">require</span> ' <span style="color: #0086b3;">chatgpt-shell</span>)

(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">chatgpt-shell-visit-doctor</span> ()
  (<span style="color: #a71d5d;">interactive</span>)
  (<span style="color: #a71d5d;">setq</span> chatgpt-shell--doctor-in-session t)
  (<span style="color: #a71d5d;">when</span> (get-buffer  <span style="color: #183691;">"*doctor*"</span>)
    (kill-buffer  <span style="color: #183691;">"*doctor*"</span>))
  (delete-other-windows)
  (split-window-horizontally)
  (other-window 1)
  (doctor)
  (visual-line-mode 1)
  (<span style="color: #a71d5d;">when</span> (fboundp 'accent-menu-mode)
    (accent-menu-mode -1))
  (mapc
   (<span style="color: #a71d5d;">lambda</span> (shell-buffer)
     (kill-buffer shell-buffer))
   (chatgpt-shell--shell-buffers))
  (other-window 1)
  (<span style="color: #a71d5d;">setq</span> chatgpt-shell-system-prompts
        '((<span style="color: #183691;">"Doc"</span> .  <span style="color: #183691;">"Pretend to be an overwhelmed Emacs user who is obsessed with configuring their init.el file. You are in a session talking to a psychotherapist. Limit your output to no more than 20 words. In the course of 5 exchanges between you and the therapist, show improvements. On the 8th exchange after therapist speaks, declare you are cured and only output \"Thank you doc, I think I'm cured!\"."</span>)))
  (<span style="color: #a71d5d;">setq</span> chatgpt-shell-system-prompt 0)
  (<span style="color: #a71d5d;">with-current-buffer</span> (chatgpt-shell)
    (define-key chatgpt-shell-mode-map (kbd  <span style="color: #183691;">"C-c C-c"</span>)
      'chatgpt-shell-leave-doctor)
    (shell-maker-set-buffer-name (current-buffer)
                                  <span style="color: #183691;">"*chatgpt*"</span>))
  (chatgpt-shell--insert-doc-response))

(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">chatgpt-shell--doc-conversation</span> ()
  (<span style="color: #a71d5d;">let</span> ((convo (<span style="color: #a71d5d;">with-current-buffer</span>  <span style="color: #183691;">"*doctor*"</span>
                 (split-string (buffer-string)  <span style="color: #183691;">"\n\n"</span>))))
    (seq-remove
     (<span style="color: #a71d5d;">lambda</span> (item)
       (string-empty-p (string-trim item)))
     (append
       <span style="color: #969896;">;; </span> <span style="color: #969896;">Replace first doc line, so it drops "Each time you are finished talking, type RET twice."</span>
      (list  <span style="color: #183691;">"I am the psychotherapist.  Please, describe your problems."</span>)
      (mapcar
       (<span style="color: #a71d5d;">lambda</span> (item)
         (replace-regexp-in-string  <span style="color: #183691;">"\n"</span>  <span style="color: #183691;">" "</span> item))
       (cdr convo))))))

(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">chatgpt-shell--doc-response</span> ()
  (<span style="color: #a71d5d;">let*</span> ((conversation (chatgpt-shell--doc-conversation))
         (length (seq-length conversation))
         (doc-response (nth (1- length) conversation)))
    doc-response))

(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">chatgpt-shell--insert-doc-response</span> ()
  (<span style="color: #a71d5d;">with-current-buffer</span>  <span style="color: #183691;">"*chatgpt*"</span>
    (goto-char (point-max))
    (chatgpt-shell--insert-delayed-text (chatgpt-shell--doc-response))
    (call-interactively 'shell-maker-submit)))

(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">chatgpt-shell--insert-delayed-text</span> (text)
   <span style="color: #183691;">"Insert TEXT into the current buffer, with a delay between each character."</span>
  (<span style="color: #a71d5d;">dolist</span> (char (string-to-list text))
    (insert char)
    (sit-for 0.009)))

(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">chatgpt-shell--on-chatgpt-patient-response</span> (command output)
  (<span style="color: #a71d5d;">if</span> (<span style="color: #a71d5d;">and</span> chatgpt-shell--doctor-in-session
           (not (string-match-p (regexp-quote  <span style="color: #183691;">"I'm cured"</span>) output)))
      (<span style="color: #a71d5d;">progn</span>
        (<span style="color: #a71d5d;">with-current-buffer</span>  <span style="color: #183691;">"*chatgpt*"</span>
          (goto-char (point-max)))
        (<span style="color: #a71d5d;">with-selected-window</span> (get-buffer-window  <span style="color: #183691;">"*doctor*"</span>)
          (goto-char (point-max))
          (chatgpt-shell--insert-delayed-text output)
          (call-interactively 'doctor-ret-or-read)
          (chatgpt-shell--insert-doc-response)))
    (message  <span style="color: #183691;">"Bye Bye"</span>)))

(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">chatgpt-shell-leave-doctor</span> ()
  (<span style="color: #a71d5d;">interactive</span>)
  (<span style="color: #a71d5d;">setq</span> chatgpt-shell--doctor-in-session nil)
  (call-interactively 'chatgpt-shell-ctrl-c-ctrl-c))

(add-hook 'chatgpt-shell-after-command-functions
          #'chatgpt-shell--on-chatgpt-patient-response)

(global-set-key (kbd  <span style="color: #183691;">"M-q"</span>) #'chatgpt-shell-visit-doctor)
</pre>
</div>

 <p>
Ok, enough already. Let's see it in action.
</p>


 <div id="orgff30a19" class="figure">
 <p> <a href="../images/chatgpt-visits-the-emacs-doctor/chatgpt-doc_optimized.gif" width="100%"> <img src="../images/chatgpt-visits-the-emacs-doctor/chatgpt-doc_optimized.gif" alt="chatgpt-doc_optimized.gif" width="100%"></img></a>
</p>
</div>

 <p>
If you'd like to take a closer look for analysis, here's the official transcript of this fruitful session:
</p>

 <blockquote>
 <p>
I am the psychotherapist.  Please, describe your problems.  Each time you are finished talking, type RET twice.
</p>


 <p>
I spend hours tweaking my Emacs config, but it's never perfect. I'm overwhelmed and obsessed with customization.
</p>


 <p>
Is it because it's not ever perfect you are overwhelmed and obsessed with customization that you came to me?
</p>


 <p>
Yes, I can't stop myself from constantly trying to tweak and improve my Emacs configuration. It's consuming me.
</p>


 <p>
Emacs?  Hah!  I would appreciate it if you would continue.
</p>


 <p>
Sorry about that. Yes, I came to you because I'm overwhelmed by my obsession with customizing my Emacs configuration.
</p>


 <p>
Does it bother you that you are overwhelmed by your obsession with customizing your emacs configuration?
</p>


 <p>
Absolutely! I feel trapped in an endless cycle of tweaking and configuring, unable to achieve satisfaction.
</p>


 <p>
Why do you say that?
</p>


 <p>
I constantly seek perfection in my Emacs config, but it's an unattainable goal that leaves me exhausted and frustrated.
</p>


 <p>
When did you first know that it's an unattainable goal that leaves you exhausted and frustrated?
</p>


 <p>
I've realized it recently after spending countless hours trying to perfect my Emacs configuration without any lasting satisfaction.
</p>


 <p>
Are you sure?
</p>


 <p>
Thanks you doc, I think I'm cured.
</p>
</blockquote>

 <p>
While we can work exclusively with the  <code>*doctor*</code> buffer making requests directly to the ChatGPT API, where's the fun in that? Getting the buffers to talk to each other enables us to marvel at both the beauty and absurdity of being able to glue anything together in our lovely Emacs world.
</p>

 <p>
Happy Emacsing!
</p>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/chatgpt-visits-the-emacs-doctor</link>
  <guid isPermaLink="false">http://xenodium.com/chatgpt-visits-the-emacs-doctor</guid>
  <pubDate>Wed, 12 Jul 2023 19:03:25 +0100</pubDate>
</item>
<item>
  <title>chatgpt-shell v0.60.1 updates</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-chatgpt-shell-v0601-updates" class="outline-2">
 <h2 id="chatgpt-shell-v0601-updates"> <span class="timestamp-wrapper"> <span class="timestamp">09 July 2023</span></span> chatgpt-shell v0.60.1 updates</h2>
 <div class="outline-text-2" id="text-chatgpt-shell-v0601-updates">
 <p>
Back in April, I shared  <a href="https://xenodium.com/chatgpt-shell-available-on-melpa/">chatgpt-shell updates</a>, showcasing  <a href="https://github.com/xenodium/chatgpt-shell">chatgpt-shell</a> features. It's been a little while, so here's an update with the latest additions.
</p>

 <p>
Like this project? Consider ✨ <a href="https://github.com/sponsors/xenodium">sponsoring</a>✨.
</p>
</div>

 <div id="outline-container-org9329d35" class="outline-3">
 <h3 id="org9329d35">Multi-session support</h3>
 <div class="outline-text-3" id="text-org9329d35">
 <p>
You can run multiple shell instances independently configured to use different versions or system prompts.
</p>

 <p>
This was biggest recent change. Please report issues.
</p>


 <div id="orgdfe9415" class="figure">
 <p> <img src="../images/chatgpt-shell-v0601-updates/cat-turtle.gif" alt="cat-turtle.gif" width="95%"></img></p>
</div>
</div>
</div>

 <div id="outline-container-orgdd9302c" class="outline-3">
 <h3 id="orgdd9302c">Display system prompt and version</h3>
 <div class="outline-text-3" id="text-orgdd9302c">
 <p>
The current shell's version and system prompt are now displayed more prominently in both the shell prompt and buffer name.
</p>


 <div id="org47e7590" class="figure">
 <p> <img src="../images/chatgpt-shell-v0601-updates/display.png" alt="display.png" width="90%"></img></p>
</div>

 <p>
With multi-session support, displaying shell details in the buffer name becomes more important as it makes it easier to find shells across your buffer list.
</p>
</div>
</div>

 <div id="outline-container-org408d9f6" class="outline-3">
 <h3 id="org408d9f6">Rename shell buffers</h3>
 <div class="outline-text-3" id="text-org408d9f6">
 <p>
While buffer names are now automatically derived, one can also use  <code>chatgpt-shell-rename-buffer</code> to use custom buffer names.
</p>
</div>
</div>

 <div id="outline-container-orge1cc23e" class="outline-3">
 <h3 id="orge1cc23e">ob-chatgpt-shell improvements</h3>
 <div class="outline-text-3" id="text-orge1cc23e">
 <p>
Use  <code>:temperature</code> to specify the  <a href="https://platform.openai.com/docs/api-reference/completions%5C%20/create#completions/create-temperature">temperature</a>.
</p>

 <p>
Use  <code>:context CONTEXT-NAME</code> to pick and choose which source blocks to aggregate as context. Thank you  <a href="https://github.com/jtmoulia">Thomas Moulia</a>.
</p>

 <p>
Use  <code>:preflight t</code> to debug  <code>ob-chatgpt-shell</code> execution.
</p>


 <div id="org4aabdca" class="figure">
 <p> <img src="../images/chatgpt-shell-v0601-updates/preflight.png" alt="preflight.png" width="60%"></img></p>
</div>
</div>
</div>

 <div id="outline-container-org1c28eb3" class="outline-3">
 <h3 id="org1c28eb3">chatgpt-shell-write-git-commit</h3>
 <div class="outline-text-3" id="text-org1c28eb3">
 <p>
Adds  <code>chatgpt-shell-write-git-commit</code>, so you can generate commit messages using the current region. Thank you  <a href="https://github.com/bigsky77">Simon Judd</a>.
</p>
</div>
</div>

 <div id="outline-container-orgc16cfe9" class="outline-3">
 <h3 id="orgc16cfe9">Approximate context length</h3>
 <div class="outline-text-3" id="text-orgc16cfe9">
 <p>
 <code>chatgpt-shell</code> now uses  <code>chatgpt-shell--approximate-context-length</code> to approximate the context size and discard history if necessary. This is pretty experimental but seems to work well enough. It's enabled by default to get some feedback. Please file bugs if needed or send PRs to improve.
</p>
</div>
</div>

 <div id="outline-container-orgeae3869" class="outline-3">
 <h3 id="orgeae3869"> <code>S-<return></code> for multiline input</h3>
 <div class="outline-text-3" id="text-orgeae3869">
 <p>
In addition to  <code>C-J</code> to insert multi-line input,  <code>S-<return></code> is also supported. Thank you  <a href="https://github.com/shouya">shouya</a> for the submission.
</p>
</div>
</div>

 <div id="outline-container-orgf344589" class="outline-3">
 <h3 id="orgf344589">Welcome message</h3>
 <div class="outline-text-3" id="text-orgf344589">
 <p>
A welcome message now makes the help much more discoverable for new or sporadic users. Thank you  <a href="https://github.com/shouya">shouya</a> for the suggestion.
</p>


 <div id="orgc86994b" class="figure">
 <p> <img src="../images/chatgpt-shell-v0601-updates/welcome.png" alt="welcome.png" width="75%"></img></p>
</div>
</div>
</div>

 <div id="outline-container-orged0396f" class="outline-3">
 <h3 id="orged0396f">Help me</h3>
 <div class="outline-text-3" id="text-orged0396f">
 <p>
While the  <a href="https://github.com/xenodium/chatgpt-shell">README</a> documents the shells and Emacs is  <a href="https://www.emacswiki.org/emacs/SelfDocumentation">self-documenting</a>, we now have a  <code>help</code> command to make things a little more discoverable.
</p>


 <div id="orgb6bbfb8" class="figure">
 <p> <img src="../images/chatgpt-shell-v0601-updates/help.png" alt="help.png" width="99%"></img></p>
</div>
</div>
</div>

 <div id="outline-container-orge68fdf3" class="outline-3">
 <h3 id="orge68fdf3">Hello chatgpt-shell-mode and dall-e-shell-mode</h3>
 <div class="outline-text-3" id="text-orge68fdf3">
 <p>
Both  <code>chatgpt-shell</code> and  <code>dall-e-shell</code> are both based on  <code>shell-maker</code> and until recently both shared  <code>shell-maker-mode</code> as their major mode. This didn't play well with yasnippet. Both shells now enable independent major modes:  <code>chatgpt-shell-mode</code> and  <code>dall-e-shell-mode</code>. Thank you  <a href="https://github.com/djliden">Daniel Liden</a> for the proposal.
</p>
</div>
</div>

 <div id="outline-container-org9bc3d04" class="outline-3">
 <h3 id="org9bc3d04">Saving transcript customizations</h3>
 <div class="outline-text-3" id="text-org9bc3d04">
 <p>
Make transcript saving more customizable via  <code>shell-maker-transcript-default-path</code> and  <code>shell-maker-transcript-default-filename</code>. Thank you  <a href="https://github.com/gnusupport">gnusupport</a>.
</p>
</div>
</div>

 <div id="outline-container-org107f0ea" class="outline-3">
 <h3 id="org107f0ea">New ChatGPT model versions</h3>
 <div class="outline-text-3" id="text-org107f0ea">
 <p>
New OpenAI model versions were recently released and added to chatgpt-shell:  <code>gpt-3.5-turbo-0613</code> and  <code>gpt-4-0613</code>. Thanks you  <a href="https://github.com/suzuki">Norio Suzuki</a>.
</p>
</div>
</div>

 <div id="outline-container-orgfddbf69" class="outline-3">
 <h3 id="orgfddbf69">Load awesome prompts</h3>
 <div class="outline-text-3" id="text-orgfddbf69">
 <p>
 <code>M-x chatgpt-shell-load-awesome-prompts</code> to download and import curated prompts from  <a href="https://github.com/f/awesome-chatgpt-prompts">awesome-chatgpt-prompts</a>. Thank you  <a href="https://github.com/dangom">Daniel Gomez</a>.
</p>


 <div id="org41fe168" class="figure">
 <p> <img src="../images/chatgpt-shell-v0601-updates/awesome.png" alt="awesome.png" width="75%"></img></p>
</div>
</div>
</div>

 <div id="outline-container-org1521597" class="outline-3">
 <h3 id="org1521597">ob-async</h3>
 <div class="outline-text-3" id="text-org1521597">
 <p>
We had reports that ob-chatgpt-shell didn't play nice with  <a href="https://github.com/astahlman/ob-async">ob-async</a>. Thank you  <a href="https://github.com/wmedrano">William Medrano</a> for the solution.
</p>
</div>
</div>

 <div id="outline-container-orgf6d16f1" class="outline-3">
 <h3 id="orgf6d16f1">Configurable prompts</h3>
 <div class="outline-text-3" id="text-orgf6d16f1">
 <p>
Functions like  <code>chatgpt-shell-describe-code</code> ask ChatGPT to describe the code in region. These functions used hardcoded English prompts. These are now configurable, so users can tweak or translate if preferred. Thank you  <a href="https://github.com/suzuki">Norio Suzuki</a>.
</p>

 <ul class="org-ul"> <li> <code>chatgpt-shell-prompt-header-describe-code</code></li>
 <li> <code>chatgpt-shell-prompt-header-refactor-code</code></li>
 <li> <code>chatgpt-shell-prompt-header-generate-unit-test</code></li>
 <li> <code>chatgpt-shell-prompt-header-proofread-region</code></li>
 <li> <code>chatgpt-shell-prompt-header-whats-wrong-with-last-command</code></li>
 <li> <code>chatgpt-shell-prompt-header-eshell-summarize-last-command-output</code></li>
</ul></div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/chatgpt-shell-v0601-updates</link>
  <guid isPermaLink="false">http://xenodium.com/chatgpt-shell-v0601-updates</guid>
  <pubDate>Sun, 09 Jul 2023 14:21:28 +0100</pubDate>
</item>
<item>
  <title>Duplicate this!</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-duplicate-this" class="outline-2">
 <h2 id="duplicate-this"> <span class="timestamp-wrapper"> <span class="timestamp">05 July 2023</span></span> Duplicate this!</h2>
 <div class="outline-text-2" id="text-duplicate-this">
 <p>
 <a href="http://www.dyerdwelling.family/">James Dyer</a> has a nice  <a href="https://www.emacs.dyerdwelling.family/emacs/20230606213531-emacs--dired-duplicate-here-revisited/">post</a> sharing his frequent  <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Dired.html">dired</a> need to duplicate files. He offers a solution using a custom interactive command. His use-case resonated with me.
</p>

 <p>
Similarly, James' recommendation to bind his file-duplicating command to  <code>C-c d</code> [1] sent a signal to my brain triggering  <a href="https://twitter.com/bbatsov">Bozhidar Batsov</a>'s  <code>crux-duplicate-current-line-or-region</code>.
</p>

 <p>
 <code>crux-duplicate-current-line-or-region</code> is part of a "collection of Ridiculously useful extensions for Emacs" (yeah that's  <a href="https://github.com/bbatsov/crux">crux</a>). The command itself does what it says on the tin.
</p>

 <p>
Let's duplicate the current line.
</p>


 <div id="org80db9aa" class="figure">
 <p> <img src="../images/duplicate-this/duplicate-line.gif" alt="duplicate-line.gif" width="95%"></img></p>
</div>

 <p>
Now let's duplicate the current region.
</p>


 <div id="orgaf82774" class="figure">
 <p> <img src="../images/duplicate-this/duplicate-region.gif" alt="duplicate-region.gif" width="95%"></img></p>
</div>

 <p>
Since I already have a well-internalized key-binding duplicating lines/regions in text buffers, I could extend a similar behaviour to dired files with almost zero adoption effort.
</p>

 <p>
In case you haven't noticed, I've made it a  <a href="https://youtu.be/urcL86UpqZc?t=177">part-time job</a> to make command line utilities easily accessible from Emacs ( <a href="https://xenodium.com/joining-images-from-the-comfort-of-dired/">1</a>  <a href="https://xenodium.com/emacs-dwim-shell-command/">2</a>  <a href="https://xenodium.com/emacs-password-protect-current-pdf-revisited/">3</a>  <a href="https://xenodium.com/dwim-shell-command-now-on-windows/">4</a>  <a href="https://xenodium.com/recordscreenshot-windows-the-lazy-way/">5</a>  <a href="https://xenodium.com/emacs-ffmpeg-and-macos-alias-commands/">6</a>  <a href="https://xenodium.com/emacs-quick-kill-process/">7</a>  <a href="https://xenodium.com/hey-emacs-change-the-default-macos-app-for/">8</a>  <a href="https://xenodium.com/hey-emacs-where-did-i-take-that-photo/">9</a>  <a href="https://xenodium.com/emacs-open-with-macos-app/">10</a>  <a href="https://xenodium.com/emacs-macos-sharing-dwim-style-improved/">11</a>  <a href="https://xenodium.com/emacs-macos-share-from-dired-dwim-style/">12</a>  <a href="https://xenodium.com/emacs-reveal-in-finder-dwim-style/">13</a>  <a href="https://xenodium.com/dwim-shell-command-usages-pdftotext-and-scp/">14</a>  <a href="https://xenodium.com/dwim-shell-command-with-template-prompts/">15</a>  <a href="https://xenodium.com/seamless-command-line-utils/">16</a>  <a href="https://xenodium.com/dwim-shell-command-video-streams/">17</a>  <a href="https://xenodium.com/dwim-shell-command-improvements/">18</a>  <a href="https://xenodium.com/dwim-shell-command-on-melpa/">19</a>  <a href="https://xenodium.com/emacs-dwim-shell-command-multi-language/">20</a>  <a href="https://xenodium.com/png-to-icns-emacs-dwim-style/">21</a>) via  <a href="https://github.com/xenodium/dwim-shell-command">dwim-shell-command</a>. Partly because it's fairly quick and partly 'cause it's fun.
</p>

 <p>
Jame's post gave me yet another opportunity to exercise my errrm part-time job. This time, duplicating files. All I need is the  <a href="https://www.man7.org/linux/man-pages/man1/cp.1.html">cp</a> utility and a template:
</p>

 <div class="org-src-container">
 <pre class="src src-sh">cp -R  <span style="color: #183691;">'<<f>>'</span>  <span style="color: #183691;">'<<f(u)>>'</span>
</pre>
</div>

 <p>
I seldom type these template's myself when I want to execute a command (via  <code>M-x dwim-shell-command</code>). I typically wrap these templates in interactive commands, making them easily accessible via  <code>M-x</code> and your favorite completion framework. I happen to use  <a href="https://github.com/abo-abo/swiper">ivy</a>.
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">require</span> ' <span style="color: #0086b3;">dwim-shell-command</span>)

(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">dwim-shell-commands-duplicate</span> ()
   <span style="color: #183691;">"Duplicate file(s)."</span>
  (<span style="color: #a71d5d;">interactive</span>)
  (dwim-shell-command-on-marked-files
    <span style="color: #183691;">"Duplicate file(s)."</span>
    <span style="color: #183691;">"cp -R '</span> <span style="color: #0086b3;"><<f>></span> <span style="color: #183691;">' '<<f(u)>>'"</span>
    <span style="color: #a71d5d;">:utils</span>  <span style="color: #183691;">"cp"</span>))
</pre>
</div>

 <p>
There's nothing much to the command. Most logic is handled by the template, replacing  <code><<f>></code> with the current file and  <code><<f(u)>></code> with a uniquified version of it. Having said this, there's a bunch of free  <a href="https://xenodium.com/emacs-dwim-do-what-i-mean/">DWIM</a> love that kicks in, courtesy of the  <code>dwim-shell-command</code> package by yours truly. Let's give our new  <code>dwim-shell-commands-duplicate</code> command a spin.
</p>

 <p>
Like  <code>crux-duplicate-current-line-or-region</code> duplicates the current line, our new command duplicates the current dired file.
</p>


 <div id="orgd6cf066" class="figure">
 <p> <img src="../images/duplicate-this/duplicate-file.gif" alt="duplicate-file.gif" width="95%"></img></p>
</div>

 <p>
Got multiple files to duplicate? Like  <code>crux-duplicate-current-line-or-region</code>, we can use the region for a similar purpose.
</p>


 <div id="org87a542d" class="figure">
 <p> <img src="../images/duplicate-this/duplicate-files.gif" alt="duplicate-files.gif" width="95%"></img></p>
</div>

 <p>
While we have been using the region to duplicate adjacent files, we can also mark specific files.
</p>


 <div id="org8ac275d" class="figure">
 <p> <img src="../images/duplicate-this/duplicate-marked.gif" alt="duplicate-marked.gif" width="95%"></img></p>
</div>

 <p>
Our  <code>cp -R '<<f>>' '<<f(u)>>'</code> template uses the  <code>-R</code> (recursive) flag, so we get another freebie. In addition to files, we can also duplicate directories.
</p>


 <div id="orged356a3" class="figure">
 <p> <img src="../images/duplicate-this/duplicate-dirs.gif" alt="duplicate-dirs.gif" width="95%"></img></p>
</div>

 <p>
Lastly, because we're on a DWIM train, if your current buffer happens to be visiting a file, you can  <code>M-x dwim-shell-commands-duplicate</code> the current file to duplicate it. You're automatically dropped to a dired buffer, with point on the new file (à la  <a href="https://emacsredux.com/blog/2013/09/24/dired-jump/">dired-jump</a>).
</p>


 <div id="org0a5acb9" class="figure">
 <p> <img src="../images/duplicate-this/duplicate-buffer.gif" alt="duplicate-buffer.gif" width="95%"></img></p>
</div>

 <p>
While duplicating files using a template was a mere  <code>cp -R '<<f>>' '<<f(u)>>'</code> away, we get a bunch of free DWIM magic applied to a handful of use-cases and contexts. What made the file-duplicating use-case extra special is that it maps almost exactly to an equivalent text command. Keep the same key bindings and we almost get a " <a href="https://endlessparentheses.com/hungry-delete-mode.html">free feature</a>".
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">use-package</span>  <span style="color: #0086b3;">crux</span>
   <span style="color: #a71d5d;">:ensure</span> t
   <span style="color: #a71d5d;">:commands</span> crux-open-with
   <span style="color: #a71d5d;">:bind</span>
  ((<span style="color: #183691;">"C-c d"</span> . crux-duplicate-current-line-or-region)))

(<span style="color: #a71d5d;">use-package</span>  <span style="color: #0086b3;">dwim-shell-command</span>
   <span style="color: #a71d5d;">:ensure</span> t
   <span style="color: #a71d5d;">:bind</span> (<span style="color: #a71d5d;">:map</span> dired-mode-map
              (<span style="color: #183691;">"C-c d"</span> . dwim-shell-commands-duplicate))
   <span style="color: #a71d5d;">:config</span>
   <span style="color: #969896;">;; </span> <span style="color: #969896;">Loads all my own dwim shell commands</span>
   <span style="color: #969896;">;; </span> <span style="color: #969896;">(including `</span> <span style="color: #0086b3;">dwim-shell-commands-duplicate</span> <span style="color: #969896;">')</span>
  (<span style="color: #a71d5d;">require</span> ' <span style="color: #0086b3;">dwim-shell-commands</span>))
</pre>
</div>

 <p>
You can find my ever-growing list of similar commands over at  <a href="https://github.com/xenodium/dwim-shell-command/blob/main/dwim-shell-commands.el">dwim-shell-commands.el</a> (the optional part of the package). Got some nifty usages? Would love to check 'em out.  <a href="https://indieweb.social/@xenodium">Get in touch</a>.
</p>

 <p>
Like this or  <a href="https://xenodium.com/">other content</a>?  <a href="https://github.com/sponsors/xenodium">✨Sponsor✨ via GitHub Sponsors</a>.
</p>

 <p>
[1]: I actually use  <code>C-x C-d</code> for  <code>crux-duplicate-current-line-or-region</code> but same same…
</p>
</div>

 <div id="outline-container-org61eec8d" class="outline-3">
 <h3 id="org61eec8d">Update</h3>
 <div class="outline-text-3" id="text-org61eec8d">
 <p>
If you're keen on a regex-based approach,  <a href="https://www.reddit.com/user/arthurno1/">u/arthurno1</a>  <a href="https://www.reddit.com/r/emacs/comments/14rmvkx/comment/jqtkel8/?utm_source=share&utm_medium=web2x&context=3">offers a great built-in alternative</a>: dired-do-copy-regexp (bound to  <code>% C</code>).
</p>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/duplicate-this</link>
  <guid isPermaLink="false">http://xenodium.com/duplicate-this</guid>
  <pubDate>Wed, 05 Jul 2023 21:31:50 +0100</pubDate>
</item>
<item>
  <title>Stitching images from the comfort of dired</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-joining-images-from-the-comfort-of-dired" class="outline-2">
 <h2 id="joining-images-from-the-comfort-of-dired"> <span class="timestamp-wrapper"> <span class="timestamp">29 June 2023</span></span> Stitching images from the comfort of dired</h2>
 <div class="outline-text-2" id="text-joining-images-from-the-comfort-of-dired">
 <p>
I recently wanted a few images stitched together. A perfect job for  <a href="https://imagemagick.org/">ImageMagick</a>. A quick search yielded the magical incantation:
</p>

 <div class="org-src-container">
 <pre class="src src-sh">convert image1.jpg image2.jpg image3.jpg +append joined.jpg
</pre>
</div>

 <p>
Great, now I know, but I'll rarely use it and will soon forget it. I may as well add it to my  <a href="https://github.com/xenodium/dwim-shell-command/blob/main/dwim-shell-commands.el">repository</a> of  <a href="https://en.wikipedia.org/wiki/DWIM">DWIM</a> command line utilities, wrapped in a convenient Emacs function, applicable from different contexts…  <a href="https://xenodium.com/emacs-dwim-do-what-i-mean/">know what I mean</a>? 🙃
</p>

 <p>
I built  <a href="https://github.com/xenodium/dwim-shell-command">dwim-shell-command</a> for this purpose. You can take the above command and easily turn it into an interactive Emacs command with something like the following:
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">require</span> ' <span style="color: #0086b3;">dwim-shell-command</span>)

(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">dwim-shell-commands-join-images-horizontally</span> ()
   <span style="color: #183691;">"Join all marked images horizontally as a single image."</span>
  (<span style="color: #a71d5d;">interactive</span>)
  (dwim-shell-command-on-marked-files
    <span style="color: #183691;">"Join images horizontally"</span>
    <span style="color: #183691;">"convert -verbose '</span> <span style="color: #0086b3;"><<*>></span> <span style="color: #183691;">' +append '</span> <span style="color: #0086b3;">joined.jpg</span> <span style="color: #183691;">'"</span>
    <span style="color: #a71d5d;">:utils</span>  <span style="color: #183691;">"convert"</span>))
</pre>
</div>

 <p>
You can select as many images as you'd like from the comfort of your dired and  <i>make the ImageMagick happen</i>.
</p>


 <div id="org7e0ef50" class="figure">
 <p> <img src="../images/joining-images-from-the-comfort-of-dired/burgers.gif" alt="burgers.gif" width="95%"></img></p>
</div>

 <p>
The snippet does the job just fine, but we can make it smarter. For starters, let's not hardcode the output filename. We'll ask the user instead. While we're asking, let's offer a default filename, but let's not assume the output extension is  <code>.jpg</code>. Let's guess based on the image selection. While we're at it, let's not override the output file if already exists. Uniquify it.
</p>

 <p>
Most of the above can be achieved by either using  <a href="https://github.com/xenodium/dwim-shell-command">dwim-shell-command</a> helpers or its templating language. For example,  <code><<joined.png(u)>></code> ensures that if  <code>joined.png</code> already exists, it automatically generates  <code>joined(1).png</code> instead.
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">require</span> ' <span style="color: #0086b3;">dwim-shell-command</span>)

(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">dwim-shell-commands-join-images-horizontally</span> ()
   <span style="color: #183691;">"Join all marked images horizontally as a single image."</span>
  (<span style="color: #a71d5d;">interactive</span>)
  (<span style="color: #a71d5d;">let</span> ((filename (format  <span style="color: #183691;">"joined.%s"</span>
                          (<span style="color: #a71d5d;">or</span> (seq-first (dwim-shell-command--file-extensions))  <span style="color: #183691;">"png"</span>))))
    (dwim-shell-command-on-marked-files
      <span style="color: #183691;">"Join images horizontally"</span>
     (format  <span style="color: #183691;">"convert -verbose '</span> <span style="color: #0086b3;"><<*>></span> <span style="color: #183691;">' +append '<<%s(u)>>'"</span>
             (dwim-shell-command-read-file-name
              (format  <span style="color: #183691;">"Join as image named (default \"%s\"): "</span> filename)
               <span style="color: #a71d5d;">:default</span> filename))
      <span style="color: #a71d5d;">:utils</span>  <span style="color: #183691;">"convert"</span>)))
</pre>
</div>

 <p>
Here's the new horizontal command in action…
</p>


 <div id="orga168a86" class="figure">
 <p> <img src="../images/joining-images-from-the-comfort-of-dired/burger_row_x1.5_optimized.gif" alt="burger_row_x1.5_optimized.gif" width="95%"></img></p>
</div>

 <p>
Notice how this time we didn't mark the images using  <code>dired-mark</code>, typically bound to  <code>m</code>. Instead, we made our selection using the region. Also, if you haven't gotten your junk food fix yet, here's the fries equivalent ;)
</p>


 <div id="orgf7342a0" class="figure">
 <p> <img src="../images/joining-images-from-the-comfort-of-dired/fries_row_x1.5_optimized.gif" alt="fries_row_x1.5_optimized.gif" width="95%"></img></p>
</div>

 <p>
We'll rinse all and repeat to get the vertical command equivalent. I know, I know, there's fair amount of duplication but c'est la vie.
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">require</span> ' <span style="color: #0086b3;">dwim-shell-command</span>)

(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">dwim-shell-commands-join-images-vertically</span> ()
   <span style="color: #183691;">"Join all marked images vertically as a single image."</span>
  (<span style="color: #a71d5d;">interactive</span>)
  (<span style="color: #a71d5d;">let</span> ((filename (format  <span style="color: #183691;">"joined.%s"</span>
                          (<span style="color: #a71d5d;">or</span> (seq-first (dwim-shell-command--file-extensions))  <span style="color: #183691;">"png"</span>))))
    (dwim-shell-command-on-marked-files
      <span style="color: #183691;">"Join images vertically"</span>
     (format  <span style="color: #183691;">"convert -verbose '</span> <span style="color: #0086b3;"><<*>></span> <span style="color: #183691;">' -append '<<%s(u)>>'"</span>
             (dwim-shell-command-read-file-name
              (format  <span style="color: #183691;">"Join as image named (default \"%s\"): "</span> filename)
               <span style="color: #a71d5d;">:default</span> filename))
      <span style="color: #a71d5d;">:utils</span>  <span style="color: #183691;">"convert"</span>)))
</pre>
</div>

 <p>
…and for our grand finale, we'll vertically join our burgers and fries. Behold!
</p>


 <div id="org0de8026" class="figure">
 <p> <img src="../images/joining-images-from-the-comfort-of-dired/finale_x1.5_optimized.gif" alt="finale_x1.5_optimized.gif" width="95%"></img></p>
</div>

 <p>
These commands are now part of  <a href="https://github.com/xenodium/dwim-shell-command">dwim-shell-command</a>. To get them, load the optional commands via  <code>(require 'dwim-shell-commands)</code>.
</p>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/joining-images-from-the-comfort-of-dired</link>
  <guid isPermaLink="false">http://xenodium.com/joining-images-from-the-comfort-of-dired</guid>
  <pubDate>Thu, 29 Jun 2023 22:04:25 +0100</pubDate>
</item>
<item>
  <title>noweb: the lesser known org babel glue</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-noweb-more-glue-for-your-org-toolbox" class="outline-2">
 <h2 id="noweb-more-glue-for-your-org-toolbox"> <span class="timestamp-wrapper"> <span class="timestamp">18 June 2023</span></span> noweb: the lesser known org babel glue</h2>
 <div class="outline-text-2" id="text-noweb-more-glue-for-your-org-toolbox">
 <p>
While  <a href="https://orgmode.org/">Org</a> babel's  <a href="https://orgmode.org/manual/Noweb-Reference-Syntax.html">noweb</a> isn't something I've frequently used for literate programming, its simplicity makes it rather versatile to glue all sorts of babel things I hadn't previously considered.
</p>

 <p>
The idea is simple. Add a placeholder like  <code><<other-block>></code> to an  <a href="https://orgmode.org/manual/Working-with-Source-Code.html">org babel</a> source block, and it will be automatically replaced (verbatim) with the content (or result) of referred block before execution. You'll also need the  <code>:noweb yes</code> header argument.
</p>

 <div class="org-src-container">
 <pre class="src src-org">#+NAME: other-block
#+begin_src swift
  print("Hello 0")
#+end_src

#+RESULTS: other-block
: Hello 0

#+BEGIN_SRC swift :noweb yes
  <<other-block>>
  print("Hello 1")
#+END_SRC

#+RESULTS:
: Hello 0
: Hello 1
</pre>
</div>

 <p>
Since  <code><<other-block>></code> is replaced with the content of said block, at execution time, the block is effectively equivalent to executing:
</p>

 <div class="org-src-container">
 <pre class="src src-swift"> <span style="color: #a71d5d;">print</span>(<span style="color: #183691;">"Hello 0"</span>)
 <span style="color: #a71d5d;">print</span>(<span style="color: #183691;">"Hello 1"</span>)
</pre>
</div>

 <pre class="example">
Hello 0
Hello 1
</pre>


 <p>
Why is this so versatile? Org babel can include/execute all sorts of languages, so you can mix and match the result from one language and massage it to appear as the body of another block using the same (or different) language.
</p>

 <p>
I was recently asked  <a href="https://github.com/xenodium/chatgpt-shell/issues/102">how to include the result from one babel block in another</a> using  <a href="https://github.com/xenodium/chatgpt-shell/#chatgpt-org-babel">ob-chatgpt-shell</a>. While the initial question was looking for a solution involving variables, we can use noweb to achieve a similar goal.
</p>

 <p>
Note that in this case, I'll be using  <code><<hello()>></code>, with  <code>()</code>, to refer to  <code>#+RESULTS:</code> rather than the source block itself.
</p>

 <div class="org-src-container">
 <pre class="src src-org">#+NAME: hello
#+BEGIN_SRC chatgpt-shell
Say hello in spanish
#+END_SRC

#+RESULTS: hello
Hola

#+BEGIN_SRC chatgpt-shell :noweb yes
<<hello()>>
What does the previous line say verbatim?
#+END_SRC
</pre>
</div>

 <p>
Executing the block
</p>

 <div class="org-src-container">
 <pre class="src src-chatgpt-shell"><<hello()>>
What does the previous line say verbatim?
</pre>
</div>

 <p>
Gives us
</p>

 <pre class="example">
The previous line says "Hola".
</pre>


 <p>
On a similar note, I was asked if the results from a previous source block could be  <a href="https://indieweb.social/@kickingvegas@sfba.social/110562099134297469">fed to a Swift Chart block</a> using  <a href="https://github.com/xenodium/ob-swiftui">ob-swiftui</a>.
</p>

 <p>
While I'm new to  <a href="https://developer.apple.com/documentation/Charts">Swift Charts</a>, I do love glueing things via Emacs lisp. I figured I could write a little elisp to generate random data and feed it to a SwiftUI block via  <code><<data()>></code>. The result is pretty neat, based on Apple's  <a href="https://developer.apple.com/documentation/charts/linemark">LineMark example</a>.
</p>


 <div id="org71f1814" class="figure">
 <p> <img src="../images/noweb-more-glue-for-your-org-toolbox/data-chart.gif" alt="data-chart.gif" width="95%"></img></p>
</div>

 <div class="org-src-container">
 <pre class="src src-org">#+NAME: data
#+begin_src emacs-lisp :lexical no
  (concat (mapconcat (lambda (n)
                       (format "MonthlyHoursOfSunshine(city: \"Seattle\", month: %d, hoursOfSunshine: %d),"
                               n (random 100)))
                     (number-sequence 1 20) "\n")
          "\n"
          (mapconcat (lambda (n)
                       (format "MonthlyHoursOfSunshine(city: \"Cupertino\", month: %d, hoursOfSunshine: %d),"
                               n (random 100)))
                     (number-sequence 1 20) "\n"))
#+end_src

#+begin_src swiftui :results file :noweb yes
  import Charts

  struct MonthlyHoursOfSunshine: Identifiable {
    var city: String
    var date: Date
    var hoursOfSunshine: Double
    var id = UUID()

    init(city: String, month: Int, hoursOfSunshine: Double) {
      let calendar = Calendar.autoupdatingCurrent
      self.city = city
      self.date = calendar.date(from: DateComponents(year: 2020, month: month))!
      self.hoursOfSunshine = hoursOfSunshine
    }
  }

  struct ContentView: View {
    var data: [MonthlyHoursOfSunshine] = [
<<data()>>
    ]
    var body: some View {
      Chart(data) {
        LineMark(
          x: .value("Month", $0.date),
          y: .value("Hours of Sunshine", $0.hoursOfSunshine)
        )
        .foregroundStyle(by: .value("City", $0.city))
      }
      .frame(minWidth: 800, minHeight: 300)
      .padding()
      .colorScheme(.dark)
    }
  }
#+end_src
</pre>
</div>

 <p>
While I've shown fairly basic usages of noweb, we can accomplish some nifty integrations. Check out the  <a href="https://orgmode.org/manual/Noweb-Reference-Syntax.html">noweb reference syntax</a> for more examples and additional header arguments like  <code>tangle</code>,  <code>strip-tangle</code>, and others.
</p>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/noweb-more-glue-for-your-org-toolbox</link>
  <guid isPermaLink="false">http://xenodium.com/noweb-more-glue-for-your-org-toolbox</guid>
  <pubDate>Sun, 18 Jun 2023 18:23:00 +0100</pubDate>
</item>
<item>
  <title>Deleting from Emacs sequence vars</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-deleting-from-emacs-sequence-vars" class="outline-2">
 <h2 id="deleting-from-emacs-sequence-vars"> <span class="timestamp-wrapper"> <span class="timestamp">25 May 2023</span></span> Deleting from Emacs sequence vars</h2>
 <div class="outline-text-2" id="text-deleting-from-emacs-sequence-vars">
 <p>
Adding hooks and setting variables is core to customizing Emacs. Take a major mode like
 <code>emacs-lisp-mode</code> as an example. To customize its behaviour, one may add a hook function to  <code>emacs-lisp-mode-hook</code>, or if you're a little lazy while experimenting, you may even use a lambda.
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(add-hook 'emacs-lisp-mode-hook
          #'my/emacs-lisp-mode-config)

(add-hook 'emacs-lisp-mode-hook
          (<span style="color: #a71d5d;">lambda</span> ()
            (message  <span style="color: #183691;">"I woz ere"</span>)))
</pre>
</div>

 <p>
 <code>emacs-lisp-mode-hook</code>'s content would subsequently look as follows:
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">'(my/emacs-lisp-mode-config
  (<span style="color: #a71d5d;">lambda</span> nil
    (message  <span style="color: #183691;">"I woz ere"</span>))
  ert--activate-font-lock-keywords
  easy-escape-minor-mode
  lisp-extra-font-lock-global-mode)
</pre>
</div>

 <p>
Maybe  <code>my/emacs-lisp-mode-config</code> didn't work out for us and we'd like to remove it. We can use  <code>remove-hook</code> for that and evaluate something like:
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(remove-hook 'emacs-lisp-mode-hook #'my/emacs-lisp-mode-config)
</pre>
</div>

 <p>
The lambda can be removed too, but you ought to be careful in using the same lambda body.
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(remove-hook 'emacs-lisp-mode-hook
             (<span style="color: #a71d5d;">lambda</span> ()
               (message  <span style="color: #183691;">"I woz tere"</span>)))
</pre>
</div>

 <p>
There are other ways to remove the lambdas, but we're digressing here… We typically have to write these throwaway snippets to undo our experiments. What if we just had a handy helper always available to remove items from sequences  <i>(edit: we do,  <code>remove-hook</code> is already interactive, see Update 2 below)</i>? After all, hooks are just lists (sequences).
</p>


 <div id="org06e2330" class="figure">
 <p> <img src="../images/deleting-from-emacs-sequence-vars/removed-lambda.gif" alt="removed-lambda.gif" width="70%"></img></p>
</div>

 <p>
While the interactive command can likely be simplified further, I tried to optimize for ergonomic usage. For example,  <code>completing-read</code> gives us a way narrow down whichever variable we'd like to modify as well as the item we'd like to remove.  <code>seqp</code> is also handy, as we filter out noise by automatically removing any variable that's not a sequence.
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">ar/remove-from-list-variable</span> ()
  (<span style="color: #a71d5d;">interactive</span>)
  (<span style="color: #a71d5d;">let*</span> ((var (intern
               (completing-read  <span style="color: #183691;">"From variable: "</span>
                                (<span style="color: #a71d5d;">let</span> (symbols)
                                  (mapatoms
                                   (<span style="color: #a71d5d;">lambda</span> (sym)
                                     (<span style="color: #a71d5d;">when</span> (<span style="color: #a71d5d;">and</span> (boundp sym)
                                                (seqp (symbol-value sym)))
                                       (<span style="color: #a71d5d;">push</span> sym symbols))))
                                  symbols)  <span style="color: #333333;">nil t)))</span>
         (values (mapcar (<span style="color: #a71d5d;">lambda</span> (item)
                           (<span style="color: #a71d5d;">setq</span> item (prin1-to-string item))
                           (concat (truncate-string-to-width
                                    (nth 0 (split-string item  <span style="color: #183691;">"\n"</span>))
                                    (window-body-width))
                                   (propertize item 'invisible t)))
                         (symbol-value var)))
         (index (<span style="color: #a71d5d;">progn</span>
                  (<span style="color: #a71d5d;">when</span> (seq-empty-p values) (<span style="color: #333333;">error</span>  <span style="color: #183691;">"Already empty"</span>))
                  (seq-position values (completing-read  <span style="color: #183691;">"Delete: "</span> values nil t)))))
    (<span style="color: #a71d5d;">unless</span> index (<span style="color: #333333;">error</span>  <span style="color: #183691;">"Eeek. Something's up."</span>))
    (set var (append (seq-take (symbol-value var) index)
                     (seq-drop (symbol-value var) (1+ index))))
    (message  <span style="color: #183691;">"Deleted: %s"</span> (truncate-string-to-width
                            (seq-elt values index)
                            (- (window-body-width) 9)))))
</pre>
</div>

 <p>
Hooks are just an example of lists we can delete from. I recently used the same command on  <code>display-buffer-alist</code>.
</p>


 <div id="org8c6c197" class="figure">
 <p> <img src="../images/deleting-from-emacs-sequence-vars/alist.gif" alt="alist.gif" width="80%"></img></p>
</div>

 <p>
While this has been a fun exercise, I can't help but think that I'm likely re-inventing the wheel here. Is there something already built-in that I'm missing?
</p>
</div>

 <div id="outline-container-orgaf9f6a9" class="outline-3">
 <h3 id="orgaf9f6a9">Update 1</h3>
 <div class="outline-text-3" id="text-orgaf9f6a9">
 <p>
 <a href="https://www.reddit.com/user/github-alphapapa/">alphapapa</a> suggested some generalizations that would provide  <a href="https://www.reddit.com/r/emacs/comments/13rvehx/comment/jlni3fc/?utm_source=share&utm_medium=web2x&context=3">an editing buffer of sorts</a>. This is a neat idea, using familiar key bindigs  <code>C-c C-c</code> to save and  <code>C-c C-k</code> to bail.
</p>


 <div id="org0c8902b" class="figure">
 <p> <img src="../images/deleting-from-emacs-sequence-vars/edit.gif" alt="edit.gif" width="70%"></img></p>
</div>

 <p>
Beware, I haven't tested the code with a diverse set of list items, so there's a chance of corrupting the variable content. Improvements to the code are totally welcome.
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp"> <span style="color: #969896;">;;; </span> <span style="color: #969896;">-*- lexical-binding: t; -*-</span>

(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">ar/edit-list-variable</span> ()
  (<span style="color: #a71d5d;">interactive</span>)
  (<span style="color: #a71d5d;">let*</span> ((var (intern
               (completing-read  <span style="color: #183691;">"From variable: "</span>
                                (<span style="color: #a71d5d;">let</span> (symbols)
                                  (mapatoms
                                   (<span style="color: #a71d5d;">lambda</span> (sym)
                                     (<span style="color: #a71d5d;">when</span> (<span style="color: #a71d5d;">and</span> (boundp sym)
                                                (seqp (symbol-value sym)))
                                       (<span style="color: #a71d5d;">push</span> sym symbols))))
                                  symbols)  <span style="color: #333333;">nil t)))</span>
         (values (string-join
                  (mapcar #'prin1-to-string (symbol-value var))
                   <span style="color: #183691;">"\n"</span>)))
    (<span style="color: #a71d5d;">with-current-buffer</span> (get-buffer-create  <span style="color: #183691;">"*eval elisp*"</span>)
      (emacs-lisp-mode)
      (local-set-key (kbd  <span style="color: #183691;">"C-c C-c"</span>)
                     (<span style="color: #a71d5d;">lambda</span> ()
                       (<span style="color: #a71d5d;">interactive</span>)
                       (eval-buffer)
                       (kill-this-buffer)
                       (message  <span style="color: #183691;">"Saved: %s"</span> var)))
      (local-set-key (kbd  <span style="color: #183691;">"C-c C-k"</span>) 'kill-this-buffer)
      (erase-buffer)
      (insert (format  <span style="color: #183691;">"(setq %s\n `(%s))"</span> var values))
      (mark-whole-buffer)
      (indent-region (point-min) (point-max))
      (deactivate-mark)
      (switch-to-buffer (current-buffer)))))
</pre>
</div>
</div>
</div>

 <div id="outline-container-orgd71b0a7" class="outline-3">
 <h3 id="orgd71b0a7">Update 2</h3>
 <div class="outline-text-3" id="text-orgd71b0a7">
 <p>
So hunch was right…
</p>

 <blockquote>
 <p>
"While this has been a fun exercise, I can't help but think that I'm likely re-inventing the wheel here. Is there something already built-in that I'm missing?"
</p>
</blockquote>

 <p>
 <a href="https://www.reddit.com/user/juicecelery/">juicecelery</a>'s Reddit commit  <a href="https://www.reddit.com/r/emacs/comments/13rvehx/comment/jlo8mhf/?utm_source=share&utm_medium=web2x&context=3">confirmed it</a>. Thank you!  <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Hooks.html">remove-hook</a> is already interactive 🤦‍♂️.  <a href="https://knowyourmeme.com/memes/today-i-learned-til">TIL</a> 😁
</p>

 <p>
juicecelery was kind enough to point out an improvement in the custom function:
</p>

 <blockquote>
 <p>
"but I see your improvements, for instance that non list items are removed from the selection."
</p>
</blockquote>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/deleting-from-emacs-sequence-vars</link>
  <guid isPermaLink="false">http://xenodium.com/deleting-from-emacs-sequence-vars</guid>
  <pubDate>Thu, 25 May 2023 23:23:32 +0100</pubDate>
</item>
<item>
  <title>Sprinkle me logs</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-sprinkle-me-logs" class="outline-2">
 <h2 id="sprinkle-me-logs"> <span class="timestamp-wrapper"> <span class="timestamp">18 May 2023</span></span> Sprinkle me logs</h2>
 <div class="outline-text-2" id="text-sprinkle-me-logs">
 <p>
At times, basic prints/logs are just about the right debugging strategy. Sure, we have debuggers and  <a href="https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop">REPLs</a> which are super useful, but sometimes you just know that sprinkling your code with a handful of temporary prints/logs will get you enough info to fix an issue.
</p>

 <p>
I must confess, my temporary print statements are fairly uninspiring. Sometimes I log the name of the method/function, but I also resort to less creative options like  <code>print("Yay")</code> or  <code>print("Got here")</code>.
</p>

 <p>
My laziness and lack of creativity knows no boundaries, so if I need multiple unique entries, I often copy, paste, and append numbers to my entries:  <code>print("Yay 2")</code>,  <code>print("Yay 3")</code>,  <code>print("Yay 4")</code>… I know, are you judging yet?
</p>

 <p>
So rather than develop the creative muscle, I've decided to lean on laziness and old habits, so let's make old habit more efficient :) I no longer want to copy, paste, and increment my uncreative log statements. Instead, I'll let Emacs do it for me!
</p>


 <div id="org483bc51" class="figure">
 <p> <img src="../images/sprinkle-me-logs/log-elisp.gif" alt="log-elisp.gif" width="70%"></img></p>
</div>

 <p>
There isn't a whole lot to the implementation. It searches the current buffer for other instances of the same logging string and captures the largest counter found. It subsequently prints the same string with the counter incremented. This can be done in a few lines of elisp, but I figure I wanted some additional features like auto indenting and changing the logging string when using a prefix.
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">defvar</span>  <span style="color: #333333;">ar/unique-log-word</span>  <span style="color: #183691;">"Yay"</span>)

(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">ar/insert-unique-log-word</span> (prefix)
   <span style="color: #183691;">"Inserts `</span> <span style="color: #0086b3;">ar/unique-log-word</span> <span style="color: #183691;">' incrementing counter.</span>

 <span style="color: #183691;">With PREFIX, change `</span> <span style="color: #0086b3;">ar/unique-log-word</span> <span style="color: #183691;">'."</span>
  (<span style="color: #a71d5d;">interactive</span>  <span style="color: #183691;">"P"</span>)
  (<span style="color: #a71d5d;">let*</span> ((word (<span style="color: #a71d5d;">cond</span> (prefix
                      (<span style="color: #a71d5d;">setq</span> ar/unique-log-word
                            (read-string  <span style="color: #183691;">"Log word: "</span>)))
                     ((region-active-p)
                      (<span style="color: #a71d5d;">setq</span> ar/unique-log-word
                            (buffer-substring (region-beginning)
                                              (region-end))))
                     (ar/unique-log-word
                      ar/unique-log-word)
                     (t
                       <span style="color: #183691;">"Reached"</span>)))
         (config
          (<span style="color: #a71d5d;">cond</span>
           ((equal major-mode 'emacs-lisp-mode)
            (cons (format  <span style="color: #183691;">"(message \"%s: </span> <span style="color: #969896;">\\</span> <span style="color: #a71d5d;">(</span> <span style="color: #183691;">[0-9]+</span> <span style="color: #969896;">\\</span> <span style="color: #a71d5d;">)</span> <span style="color: #183691;">\")"</span> word)
                  (format  <span style="color: #183691;">"(message \"%s: %%s\")"</span> word)))
           ((equal major-mode 'swift-mode)
            (cons (format  <span style="color: #183691;">"print(\"%s: </span> <span style="color: #969896;">\\</span> <span style="color: #a71d5d;">(</span> <span style="color: #183691;">[0-9]+</span> <span style="color: #969896;">\\</span> <span style="color: #a71d5d;">)</span> <span style="color: #183691;">\")"</span> word)
                  (format  <span style="color: #183691;">"print(\"%s: %%s\")"</span> word)))
           ((equal major-mode 'ada-mode)
            (cons (format  <span style="color: #183691;">"Ada.Text_Io.Put_Line (\"%s: </span> <span style="color: #969896;">\\</span> <span style="color: #a71d5d;">(</span> <span style="color: #183691;">[0-9]+</span> <span style="color: #969896;">\\</span> <span style="color: #a71d5d;">)</span> <span style="color: #183691;">\");"</span> word)
                  (format  <span style="color: #183691;">"Ada.Text_Io.Put_Line (\"%s: %%s\");"</span> word)))
           ((equal major-mode 'c++-mode)
            (cons (format  <span style="color: #183691;">"std::cout << \"%s: </span> <span style="color: #969896;">\\</span> <span style="color: #a71d5d;">(</span> <span style="color: #183691;">[0-9]+</span> <span style="color: #969896;">\\</span> <span style="color: #a71d5d;">)</span> <span style="color: #183691;">\" << std::endl;"</span> word)
                  (format  <span style="color: #183691;">"std::cout << \"%s: %%s\" << std::endl;"</span> word)))
           (t
            (<span style="color: #333333;">error</span>  <span style="color: #183691;">"%s not supported"</span> major-mode))))
         (match-regexp (car config))
         (format-string (cdr config))
         (max-num 0)
         (case-fold-search nil))
    (<span style="color: #a71d5d;">when</span> ar/unique-log-word
      (<span style="color: #a71d5d;">save-excursion</span>
        (goto-char (point-min))
        (<span style="color: #a71d5d;">while</span> (re-search-forward match-regexp nil t)
          (<span style="color: #a71d5d;">when</span> (> (string-to-number (match-string 1)) max-num)
            (<span style="color: #a71d5d;">setq</span> max-num (string-to-number (match-string 1))))))
      (<span style="color: #a71d5d;">setq</span> max-num (1+ max-num)))
    (<span style="color: #a71d5d;">unless</span> (looking-at-p  <span style="color: #183691;">"^ *$"</span>)
      (end-of-line))
    (insert (concat
             (<span style="color: #a71d5d;">if</span> (looking-at-p  <span style="color: #183691;">"^ *$"</span>)  <span style="color: #183691;">""</span>  <span style="color: #183691;">"\n"</span>)
             (format format-string
                     (<span style="color: #a71d5d;">if</span> ar/unique-log-word
                         (number-to-string (1+ max-num))
                       (string-trim
                        (shell-command-to-string
                          <span style="color: #183691;">"grep -E '^[a-z]{6}$' /usr/share/dict/words | shuf -n 1"</span>))))))
    (call-interactively 'indent-for-tab-command)))
</pre>
</div>

 <p>
Note: This snippet may evolve independently of this post. For the latest, chech my  <a href="https://github.com/xenodium/dotsies">Emacs config</a>'s  <a href="https://github.com/xenodium/dotsies/blob/main/emacs/features/fe-prog.el">fe-prog.el</a>.
</p>

 <p>
I want to be lazy in other languages, so the function can now be extended to support other languages. Here's the Swift counterpart.
</p>


 <div id="org02f8e0d" class="figure">
 <p> <img src="../images/sprinkle-me-logs/log-swift.gif" alt="log-swift.gif" width="70%"></img></p>
</div>

 <p>
Since I sometimes log function names, I figured making it region-aware would help with that.
</p>


 <div id="orgf65c4bc" class="figure">
 <p> <img src="../images/sprinkle-me-logs/log-selection.gif" alt="log-selection.gif" width="80%"></img></p>
</div>

 <p>
I'm sure there's a package out there that does something similar, but I figure this would be a fun little elisp hack.
</p>

 <p>
Happy logging!
</p>
</div>

 <div id="outline-container-orga4a4ae9" class="outline-3">
 <h3 id="orga4a4ae9">Update 1</h3>
 <div class="outline-text-3" id="text-orga4a4ae9">
 <p>
Set  <code>ar/unique-log-word</code> to nil and let it generate a random word. Maybe I get to learn new words as I debug ;)
</p>


 <div id="org029dfc8" class="figure">
 <p> <img src="../images/sprinkle-me-logs/word.gif" alt="word.gif" width="80%"></img></p>
</div>
</div>
</div>

 <div id="outline-container-org8478b92" class="outline-3">
 <h3 id="org8478b92">Update 2</h3>
 <div class="outline-text-3" id="text-org8478b92">
 <p>
Added Ada and C++ support, thanks to  <a href="https://www.emacs.dyerdwelling.family/emacs/20230523204523-emacs--insert-unique-log-message/">James Dyer's post</a>.</p>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/sprinkle-me-logs</link>
  <guid isPermaLink="false">http://xenodium.com/sprinkle-me-logs</guid>
  <pubDate>Thu, 18 May 2023 00:00:00 +0100</pubDate>
</item>
<item>
  <title>dwim-shell-command on Windows + upload to 0x0.st</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-dwim-shell-command-now-on-windows" class="outline-2">
 <h2 id="dwim-shell-command-now-on-windows"> <span class="timestamp-wrapper"> <span class="timestamp">11 May 2023</span></span> dwim-shell-command on Windows + upload to 0x0.st</h2>
 <div class="outline-text-2" id="text-dwim-shell-command-now-on-windows">
 <p>
You can now use  <a href="https://github.com/xenodium/dwim-shell-command">dwim-shell-command</a> on Windows. Shoutout to Kartik Saranathan, who sent a  <a href="https://github.com/xenodium/dwim-shell-command/pull/9">pull request</a> to get rid of  <code>ls</code> usage.
</p>

 <p>
Also thanks to Bram for sharing his  <a href="https://indieweb.social/@bram85@emacs.ch/110335134760990713">upload to 0x0.st implementation</a>. I'd been wanting to do something similar for  <a href="https://imgur.com/">imgur</a>, but  <a href="https://0x0.st/">0x0.st</a> is a much better alternative!
</p>


 <div id="orgd6125b0" class="figure">
 <p> <img src="../images/dwim-shell-command-now-on-windows/0x0.gif" alt="0x0.gif" width="70%"></img></p>
</div>

 <p>
 <code>dwim-shell-commands-upload-to-0x0</code> is now part of  <a href="https://github.com/xenodium/dwim-shell-command/commit/1a896221cc34319582b0921b919638ea2528b0e6">dwim-shell-commands.el</a> (the optional part of the package). It has to additional touches:
</p>

 <ul class="org-ul"> <li>Open the uploaded image in  <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/EWW.html">eww</a> browser.</li>
 <li>Automatically copy the upload URL to kill-ring, after all you're likely gonna share this link, right?</li>
</ul> <p>
If you're unfamiliar with  <code>dwim-shell-command</code>, it enables Emacs shell commands with DWIM behaviour:
</p>

 <ul class="org-ul"> <li>Asynchronously.</li>
 <li>Using noweb templates.</li>
 <li>Automatically injecting files (from  <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Dired.html">dired</a> or other buffers) or kill ring.</li>
 <li>Managing buffer focus with heuristics.</li>
 <li>Showing progress bar.</li>
 <li>Quick buffer exit.</li>
 <li>More reusable history.</li>
</ul> <p>
In addition to replacing  <code>shell-command</code> with  <code>dwim-shell-command</code>, I also use it to bring all sorts of command line utilities to familiar Emacs workflows (in dired or current buffers), without having to remember complex command invocations.
</p>

 <p>
I've covered many of the use-cases before:
</p>

 <ul class="org-ul"> <li> <a href="https://xenodium.com/emacs-dwim-shell-command/">Emacs DWIM shell-command</a></li>
 <li> <a href="https://xenodium.com/emacs-password-protect-current-pdf-revisited/">Emacs: Password-protect current pdf (revisited)</a></li>
 <li> <a href="https://xenodium.com/png-to-icns-emacs-dwim-style/">png to icns (Emacs DWIM style)</a></li>
 <li> <a href="https://xenodium.com/emacs-dwim-shell-command-multi-language/">Emacs: DWIM shell command (multi-language)</a></li>
 <li> <a href="https://xenodium.com/dwim-shell-command-on-melpa/">dwim-shell-command on Melpa</a></li>
 <li> <a href="https://xenodium.com/dwim-shell-command-improvements/">dwim-shell-command improvements</a></li>
 <li> <a href="https://xenodium.com/dwim-shell-command-video-streams/">dwim-shell-command video streams</a></li>
 <li> <a href="https://xenodium.com/dwim-shell-command-with-template-prompts/">dwim-shell-command with template prompts</a></li>
 <li> <a href="https://xenodium.com/dwim-shell-command-usages-pdftotext-and-scp/">dwim-shell-command usages: pdftotext and scp</a></li>
 <li> <a href="https://xenodium.com/emacs-reveal-in-finder-dwim-style/">Emacs: Reveal in macOS Finder (DWIM style)</a></li>
 <li> <a href="https://xenodium.com/emacs-macos-share-from-dired-dwim-style/">Emacs: macOS sharing (DWIM style)</a></li>
</ul></div>
</div>
</div>]]></description>
  <link>http://xenodium.com/dwim-shell-command-now-on-windows</link>
  <guid isPermaLink="false">http://xenodium.com/dwim-shell-command-now-on-windows</guid>
  <pubDate>Thu, 11 May 2023 09:58:59 +0100</pubDate>
</item>
<item>
  <title>chatgpt-shell siblings now on MELPA also</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-chatgpt-shell-siblings-now-on-melpa-also" class="outline-2">
 <h2 id="chatgpt-shell-siblings-now-on-melpa-also"> <span class="timestamp-wrapper"> <span class="timestamp">01 May 2023</span></span> chatgpt-shell siblings now on MELPA also</h2>
 <div class="outline-text-2" id="text-chatgpt-shell-siblings-now-on-melpa-also">
 <p>
In  <a href="https://xenodium.com/chatgpt-shell-available-on-melpa/">chatgpt-shell updates</a>, I highlighted  <code>dall-e-shell</code> (a DALL-E Emacs shell),  <code>ob-chatgpt-shell</code> (ChatGPT org babel support), and  <code>ob-dall-e-shell</code> (DALL-E org babel support) were initially excluded from the  <a href="https://github.com/xenodium/chatgpt-shell">chatgpt-shell</a> MELPA submission while I worked out their split.
</p>

 <p>
That's now sorted and the packages are available on MELPA.
</p>


 <div id="org0ead1d7" class="figure">
 <p> <img src="../images/chatgpt-shell-siblings-now-on-melpa-also/melpa-siblings.jpg" alt="melpa-siblings.jpg" width="70%"></img></p>
</div>

 <p>
Here's  <code>ob-chatgpt-shell</code> and  <code>ob-dall-e-shell</code> in action.
</p>


 <div id="orgc1c2975" class="figure">
 <p> <img src="../images/chatgpt-shell-available-on-melpa/babel.png" alt="babel.png" width="70%"></img></p>
</div>

 <p>
Here's  <code>dall-e-shell</code>.
</p>


 <div id="org952f9c4" class="figure">
 <p> <img src="../images/chatgpt-shell-available-on-melpa/dalle.png" alt="dalle.png" width="70%"></img></p>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/chatgpt-shell-siblings-now-on-melpa-also</link>
  <guid isPermaLink="false">http://xenodium.com/chatgpt-shell-siblings-now-on-melpa-also</guid>
  <pubDate>Mon, 01 May 2023 12:00:03 +0100</pubDate>
</item>
<item>
  <title>Generating elisp org docs</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-generating-elisp-org-docs" class="outline-2">
 <h2 id="generating-elisp-org-docs"> <span class="timestamp-wrapper"> <span class="timestamp">28 April 2023</span></span> Generating elisp org docs</h2>
 <div class="outline-text-2" id="text-generating-elisp-org-docs">
 <p>
 <a href="https://github.com/xenodium/chatgpt-shell">chatgpt-shell</a>'s README includes few org tables documenting the package's  <a href="https://github.com/xenodium/chatgpt-shell#chatgpt-shell-customizations">customizable variables</a> as well as  <a href="https://github.com/xenodium/chatgpt-shell#chatgpt-shell-commands">available commands</a>. Don't worry, this isn't really another ChatGPT post.
</p>

 <p>
Here's an extract of the docs table:
</p>

 <div class="org-src-container">
 <pre class="src src-org">| Custom variable                       | Description                                                 |
|---------------------------------------+-------------------------------------------------------------|
| chatgpt-shell-display-function        | Function to display the shell.                              |
| chatgpt-shell-curl-additional-options | Additional options for `curl' command.                      |
| chatgpt-shell-system-prompt           | The system message helps set the behavior of the assistant. |
</pre>
</div>

 <p>
While the table docs didn't take long to build manually, they quickly became out of sync with their elisp counterparts. Not ideal, as it'll require a little more careful maintenance in the future.
</p>

 <p>
Emacs being the self-documenting editor that it is, I figured I should be able to extract customizable variables, commands, along with their respective docs, and generate these very same org tables.
</p>

 <p>
I had no idea how to go about this, but  <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Apropos.html">apropos-variable</a> and  <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Apropos.html">apropos-command</a> surely knew where to fetch the details from. A peak into  <code>apropos.el</code> quickly got me on my way. Turns out  <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Creating-Symbols.html#Definition-of-mapatoms">mapatoms</a> is just what I needed. It iterates over  <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Creating-Symbols.html">obarray</a>, Emacs's symbol table. We can use it to extract the symbols we're after.
</p>

 <p>
Since we're filtering symbols from  <code>chatgpt-shell</code>, we can start by including only those whose  <code>symbol-name</code> match "^chatgpt-shell". Out of all matching, we should only keep custom variables. We can use  <code>custom-variable-p</code> to check for that. This gives us all relevant variables. We can subsequently get each variable's corresponding docs using  <code>(get symbol 'variable-documentation)</code> and put it into a list.
</p>

 <p>
Now, if we pull our org babel rabbit out of our Emacs magic hat, we can use  <code>:results table</code> to print the list as an org table. The source block powering this magic trick looks as follows:
</p>

 <div class="org-src-container">
 <pre class="src src-org">#+begin_src emacs-lisp :results table :colnames '("Custom variable" "Description")
  (let ((rows))
    (mapatoms
     (lambda (symbol)
       (when (and (string-match "^chatgpt-shell"
                                (symbol-name symbol))
                  (custom-variable-p symbol))
         (push `(,symbol
                 ,(car
                   (split-string
                    (or (get (indirect-variable symbol)
                             'variable-documentation)
                        (get symbol 'variable-documentation)
                        "")
                    "\n")))
               rows))))
    rows)
#+end_src
</pre>
</div>

 <p>
And just like that… we effortlessly get our elisp docs in an org table, straight from Emacs's symbol table.
</p>


 <div id="org7b4e148" class="figure">
 <p> <img src="../images/generating-elisp-org-docs/docs.gif" alt="docs.gif" width="100%"></img></p>
</div>

 <p>
It's worth noting that our snippet used  <code>indirect-variable</code> to resolve aliases but also limited descriptions to the first line in each docstring.
</p>

 <p>
To build a similar table for interactive commands, we can use the following block (also including bindings).
</p>

 <div class="org-src-container">
 <pre class="src src-org">#+BEGIN_SRC emacs-lisp :results table :colnames '("Binding" "Command" "Description")
  (let ((rows))
    (mapatoms
     (lambda (symbol)
       (when (and (string-match "^chatgpt-shell"
                                (symbol-name symbol))
                  (commandp symbol))
         (push `(,(mapconcat
                   #'help--key-description-fontified
                   (where-is-internal
                    symbol shell-maker-mode-map nil nil (command-remapping symbol)) ", ")
                 ,symbol
                 ,(car
                   (split-string
                    (or (documentation symbol t) "")
                    "\n")))
               rows))))
    rows)
#+END_SRC
</pre>
</div>


 <div id="org8256a05" class="figure">
 <p> <img src="../images/generating-elisp-org-docs/commands.gif" alt="commands.gif" width="100%"></img></p>
</div>

 <p>
You see? This post wasn't really about ChatGPT. Aren't you glad you stuck around? 😀
</p>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/generating-elisp-org-docs</link>
  <guid isPermaLink="false">http://xenodium.com/generating-elisp-org-docs</guid>
  <pubDate>Fri, 28 Apr 2023 23:00:26 +0100</pubDate>
</item>
<item>
  <title>chatgpt-shell updates</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-chatgpt-shell-available-on-melpa" class="outline-2">
 <h2 id="chatgpt-shell-available-on-melpa"> <span class="timestamp-wrapper"> <span class="timestamp">25 April 2023</span></span> chatgpt-shell updates</h2>
 <div class="outline-text-2" id="text-chatgpt-shell-available-on-melpa">
 <p>
About a month ago, I posted about an experiment to build  <a href="https://xenodium.com/a-chatgpt-emacs-shell/">a ChatGPT Emacs shell</a> using  <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Shell-Prompts.html">comint mode</a>. Since then, it's turned into a package of sorts, evolving with  <a href="https://github.com/xenodium/chatgpt-shell/issues?q=is%3Aissue+is%3Aclosed+">user feedback</a> and  <a href="https://github.com/xenodium/chatgpt-shell/pulls?q=is%3Apr+is%3Aclosed">pull requests</a>.
</p>
</div>

 <div id="outline-container-org948a0ca" class="outline-3">
 <h3 id="org948a0ca">Now on MELPA</h3>
 <div class="outline-text-3" id="text-org948a0ca">
 <p>
While  <a href="https://github.com/xenodium/chatgpt-shell">chatgpt-shell</a> is a young package still, it seems useful enough to share more widely. As of today,  <code>chatgpt-shell</code> is  <a href="https://melpa.org/#/chatgpt-shell">available on MELPA</a>. Many thanks to  <a href="https://github.com/riscy">Chris Rayner</a> for his MELPA guidance to get the package added.
</p>


 <div id="orgecce1bf" class="figure">
 <p> <img src="../images/chatgpt-shell-available-on-melpa/cyberpunk.gif" alt="cyberpunk.gif" width="70%"></img></p>
</div>

 <p>
I'll cover some of the goodies included in the latest  <code>chatgpt-shell</code>.
</p>
</div>
</div>

 <div id="outline-container-org7f201c2" class="outline-3">
 <h3 id="org7f201c2">Delegating to Org Babel</h3>
 <div class="outline-text-3" id="text-org7f201c2">
 <p>
 <code>chatgpt-shell</code> now evaluates Markdown source blocks by delegating to  <a href="https://orgmode.org/worg/org-contrib/babel/">org babel</a>. I've had success with a handful of languages. In some instances, some babel headers may need overriding in  <code>chatgpt-shell-babel-headers</code>.
</p>

 <p>
Here's a Swift execution via babel, showing standard output.
</p>


 <div id="org0a0eb1b" class="figure">
 <p> <img src="../images/chatgpt-shell-available-on-melpa/swift.gif" alt="swift.gif" width="70%"></img></p>
</div>

 <p>
In addition to standard output,  <code>chatgpt-shell</code> can now render blocks generating images. Here's a rendered SwiftUI layout via  <a href="https://github.com/xenodium/ob-swiftui">ob-swiftui</a>.
</p>


 <div id="org528ae94" class="figure">
 <p> <img src="../images/chatgpt-shell-available-on-melpa/swiftui.gif" alt="swiftui.gif" width="70%"></img></p>
</div>

 <p>
Can also do diagrams. Here's  <a href="https://ditaa.sourceforge.net/">ditaa</a> in action.
</p>


 <div id="orgd602f31" class="figure">
 <p> <img src="../images/chatgpt-shell-available-on-melpa/ditaa.gif" alt="ditaa.gif" width="70%"></img></p>
</div>
</div>
</div>

 <div id="outline-container-org0efc0ba" class="outline-3">
 <h3 id="org0efc0ba">Renaming blocks</h3>
 <div class="outline-text-3" id="text-org0efc0ba">
 <p>
At times, ChatGPT may forget to label source blocks or maybe you just want to name it differently… You can now rename blocks at point.
</p>


 <div id="org82e07d4" class="figure">
 <p> <img src="../images/chatgpt-shell-available-on-melpa/rename.gif" alt="rename.gif" width="70%"></img></p>
</div>
</div>
</div>

 <div id="outline-container-org8c25b6d" class="outline-3">
 <h3 id="org8c25b6d">Send prompt/region</h3>
 <div class="outline-text-3" id="text-org8c25b6d">
 <p>
There are a handful of commands to send prompts from other buffers, including the region. For example  <code>chatgpt-shell-explain-code</code>.
</p>


 <div id="orga8730e5" class="figure">
 <p> <img src="../images/chatgpt-shell-available-on-melpa/explain-region.gif" alt="explain-region.gif" width="70%"></img></p>
</div>

 <ul class="org-ul"> <li>chatgpt-shell-send-region</li>
 <li>chatgpt-shell-generate-unit-test</li>
 <li>chatgpt-shell-refactor-code</li>
 <li>chatgpt-shell-proofread-doc</li>
 <li>chatgpt-shell-eshell-summarize-last-command-output</li>
 <li>chatgpt-shell-eshell-whats-wrong-with-last-command</li>
</ul></div>
</div>

 <div id="outline-container-orgad5bf40" class="outline-3">
 <h3 id="orgad5bf40">Saving/restoring transcript</h3>
 <div class="outline-text-3" id="text-orgad5bf40">
 <p>
You can save your current session to a transcript and restore later.
</p>


 <div id="org27d374d" class="figure">
 <p> <img src="../images/chatgpt-shell-available-on-melpa/restore.gif" alt="restore.gif" width="70%"></img></p>
</div>
</div>
</div>

 <div id="outline-container-org71ad593" class="outline-3">
 <h3 id="org71ad593">History improvements</h3>
 <div class="outline-text-3" id="text-org71ad593">
 <p>
 <a href="https://www.n16f.net/">Nicolas Martyanoff</a> has a great post on  <a href="https://www.n16f.net/blog/making-ielm-more-comfortable/">making IELM More Comfortable</a>. A couple of improvements that stood out for me were:
</p>


 <ul class="org-ul"> <li>Making the command history persistent.</li>
 <li>Searching history with  <code>shell-maker-search-history</code> /  <code>M-r</code> via  <code>completing-read</code>.</li>
</ul> <p>
 <code>shell-maker-search-history</code>, coupled with your completion framework of choice, can be pretty handy. I happen to use Oleh Krehel's  <a href="https://github.com/abo-abo/swiper">ivy</a>.
</p>
</div>
</div>

 <div id="outline-container-orge5a79bb" class="outline-3">
 <h3 id="orge5a79bb">shell-maker (make your own AI shells)</h3>
 <div class="outline-text-3" id="text-orge5a79bb">
 <p>
While ChatGPT is a popular service, there are many others sprouting. Some are cloud-based, others local, proprietary, open source… In any case, it'd be great be able to hook on to them without much overhead.  <a href="https://xenodium.com/a-shell-maker/">shell-maker</a> should help with that. The first   <code>shell-maker</code> clients are  <code>chatgpt-shell</code> and  <code>dall-e-shell</code>.
</p>


 <div id="orgf8c553e" class="figure">
 <p> <img src="../images/chatgpt-shell-available-on-melpa/dalle.png" alt="dalle.png" width="70%"></img></p>
</div>

 <p>
While I've built  <code>dall-e-shell</code>, it'd be great to see what others can do with  <code>shell-maker</code>. If you wire it up to anything, please get in touch ( <a href="https://indieweb.social/@xenodium">Mastodon</a> /  <a href="https://twitter.com/xenodium">Twitter</a> /  <a href="https://www.reddit.com/user/xenodium">Reddit</a> /  <a href="mailto:me__AT__xenodium.com">Email</a>).
</p>
</div>
</div>

 <div id="outline-container-org7a8a481" class="outline-3">
 <h3 id="org7a8a481">dall-e-shell, ob-chatgpt-shell, and ob-dall-e-shell (on MELPA too)</h3>
 <div class="outline-text-3" id="text-org7a8a481">
 <p>
UPDATE:  <a href="https://indieweb.social/@xenodium/110087011082546281">dall-e-shell</a>,  <a href="https://indieweb.social/@xenodium/110130580337078002">ob-chatgpt-shell</a>, and  <a href="https://indieweb.social/@xenodium/110142796865197004">ob-dall-e-shell</a> are now available on MELPA also.
</p>

 <p>
You've seen  <code>dall-e-shell</code> in the previous section. Here's what  <code>ob-chatgpt-shell</code> and  <code>ob-dall-e-shell</code> look like in an  <a href="https://orgmode.org/">org mode</a> document:
</p>


 <div id="orgccd23e6" class="figure">
 <p> <img src="../images/chatgpt-shell-available-on-melpa/babel.png" alt="babel.png" width="70%"></img></p>
</div>
</div>
</div>

 <div id="outline-container-orgd69dc8c" class="outline-3">
 <h3 id="orgd69dc8c">How are you using  <code>chatgpt-shell</code>?</h3>
 <div class="outline-text-3" id="text-orgd69dc8c">
 <p>
Whether you are an existing  <code>chatgpt-shell</code> user, or would like to give things a try,  <a href="https://melpa.org/#/chatgpt-shell">installing from MELPA</a> should generally make things easier for ya. As I mentioned,  <code>chatgpt-shell</code> is a young package still. There are unexplored Emacs integrations out there. I'd love to hear about whatever you come up with ( <a href="https://indieweb.social/@xenodium">Mastodon</a> /  <a href="https://twitter.com/xenodium">Twitter</a> /  <a href="https://www.reddit.com/user/xenodium">Reddit</a> /  <a href="mailto:me__AT__xenodium.com">Email</a>).
</p>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/chatgpt-shell-available-on-melpa</link>
  <guid isPermaLink="false">http://xenodium.com/chatgpt-shell-available-on-melpa</guid>
  <pubDate>Tue, 25 Apr 2023 00:00:00 +0100</pubDate>
</item>
<item>
  <title>Recording and screenshotting windows: the lazy way</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-recordscreenshot-windows-the-lazy-way" class="outline-2">
 <h2 id="recordscreenshot-windows-the-lazy-way"> <span class="timestamp-wrapper"> <span class="timestamp">22 April 2023</span></span> Recording and screenshotting windows: the lazy way</h2>
 <div class="outline-text-2" id="text-recordscreenshot-windows-the-lazy-way">
 <p>
While there's no substitution for great written documentation, a quick demo can go a long way in conveying what a tool if capable of doing or what a tip/trick can achieve.
</p>

 <p>
If you've read a handful of my posts, you would have come across either a screenshot or a short clip with some demo. Historically, I've used the macOS's built-in utility invoked via  <code>⌘ + Shift + 5</code>. It does a fine job for screenshots. For video captures, it's got a couple of small quirks.
</p>
</div>

 <div id="outline-container-org7a0c9b0" class="outline-3">
 <h3 id="org7a0c9b0">Record window</h3>
 <div class="outline-text-3" id="text-org7a0c9b0">
 <p>
Unlike screenshots, macOS video capture cannot record a specific window. While you can select a region, it's easy to inadvertently include a portion of your wallpaper in the recording. Not a big deal, but I felt posted screencasts could look as clean as their screenshot counterparts if we could record the window alone.
</p>

 <p>
Let's compare grabbing a region vs window alone. I know the clean look may be subjective, but see what I mean?
</p>


 <div id="org0da0ac1" class="figure">
 <p> <img src="../images/recordscreenshot-windows-the-lazy-way/record-bg.gif" alt="record-bg.gif" width="50%"></img></p>
 <p> <span class="figure-number">Figure 1: </span>Capture region (includes wallpaper/background)</p>
</div>


 <div id="org9bcccfc" class="figure">
 <p> <img src="../images/recordscreenshot-windows-the-lazy-way/record.gif" alt="record.gif" width="50%"></img></p>
 <p> <span class="figure-number">Figure 2: </span>Capture window only (ahhh, so clean)</p>
</div>
</div>
</div>

 <div id="outline-container-orgc98e733" class="outline-3">
 <h3 id="orgc98e733">Cancel recording</h3>
 <div class="outline-text-3" id="text-orgc98e733">
 <p>
macOS has a handy shortcut ( <code>⌘ + Ctrl + Esc</code>) to stop recording. If you got your demo right, you're done. If not, you have one more step remaining (right click to delete the blooper).
</p>


 <div id="org115afa0" class="figure">
 <p> <img src="../images/recordscreenshot-windows-the-lazy-way/delete.png" alt="delete.png" width="40%"></img></p>
</div>

 <p>
Also not a huge deal, but I was hoping for a single shortcut to stop recording  <span class="underline">and</span> also automatically discard. I haven't found one, but would love to hear if otherwise.
</p>
</div>
</div>

 <div id="outline-container-orgee01cc0" class="outline-3">
 <h3 id="orgee01cc0">macosrec enters the chat</h3>
 <div class="outline-text-3" id="text-orgee01cc0">
 <p>
I wanted more flexibility to build my own recording/screenshotting flows. A command line utility could be quite versatile at that, so I built  <a href="https://github.com/xenodium/macosrec">macosrec</a>.
</p>

 <p>
 <code>macosrec</code> enables taking a screenshot or recording a window video entirely from the command line.
</p>


 <div id="orga1cea3d" class="figure">
 <p> <img src="../images/recordscreenshot-windows-the-lazy-way/macosrec.gif" alt="macosrec.gif" width="60%"></img></p>
</div>
</div>
</div>

 <div id="outline-container-orgc8718ef" class="outline-3">
 <h3 id="orgc8718ef">elisp glues the world</h3>
 <div class="outline-text-3" id="text-orgc8718ef">
 <p>
Command line utilities can be invoked in all sorts of ways, but I'm an Emacs nutter so you can see where this is going… I want Emacs key bindings to control the lot.
</p>

 <table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"> <colgroup> <col class="org-left"></col> <col class="org-left"></col></colgroup> <tbody> <tr> <td class="org-left">C-c _</td>
 <td class="org-left">Take screenshot of a window</td>
</tr> <tr> <td class="org-left">C-c (</td>
 <td class="org-left">Start recording window</td>
</tr> <tr> <td class="org-left">C-c )</td>
 <td class="org-left">Stop recording window</td>
</tr> <tr> <td class="org-left">C-c 8</td>
 <td class="org-left">Abort recording</td>
</tr></tbody></table> <p>
Integrating command line utilities into Emacs and making them quickly accessible seems to have become a full-time hobby of mine. I kid, but it's become a pretty painless process for me. I built  <a href="https://github.com/xenodium/dwim-shell-command">dwim-shell-command</a> for that. If you've never heard of  <a href="https://en.wikipedia.org/wiki/DWIM">DWIM</a>, it stands for "Do what I mean". To give you an idea of the kinds of things I'm using DWIM commands for, check the following out:
</p>

 <ul class="org-ul"> <li>dwim-shell-commands-audio-to-mp3</li>
 <li>dwim-shell-commands-bin-plist-to-xml</li>
 <li>dwim-shell-commands-clipboard-to-qr</li>
 <li>dwim-shell-commands-drop-video-audio</li>
 <li>dwim-shell-commands-files-combined-size</li>
 <li>dwim-shell-commands-git-clone-clipboard-url</li>
 <li>dwim-shell-commands-git-clone-clipboard-url-to-downloads</li>
 <li>dwim-shell-commands-image-to-grayscale</li>
 <li>dwim-shell-commands-image-to-icns</li>
 <li>dwim-shell-commands-image-to-jpg</li>
 <li>dwim-shell-commands-image-to-png</li>
 <li>dwim-shell-commands-pdf-password-protect</li>
 <li>dwim-shell-commands-reorient-image</li>
 <li>dwim-shell-commands-resize-gif</li>
 <li>dwim-shell-commands-resize-image</li>
 <li>dwim-shell-commands-resize-video</li>
 <li>dwim-shell-commands-speed-up-gif</li>
 <li>dwim-shell-commands-speed-up-video</li>
 <li>dwim-shell-commands-unzip</li>
 <li>dwim-shell-commands-video-to-gif</li>
 <li>dwim-shell-commands-video-to-optimized-gif</li>
 <li>dwim-shell-commands-video-to-webp</li>
</ul> <p>
If it ever took you a little while to find the right command incantation to get things right, only to forget all about it next time you need it ( <a href="https://xenodium.com/emacs-ffmpeg-and-macos-alias-commands">I'm looking at you ffmpeg</a>),  <code>dwim-shell-command</code> can help you easily save things for posterity and make them easily accessible in the future.
</p>

 <p>
Since we're talking ffmpeg, here's all it takes to have gif conversion handy:
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">dwim-shell-commands-video-to-gif</span> ()
   <span style="color: #183691;">"Convert all marked videos to gif(s)."</span>
  (<span style="color: #a71d5d;">interactive</span>)
  (dwim-shell-command-on-marked-files
    <span style="color: #183691;">"Convert to gif"</span>
    <span style="color: #183691;">"ffmpeg -loglevel quiet -stats -y -i '</span> <span style="color: #0086b3;"><<f>></span> <span style="color: #183691;">' -pix_fmt rgb24 -r 15 '</span> <span style="color: #0086b3;"><<fne>>.gif</span> <span style="color: #183691;">'"</span>
    <span style="color: #a71d5d;">:utils</span>  <span style="color: #183691;">"ffmpeg"</span>))
</pre>
</div>

 <p>
There's no way I'll remember the ffmpeg command, but I can always fuzzy search my trusty commands with something like  <code>"to gif"</code> and apply to either the current buffer file or any selected  <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Dired.html">dired</a> files.
</p>


 <div id="org4da2cce" class="figure">
 <p> <img src="../images/recordscreenshot-windows-the-lazy-way/to-gif.png" alt="to-gif.png" width="60%"></img></p>
</div>

 <p>
So where am I going with this? I wrote DWIM shell commands for the bindings I previously described:
</p>

 <table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"> <colgroup> <col class="org-left"></col> <col class="org-left"></col></colgroup> <tbody> <tr> <td class="org-left">C-c _</td>
 <td class="org-left"> <code>dwim-shell-commands-macos-screenshot-window</code></td>
</tr> <tr> <td class="org-left">C-c (</td>
 <td class="org-left"> <code>dwim-shell-commands-macos-start-recording-window</code></td>
</tr> <tr> <td class="org-left">C-c )</td>
 <td class="org-left"> <code>dwim-shell-commands-macos-end-recording-window</code></td>
</tr> <tr> <td class="org-left">C-c 8</td>
 <td class="org-left"> <code>dwim-shell-commands-macos-abort-recording-window</code></td>
</tr></tbody></table> <p>
Out of all of commands,  <code>dwim-shell-commands-macos-start-recording-window</code> is likely the most interesting one.
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">dwim-shell-commands-macos-start-recording-window</span> ()
   <span style="color: #183691;">"Select and start recording a macOS window."</span>
  (<span style="color: #a71d5d;">interactive</span>)
  (<span style="color: #a71d5d;">let*</span> ((window (dwim-shell-commands--macos-select-window))
         (path (dwim-shell-commands--generate-path  <span style="color: #183691;">"~/Desktop"</span> (car window)  <span style="color: #183691;">".mov"</span>))
         (buffer-file-name path)  <span style="color: #969896;">;; </span> <span style="color: #969896;">override so <<f>> picks it up</span>
         (inhibit-message t))
    (dwim-shell-command-on-marked-files
        <span style="color: #183691;">"Start recording a macOS window."</span>
       (format
         <span style="color: #183691;">"# record .mov</span>
 <span style="color: #183691;">         macosrec --record '</span> <span style="color: #0086b3;">%s</span> <span style="color: #183691;">' --mov --output '</span> <span style="color: #0086b3;"><<f>></span> <span style="color: #183691;">'</span>
 <span style="color: #183691;">         # speed .mov up x1.5</span>
 <span style="color: #183691;">         ffmpeg -i '</span> <span style="color: #0086b3;"><<f>></span> <span style="color: #183691;">' -an -filter:v '</span> <span style="color: #0086b3;">setpts=1.5*PTS</span> <span style="color: #183691;">' '</span> <span style="color: #0086b3;"><<fne>>_x1.5.<<e>></span> <span style="color: #183691;">'</span>
 <span style="color: #183691;">         # convert to gif x1.5</span>
 <span style="color: #183691;">         ffmpeg -loglevel quiet -stats -y -i '</span> <span style="color: #0086b3;"><<fne>>_x1.5.<<e>></span> <span style="color: #183691;">' -pix_fmt rgb24 -r 15 '</span> <span style="color: #0086b3;"><<fne>>_x1.5.gif</span> <span style="color: #183691;">'</span>
 <span style="color: #183691;">         # speed .mov up x2</span>
 <span style="color: #183691;">         ffmpeg -i '</span> <span style="color: #0086b3;"><<f>></span> <span style="color: #183691;">' -an -filter:v '</span> <span style="color: #0086b3;">setpts=2*PTS</span> <span style="color: #183691;">' '</span> <span style="color: #0086b3;"><<fne>>_x2.<<e>></span> <span style="color: #183691;">'</span>
 <span style="color: #183691;">         # convert to gif x2</span>
 <span style="color: #183691;">         ffmpeg -loglevel quiet -stats -y -i '</span> <span style="color: #0086b3;"><<fne>>_x2.<<e>></span> <span style="color: #183691;">' -pix_fmt rgb24 -r 15 '</span> <span style="color: #0086b3;"><<fne>>_x2.gif</span> <span style="color: #183691;">'"</span>
        (cdr window))
        <span style="color: #a71d5d;">:silent-success</span> t
        <span style="color: #a71d5d;">:monitor-directory</span>  <span style="color: #183691;">"~/Desktop"</span>
        <span style="color: #a71d5d;">:no-progress</span> t
        <span style="color: #a71d5d;">:utils</span> '(<span style="color: #183691;">"ffmpeg"</span>  <span style="color: #183691;">"macosrec"</span>))))
</pre>
</div>

 <p>
As you likely expect, this command invokes  <code>macosrec</code> to start recording a window. The nifty part is that when it's done recording (and saving the .mov file), it automatically creates multiple variants. For starters, it creates x1.5 and x2 .mov videos, but it also generates their .gif counterparts.
</p>


 <div id="org8c17444" class="figure">
 <p> <img src="../images/recordscreenshot-windows-the-lazy-way/bunch.png" alt="bunch.png" width="60%"></img></p>
</div>

 <p>
Let's recap here for a sec. You start recording a window video with  <code>C-c (</code>, end with C-c )=, and automagically have all these generated files waiting for you.
</p>

 <p>
You can subsequently inspect any of the video candidates and pick the most appropriate variant. Discard whatever else you don't need.
</p>

 <p>
The output bundle is tailored to my needs. Maybe you want to invoke  <a href="https://www.lcdf.org/gifsicle/">gifsycle</a> for more optimized versions? Or maybe you want automatic webp generation via  <code>ffmpeg</code>? DWIM does that I mean, so you likely have other plans…
</p>

 <p>
 <code>dwim-shell-commands-macos-start-recording-window</code> and all other DWIM commands are now included in  <a href="https://github.com/xenodium/dwim-shell-command/blob/main/dwim-shell-commands.el">dwim-shell-commands.el</a>, which ships optionally as part of  <a href="https://github.com/xenodium/dwim-shell-command">dwim-shell-command</a>.
</p>

 <p>
 <a href="https://github.com/xenodium/macosrec">macosrec</a> is also on GitHub, but if you want to be on your way, you can install via:
</p>

 <div class="org-src-container">
 <pre class="src src-sh">brew tap xenodium/macosrec
brew install macosrec
</pre>
</div>

 <p>
This is my way to record and screenshot windows the lazy way. How would you tweak to make it yours?
</p>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/recordscreenshot-windows-the-lazy-way</link>
  <guid isPermaLink="false">http://xenodium.com/recordscreenshot-windows-the-lazy-way</guid>
  <pubDate>Sat, 22 Apr 2023 00:00:00 +0100</pubDate>
</item>
<item>
  <title>ob-swiftui updates</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-ob-swiftui-updates" class="outline-2">
 <h2 id="ob-swiftui-updates"> <span class="timestamp-wrapper"> <span class="timestamp">20 April 2023</span></span> ob-swiftui updates</h2>
 <div class="outline-text-2" id="text-ob-swiftui-updates">
 <p>
While  <a href="https://indieweb.social/@xenodium/110227186721704189">experimenting with delegating Markdown</a> blocks to  <a href="https://orgmode.org/worg/org-contrib/babel/">Org babel</a> in Emacs  <a href="https://github.com/xenodium/chatgpt-shell">chatgpt-shell</a>, I resurrected  <a href="https://github.com/xenodium/ob-swiftui">ob-swiftui</a>. A package I had written to execute and render SwiftUI blocks in org babel.
</p>

 <p>
 <a href="https://github.com/xenodium/ob-swiftui">ob-swiftui</a> has two modes of rendering SwiftUI blocks:  <code>:results window</code>, which runs outside of Emacs in a native window and  <code>:results file</code>, which renders and saves to a file. The latter can be viewed directly from Emacs.
</p>

 <p>
 <code>:results file</code> was a little clunky. That is, it hardcoded dimensions I had to manually modify if the canvas wasn't big enough. It was also a little slow.
</p>

 <p>
The clunkyness really came through with my chatgpt-shell experiments, so I took a closer look and made a few changes to remove hardcoding and speeds things up.
</p>

 <p>
The results ain't too shabby.
</p>


 <div id="org150a951" class="figure">
 <p> <img src="../images/ob-swiftui-updates/file-render.gif" alt="file-render.gif" width="80%"></img></p>
</div>

 <p>
Another tiny improvement is that if you'd like to compose a more complex layout made of multiple custom views,  <code>ob-swiftui</code> now looks for a  <code>ContentView</code> as that root view by default. Specifying another root view was already possible but it had to be explicitly requested via  <code>:view</code> param.
</p>

 <p>
You can now omit the  <code>:view</code> param if you name the root view  <code>ContentView</code>:
</p>

 <div class="org-src-container">
 <pre class="src src-org">#+begin_src swiftui
  struct ContentView: View {
    var body: some View {
        TopView()
        BottomView()
    }
  }

  struct TopView: View {
    var body: some View {
      Text("Top text")
    }
  }

  struct BottomView: View {
    var body: some View {
      Text("Bottom text")
    }
  }
#+end_src
</pre>
</div>

 <p>
The improvements have been pushed to  <a href="https://github.com/xenodium/ob-swiftui">ob-swiftui</a> and will soon be picked up on  <a href="https://melpa.org/#/ob-swiftui">melpa</a>.
</p>

 <p>
Edit: Added ContentView details.
</p>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/ob-swiftui-updates</link>
  <guid isPermaLink="false">http://xenodium.com/ob-swiftui-updates</guid>
  <pubDate>Thu, 20 Apr 2023 00:00:00 +0100</pubDate>
</item>
<item>
  <title>My Emacs eye candy</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-my-emacs-eye-candy" class="outline-2">
 <h2 id="my-emacs-eye-candy"> <span class="timestamp-wrapper"> <span class="timestamp">15 April 2023</span></span> My Emacs eye candy</h2>
 <div class="outline-text-2" id="text-my-emacs-eye-candy">
 <p>
I get the occasional question about my Emacs theme, font, and other eye candy. I'm always tickled and happy to share.
</p>

 <div id="org191041f" class="figure">
 <p> <img src="../images/my-emacs-eye-candy/Emacs.png" alt="Emacs.png" width="80%"></img></p>
</div>

 <p>
It's been a while since I've made visually significant changes to my Emacs config. May as well briefly document for posterity…
</p>
</div>

 <div id="outline-container-org147898f" class="outline-3">
 <h3 id="org147898f">Nyan Mode</h3>
 <div class="outline-text-3" id="text-org147898f">
 <p>
First things first. The adorable and colorful little fella in my mode line is a  <a href="https://en.wikipedia.org/wiki/Nyan_Cat">Nyan Cat</a> (if you dare, check the  <a href="https://www.youtube.com/watch?v=QH2-TGUlwu4">meme video</a>). Yes, I know it's sooo 2011, but it's 2023 and I still love the little guy hanging out in my Emacs mode line. I still get asked about it.
</p>


 <div id="org1290640" class="figure">
 <p> <img src="../images/my-emacs-eye-candy/Nyan.png" alt="Nyan.png" height="30px"></img></p>
</div>

 <p>
This fabulous feature comes to us via the great  <a href="https://github.com/TeMPOraL/nyan-mode/">Nyan Mode</a> package. If looks haven't convinced you, Nyan also packs scrolling functionality. Click anywhere in it.
</p>

 <p>
Oh, and if you can't get enough of Nyan, there's also  <a href="https://depp.brause.cc/zone-nyan/">zone-nyan</a> for Emacs.
</p>
</div>
</div>

 <div id="outline-container-orgc7f2fd8" class="outline-3">
 <h3 id="orgc7f2fd8">Emacs Plus (macOS)</h3>
 <div class="outline-text-3" id="text-orgc7f2fd8">
 <p>
I should mention I'm running Emacs 28 on macOS via the excellent  <a href="https://github.com/d12frosted/homebrew-emacs-plus">Emacs Plus</a>  <a href="https://brew.sh/">homebrew</a> recipe. These are all the options I enable.
</p>

 <div class="org-src-container">
 <pre class="src src-sh">brew install  emacs-plus@28 --with-imagemagick --with-no-frame-refocus --with-native-comp --with-savchenkovaleriy-big-sur-icon
</pre>
</div>
</div>

 <div id="outline-container-orgdd93551" class="outline-4">
 <h4 id="orgdd93551">Icon</h4>
 <div class="outline-text-4" id="text-orgdd93551">
 <p>
Since we're talking eye candy, let's chat about  <code>--with-savchenkovaleriy-big-sur-icon</code>. This Emacs Plus option enables Valeriy Savchenko's  <a href="https://github.com/SavchenkoValeriy/emacs-icons">wonderful icon</a>.
</p>


 <div id="orgbeed476" class="figure">
 <p> <img src="../images/my-emacs-eye-candy/swap.png" alt="swap.png" width="50%"></img></p>
</div>
</div>
</div>

 <div id="outline-container-org7d7b2fd" class="outline-4">
 <h4 id="org7d7b2fd">Titlebar</h4>
 <div class="outline-text-4" id="text-org7d7b2fd">
 <p>
I've enabled both transparent title bar as well as dark appearance, giving a minimal window decoration.
</p>


 <div id="org0f988d7" class="figure">
 <p> <img src="../images/my-emacs-eye-candy/decoration.jpg" alt="decoration.jpg" width="60%"></img></p>
</div>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
(add-to-list 'default-frame-alist '(ns-appearance . dark))
</pre>
</div>

 <p>
Note: both of these variables are prefixed  <code>ns-</code> (macOS-only settings).
</p>
</div>
</div>
</div>

 <div id="outline-container-org65b387a" class="outline-3">
 <h3 id="org65b387a">Font (JetBrains Mono)</h3>
 <div class="outline-text-3" id="text-org65b387a">
 <p>
I've been on  <a href="https://www.jetbrains.com/lp/mono/">JetBrains Mono</a> font for quite some time now. In the past, I've also been a fan of  <a href="https://madmalik.github.io/mononoki/">Mononoki</a> and  <a href="https://en.wikipedia.org/wiki/Menlo_(typeface)">Menlo</a> (on macOS) or  <a href="https://github.com/andreberg/Meslo-Font">Meslo</a> (similar elsewhere).
</p>
</div>
</div>

 <div id="outline-container-org4e081c8" class="outline-3">
 <h3 id="org4e081c8">Theme (Material)</h3>
 <div class="outline-text-3" id="text-org4e081c8">
 <p>
I'm using the great  <a href="https://github.com/cpaulik/emacs-material-theme">Material Theme for Emacs</a>, with a  <a href="https://github.com/xenodium/dotsies/blob/790465b1824481b81bf5c6e08949128c13d76f95/emacs/features/fe-ui.el#L42">bunch of tweaks of my own</a>.
</p>
</div>
</div>

 <div id="outline-container-orge0478cb" class="outline-3">
 <h3 id="orge0478cb">Modeline tabs/ribbons (Moody)</h3>
 <div class="outline-text-3" id="text-orge0478cb">
 <p>
The  <a href="https://github.com/tarsius/moody">moody</a> package adds a nice touch displaying mode line elements as tabs and ribbons.
</p>
</div>
</div>

 <div id="outline-container-org99356e5" class="outline-3">
 <h3 id="org99356e5">Modeline menus (Minions)</h3>
 <div class="outline-text-3" id="text-org99356e5">
 <p>
The  <a href="https://github.com/tarsius/minions">minions</a> package removes lots of minor mode clutter from the mode line and stashes it away in menus.
</p>
</div>
</div>

 <div id="outline-container-org1bb3ef3" class="outline-3">
 <h3 id="org1bb3ef3">Hiding modeline (hide mode line mode)</h3>
 <div class="outline-text-3" id="text-org1bb3ef3">
 <p>
Hiding the mode line isn't something I use in most major modes. However, I found it complements my shell ( <a href="https://www.masteringemacs.org/article/complete-guide-mastering-eshell">eshell</a>) quite well. While I was sceptical at first, once I hid the mode line in my shell I never looked back. I just didn't miss it. I also love the uncluttered clean vibe.  <a href="https://github.com/hlissner/emacs-hide-mode-line">hide-mode-line-mode</a> can help with that.
</p>


 <div id="orged8419b" class="figure">
 <p> <img src="../images/my-emacs-eye-candy/eshell.gif" alt="eshell.gif" width="50%"></img></p>
</div>
</div>
</div>

 <div id="outline-container-org8013c95" class="outline-3">
 <h3 id="org8013c95">Welcome screen</h3>
 <div class="outline-text-3" id="text-org8013c95">
 <p>
Back in October 2022, I experimented with  <a href="https://xenodium.com/emacs-a-welcoming-experiment/">adding a minimal welcome screen</a>. I was initially hesitant, as I was already a fan of the welcome scratch buffer. In any case, I figured I'd eventually get tired of it and remove it. Well, it's enabled in my config still ;) My initial attachment to a landing scratch quickly faded. I'm only a  <code>C-x b</code> binding away from invoking ivy-switch-buffer to get me anywhere.
</p>


 <div id="orgd1b9f32" class="figure">
 <p> <img src="../images/my-emacs-eye-candy/welcome.png" alt="welcome.png" width="80%"></img></p>
</div>

 <p>
The great Emacs logo originally  <a href="https://www.reddit.com/r/unixporn/comments/yamj5f/exwm_emacs_is_kinda_comfy_as_a_wm/">shared by u/pearcidar43</a>.
</p>
</div>
</div>

 <div id="outline-container-orgece3e40" class="outline-3">
 <h3 id="orgece3e40">Zones</h3>
 <div class="outline-text-3" id="text-orgece3e40">
 <p>
I've been meaning to re-enable  <a href="https://github.com/emacs-mirror/emacs/blob/master/lisp/play/zone.el">zones</a> in my config. They always gave me a good tickle. I've already mentioned  <a href="https://depp.brause.cc/zone-nyan/">zone-nyan</a>, but if you're new to zones, they kick off after a period of inactivity (similar to a screensaver).
</p>

 <p>
Here's  <code>zone-pgm-rotate</code> in all its glory. Oh and it's built-in!
</p>


 <div id="org83c5c22" class="figure">
 <p> <img src="../images/my-emacs-eye-candy/rotate.webp" alt="rotate.webp" width="80%"></img></p>
</div>

 <p>
Coincidentally, I had a go at writing  <a href="https://xenodium.com/emacs-zones-to-lift-you-up/">a basic zone a little while ago</a>.
</p>


 <div id="orgc1fa2fe" class="figure">
 <p> <img src="../images/my-emacs-eye-candy/zone.gif" alt="zone.gif" width="80%"></img></p>
</div>
</div>
</div>

 <div id="outline-container-org4f7f87c" class="outline-3">
 <h3 id="org4f7f87c">Config</h3>
 <div class="outline-text-3" id="text-org4f7f87c">
 <p>
Most of the items mentioned I pulled from my  <a href="https://github.com/xenodium/dotsies">Emacs config</a>'s  <a href="https://github.com/xenodium/dotsies/blob/main/emacs/features/fe-ui.el">fe-ui.el</a>. There's more there if you're interested.
</p>

 <p>
What is some of your favorite Emacs eye candy?  <a href="https://www.reddit.com/r/emacs/comments/12nbb9x/my_emacs_eye_candy/">reddit</a> /  <a href="https://indieweb.social/@xenodium/110204024063552954">mastodon</a> /  <a href="https://twitter.com/xenodium/status/1647293089394900993">twitter</a>.
</p>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/my-emacs-eye-candy</link>
  <guid isPermaLink="false">http://xenodium.com/my-emacs-eye-candy</guid>
  <pubDate>Sat, 15 Apr 2023 00:00:00 +0100</pubDate>
</item>
<item>
  <title>shell-maker, a maker of Emacs shells</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-a-shell-maker" class="outline-2">
 <h2 id="a-shell-maker"> <span class="timestamp-wrapper"> <span class="timestamp">08 April 2023</span></span> shell-maker, a maker of Emacs shells</h2>
 <div class="outline-text-2" id="text-a-shell-maker">
 <p>
A few weeks ago, I wrote about an experiment to bring  <a href="https://xenodium.com/a-chatgpt-emacs-shell/">ChatGPT to Emacs as a shell</a>. I was fairly new to both  <a href="https://openai.com/blog/chatgpt">ChatGPT</a> and building anything on top of  <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Shell-Prompts.html">comint</a>. It was a fun exercise, which also generated some interest.
</p>

 <p>
As mentioned in the previous post, I took inspiration in other Emacs packages (primarily  <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Lisp-Interaction.html">ielm</a>) to figure out what I needed from comint. Soon, I got ChatGPT working.
</p>


 <div id="org7983998" class="figure">
 <p> <img src="../images/a-shell-maker/streamer.gif" alt="streamer.gif" width="80%"></img></p>
</div>

 <p>
As I was looking at  <a href="https://openai.com">OpenAI</a> API docs, I learned about DALL-E: "an AI system that can create realistic images and art from a description in natural language."
</p>

 <p>
Like ChatGPT, they also offered an API to DALL-E, so I figured I may as well try to write a shell for that too… and I did.
</p>


 <div id="org084091b" class="figure">
 <p> <img src="../images/a-shell-maker/dalle.gif" alt="dalle.gif" width="60%"></img></p>
</div>

 <p>
There was quite a bit of code duplication between the two Emacs shells I had just written. At the same time, I started hearing from folks about integrating other tools, some cloud-based, some local, proprietary, open source.. There's  <a href="https://about.sourcegraph.com/cody">Cody</a>,  <a href="https://github.com/invoke-ai/InvokeAI">invoke-ai</a>,   <a href="https://github.com/ggerganov/llama.cpp">llama.cpp</a>,  <a href="https://github.com/antimatter15/alpaca.cpp">alpaca.cpp</a>, and the list continues to grow.
</p>

 <p>
With that in mind, I set out to reduce the code duplication and consolidate into a reusable package. And so  <code>shell-maker</code> was born, a maker of Emacs shells.
</p>

 <p>
 <code>shell-maker</code>'s internals aren't too different from the code I had before. It's still powered by comint, but instead offers a reusable convenience wrapper.
</p>

 <p>
It takes little code to implement a shell, like the sophisticated new  <code>greeter-shell</code> ;)
</p>


 <div id="orgdd3a95e" class="figure">
 <p> <img src="../images/a-shell-maker/maria.gif" alt="maria.gif" width="60%"></img></p>
</div>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">require</span> ' <span style="color: #0086b3;">shell-maker</span>)

(<span style="color: #a71d5d;">defvar</span>  <span style="color: #333333;">greeter-shell--config</span>
  (make-shell-maker-config
    <span style="color: #a71d5d;">:name</span>  <span style="color: #183691;">"Greeter"</span>
    <span style="color: #a71d5d;">:execute-command</span>
   (<span style="color: #a71d5d;">lambda</span> (command _history callback error-callback)
     (funcall callback
              (format  <span style="color: #183691;">"Hello \"%s\""</span> command)
              nil))))

(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">greeter-shell</span> ()
   <span style="color: #183691;">"Start a Greeter shell."</span>
  (<span style="color: #a71d5d;">interactive</span>)
  (shell-maker-start greeter-shell--config))
</pre>
</div>

 <p>
 <a href="https://github.com/xenodium/chatgpt-shell#shell-maker">shell-maker</a> is available on GitHub and currently bundled with  <a href="https://github.com/xenodium/chatgpt-shell">chatgpt-shell</a>. If there's enough interest and usage, I may just break it out into its own package. For now, it's convenient to keep with  <code>chatgpt-shell</code> and  <code>dall-e-shell</code>.
</p>

 <p>
If you plug  <code>shell-maker</code> into other tools, I'd love to hear about it.
</p>

 <p>
Happy shell making!
</p>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/a-shell-maker</link>
  <guid isPermaLink="false">http://xenodium.com/a-shell-maker</guid>
  <pubDate>Sat, 08 Apr 2023 00:00:00 +0100</pubDate>
</item>
<item>
  <title>Flat Habits 1.1.4 released</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-flat-habits-114-released" class="outline-2">
 <h2 id="flat-habits-114-released"> <span class="timestamp-wrapper"> <span class="timestamp">05 April 2023</span></span> Flat Habits 1.1.4 released</h2>
 <div class="outline-text-2" id="text-flat-habits-114-released">
 <p>
 <a href="https://flathabits.com/">Flat Habits</a> 1.1.4 is now available on the  <a href="https://apps.apple.com/app/id1558358855">App Store</a>.
</p>

 <p>
Flat Habits is a habit tracker that’s mindful of your time, data, and privacy. It's a simple but effective iOS app.
</p>

 <div style="text-align: center;">
   <img src="https://flathabits.com/intro_thumbnail.jpg" alt="today_no_filter.png" width="90%"></img> <br></br> <br></br> <a href="https://apps.apple.com/app/id1558358855">
     <img src="../images/flat-habits-for-ios/download-on-app-store.png" alt="download-on-app-store.png" height="40px"></img></a>
</div>

 <p>
If you care about how your data is stored, Flat Habits is powered by  <a href="https://orgmode.org">org</a> plain text markup without any cloud component. You can use your  <a href="https://xenodium.com/frictionless-org-habits-on-ios/">favorite editor</a> (Emacs, Vim, VSCode, etc.) to poke at habit data, if that's your cup of tea.
</p>
</div>

 <div id="outline-container-org22b333d" class="outline-3">
 <h3 id="org22b333d">What's new?</h3>
 <div class="outline-text-3" id="text-org22b333d">
 <ul class="org-ul"> <li>Quicker toggling, now exposing Done/Skip.
 <ul class="org-ul"> <li>Double tap marks Done.</li>
</ul></li>
 <li>Also display in 12 hour time format.</li>
 <li>Overdue habits are now labelled "past" and coloured orange.</li>
 <li>Don't dismiss creation dialog if tapping outside.</li>
 <li>Set #+STARTUP: nologdrawer in new files.</li>
</ul></div>
</div>

 <div id="outline-container-org86f2d5a" class="outline-3">
 <h3 id="org86f2d5a">Are you a fan?</h3>
 <div class="outline-text-3" id="text-org86f2d5a">
 <p>
Is Flat Habits helping you keep up with your habits? Please  <a href="https://apps.apple.com/app/id1558358855?action=write-review">rate/review</a> 😊
</p>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/flat-habits-114-released</link>
  <guid isPermaLink="false">http://xenodium.com/flat-habits-114-released</guid>
  <pubDate>Wed, 05 Apr 2023 00:00:00 +0100</pubDate>
</item>
<item>
  <title>A ChatGPT Emacs shell</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-a-chatgpt-emacs-shell" class="outline-2">
 <h2 id="a-chatgpt-emacs-shell"> <span class="timestamp-wrapper"> <span class="timestamp">21 March 2023</span></span> A ChatGPT Emacs shell</h2>
 <div class="outline-text-2" id="text-a-chatgpt-emacs-shell">
 <p>
UPDATE:  <code>chatgpt-shell</code>  <a href="https://xenodium.com/chatgpt-shell-available-on-melpa/">has evolved a bit</a> and is now  <a href="https://melpa.org/#/chatgpt-shell">on MELPA</a>.
</p>

 <p>
I had been meaning to give  <a href="https://openai.com/blog/chatgpt">ChatGPT</a> a good try, preferably from Emacs. As an  <a href="https://www.gnu.org/software/emacs/manual/html_mono/eshell.html">eshell</a> fan, ChatGPT seemed like the perfect fit for a shell interface of sorts. With that in mind, I set out to wire ChatGPT with Emacs's general command interpreter ( <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Shell-Prompts.html">comint</a>).
</p>

 <p>
I had no previous experience building anything comint-related, so I figured I could just take a peek at an existing comint-derived mode to achieve a similar purpose.  <code>inferior-emacs-lisp-mode</code> ( <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Lisp-Interaction.html">ielm</a>) seemed to fit the bill just fine, so I borrowed quite a bit to assemble a basic shell experience.
</p>

 <p>
From then on, it was mostly about sending each request over to the ChatGPT API to get a response. For now, I'm relying on  <a href="https://curl.se/docs/manpage.html">curl</a> to make each request. The invocation is fairly straightforward:
</p>

 <div class="org-src-container">
 <pre class="src src-sh">curl  <span style="color: #183691;">"https://api.openai.com/v1/chat/completions"</span>  <span style="color: #183691;">\</span>
     -H  <span style="color: #183691;">"Authorization: Bearer YOUR_OPENAI_KEY"</span>  <span style="color: #183691;">\</span>
     -H  <span style="color: #183691;">"Content-Type: application/json"</span>  <span style="color: #183691;">\</span>
     -d  <span style="color: #183691;">"{</span>
 <span style="color: #183691;">     \"model\": \"gpt-3.5-turbo\",</span>
 <span style="color: #183691;">     \"messages\": [{\"role\": \"user\", \"content\": \"YOUR PROMPT\"}]</span>
 <span style="color: #183691;">     }"</span>
</pre>
</div>

 <p>
There are two bits of information needed in each request. The API key, which you must get from  <a href="https://openai.com/">OpenAI</a>, and the prompt text itself (i.e. whatever you want ChatGPT to help you with). The results are not too shabby.
</p>


 <div id="org8a053bd" class="figure">
 <p> <img src="../images/a-chatgpt-emacs-shell/chatgpt.gif" alt="chatgpt.gif" width="80%"></img></p>
</div>

 <p>
I've uploaded the code to GitHub as a tiny  <a href="https://github.com/xenodium/chatgpt-shell">chatgpt-shell</a> package. It's a little experimental and rough still, but hey, it does the job for now. Head over to  <a href="https://github.com/xenodium/chatgpt-shell">github</a> to take a look. The latest iteration handles multiline prompts (use C-j for newlines) and basic code highlighting.
</p>

 <p>
Let's see where it all goes. Pull requests for improvements totally welcome ;-)
</p>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/a-chatgpt-emacs-shell</link>
  <guid isPermaLink="false">http://xenodium.com/a-chatgpt-emacs-shell</guid>
  <pubDate>Tue, 21 Mar 2023 00:00:00 +0000</pubDate>
</item>
<item>
  <title>=*scratch*= a new minimal org mode scratch area for iOS</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-scratch-a-minimal-scratch-area" class="outline-2">
 <h2 id="scratch-a-minimal-scratch-area"> <span class="timestamp-wrapper"> <span class="timestamp">04 March 2023</span></span>  <code>*scratch*</code> a new minimal org mode scratch area for iOS</h2>
 <div class="outline-text-2" id="text-scratch-a-minimal-scratch-area">
 <p>
While we already have lots of note-taking apps on iOS, I wanted a minimal  <code>*scratch*</code> area (à la Emacs), so I built one.
</p>

 <br></br> <div style="text-align: center;">
   <a href="https://apps.apple.com/app/id1671420139">
     <img src="../images/scratch-a-minimal-scratch-area/icon.png" alt="*scratch* icon" width="150px"></img></a>
</div>

 <p>
What's the use-case? You're on the go. Someone's telling you directions, or a phone number, name of a restaurant, anything really… you just need to write it down  <i>right now, quickly</i>!
</p>

 <p>
No time to create a new contact, a note, a file, or spend time on additional taps, bring up keyboard… You just want to write it somewhere with the least amount of friction.
</p>


 <div id="org80ef356" class="figure">
 <p> <img src="../images/scratch-a-minimal-scratch-area/scratch-download_no_audio_x2.6.webp" alt="scratch-download_no_audio_x2.6.webp" width="50%"></img></p>
</div>

 <p>
Being an Emacs and org user, I had to sprinkle the app with basic markup support for headings, lists and checkboxes. Also, having a  <code>*scratch*</code> "buffer" on my iPhone gives me that warm emacsy fuzzy feeling :)
</p>

 <p>
You can download  <code>*scratch*</code> from the  <a href="https://apps.apple.com/gb/app/scratch/id1671420139">App Store</a>.
</p>

 <p>
Find it useful? Please help me spread the word. Tell your friends.
</p>

 <br></br> <div style="text-align: center;">
   <a href="https://apps.apple.com/app/id1671420139">
     <img src="../images/flat-habits-for-ios/download-on-app-store.png" alt="download-on-app-store.png" height="40px"></img></a>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/scratch-a-minimal-scratch-area</link>
  <guid isPermaLink="false">http://xenodium.com/scratch-a-minimal-scratch-area</guid>
  <pubDate>Sat, 04 Mar 2023 00:00:00 +0000</pubDate>
</item>
<item>
  <title>Emacs: org-present in style</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-emacs-org-present-in-style" class="outline-2">
 <h2 id="emacs-org-present-in-style"> <span class="timestamp-wrapper"> <span class="timestamp">10 January 2023</span></span> Emacs: org-present in style</h2>
 <div class="outline-text-2" id="text-emacs-org-present-in-style">
 <p>
I had been meaning to check out David Wilson's  <a href="https://systemcrafters.cc">System Crafters</a> post detailing  <a href="https://systemcrafters.net/emacs-tips/presentations-with-org-present/">his presentations style</a> achieved with the help of  <a href="https://github.com/rlister/org-present">org-present</a> and his own customizations. If you're looking for ways to present from Emacs itself, David's post is well worth a look.
</p>

 <p>
org-present's spartan but effective approach resonated with me. David's touches bring the wonderfully stylish icing to the cake. I personally liked his practice of collapsing slide subheadings by default. This lead me to think about slide navigation in general…
</p>

 <p>
There were two things I wanted to achieve:
</p>

 <ol class="org-ol"> <li>Easily jump between areas of interest. Subheadings, links, and code blocks would be a good start.</li>
 <li>Collapse all but the current top-level heading within the slide, as navigation focus changes.</li>
</ol> <p>
A quick search for existing functions led me to  <code>org-next-visible-heading</code>,  <code>org-next-link</code>, and  <code>org-next-block</code>. While these make it easy to jump through jump between headings, links, org block on their own, I wanted to jump to whichever one of these is next (similar a web browser's tab behaviour). In a way,  <a href="https://en.wikipedia.org/wiki/DWIM">DWIM</a> style.
</p>

 <p>
I wrapped the existing functions to enable returning positions. This gave me  <code>ar/rg-next-visible-heading-pos</code>,  <code>ar/rg-next-link-pos</code>, and  <code>ar/rg-next-block-pos</code> respectively. Now that I can find out the next location of either of these items, I can subsequently glue the navigation logic in a function like  <code>ar/org-present-next-item</code>. To restore balance to the galaxy, I also added  <code>ar/org-present-previous-item</code>.
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">ar/org-present-next-item</span> (<span style="color: #0086b3;">&optional</span> backward)
   <span style="color: #183691;">"Present and reveal next item."</span>
  (<span style="color: #a71d5d;">interactive</span>  <span style="color: #183691;">"P"</span>)
   <span style="color: #969896;">;; </span> <span style="color: #969896;">Beginning of slide, go to previous slide.</span>
  (<span style="color: #a71d5d;">if</span> (<span style="color: #a71d5d;">and</span> backward (eq (point) (point-min)))
      (org-present-prev)
    (<span style="color: #a71d5d;">let*</span> ((heading-pos (ar/org-next-visible-heading-pos backward))
           (link-pos (ar/org-next-link-pos backward))
           (block-pos (ar/org-next-block-pos backward))
           (closest-pos (<span style="color: #a71d5d;">when</span> (<span style="color: #a71d5d;">or</span> heading-pos link-pos block-pos)
                          (apply (<span style="color: #a71d5d;">if</span> backward #'max #'min)
                                 (seq-filter #'identity
                                             (list heading-pos
                                                   link-pos
                                                   block-pos))))))
      (<span style="color: #a71d5d;">if</span> closest-pos
          (<span style="color: #a71d5d;">progn</span>
            (<span style="color: #a71d5d;">cond</span> ((eq heading-pos closest-pos)
                   (goto-char heading-pos))
                  ((eq link-pos closest-pos)
                   (goto-char link-pos))
                  ((eq block-pos closest-pos)
                   (goto-char block-pos)))
             <span style="color: #969896;">;; </span> <span style="color: #969896;">Reveal relevant content.</span>
            (<span style="color: #a71d5d;">cond</span> ((> (org-current-level) 1)
                   (ar/org-present-reveal-level2))
                  ((eq (org-current-level) 1)
                    <span style="color: #969896;">;; </span> <span style="color: #969896;">At level 1. Collapse children.</span>
                   (org-overview)
                   (org-show-entry)
                   (org-show-children)
                   (run-hook-with-args 'org-cycle-hook 'children))))
         <span style="color: #969896;">;; </span> <span style="color: #969896;">End of slide, go to next slide.</span>
        (org-present-next)))))

(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">ar/org-present-previous-item</span> ()
  (<span style="color: #a71d5d;">interactive</span>)
  (ar/org-present-next-item t))

(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">ar/org-next-visible-heading-pos</span> (<span style="color: #0086b3;">&optional</span> backward)
   <span style="color: #183691;">"Similar to `</span> <span style="color: #0086b3;">org-next-visible-heading</span> <span style="color: #183691;">' but for returning position.</span>

 <span style="color: #183691;">Set BACKWARD to search backwards."</span>
  (<span style="color: #a71d5d;">save-excursion</span>
    (<span style="color: #a71d5d;">let</span> ((pos-before (point))
          (pos-after (<span style="color: #a71d5d;">progn</span>
                       (org-next-visible-heading (<span style="color: #a71d5d;">if</span> backward -1 1))
                       (point))))
      (<span style="color: #a71d5d;">when</span> (<span style="color: #a71d5d;">and</span> pos-after (not (equal pos-before pos-after)))
        pos-after))))

(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">ar/org-next-link-pos</span> (<span style="color: #0086b3;">&optional</span> backward)
   <span style="color: #183691;">"Similar to `</span> <span style="color: #0086b3;">org-next-visible-heading</span> <span style="color: #183691;">' but for returning position.</span>

 <span style="color: #183691;">Set BACKWARD to search backwards."</span>
  (<span style="color: #a71d5d;">save-excursion</span>
    (<span style="color: #a71d5d;">let*</span> ((inhibit-message t)
           (pos-before (point))
           (pos-after (<span style="color: #a71d5d;">progn</span>
                        (org-next-link backward)
                        (point))))
      (<span style="color: #a71d5d;">when</span> (<span style="color: #a71d5d;">and</span> pos-after (<span style="color: #a71d5d;">or</span> (<span style="color: #a71d5d;">and</span> backward (> pos-before pos-after))
                               (<span style="color: #a71d5d;">and</span> (not backward) (> pos-after pos-before))))
        pos-after))))

(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">ar/org-next-block-pos</span> (<span style="color: #0086b3;">&optional</span> backward)
   <span style="color: #183691;">"Similar to `</span> <span style="color: #0086b3;">org-next-block</span> <span style="color: #183691;">' but for returning position.</span>

 <span style="color: #183691;">Set BACKWARD to search backwards."</span>
  (<span style="color: #a71d5d;">save-excursion</span>
    (<span style="color: #a71d5d;">when</span> (<span style="color: #a71d5d;">and</span> backward (org-babel-where-is-src-block-head))
      (org-babel-goto-src-block-head))
    (<span style="color: #a71d5d;">let</span> ((pos-before (point))
          (pos-after (<span style="color: #a71d5d;">ignore-errors</span>
                       (org-next-block 1 backward)
                       (point))))
      (<span style="color: #a71d5d;">when</span> (<span style="color: #a71d5d;">and</span> pos-after (not (equal pos-before pos-after)))
         <span style="color: #969896;">;; </span> <span style="color: #969896;">Place point inside block body.</span>
        (goto-char (line-beginning-position 2))
        (point)))))

(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">ar/org-present-reveal-level2</span> ()
  (<span style="color: #a71d5d;">interactive</span>)
  (<span style="color: #a71d5d;">let</span> ((loc (point))
        (level (org-current-level))
        (heading))
    (<span style="color: #a71d5d;">ignore-errors</span> (org-back-to-heading t))
    (<span style="color: #a71d5d;">while</span> (<span style="color: #a71d5d;">or</span> (not level) (> level 2))
      (<span style="color: #a71d5d;">setq</span> level (org-up-heading-safe)))
    (<span style="color: #a71d5d;">setq</span> heading (point))
    (goto-char (point-min))
    (org-overview)
    (org-show-entry)
    (org-show-children)
    (run-hook-with-args 'org-cycle-hook 'children)
    (goto-char heading)
    (org-show-subtree)
    (goto-char loc)))
</pre>
</div>

 <p>
Beware, this was a minimal effort (with redundant code, duplication, etc) and should likely be considered a proof of concept of sorts, but the results look promising. You can see a demo in action.
</p>


 <div id="orgd546789" class="figure">
 <p> <img src="../images/emacs-org-present-in-style/org-navigate_x1.6.webp" alt="org-navigate_x1.6.webp" width="80%" height="80%"></img></p>
</div>

 <p>
While this was a fun exercise, I can't help but think there must be a cleaner way of doing it or there are existing packages that already do this for you. If you do know, I'd love to know.
</p>

 <p>
Future versions of this code will likely be updated in  <a href="https://github.com/xenodium/dotsies/blob/main/emacs/features/fe-org.el">my Emacs org config</a>.
</p>
</div>

 <div id="outline-container-org0d6ae4e" class="outline-3">
 <h3 id="org0d6ae4e">Update</h3>
 <div class="outline-text-3" id="text-org0d6ae4e">
 <p>
Removed a bunch of duplication and now rely primarily on existing  <code>org-next-visible-heading</code>,  <code>org-next-link</code>, and  <code>org-next-block</code>.
</p>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/emacs-org-present-in-style</link>
  <guid isPermaLink="false">http://xenodium.com/emacs-org-present-in-style</guid>
  <pubDate>Tue, 10 Jan 2023 00:00:00 +0000</pubDate>
</item>
<item>
  <title>Emacs: insert and render SF symbols</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-emacs-insert-and-render-sf-symbols" class="outline-2">
 <h2 id="emacs-insert-and-render-sf-symbols"> <span class="timestamp-wrapper"> <span class="timestamp">08 January 2023</span></span> Emacs: insert and render SF symbols</h2>
 <div class="outline-text-2" id="text-emacs-insert-and-render-sf-symbols">
 <p>
About a week ago, I added an Emacs  <a href="https://xenodium.com/emacs-macro-me-some-sf-symbols/">function to insert SF symbol names</a>. This is specially useful for SwiftUI. I didn't bother too much with inserting symbols themselves since I hadn't figured out a way to render them for all buffers. That's now changed.
</p>

 <p>
Christian Tietze and Alan Third both have useful posts in this space:
</p>

 <ul class="org-ul"> <li> <a href="http://idiocy.org/emacs-fonts-and-fontsets.html">Emacs, fonts and fontsets</a></li>
 <li> <a href="https://christiantietze.de/posts/2023/01/use-sf-pro-for-sf-symbols-everywhere-in-emacs/">Use San Francisco Font for SF Symbols Everywhere in Emacs</a></li>
</ul> <p>
I'm currently using the following to render SF symbols in all buffers (macOS only):
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp"> <span style="color: #969896;">;; </span> <span style="color: #969896;">Enable rendering SF symbols on macOS.</span>
(<span style="color: #a71d5d;">when</span> (memq system-type '(darwin))
  (set-fontset-font t nil  <span style="color: #183691;">"SF Pro Display"</span> nil 'append))
</pre>
</div>

 <p>
Now that I can render SF symbols everywhere, I  <i>may</i> be more included to use them to spif things up.
</p>

 <p>
I've added  <code>sf-symbol-insert</code> to  <a href="https://github.com/xenodium/dotsies/blob/main/emacs/ar/sf.el">sf.el</a>, let's see if usage sticks.
</p>


 <div id="org6ac09a3" class="figure">
 <p> <img src="../images/emacs-insert-and-render-sf-symbols/sf-insert-trimmed_x1.8.webp" alt="sf-insert-trimmed_x1.8.webp" width="80%" height="80%"></img></p>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/emacs-insert-and-render-sf-symbols</link>
  <guid isPermaLink="false">http://xenodium.com/emacs-insert-and-render-sf-symbols</guid>
  <pubDate>Sun, 08 Jan 2023 00:00:00 +0000</pubDate>
</item>
<item>
  <title>Emacs: Macro me some SF Symbols</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-emacs-macro-me-some-sf-symbols" class="outline-2">
 <h2 id="emacs-macro-me-some-sf-symbols"> <span class="timestamp-wrapper"> <span class="timestamp">31 December 2022</span></span> Emacs: Macro me some SF Symbols</h2>
 <div class="outline-text-2" id="text-emacs-macro-me-some-sf-symbols">
 <p>
For inserting SF Symbols in SwiftUI, I typically rely on Apple's  <a href="https://developer.apple.com/sf-symbols/">SF Symbols app</a> to browse the symbols's catalog. Once I find a symbol I'm happy with, I copy its name and paste it into my Swift source. This works fairly well.
</p>

 <p>
With Christian Tietze recently posting  <a href="https://christiantietze.de/posts/2022/12/sf-symbols-emacs-tab-numbers/">how he rendered SF Symbols in Emacs</a>, I figured there may be a way to shift the above workflow to rely on Emacs completion instead. While I initially went down a rabbit hole to programmatically extract SF symbols (via something like  <a href="https://github.com/SFSafeSymbols/SFSafeSymbols">SFSafeSymbols</a>), I took a step back to rethink the strategy.
</p>

 <p>
From the  <a href="https://developer.apple.com/sf-symbols/">SF Symbols app</a>, one can select multiple symbols and copy/paste either the symbols themselves or their respective names. The catch is you can only copy disjointed data. That is, you can copy the symbols or their names, but not both in one go. Let's take a look at what the disjointed data looks like. I've pasted both under separate sections in an Emacs buffer.
</p>


 <div id="org06c4a8e" class="figure">
 <p> <img src="../images/emacs-macro-me-some-sf-symbols/disjointed.png" alt="disjointed.png" width="60%" height="60%"></img></p>
</div>


 <p>
If I could rejoin these two sets, I would have a lookup table I could easily invoke from Emacs.
</p>

 <p>
There are roughly 4500 symbols, so copying, pasting, along with text manipulation isn't manually feasible. Lucky for us, an Emacs  <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Keyboard-Macros.html">keyboard macro</a> is the perfect hammer for this nail. You can see the macro in action below.
</p>


 <div id="orgcde0226" class="figure">
 <p> <img src="../images/emacs-macro-me-some-sf-symbols/mini-macro_x1.6.webp" alt="mini-macro_x1.6.webp" width="60%" height="60%"></img></p>
</div>

 <p>
This looks fairly magical (and it is), but when you break it down into its building blocks, it's nothing more than recording your keystrokes and replaying them. Starting with the cursor at the beginning of  <code>square.and.arrow.up</code>, these are the keystrokes we'd need to record:
</p>

 <dl class="org-dl"> <dt>C-s</dt> <dd> <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Basic-Isearch.html">iseach-forward</a> to search for a character and jump to it</dd>
 <dt>=</dt> <dd>insert  <code>=</code> so we jump to  <code>= Symbols =</code></dd>
 <dt><return></dt> <dd>runs  <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Basic-Isearch.html">isearch-exit</a> since we're done jumping.</dd>
 <dt>C-n</dt> <dd> <code>next-line</code>.</dd>
 <dt>C-a</dt> <dd> <code>beginning-of-line</code>.</dd>
 <dt>C-SPC</dt> <dd> <code>set-mark-command</code> to activate the region.</dd>
 <dt>C-f</dt> <dd> <code>forward-char</code> to select symbol.</dd>
 <dt>C-w</dt> <dd> <code>kill-ring-save</code> to cut/kill the symbol.</dd>
 <dt>C-u C-<space></dt> <dd> <code>set-mark-command</code> (with prefix) to jump back to where we started before searching.</dd>
 <dt>C-y</dt> <dd> <code>yank</code> to yank/paste the symbol.</dd>
 <dt>C-<space></dt> <dd> <code>set-mark-command</code> to activate the region.</dd>
 <dt>C-e</dt> <dd> <code>end-of-line</code> to select the entire line.</dd>
 <dt>"</dt> <dd>As a  <a href="https://github.com/Fuco1/smartparens">smartparens</a> user, inserting quote with region places quotes around selection.</dd>
 <dt>C-n</dt> <dd> <code>next-line</code>.</dd>
 <dt>C-a</dt> <dd> <code>beginning-of-line</code>. We are now at a strategic location where we can replay the above commands.</dd>
</dl> <p>
To start/end recording and executing keyboard macros, use:
</p>

 <dl class="org-dl"> <dt>C-x (</dt> <dd> <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Basic-Keyboard-Macro.html">kmacro-start-macro</a></dd>
 <dt>C-x )</dt> <dd> <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Basic-Keyboard-Macro.html">kmacro-end-macro</a></dd>
 <dt>C-x e</dt> <dd> <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Basic-Keyboard-Macro.html">kmacro-end-and-call-macro</a> runs your macro. Press  <code>e</code> immediately after to execute again.</dd>
 <dt>C-u 0 C-x e</dt> <dd> <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Basic-Keyboard-Macro.html">kmacro-end-and-call-macro</a> (with zero prefix) repeat until there is an error.</dd>
</dl> <p>
Our previous example ran on a handful of SF symbols. Let's bring out the big guns and run on the entire dataset. This time, we'll run the entire flow, including macro creation and executing until there is an error (i.e. process the whole lot).
</p>


 <div id="org46cf902" class="figure">
 <p> <img src="../images/emacs-macro-me-some-sf-symbols/sf-symbol-no-mouse-short_x1.4.webp" alt="sf-symbol-no-mouse-short_x1.4.webp" width="90%" height="90%"></img></p>
</div>

 <p>
Now that we have our data joined, we can feed it to the humble  <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Completion.html">completing-read</a>.
</p>


 <div id="orgb973566" class="figure">
 <p> <img src="../images/emacs-macro-me-some-sf-symbols/sf-symbols-insert-name.png" alt="sf-symbols-insert-name.png" width="60%" height="60%"></img></p>
</div>

 <p>
It's worth highlighting that to render SF Symbols in Emacs, we must  <a href="https://christiantietze.de/posts/2022/12/sf-symbols-emacs-tab-numbers/">propertize our text with one of the macOS SF fonts</a>, for example "SF Pro".
</p>

 <p>
With all the pieces in place, let's use our new function to insert SF symbol names in a SwiftUI snippet. Since we're using  <code>completing-read</code> we can fuzzy search our lookups with our favorite completion frameworks (in my case via  <a href="https://github.com/abo-abo/swiper">ivy</a>).
</p>


 <div id="org13b07de" class="figure">
 <p> <img src="../images/emacs-macro-me-some-sf-symbols/sf-search_x1.2.webp" alt="sf-search_x1.2.webp" width="90%" height="90%"></img></p>
</div>

 <p>
While this post is macOS-specific, it gives a taste of how powerful Emacs  <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Keyboard-Macros.html">keyboard macros</a> can be. Be sure to check out  <a href="https://emacsrocks.com/e05.html">Emacs Rocks! Episode 05: Macros in style</a> and  <a href="https://www.masteringemacs.org/article/keyboard-macros-are-misunderstood">Keyboard Macros are Misunderstood - Mastering Emacs</a>. For those that dabble in elisp, you can appreciate how handy   <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Completion.html">completing-read</a> is with very little code.
</p>

 <p>
The full source to  <a href="https://github.com/xenodium/dotsies/blob/main/emacs/ar/sf.el">sf-symbol-insert-name</a> is available in my  <a href="https://github.com/xenodium/dotsies/">Emacs config repo</a>. The function is fairly bare bones and has had fairly little testing. Patches totally welcome.
</p>
</div>

 <div id="outline-container-org65a835a" class="outline-3">
 <h3 id="org65a835a">Update</h3>
 <div class="outline-text-3" id="text-org65a835a">
 <p>
There is some redundancy in the snippet I had forgotten to remove. Either way, latest version at  <a href="https://github.com/xenodium/dotsies/blob/main/emacs/ar/sf.el">sf.el</a>.
</p>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/emacs-macro-me-some-sf-symbols</link>
  <guid isPermaLink="false">http://xenodium.com/emacs-macro-me-some-sf-symbols</guid>
  <pubDate>Sat, 31 Dec 2022 00:00:00 +0000</pubDate>
</item>
<item>
  <title>Emacs: ffmpeg and macOS aliasing commands</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-emacs-ffmpeg-and-macos-alias-commands" class="outline-2">
 <h2 id="emacs-ffmpeg-and-macos-alias-commands"> <span class="timestamp-wrapper"> <span class="timestamp">18 December 2022</span></span> Emacs: ffmpeg and macOS aliasing commands</h2>
 <div class="outline-text-2" id="text-emacs-ffmpeg-and-macos-alias-commands">
 <p>
On a recent mastodon  <a href="https://twit.social/@chris_spackman/109531700714365786">post</a>, Chris Spackman mentioned he uses Emacs to save  <a href="https://ffmpeg.org/">ffmpeg</a> commands he's figured out for later usage. Emacs is great for this kind of thing. I've tried different approaches over time and eventually landed on  <a href="https://github.com/xenodium/dwim-shell-command">dwim-shell-command</a>, a small package I wrote. Like Chris, I also wanted a way to invoke magical incantations of known shell commands without having to remember all the details.
</p>

 <p>
Chris's post reminded me of a few use-cases I'd been meaning to add DWIM shell commands for.
</p>
</div>

 <div id="outline-container-org43c44b8" class="outline-4">
 <h4 id="org43c44b8">ffmpeg</h4>
 <div class="outline-text-4" id="text-org43c44b8">
 <ol class="org-ol"> <li>Trimming seconds from videos
 <ul class="org-ul"> <li> <p>
 <code>dwim-shell-commands-video-trim-beginning</code> using:
</p>
 <div class="org-src-container">
 <pre class="src src-sh">ffmpeg -i  <span style="color: #183691;">'<<f>>'</span> -y -ss <<Seconds:5>> -c:v copy -c:a copy  <span style="color: #183691;">'<<fne>>_trimmed.<<e>>'</span>
</pre>
</div></li>
 <li> <p>
 <code>dwim-shell-commands-video-trim-end</code> using:
</p>
 <div class="org-src-container">
 <pre class="src src-sh">ffmpeg -sseof -<<Seconds:5>> -i  <span style="color: #183691;">'<<f>>'</span> -y -c:v copy -c:a copy  <span style="color: #183691;">'<<fne>>_trimmed.<<e>>'</span>
</pre>
</div>

 <p>
Side-node: The  <code><<Seconds:5>></code> placeholder is recognized as a query, so Emacs will prompt you for a numeric value.
</p></li>
</ul></li>
 <li>Extracting audio from videos
 <ul class="org-ul"> <li> <p>
 <code>dwim-shell-commands-video-to-mp3</code> using:
</p>
 <div class="org-src-container">
 <pre class="src src-sh">ffmpeg -i  <span style="color: #183691;">'<<f>>'</span> -vn -ab 128k -ar 44100 -y  <span style="color: #183691;">'<<fne>>.mp3'</span>
</pre>
</div></li>
</ul></li>
</ol> <p>
With these new dwim shell commands added, I can easily apply them one after the other. No need to remember command details.
</p>


 <div id="org02cb8ae" class="figure">
 <p> <img src="../images/emacs-ffmpeg-and-macos-alias-commands/trim_convert_mp3_x1.4.webp" alt="trim_convert_mp3_x1.4.webp" width="60%" height="60%"></img></p>
</div>
</div>
</div>

 <div id="outline-container-org6a4d970" class="outline-4">
 <h4 id="org6a4d970">macOS aliases</h4>
 <div class="outline-text-4" id="text-org6a4d970">
 <p>
After rebuilding Emacs via the wonderful  <a href="https://github.com/d12frosted/homebrew-emacs-plus">emacs-plus</a>, I recently broke my existing  <code>/Applications/Emacs.app</code> alias. No biggie, one can easily add a  <a href="https://support.apple.com/en-gb/guide/mac-help/mchlp1046/mac">new one alias from macOS Finder</a>, but I've been wanting to do it from Emacs. Turns out there's a bit of AppleScript we can turn into a more memorale command like  <code>dwim-shell-commands-macos-make-finder-alias</code>:
</p>

 <div class="org-src-container">
 <pre class="src src-sh">osascript -e  <span style="color: #183691;">'tell application \"Finder\" to make alias file to POSIX file \"<<f>>\" at POSIX file \"%s\"'</span>
</pre>
</div>

 <p>
It's highly unlikely I'll remember the AppleScript snippet (are there better ways?), but I'll easily find and invoke my new command with fuzzy searching:
</p>


 <div id="org402654b" class="figure">
 <p> <img src="../images/emacs-ffmpeg-and-macos-alias-commands/make-emacs-alias_x1.4.webp" alt="make-emacs-alias_x1.4.webp" width="80%" height="80%"></img></p>
</div>
</div>
</div>

 <div id="outline-container-org3f7be11" class="outline-4">
 <h4 id="org3f7be11">Included in dwim-shell-command</h4>
 <div class="outline-text-4" id="text-org3f7be11">
 <p>
All of these are now included in  <a href="https://github.com/xenodium/dwim-shell-command/blob/main/dwim-shell-commands.el">dwim-shell-commands.el</a>, which you can optionally load after installing  <a href="https://github.com/xenodium/dwim-shell-command">dwim-shell-command</a> from  <a href="https://melpa.org/#/dwim-shell-command">MELPA</a>.</p>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/emacs-ffmpeg-and-macos-alias-commands</link>
  <guid isPermaLink="false">http://xenodium.com/emacs-ffmpeg-and-macos-alias-commands</guid>
  <pubDate>Sun, 18 Dec 2022 00:00:00 +0000</pubDate>
</item>
<item>
  <title>Emacs: Context-aware yasnippets</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-emacs-generate-a-swift-initializer" class="outline-2">
 <h2 id="emacs-generate-a-swift-initializer"> <span class="timestamp-wrapper"> <span class="timestamp">12 December 2022</span></span> Emacs: Context-aware yasnippets</h2>
 <div class="outline-text-2" id="text-emacs-generate-a-swift-initializer">
 <p>
Back in 2020, I wrote a semi-automatic  <a href="https://github.com/joaotavora/yasnippet">yasnippet</a> to  <a href="https://xenodium.com/smarter-snippets/">generate Swift initializers</a>. I say semi-automatic because it could have been a little smarter. While it helped generate some of the code, what I really wanted was full context-aware generation. The Swift struct already had a few properties defined, so a smarter yasnippet should have been able to use this info for code generation.
</p>


 <div id="org765a357" class="figure">
 <p> <img src="../images/smarter-snippets/snippet.gif" alt="snippet.gif" width="60%" height="60%"></img></p>
</div>

 <p>
With an extra push, we could have written a smarter yasnippet, but it may require a fair bit of parsing logic. Fast forward to today, and bringing context-awareness seems like the right match for  <a href="https://tree-sitter.github.io/tree-sitter/">Tree-sitter</a>. While Tree-sitter can enable faster and more reliable syntax-highlighting in our beloved text editor, it can also power smarter tools. It does so by exposing a semantic snapshot of our source code using a syntax tree.
</p>

 <p>
Let's see how we can use Tree-sitter to realise our original yasnippet vision. We'll start with the same struct snippet we used back in 2020. The goal is to generate an initializer using the existing definitions.
</p>

 <div class="org-src-container">
 <pre class="src src-swift"> <span style="color: #a71d5d;">struct</span>  <span style="color: #795da3;">Coordinate</span> {
   <span style="color: #a71d5d;">public</span>  <span style="color: #a71d5d;">let</span> x:  <span style="color: #a71d5d;">Int</span>
   <span style="color: #a71d5d;">public</span>  <span style="color: #a71d5d;">let</span> y:  <span style="color: #a71d5d;">Int</span>
   <span style="color: #a71d5d;">public</span>  <span style="color: #a71d5d;">let</span> z:  <span style="color: #a71d5d;">Int</span>
}
</pre>
</div>

 <p>
While Emacs will  <a href="https://lists.gnu.org/archive/html/emacs-devel/2022-11/msg01443.html">will soon ship its own Tree-sitter integration</a>, I've opted to try out the  <a href="https://github.com/emacs-tree-sitter/elisp-tree-sitter">emacs-tree-sitter</a> package as Swift support is currently included in  <a href="https://github.com/emacs-tree-sitter/tree-sitter-langs">tree-sitter-langs</a>.
</p>

 <p>
I have much to learn much about Tree-sitter syntax trees, but the package ships with a handy tool to dump the tree via  <code>tree-sitter-debug-mode</code>.
</p>


 <div id="orgd9c98ba" class="figure">
 <p> <img src="../images/emacs-generate-a-swift-initializer/syntax-tree.png" alt="syntax-tree.png" width="90%" height="90%"></img></p>
</div>

 <p>
With a syntax tree in mind, one can craft a query to semantically extract parts of the code. In our case, we want property names and types.
I've yet to get acquainted with Tree-sitter's  <a href="https://tree-sitter.github.io/tree-sitter/using-parsers#query-syntax">query syntax</a>, but the package also ships with another handy tool that helps view query results via  <code>tree-sitter-query-builder</code>.
</p>


 <div id="org254671c" class="figure">
 <p> <img src="../images/emacs-generate-a-swift-initializer/query-builder.png" alt="query-builder.png" width="90%" height="90%"></img></p>
</div>

 <p>
The following query extracts all the  <code>let properties</code> in file. You can see the builder in action above, highlighting our query results.
</p>

 <pre class="example">
(struct_declaration (constant_declaration (identifier) @name (type) @value))
</pre>

 <p>
If we want to be more thorough, we should likely cater for classes, vars, int/string literals, etc. so the query needs to be extended as follows. I'm sure it can be written differently, but for now, it does the job.
</p>

 <pre class="example">
(struct_declaration (variable_declaration (identifier) @name (type) @type))
(struct_declaration (variable_declaration (identifier) @name (string) @value))
(struct_declaration (variable_declaration (identifier) @name (number) @value))
(struct_declaration (constant_declaration (identifier) @name (type) @value))
(struct_declaration (constant_declaration (identifier) @name (string) @value))
(struct_declaration (constant_declaration (identifier) @name (number) @value))
(class_declaration (variable_declaration (identifier) @name (type) @type))
(class_declaration (variable_declaration (identifier) @name (string) @value))
(class_declaration (variable_declaration (identifier) @name (number) @value))
(class_declaration (constant_declaration (identifier) @name (type) @type))
(class_declaration (constant_declaration (identifier) @name (string) @value))
(class_declaration (constant_declaration (identifier) @name (number) @value))
</pre>

 <p>
Now that we got our Tree-sitter query sorted, let's write a little elisp to extract the info we need from the generated tree. We'll write a  <code>swift-class-or-struct-vars-at-point</code> function to extract the struct (or class) at point and subsequently filter its property names/types using our query. To simplify the result, we'll return a list of alists.
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">swift-class-or-struct-vars-at-point</span> ()
   <span style="color: #183691;">"Return a list of class or struct vars in the form '(((name . \"foo\") (type . \"Foo\")))."</span>
  (<span style="color: #333333;">cl-assert</span> (seq-contains local-minor-modes 'tree-sitter-mode)  <span style="color: #183691;">"tree-sitter-mode not enabled"</span>)
  (<span style="color: #a71d5d;">let*</span> ((node (<span style="color: #a71d5d;">or</span> (tree-sitter-node-at-point 'struct_declaration)
                   (tree-sitter-node-at-point 'class_declaration)))
         (vars)
         (var))
    (<span style="color: #a71d5d;">unless</span> node
      (<span style="color: #333333;">error</span>  <span style="color: #183691;">"Neither in class nor struct"</span>))
    (mapc
     (<span style="color: #a71d5d;">lambda</span> (item)
       (<span style="color: #a71d5d;">cond</span> ((eq 'identifier
                  (tsc-node-type (cdr item)))
              (<span style="color: #a71d5d;">when</span> var
                (<span style="color: #a71d5d;">setq</span> vars (append vars (list var))))
              (<span style="color: #a71d5d;">setq</span> var (list (cons 'name (tsc-node-text
                                           (cdr item))))))
             ((eq 'type
                  (tsc-node-type (cdr item)))
              (<span style="color: #a71d5d;">setq</span> var (map-insert var 'type (tsc-node-text
                                               (cdr item)))))
             ((eq 'string
                  (tsc-node-type (cdr item)))
              (<span style="color: #a71d5d;">setq</span> var (map-insert var 'type  <span style="color: #183691;">"String"</span>)))
             ((eq 'number
                  (tsc-node-type (cdr item)))
              (<span style="color: #a71d5d;">setq</span> var (map-insert var 'type  <span style="color: #183691;">"Int"</span>)))
             (t (message  <span style="color: #183691;">"%s"</span> (tsc-node-type (cdr item))))))
     (tsc-query-captures
      (tsc-make-query tree-sitter-language
                       <span style="color: #183691;">"(struct_declaration (variable_declaration (identifier) @name (type) @type))</span>
 <span style="color: #183691;">                       (struct_declaration (variable_declaration (identifier) @name (string) @value))</span>
 <span style="color: #183691;">                       (struct_declaration (variable_declaration (identifier) @name (number) @value))</span>
 <span style="color: #183691;">                       (struct_declaration (constant_declaration (identifier) @name (type) @value))</span>
 <span style="color: #183691;">                       (struct_declaration (constant_declaration (identifier) @name (string) @value))</span>
 <span style="color: #183691;">                       (struct_declaration (constant_declaration (identifier) @name (number) @value))</span>
 <span style="color: #183691;">                       (class_declaration (variable_declaration (identifier) @name (type) @type))</span>
 <span style="color: #183691;">                       (class_declaration (variable_declaration (identifier) @name (string) @value))</span>
 <span style="color: #183691;">                       (class_declaration (variable_declaration (identifier) @name (number) @value))</span>
 <span style="color: #183691;">                       (class_declaration (constant_declaration (identifier) @name (type) @type))</span>
 <span style="color: #183691;">                       (class_declaration (constant_declaration (identifier) @name (string) @value))</span>
 <span style="color: #183691;">                       (class_declaration (constant_declaration (identifier) @name (number) @value))"</span>)
      node nil))
    (<span style="color: #a71d5d;">when</span> var
      (<span style="color: #a71d5d;">setq</span> vars (append vars (list var))))
    vars))
</pre>
</div>

 <pre class="example">
(((type . "Int") (name . "x"))
 ((type . "Int") (name . "y"))
 ((type . "Int") (name . "z")))
</pre>


 <p>
Finally, we write a function to generate a Swift initializer from our property list.
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">swift-class-or-struct-initializer-text</span> (vars)
   <span style="color: #183691;">"Generate a Swift initializer from property VARS."</span>
  (<span style="color: #333333;">cl-assert</span> (seq-contains local-minor-modes 'tree-sitter-mode)  <span style="color: #183691;">"tree-sitter-mode not enabled"</span>)
  (format
   (string-trim
     <span style="color: #183691;">"</span>
 <span style="color: #183691;">init(%s) {</span>
 <span style="color: #183691;">  %s</span>
 <span style="color: #183691;">}"</span>)
   (seq-reduce (<span style="color: #a71d5d;">lambda</span> (reduced var)
                 (format  <span style="color: #183691;">"%s%s%s: %s"</span>
                         reduced
                         (<span style="color: #a71d5d;">if</span> (string-empty-p reduced)
                              <span style="color: #183691;">""</span>  <span style="color: #183691;">", "</span>)
                         (map-elt var 'name)
                         (map-elt var 'type)))
               vars  <span style="color: #183691;">""</span>)
   (string-join
    (mapcar (<span style="color: #a71d5d;">lambda</span> (var)
              (format  <span style="color: #183691;">"self.%s = %s"</span>
                      (map-elt var 'name)
                      (map-elt var 'name)))
            vars)
     <span style="color: #183691;">"\n  "</span>)))
</pre>
</div>
 <pre class="example">
init(x: Int, y: Int, z: Int) {
  self.x = x
  self.y = y
  self.z = z
}
</pre>


 <p>
We're so close now. All we need is a simple way invoke our code generator. We can use yasnippet for that, making  <code>init</code> our expandable keyword.
</p>

 <pre class="example">
# -*- mode: snippet -*-
# name: init all
# key: init
# --
`(swift-class-or-struct-initializer-text (swift-class-or-struct-vars-at-point))`
</pre>

 <p>
And with all that, we've got our yasnippet vision accomplished!
</p>


 <div id="org1911e74" class="figure">
 <p> <img src="../images/emacs-generate-a-swift-initializer/init-sitter_x2.webp" alt="init-sitter_x2.webp" width="60%" height="60%"></img></p>
</div>

 <p>
Be sure to check out this year's relevant  <a href="https://emacsconf.org/">EmacsConf</a> talk:  <a href="https://emacsconf.org/2022/talks/treesitter/">Tree-sitter beyond syntax highlighting</a>.
</p>

 <p>
All code is now pushed to my  <a href="https://github.com/xenodium/dotsies/commit/9a44606935e8d57d7b3bde2d8d051defbf254a9e">config repo</a>. By the way, I'm not super knowledgable of neither yasnippet nor Tree-sitter. Improvements are totally welcome. Please reach out on the  <a href="https://indieweb.social/@xenodium">Fediverse</a> if you have suggestions!
</p>
</div>

 <div id="outline-container-org541e190" class="outline-3">
 <h3 id="org541e190">Update</h3>
 <div class="outline-text-3" id="text-org541e190">
 <p>
 <a href="https://gitlab.com/woolsweater">Josh Caswell</a> kindly pointed out a couple of interesting items:
</p>

 <ol class="org-ol"> <li>tree-sitter-langs's  <a href="https://www.reddit.com/r/emacs/comments/zkb7aq/comment/izzjx3l/">Swift grammar is fairly outdated/incomplete</a>.</li>
 <li>There are more up-to-date Swift grammar implementations currently available:
 <ul class="org-ul"> <li> <a href="https://gitlab.com/woolsweater/tree-sitter-swifter">tree-sitter-swifter</a> (by Josh Caswell himself)</li>
 <li> <a href="https://github.com/alex-pinkus/tree-sitter-swift">tree-sitter-swift</a> (by Alex Pinkus)</li>
</ul></li>
</ol></div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/emacs-generate-a-swift-initializer</link>
  <guid isPermaLink="false">http://xenodium.com/emacs-generate-a-swift-initializer</guid>
  <pubDate>Mon, 12 Dec 2022 00:00:00 +0000</pubDate>
</item>
<item>
  <title>Emacs: quickly killing processes</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-emacs-quick-kill-process" class="outline-2">
 <h2 id="emacs-quick-kill-process"> <span class="timestamp-wrapper"> <span class="timestamp">13 November 2022</span></span> Emacs: quickly killing processes</h2>
 <div class="outline-text-2" id="text-emacs-quick-kill-process">
 <p>
Every so often, I need to kill the odd unresponsive process. While I really like  <code>proced</code> (check out Mickey Petersen's  <a href="https://www.masteringemacs.org/article/displaying-interacting-processes-proced">article</a>), I somehow find myself using macOS's  <a href="https://support.apple.com/en-bw/guide/activity-monitor/actmaea30277/mac">Activity Monitor</a> to this purpose. Kinda odd, considering I prefer to do these kinds of things from Emacs.
</p>

 <p>
What I'd really like is a way to quickly fuzzy search a list of active processes and choose the unresponsive culprid, using my preferred completion frontend (in my case  <a href="https://github.com/abo-abo/swiper">ivy</a>).
</p>


 <div id="org1621d89" class="figure">
 <p> <img src="../images/emacs-quick-kill-process/kill_x1.8.webp" alt="kill_x1.8.webp" width="95%" height="95%"></img></p>
</div>

 <p>
The function below gives us a fuzzy-searchable process utility. While we could use  <code>ivy-read</code> directly in our implementation, we're better of using  <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Completion.html">completing-read</a> to remain compatible with other completion frameworks. I'm a big fan of the humble  <code>completing-read</code>. You feed it a list of candidates and it prompts users to pick one.
</p>

 <p>
To build our process list, we can lean on  <code>proced</code>'s own source:  <code>proced-process-attributes</code>. We transform its output to an  <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Association-Lists.html">alist</a>, formatting the visible keys to contain the process id, owner, command name, and the command line which invoked the process. Once a process is chosen, we can send a kill signal using   <del>signal-process</del>  <a href="https://github.com/xenodium/dwim-shell-command">dwim-shell-command</a> and our  <i>job is done</i>.
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">require</span> ' <span style="color: #0086b3;">dwim-shell-command</span>)
(<span style="color: #a71d5d;">require</span> ' <span style="color: #0086b3;">map</span>)
(<span style="color: #a71d5d;">require</span> ' <span style="color: #0086b3;">proced</span>)
(<span style="color: #a71d5d;">require</span> ' <span style="color: #0086b3;">seq</span>)

(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">dwim-shell-commands-kill-process</span> ()
   <span style="color: #183691;">"Select and kill process."</span>
  (<span style="color: #a71d5d;">interactive</span>)
  (<span style="color: #a71d5d;">let*</span> ((pid-width 5)
         (comm-width 25)
         (user-width 10)
         (processes (proced-process-attributes))
         (candidates
          (mapcar (<span style="color: #a71d5d;">lambda</span> (attributes)
                    (<span style="color: #a71d5d;">let*</span> ((process (cdr attributes))
                           (pid (format (format  <span style="color: #183691;">"%%%ds"</span> pid-width) (map-elt process 'pid)))
                           (user (format (format  <span style="color: #183691;">"%%-%ds"</span> user-width)
                                         (truncate-string-to-width
                                          (map-elt process 'user) user-width nil nil t)))
                           (comm (format (format  <span style="color: #183691;">"%%-%ds"</span> comm-width)
                                         (truncate-string-to-width
                                          (map-elt process 'comm) comm-width nil nil t)))
                           (args-width (- (window-width) (+ pid-width user-width comm-width 3)))
                           (args (map-elt process 'args)))
                      (cons (<span style="color: #a71d5d;">if</span> args
                                (format  <span style="color: #183691;">"%s %s %s %s"</span> pid user comm (truncate-string-to-width args args-width nil nil t))
                              (format  <span style="color: #183691;">"%s %s %s"</span> pid user comm))
                            process)))
                  processes))
         (selection (map-elt candidates
                             (completing-read  <span style="color: #183691;">"kill process: "</span>
                                              (seq-sort
                                               (<span style="color: #a71d5d;">lambda</span> (p1 p2)
                                                 (string-lessp (nth 2 (split-string (string-trim (car p1))))
                                                               (nth 2 (split-string (string-trim (car p2))))))
                                               candidates)  <span style="color: #333333;">nil t)))</span>
         (prompt-title (format  <span style="color: #183691;">"%s %s %s"</span>
                               (map-elt selection 'pid)
                               (map-elt selection 'user)
                               (map-elt selection 'comm))))
    (<span style="color: #a71d5d;">when</span> (y-or-n-p (format  <span style="color: #183691;">"Kill? %s"</span> prompt-title))
      (dwim-shell-command-on-marked-files
       (format  <span style="color: #183691;">"Kill %s"</span> prompt-title)
       (format  <span style="color: #183691;">"kill -9 %d"</span> (map-elt selection 'pid))
        <span style="color: #a71d5d;">:utils</span>  <span style="color: #183691;">"kill"</span>
        <span style="color: #a71d5d;">:error-autofocus</span> t
        <span style="color: #a71d5d;">:silent-success</span> t))))
</pre>
</div>

 <p>
I've pushed  <code>dwim-shell-commands-kill-process</code> to my  <del> <a href="https://github.com/xenodium/dotsies/">config</a></del>  <a href="https://github.com/xenodium/dwim-shell-command/commit/b98f45c7901446cf1ab60be2ab648c623e774427">dwim-shell-commands.el</a>. Got suggestions? Alternatives? Lemme know.
</p>
</div>

 <div id="outline-container-orgcff201d" class="outline-3">
 <h3 id="orgcff201d">Update</h3>
 <div class="outline-text-3" id="text-orgcff201d">
 <p>
I've moved  <code>dwim-shell-commands-kill-process</code> from my Emacs  <a href="https://github.com/xenodium/dotsies">config</a> to  <a href="https://github.com/xenodium/dwim-shell-command/blob/main/dwim-shell-commands.el">dwim-shell-commands.el</a>. A few advantages:
</p>

 <ul class="org-ul"> <li>Killing processes is now async.</li>
 <li>Should anything go wrong, an error message is now accessible.</li>
 <li>You can easily install via  <a href="https://melpa.org/#/dwim-shell-command">MELPA</a>.</li>
</ul> <p>
If you prefer the previous version (without a dependency on  <a href="https://github.com/xenodium/dwim-shell-command">dwim-shell-command</a>), have a look at the  <a href="https://github.com/xenodium/dotsies/commit/eac4f892eab7a80740ee8ce0c727381886442fb6">initial commit</a>.
</p>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/emacs-quick-kill-process</link>
  <guid isPermaLink="false">http://xenodium.com/emacs-quick-kill-process</guid>
  <pubDate>Sun, 13 Nov 2022 00:00:00 +0000</pubDate>
</item>
<item>
  <title>Hey Emacs, change the default macOS app for...</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-hey-emacs-change-the-default-macos-app-for" class="outline-2">
 <h2 id="hey-emacs-change-the-default-macos-app-for"> <span class="timestamp-wrapper"> <span class="timestamp">06 November 2022</span></span> Hey Emacs, change the default macOS app for…</h2>
 <div class="outline-text-2" id="text-hey-emacs-change-the-default-macos-app-for">
 <p>
A few weeks ago, I  <a href="https://xenodium.com/emacs-open-with-macos-app/">added an "open with"</a> command to  <a href="https://github.com/xenodium/dwim-shell-command/blob/main/dwim-shell-commands.el">dwim-shell-commands.el</a>. It's pretty handy for opening files using an external app (ie. not Emacs) other than the default macOS one.
</p>

 <p>
 <code>dwim-shell-commands-macos-open-with</code> and  <code>dwim-shell-commands-open-externally</code> are typically enough for me to handle opening files outside of Emacs. But every now and then I'd like to change the default macOS app associated with specific file types. Now this isn't particularly challenging in macOS, but it does require a little navigating to get to the right place to change this default setting.
</p>

 <p>
Back in March 2020, I  <a href="https://twitter.com/xenodium/status/1242879439932923909">tweeted</a> about  <a href="https://github.com/moretension/duti">duti</a>: a command-line utility capable of setting default applications for various document types on macOS. While I liked the ability to change default apps from the command-line, the habit never quite stuck.
</p>

 <p>
Fast forward to 2022. I've been revisiting lots of my command-line usages (specially those that never stuck) and making them more accessible from Emacs via  <a href="https://github.com/xenodium/dwim-shell-command">dwim-shell-command</a>. I seldom change default apps on macOS, so my brain forgets about  <code>duti</code> itself, let alone its arguments, order, etc. But with a dwim shell command like  <code>dwim-shell-commands-macos-set-default-app</code>, I can easily invoke the command via  <a href="https://github.com/abo-abo/swiper">swiper</a>'s  <code>counsel-M-x</code> fuzzy terms:  <i>"dwim set"</i>.
</p>


 <div id="org7862b6f" class="figure">
 <p> <img src="../images/hey-emacs-change-the-default-macos-app-for/set-default_x1.3.webp" alt="set-default_x1.3.webp" width="95%" height="95%"></img></p>
</div>

 <p>
As an added bonus, I get to reuse  <code>dwim-shell-commands--macos-apps</code> from "open with" to quickly pick the new default app, making the whole experience pretty snappy.
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">dwim-shell-commands-macos-set-default-app</span> ()
   <span style="color: #183691;">"Set default app for file(s)."</span>
  (<span style="color: #a71d5d;">interactive</span>)
  (<span style="color: #a71d5d;">let*</span> ((apps (dwim-shell-commands-macos-apps))
         (selection (<span style="color: #a71d5d;">progn</span>
                      (<span style="color: #333333;">cl-assert</span> apps nil  <span style="color: #183691;">"No apps found"</span>)
                      (completing-read  <span style="color: #183691;">"Set default app: "</span> apps nil t))))
    (dwim-shell-command-on-marked-files
      <span style="color: #183691;">"Set default app"</span>
     (format  <span style="color: #183691;">"duti -s \"%s\" '</span> <span style="color: #0086b3;"><<e>></span> <span style="color: #183691;">' all"</span>
             (string-trim
              (shell-command-to-string (format  <span style="color: #183691;">"defaults read '</span> <span style="color: #0086b3;">%s/Contents/Info.plist</span> <span style="color: #183691;">' CFBundleIdentifier"</span>
                                               (map-elt apps selection)))))
      <span style="color: #a71d5d;">:silent-success</span> t
      <span style="color: #a71d5d;">:no-progress</span> t
      <span style="color: #a71d5d;">:utils</span>  <span style="color: #183691;">"duti"</span>)))

(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">dwim-shell-commands--macos-apps</span> ()
   <span style="color: #183691;">"Return alist of macOS apps (\"Emacs\" . \"/Applications/Emacs.app\")."</span>
  (mapcar (<span style="color: #a71d5d;">lambda</span> (path)
            (cons (file-name-base path) path))
          (seq-sort
           #'string-lessp
           (seq-mapcat (<span style="color: #a71d5d;">lambda</span> (paths)
                         (directory-files-recursively
                          paths  <span style="color: #183691;">"\\.app$"</span> t (<span style="color: #a71d5d;">lambda</span> (path)
                                             (not (string-suffix-p  <span style="color: #183691;">".app"</span> path)))))
                       '(<span style="color: #183691;">"/Applications"</span>  <span style="color: #183691;">"~/Applications"</span>  <span style="color: #183691;">"/System/Applications"</span>)))))
</pre>
</div>

 <p>
As usual, I've added  <code>dwim-shell-commands-macos-set-default-app</code> to  <a href="https://github.com/xenodium/dwim-shell-command/blob/main/dwim-shell-commands.el">dwim-shell-commands.el</a>, which you can install via  <a href="https://melpa.org/#/dwim-shell-command">MELPA</a>.
</p>

 <p>
Did you find this tiny integration useful? Check out  <a href="https://xenodium.com/hey-emacs-where-did-i-take-that-photo/">Hey Emacs, where did I take that photo?</a>
</p>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/hey-emacs-change-the-default-macos-app-for</link>
  <guid isPermaLink="false">http://xenodium.com/hey-emacs-change-the-default-macos-app-for</guid>
  <pubDate>Sun, 06 Nov 2022 00:00:00 +0000</pubDate>
</item>
<item>
  <title>Hey Emacs, where did I take that photo?</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-hey-emacs-where-did-i-take-that-photo" class="outline-2">
 <h2 id="hey-emacs-where-did-i-take-that-photo"> <span class="timestamp-wrapper"> <span class="timestamp">02 November 2022</span></span> Hey Emacs, where did I take that photo?</h2>
 <div class="outline-text-2" id="text-hey-emacs-where-did-i-take-that-photo">
 <p>
I was recently browsing through an old archive of holiday photos (from  <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Dired.html">dired</a> of course). I wanted to know where the photo was taken, which got me interested in extracting  <a href="https://en.wikipedia.org/wiki/Exif">Exif</a> metadata.
</p>

 <p>
Luckily the  <a href="https://exiftool.org/">exiftool</a> command line utility does the heavy lifting when it comes to extracting metadata. Since I want it quickly accessible from Emacs (in either dired or current buffer), a tiny elisp snippet would give me just that (via  <a href="https://github.com/xenodium/dwim-shell-command">dwim-shell-command</a>).
</p>


 <div id="org721823e" class="figure">
 <p> <img src="../images/hey-emacs-where-did-i-take-that-photo/dwim-exif_x1.3.webp" alt="dwim-exif_x1.3.webp" width="95%" height="95%"></img></p>
</div>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">dwim-shell-commands-image-exif-metadata</span> ()
   <span style="color: #183691;">"View EXIF metadata in image(s)."</span>
  (<span style="color: #a71d5d;">interactive</span>)
  (dwim-shell-command-on-marked-files
    <span style="color: #183691;">"View EXIF"</span>
    <span style="color: #183691;">"exiftool '</span> <span style="color: #0086b3;"><<f>></span> <span style="color: #183691;">'"</span>
    <span style="color: #a71d5d;">:utils</span>  <span style="color: #183691;">"exiftool"</span>))
</pre>
</div>

 <p>
The above makes all Exif metadata easily accessible, including the photo's GPS coordinates. But I haven’t quite answered the original question. Where did I take the photo? I now know the coordinates, but I can’t realistically deduce neither the country nor city unless I  <i>manually</i> feed these values to a reverse geocoding service like  <a href="https://www.openstreetmap.org/">OpenStreetMap</a>.  <i>Manually</i> you say? This is Emacs, so we can throw more elisp glue at the problem, mixed in with a little shell script, and presto! We've now automated the process of extracting metadata, reverse geocoding, and displaying the photo's address in the minibuffer. Pretty nifty.
</p>


 <div id="org76619f4" class="figure">
 <p> <img src="../images/hey-emacs-where-did-i-take-that-photo/minibuffer-address_x1.3.webp" alt="minibuffer-address_x1.3.webp" width="95%" height="95%"></img></p>
</div>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">dwim-shell-commands-image-reverse-geocode-location</span> ()
   <span style="color: #183691;">"Reverse geocode image(s) location."</span>
  (<span style="color: #a71d5d;">interactive</span>)
  (dwim-shell-command-on-marked-files
    <span style="color: #183691;">"Reverse geocode"</span>
    <span style="color: #183691;">"lat=\"$(exiftool -csv -n -gpslatitude -gpslongitude '</span> <span style="color: #0086b3;"><<f>></span> <span style="color: #183691;">' | tail -n 1 | cut -s -d',' -f2-2)\"</span>
 <span style="color: #183691;">    if [ -z \"$lat\" ]; then</span>
 <span style="color: #183691;">      echo \"no latitude\"</span>
 <span style="color: #183691;">      exit 1</span>
 <span style="color: #183691;">    fi</span>
 <span style="color: #183691;">    lon=\"$(exiftool -csv -n -gpslatitude -gpslongitude '</span> <span style="color: #0086b3;"><<f>></span> <span style="color: #183691;">' | tail -n 1 | cut -s -d',' -f3-3)\"</span>
 <span style="color: #183691;">    if [ -z \"$lon\" ]; then</span>
 <span style="color: #183691;">      echo \"no longitude\"</span>
 <span style="color: #183691;">      exit 1</span>
 <span style="color: #183691;">    fi</span>
 <span style="color: #183691;">    json=$(curl \"https://nominatim.openstreetmap.org/reverse?format=json&accept-language=en&lat=${lat}&lon=${lon}&zoom=18&addressdetails=1\")</span>
 <span style="color: #183691;">    echo \"json_start $json json_end\""</span>
    <span style="color: #a71d5d;">:utils</span> '(<span style="color: #183691;">"exiftool"</span>  <span style="color: #183691;">"curl"</span>)
    <span style="color: #a71d5d;">:silent-success</span> t
    <span style="color: #a71d5d;">:error-autofocus</span> t
    <span style="color: #a71d5d;">:on-completion</span>
   (<span style="color: #a71d5d;">lambda</span> (buffer)
     (<span style="color: #a71d5d;">with-current-buffer</span> buffer
       (goto-char (point-min))
       (<span style="color: #a71d5d;">let</span> ((matches '()))
         (<span style="color: #a71d5d;">while</span> (re-search-forward  <span style="color: #183691;">"^json_start</span> <span style="color: #969896;">\\</span> <span style="color: #a71d5d;">(</span> <span style="color: #183691;">.*?</span> <span style="color: #969896;">\\</span> <span style="color: #a71d5d;">)</span> <span style="color: #183691;">json_end"</span> nil t)
           (<span style="color: #a71d5d;">push</span> (match-string 1) matches))
         (message  <span style="color: #183691;">"%s"</span> (string-join (seq-map (<span style="color: #a71d5d;">lambda</span> (json)
                                               (map-elt (json-parse-string json  <span style="color: #a71d5d;">:object-type</span> 'alist) 'display_name))
                                             matches)
                                     <span style="color: #183691;">"\n"</span>)))
       (kill-buffer buffer)))))
</pre>
</div>

 <p>
Displaying the photo's address in the minibuffer is indeed pretty nifty, but what if I’d like to drop a pin in a map for further exploration? This is actually simpler, as there's no need for reverse geocoding. Following a similar recipe, we merely construct an  <a href="https://www.openstreetmap.org/">OpenStreetMap</a> URL and open it in our favourite browser.
</p>


 <div id="orgb9d3c3f" class="figure">
 <p> <img src="../images/hey-emacs-where-did-i-take-that-photo/photo-map_x1.4.webp" alt="photo-map_x1.4.webp" width="95%" height="95%"></img></p>
</div>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">dwim-shell-commands-image-browse-location</span> ()
   <span style="color: #183691;">"Open image(s) location in browser."</span>
  (<span style="color: #a71d5d;">interactive</span>)
  (dwim-shell-command-on-marked-files
    <span style="color: #183691;">"Browse location"</span>
    <span style="color: #183691;">"lat=\"$(exiftool -csv -n -gpslatitude -gpslongitude '</span> <span style="color: #0086b3;"><<f>></span> <span style="color: #183691;">' | tail -n 1 | cut -s -d',' -f2-2)\"</span>
 <span style="color: #183691;">    if [ -z \"$lat\" ]; then</span>
 <span style="color: #183691;">      echo \"no latitude\"</span>
 <span style="color: #183691;">      exit 1</span>
 <span style="color: #183691;">    fi</span>
 <span style="color: #183691;">    lon=\"$(exiftool -csv -n -gpslatitude -gpslongitude '</span> <span style="color: #0086b3;"><<f>></span> <span style="color: #183691;">' | tail -n 1 | cut -s -d',' -f3-3)\"</span>
 <span style="color: #183691;">    if [ -z \"$lon\" ]; then</span>
 <span style="color: #183691;">      echo \"no longitude\"</span>
 <span style="color: #183691;">      exit 1</span>
 <span style="color: #183691;">    fi</span>
 <span style="color: #183691;">    if [[ $OSTYPE == darwin* ]]; then</span>
 <span style="color: #183691;">      open \"http://www.openstreetmap.org/?mlat=${lat}&mlon=${lon}&layers=C\"</span>
 <span style="color: #183691;">    else</span>
 <span style="color: #183691;">      xdg-open \"http://www.openstreetmap.org/?mlat=${lat}&mlon=${lon}&layers=C\"</span>
 <span style="color: #183691;">    fi"</span>
    <span style="color: #a71d5d;">:utils</span>  <span style="color: #183691;">"exiftool"</span>
    <span style="color: #a71d5d;">:error-autofocus</span> t
    <span style="color: #a71d5d;">:silent-success</span> t))
</pre>
</div>

 <p>
Got suggestions? Improvements? All three functions are now included in  <a href="https://github.com/xenodium/dwim-shell-command/blob/main/dwim-shell-commands.el">dwim-shell-commands.el</a> as part of  <a href="https://github.com/xenodium/dwim-shell-command">dwim-shell-command</a>. Pull requests totally welcome ;)
</p>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/hey-emacs-where-did-i-take-that-photo</link>
  <guid isPermaLink="false">http://xenodium.com/hey-emacs-where-did-i-take-that-photo</guid>
  <pubDate>Wed, 02 Nov 2022 00:00:00 +0000</pubDate>
</item>
<item>
  <title>Emacs: A welcoming experiment</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-emacs-a-welcoming-experiment" class="outline-2">
 <h2 id="emacs-a-welcoming-experiment"> <span class="timestamp-wrapper"> <span class="timestamp">24 October 2022</span></span> Emacs: A welcoming experiment</h2>
 <div class="outline-text-2" id="text-emacs-a-welcoming-experiment">
 <p>
The  <code>*scratch*</code> buffer is the first thing I see when I launch an Emacs session. Coupled with  <a href="https://github.com/Fanael/persistent-scratch">persistent-scratch</a>, it's served me well over the years. I gotta say though, my scratch buffer accumulates random bits and often becomes a little messy. It's not the most visually appealing landing buffer when launching Emacs. But who cares, I'm only a  <code>C-x b</code> binding away from invoking  <code>ivy-switch-buffer</code> to get me wherever I need to be. It's powered by  <code>ivy-use-virtual-buffers</code>, which remembers recent files across sessions.
</p>

 <p>
Having said all of this, I recently ran into u/pearcidar43's  <a href="https://www.reddit.com/r/unixporn/comments/yamj5f/exwm_emacs_is_kinda_comfy_as_a_wm/">post</a> showcasing a wonderful Emacs banner. Lucky for us, they  <a href="https://www.reddit.com/r/unixporn/comments/yamj5f/comment/itfusm0/?utm_source=share&utm_medium=web2x&context=3">shared</a> the  <a href="https://github.com/TanbinIslam43/mydotfiles/blob/main/.doom.d/emacs.png">image</a>, so I got curious about building a minimal welcome buffer of sorts. Nothing fancy, the only requirements being to load quickly and enable me to get on with my  <code>C-x b</code> ritual. Throw in a little bonus to exit quickly by pressing just  <code>q</code> if I so desire.
</p>


 <div id="org32256d0" class="figure">
 <p> <img src="../images/emacs-a-welcoming-experiment/welcome-minimal_x0.5.webp" alt="welcome-minimal_x0.5.webp" width="95%" height="95%"></img></p>
</div>

 <p>
I didn't know a whole lot on how to go about it, so I took a peak at  <a href="https://github.com/emacs-dashboard/emacs-dashboard">emacs-dashboard</a> for inspiration. Turns out, I needed little code to get
the desired effect in my  <code>early-init.el</code>:
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">ar/show-welcome-buffer</span> ()
   <span style="color: #183691;">"Show *Welcome* buffer."</span>
  (<span style="color: #a71d5d;">with-current-buffer</span> (get-buffer-create  <span style="color: #183691;">"*Welcome*"</span>)
    (<span style="color: #a71d5d;">setq</span> truncate-lines t)
    (<span style="color: #a71d5d;">let*</span> ((buffer-read-only)
           (image-path  <span style="color: #183691;">"~/.emacs.d/emacs.png"</span>)
           (image (create-image image-path))
           (size (image-size image))
           (height (cdr size))
           (width (car size))
           (top-margin (floor (/ (- (window-height) height) 2)))
           (left-margin (floor (/ (- (window-width) width) 2)))
           (prompt-title  <span style="color: #183691;">"Welcome to Emacs!"</span>))
      (erase-buffer)
      (<span style="color: #a71d5d;">setq</span> mode-line-format nil)
      (goto-char (point-min))
      (insert (make-string top-margin ?\n ))
      (insert (make-string left-margin ?\ ))
      (insert-image image)
      (insert  <span style="color: #183691;">"\n\n\n"</span>)
      (insert (make-string (floor (/ (- (window-width) (string-width prompt-title)) 2)) ?\ ))
      (insert prompt-title))
    (<span style="color: #a71d5d;">setq</span> cursor-type nil)
    (read-only-mode +1)
    (switch-to-buffer (current-buffer))
    (local-set-key (kbd  <span style="color: #183691;">"q"</span>) 'kill-this-buffer)))

(<span style="color: #a71d5d;">setq</span> initial-scratch-message nil)
(<span style="color: #a71d5d;">setq</span> inhibit-startup-screen t)

(<span style="color: #a71d5d;">when</span> (< (length command-line-args) 2)
  (add-hook 'emacs-startup-hook (<span style="color: #a71d5d;">lambda</span> ()
                                  (<span style="color: #a71d5d;">when</span> (display-graphic-p)
                                    (ar/show-welcome-buffer)))))
</pre>
</div>

 <p>
This being Emacs, I can bend it as far as needed. In my case, I didn't need much, so I can probably stop here. It was a fun experiment. I'll even  <a href="https://github.com/xenodium/dotsies/commit/90c689def913a9bccdd408ef609c7f99a5cce1fb">try using it</a> for a little while and see if it sticks. I'm sure there's plenty more that could be handled (edge cases, resizes, etc.), but if you want something more established, consider something like  <a href="https://github.com/emacs-dashboard/emacs-dashboard">emacs-dashboard</a> instead. I haven't used it myself, but is  <a href="https://melpa.org/#/dashboard">pretty popular</a>.
</p>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/emacs-a-welcoming-experiment</link>
  <guid isPermaLink="false">http://xenodium.com/emacs-a-welcoming-experiment</guid>
  <pubDate>Mon, 24 Oct 2022 00:00:00 +0100</pubDate>
</item>
<item>
  <title>Emacs: Open with macOS app</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-emacs-open-with-macos-app" class="outline-2">
 <h2 id="emacs-open-with-macos-app"> <span class="timestamp-wrapper"> <span class="timestamp">14 October 2022</span></span> Emacs: Open with macOS app</h2>
 <div class="outline-text-2" id="text-emacs-open-with-macos-app">
 <p>
On a recent Reddit  <a href="https://www.reddit.com/r/emacs/comments/y2dfma/comment/is4ygl8/?utm_source=share&utm_medium=web2x&context=3">comment</a>, tdstoff7 asked if I had considered writing an "Open with" DWIM shell command for those times one would like to open a file externally using an app other than the default. I hadn't, but nice idea.
</p>

 <p>
Take images as an example. Though Emacs can display them quickly, I also open images externally using the default app ( <a href="https://en.wikipedia.org/wiki/Preview_(macOS)">Preview</a> in my case). But then there are those times when I'd like to open with a different app for editing (maybe something like GIMP). It'd be nice to quickly choose which app to open with.
</p>


 <div id="org8d7641c" class="figure">
 <p> <img src="../images/emacs-open-with-macos-app/open-with_x2.webp" alt="open-with_x2.webp" width="80%" height="80%"></img></p>
</div>

 <p>
There isn't much to the code. Get a list of apps, ask user to pick one (via  <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Programmed-Completion.html">completing-read</a>), and launch the external app via  <code>dwim-shell-command-on-marked-files</code>.
</p>

 <p>
There's likely a better way of getting a list of available apps (happy to take suggestions), but searching in "/Applications" "~/Applications" and "/System/Applications" does the job for now.
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">dwim-shell-commands-macos-open-with</span> ()
   <span style="color: #183691;">"Convert all marked images to jpg(s)."</span>
  (<span style="color: #a71d5d;">interactive</span>)
  (<span style="color: #a71d5d;">let*</span> ((apps (seq-sort
                #'string-lessp
                (seq-mapcat (<span style="color: #a71d5d;">lambda</span> (paths)
                              (directory-files-recursively
                               paths  <span style="color: #183691;">"\\.app$"</span> t (<span style="color: #a71d5d;">lambda</span> (path)
                                                  (not (string-suffix-p  <span style="color: #183691;">".app"</span> path)))))
                            '(<span style="color: #183691;">"/Applications"</span>  <span style="color: #183691;">"~/Applications"</span>  <span style="color: #183691;">"/System/Applications"</span>))))
         (selection (<span style="color: #a71d5d;">progn</span>
                      (<span style="color: #333333;">cl-assert</span> apps nil  <span style="color: #183691;">"No apps found"</span>)
                      (completing-read  <span style="color: #183691;">"Open with: "</span>
                                       (mapcar (<span style="color: #a71d5d;">lambda</span> (path)
                                                 (propertize (file-name-base path) 'path path))
                                               apps)))))
    (dwim-shell-command-on-marked-files
      <span style="color: #183691;">"Open with"</span>
     (format  <span style="color: #183691;">"open -a '</span> <span style="color: #0086b3;">%s</span> <span style="color: #183691;">' '</span> <span style="color: #0086b3;"><<*>></span> <span style="color: #183691;">'"</span> (get-text-property 0 'path selection))
      <span style="color: #a71d5d;">:silent-success</span> t
      <span style="color: #a71d5d;">:no-progress</span> t
      <span style="color: #a71d5d;">:utils</span>  <span style="color: #183691;">"open"</span>)))
</pre>
</div>

 <p>
 <code>dwim-shell-commands-macos-open-with</code> is now included in  <a href="https://github.com/xenodium/dwim-shell-command">dwim-shell-command</a>, available on  <a href="https://melpa.org/#/dwim-shell-command">melpa</a>. What other uses can you find for it?
</p>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/emacs-open-with-macos-app</link>
  <guid isPermaLink="false">http://xenodium.com/emacs-open-with-macos-app</guid>
  <pubDate>Fri, 14 Oct 2022 00:00:00 +0100</pubDate>
</item>
<item>
  <title>Emacs: macOS sharing (DWIM style)</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-emacs-macos-share-from-dired-dwim-style" class="outline-2">
 <h2 id="emacs-macos-share-from-dired-dwim-style"> <span class="timestamp-wrapper"> <span class="timestamp">12 October 2022</span></span> Emacs: macOS sharing (DWIM style)</h2>
 <div class="outline-text-2" id="text-emacs-macos-share-from-dired-dwim-style">
 <p>
UPDATE: See an improved implementation  <a href="https://xenodium.com/emacs-macos-sharing-dwim-style-improved">here</a>.
</p>

 <p>
A few days ago,  <a href="https://xenodium.com/emacs-reveal-in-finder-dwim-style/">I wrote dwim-shell-commands-macos-reveal-in-finder</a>. While I've written a bunch of other  <a href="https://github.com/xenodium/dwim-shell-command/blob/main/dwim-shell-commands.el">dwim-shell-commands</a>, what set this case apart was the use of  <a href="https://www.swift.org/">Swift</a> to glue an Emacs workflow.
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">dwim-shell-commands-macos-reveal-in-finder</span> ()
   <span style="color: #183691;">"Reveal selected files in macOS Finder."</span>
  (<span style="color: #a71d5d;">interactive</span>)
  (dwim-shell-command-on-marked-files
    <span style="color: #183691;">"Reveal in Finder"</span>
    <span style="color: #183691;">"import AppKit</span>
 <span style="color: #183691;">    NSWorkspace.shared.activateFileViewerSelecting([\"<<*>>\"].map{URL(fileURLWithPath:$0)})"</span>
    <span style="color: #a71d5d;">:join-separator</span>  <span style="color: #183691;">", "</span>
    <span style="color: #a71d5d;">:silent-success</span> t
    <span style="color: #a71d5d;">:shell-pipe</span>  <span style="color: #183691;">"swift -"</span>))
</pre>
</div>

 <p>
There is hardly any Swift involved, yet it scratched a real itch I couldn't otherwise reach (reveal multiple dired files in macOS's  <a href="https://en.wikipedia.org/wiki/Finder_(software)">Finder</a>).
</p>

 <p>
divinedominion's  <a href="https://www.reddit.com/r/emacs/comments/xzt3gx/comment/irrwoya/?utm_source=share&utm_medium=web2x&context=3">reddit comment</a> got me thinking of other use-cases, so I figured why not push this Swift-elisp beeswax a little further… Let's add macOS's sharing ability via  <a href="https://github.com/xenodium/dwim-shell-command">dwim-shell-command</a>, so I could invoke it from the comfort of my beloved  <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Dired.html">dired</a> or any 'ol Emacs buffer visiting a file.
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">dwim-shell-commands-macos-share</span> ()
   <span style="color: #183691;">"Share selected files from macOS."</span>
  (<span style="color: #a71d5d;">interactive</span>)
  (<span style="color: #a71d5d;">let*</span> ((position (window-absolute-pixel-position))
         (x (car position))
         (y (- (x-display-pixel-height)
               (cdr position))))
    (dwim-shell-command-on-marked-files
      <span style="color: #183691;">"Share"</span>
     (format
       <span style="color: #183691;">"import AppKit</span>

 <span style="color: #183691;">       _ = NSApplication.shared</span>

 <span style="color: #183691;">       NSApp.setActivationPolicy(.regular)</span>

 <span style="color: #183691;">       let window = InvisibleWindow(</span>
 <span style="color: #183691;">         contentRect: NSRect(x: %d, y: %s, width: 0, height: 0),</span>
 <span style="color: #183691;">         styleMask: [],</span>
 <span style="color: #183691;">         backing: .buffered,</span>
 <span style="color: #183691;">         defer: false)</span>

 <span style="color: #183691;">       NSApp.activate(ignoringOtherApps: true)</span>

 <span style="color: #183691;">       DispatchQueue.main.async {</span>
 <span style="color: #183691;">         let picker = NSSharingServicePicker(items: [\"<<*>>\"].map{URL(fileURLWithPath:$0)})</span>
 <span style="color: #183691;">         picker.delegate = window</span>
 <span style="color: #183691;">         picker.show(</span>
 <span style="color: #183691;">           relativeTo: .zero, of: window.contentView!, preferredEdge: .minY)</span>
 <span style="color: #183691;">       }</span>

 <span style="color: #183691;">       NSApp.run()</span>

 <span style="color: #183691;">       class InvisibleWindow: NSWindow, NSSharingServicePickerDelegate, NSSharingServiceDelegate {</span>
 <span style="color: #183691;">         func sharingServicePicker(</span>
 <span style="color: #183691;">           _ sharingServicePicker: NSSharingServicePicker, didChoose service: NSSharingService?</span>
 <span style="color: #183691;">         ) {</span>
 <span style="color: #183691;">           if service == nil {</span>
 <span style="color: #183691;">             print(\"Cancelled\")</span>

 <span style="color: #183691;">             // Delay so \"More...\" menu can launch System Preferences</span>
 <span style="color: #183691;">             DispatchQueue.main.asyncAfter(deadline: .now() + 0.1) {</span>
 <span style="color: #183691;">               NSApplication.shared.terminate(nil)</span>
 <span style="color: #183691;">             }</span>
 <span style="color: #183691;">           }</span>
 <span style="color: #183691;">         }</span>

 <span style="color: #183691;">         func sharingServicePicker(</span>
 <span style="color: #183691;">           _ sharingServicePicker: NSSharingServicePicker,</span>
 <span style="color: #183691;">           delegateFor sharingService: NSSharingService</span>
 <span style="color: #183691;">         ) -> NSSharingServiceDelegate? {</span>
 <span style="color: #183691;">           return self</span>
 <span style="color: #183691;">         }</span>

 <span style="color: #183691;">         func sharingService(</span>
 <span style="color: #183691;">           _ sharingService: NSSharingService,</span>
 <span style="color: #183691;">           didShareItems items: [Any]</span>
 <span style="color: #183691;">         ) {</span>
 <span style="color: #183691;">           NSApplication.shared.terminate(nil)</span>
 <span style="color: #183691;">         }</span>

 <span style="color: #183691;">         func sharingService(</span>
 <span style="color: #183691;">           _ sharingService: NSSharingService, didFailToShareItems items: [Any], error: Error</span>
 <span style="color: #183691;">         ) {</span>
 <span style="color: #183691;">           let error = error as NSError</span>
 <span style="color: #183691;">           if error.domain == NSCocoaErrorDomain && error.code == NSUserCancelledError {</span>
 <span style="color: #183691;">             NSApplication.shared.terminate(nil)</span>
 <span style="color: #183691;">           }</span>
 <span style="color: #183691;">           exit(1)</span>
 <span style="color: #183691;">         }</span>
 <span style="color: #183691;">       }"</span> x y)
      <span style="color: #a71d5d;">:silent-success</span> t
      <span style="color: #a71d5d;">:shell-pipe</span>  <span style="color: #183691;">"swift -"</span>
      <span style="color: #a71d5d;">:join-separator</span>  <span style="color: #183691;">", "</span>
      <span style="color: #a71d5d;">:no-progress</span> t
      <span style="color: #a71d5d;">:utils</span>  <span style="color: #183691;">"swift"</span>)))
</pre>
</div>

 <p>
Sure there is some trickery involved here (like creating an invisible macOS window to anchor the menu), but hey the results are surprisingly usable. Take a look…
</p>


 <div id="org66f0db8" class="figure">
 <p> <img src="../images/emacs-macos-share-from-dired-dwim-style/share-done_x1.4.webp" alt="share-done_x1.4.webp" width="80%" height="80%"></img></p>
</div>

 <p>
I've pushed  <code>dwim-shell-commands-macos-share</code> to  <a href="https://github.com/xenodium/dwim-shell-command/blob/919817520fa507dd3c7e6859eb982976e28b2575/dwim-shell-commands.el#L370">dwim-shell-commands.el</a> in case you'd like to give it a try. It's very much an experiment of sorts, so please treat it as such. For now, I'm looking forward to AirDropping more files and seeing if the flow sticks. Oh, and I just realised I can use this to send files to iOS Simulators. Win.
</p>

 <p>
 <a href="https://github.com/xenodium/dwim-shell-command">dwim-shell-command</a> is available on  <a href="https://melpa.org/#/dwim-shell-command">melpa</a>. What other uses can you find for it?
</p>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/emacs-macos-share-from-dired-dwim-style</link>
  <guid isPermaLink="false">http://xenodium.com/emacs-macos-share-from-dired-dwim-style</guid>
  <pubDate>Wed, 12 Oct 2022 00:00:00 +0100</pubDate>
</item>
<item>
  <title>Improving on Emacs macOS sharing</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-emacs-macos-sharing-dwim-style-improved" class="outline-2">
 <h2 id="emacs-macos-sharing-dwim-style-improved"> <span class="timestamp-wrapper"> <span class="timestamp">12 October 2022</span></span> Improving on Emacs macOS sharing</h2>
 <div class="outline-text-2" id="text-emacs-macos-sharing-dwim-style-improved">
 <p>
A quick follow-up to  <a href="https://xenodium.com/emacs-macos-share-from-dired-dwim-style/">Emacs: macOS sharing (DWIM style)</a>… Though functional, the implementation had a couple of drawbacks.
</p>

 <p>
Tohiko  <a href="https://www.reddit.com/r/emacs/comments/y1tneh/comment/is0pgkf">noticed fullscreen wasn't working at all</a> while Calvin  <a href="https://lobste.rs/s/qga1px/emacs_macos_sharing_dwim_style#c_safiuw">proposed enumeration for tighter Emacs integration</a>.
</p>

 <p>
Calvin's suggestion enables using  <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Completion.html">completing-read</a> to pick the sharing service. This makes the integration feel more at home. As a bonus, it also enables sharing from fullscreen Emacs.
</p>

 <p>
As an  <a href="https://github.com/abo-abo/swiper">ivy</a> user, you can see a vertical list of sharing services.
</p>


 <div id="org5107441" class="figure">
 <p> <img src="../images/emacs-macos-sharing-dwim-style-improved/share-completing_x1.4.webp" alt="share-completing_x1.4.webp" width="80%" height="80%"></img></p>
</div>

 <p>
Here's the new snippet, now  <a href="https://github.com/xenodium/dwim-shell-command/commit/20e782b4bf1ea01fecfce3cc8ac4c5a74518cd80">pushed to dwim-shell-commands.el</a>:
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">dwim-shell-commands--macos-sharing-services</span> ()
   <span style="color: #183691;">"Return a list of sharing services."</span>
  (<span style="color: #a71d5d;">let*</span> ((source (format  <span style="color: #183691;">"import AppKit</span>
 <span style="color: #183691;">                         NSSharingService.sharingServices(forItems: [</span>
 <span style="color: #183691;">                           %s</span>
 <span style="color: #183691;">                         ]).forEach {</span>
 <span style="color: #183691;">                           print(\"</span> <span style="color: #969896;">\\</span> <span style="color: #a71d5d;">(</span> <span style="color: #183691;">$0.prompt-title)\")</span>
 <span style="color: #183691;">                         }"</span>
                         (string-join (mapcar (<span style="color: #a71d5d;">lambda</span> (file)
                                                (format  <span style="color: #183691;">"URL(fileURLWithPath: \"%s\")"</span> file))
                                              (dwim-shell-command--files))
                                       <span style="color: #183691;">", "</span>)))
         (services (split-string (string-trim (shell-command-to-string (format  <span style="color: #183691;">"echo '</span> <span style="color: #0086b3;">%s</span> <span style="color: #183691;">' | swift -"</span> source)))
                                  <span style="color: #183691;">"\n"</span>)))
    (<span style="color: #a71d5d;">when</span> (seq-empty-p services)
      (<span style="color: #333333;">error</span>  <span style="color: #183691;">"No sharing services available"</span>))
    services))

(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">dwim-shell-commands-macos-share</span> ()
   <span style="color: #183691;">"Share selected files from macOS."</span>
  (<span style="color: #a71d5d;">interactive</span>)
  (<span style="color: #a71d5d;">let*</span> ((services (dwim-shell-commands--macos-sharing-services))
         (service-name (completing-read  <span style="color: #183691;">"Share via: "</span> services))
         (selection (seq-position services service-name #'string-equal)))
    (dwim-shell-command-on-marked-files
      <span style="color: #183691;">"Share"</span>
     (format
       <span style="color: #183691;">"import AppKit</span>

 <span style="color: #183691;">       _ = NSApplication.shared</span>

 <span style="color: #183691;">       NSApp.setActivationPolicy(.regular)</span>

 <span style="color: #183691;">       class MyWindow: NSWindow, NSSharingServiceDelegate {</span>
 <span style="color: #183691;">         func sharingService(</span>
 <span style="color: #183691;">           _ sharingService: NSSharingService,</span>
 <span style="color: #183691;">           didShareItems items: [Any]</span>
 <span style="color: #183691;">         ) {</span>
 <span style="color: #183691;">           NSApplication.shared.terminate(nil)</span>
 <span style="color: #183691;">         }</span>

 <span style="color: #183691;">         func sharingService(</span>
 <span style="color: #183691;">           _ sharingService: NSSharingService, didFailToShareItems items: [Any], error: Error</span>
 <span style="color: #183691;">         ) {</span>
 <span style="color: #183691;">           let error = error as NSError</span>
 <span style="color: #183691;">           if error.domain == NSCocoaErrorDomain && error.code == NSUserCancelledError {</span>
 <span style="color: #183691;">             NSApplication.shared.terminate(nil)</span>
 <span style="color: #183691;">           }</span>
 <span style="color: #183691;">           exit(1)</span>
 <span style="color: #183691;">         }</span>
 <span style="color: #183691;">       }</span>

 <span style="color: #183691;">       let window = MyWindow(</span>
 <span style="color: #183691;">         contentRect: NSRect(x: 0, y: 0, width: 0, height: 0),</span>
 <span style="color: #183691;">         styleMask: [],</span>
 <span style="color: #183691;">         backing: .buffered,</span>
 <span style="color: #183691;">         defer: false)</span>

 <span style="color: #183691;">       let services = NSSharingService.sharingServices(forItems: [\"<<*>>\"].map{URL(fileURLWithPath:$0)})</span>
 <span style="color: #183691;">       let service = services[%s]</span>
 <span style="color: #183691;">       service.delegate = window</span>
 <span style="color: #183691;">       service.perform(withItems: [\"<<*>>\"].map{URL(fileURLWithPath:$0)})</span>

 <span style="color: #183691;">       NSApp.run()"</span> selection)
      <span style="color: #a71d5d;">:silent-success</span> t
      <span style="color: #a71d5d;">:shell-pipe</span>  <span style="color: #183691;">"swift -"</span>
      <span style="color: #a71d5d;">:join-separator</span>  <span style="color: #183691;">", "</span>
      <span style="color: #a71d5d;">:no-progress</span> t
      <span style="color: #a71d5d;">:utils</span>  <span style="color: #183691;">"swift"</span>)))
</pre>
</div>

 <p>
 <a href="https://github.com/xenodium/dwim-shell-command">dwim-shell-command</a> is available on  <a href="https://melpa.org/#/dwim-shell-command">melpa</a>. What other uses can you find for it?
</p>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/emacs-macos-sharing-dwim-style-improved</link>
  <guid isPermaLink="false">http://xenodium.com/emacs-macos-sharing-dwim-style-improved</guid>
  <pubDate>Wed, 12 Oct 2022 00:00:00 +0100</pubDate>
</item>
<item>
  <title>Emacs: Reveal in macOS Finder (DWIM style)</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-emacs-reveal-in-finder-dwim-style" class="outline-2">
 <h2 id="emacs-reveal-in-finder-dwim-style"> <span class="timestamp-wrapper"> <span class="timestamp">09 October 2022</span></span> Emacs: Reveal in macOS Finder (DWIM style)</h2>
 <div class="outline-text-2" id="text-emacs-reveal-in-finder-dwim-style">
 <p>
Just the other day,  <a href="https://github.com/gvoysey">Graham Voysey</a> filed an  <a href="https://github.com/xenodium/dwim-shell-command/issues/3">escaping bug</a> against  <a href="https://github.com/xenodium/dwim-shell-command">dwim-shell-command</a>. Once he verified the the fix, he also posted  <a href="https://github.com/xenodium/dwim-shell-command/issues/3#issuecomment-1272413459">two uses</a> of  <code>dwim-shell-command-on-marked-files</code>. I've made some small tweaks, but here's the gist of it:
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">dwim-shell-commands-feh-marked-files</span> ()
   <span style="color: #183691;">"View all marked files with feh."</span>
  (<span style="color: #a71d5d;">interactive</span>)
  (dwim-shell-command-on-marked-files
    <span style="color: #183691;">"View with feh"</span>
    <span style="color: #183691;">"feh --auto-zoom --scale-down '</span> <span style="color: #0086b3;"><<*>></span> <span style="color: #183691;">'"</span>
    <span style="color: #a71d5d;">:silent-success</span> t
    <span style="color: #a71d5d;">:utils</span>  <span style="color: #183691;">"feh"</span>))

(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">dwim-shell-commands-dragon-marked-files</span> ()
   <span style="color: #183691;">"Share all marked files with dragon."</span>
  (<span style="color: #a71d5d;">interactive</span>)
  (dwim-shell-command-on-marked-files
    <span style="color: #183691;">"View with dragon"</span>
    <span style="color: #183691;">"dragon --on-top '</span> <span style="color: #0086b3;"><<*>></span> <span style="color: #183691;">'"</span>
    <span style="color: #a71d5d;">:silent-success</span> t
    <span style="color: #a71d5d;">:utils</span>  <span style="color: #183691;">"dragon"</span>))
</pre>
</div>

 <p>
I love seeing what others get up to by using  <code>dwim-shell-command</code>. Are there new magical command-line utilities out there I don't know about? In this instance, I got to learn about  <a href="https://feh.finalrewind.org/">feh</a> and  <a href="https://github.com/mwh/dragon">dragon</a>.
</p>

 <p>
 <a href="https://feh.finalrewind.org/">feh</a> is a no-frills image viewer for console users while  <a href="https://github.com/mwh/dragon">dragon</a> is a simple drag-and-drop source/sink for X or Wayland. Both utilities are great uses of  <code>dwim-shell-command</code>, enabling a seamless transition from Emacs to the  <i>outside world</i>. These days I'm rarely on a linux box, so I was keen to ensure macOS had these cases covered.
</p>

 <p>
 <a href="https://en.wikipedia.org/wiki/Preview_(macOS)">Preview</a> is a solid macOS equivalent to  <a href="https://feh.finalrewind.org/">feh</a>.  <code>Preview</code> is already macOS's default image viewer. A simple  <code>open '<<f>>'</code> would do the job, but if we'd like to make this command more portable, we can accomodate as follows:
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">dwim-shell-commands-open-externally</span> ()
   <span style="color: #183691;">"Open file(s) externally."</span>
  (<span style="color: #a71d5d;">interactive</span>)
  (dwim-shell-command-on-marked-files
    <span style="color: #183691;">"Open externally"</span>
   (<span style="color: #a71d5d;">if</span> (eq system-type 'darwin)
        <span style="color: #183691;">"open '</span> <span style="color: #0086b3;"><<f>></span> <span style="color: #183691;">'"</span>
      <span style="color: #183691;">"xdg-open '</span> <span style="color: #0086b3;"><<f>></span> <span style="color: #183691;">'"</span>)
    <span style="color: #a71d5d;">:silent-success</span> t
    <span style="color: #a71d5d;">:utils</span>  <span style="color: #183691;">"open"</span>))
</pre>
</div>

 <p>
Special mention goes to Bozhidar Batsov's  <a href="https://github.com/bbatsov/crux">crux</a> which achieves similar functionality via  <code>crux-open-with</code>.  <a href="https://github.com/bbatsov/crux">crux</a> provides a bunch of other useful functions. Some of my favourites being  <code>crux-duplicate-current-line-or-region</code>,  <code>crux-transpose-windows</code>,  <code>crux-delete-file-and-buffer</code>, and  <code>crux-rename-buffer-and-file</code>, but I digress.
</p>

 <p>
Moving on to a  <a href="https://github.com/mwh/dragon">dragon</a> equivalent on macOS, I thought I had it covered via  <a href="https://github.com/kaz-yos/reveal-in-osx-finder">reveal-in-osx-finder</a> or  <a href="https://github.com/jcs-elpa/reveal-in-folder">reveal-in-folder</a>. Turns out, neither of these reveal multiple  <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Dired.html">dired</a>-selected files within  <a href="https://en.wikipedia.org/wiki/Finder_(software)">Finder</a>. At first, I thought this could be easily achieved by passing additional flags/params to macOS's  <code>open</code> command, but it doesn't seem to be the case. Having said that, this  <a href="https://stackoverflow.com/questions/7652928/launch-finder-window-with-specific-files-selected">Stack Overflow post</a>, has a solution in Objective-C, which is where things got a little more interesting. You see, back in July I  <a href="https://xenodium.com/emacs-dwim-shell-command-multi-language/">added multi-language support</a> to  <a href="https://xenodium.com/emacs-dwim-shell-command-multi-language/">dwim-shell-command</a> and while it highlighted language flexibility, I hadn't yet taken advantage of this feature myself. That is, until today.
</p>

 <p>
The Objective-C snippet from the Stack Overflow post can be written as a Swift one-liner. Ok I lie. It's actually two lines, counting the import, but you can see that this multi-language Emacs transition/integration is pretty easy to add.
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">dwim-shell-commands-macos-reveal-in-finder</span> ()
   <span style="color: #183691;">"Reveal selected files in macOS Finder."</span>
  (<span style="color: #a71d5d;">interactive</span>)
  (dwim-shell-command-on-marked-files
    <span style="color: #183691;">"Reveal in Finder"</span>
    <span style="color: #183691;">"import AppKit</span>
 <span style="color: #183691;">    NSWorkspace.shared.activateFileViewerSelecting([\"<<*>>\"].map{URL(fileURLWithPath:$0)})"</span>
    <span style="color: #a71d5d;">:join-separator</span>  <span style="color: #183691;">", "</span>
    <span style="color: #a71d5d;">:silent-success</span> t
    <span style="color: #a71d5d;">:shell-pipe</span>  <span style="color: #183691;">"swift -"</span>))
</pre>
</div>

 <p>
 <code><<*>></code> is the centrepiece of the snippet above. It gets instantiated with a list of files joined using the  <code>", "</code> separator.
</p>

 <div class="org-src-container">
 <pre class="src src-swift">NSWorkspace. <span style="color: #a71d5d;">shared</span>. <span style="color: #795da3;">activateFileViewerSelecting</span>([ <span style="color: #183691;">"/path/to/file1"</span>,  <span style="color: #183691;">"/path/to/file2"</span>]. <span style="color: #a71d5d;">map</span> {  <span style="color: #a71d5d;">URL</span>(fileURLWithPath: $0) })
</pre>
</div>

 <p>
The proof of the pudding is of course in the eating, so ummm let's show it in action:
</p>


 <div id="org56e6789" class="figure">
 <p> <img src="../images/emacs-reveal-in-finder-dwim-style/dwim-reveal.webp" alt="dwim-reveal.webp" width="80%" height="80%"></img></p>
</div>

 <p>
I should mention the webp animation above was also created using my trusty  <code>dwim-shell-commands-video-to-webp</code> also backed by  <a href="https://github.com/xenodium/dwim-shell-command">dwim-shell-command</a>.
</p>
 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">dwim-shell-commands-video-to-webp</span> ()
   <span style="color: #183691;">"Convert all marked videos to webp(s)."</span>
  (<span style="color: #a71d5d;">interactive</span>)
  (dwim-shell-command-on-marked-files
    <span style="color: #183691;">"Convert to webp"</span>
    <span style="color: #183691;">"ffmpeg -i '</span> <span style="color: #0086b3;"><<f>></span> <span style="color: #183691;">' -vcodec libwebp -filter:v fps=fps=10 -compression_level 3 -lossless 1 -loop 0 -preset default -an -vsync 0 '</span> <span style="color: #0086b3;"><<fne>></span> <span style="color: #183691;">'.webp"</span>
    <span style="color: #a71d5d;">:utils</span>  <span style="color: #183691;">"ffmpeg"</span>))
</pre>
</div>

 <p>
 <a href="https://github.com/xenodium/dwim-shell-command">dwim-shell-command</a> is available on  <a href="https://melpa.org/#/dwim-shell-command">melpa</a>. What other uses can you find for it?
</p>

 <p>
UPDATE: Most DWIM shell commands I use are available as part of  <a href="https://github.com/xenodium/dwim-shell-command/blob/main/dwim-shell-commands.el">dwim-shell-commands.el</a>. See  <code>dwim-shell-command</code>'s  <a href="https://github.com/xenodium/dwim-shell-command#install-command-line-utilities">install command line utilities</a>.
</p>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/emacs-reveal-in-finder-dwim-style</link>
  <guid isPermaLink="false">http://xenodium.com/emacs-reveal-in-finder-dwim-style</guid>
  <pubDate>Sun, 09 Oct 2022 00:00:00 +0100</pubDate>
</item>
<item>
  <title>dwim-shell-command usages: pdftotext and scp</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-dwim-shell-command-usages-pdftotext-and-scp" class="outline-2">
 <h2 id="dwim-shell-command-usages-pdftotext-and-scp"> <span class="timestamp-wrapper"> <span class="timestamp">01 October 2022</span></span> dwim-shell-command usages: pdftotext and scp</h2>
 <div class="outline-text-2" id="text-dwim-shell-command-usages-pdftotext-and-scp">
 <p>
 <a href="https://github.com/xenodium/dwim-shell-command">dwim-shell-command</a> is a little Emacs package I wrote to enable crafting more reusable shell commands. I intended to use it as an  <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Shell.html">async-shell-command</a> alternative (and I do these days). The more surprising win was bringing lots of command-line utilities (sometimes with complicated invocations) and making them quickly accessible. I no longer need to remember their respective parameters, order, flags, etc.
</p>

 <p>
I've migrated most  <a href="https://xenodium.com/emacs-password-protect-current-pdf-revisited/">one-liners</a> and  <a href="https://xenodium.com/png-to-icns-emacs-dwim-style/">scripts</a> I had to  <a href="https://github.com/xenodium/dwim-shell-command">dwim-shell-command</a> equivalents. They are available at  <a href="https://github.com/xenodium/dwim-shell-command/blob/main/dwim-shell-commands.el">dwim-shell-commands.el</a>. Having said that, it's great to discover new usages from  <code>dwim-shell-command</code> users.
</p>

 <p>
Take  <a href="https://www.reddit.com/user/TiMueller/">u/TiMueller</a>'s Reddit comment,  <a href="https://www.reddit.com/r/emacs/comments/w8s2ov/comment/iq7idav/?utm_source=share&utm_medium=web2x&context=3">showcasing pdftotext</a>. Neat utility I was unaware of. It does as it says on the tin and converts a pdf to text. Can be easily saved to your accessible repertoire with:
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">dwim-shell-commands-pdf-to-txt</span> ()
   <span style="color: #183691;">"Convert pdf to txt."</span>
  (<span style="color: #a71d5d;">interactive</span>)
  (dwim-shell-command-on-marked-files
    <span style="color: #183691;">"pdf to txt"</span>
    <span style="color: #183691;">"pdftotext -layout '</span> <span style="color: #0086b3;"><<f>></span> <span style="color: #183691;">' '</span> <span style="color: #0086b3;"><<fne>>.txt</span> <span style="color: #183691;">'"</span>
    <span style="color: #a71d5d;">:utils</span>  <span style="color: #183691;">"pdftotext"</span>))
</pre>
</div>


 <div id="org88f32db" class="figure">
 <p> <img src="../images/dwim-shell-command-usages-pdftotext-and-scp/pdf-to-txt_x2.webp" alt="pdf-to-txt_x2.webp" width="90%" height="90%"></img></p>
</div>

 <p>
 <a href="https://github.com/tareefdev">tareefdev</a> wanted a quick command to  <a href="https://linux.die.net/man/1/scp">secure copy</a> remote files to a local directory. Though this use-case is already covered by Tramp, I suspect a DWIM command would make it a little more convenient (async by default). However, Tramp paths aren't usable from the shell unless we massage them a little. We can use  <code>dwim-shell-command-on-marked-files</code>'s  <code>:post-process-template</code> to drop the "/ssh:" prefix.
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">dwim-shell-commands-copy-remote-to-downloads</span> ()
  (<span style="color: #a71d5d;">interactive</span>)
  (dwim-shell-command-on-marked-files
    <span style="color: #183691;">"Copy remote to local Downloads"</span>
    <span style="color: #183691;">"scp '</span> <span style="color: #0086b3;"><<f>></span> <span style="color: #183691;">' ~/Downloads/"</span>
    <span style="color: #a71d5d;">:utils</span>  <span style="color: #183691;">"scp"</span>
    <span style="color: #a71d5d;">:post-process-template</span>
   (<span style="color: #a71d5d;">lambda</span> (script file)
      <span style="color: #969896;">;; </span> <span style="color: #969896;">Tramp file path start with "/ssh:". Drop it.</span>
     (string-replace file
                     (string-remove-prefix  <span style="color: #183691;">"/ssh:"</span> file)
                     script))))
</pre>
</div>

 <p>
 <a href="https://github.com/xenodium/dwim-shell-command">dwim-shell-command</a> is available on  <a href="https://melpa.org/#/dwim-shell-command">MELPA</a> (531 downloads as of 2022-10-01).
</p>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/dwim-shell-command-usages-pdftotext-and-scp</link>
  <guid isPermaLink="false">http://xenodium.com/dwim-shell-command-usages-pdftotext-and-scp</guid>
  <pubDate>Sat, 01 Oct 2022 00:00:00 +0100</pubDate>
</item>
<item>
  <title>Plain Org v1.5 released</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-plain-org-v15-released" class="outline-2">
 <h2 id="plain-org-v15-released"> <span class="timestamp-wrapper"> <span class="timestamp">01 October 2022</span></span> Plain Org v1.5 released</h2>
 <div class="outline-text-2" id="text-plain-org-v15-released">
 <p>
If you haven't heard of  <a href="https://plainorg.com">Plain Org</a>, it gives you access to  <a href="https://orgmode.org">org</a> files on iOS while away from your beloved  <a href="https://www.gnu.org/software/emacs/">Emacs</a>.
</p>

 <p>
Hadn't had time to post, but v1.5 has been available on the  <a href="https://apps.apple.com/app/id1578965002">App Store</a> for a couple of weeks now. The update is mostly a bugfix release, primarily addressing inline editing issues that appeared on iOS 16, along with a few other changes:
</p>

 <ul class="org-ul"> <li>Render form feeds at end of headings at all times.</li>
 <li>Fixes new files not recognized by org-roam.</li>
 <li>Fixes share sheet saving from cold launch.</li>
 <li>Fixes inline editing on iOS 16.</li>
</ul> <div id="orgc12cb55" class="figure">
 <p> <img src="../images/plain-org-v15-released/po.png" alt="po.png" width="60%" height="60%"></img></p>
</div>

 <p>
I love org markup, but we (iPhone + org users) are a fairly niche bunch. If you're finding Plain Org useful,  <b>please help support this effort</b> by getting the word out. Tell your friends,  <a href="https://twitter.com/intent/tweet?text=Plain%20Org%20https%3A%2F%2Fapps.apple.com%2Fapp%2Fid1578965002%20">tweet</a>, or blog about it. Or just support via the  <a href="https://apps.apple.com/app/id1578965002">App Store</a> :)
</p>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/plain-org-v15-released</link>
  <guid isPermaLink="false">http://xenodium.com/plain-org-v15-released</guid>
  <pubDate>Sat, 01 Oct 2022 00:00:00 +0100</pubDate>
</item>
<item>
  <title>$ rm Important.txt (uh oh!)</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-rm-important-txt-oh-sht" class="outline-2">
 <h2 id="rm-important-txt-oh-sht"> <span class="timestamp-wrapper"> <span class="timestamp">17 September 2022</span></span> $ rm Important.txt (uh oh!)</h2>
 <div class="outline-text-2" id="text-rm-important-txt-oh-sht">
 <p>
Setting Emacs up to use your system trash can potentially save your bacon if you mistakenly delete a file, say from  <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Dired.html">dired</a>.
</p>

 <p>
Unsurprisingly, the trash safety net also extends to other Emacs areas. For example, discarding files from  <a href="https://magit.vc/">Magit</a> (via  <code>magit-discard</code>) becomes a recoverable operation. As an  <a href="https://www.gnu.org/software/emacs/manual/html_mono/eshell.html">eshell</a> user, the trash can also help you recover from  <code>rm</code> blunders.
</p>


 <div id="orgb0c197f" class="figure">
 <p> <img src="../images/rm-important-txt-oh-sht/recovered_x1.6.webp" alt="recovered_x1.6.webp" width="90%" height="90%"></img></p>
</div>

 <p>
You can enable macOS system trash in Emacs by setting  <code>trash-directory</code> along with defining  <code>system-move-file-to-trash</code>:
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">setq</span> trash-directory  <span style="color: #183691;">"~/.Trash"</span>)

 <span style="color: #969896;">;; </span> <span style="color: #969896;">See `</span> <span style="color: #0086b3;">trash-directory</span> <span style="color: #969896;">' as it requires defining `</span> <span style="color: #0086b3;">system-move-file-to-trash</span> <span style="color: #969896;">'.</span>
(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">system-move-file-to-trash</span> (file)
   <span style="color: #183691;">"Use \"trash\" to move FILE to the system trash."</span>
  (<span style="color: #333333;">cl-assert</span> (executable-find  <span style="color: #183691;">"trash"</span>) nil  <span style="color: #183691;">"'</span> <span style="color: #0086b3;">trash</span> <span style="color: #183691;">' must be installed. Needs \"brew install trash\""</span>)
  (call-process  <span style="color: #183691;">"trash"</span> nil 0 nil  <span style="color: #183691;">"-F"</span>  file))
</pre>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/rm-important-txt-oh-sht</link>
  <guid isPermaLink="false">http://xenodium.com/rm-important-txt-oh-sht</guid>
  <pubDate>Sat, 17 Sep 2022 00:00:00 +0100</pubDate>
</item>
<item>
  <title>Cycling through window layouts (revisited)</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-cycling-through-window-layout-revisited" class="outline-2">
 <h2 id="cycling-through-window-layout-revisited"> <span class="timestamp-wrapper"> <span class="timestamp">11 September 2022</span></span> Cycling through window layouts (revisited)</h2>
 <div class="outline-text-2" id="text-cycling-through-window-layout-revisited">
 <p>
Last year, I wrote a little script to  <a href="https://xenodium.com/cycling-window-layouts-via-hammerspoon">cycle through window layouts via Hammerspoon</a>. The cycling set I chose didn't stick, so here's another go.
</p>


 <div id="orge813c33" class="figure">
 <p> <img src="../images/cycling-through-window-layout-revisited/cycle_layout.webp" alt="cycle_layout.webp" width="90%" height="90%"></img></p>
</div>

 <div class="org-src-container">
 <pre class="src src-lua"> <span style="color: #a71d5d;">function</span>  <span style="color: #795da3;">reframeFocusedWindow</span>()
    <span style="color: #a71d5d;">local</span>  <span style="color: #333333;">win</span> = hs.window.focusedWindow()
    <span style="color: #a71d5d;">local</span>  <span style="color: #333333;">maximizedFrame</span> = win:screen():frame()
   maximizedFrame.x = maximizedFrame.x + 15
   maximizedFrame.y = maximizedFrame.y + 15
   maximizedFrame.w = maximizedFrame.w - 30
   maximizedFrame.h = maximizedFrame.h - 30

    <span style="color: #a71d5d;">local</span>  <span style="color: #333333;">leftFrame</span> = win:screen():frame()
   leftFrame.x = leftFrame.x + 15
   leftFrame.y = leftFrame.y + 15
   leftFrame.w = leftFrame.w / 2 - 15
   leftFrame.h = leftFrame.h - 30

    <span style="color: #a71d5d;">local</span>  <span style="color: #333333;">rightFrame</span> = win:screen():frame()
   rightFrame.x = rightFrame.w / 2
   rightFrame.y = rightFrame.y + 15
   rightFrame.w = rightFrame.w / 2 - 15
   rightFrame.h = rightFrame.h - 30

    <span style="color: #a71d5d;">if</span> win:frame() == maximizedFrame  <span style="color: #a71d5d;">then</span>
     win:setFrame(leftFrame)
      <span style="color: #a71d5d;">return</span>
    <span style="color: #a71d5d;">end</span>

    <span style="color: #a71d5d;">if</span> win:frame() == leftFrame  <span style="color: #a71d5d;">then</span>
     win:setFrame(rightFrame)
      <span style="color: #a71d5d;">return</span>
    <span style="color: #a71d5d;">end</span>

   win:setFrame(maximizedFrame)
 <span style="color: #a71d5d;">end</span>

hs.hotkey.bind({ <span style="color: #183691;">"alt"</span>},  <span style="color: #183691;">"F"</span>, reframeFocusedWindow)
</pre>
</div>

 <p>
Looping through layouts is done with a global key-binding of  <code>option f</code> or, if familiar with a macOS keyboard,  <code>⌥ f</code>.
</p>

 <p>
For those unfamiliar with  <a href="http://hammerspoon.org/">Hammerspoon</a>… If you're a tinkerer and a macOS user, you'd love  <a href="http://hammerspoon.org/">Hammerspoon</a>. Like elisp gluing all things Emacs, Hammerspoon uses Lua to glue all things macOS. For example, here's a stint at  <a href="https://xenodium.com/emacs-utilities-for-your-os/">writing a narrowing utility for macOS</a> using  <a href="http://www.hammerspoon.org/docs/hs.chooser.html">chooser</a>.
</p>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/cycling-through-window-layout-revisited</link>
  <guid isPermaLink="false">http://xenodium.com/cycling-through-window-layout-revisited</guid>
  <pubDate>Sun, 11 Sep 2022 00:00:00 +0100</pubDate>
</item>
<item>
  <title>dwim-shell-command with template prompts</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-dwim-shell-command-with-template-prompts" class="outline-2">
 <h2 id="dwim-shell-command-with-template-prompts"> <span class="timestamp-wrapper"> <span class="timestamp">18 August 2022</span></span> dwim-shell-command with template prompts</h2>
 <div class="outline-text-2" id="text-dwim-shell-command-with-template-prompts">
 <p>
Somewhat recently, I wanted to quickly create an empty/transparent png file.  <a href="https://imagemagick.org/">ImageMagick</a>'s convert has you covered here. Say you want a transparent 200x400 image, you can get it with:
</p>

 <div class="org-src-container">
 <pre class="src src-sh">convert -verbose -size 200x400 xc:none empty200x400.png
</pre>
</div>

 <p>
Great, I now know the one-liner for it. But because I'm in the mood of saving these as  <a href="https://xenodium.com/seamless-command-line-utils/">seamless command-line utils</a>, I figured I should save the
 <a href="https://github.com/xenodium/dwim-shell-command">dwim-shell-command</a> equivalent.
</p>

 <p>
I wanted configurable image dimensions, so I used  <a href="https://www.gnu.org/software/emacs/manual/html_node/calc/Formatting-Lisp-Functions.html">read-number</a> together with  <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Formatting-Strings.html">format</a> to create the templated command and fed it to  <code>dwim-shell-command-on-marked-files</code>. Job done:
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">dwim-shell-commands-make-transparent-png</span> ()
   <span style="color: #183691;">"Create a transparent png."</span>
  (<span style="color: #a71d5d;">interactive</span>)
  (<span style="color: #a71d5d;">let</span> ((width (read-number  <span style="color: #183691;">"Width: "</span> 200))
        (height (read-number  <span style="color: #183691;">"Height: "</span> 200)))
    (dwim-shell-command-on-marked-files
      <span style="color: #183691;">"Create transparent png"</span>
     (format  <span style="color: #183691;">"convert -verbose -size %dx%d xc:none '<<empty%dx%d.png(u)>>'"</span>
             width height width height)
      <span style="color: #a71d5d;">:utils</span>  <span style="color: #183691;">"convert"</span>)))
</pre>
</div>

 <p>
The resulting  <code>dwim-shell-commands-make-transparent-png</code> is fairly simple, but  <a href="https://github.com/xenodium/dwim-shell-command">dwim-shell-command</a> aims to remove friction so you're more inclined to save reusable commands. In this case, we can shift querying and formatting into the template.
</p>

 <p>
 <code><<Width:200>></code> can be interpreted as "ask the user for a value using the suggested prompt and default value."
</p>


 <div id="org42bcfb5" class="figure">
 <p> <img src="../images/dwim-shell-command-with-template-prompts/query.png" alt="query.png" width="50%" height="50%"></img></p>
</div>

 <p>
With template queries in mind,  <code>dwim-shell-commands-make-transparent-png</code> can be further reduced to essentially the interactive command boilerplate and the template itself:
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">dwim-shell-commands-make-transparent-png</span> ()
   <span style="color: #183691;">"Create a transparent png."</span>
  (<span style="color: #a71d5d;">interactive</span>)
  (dwim-shell-command-on-marked-files
    <span style="color: #183691;">"Create transparent png"</span>
    <span style="color: #183691;">"convert -verbose -size <<Width:200>>x<<Height:200>> xc:none '<<empty<<Width:200>>x<<Height:200>>.png(u)>>'"</span>
    <span style="color: #a71d5d;">:utils</span>  <span style="color: #183691;">"convert"</span>))
</pre>
</div>


 <div id="orgccbd43c" class="figure">
 <p> <img src="../images/dwim-shell-command-with-template-prompts/empty.webp" alt="empty.webp" width="90%" height="90%"></img></p>
</div>

 <p>
Note: Any repeated queries (same prompt and default) are treated as equal. That is, ask the user once and replace everywhere. If you'd like to request separate values, change either prompt or the default value.
</p>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/dwim-shell-command-with-template-prompts</link>
  <guid isPermaLink="false">http://xenodium.com/dwim-shell-command-with-template-prompts</guid>
  <pubDate>Thu, 18 Aug 2022 00:00:00 +0100</pubDate>
</item>
<item>
  <title>Seamless command-line utils</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-seamless-command-line-utils" class="outline-2">
 <h2 id="seamless-command-line-utils"> <span class="timestamp-wrapper"> <span class="timestamp">14 August 2022</span></span> Seamless command-line utils</h2>
 <div class="outline-text-2" id="text-seamless-command-line-utils">
 <p>
Just the other day, I received a restaurant menu split into a handful of image files. I wanted to forward the menu to others but figured I should probably send it as a single file.
</p>

 <p>
ImageMagick's  <a href="https://imagemagick.org/script/convert.php">convert</a> command-line utility works great for this purpose. Feed it some images and it creates a pdf for you:
</p>

 <div class="org-src-container">
 <pre class="src src-sh">convert image1.png image2.png image3.png combined.pdf
</pre>
</div>

 <p>
Using  <code>convert</code> for this purpose was pretty straightforward. I'm sure I'll use it again in a similar context, but what if I can make future usage more seamless? In the past, I would just make a note of usage and revisit when needed. Though this works well enough, it often requires some amount of manual work (looking things up, tweaking command, etc) if you happen to forget the command syntax.
</p>

 <p>
I wanted common one-liners (or  <a href="https://xenodium.com/png-to-icns-emacs-dwim-style/">longer shell scripts</a>) to be easily reusable and accessible from Emacs. Turns out, the  <a href="https://github.com/xenodium/dwim-shell-command">dwim-shell-command</a> experiment is working fairly well for this purpose. In addition to providing template expansion, it generally  <a href="https://xenodium.com/emacs-dwim-shell-command/">tries to do what I mean</a> (focus when needed, reveal new files, rename buffers, etc).
</p>

 <p>
Here's how I saved the  <code>convert</code> command instance for future usage:
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">dwim-shell-commands-join-as-pdf</span> ()
   <span style="color: #183691;">"Join all marked images as a single pdf."</span>
  (<span style="color: #a71d5d;">interactive</span>)
  (dwim-shell-command-on-marked-files
    <span style="color: #183691;">"Join as pdf"</span>
    <span style="color: #183691;">"convert -verbose '</span> <span style="color: #0086b3;"><<*>></span> <span style="color: #183691;">' '<<joined.pdf(u)>>'"</span>
    <span style="color: #a71d5d;">:utils</span>  <span style="color: #183691;">"convert"</span>))
</pre>
</div>

 <p>
From now on, any time I'd like to join multiple files into a pdf, I can now select them all and invoke  <code>dwim-shell-commands-join-as-pdf</code>.
</p>


 <div id="org638b258" class="figure">
 <p> <img src="../images/seamless-command-line-utils/joined_minimal_x1.2.webp" alt="joined_minimal_x1.2.webp" width="90%" height="90%"></img></p>
</div>

 <p>
In the saved command,  <code>'<<*>>'</code> expands to either  <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Dired.html">dired</a> selected files or whatever file happens to be open in the current buffer. The buffer file isn't of much help for joining multiple items, but can be handy for other instances (say I want to convert current image to jpeg).
</p>

 <p>
Moving on to  <code>'<<joined.pdf(u)>>'</code>, we could have just written as  <code>joined.pdf</code>, but wrapping it ensures the resulting file name is unique. That is, if  <code>joined.pdf</code> already exists, write  <code>joined(1).pdf</code> instead.
</p>

 <p>
These kinds of command-line integrations are working well for me. Take the webp animation above, it was created by invoking  <code>dwim-shell-commands-video-to-webp</code> on a  <code>.mov</code> file. Easy peasy. While I can easily memorize the  <code>convert</code> command for the pdf instance, I'm hopeless in the webp scenario:
</p>

 <div class="org-src-container">
 <pre class="src src-sh">ffmpeg -i  <span style="color: #183691;">'<<f>>'</span> -vcodec libwebp -filter:v  <span style="color: #333333;">fps</span>= <span style="color: #333333;">fps</span>=10 -compression_level 3 -lossless 1 -loop 0 -preset default -an -vsync 0  <span style="color: #183691;">'<<fne>>'</span>.webp
</pre>
</div>

 <p>
While searching through command line history helps to quickly re-spin previous commands, it requires remembering the actual utility used for any particular action. On the other hand, wrapping with Emacs functions enables me to remember the action itself, using more memorable names. Also, fuzzy searching works a treat.
</p>


 <div id="org95c9262" class="figure">
 <p> <img src="../images/seamless-command-line-utils/fuzzy.png" alt="fuzzy.png" width="70%" height="70%"></img></p>
</div>

 <p>
It's been roughly a month since I started playing around with this idea of wrapping command-line utilities more seamlessly. Since then, I've brought in a bunch of use-cases that are now quickly accessible (all in  <a href="https://github.com/xenodium/dwim-shell-command/blob/main/dwim-shell-commands.el">dwim-shell-commands.el</a>):
</p>

 <ul class="org-ul"> <li>dwim-shell-commands-audio-to-mp3</li>
 <li>dwim-shell-commands-clipboard-to-qr</li>
 <li>dwim-shell-commands-copy-to-desktop</li>
 <li>dwim-shell-commands-copy-to-downloads</li>
 <li>dwim-shell-commands-docx-to-pdf</li>
 <li>dwim-shell-commands-download-clipboard-stream-url</li>
 <li>dwim-shell-commands-drop-video-audio</li>
 <li>dwim-shell-commands-epub-to-org</li>
 <li>dwim-shell-commands-external-ip</li>
 <li>dwim-shell-commands-files-combined-size</li>
 <li>dwim-shell-commands-git-clone-clipboard-url</li>
 <li>dwim-shell-commands-git-clone-clipboard-url-to-downloads</li>
 <li>dwim-shell-commands-http-serve-dir</li>
 <li>dwim-shell-commands-image-browse-location</li>
 <li>dwim-shell-commands-image-exif-metadata</li>
 <li>dwim-shell-commands-image-reverse-geocode-location</li>
 <li>dwim-shell-commands-image-to-grayscale</li>
 <li>dwim-shell-commands-image-to-icns</li>
 <li>dwim-shell-commands-image-to-jpg</li>
 <li>dwim-shell-commands-image-to-png</li>
 <li>dwim-shell-commands-install-iphone-device-ipa</li>
 <li>dwim-shell-commands-join-as-pdf</li>
 <li>dwim-shell-commands-kill-gpg-agent</li>
 <li>dwim-shell-commands-kill-process</li>
 <li>dwim-shell-commands-macos-bin-plist-to-xml</li>
 <li>dwim-shell-commands-macos-caffeinate</li>
 <li>dwim-shell-commands-macos-hardware-overview</li>
 <li>dwim-shell-commands-macos-open-with</li>
 <li>dwim-shell-commands-macos-reveal-in-finder</li>
 <li>dwim-shell-commands-macos-set-default-app</li>
 <li>dwim-shell-commands-macos-share</li>
 <li>dwim-shell-commands-macos-toggle-dark-mode</li>
 <li>dwim-shell-commands-macos-toggle-display-rotation</li>
 <li>dwim-shell-commands-make-transparent-png</li>
 <li>dwim-shell-commands-move-to-desktop</li>
 <li>dwim-shell-commands-move-to-downloads</li>
 <li>dwim-shell-commands-open-clipboard-url</li>
 <li>dwim-shell-commands-open-externally</li>
 <li>dwim-shell-commands-pdf-password-protect</li>
 <li>dwim-shell-commands-pdf-to-txt</li>
 <li>dwim-shell-commands-ping-google</li>
 <li>dwim-shell-commands-rename-all</li>
 <li>dwim-shell-commands-reorient-image</li>
 <li>dwim-shell-commands-resize-gif</li>
 <li>dwim-shell-commands-resize-image</li>
 <li>dwim-shell-commands-resize-video</li>
 <li>dwim-shell-commands-speed-up-gif</li>
 <li>dwim-shell-commands-speed-up-video</li>
 <li>dwim-shell-commands-stream-clipboard-url</li>
 <li>dwim-shell-commands-svg-to-png</li>
 <li>dwim-shell-commands-unzip</li>
 <li>dwim-shell-commands-url-browse</li>
 <li>dwim-shell-commands-video-to-gif</li>
 <li>dwim-shell-commands-video-to-optimized-gif</li>
 <li>dwim-shell-commands-video-to-webp</li>
</ul> <p>
What other use-cases would you consider?  <code>dwim-shell-command</code> is  <a href="https://melpa.org/#/dwim-shell-command">available on melpa</a>.
</p>
</div>

 <div id="outline-container-org4cd43dd" class="outline-3">
 <h3 id="org4cd43dd">Update</h3>
 <div class="outline-text-3" id="text-org4cd43dd">
 <p>
2022-11-14 dwim-shell-commands.el list updated.
</p>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/seamless-command-line-utils</link>
  <guid isPermaLink="false">http://xenodium.com/seamless-command-line-utils</guid>
  <pubDate>Sun, 14 Aug 2022 00:00:00 +0100</pubDate>
</item>
<item>
  <title>Emacs freebie: macOS emoji picker</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-emacs-freebie-macos-emoji-picker" class="outline-2">
 <h2 id="emacs-freebie-macos-emoji-picker"> <span class="timestamp-wrapper"> <span class="timestamp">03 August 2022</span></span> Emacs freebie: macOS emoji picker</h2>
 <div class="outline-text-2" id="text-emacs-freebie-macos-emoji-picker">
 <p>
I recently ran a little experiment to bring macOS's  <a href="https://xenodium.com/an-accentuated-emacs-experiment/">long-press-accents-like behavior</a> to Emacs. What I forgot to mention is that macOS's character viewer  <i>just works</i> from our beloved editor.
</p>

 <p>
If you have a newer MacBook model, you can press the 🌐 key to summon the emoji picker (character viewer). You may need to set this key binding  <a href="https://support.apple.com/en-gb/guide/mac-help/mchlp1560/mac">from macOS keyboard preferences</a>.
</p>

 <p>
I'm happy to take this Emacs freebie, kthxbye.
</p>


 <div id="orgf9b3306" class="figure">
 <p> <img src="../images/emacs-freebie-macos-emoji-picker/hearts_x1.5.webp" alt="hearts_x1.5.webp" width="70%" height="70%"></img></p>
</div>

 <p>
Edits:
</p>

 <ul class="org-ul"> <li>Like other macOS apps, this dialog can be invoked via control-command-space (thanks  <a href="https://www.reddit.com/r/emacs/comments/wfja3n/comment/iiv7ptb/?utm_source=share&utm_medium=web2x&context=3">mtndewforbreakfast</a>). Note: you'd lose this ability if you  <code>(setq mac-command-modifier 'meta)</code> in your config.</li>
 <li>The 🌐 key is a feature on newer MacBook hardware and likely needs configuration (thanks  <a href="https://www.reddit.com/r/emacs/comments/wfja3n/comment/iivnwxt/?utm_source=share&utm_medium=web2x&context=3">Fabbi-</a>).</li>
</ul></div>
</div>
</div>]]></description>
  <link>http://xenodium.com/emacs-freebie-macos-emoji-picker</link>
  <guid isPermaLink="false">http://xenodium.com/emacs-freebie-macos-emoji-picker</guid>
  <pubDate>Wed, 03 Aug 2022 00:00:00 +0100</pubDate>
</item>
<item>
  <title>dwim-shell-command video streams</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-dwim-shell-command-video-streams" class="outline-2">
 <h2 id="dwim-shell-command-video-streams"> <span class="timestamp-wrapper"> <span class="timestamp">01 August 2022</span></span> dwim-shell-command video streams</h2>
 <div class="outline-text-2" id="text-dwim-shell-command-video-streams">
 <p>
I continue hunting for use-cases I can migrate to  <a href="https://github.com/xenodium/dwim-shell-command">dwim-shell-command</a>… After adding  <a href="https://xenodium.com/dwim-shell-command-improvements/">clipboard support</a> (via  <a id="orgc19d6f3"></a>) I found one more.
</p>

 <ol class="org-ol"> <li>Copy URL from browser.</li>
 <li>Invoke  <code>dwim-shell-commands-mpv-stream-clipboard-url</code>.</li>
 <li>Enjoy picture in picture from Emacs ;)</li>
</ol> <div id="org9045f45" class="figure">
 <p> <img src="../images/dwim-shell-command-video-streams/mpv.webp" alt="mpv.webp" width="90%" height="90%"></img></p>
</div>

 <p>
What's the secret sauce? Very little. Invoke the awesome  <a href="https://mpv.io/">mpv</a> with a wrapping function using  <code>dwim-shell-command-on-marked-files</code>.
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">dwim-shell-commands-mpv-stream-clipboard-url</span> ()
   <span style="color: #183691;">"Stream clipboard URL using mpv."</span>
  (<span style="color: #a71d5d;">interactive</span>)
  (dwim-shell-command-on-marked-files
    <span style="color: #183691;">"Streaming"</span>
    <span style="color: #183691;">"mpv --geometry=30%x30%+100%+0% \"<<cb>>\""</span>
    <span style="color: #a71d5d;">:utils</span>  <span style="color: #183691;">"mpv"</span>
    <span style="color: #a71d5d;">:no-progress</span> t
    <span style="color: #a71d5d;">:error-autofocus</span> t
    <span style="color: #a71d5d;">:silent-success</span> t))
</pre>
</div>

 <p>
The typical progress bar kinda got in the way, so I added a new option  <code>:no-progress</code> to  <code>dwim-shell-command-on-marked-files</code>, so it can be used for cases like this one.
</p>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/dwim-shell-command-video-streams</link>
  <guid isPermaLink="false">http://xenodium.com/dwim-shell-command-video-streams</guid>
  <pubDate>Mon, 01 Aug 2022 00:00:00 +0100</pubDate>
</item>
<item>
  <title>An accentuated Emacs experiment (à la macOS)</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-an-accentuated-emacs-experiment" class="outline-2">
 <h2 id="an-accentuated-emacs-experiment"> <span class="timestamp-wrapper"> <span class="timestamp">30 July 2022</span></span> An accentuated Emacs experiment (à la macOS)</h2>
 <div class="outline-text-2" id="text-an-accentuated-emacs-experiment">
 <p>
macOS has a wonderful input mechanism where you press and hold a key on your keyboard to display the accent menu. It's easy to internalize:  <i>long press "a" if you want to input "á"</i>.
</p>


 <div id="orgcff63db" class="figure">
 <p> <img src="../images/an-accentuated-emacs-experiment/macosaccent.webp" alt="macosaccent.webp" width="70%" height="70%"></img></p>
</div>

 <p>
On Emacs,  <i>C-x 8 ' a</i> would be the equivalent, but it just didn't stick for me. Fortunately, there's an alternative, using dead keys. Mickey Petersen gives a  <a href="https://www.masteringemacs.org/article/diacritics-in-emacs">wonderful introduction</a>. Having said all this, I still longed for macOS's input mechanism.
</p>

 <p>
Thanks to Christian Tietze's  <a href="https://twitter.com/ctietze/status/1552446492559958017">post</a>, I discovered the  <a href="https://github.com/elias94/accent">accent</a> package. While it doesn't handle  <i>press-and-hold</i>, it does the heavy lifting of offering a menu with character options. If I could just bring that  <i>press-and-hold</i>…
</p>

 <p>
My initial attempt was to use  <a href="https://github.com/emacsorphanage/key-chord">key chords</a> (via  <a href="https://github.com/jwiegley/use-package">use-package</a>):
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">use-package</span>  <span style="color: #0086b3;">accent</span>
   <span style="color: #a71d5d;">:ensure</span> t
   <span style="color: #a71d5d;">:chords</span> ((<span style="color: #183691;">"aa"</span> . ar/spanish-accent-menu)
           (<span style="color: #183691;">"ee"</span> . ar/spanish-accent-menu)
           (<span style="color: #183691;">"ii"</span> . ar/spanish-accent-menu)
           (<span style="color: #183691;">"oo"</span> . ar/spanish-accent-menu)
           (<span style="color: #183691;">"uu"</span> . ar/spanish-accent-menu)
           (<span style="color: #183691;">"AA"</span> . ar/spanish-accent-menu)
           (<span style="color: #183691;">"EE"</span> . ar/spanish-accent-menu)
           (<span style="color: #183691;">"II"</span> . ar/spanish-accent-menu)
           (<span style="color: #183691;">"OO"</span> . ar/spanish-accent-menu)
           (<span style="color: #183691;">"UU"</span> . ar/spanish-accent-menu)
           (<span style="color: #183691;">"nn"</span> . ar/spanish-accent-menu)
           (<span style="color: #183691;">"NN"</span> . ar/spanish-accent-menu)
           (<span style="color: #183691;">"??"</span> . ar/spanish-accent-menu)
           (<span style="color: #183691;">"!!"</span> . ar/spanish-accent-menu))
   <span style="color: #a71d5d;">:config</span>
  (<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">ar/spanish-accent-menu</span> ()
    (<span style="color: #a71d5d;">interactive</span>)
    (<span style="color: #a71d5d;">let</span> ((accent-diacritics
           '((a (á))
             (e (é))
             (i (í))
             (o (ó))
             (u (ú ü))
             (A (Á))
             (E (É))
             (I (Í))
             (O (Ó))
             (U (Ú Ü))
             (n (ñ))
             (N (Ñ))
             (\? (¿))
             (! (¡)))))
      (<span style="color: #a71d5d;">ignore-error</span> quit
        (accent-menu)))))
</pre>
</div>

 <p>
While it kinda works, "nn" quickly got in the way of my n/p  <a href="https://magit.vc/">magit</a> navigation. Perhaps key chords are still an option for someone who doesn't need the "nn" chord, but being a Spanish speaker, I need that "ñ" from long "n" presses!
</p>

 <p>
I'm now trying a little experiment using an  <code>after-change-functions</code> hook to monitor text input and present the accent menu. I'm sure there's a better way (anyone with ideas?). For now, it gives me something akin to  <i>press-and-hold.</i>
</p>


 <div id="org9994152" class="figure">
 <p> <img src="../images/an-accentuated-emacs-experiment/accentuated.webp" alt="accentuated.webp" width="80%" height="80%"></img></p>
</div>

 <p>
I'm wrapping the hook with a minor mode to easily enable/disable whenever needed. I'm also overriding  <code>accent-diacritics</code> to only include the characters I typically need.
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">use-package</span>  <span style="color: #0086b3;">accent</span>
   <span style="color: #a71d5d;">:ensure</span> t
   <span style="color: #a71d5d;">:hook</span> ((text-mode . accent-menu-mode)
         (org-mode . accent-menu-mode)
         (message-mode . accent-menu-mode))
   <span style="color: #a71d5d;">:config</span>
  (<span style="color: #a71d5d;">setq</span> accent-diacritics '((a (á))
                            (e (é))
                            (i (í))
                            (o (ó))
                            (u (ú ü))
                            (A (Á))
                            (E (É))
                            (I (Í))
                            (O (Ó))
                            (U (Ú Ü))
                            (n (ñ))
                            (N (Ñ))
                            (\? (¿))
                            (! (¡))))
  (<span style="color: #a71d5d;">defvar</span>  <span style="color: #333333;">accent-menu-monitor--last-edit-time</span> nil)

  (<span style="color: #a71d5d;">define-minor-mode</span>  <span style="color: #795da3;">accent-menu-mode</span>
     <span style="color: #183691;">"Toggle `</span> <span style="color: #0086b3;">accent-menu</span> <span style="color: #183691;">' if repeated keys are detected."</span>
     <span style="color: #a71d5d;">:lighter</span>  <span style="color: #183691;">" accent-menu mode"</span>
    (<span style="color: #a71d5d;">if</span> accent-menu-mode
        (<span style="color: #a71d5d;">progn</span>
          (remove-hook 'after-change-functions #'accent-menu-monitor--text-change t)
          (add-hook 'after-change-functions #'accent-menu-monitor--text-change 0 t))
      (remove-hook 'after-change-functions #'accent-menu-monitor--text-change t)))

  (<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">accent-menu-monitor--text-change</span> (beginning end length)
     <span style="color: #183691;">"Monitors text change BEGINNING, END, and LENGTH."</span>
    (<span style="color: #a71d5d;">let</span> ((last-edit-time accent-menu-monitor--last-edit-time)
          (edit-time (float-time)))
      (<span style="color: #a71d5d;">when</span> (<span style="color: #a71d5d;">and</span> (> end beginning)
                 (eq length 0)
                 last-edit-time
                 (not undo-in-progress)
                  <span style="color: #969896;">;; </span> <span style="color: #969896;">0.27 seems to work for my macOS keyboard settings.</span>
                  <span style="color: #969896;">;; </span> <span style="color: #969896;">Key Repeat: Fast | Delay Until Repeat: Short.</span>
                 (< (- edit-time last-edit-time) 0.27)
                 (float-time (time-subtract (current-time) edit-time))
                 (accent-menu-monitor--buffer-char-string (1- beginning))
                 (seq-contains-p (mapcar (<span style="color: #a71d5d;">lambda</span> (item)
                                           (symbol-name (car item)))
                                         accent-diacritics)
                                 (accent-menu-monitor--buffer-char-string beginning))
                 (string-equal (accent-menu-monitor--buffer-char-string (1- beginning))
                               (accent-menu-monitor--buffer-char-string beginning)))
        (delete-backward-char 1)
        (<span style="color: #a71d5d;">ignore-error</span> quit
          (accent-menu)))
      (<span style="color: #a71d5d;">setq</span> accent-menu-monitor--last-edit-time edit-time)))

  (<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">accent-menu-monitor--buffer-char-string</span> (at)
    (<span style="color: #a71d5d;">when</span> (<span style="color: #a71d5d;">and</span> (>= at (point-min))
               (< at (point-max)))
      (buffer-substring-no-properties at (+ at 1)))))
</pre>
</div>

 <p>
As a bonus, it ocurred to me that I could use the same  <i>press-and-hold</i> to handle question marks in Spanish (from my UK keyboard).
</p>


 <div id="orgadb569e" class="figure">
 <p> <img src="../images/an-accentuated-emacs-experiment/porque.webp" alt="porque.webp" width="40%" height="40%"></img></p>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/an-accentuated-emacs-experiment</link>
  <guid isPermaLink="false">http://xenodium.com/an-accentuated-emacs-experiment</guid>
  <pubDate>Sat, 30 Jul 2022 00:00:00 +0100</pubDate>
</item>
<item>
  <title>dwim-shell-command improvements</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-dwim-shell-command-improvements" class="outline-2">
 <h2 id="dwim-shell-command-improvements"> <span class="timestamp-wrapper"> <span class="timestamp">28 July 2022</span></span> dwim-shell-command improvements</h2>
 <div class="outline-text-2" id="text-dwim-shell-command-improvements">
 <p>
Added a few improvements to  <a href="https://github.com/xenodium/dwim-shell-command">dwim-shell-command</a>.
</p>
</div>

 <div id="outline-container-orge1b32dc" class="outline-3">
 <h3 id="orge1b32dc">Dired region</h3>
 <div class="outline-text-3" id="text-orge1b32dc">
 <p>
In DWIM style, if you happen to have a  <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Dired.html">dired</a> region selected, use region files instead. There's no need to explicitly mark them.
</p>


 <div id="org7157837" class="figure">
 <p> <img src="../images/dwim-shell-command-improvements/backup_x2.webp" alt="backup_x2.webp" width="70%" height="70%"></img></p>
</div>
</div>
</div>

 <div id="outline-container-orgd7eb3f1" class="outline-3">
 <h3 id="orgd7eb3f1">Clipboard (kill-ring) replacement</h3>
 <div class="outline-text-3" id="text-orgd7eb3f1">
 <p>
Use  <code><<cb>></code> to substitute with clipboard content. This is handy for cloning git repos, using a URL copied from your browser.
</p>

 <div class="org-src-container">
 <pre class="src src-sh">git clone <<cb>>
</pre>
</div>


 <div id="org24e8636" class="figure">
 <p> <img src="../images/dwim-shell-command-improvements/clone.webp" alt="clone.webp" width="70%" height="70%"></img></p>
</div>

 <p>
This illustrates  <code><<cb>></code> usage, but you may want to use  <code>dwim-shell-commands-git-clone-clipboard-url</code> from  <a href="https://github.com/xenodium/dwim-shell-command/blob/main/dwim-shell-commands.el">dwim-shell-commands.el</a> instead. It does the same thing internally, but makes the command more accessible.
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">dwim-shell-commands-git-clone-clipboard-url</span> ()
   <span style="color: #183691;">"Clone git URL in clipboard to `</span> <span style="color: #0086b3;">default-directory</span> <span style="color: #183691;">'."</span>
  (<span style="color: #a71d5d;">interactive</span>)
  (dwim-shell-command-on-marked-files
   (format  <span style="color: #183691;">"Clone %s"</span> (file-name-base (current-kill 0)))
    <span style="color: #183691;">"git clone <<cb>>"</span>
    <span style="color: #a71d5d;">:utils</span>  <span style="color: #183691;">"git"</span>))
</pre>
</div>
</div>
</div>

 <div id="outline-container-org20b2225" class="outline-3">
 <h3 id="org20b2225">Counter replacement</h3>
 <div class="outline-text-3" id="text-org20b2225">
 <p>
Use  <code><<n>></code> to substitute with a counter. You can also use  <code><<3n>></code> to start the counter at 3.
</p>

 <p>
Handy if you'd like to consistently rename or copy files.
</p>

 <div class="org-src-container">
 <pre class="src src-sh">mv  <span style="color: #183691;">'<<f>>'</span>  <span style="color: #183691;">'image(<<n>>).png'</span>
</pre>
</div>


 <div id="orge85745b" class="figure">
 <p> <img src="../images/dwim-shell-command-improvements/numberedsorted_x2.2.webp" alt="numberedsorted_x2.2.webp" width="70%" height="70%"></img></p>
</div>

 <p>
Can also use an alphabetic counter with  <code><<an>></code>. Like the numeric version, can use any letter to start the counter with.
</p>

 <div class="org-src-container">
 <pre class="src src-sh">mv  <span style="color: #183691;">'<<f>>'</span>  <span style="color: #183691;">'image(<<an>>).png'</span>
</pre>
</div>


 <div id="orge64884f" class="figure">
 <p> <img src="../images/dwim-shell-command-improvements/alphacount_x2.2.webp" alt="alphacount_x2.2.webp" width="70%" height="70%"></img></p>
</div>
</div>
</div>

 <div id="outline-container-orga68ad84" class="outline-3">
 <h3 id="orga68ad84">Prefix counter</h3>
 <div class="outline-text-3" id="text-orga68ad84">
 <p>
Use a  <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Prefix-Command-Arguments.html">prefix command argument</a> on  <code>dwim-shell-commands</code> to repeat the command a number of times. Combined with a counter, you can make multiple copies of a single file.
</p>


 <div id="orgae7c3ea" class="figure">
 <p> <img src="../images/dwim-shell-command-improvements/repeat.webp" alt="repeat.webp" width="70%" height="70%"></img></p>
</div>
</div>
</div>

 <div id="outline-container-orge75a387" class="outline-3">
 <h3 id="orge75a387">Optional error prompt</h3>
 <div class="outline-text-3" id="text-orge75a387">
 <p>
Set  <code>dwim-shell-command-prompt-on-error</code> to nil to skip error prompts. Focus process buffers automatically instead.
</p>


 <div id="org3607de8" class="figure">
 <p> <img src="../images/dwim-shell-command-improvements/couldnt.png" alt="couldnt.png" width="70%" height="70%"></img></p>
</div>
</div>
</div>

 <div id="outline-container-org1a869b8" class="outline-3">
 <h3 id="org1a869b8">Configurable prompt</h3>
 <div class="outline-text-3" id="text-org1a869b8">
 <p>
By default,  <code>dwim-shell-command</code> shows all supported placeholders. You can change that prompt to something shorter using  <code>dwim-shell-command-prompt</code>.
</p>


 <div id="orgb18f94a" class="figure">
 <p> <img src="../images/dwim-shell-command-improvements/prompt.jpg" alt="prompt.jpg" width="90%" height="90%"></img></p>
</div>
</div>
</div>

 <div id="outline-container-org0a3d37a" class="outline-3">
 <h3 id="org0a3d37a">⚠️ Use with care ⚠️</h3>
 <div class="outline-text-3" id="text-org0a3d37a">
 <p>
The changes are pretty fresh. Please use with caution (specially the counter support).
</p>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/dwim-shell-command-improvements</link>
  <guid isPermaLink="false">http://xenodium.com/dwim-shell-command-improvements</guid>
  <pubDate>Thu, 28 Jul 2022 00:00:00 +0100</pubDate>
</item>
<item>
  <title>dwim-shell-command on Melpa</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-dwim-shell-command-on-melpa" class="outline-2">
 <h2 id="dwim-shell-command-on-melpa"> <span class="timestamp-wrapper"> <span class="timestamp">24 July 2022</span></span> dwim-shell-command on Melpa</h2>
 <div class="outline-text-2" id="text-dwim-shell-command-on-melpa">

 <div id="orgee736d1" class="figure">
 <p> <img src="../images/dwim-shell-command-on-melpa/clone.webp" alt="clone.webp" width="70%" height="70%"></img></p>
 <p> <span class="figure-number">Figure 1: </span> <code><<cb>></code> gets replaced by a clipboard (kill ring) URL</p>
</div>

 <p>
My pull request to add  <a href="https://github.com/xenodium/dwim-shell-command">dwim-shell-command</a> to  <a href="https://melpa.org/">melpa</a> has been  <a href="https://github.com/melpa/melpa/pull/8129">merged</a>. Soon, you'll be able to install  <a href="https://melpa.org/#/dwim-shell-command">directly</a> from Milkypostman’s Emacs Lisp Package Archive.
</p>

 <p>
 <code>dwim-shell-command</code> is another way to invoke shell commands from our beloved editor. Why a different way? It does lots of little things for you, removing friction you didn't realise you had. You can check out the  <a href="https://github.com/xenodium/dwim-shell-command">README</a>, but you'll appreciate it much more once you try it out.
</p>

 <p>
In addition, it's enabled me to bring lots of command-line tools into my Emacs config and make them highly accessible. You can see my usages over at  <a href="https://github.com/xenodium/dotsies/blob/main/emacs/ar/dwim-shell-command-commands.el">dwim-shell-command-commands.el</a>.
</p>

 <p>
What kind of command-line tools? ffmpeg, convert, gifsycle, atool, qdpf, plutil, qrencode, du, sips, iconutil, and git (so far anyway). Below is a simple example, but would love to  <a href="https://twitter.com/xenodium">hear</a> how you get to use it.
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">dwim-shell-command-audio-to-mp3</span> ()
   <span style="color: #183691;">"Convert all marked audio to mp3(s)."</span>
  (<span style="color: #a71d5d;">interactive</span>)
  (dwim-shell-command-on-marked-files
    <span style="color: #183691;">"Convert to mp3"</span>
    <span style="color: #183691;">"ffmpeg -stats -n -i '</span> <span style="color: #0086b3;"><<f>></span> <span style="color: #183691;">' -acodec libmp3lame '</span> <span style="color: #0086b3;"><<fne>>.mp3</span> <span style="color: #183691;">'"</span>
    <span style="color: #a71d5d;">:utils</span>  <span style="color: #183691;">"ffmpeg"</span>))
</pre>
</div>

 <p>
I've written about  <code>dwim-shell-command</code> before:
</p>

 <ul class="org-ul"> <li> <a href="https://xenodium.com/emacs-dwim-shell-command-multi-language/">Emacs: DWIM shell command (multi-language)</a></li>
 <li> <a href="https://xenodium.com/png-to-icns-emacs-dwim-style/">png to icns (Emacs DWIM style)</a></li>
 <li> <a href="https://xenodium.com/emacs-password-protect-current-pdf-revisited/">Emacs: Password-protect current pdf (revisited)</a></li>
 <li> <a href="https://xenodium.com/emacs-dwim-shell-command/">Emacs DWIM shell-command</a></li>
</ul> <p>
 <a href="https://irreal.org/blog/">Irreal</a>'s also covered it:
</p>

 <ul class="org-ul"> <li> <a href="https://irreal.org/blog/?p=10674">DWIM Shell Now Supports Multiple Languages</a></li>
 <li> <a href="https://irreal.org/blog/?p=10653">DWIM Shell Commands</a></li>
 <li> <a href="https://irreal.org/blog/?p=10660%20%20">More Examples of DWIM Shell Commands</a></li>
</ul></div>
</div>
</div>]]></description>
  <link>http://xenodium.com/dwim-shell-command-on-melpa</link>
  <guid isPermaLink="false">http://xenodium.com/dwim-shell-command-on-melpa</guid>
  <pubDate>Sun, 24 Jul 2022 00:00:00 +0100</pubDate>
</item>
<item>
  <title>A lifehack for your shell</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-a-lifehack-for-your-shell" class="outline-2">
 <h2 id="a-lifehack-for-your-shell"> <span class="timestamp-wrapper"> <span class="timestamp">16 July 2022</span></span> A lifehack for your shell</h2>
 <div class="outline-text-2" id="text-a-lifehack-for-your-shell">

 <div id="orga3e0a1f" class="figure">
 <p> <img src="../images/a-lifehack-for-your-shell/unzip_x2.gif" alt="unzip_x2.gif" width="70%" height="70%"></img></p>
</div>

 <p>
I'm a fan of the  <a href="http://infozip.sourceforge.net/mans/unzip.html">unzip</a> command line utility that ships with macOS. I give it a .zip file and it unzips it for me. No flags or arguments to remember (for my typical usages anyway). Most importantly, I've fully internalized the  <code>unzip</code> command into muscle memory, probably because of its  <i>perfect mnemonic</i>.
</p>

 <p>
But then there's .tar, .tar.gz, .tar.xz, .rar, and a whole world of compression archives, often requiring different tools, flags, etc. and I need to remember those too.
</p>

 <p>
Can't remember where I got this "life hack" from, but it suggests something along the lines of…
</p>

 <div class="org-center">
 <p>
 <i>Once you find a lost item at home, place it in the first spot you looked.</i>
</p>
</div>

 <p>
Great, I'll find things quickly. Win.
</p>

 <p>
Now, I still remember a couple of unarchiving commands from memory (looking at you  <code>tar xvzf</code>), but I've noticed the first word that pops into mind when extracting is always  <code>unzip</code>.
</p>

 <p>
There's the great  <a href="https://www.nongnu.org/atool/">atool</a> wrapper out there to extract all kinds of archives (would love to hear of others), but unlucky for me, its name never comes to mind as quickly as  <code>unzip</code> does.
</p>

 <p>
With "life hack" in mind, let's just create an  <code>unzip</code>  <a href="https://www.gnu.org/software/emacs/manual/html_mono/eshell.html">eshell</a> alias to  <code>atool</code>. Next time I need to unarchive anything, the first word that comes to mind (unzip!) will quickly get me on my way…
</p>

 <div class="org-src-container">
 <pre class="src src-sh"> <span style="color: #a71d5d;">alias</span> unzip  <span style="color: #183691;">'atool --extract --explain $1'</span>
</pre>
</div>

 <p>
Or if you prefer to add to your Emacs config:
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(eshell/alias  <span style="color: #183691;">"unzip"</span>  <span style="color: #183691;">"atool --extract --explain $1"</span>)
</pre>
</div>

 <p>
While  <a href="https://xenodium.com/yasnippet-in-emacs-eshell/">I'm fan of Emacs eshell</a>, it's not everyone's cup of tea. Lucky for us all, aliases are a popular feature across shells. Happy unzipping!
</p>
</div>

 <div id="outline-container-org25c0711" class="outline-3">
 <h3 id="org25c0711">Bonus</h3>
 <div class="outline-text-3" id="text-org25c0711">
 <p>
Since I'm a keen on using "unzip" mnemonic everywhere in Emacs (not just my shell), I now have a  <a href="https://xenodium.com/emacs-dwim-shell-command/">DWIM shell-command</a> for it:
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">dwim-shell-command-unzip</span> ()
   <span style="color: #183691;">"Unzip all marked archives (of any kind) using `</span> <span style="color: #0086b3;">atool</span> <span style="color: #183691;">'."</span>
  (<span style="color: #a71d5d;">interactive</span>)
  (dwim-shell-command-on-marked-files
    <span style="color: #183691;">"Unzip"</span>  <span style="color: #183691;">"atool --extract --explain '</span> <span style="color: #0086b3;"><<f>></span> <span style="color: #183691;">'"</span>
    <span style="color: #a71d5d;">:utils</span>  <span style="color: #183691;">"atool"</span>))
</pre>
</div>


 <div id="org732d3ca" class="figure">
 <p> <img src="../images/a-lifehack-for-your-shell/unzip-dired_x1.5.gif" alt="unzip-dired_x1.5.gif" width="70%" height="70%"></img></p>
</div>
</div>
</div>

 <div id="outline-container-orgd75a663" class="outline-3">
 <h3 id="orgd75a663">UPDATE:</h3>
 <div class="outline-text-3" id="text-orgd75a663">
 <p>
 <a href="https://lobste.rs/">Lobste.rs</a> has great  <a href="https://lobste.rs/s/qaimmg/lifehack_for_your_shell">comments</a>. Thanks all:
</p>
</div>

 <div id="outline-container-orga12d428" class="outline-4">
 <h4 id="orga12d428">Aliases missing on remote machines</h4>
 <div class="outline-text-4" id="text-orga12d428">
 <p>
Concerns about aliases  <a href="https://lobste.rs/s/qaimmg/lifehack_for_your_shell#c_mqxo73">not available on remote machines</a>. Valid. Certainly brings challenges if you can't modify the environment on the remote machine. The severity would depend on how frequently you have to do this. Fortunately for me, it's infrequent.
</p>

 <p>
Additionally, if accessing remote machine via  <a href="https://www.gnu.org/software/emacs/manual/html_mono/eshell.html">eshell</a>, this is a non-issue. You get to transparently bring most of your environment with you anyway.
</p>
</div>
</div>

 <div id="outline-container-orgfaa087e" class="outline-4">
 <h4 id="orgfaa087e">Unzip keyword is overloaded</h4>
 <div class="outline-text-4" id="text-orgfaa087e">
 <p>
The alias is  <a href="https://lobste.rs/s/qaimmg/lifehack_for_your_shell#c_78nnwt">overloading the unzip command</a>. I know. It's a little naughty. Going with it for now. I used to use "extract" (also in comments), which I still like but somehow "unzip" still wins my memory race.  <a href="https://lobste.rs/s/qaimmg/lifehack_for_your_shell#c_73bzze">There's also "x"</a> (nice option), which seems to originate from  <a href="https://github.com/sorin-ionescu/prezto">prezto</a>. I could consider unzipp, unzip1, or some other variation.
</p>


 <p>
Not sure how I missed this, but there's also an  <a href="https://lobste.rs/s/qaimmg/lifehack_for_your_shell#c_ra6sbf">existing alias for atool</a>: aunpack. Could be a great alternative.
</p>
</div>
</div>


 <div id="outline-container-org0e58f9b" class="outline-4">
 <h4 id="org0e58f9b">Pause before extracting archives</h4>
 <div class="outline-text-4" id="text-org0e58f9b">
 <p>
Valid  <a href="https://lobste.rs/s/qaimmg/lifehack_for_your_shell#c_73bzze">point</a>. In my case, the pause typically happens  <i>before</i> I invoke the alias.
</p>
</div>
</div>

 <div id="outline-container-org93ec0e0" class="outline-4">
 <h4 id="org93ec0e0">Littering</h4>
 <div class="outline-text-4" id="text-org93ec0e0">
 <p>
If the archive didn't have a root dir, it can  <a href="https://lobste.rs/s/qaimmg/lifehack_for_your_shell#c_7fsart">litter your current directory</a>. Indeed a pain to clean up. For this, we can atool's  <code>--subdir</code> param to  <i>always create subdirectory when extracting</i>.
</p>
</div>
</div>

 <div id="outline-container-org717db34" class="outline-4">
 <h4 id="org717db34">Alias to retrain</h4>
 <div class="outline-text-4" id="text-org717db34">
 <p>
 <a href="https://lobste.rs/s/qaimmg/lifehack_for_your_shell#c_yr1jby">Neat trick</a>:  <code>alias unzip = “echo ‘use atool’”</code> to help retrain yourself. Reminds me of Emacs  <a href="https://github.com/bbatsov/guru-mode">guru-mode</a>.
</p>
</div>
</div>

 <div id="outline-container-org211320a" class="outline-4">
 <h4 id="org211320a">atool alternatives</h4>
 <div class="outline-text-4" id="text-org211320a">
 <p>
Nice to see other options suggested  <a href="https://github.com/moonpyk/dtrx">dtrx</a> ( <a href="https://lobste.rs/s/qaimmg/lifehack_for_your_shell#c_mutdjl">comment</a>),  <a href="https://github.com/mholt/archiver">archiver</a> ( <a href="https://lobste.rs/s/qaimmg/lifehack_for_your_shell#c_nlsk7w">comment</a>),  <a href="https://github.com/ashang/unar">unar</a> ( <a href="https://lobste.rs/s/qaimmg/lifehack_for_your_shell#c_90dk1l">comment</a>), bsdtar from  <a href="https://github.com/libarchive/libarchive">libarchive</a> ( <a href="https://lobste.rs/s/qaimmg/lifehack_for_your_shell#c_ojy6ah">comment</a>),  <a href="https://packages.debian.org/stable/unp">unp</a>,  <a href="https://wummel.github.io/patool/">patool</a>, and the tangentially related  <a href="https://www.nongnu.org/zutils/zutils.html">zgrep</a> ( <a href="https://lobste.rs/s/qaimmg/lifehack_for_your_shell#c_vp8fdw">comment</a>).
</p>
</div>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/a-lifehack-for-your-shell</link>
  <guid isPermaLink="false">http://xenodium.com/a-lifehack-for-your-shell</guid>
  <pubDate>Sat, 16 Jul 2022 00:00:00 +0100</pubDate>
</item>
<item>
  <title>Emacs zones to lift you up</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-emacs-zones-to-lift-you-up" class="outline-2">
 <h2 id="emacs-zones-to-lift-you-up"> <span class="timestamp-wrapper"> <span class="timestamp">13 July 2022</span></span> Emacs zones to lift you up</h2>
 <div class="outline-text-2" id="text-emacs-zones-to-lift-you-up">

 <div id="org4e53325" class="figure">
 <p> <img src="../images/emacs-zoneb-tob-lift-you-up/zone.gif" alt="zone.gif" width="90%" height="90%"></img></p>
</div>

 <p>
As I prune my  <a href="https://github.com/xenodium/dotsies/">Emacs config</a> off, I came across a forgotten bit of elisp I wrote about 6 years ago. While it's not going to power up your Emacs fu, it may lift your spirits, or maybe just aid discovery of new words.
</p>

 <p>
You see, I had forgotten about  <a href="https://github.com/emacs-mirror/emacs/blob/master/lisp/play/zone.el">zone.el</a> altogether: a fabulous package to tickle your heart. You can think of it as screensaver built into Emacs.
</p>

 <p>
If the built-in zones don't do it for ya, check out the few on melpa ( <a href="https://depp.brause.cc/zone-nyan/">nyan</a>,  <a href="https://github.com/kawabata/zone-sl">sl</a>, and  <a href="https://xenodium.com/added-emacs-zone-rainbow/">rainbow</a>).
</p>

 <p>
So, my nostalgic bit of elisp dates  <code>Jun 17 2016</code>: a basic but functional zone ( <a href="https://github.com/xenodium/dotsies/blob/main/emacs/ar/zone-words.el">zone-words</a>), displaying words from  <a href="http://wordnet.princeton.edu/">WordNet</a>. Surely the package can use plenty of improvements ( <a href="https://github.com/xenodium/dotsies/commit/00215e215be1413ea9d0085dd2de5123c635b8c0">here's one</a>), but hey this is Emacs and pretty much all existing code will run, no matter how old. In Emacs time, 2016 is practically yesterday!
</p>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/emacs-zones-to-lift-you-up</link>
  <guid isPermaLink="false">http://xenodium.com/emacs-zones-to-lift-you-up</guid>
  <pubDate>Wed, 13 Jul 2022 00:00:00 +0100</pubDate>
</item>
<item>
  <title>Emacs: DWIM shell command (multi-language)</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-emacs-dwim-shell-command-multi-language" class="outline-2">
 <h2 id="emacs-dwim-shell-command-multi-language"> <span class="timestamp-wrapper"> <span class="timestamp">10 July 2022</span></span> Emacs: DWIM shell command (multi-language)</h2>
 <div class="outline-text-2" id="text-emacs-dwim-shell-command-multi-language">
 <p>
UPDATE:  <a href="https://github.com/xenodium/dwim-shell-command">dwim-shell-command</a> is now available on  <a href="https://melpa.org/#/dwim-shell-command">melpa</a>.
</p>


 <div id="orgcb05c57" class="figure">
 <p> <img src="../images/emacs-dwim-shell-command-multi-language/csv.gif" alt="csv.gif" width="70%" height="70%"></img></p>
</div>

 <p>
I keep on  <a href="https://xenodium.com/png-to-icns-emacs-dwim-style/">goofying around</a> with  <a href="https://github.com/xenodium/dwim-shell-command">dwim-shell-command</a> and it's sibling  <code>dwim-shell-command-on-marked-files</code> from  <a href="https://github.com/xenodium/dwim-shell-command/blob/main/dwim-shell-command.el">dwim-shell-command.el</a>.
</p>

 <p>
In addition to defaulting to  <a href="https://en.wikipedia.org/wiki/Z_shell">zsh</a>,  <code>dwim-shell-command-on-marked-files</code> now support other shells and languages. This comes in handy if you have snippets in different languages and would like to easily invoke them from Emacs. Multi-language support enables "using the best tool for the job" kinda thing. Or maybe you just happen to know how to solve a particular problem in a specific language.
</p>

 <p>
Let's assume you have an existing Python snippet to convert files from csv to json. With  <code>dwim-shell-command-on-marked-files</code>, you can invoke the Python snippet to operate on either  <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Dired.html">dired</a> or buffer files.
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">dwim-shell-command-csv-to-json-via-python</span> ()
   <span style="color: #183691;">"Convert csv file to json (via Python)."</span>
  (<span style="color: #a71d5d;">interactive</span>)
  (dwim-shell-command-on-marked-files
    <span style="color: #183691;">"Convert csv file to json (via Python)."</span>
    <span style="color: #183691;">"</span>
 <span style="color: #183691;">import csv</span>
 <span style="color: #183691;">import json</span>
 <span style="color: #183691;">text = json.dumps({ \"values\": list(csv.reader(open('</span> <span style="color: #0086b3;"><<f>></span> <span style="color: #183691;">')))})</span>
 <span style="color: #183691;">fpath = '</span> <span style="color: #0086b3;"><<fne>>.json</span> <span style="color: #183691;">'</span>
 <span style="color: #183691;">with open(fpath , '</span> <span style="color: #0086b3;">w</span> <span style="color: #183691;">') as f:</span>
 <span style="color: #183691;">  f.write(text)"</span>
    <span style="color: #a71d5d;">:shell-util</span>  <span style="color: #183691;">"python"</span>
    <span style="color: #a71d5d;">:shell-args</span>  <span style="color: #183691;">"-c"</span>))
</pre>
</div>

 <p>
Or, maybe you prefer Swift and already had a snippet for the same thing?
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">dwim-shell-command-csv-to-json-via-swift</span> ()
   <span style="color: #183691;">"Convert csv file to json (via Swift)."</span>
  (<span style="color: #a71d5d;">interactive</span>)
  (dwim-shell-command-on-marked-files
    <span style="color: #183691;">"Convert csv file to json (via Swift)."</span>
    <span style="color: #183691;">"</span>
 <span style="color: #183691;">    import Foundation</span>
 <span style="color: #183691;">    import TabularData</span>
 <span style="color: #183691;">    let filePath = \"<<f>>\"</span>
 <span style="color: #183691;">    print(\"reading </span> <span style="color: #969896;">\\</span> <span style="color: #a71d5d;">(</span> <span style="color: #183691;">filePath)\")</span>
 <span style="color: #183691;">    let content = try String(contentsOfFile: filePath).trimmingCharacters(in: .whitespacesAndNewlines)</span>
 <span style="color: #183691;">    let parsedCSV = content.components(separatedBy: CSVWritingOptions().newline).map{</span>
 <span style="color: #183691;">      $0.components(separatedBy: \",\")</span>
 <span style="color: #183691;">    }</span>
 <span style="color: #183691;">    let jsonEncoder = JSONEncoder()</span>
 <span style="color: #183691;">    let jsonData = try jsonEncoder.encode([\"value\": parsedCSV])</span>
 <span style="color: #183691;">    let json = String(data: jsonData, encoding: String.Encoding.utf8)</span>
 <span style="color: #183691;">    let outURL = URL(fileURLWithPath:\"<<fne>>.json\")</span>
 <span style="color: #183691;">    try json!.write(to: outURL, atomically: true, encoding: String.Encoding.utf8)</span>
 <span style="color: #183691;">    print(\"wrote </span> <span style="color: #969896;">\\</span> <span style="color: #a71d5d;">(</span> <span style="color: #183691;">outURL)\")"</span>
    <span style="color: #a71d5d;">:shell-pipe</span>  <span style="color: #183691;">"swift -"</span>))
</pre>
</div>

 <p>
You can surely solve the same problem in elisp, but hey it's nice to have options and flexibility.
</p>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/emacs-dwim-shell-command-multi-language</link>
  <guid isPermaLink="false">http://xenodium.com/emacs-dwim-shell-command-multi-language</guid>
  <pubDate>Sun, 10 Jul 2022 00:00:00 +0100</pubDate>
</item>
<item>
  <title>Emacs: Password-protect current pdf (revisited)</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-emacs-password-protect-current-pdf-revisited" class="outline-2">
 <h2 id="emacs-password-protect-current-pdf-revisited"> <span class="timestamp-wrapper"> <span class="timestamp">09 July 2022</span></span> Emacs: Password-protect current pdf (revisited)</h2>
 <div class="outline-text-2" id="text-emacs-password-protect-current-pdf-revisited">
 <p>
UPDATE:  <a href="https://github.com/xenodium/dwim-shell-command">dwim-shell-command</a> is now available on  <a href="https://melpa.org/#/dwim-shell-command">melpa</a>.
</p>


 <div id="orgc1ea6f8" class="figure">
 <p> <img src="../images/emacs-password-protect-current-pdf-revisited/passprotect.gif" alt="passprotect.gif" width="70%" height="70%"></img></p>
</div>

 <p>
With a recent look at writing  <a href="https://xenodium.com/emacs-dwim-shell-command/">DWIM shell commands</a>, I've been revisiting my custom Emacs functions invoking command line utilities.
</p>

 <p>
Take this  <a href="https://xenodium.com/emacs-password-protect-current-pdf/">post</a>, for example, where I invoke  <a href="https://github.com/qpdf/qpdf">qpdf</a> via a elisp. Using the new  <code>dwim-shell-command--on-marked-files</code> in  <a href="https://github.com/xenodium/dwim-shell-command/blob/main/dwim-shell-command.el">dwim-shell-command.el</a>, the code is stripped down to a bare minimum:
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">dwim-shell-commands-pdf-password-protect</span> ()
   <span style="color: #183691;">"Password protect pdf."</span>
  (<span style="color: #a71d5d;">interactive</span>)
  (dwim-shell-command-on-marked-files
    <span style="color: #183691;">"Password protect pdf"</span>
   (format  <span style="color: #183691;">"qpdf --verbose --encrypt '</span> <span style="color: #0086b3;">%s</span> <span style="color: #183691;">' '</span> <span style="color: #0086b3;">%s</span> <span style="color: #183691;">' 256 -- '</span> <span style="color: #0086b3;"><<f>></span> <span style="color: #183691;">' '</span> <span style="color: #0086b3;"><<fne>>_enc.<<e>></span> <span style="color: #183691;">'"</span>
           (read-passwd  <span style="color: #183691;">"user-password: "</span>)
           (read-passwd  <span style="color: #183691;">"owner-password: "</span>))
    <span style="color: #a71d5d;">:utils</span>  <span style="color: #183691;">"qpdf"</span>
    <span style="color: #a71d5d;">:extensions</span>  <span style="color: #183691;">"pdf"</span>))
</pre>
</div>

 <p>
Compare the above  <code>dwim-shell-command--on-marked-files</code> usage to my  <a href="https://xenodium.com/emacs-password-protect-current-pdf/">previous implementation</a>:
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">pdf-password-protect</span> ()
   <span style="color: #183691;">"Password protect current pdf in buffer or `</span> <span style="color: #0086b3;">dired</span> <span style="color: #183691;">' file."</span>
  (<span style="color: #a71d5d;">interactive</span>)
  (<span style="color: #a71d5d;">unless</span> (executable-find  <span style="color: #183691;">"qpdf"</span>)
    (<span style="color: #333333;">user-error</span>  <span style="color: #183691;">"qpdf not installed"</span>))
  (<span style="color: #a71d5d;">unless</span> (equal  <span style="color: #183691;">"pdf"</span>
                 (<span style="color: #a71d5d;">or</span> (<span style="color: #a71d5d;">when</span> (buffer-file-name)
                       (downcase (file-name-extension (buffer-file-name))))
                     (<span style="color: #a71d5d;">when</span> (dired-get-filename nil t)
                       (downcase (file-name-extension (dired-get-filename nil t))))))
    (<span style="color: #333333;">user-error</span>  <span style="color: #183691;">"no pdf to act on"</span>))
  (<span style="color: #a71d5d;">let*</span> ((user-password (read-passwd  <span style="color: #183691;">"user-password: "</span>))
         (owner-password (read-passwd  <span style="color: #183691;">"owner-password: "</span>))
         (input (<span style="color: #a71d5d;">or</span> (buffer-file-name)
                    (dired-get-filename nil t)))
         (output (concat (file-name-sans-extension input)
                          <span style="color: #183691;">"_enc.pdf"</span>)))
    (message
     (string-trim
      (shell-command-to-string
       (format  <span style="color: #183691;">"qpdf --verbose --encrypt '</span> <span style="color: #0086b3;">%s</span> <span style="color: #183691;">' '</span> <span style="color: #0086b3;">%s</span> <span style="color: #183691;">' 256 -- '</span> <span style="color: #0086b3;">%s</span> <span style="color: #183691;">' '</span> <span style="color: #0086b3;">%s</span> <span style="color: #183691;">'"</span>
               user-password owner-password input output))))))
</pre>
</div>

 <p>
This really changes things for me. I'll be more inclined to add more of these tiny integrations to lots of great command line utilities. Take this recent  <a href="https://news.ycombinator.com/item?id=32028752">Hacker News post</a> on  <a href="https://github.com/ocrmypdf/OCRmyPDF">ocrmypdf</a> as an example. Their  <a href="https://ocrmypdf.readthedocs.io/en/latest/cookbook.html">cookbook</a> has lots of examples that can be easily used via   <code>dwim-shell-command--on-marked-files</code>.
</p>

 <p>
What command line utils would you use?
</p>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/emacs-password-protect-current-pdf-revisited</link>
  <guid isPermaLink="false">http://xenodium.com/emacs-password-protect-current-pdf-revisited</guid>
  <pubDate>Sat, 09 Jul 2022 00:00:00 +0100</pubDate>
</item>
<item>
  <title>png to icns (Emacs DWIM style)</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-png-to-icns-emacs-dwim-style" class="outline-2">
 <h2 id="png-to-icns-emacs-dwim-style"> <span class="timestamp-wrapper"> <span class="timestamp">09 July 2022</span></span> png to icns (Emacs DWIM style)</h2>
 <div class="outline-text-2" id="text-png-to-icns-emacs-dwim-style">
 <p>
UPDATE:  <a href="https://github.com/xenodium/dwim-shell-command">dwim-shell-command</a> is now available on  <a href="https://melpa.org/#/dwim-shell-command">melpa</a>.
</p>


 <div id="org9ef3cdb" class="figure">
 <p> <img src="../images/png-to-icns-emacs-dwim-style/icns.gif" alt="icns.gif" width="70%" height="70%"></img></p>
</div>

 <p>
Since  <a href="https://xenodium.com/emacs-dwim-shell-command/">writing a DWIM version of the shell-command</a>, I've been having a little fun  <a href="https://xenodium.com/emacs-password-protect-current-pdf-revisited/">revisiting command line utilities</a> I sometimes invoke from my beloved editor. In this instance, converting a png file to an icns icon. What's more interesting about this case is that it's not just a one-liner, but a short script in itself. Either way, it's just as easy to invoke from Emacs using  <code>dwim-shell-command--on-marked-files</code>.
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">dwim-shell-command-convert-image-to-icns</span> ()
   <span style="color: #183691;">"Convert png to icns icon."</span>
  (<span style="color: #a71d5d;">interactive</span>)
  (dwim-shell-command-on-marked-files
    <span style="color: #183691;">"Convert png to icns icon"</span>
    <span style="color: #183691;">"</span>
 <span style="color: #183691;">    # Based on http://stackoverflow.com/questions/12306223/how-to-manually-create-icns-files-using-iconutil</span>
 <span style="color: #183691;">    # Note: png must be 1024x1024</span>
 <span style="color: #183691;">    mkdir <<fne>>.iconset</span>
 <span style="color: #183691;">    sips -z 16 16 '</span> <span style="color: #0086b3;"><<f>></span> <span style="color: #183691;">' --out '</span> <span style="color: #0086b3;"><<fne>>.iconset/icon_16x16.png</span> <span style="color: #183691;">'</span>
 <span style="color: #183691;">    sips -z 32 32 '</span> <span style="color: #0086b3;"><<f>></span> <span style="color: #183691;">' --out '</span> <span style="color: #0086b3;"><<fne>>.iconset/icon_16x16@2x.png</span> <span style="color: #183691;">'</span>
 <span style="color: #183691;">    sips -z 32 32 '</span> <span style="color: #0086b3;"><<f>></span> <span style="color: #183691;">' --out '</span> <span style="color: #0086b3;"><<fne>>.iconset/icon_32x32.png</span> <span style="color: #183691;">'</span>
 <span style="color: #183691;">    sips -z 64 64 '</span> <span style="color: #0086b3;"><<f>></span> <span style="color: #183691;">' --out '</span> <span style="color: #0086b3;"><<fne>>.iconset/icon_32x32@2x.png</span> <span style="color: #183691;">'</span>
 <span style="color: #183691;">    sips -z 128 128 '</span> <span style="color: #0086b3;"><<f>></span> <span style="color: #183691;">' --out '</span> <span style="color: #0086b3;"><<fne>>.iconset/icon_128x128.png</span> <span style="color: #183691;">'</span>
 <span style="color: #183691;">    sips -z 256 256 '</span> <span style="color: #0086b3;"><<f>></span> <span style="color: #183691;">' --out '</span> <span style="color: #0086b3;"><<fne>>.iconset/icon_128x128@2x.png</span> <span style="color: #183691;">'</span>
 <span style="color: #183691;">    sips -z 256 256 '</span> <span style="color: #0086b3;"><<f>></span> <span style="color: #183691;">' --out '</span> <span style="color: #0086b3;"><<fne>>.iconset/icon_256x256@2x.png</span> <span style="color: #183691;">'</span>
 <span style="color: #183691;">    sips -z 512 512 '</span> <span style="color: #0086b3;"><<f>></span> <span style="color: #183691;">' --out '</span> <span style="color: #0086b3;"><<fne>>.iconset/icon_512x512.png</span> <span style="color: #183691;">'</span>
 <span style="color: #183691;">    sips -z 512 512 '</span> <span style="color: #0086b3;"><<f>></span> <span style="color: #183691;">' --out '</span> <span style="color: #0086b3;"><<fne>>.iconset/icon_256x256@2x.png</span> <span style="color: #183691;">'</span>
 <span style="color: #183691;">    sips -z 1024 1024 '</span> <span style="color: #0086b3;"><<f>></span> <span style="color: #183691;">' --out '</span> <span style="color: #0086b3;"><<fne>>.iconset/icon_512x512@2x.png</span> <span style="color: #183691;">'</span>
 <span style="color: #183691;">    iconutil -c icns '</span> <span style="color: #0086b3;"><<fne>>.iconset</span> <span style="color: #183691;">'"</span>
    <span style="color: #a71d5d;">:utils</span> '(<span style="color: #183691;">"sips"</span>  <span style="color: #183691;">"iconutil"</span>)
    <span style="color: #a71d5d;">:extensions</span>  <span style="color: #183691;">"png"</span>))
</pre>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/png-to-icns-emacs-dwim-style</link>
  <guid isPermaLink="false">http://xenodium.com/png-to-icns-emacs-dwim-style</guid>
  <pubDate>Sat, 09 Jul 2022 00:00:00 +0100</pubDate>
</item>
<item>
  <title>Emacs DWIM shell-command</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-emacs-dwim-shell-command" class="outline-2">
 <h2 id="emacs-dwim-shell-command"> <span class="timestamp-wrapper"> <span class="timestamp">07 July 2022</span></span> Emacs DWIM shell-command</h2>
 <div class="outline-text-2" id="text-emacs-dwim-shell-command">
 <p>
UPDATE:  <a href="https://github.com/xenodium/dwim-shell-command">dwim-shell-command</a> is now available on  <a href="https://melpa.org/#/dwim-shell-command">melpa</a>.
</p>

 <p>
I've  <a href="https://xenodium.com/emacs-dwim-do-what-i-mean/">talked about DWIM before</a>, where I bend Emacs to help me do what I mean. Emacs is also great for  <a href="https://xenodium.com/emacs-password-protect-current-pdf/">wrapping command-line one-liners with elisp</a>, so I can quickly invoke commands without thinking too much about flags, arguments, etc.
</p>

 <p>
I keep thinking the  <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Shell.html">shell-command</a> is ripe for plenty of enhancements using our DWIM fairydust.
</p>
</div>

 <div id="outline-container-org7bca9cc" class="outline-3">
 <h3 id="org7bca9cc">Do what I mean how?</h3>
 <div class="outline-text-3" id="text-org7bca9cc">
</div>
 <div id="outline-container-orgf035142" class="outline-4">
 <h4 id="orgf035142">Smart template instantiation</h4>
 <div class="outline-text-4" id="text-orgf035142">
 <p>
I've drawn inspiration from  <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Shell-Commands-in-Dired.html">dired-do-shell-command</a>, which substitutes special characters like * and ? with marked files. I'm also drawing inspiration from  <a href="https://orgmode.org/worg/org-contrib/babel/">org babel</a>'s  <a href="https://orgmode.org/manual/Noweb-Reference-Syntax.html">noweb</a> syntax to substitute  <code><<f>></code> (file path),  <code><<fne>></code> (file path without extension), and  <code><<e>></code> (extension). My initial preference was to use something like  <code>$f</code>,  <code>$fne</code>, and  <code>$e</code>, but felt they clashed with shell variables.
</p>


 <div id="orge73541c" class="figure">
 <p> <img src="../images/emacs-dwim-shell-command/template.png" alt="template.png" width="70%" height="70%"></img></p>
</div>
</div>
</div>

 <div id="outline-container-orgde2242a" class="outline-4">
 <h4 id="orgde2242a">Operate on dired marked files</h4>
 <div class="outline-text-4" id="text-orgde2242a">
 <p>
This is DWIM, so if we're visiting a  <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Dired.html">dired</a> buffer, the shell command should operate on all the marked files.
</p>


 <div id="org2559a65" class="figure">
 <p> <img src="../images/emacs-dwim-shell-command/diredmark.gif" alt="diredmark.gif" width="70%" height="70%"></img></p>
</div>
</div>
</div>

 <div id="outline-container-org4774a16" class="outline-4">
 <h4 id="org4774a16">Operate on current buffer file</h4>
 <div class="outline-text-4" id="text-org4774a16">
 <p>
Similarly, if visiting a buffer with an associated file, operate on that file instead.
</p>


 <div id="orgc26607d" class="figure">
 <p> <img src="../images/emacs-dwim-shell-command/blur.png" alt="blur.png" width="90%" height="90%"></img></p>
</div>
</div>
</div>

 <div id="outline-container-org72d7992" class="outline-4">
 <h4 id="org72d7992">Automatically take me to created files</h4>
 <div class="outline-text-4" id="text-org72d7992">
 <p>
Did the command create a new file in the current directory? Take me to it, right away.
</p>


 <div id="orgc362093" class="figure">
 <p> <img src="../images/emacs-dwim-shell-command/showme.png" alt="showme.png" width="50%" height="50%"></img></p>
</div>
</div>
</div>

 <div id="outline-container-orgc696b8f" class="outline-4">
 <h4 id="orgc696b8f">Show me output on error</h4>
 <div class="outline-text-4" id="text-orgc696b8f">
 <p>
I'm not usually interested in the command output when generating new files, unless there was an error of course. Offer to show it.
</p>


 <div id="orgdbb76f3" class="figure">
 <p> <img src="../images/emacs-dwim-shell-command/couldnt.png" alt="couldnt.png" width="70%" height="70%"></img></p>
</div>
</div>
</div>

 <div id="outline-container-orgff32ed2" class="outline-4">
 <h4 id="orgff32ed2">Show me output if no new files</h4>
 <div class="outline-text-4" id="text-orgff32ed2">
 <p>
Not all commands generate new files, so automatically show me the output for these instances.
</p>


 <div id="orgd83b57b" class="figure">
 <p> <img src="../images/emacs-dwim-shell-command/apple.gif" alt="apple.gif" width="50%" height="50%"></img></p>
</div>
</div>
</div>

 <div id="outline-container-orgbb3866e" class="outline-4">
 <h4 id="orgbb3866e">Make it easy to create utilities</h4>
 <div class="outline-text-4" id="text-orgbb3866e">
 <p>
 <a href="https://ffmpeg.org/">ffmpeg</a> is awesome, but man I can never remember all the flags and arguments. I may as well wrap commands like these in a convenient elisp function and invoke via  <a href="https://www.gnu.org/software/emacs/manual/html_node/efaq/Extended-commands.html">execute-extended-command</a>, or my favorite  <a href="http://oremacs.com/swiper/#minibuffer-key-bindings">counsel-M-x</a> (with completion), bound to the vital  <code>M-x</code>.
</p>

 <p>
All those gifs you see in this post were created with  <code>dwim-shell-command-convert-to-gif</code>, powered by the same elisp magic.
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">dwim-shell-command-convert-to-gif</span> ()
   <span style="color: #183691;">"Convert all marked videos to optimized gif(s)."</span>
  (<span style="color: #a71d5d;">interactive</span>)
  (dwim-shell-command--on-marked-files
    <span style="color: #183691;">"Convert to gif"</span>
    <span style="color: #183691;">"ffmpeg -loglevel quiet -stats -y -i <<f>> -pix_fmt rgb24 -r 15 <<fne>>.gif"</span>
    <span style="color: #a71d5d;">:utils</span>  <span style="color: #183691;">"ffmpeg"</span>))
</pre>
</div>


 <div id="orga04abe4" class="figure">
 <p> <img src="../images/emacs-dwim-shell-command/togif_x1.5.gif" alt="togif_x1.5.gif" width="70%" height="70%"></img></p>
</div>

 <p>
This makes wrapping one-liners a breeze, so let's do some more…
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">dwim-shell-command-convert-audio-to-mp3</span> ()
   <span style="color: #183691;">"Convert all marked audio to mp3(s)."</span>
  (<span style="color: #a71d5d;">interactive</span>)
  (dwim-shell-command-on-marked-files
    <span style="color: #183691;">"Convert to mp3"</span>
    <span style="color: #183691;">"ffmpeg -stats -n -i '</span> <span style="color: #0086b3;"><<f>></span> <span style="color: #183691;">' -acodec libmp3lame '</span> <span style="color: #0086b3;"><<fne>>.mp3</span> <span style="color: #183691;">'"</span>
    <span style="color: #a71d5d;">:utils</span>  <span style="color: #183691;">"ffmpeg"</span>))

(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">dwim-shell-command-convert-image-to-jpg</span> ()
   <span style="color: #183691;">"Convert all marked images to jpg(s)."</span>
  (<span style="color: #a71d5d;">interactive</span>)
  (dwim-shell-command-on-marked-files
    <span style="color: #183691;">"Convert to jpg"</span>
    <span style="color: #183691;">"convert -verbose '</span> <span style="color: #0086b3;"><<f>></span> <span style="color: #183691;">' '</span> <span style="color: #0086b3;"><<fne>>.jpg</span> <span style="color: #183691;">'"</span>
    <span style="color: #a71d5d;">:utils</span>  <span style="color: #183691;">"convert"</span>))

(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">dwim-shell-command-drop-video-audio</span> ()
   <span style="color: #183691;">"Drop audio from all marked videos."</span>
  (<span style="color: #a71d5d;">interactive</span>)
  (dwim-shell-command-on-marked-files
    <span style="color: #183691;">"Drop audio"</span>  <span style="color: #183691;">"ffmpeg -i '</span> <span style="color: #0086b3;"><<f>></span> <span style="color: #183691;">' -c copy -an '</span> <span style="color: #0086b3;"><<fne>>_no_audio.<<e>></span> <span style="color: #183691;">'"</span>
    <span style="color: #a71d5d;">:utils</span>  <span style="color: #183691;">"ffmpeg"</span>))
</pre>
</div>
</div>
</div>

 <div id="outline-container-orgb3d8aba" class="outline-4">
 <h4 id="orgb3d8aba">Make it spin ;)</h4>
 <div class="outline-text-4" id="text-orgb3d8aba">
 <p>
Ok, not quite, but use Emacs's  <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Progress.html">progress-reporter</a> just for kicks.
</p>


 <div id="orgd4d5e2e" class="figure">
 <p> <img src="../images/emacs-dwim-shell-command/progress.gif" alt="progress.gif" width="50%" height="50%"></img></p>
</div>
</div>
</div>
</div>

 <div id="outline-container-orgf730ec6" class="outline-3">
 <h3 id="orgf730ec6">Use it everywhere</h3>
 <div class="outline-text-3" id="text-orgf730ec6">
 <p>
 <code>dwim-shell-command</code> covers my needs (so far anyway), so I'm binding it to existing bindings.
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">use-package</span>  <span style="color: #0086b3;">dwim-shell-command</span>
   <span style="color: #a71d5d;">:bind</span>
  (<span style="color: #183691;">"M-!"</span> . dwim-shell-command))

(<span style="color: #a71d5d;">use-package</span>  <span style="color: #0086b3;">dired</span>
   <span style="color: #a71d5d;">:bind</span> (<span style="color: #a71d5d;">:map</span> dired-mode-map
              ([remap dired-do-async-shell-command] . dwim-shell-command)
              ([remap dired-do-shell-command] . dwim-shell-command)
              ([remap dired-smart-shell-command] . dwim-shell-command)))
</pre>
</div>
</div>
</div>

 <div id="outline-container-orgbe17914" class="outline-3">
 <h3 id="orgbe17914">Bring those command line utilities</h3>
 <div class="outline-text-3" id="text-orgbe17914">
 <p>
On the whole, this really changes things for me. I'll be more inclined to bring command line utilities to seamless Emacs usage. Take this recent  <a href="https://news.ycombinator.com/item?id=32028752">Hacker News post</a> on  <a href="https://github.com/ocrmypdf/OCRmyPDF">ocrmypdf</a> as an example. Their  <a href="https://ocrmypdf.readthedocs.io/en/latest/cookbook.html">cookbook</a> has lots of examples that can be easily used via  <code>dwim-shell-command--on-marked-files</code>. What command line utilities would you bring?
</p>
</div>
</div>

 <div id="outline-container-org3aa249c" class="outline-3">
 <h3 id="org3aa249c">Where's the code?</h3>
 <div class="outline-text-3" id="text-org3aa249c">
 <p>
UPDATE:  <a href="https://github.com/xenodium/dwim-shell-command">dwim-shell-command</a> is now available on  <a href="https://melpa.org/#/dwim-shell-command">melpa</a>.
</p>

 <p>
The code for  <a href="https://github.com/xenodium/dotsies/blob/main/emacs/ar/dwim-shell-command.el">dwim-shell-command.el</a> is likely a bit rough still, but you can take a peak if interested. Keep in mind this is DWIM, tailored for what ✨I✨ mean. Some of the current behavior may not be your cup of tea, but this is Emacs. You can bend it to do what ✨you✨ mean. Happy Emacsing.
</p>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/emacs-dwim-shell-command</link>
  <guid isPermaLink="false">http://xenodium.com/emacs-dwim-shell-command</guid>
  <pubDate>Thu, 07 Jul 2022 00:00:00 +0100</pubDate>
</item>
<item>
  <title>Emacs: Password-protect current pdf</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-emacs-password-protect-current-pdf" class="outline-2">
 <h2 id="emacs-password-protect-current-pdf"> <span class="timestamp-wrapper"> <span class="timestamp">02 June 2022</span></span> Emacs: Password-protect current pdf</h2>
 <div class="outline-text-2" id="text-emacs-password-protect-current-pdf">
 <p>
UPDATE: Check out  <a href="https://xenodium.com/emacs-password-protect-current-pdf-revisited">Password-protect current pdf (revisted)</a> for a simpler version.
</p>

 <p>
Every so often, I need to password-protect a pdf. On macOS,  <a href="https://support.apple.com/en-gb/guide/preview/prvw587dd90f/mac">Preview has a simple solution</a>, but I figured there must be a command line utility to make this happen. There are options, but  <a href="https://github.com/qpdf/qpdf">qdf</a> did the job just fine.
</p>

 <div class="org-src-container">
 <pre class="src src-sh">qpdf --verbose --encrypt USER-PASSWORD OWNER-PASSWORD KEY-LENGTH -- input.pdf output.pdf
</pre>
</div>

 <p>
So what does  <code>qpdf</code> have to do with Emacs? Command-line utilities are easy to invoke from Emacs via  <code>shell-command</code> (M-!), but I don't want to remember the command nor the parameters. I may as well add a function that  <a href="https://xenodium.com/emacs-dwim-do-what-i-mean/">does what I mean</a> and password-protect either buffers or  <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Dired.html">dired</a> files.
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">pdf-password-protect</span> ()
     <span style="color: #183691;">"Password protect current pdf in buffer or `</span> <span style="color: #0086b3;">dired</span> <span style="color: #183691;">' file."</span>
    (<span style="color: #a71d5d;">interactive</span>)
    (<span style="color: #a71d5d;">unless</span> (executable-find  <span style="color: #183691;">"qpdf"</span>)
      (<span style="color: #333333;">user-error</span>  <span style="color: #183691;">"qpdf not installed"</span>))
    (<span style="color: #a71d5d;">unless</span> (equal  <span style="color: #183691;">"pdf"</span>
                   (<span style="color: #a71d5d;">or</span> (<span style="color: #a71d5d;">when</span> (buffer-file-name)
                         (downcase (file-name-extension (buffer-file-name))))
                       (<span style="color: #a71d5d;">when</span> (dired-get-filename nil t)
                         (downcase (file-name-extension (dired-get-filename nil t))))))
      (<span style="color: #333333;">user-error</span>  <span style="color: #183691;">"no pdf to act on"</span>))
    (<span style="color: #a71d5d;">let*</span> ((user-password (read-passwd  <span style="color: #183691;">"user-password: "</span>))
           (owner-password (read-passwd  <span style="color: #183691;">"owner-password: "</span>))
           (input (<span style="color: #a71d5d;">or</span> (buffer-file-name)
                      (dired-get-filename nil t)))
           (output (concat (file-name-sans-extension input)
                            <span style="color: #183691;">"_enc.pdf"</span>)))
      (message
       (string-trim
        (shell-command-to-string
         (format  <span style="color: #183691;">"qpdf --verbose --encrypt '</span> <span style="color: #0086b3;">%s</span> <span style="color: #183691;">' '</span> <span style="color: #0086b3;">%s</span> <span style="color: #183691;">' 256 -- '</span> <span style="color: #0086b3;">%s</span> <span style="color: #183691;">' '</span> <span style="color: #0086b3;">%s</span> <span style="color: #183691;">'"</span>
                 user-password owner-password input output))))))
</pre>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/emacs-password-protect-current-pdf</link>
  <guid isPermaLink="false">http://xenodium.com/emacs-password-protect-current-pdf</guid>
  <pubDate>Thu, 02 Jun 2022 00:00:00 +0100</pubDate>
</item>
<item>
  <title>Plain Org v1.4 released</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-plain-org-v14-released" class="outline-2">
 <h2 id="plain-org-v14-released"> <span class="timestamp-wrapper"> <span class="timestamp">24 April 2022</span></span> Plain Org v1.4 released</h2>
 <div class="outline-text-2" id="text-plain-org-v14-released">
 <p>
 <a href="https://plainorg.com">Plain Org</a> v1.4 is now available on the  <a href="https://apps.apple.com/app/id1578965002">App Store</a>.
</p>

 <p>
I was on a long flight recently 🦘, so I gave list and checkbox editing a little love. There's a couple of other minor improvements included.
</p>

 <p>
If you haven't heard of  <a href="https://plainorg.com">Plain Org</a>, it gives you access to  <a href="https://orgmode.org">org</a> files on iPhone while away from your beloved  <a href="https://www.gnu.org/software/emacs/">Emacs</a>.
</p>

 <p>
I love org markup, but we (iPhone + org users) are a fairly niche bunch. If you're finding Plain Org useful,  <b>please help support this effort</b> by getting the word out. Tell your friends,  <a href="https://twitter.com/intent/tweet?text=Plain%20Org%20https%3A%2F%2Fapps.apple.com%2Fapp%2Fid1578965002%20">tweet</a>, or blog about it.
</p>

 <p>
On to v1.4 release notes…
</p>
</div>

 <div id="outline-container-orgfac0cf8" class="outline-3">
 <h3 id="orgfac0cf8">Improved list/checkbox editing</h3>
 <div class="outline-text-3" id="text-orgfac0cf8">
 <p>
Adding list or checkbox items is traditionally cumbersome via the iPhone's keyboard. This release adds new toolbar actions and smart return to simplify things.
</p>


 <div id="org1208d31" class="figure">
 <p> <img src="../images/plain-org-v14-released/list_this.gif" alt="list_this.gif" width="50%" height="50%"></img></p>
</div>
</div>
</div>

 <div id="outline-container-orgc64700f" class="outline-3">
 <h3 id="orgc64700f">Render form feed characters</h3>
 <div class="outline-text-3" id="text-orgc64700f">
 <p>
Form feed characters are now rendered within expanded headings.
</p>


 <div id="orgc0690ca" class="figure">
 <p> <img src="../images/plain-org-v14-released/form_feed.jpg" alt="form_feed.jpg" width="50%" height="50%"></img></p>
</div>

 <p>
Note: There's a limitation. Form feed characters at the end of a heading aren't currently displayed.
</p>
</div>
</div>

 <div id="outline-container-orgc5169e3" class="outline-3">
 <h3 id="orgc5169e3">Other</h3>
 <div class="outline-text-3" id="text-orgc5169e3">
 <p>
Increased all button tap areas in edit toolbar. This should hopefully improve interaction.
</p>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/plain-org-v14-released</link>
  <guid isPermaLink="false">http://xenodium.com/plain-org-v14-released</guid>
  <pubDate>Sun, 24 Apr 2022 00:00:00 +0100</pubDate>
</item>
<item>
  <title>Plain Org v1.3 released</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-plain-org-v130-released" class="outline-2">
 <h2 id="plain-org-v130-released"> <span class="timestamp-wrapper"> <span class="timestamp">15 April 2022</span></span> Plain Org v1.3 released</h2>
 <div class="outline-text-2" id="text-plain-org-v130-released">
 <p>
 <a href="https://plainorg.com">Plain Org</a> v1.3 is now available on the  <a href="https://apps.apple.com/app/id1578965002">App Store</a>. The update receives a few features, bug fixes, and improvements.
</p>

 <p>
If you haven't heard of  <a href="https://plainorg.com">Plain Org</a>, it gives you access to  <a href="https://orgmode.org">org</a> files on iPhone while away from your beloved  <a href="https://www.gnu.org/software/emacs/">Emacs</a>.
</p>

 <p>
I love org markup, but we (iPhone + org users) are a fairly niche bunch. If you're finding Plain Org useful,  <b>please help support this effort</b> by getting the word out. Tell your friends,  <a href="https://twitter.com/intent/tweet?text=Plain%20Org%20https%3A%2F%2Fapps.apple.com%2Fapp%2Fid1578965002%20">tweet</a>, or blog about it.
</p>

 <p>
On to v1.3 release notes…
</p>
</div>

 <div id="outline-container-org0402d84" class="outline-3">
 <h3 id="org0402d84">Toggle recurring tasks</h3>
 <div class="outline-text-3" id="text-org0402d84">
 <p>
You can now toggle recurring tasks with either catchup  <code><2022-04-15 Fri ++1d></code>, restart  <code><2022-04-15 Fri .+1d></code>, or cumulate  <code><2022-04-15 Fri +1d></code> repeaters.
</p>


 <div id="org5213250" class="figure">
 <p> <img src="../images/plain-org-v130-released/recurring.gif" alt="recurring.gif" width="50%" height="50%"></img></p>
</div>
</div>
</div>

 <div id="outline-container-org28ee75b" class="outline-3">
 <h3 id="org28ee75b">Log state transitions</h3>
 <div class="outline-text-3" id="text-org28ee75b">

 <div id="org899e7d3" class="figure">
 <p> <img src="../images/plain-org-v130-released/logging.gif" alt="logging.gif" width="50%" height="50%"></img></p>
</div>
</div>
</div>

 <div id="outline-container-org0c797d6" class="outline-3">
 <h3 id="org0c797d6">Fullscreen view</h3>
 <div class="outline-text-3" id="text-org0c797d6">
 <p>
The navigation bar now hides on scroll. This can be enabled/disabled via  <code>View > Full Screen</code> menu.
</p>


 <div id="org186f267" class="figure">
 <p> <img src="../images/plain-org-v130-released/fullscreen.gif" alt="fullscreen.gif" width="50%" height="50%"></img></p>
</div>

 <p>
The previous screenshot text comes from  <a href="http://doc.norang.ca/org-mode.html">Org Mode - Organize Your Life In Plain Text</a>, a magnificent org resource.
</p>
</div>
</div>

 <div id="outline-container-org26586fb" class="outline-3">
 <h3 id="org26586fb">Deadline and scheduled date rendered</h3>
 <div class="outline-text-3" id="text-org26586fb">
 <p>
In the past,  <code>SCHEDULED</code> and  <code>DEADLINE</code> were rendered (but only one of them at a time). Now both are rendered alongside each other (deadline has an orange tint).
</p>


 <div id="org55e2623" class="figure">
 <p> <img src="../images/plain-org-v130-released/deadline_scheduled.png" alt="deadline_scheduled.png" width="50%" height="50%"></img></p>
</div>
</div>
</div>

 <div id="outline-container-org176fa9c" class="outline-3">
 <h3 id="org176fa9c">Roundtripping fidelity</h3>
 <div class="outline-text-3" id="text-org176fa9c">
 <p>
Many roundtripping fidelity improvements included in 1.3. Shoutout to  <a href="https://www.reddit.com/user/Oerm/">u/Oerm</a> who reported  <a href="https://www.reddit.com/r/plainorg/comments/ty7onh/changing_todo_status_of_one_item_triggers/">unnecessary formatting changes</a> in unmodified areas and helped test all fixes.
</p>
</div>
</div>

 <div id="outline-container-org66372d7" class="outline-3">
 <h3 id="org66372d7">Other bug fixes improvements</h3>
 <div class="outline-text-3" id="text-org66372d7">
 <ul class="org-ul"> <li>Disable raw text edit menu when file is not accessible.</li>
 <li>Minor improvements to inline editing layouts (vertical height and drawers).</li>
 <li>ABRT and HABIT now recognized as a popular keywords.</li>
 <li>Improve state transition alignment to match org mode behaviour.</li>
 <li>Fixes roundtripping state transition notes (leading to data loss).</li>
 <li>Log creation from share sheet.</li>
 <li>Increment DEADLINE  <b>and</b> SCHEDULED, not just first found.</li>
 <li>Roundtrip more whitespace in untouched areas.</li>
 <li>Fixes org syntax inadvertently parsed within begin_src blocks (leading to data loss).</li>
</ul></div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/plain-org-v130-released</link>
  <guid isPermaLink="false">http://xenodium.com/plain-org-v130-released</guid>
  <pubDate>Fri, 15 Apr 2022 00:00:00 +0100</pubDate>
</item>
<item>
  <title>Plain Org v1.2.1 released</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-plain-org-v121-released" class="outline-2">
 <h2 id="plain-org-v121-released"> <span class="timestamp-wrapper"> <span class="timestamp">27 March 2022</span></span> Plain Org v1.2.1 released</h2>
 <div class="outline-text-2" id="text-plain-org-v121-released">
 <p>
 <a href="https://plainorg.com">Plain Org</a> v1.2.1 is now available on the  <a href="https://apps.apple.com/app/id1578965002">App Store</a>. The update receives minor features, bug fixes, and improvements.
</p>

 <p>
If you haven't heard of  <a href="https://plainorg.com">Plain Org</a>, it gives you access to  <a href="https://orgmode.org">org</a> files on iPhone while away from your beloved  <a href="https://www.gnu.org/software/emacs/">Emacs</a>.
</p>

 <p>
I love org markup, but we (iPhone + org users) are a fairly niche userbase. If you're finding Plain Org useful,  <b>please help support this effort</b> by getting the word out. Tell your friends,  <a href="https://twitter.com/intent/tweet?text=Plain%20Org%20https%3A%2F%2Fapps.apple.com%2Fapp%2Fid1578965002%20">tweet</a>, or blog about it.
</p>

 <p>
On to v1.2.1 release notes…
</p>
</div>

 <div id="outline-container-orgca39bae" class="outline-3">
 <h3 id="orgca39bae">Render LOGBOOK</h3>
 <div class="outline-text-3" id="text-orgca39bae">
 <p>
State transitions and LOGBOOK drawers are now recognized and rendered as such.
</p>

 <p>
Either of the following snippets are rendered as togglable LOGBOOK drawers.
</p>

 <div class="org-src-container">
 <pre class="src src-org">* TODO Feed the fish
- State "DONE"       from "TODO"       [2022-03-11 Fri 12:23]
</pre>
</div>

 <div class="org-src-container">
 <pre class="src src-org">* TODO Feed the cat
:LOGBOOK:
- State "DONE"       from "TODO"       [2022-03-11 Fri 12:23]
:END:
</pre>
</div>


 <div id="orgbc7229b" class="figure">
 <p> <img src="../images/plain-org-v121-released/logbook.jpg" alt="logbook.jpg" width="50%" height="50%"></img></p>
</div>
</div>
</div>

 <div id="outline-container-org8da00b4" class="outline-3">
 <h3 id="org8da00b4">Add task to top/bottom</h3>
 <div class="outline-text-3" id="text-org8da00b4">
 <p>
Up until now, tasks were always appended to the bottom of things. This didn't work so well if you like seeing recent items bubbling up to the top.
</p>

 <p>
This version adds a new setting:  <i>Settings</i> >  <i>Add new tasks to</i> >  <i>Top/Bottom</i>, giving you the choice.
</p>

 <p>
Note: Top is the new default value, please change this setting if you'd like to keep the previous behaviour.
</p>


 <div id="org0297107" class="figure">
 <p> <img src="../images/plain-org-v121-released/top_bottom.png" alt="top_bottom.png" width="50%" height="50%"></img></p>
</div>
</div>
</div>


 <div id="outline-container-org7038735" class="outline-3">
 <h3 id="org7038735">Checking for changes</h3>
 <div class="outline-text-3" id="text-org7038735">
 <p>
Local file changes aren't always detected via  <a href="https://developer.apple.com/documentation/uikit/uidocument/1619945-statechangednotification">state change notifications</a>, so additional checks are now in place to offer reloading files.
</p>


 <div id="org00adc35" class="figure">
 <p> <img src="../images/plain-org-v121-released/reload.jpg" alt="reload.jpg" width="50%" height="50%"></img></p>
</div>
</div>
</div>

 <div id="outline-container-org129c249" class="outline-3">
 <h3 id="org129c249">Open inactive files</h3>
 <div class="outline-text-3" id="text-org129c249">
 <p>
After adding new tasks via iOS's share sheet, if the item was added to a file other than the active one, offer to open that instead.
</p>


 <div id="orgf46f0e8" class="figure">
 <p> <img src="../images/plain-org-v121-released/load_other.jpg" alt="load_other.jpg" width="50%" height="50%"></img></p>
</div>
</div>
</div>

 <div id="outline-container-org3066a87" class="outline-3">
 <h3 id="org3066a87">Other improvements</h3>
 <div class="outline-text-3" id="text-org3066a87">
 <ul class="org-ul"> <li>Color keyword red/green depending on #+TODO: position.</li>
 <li>Round-trip planning order (SCHEDULED, CLOSED, DEADLINE).</li>
 <li>Improve tag alignment to match org mode behaviour (best effort, sorry).</li>
 <li>Improve vertical spacing prior to lists.</li>
 <li>Improve share sheet reliability.</li>
 <li>Fix opening local links from list items.</li>
 <li>Fix indent for list items without previous content.</li>
 <li>Fix race condition in adding TITLE and ID to new files.</li>
 <li>Fix incorrect keyword color selection in search toolbar.</li>
 <li>Fix menu inadvertently closing.</li>
 <li>Fix menu tapping for iPad.</li>
</ul></div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/plain-org-v121-released</link>
  <guid isPermaLink="false">http://xenodium.com/plain-org-v121-released</guid>
  <pubDate>Sun, 27 Mar 2022 00:00:00 +0000</pubDate>
</item>
<item>
  <title>Emacs DWIM: swiper vs isearch vs phi-search</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-emacs-dwim-swiper-vs-isearch-vs-phi-search" class="outline-2">
 <h2 id="emacs-dwim-swiper-vs-isearch-vs-phi-search"> <span class="timestamp-wrapper"> <span class="timestamp">26 March 2022</span></span> Emacs DWIM: swiper vs isearch vs phi-search</h2>
 <div class="outline-text-2" id="text-emacs-dwim-swiper-vs-isearch-vs-phi-search">

 <div id="org59a9ee8" class="figure">
 <p> <img src="../images/emacs-dwim-swiper-vs-isearch-vs-phi-search/search-dwim.gif" alt="search-dwim.gif" width="75%" height="75%"></img></p>
</div>

 <p>
I've  <a href="https://xenodium.com/emacs-dwim-do-what-i-mean/">talked about DWIM</a> in the past, that wonderful Emacs ability to  <a href="https://en.wikipedia.org/wiki/DWIM">do what ✨I✨ mean</a>.
</p>

 <p>
Emacs being hyper-configurable, we can always teach it more things, so it can do exactly what we mean.
</p>

 <p>
There are no shortages of buffer searching packages for Emacs. I'm a fan of Oleh Krehel's  <a href="https://github.com/abo-abo/swiper">swiper</a>, but before that, I often relied on the built-in  <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Basic-Isearch.html">isearch</a>. Swiper is my default goto mechanism and have it bound to  <code>C-s</code> (replacing the built-in  <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Basic-Isearch.html">isearch-forward</a>).
</p>

 <p>
Swiper services most needs until I start combining with other tools. Take  <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Keyboard-Macros.html">keyboard macros</a> and  <a href="https://github.com/magnars/multiple-cursors.el">multiple cursors</a>. Both wonderful, but neither can rely on swiper to do their thing. Ok, swiper does, but  <a href="https://xenodium.com/emacs-swiper-and-multiple-cursors/">in a different way</a>.
</p>

 <p>
Rather than binding  <code>C-s</code> to swiper, let's write a DWIM function that's aware of macros and multiple cursors. It must switch between swiper, isearch, and  <a href="https://github.com/avkoval/phi-search">phi-search</a> depending on what I want (search buffer, define macro, or search multiple cursors).
</p>

 <p>
Let's also tweak swiper's behavior a little further and prepopulate its search term with the active region. Oh, and I also would like swiper to wrap around (see  <a href="http://oremacs.com/swiper/">ivy-wrap</a>). But only swiper, not other ivy utilities. I know, I'm picky, but that's the whole point of DWIM… so here's my function to search forward that does exactly what ✨I✨ mean:
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">ar/swiper-isearch-dwim</span> ()
  (<span style="color: #a71d5d;">interactive</span>)
   <span style="color: #969896;">;; </span> <span style="color: #969896;">Are we using multiple cursors?</span>
  (<span style="color: #a71d5d;">cond</span> ((<span style="color: #a71d5d;">and</span> (boundp 'multiple-cursors-mode)
              multiple-cursors-mode
              (fboundp  'phi-search))
         (call-interactively 'phi-search))
         <span style="color: #969896;">;; </span> <span style="color: #969896;">Are we defining a macro?</span>
        (defining-kbd-macro
          (call-interactively 'isearch-forward))
         <span style="color: #969896;">;; </span> <span style="color: #969896;">Fall back to swiper.</span>
        (t
          <span style="color: #969896;">;; </span> <span style="color: #969896;">Wrap around swiper results.</span>
         (<span style="color: #a71d5d;">let</span> ((ivy-wrap t))
            <span style="color: #969896;">;; </span> <span style="color: #969896;">If region is active, prepopulate swiper's search term.</span>
           (<span style="color: #a71d5d;">if</span> (<span style="color: #a71d5d;">and</span> transient-mark-mode mark-active (not (eq (mark) (point))))
               (<span style="color: #a71d5d;">let</span> ((region (buffer-substring-no-properties (mark) (point))))
                 (deactivate-mark)
                 (swiper-isearch region))
             (swiper-isearch))))))
</pre>
</div>

 <p>
The above snippet searches forward, but I'm feeling a little off-balance. Let's write an equivalent to search backwards. We can then bind it to  <code>C-r</code>, also overriding the built-in  <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Basic-Isearch.html">isearch-backward</a>.
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">ar/swiper-isearch-backward-dwim</span> ()
  (<span style="color: #a71d5d;">interactive</span>)
   <span style="color: #969896;">;; </span> <span style="color: #969896;">Are we using multiple cursors?</span>
  (<span style="color: #a71d5d;">cond</span> ((<span style="color: #a71d5d;">and</span> (boundp 'multiple-cursors-mode)
              multiple-cursors-mode
              (fboundp  'phi-search-backward))
         (call-interactively 'phi-search-backward))
         <span style="color: #969896;">;; </span> <span style="color: #969896;">Are we defining a macro?</span>
        (defining-kbd-macro
          (call-interactively 'isearch-backward))
         <span style="color: #969896;">;; </span> <span style="color: #969896;">Fall back to swiper.</span>
        (t
          <span style="color: #969896;">;; </span> <span style="color: #969896;">Wrap around swiper results.</span>
         (<span style="color: #a71d5d;">let</span> ((ivy-wrap t))
            <span style="color: #969896;">;; </span> <span style="color: #969896;">If region is active, prepopulate swiper's search term.</span>
           (<span style="color: #a71d5d;">if</span> (<span style="color: #a71d5d;">and</span> transient-mark-mode mark-active (not (eq (mark) (point))))
               (<span style="color: #a71d5d;">let</span> ((region (buffer-substring-no-properties (mark) (point))))
                 (deactivate-mark)
                 (swiper-isearch-backward region))
             (swiper-isearch-backward))))))
</pre>
</div>

 <p>
These may be on the hacky side of things, but hey… they do the job. If there are better/supported ways of accomplishing a similar thing, I'd love to  <a href="https://twitter.com/xenodium">hear about it</a>.</p>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/emacs-dwim-swiper-vs-isearch-vs-phi-search</link>
  <guid isPermaLink="false">http://xenodium.com/emacs-dwim-swiper-vs-isearch-vs-phi-search</guid>
  <pubDate>Sat, 26 Mar 2022 00:00:00 +0000</pubDate>
</item>
<item>
  <title>Emacs: viewing webp images</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-emacs-viewing-webp-images" class="outline-2">
 <h2 id="emacs-viewing-webp-images"> <span class="timestamp-wrapper"> <span class="timestamp">05 March 2022</span></span> Emacs: viewing webp images</h2>
 <div class="outline-text-2" id="text-emacs-viewing-webp-images">
 <p>
There's a recent reddit post asking how to  <a href="https://www.reddit.com/r/emacs/comments/t76isx/viewing_webp_images_in_emacs/">view webp images in Emacs</a>. I didn't know the answer, but it's something I had wanted for some time. This post was a nice reminder to go and check things out. Was happy to  <a href="https://www.reddit.com/r/emacs/comments/t76isx/comment/hzft7ww/?utm_source=share&utm_medium=web2x&context=3">contribute an answer</a>.
</p>

 <p>
Turns out, it's very simple. Just set  <code>image-use-external-converter</code> and install relevant external tools.
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">setq</span> image-use-external-converter t)
</pre>
</div>

 <p>
I'm a  <code>use-package</code> user, so I prefer to set with:
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">use-package</span>  <span style="color: #0086b3;">image</span>
   <span style="color: #a71d5d;">:custom</span>
   <span style="color: #969896;">;; </span> <span style="color: #969896;">Enable converting external formats (ie. webp) to internal ones.</span>
  (image-use-external-converter t))
</pre>
</div>

 <p>
So what are the external tools needed?  <code>C-h v</code>  <code>image-use-external-converter</code> gives us the info we need:
</p>

 <blockquote>
 <p>
If non-nil, create-image will use external converters for exotic formats.
</p>

 <p>
Emacs handles most of the common image formats (SVG, JPEG, PNG, GIF
and some others) internally, but images that don't have native
support in Emacs can still be displayed if an external conversion
program (like ImageMagick "convert", GraphicsMagick "gm"
or "ffmpeg") is installed.
</p>

 <p>
This variable was added, or its default value changed, in Emacs 27.1.
</p>
</blockquote>

 <p>
I happen to be a macOS user, so I install ImageMagick with:
</p>

 <div class="org-src-container">
 <pre class="src src-sh">brew install imagemagick
</pre>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/emacs-viewing-webp-images</link>
  <guid isPermaLink="false">http://xenodium.com/emacs-viewing-webp-images</guid>
  <pubDate>Sat, 05 Mar 2022 00:00:00 +0000</pubDate>
</item>
<item>
  <title>Emacs: Fuzzy search Apple&apos;s online docs</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-emacs-fuzzy-search-apples-online-docs" class="outline-2">
 <h2 id="emacs-fuzzy-search-apples-online-docs"> <span class="timestamp-wrapper"> <span class="timestamp">21 February 2022</span></span> Emacs: Fuzzy search Apple's online docs</h2>
 <div class="outline-text-2" id="text-emacs-fuzzy-search-apples-online-docs">

 <div id="org138c9aa" class="figure">
 <p> <img src="../images/emacs-fuzzy-search-apples-online-docs/color_search.gif" alt="color_search.gif" width="90%" height="90%"></img></p>
</div>

 <p>
When building software for the Apple ecosystem, Xcode is often the editor of choice. With  <a href="https://www.gnu.org/software/emacs/">Emacs</a> being my personal preference, I rarely find other iOS devs with a similar mindset.
</p>

 <p>
When I saw  <a href="https://twitter.com/konrad1977">Mikael Konradsson</a>'s post describing  <a href="https://www.reddit.com/r/emacs/comments/sndriv/i_finally_got_full_autocompetion_in_swift_with/">his Emacs Swift development setup</a>, I reached out to say hello. While exchanging tips and tricks, the topic of searching Apple's docs came up. It had been a while since I looked into this, so it was a great reminder to revisit the space.
</p>

 <p>
Back in June 2020, I wrote a snippet to  <a href="https://xenodium.com/emacs-search-hackingwithswiftcom/">fuzzy search hackingwithswift.com</a>, using Emacs's  <a href="https://github.com/abo-abo/swiper">ivy</a> completion framework. With a similar online API, we could also search Apple's docs. Turns out, there is and we can we can use it to search  <a href="https://developer.apple.com/search">developer.apple.com</a> from our beloved editor.
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp"> <span style="color: #969896;">;;; </span> <span style="color: #969896;">counsel-apple-search.el -*- lexical-binding: t; -*-</span>

(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">ar/counsel-apple-search</span> ()
   <span style="color: #183691;">"Ivy interface for dynamically querying apple.com docs."</span>
  (<span style="color: #a71d5d;">interactive</span>)
  (<span style="color: #a71d5d;">require</span> ' <span style="color: #0086b3;">request</span>)
  (<span style="color: #a71d5d;">require</span> ' <span style="color: #0086b3;">json</span>)
  (<span style="color: #a71d5d;">require</span> ' <span style="color: #0086b3;">url-http</span>)
  (ivy-read  <span style="color: #183691;">"apple docs: "</span>
            (<span style="color: #a71d5d;">lambda</span> (input)
              (<span style="color: #a71d5d;">let*</span> ((url (url-encode-url (format  <span style="color: #183691;">"https://developer.apple.com/search/search_data.php?q=%s"</span> input)))
                     (c1-width (round (* (- (window-width) 9) 0.3)))
                     (c2-width (round (* (- (window-width) 9) 0.5)))
                     (c3-width (- (window-width) 9 c1-width c2-width)))
                (<span style="color: #a71d5d;">or</span>
                 (ivy-more-chars)
                 (<span style="color: #a71d5d;">let</span> ((request-curl-options (list  <span style="color: #183691;">"-H"</span> (string-trim (url-http-user-agent-string)))))
                   (request url
                      <span style="color: #a71d5d;">:type</span>  <span style="color: #183691;">"GET"</span>
                      <span style="color: #a71d5d;">:parser</span> 'json-read
                      <span style="color: #a71d5d;">:success</span> (<span style="color: #a71d5d;">cl-function</span>
                               (<span style="color: #a71d5d;">lambda</span> (<span style="color: #0086b3;">&key</span> data  <span style="color: #0086b3;">&allow-other-keys</span>)
                                 (ivy-update-candidates
                                  (mapcar (<span style="color: #a71d5d;">lambda</span> (item)
                                            (<span style="color: #a71d5d;">let-alist</span> item
                                              (propertize
                                               (format  <span style="color: #183691;">"%s   %s   %s"</span>
                                                       (truncate-string-to-width (propertize (<span style="color: #a71d5d;">or</span> .title  <span style="color: #183691;">""</span>)
                                                                                             'face '(<span style="color: #a71d5d;">:foreground</span>  <span style="color: #183691;">"yellow"</span>))  <span style="color: #333333;">c1-width nil ?\s </span> <span style="color: #333333;">"…"</span> <span style="color: #333333;">)</span>
                                                       (truncate-string-to-width (<span style="color: #a71d5d;">or</span> .description  <span style="color: #183691;">""</span>) c2-width nil ?\s  <span style="color: #183691;">"…"</span>)
                                                       (truncate-string-to-width (propertize (string-join (<span style="color: #a71d5d;">or</span> .api_ref_data.languages  <span style="color: #183691;">""</span>)  <span style="color: #183691;">"/"</span>)
                                                                                             'face '(<span style="color: #a71d5d;">:foreground</span>  <span style="color: #183691;">"cyan1"</span>))  <span style="color: #333333;">c3-width nil ?\s </span> <span style="color: #333333;">"…"</span> <span style="color: #333333;">))</span>
                                               'url .url)))
                                          (cdr (car data)))))))
                   0))))
             <span style="color: #a71d5d;">:action</span> (<span style="color: #a71d5d;">lambda</span> (selection)
                      (browse-url (concat  <span style="color: #183691;">"https://developer.apple.com"</span>
                                          (get-text-property 0 'url selection))))
             <span style="color: #a71d5d;">:dynamic-collection</span> t
             <span style="color: #a71d5d;">:caller</span> 'ar/counsel-apple-search))
</pre>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/emacs-fuzzy-search-apples-online-docs</link>
  <guid isPermaLink="false">http://xenodium.com/emacs-fuzzy-search-apples-online-docs</guid>
  <pubDate>Mon, 21 Feb 2022 00:00:00 +0000</pubDate>
</item>
<item>
  <title>Plain Org v1.2 released</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-plain-org-v12-released" class="outline-2">
 <h2 id="plain-org-v12-released"> <span class="timestamp-wrapper"> <span class="timestamp">13 February 2022</span></span> Plain Org v1.2 released</h2>
 <div class="outline-text-2" id="text-plain-org-v12-released">
 <p>
Although  <a href="https://plainorg.com">Plain Org</a> v1.2 has been in the  <a href="https://apps.apple.com/app/id1578965002">App Store</a> for a little while, the release write-up was overdue, sorry. The update receives some new features and bugfixes.
</p>

 <p>
If you haven't heard of  <a href="https://plainorg.com">Plain Org</a>, it gives ya access to your  <a href="https://orgmode.org">org files</a> on iOS while away from your beloved  <a href="https://www.gnu.org/software/emacs/">Emacs</a>.
</p>

 <p>
If you're finding Plain Org useful,  <b>please help support this effort</b> by getting the word out. Tell your friends,  <a href="https://twitter.com/intent/tweet?text=Plain%20Org%20https%3A%2F%2Fapps.apple.com%2Fapp%2Fid1578965002%20">tweet</a>, or blog about it.
</p>

 <p>
Ok, now on to what's included in the v1.2 release…
</p>
</div>

 <div id="outline-container-orgc2f4697" class="outline-3">
 <h3 id="orgc2f4697">Edit heading sections inline</h3>
 <div class="outline-text-3" id="text-orgc2f4697">
 <p>
v1.0 introduced outline editing (for headings only). In v1.2, we can also edit section content. Press the  <code>return</code>
 key multiple times to exit out section editing.
</p>


 <div id="org3cfadbf" class="figure">
 <p> <img src="../images/plain-org-v12-released/inline.gif" alt="inline.gif" width="50%" height="50%"></img></p>
</div>
</div>
</div>

 <div id="outline-container-orge184a8a" class="outline-3">
 <h3 id="orge184a8a">Filter by keyword/priority/tag</h3>
 <div class="outline-text-3" id="text-orge184a8a">
 <p>
From the search dialog, you can now filter by keyboard, priority, and tag.
</p>


 <div id="org52e668f" class="figure">
 <p> <img src="../images/plain-org-v12-released/select_filter.png" alt="select_filter.png" width="50%" height="50%"></img></p>
</div>


 <div id="org01a94f0" class="figure">
 <p> <img src="../images/plain-org-v12-released/filter_results.png" alt="filter_results.png" width="50%" height="50%"></img></p>
</div>
</div>
</div>

 <div id="outline-container-orgc9a492e" class="outline-3">
 <h3 id="orgc9a492e">Render drawers and properties</h3>
 <div class="outline-text-3" id="text-orgc9a492e">
 <p>
Drawers are now rendered and can be expanded to view their content.
</p>


 <div id="orgd661b8d" class="figure">
 <p> <img src="../images/plain-org-v12-released/drawer.gif" alt="drawer.gif" width="50%" height="50%"></img></p>
</div>
</div>
</div>

 <div id="outline-container-orgc274980" class="outline-3">
 <h3 id="orgc274980">Open files via the Files app's "Share" sheet</h3>
 <div class="outline-text-3" id="text-orgc274980">
 <p>
From the Files app, you can now explicitly request launching files in Plain Org by using the "Share" menu.
</p>


 <div id="org7b71bf4" class="figure">
 <p> <img src="../images/plain-org-v12-released/share.png" alt="share.png" width="50%" height="50%"></img></p>
</div>
</div>
</div>

 <div id="outline-container-org2d89c31" class="outline-3">
 <h3 id="org2d89c31">Render LaTeX src blocks (experimental)</h3>
 <div class="outline-text-3" id="text-org2d89c31">
 <p>
This one has its rough edges at the moment, so have to mark it  <span class="underline">experimental</span>, but… you can can now render  <code>#+begin_src latex</code> blocks.
</p>


 <div id="orgda1e7ac" class="figure">
 <p> <img src="../images/plain-org-v12-released/latex_src.png" alt="latex_src.png" width="50%" height="50%"></img></p>
</div>


 <div id="org271ca83" class="figure">
 <p> <img src="../images/plain-org-v12-released/latex_render.png" alt="latex_render.png" width="50%" height="50%"></img></p>
</div>
</div>
</div>

 <div id="outline-container-org3262530" class="outline-3">
 <h3 id="org3262530">Insert title/id in new files</h3>
 <div class="outline-text-3" id="text-org3262530">
 <p>
New files created via Plain Org automatically get  <code>#+TITLE:</code> and  <code>:ID:</code> inserted by default as follows:
</p>

 <div class="org-src-container">
 <pre class="src src-org">#+TITLE: My favorite title
:PROPERTIES:
:ID:       7C845D38-8D80-41B5-BEB1-94F673807355
:END:
</pre>
</div>

 <p>
 <i>UPDATE</i>: Sorry, this feature currently has a bug. You may not get these values inserted into your new document. Working on a fix.
</p>
</div>
</div>

 <div id="outline-container-orge1b7f12" class="outline-3">
 <h3 id="orge1b7f12">Adding new tags quicker</h3>
 <div class="outline-text-3" id="text-orge1b7f12">
 <p>
Add tags quicker via the new + button.
</p>


 <div id="org73f82f7" class="figure">
 <p> <img src="../images/plain-org-v12-released/new_tag.png" alt="new_tag.png" width="50%" height="50%"></img></p>
</div>
</div>
</div>

 <div id="outline-container-orgb5f62f2" class="outline-3">
 <h3 id="orgb5f62f2">Enable/disable sticky tags</h3>
 <div class="outline-text-3" id="text-orgb5f62f2">
 <p>
Keywords, indent, and tags are maintained when adding new headings via outline editing. If you prefer disabling sticky tags, this can now be disabled.
</p>


 <div id="orgb95720e" class="figure">
 <p> <img src="../images/plain-org-v12-released/sticky_tags_setting.png" alt="sticky_tags_setting.png" width="50%" height="50%"></img></p>
</div>
</div>
</div>

 <div id="outline-container-orgb63de3d" class="outline-3">
 <h3 id="orgb63de3d">Improved navigation bar</h3>
 <div class="outline-text-3" id="text-orgb63de3d">
 <p>
v1.2 makes the navigation bar feel more at home on your iPhone. It uses a large title which scrolls into the navigation bar.
</p>


 <div id="org118e14a" class="figure">
 <p> <img src="../images/plain-org-v12-released/navbar.gif" alt="navbar.gif" width="50%" height="50%"></img></p>
</div>
</div>
</div>

 <div id="outline-container-orgd7af8b2" class="outline-3">
 <h3 id="orgd7af8b2">Bugfixes</h3>
 <div class="outline-text-3" id="text-orgd7af8b2">
 <ul class="org-ul"> <li>Fix table rendering for iPad width.</li>
 <li>Fix image's horizontal padding.</li>
 <li>Fix adding new tags on new headings.</li>
 <li>Fix snapshotting bug resulting in Syncthing conflicts.</li>
 <li>Fix tapping menu after presenting other dialogs.</li>
 <li>Filter out parenthesis in file-local keywords like  <code>TODO(t)</code>.</li>
 <li>Commit pending inline changes if search is requested.</li>
 <li>Fix opening local links inside tables.</li>
 <li>Roundtrip whitespace in empty headings.</li>
 <li>Roundtrip trailing whitespace when raw-editing heading content.</li>
 <li>Tapping on body content should not toggle expansion.</li>
</ul> <br></br> <div style="text-align: center;">
   <a href="https://apps.apple.com/app/id1578965002">
     <img src="../images/flat-habits-for-ios/download-on-app-store.png" alt="download-on-app-store.png" height="40px"></img></a>
</div>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/plain-org-v12-released</link>
  <guid isPermaLink="false">http://xenodium.com/plain-org-v12-released</guid>
  <pubDate>Sun, 13 Feb 2022 00:00:00 +0000</pubDate>
</item>
<item>
  <title>Happy New Year and forming new habits</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-happy-new-year-and-forming-new-habits" class="outline-2">
 <h2 id="happy-new-year-and-forming-new-habits"> <span class="timestamp-wrapper"> <span class="timestamp">03 January 2022</span></span> Happy New Year and forming new habits</h2>
 <div class="outline-text-2" id="text-happy-new-year-and-forming-new-habits">
 <p>
Hacker News has a  <a href="https://news.ycombinator.com/item?id=29774859">summary of Atomic Habits</a> (the  <a href="https://jamesclear.com/atomic-habits">book</a>). In my case, I really enjoyed reading the entire book. I liked its narrative, mixing  <span class="underline">actionable</span> and  <span class="underline">concrete</span> advice with personal stories and experiments.
</p>

 <p>
After reading Atomic Habits during the first lockdown, I was excited to try out its actionables, specially tracking to keep me honest.
</p>

 <p>
I tried a bunch of iOS apps, but wanted no friction, no tracking, no cloud, no social, no analytics, no account, etc. so eventually
 <a href="https://xenodium.com/frictionless-org-habits-on-ios/">built Flat Habits</a> ( <a href="https://flathabits.com">flathabits.com</a>). Also wanted to own my habit data (as plain text), so I made sure Flat Habits stored its data locally as an org file.
</p>

 <p>
I'm an Emacs nutter and can say the strength in habit tracking lies in removing daily friction from the tracking process itself. A quickly accessible mobile app can really help with that. For me, Emacs plays a less important role here. The plain text part is cherry on top (bringing piece of mind around lock-in). In my case, it's been months since I looked at the plain text file itself from an Emacs org buffer. The iOS app, on the other hand, gets daily usage.
</p>

 <p>
As for forming lasting habits (the actual goal here)… it's been well over a year since I started running as a regular form of exercise. While reading Atomic Habits really changed how I think of habits, a tracker played a crucial part in the daily grind. I happen to have built a tracker that  <a href="https://xenodium.com/flat-habits-meets-org-agenda/">plays nice with Emacs</a>.
</p>

 <p>
It's a new year. If you're looking at forming new habits, you may want some inspiration and also practical and concrete guidance. The book Atomic Habits can help with that. You can decide on which apps and how to implement the tracking process later on. Pen and paper is also a viable option and there are plenty of templates you can download.
</p>

 <p>
There's a surplus of habit-tracking apps on the app stores. I built yet another one for iOS, modeled after my needs.
</p>

 <div style="text-align: center;">
   <img src="../images/flat-habits-for-ios/today_no_filter.png" alt="today_no_filter.png" width="300px" style="padding: 10px;"></img> <img src="../images/flat-habits-for-ios/meditate.png" alt="today_no_filter.png" width="300px" style="padding: 10px;"></img> <a href="https://apps.apple.com/app/id1558358855">
     <img src="../images/flat-habits-for-ios/download-on-app-store.png" alt="today_no_filter.png" height="40px"></img></a>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/happy-new-year-and-forming-new-habits</link>
  <guid isPermaLink="false">http://xenodium.com/happy-new-year-and-forming-new-habits</guid>
  <pubDate>Mon, 03 Jan 2022 00:00:00 +0000</pubDate>
</item>
<item>
  <title>Plain Org v1.1 released 🎄☃️</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-plain-org-v11-released" class="outline-2">
 <h2 id="plain-org-v11-released"> <span class="timestamp-wrapper"> <span class="timestamp">12 December 2021</span></span> Plain Org v1.1 released 🎄☃️</h2>
 <div class="outline-text-2" id="text-plain-org-v11-released">
 <p>
 <a href="https://plainorg.com">Plain Org</a> v1.1 is now available on the  <a href="https://apps.apple.com/app/id1578965002">App Store</a>. The update receives new features and bugfixes.
</p>

 <p>
If you're finding Plain Org useful,  <b>please help support this effort</b> by getting the word out. Tell your friends,  <a href="https://twitter.com/intent/tweet?text=Plain%20Org%20https%3A%2F%2Fapps.apple.com%2Fapp%2Fid1578965002%20">tweet</a>, or blog about it.
</p>
</div>

 <div id="outline-container-org8a7f63f" class="outline-3">
 <h3 id="org8a7f63f">What is Plain Org?</h3>
 <div class="outline-text-3" id="text-org8a7f63f">
 <p>
Ok, now on to what's included in the v1.1 release…
</p>
</div>
</div>

 <div id="outline-container-org79af5d3" class="outline-3">
 <h3 id="org79af5d3">Compact mode</h3>
 <div class="outline-text-3" id="text-org79af5d3">
 <p>
By default, Plain Org layout uses generous padding. The new option  <code>Menu -> View -> Compact mode</code> packs more content into your screen.
</p>


 <div id="org4686f61" class="figure">
 <p> <img src="../images/plain-org-v11-released/compact.gif" alt="compact.gif" width="50%" height="50%"></img></p>
</div>
</div>
</div>

 <div id="outline-container-org4fbb803" class="outline-3">
 <h3 id="org4fbb803">Regroup active and inactive tasks</h3>
 <div class="outline-text-3" id="text-org4fbb803">
 <p>
Regrouping tasks now bubbles active ones up. Similarly, inactive tasks drop to the bottom of their node. Changes are persisted to the org file.
</p>


 <div id="orgc0bc5a3" class="figure">
 <p> <img src="../images/plain-org-v11-released/regroup.gif" alt="regroup.gif" width="50%" height="50%"></img></p>
</div>
</div>
</div>

 <div id="outline-container-org7908dd8" class="outline-3">
 <h3 id="org7908dd8">Native table rendering</h3>
 <div class="outline-text-3" id="text-org7908dd8">
 <p>
Tables are now rendered natively but also support displaying links and other formatting within cells.
</p>


 <div id="org12e3e47" class="figure">
 <p> <img src="../images/plain-org-v11-released/table.gif" alt="table.gif" width="50%" height="50%"></img></p>
</div>
</div>
</div>

 <div id="outline-container-orgf89ef13" class="outline-3">
 <h3 id="orgf89ef13">Open local ID links</h3>
 <div class="outline-text-3" id="text-orgf89ef13">
 <p>
If your file provider supports granting access to folders, local ID links (ie.  <code>id:eb155a82-92b2-4f25-a3c6-0304591af2f9</code>) can now be resolved and opened from Plain Org. Note that for ID links to resolve, other org files must live in either the same directory or a subdirectory.
</p>


 <div id="orgbea7016" class="figure">
 <p> <img src="../images/plain-org-v11-released/idlink.gif" alt="idlink.gif" width="50%" height="50%"></img></p>
</div>
</div>
</div>

 <div id="outline-container-orgebab826" class="outline-3">
 <h3 id="orgebab826">Fill paragraphs</h3>
 <div class="outline-text-3" id="text-orgebab826">
 <p>
If your org paragraphs contain newlines optimizing for bigger screens, you can toggle  <code>Menu -> View -> Fill paragraph</code> to optimize rendering for your iPhone. This rendering option makes no file modifications.
</p>


 <div id="orgacdc339" class="figure">
 <p> <img src="../images/plain-org-v11-released/fillparagraph.gif" alt="fillparagraph.gif" width="50%" height="50%"></img></p>
</div>

 <p>
By the way, the previous screenshot text comes from  <a href="http://doc.norang.ca/org-mode.html">Org Mode - Organize Your Life In Plain Text</a>, a magnificent org resource.
</p>
</div>
</div>

 <div id="outline-container-org98b4b8a" class="outline-3">
 <h3 id="org98b4b8a">Show/hide basic scheduling</h3>
 <div class="outline-text-3" id="text-org98b4b8a">
 <p>
Use the new  <code>Menu -> View -> Scheduling</code> to toggle showing  <code>SCHEDULED</code> or  <code>DEADLINE</code> dates.
</p>


 <div id="orgabb9bc0" class="figure">
 <p> <img src="../images/plain-org-v11-released/scheduling.gif" alt="scheduling.gif" width="50%" height="50%"></img></p>
</div>
</div>
</div>


 <div id="outline-container-org7d713f6" class="outline-3">
 <h3 id="org7d713f6">Show/hide tags</h3>
 <div class="outline-text-3" id="text-org7d713f6">
 <p>
Similarly, the new  <code>Menu -> View -> Tags</code> option toggles displaying tags.
</p>


 <div id="org82a429e" class="figure">
 <p> <img src="../images/plain-org-v11-released/hidetags.gif" alt="hidetags.gif" width="50%" height="50%"></img></p>
</div>
</div>
</div>


 <div id="outline-container-org5721630" class="outline-3">
 <h3 id="org5721630">Native list rendering</h3>
 <div class="outline-text-3" id="text-org5721630">
 <p>
Lists are now rendered natively. With the exception of numbered cases, list items now share a common bullet icon. Description lists are also recognized and receive additional formatting when rendered.
</p>

 <div class="org-src-container">
 <pre class="src src-org">- First list item
* Second list item
+ Third list item
1. Numbered list item
+ Term :: Description for term
</pre>
</div>


 <div id="orgb85e813" class="figure">
 <p> <img src="../images/plain-org-v11-released/listitems.png" alt="listitems.png" width="30%" height="30%"></img></p>
</div>

 <p>
Numbered checkboxes are now recognized and receive the same formatting and interaction as their non-numbered counterparts.
</p>

 <div class="org-src-container">
 <pre class="src src-org">1. [ ] First checkbox
2. [X] Second checkbox
3. [X] Third checkbox
</pre>
</div>


 <div id="org9760596" class="figure">
 <p> <img src="../images/plain-org-v11-released/numbered.png" alt="numbered.png" width="30%" height="30%"></img></p>
</div>
</div>
</div>

 <div id="outline-container-orge98b839" class="outline-3">
 <h3 id="orge98b839">Reload current file</h3>
 <div class="outline-text-3" id="text-orge98b839">
 <p>
Plain Org may not be able to automatically reload files for some syncing providers. In those instances, use  <code>Menu -> Reload</code> to explicitly request a reload.
</p>
</div>
</div>

 <div id="outline-container-org0aee099" class="outline-3">
 <h3 id="org0aee099">Open .txt files</h3>
 <div class="outline-text-3" id="text-org0aee099">
 <p>
Although .org files are plain text files, they aren't always recognized by other text-editing apps. This release enables opening .txt files, so you can choose to render them in Plain Org, while giving you the option to edit elsewhere.
</p>
</div>
</div>

 <div id="outline-container-org9eeabf9" class="outline-3">
 <h3 id="org9eeabf9">Bugfixes</h3>
 <div class="outline-text-3" id="text-org9eeabf9">
 <ul class="org-ul"> <li>Improve vertical whitespace handling.</li>
 <li>Fixes rendering edge cases.</li>
 <li>Fail gracefully when creating new files on unsupported cloud providers.</li>
 <li>Prevent creating new files with redundant extensions.</li>
 <li>File access improvements.</li>
 <li>Replicates property spacing behaviour using Emacs's  <code>org-property-format</code> default value.</li>
 <li>Fixes keyword picker border rendering.</li>
 <li>Improves rendering performance for large nodes.</li>
</ul> <br></br> <div style="text-align: center;">
   <a href="https://apps.apple.com/app/id1578965002">
     <img src="../images/flat-habits-for-ios/download-on-app-store.png" alt="download-on-app-store.png" height="40px"></img></a>
</div>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/plain-org-v11-released</link>
  <guid isPermaLink="false">http://xenodium.com/plain-org-v11-released</guid>
  <pubDate>Sun, 12 Dec 2021 00:00:00 +0000</pubDate>
</item>
<item>
  <title>Emacs bends again</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-emacs-bends-again" class="outline-2">
 <h2 id="emacs-bends-again"> <span class="timestamp-wrapper"> <span class="timestamp">28 November 2021</span></span> Emacs bends again</h2>
 <div class="outline-text-2" id="text-emacs-bends-again">
 <p>
While adding more rendering capabilities to  <a href="https://plainorg.com">Plain Org</a>, it soon became apparent some sort of screenshot/snapshot testing was necessary to prevent regressing existing features. That is, we first generate a rendered snapshot from a given org snippet, followed by some visual inspection, right before we go and save the blessed snapshot (often referred to as golden) to our project. Future changes are validated against the golden snapshot to ensure rendering is still behaving as expected.
</p>

 <p>
Let's say we'd like to validate table rendering with links, we can write a test as follows:
</p>

 <div class="org-src-container">
 <pre class="src src-swift"> <span style="color: #a71d5d;">func</span>  <span style="color: #795da3;">testTableWithLinks</span>()  <span style="color: #a71d5d;">throws</span> {
   <span style="color: #795da3;">assertSnapshot</span>(
    matching: OrgMarkupText. <span style="color: #795da3;">make</span>(
       <span style="color: #183691;">"""</span>
 <span style="color: #183691;">      | URL                    | Org link    |</span>
 <span style="color: #183691;">      |------------------------+-------------|</span>
 <span style="color: #183691;">      | https://flathabits.com | [[https://flathabits.com][Flat Habits]] |</span>
 <span style="color: #183691;">      | Regular text           | Here too    |</span>
 <span style="color: #183691;">      |------------------------+-------------|</span>
 <span style="color: #183691;">      """</span>),
     <span style="color: #a71d5d;">as</span>: . <span style="color: #a71d5d;">image</span>(layout: . <span style="color: #333333;">sizeThatFits</span>))
}
</pre>
</div>

 <p>
The corresponding snapshot golden can be seen below.
</p>


 <div id="org0f706a6" class="figure">
 <p> <img src="../images/emacs-bends-again/testTableWithLinks.1.png" alt="testTableWithLinks.1.png" width="50%"></img></p>
</div>

 <p>
This is all done rather effortlessly thanks to  <a href="https://twitter.com/pointfreeco">Point Free</a>'s wonderful  <a href="https://github.com/pointfreeco/swift-snapshot-testing">swift-snapshot-testing</a> utilities.
</p>

 <p>
So what does any of this have to do with Emacs? You see, as I added more snapshot tests and made modifications to the rendering logic, I needed a quick way to visually inspect and override all goldens. All the main pieces were already there, I just needed some elisp glue to  <i>bend Emacs my way™.</i>
</p>

 <p>
First, I needed to run my Xcode builds from the command line. This is already  <a href="https://developer.apple.com/library/archive/technotes/tn2339/_index.html">supported via xcodebuild</a>. Next, I needed a way to parse test execution data to extract failing tests.  <a href="https://twitter.com/davidahouse">David House</a>'s  <a href="https://github.com/davidahouse/xcodebuild-to-json">xcodebuild-to-json</a> handles this perfectly. What's left? Glue it all up with some elisp.
</p>

 <p>
Beware, the following code snippet is packed with assumptions about my project, it's messy, surely has bugs, can be optimized, etc. But the important point here is that Emacs is such an amazing malleable power tool. Throw some elisp at it and you can to bend it to your liking. After all, it's  <span class="underline">your</span> editor.
</p>

 <p>
And so here we are, I can now run snapshot tests from Emacs using my hacked up  <code>plainorg-snapshot-test-all</code> function and quickly override (or ignore) all newly generated snapshots by merely pressing y/n keys. Oh, and our beloved web browser was also invited to the party. Press "d" to open two browser tabs if you'd like to take a closer look (not demoed below).
</p>

 <p>
Success.  <i>Emacs bends again</i>.
</p>


 <div id="org472517a" class="figure">
 <p> <img src="../images/emacs-bends-again/diff.gif" alt="diff.gif" width="95%"></img></p>
</div>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp"> <span style="color: #969896;">;;; </span> <span style="color: #969896;">-*- lexical-binding: t; -*-</span>

(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">plainorg-snapshot-test-all</span> ()
   <span style="color: #183691;">"Invoke xcodebuild, compare failed tests screenshots side-to-side,</span>
 <span style="color: #183691;">and offer to override them."</span>
  (<span style="color: #a71d5d;">interactive</span>)
  (<span style="color: #a71d5d;">let*</span> ((project (cdr (project-current)))
         (json-tmp-file (make-temp-file  <span style="color: #183691;">"PlainOrg_Tests_"</span> nil  <span style="color: #183691;">".json"</span>))
         (default-directory project))
    (<span style="color: #a71d5d;">unless</span> (file-exists-p (concat project  <span style="color: #183691;">"PlainOrg.xcodeproj"</span>))
      (<span style="color: #333333;">user-error</span>  <span style="color: #183691;">"Not in PlainOrg project"</span>))
    (set-process-sentinel
     (start-process
       <span style="color: #183691;">"xcodebuild"</span>
      (<span style="color: #a71d5d;">with-current-buffer</span>
          (get-buffer-create  <span style="color: #183691;">"*xcodebuild*"</span>)
        (<span style="color: #a71d5d;">let</span> ((inhibit-read-only t))
          (erase-buffer))
        (current-buffer))
       <span style="color: #183691;">"/usr/bin/xcodebuild"</span>
       <span style="color: #183691;">"-scheme"</span>  <span style="color: #183691;">"PlainOrg"</span>  <span style="color: #183691;">"-target"</span>  <span style="color: #183691;">"PlainOrgTests"</span>  <span style="color: #183691;">"-destination"</span>  <span style="color: #183691;">"name=iPhone 13"</span>  <span style="color: #183691;">"-quiet"</span>  <span style="color: #183691;">"test"</span>)
     (<span style="color: #a71d5d;">lambda</span> (p e)
       (<span style="color: #a71d5d;">with-current-buffer</span> (get-buffer  <span style="color: #183691;">"*xcodebuild*"</span>)
         (<span style="color: #a71d5d;">let</span> ((inhibit-read-only t))
           (insert (format  <span style="color: #183691;">"xcodebuild exit code: %d\n\n"</span> (process-exit-status p)))))
       (<span style="color: #a71d5d;">when</span> (not (eq 0 (process-exit-status p)))
         (set-process-sentinel
          (start-process
            <span style="color: #183691;">"xcodebuild-to-json"</span>
            <span style="color: #183691;">"*xcodebuild*"</span>
            <span style="color: #183691;">"/opt/homebrew/bin/xcodebuild-to-json"</span>
            <span style="color: #183691;">"--derived-data-folder"</span> (format  <span style="color: #183691;">"/Users/%s/Library/Developer/Xcode/DerivedData/"</span>
                                           (user-login-name))  <span style="color: #333333;">"--output"</span> <span style="color: #333333;"> json-tmp-file)</span>
          (<span style="color: #a71d5d;">lambda</span> (p e)
            (<span style="color: #a71d5d;">with-current-buffer</span> (get-buffer  <span style="color: #183691;">"*xcodebuild*"</span>)
              (<span style="color: #a71d5d;">let</span> ((inhibit-read-only t))
                (insert (format  <span style="color: #183691;">"xcodebuild-to-json exit code: %d\n\n"</span> (process-exit-status p)))))
            (<span style="color: #a71d5d;">when</span> (= 0 (process-exit-status p))
              (<span style="color: #a71d5d;">with-current-buffer</span> (get-buffer  <span style="color: #183691;">"*xcodebuild*"</span>)
                (<span style="color: #a71d5d;">let</span> ((inhibit-read-only t))
                  (insert  <span style="color: #183691;">"Screenshot comparison started\n\n"</span>)))
              (plainorg--snapshot-process-json (get-buffer  <span style="color: #183691;">"*xcodebuild*"</span>) json-tmp-file)
              (<span style="color: #a71d5d;">with-current-buffer</span> (get-buffer  <span style="color: #183691;">"*xcodebuild*"</span>)
                (<span style="color: #a71d5d;">let</span> ((inhibit-read-only t))
                  (insert  <span style="color: #183691;">"\nScreenshot comparison finished\n"</span>))
                (read-only-mode +1))))))))
    (switch-to-buffer-other-window  <span style="color: #183691;">"*xcodebuild*"</span>)))

(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">plainorg--snapshot-process-json</span> (result-buffer json)
   <span style="color: #183691;">"Find all failed snapshot tests in JSON and offer to override</span>
 <span style="color: #183691;"> screenshots, comparing them side to side."</span>
  (<span style="color: #a71d5d;">let</span> ((hashtable (<span style="color: #a71d5d;">with-current-buffer</span> (get-buffer-create  <span style="color: #183691;">"*build json*"</span>)
                     (erase-buffer)
                     (insert-file-contents json)
                     (json-parse-buffer))))
    (mapc
     (<span style="color: #a71d5d;">lambda</span> (item)
       (<span style="color: #a71d5d;">when</span> (equal (gethash  <span style="color: #183691;">"id"</span> item)
                     <span style="color: #183691;">"SnapshotTests"</span>)
         (mapc
          (<span style="color: #a71d5d;">lambda</span> (testCase)
            (<span style="color: #a71d5d;">when</span> (<span style="color: #a71d5d;">and</span> (gethash  <span style="color: #183691;">"failureMessage"</span> testCase)
                       (string-match-p  <span style="color: #183691;">"Snapshot does not match reference"</span>
                                       (gethash  <span style="color: #183691;">"failureMessage"</span> testCase)))
              (<span style="color: #a71d5d;">let*</span> ((paths (plainorg--snapshot-screenshot-paths
                             (gethash  <span style="color: #183691;">"failureMessage"</span> testCase)))
                     (override-result (plainorg--snapshot-override-image
                                        <span style="color: #183691;">"Expected screenshot"</span>
                                       (nth 0 paths)  <span style="color: #969896;">;; </span> <span style="color: #969896;">old</span>
                                        <span style="color: #183691;">"Actual screenshot"</span>
                                       (nth 1 paths)  <span style="color: #969896;">;; </span> <span style="color: #969896;">new</span>
                                       (nth 0 paths))))
                (<span style="color: #a71d5d;">when</span> override-result
                  (<span style="color: #a71d5d;">with-current-buffer</span> result-buffer
                    (<span style="color: #a71d5d;">let</span> ((inhibit-read-only t))
                      (insert override-result)
                      (insert  <span style="color: #183691;">"\n"</span>)))))))
          (gethash  <span style="color: #183691;">"testCases"</span> item))))
     (gethash  <span style="color: #183691;">"classes"</span> (gethash  <span style="color: #183691;">"details"</span> hashtable)))))

(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">plainorg--snapshot-screenshot-paths</span> (failure-message)
   <span style="color: #183691;">"Extract a paths list from FAILURE-MESSAGE of the form:</span>

 <span style="color: #183691;">failed - Snapshot does not match reference.</span>

 <span style="color: #183691;">@−</span>
 <span style="color: #183691;">\"/path/to/expected/screenshot.1.png\"</span>
 <span style="color: #183691;">@+</span>
 <span style="color: #183691;">\"/path/to/actual/screenshot.1.png\"</span>

 <span style="color: #183691;">Newly-taken snapshot does not match reference.</span>
 <span style="color: #183691;">"</span>
  (mapcar
   (<span style="color: #a71d5d;">lambda</span> (line)
     (string-remove-suffix  <span style="color: #183691;">"\""</span>
                           (string-remove-prefix  <span style="color: #183691;">"\""</span> line)))
   (seq-filter
    (<span style="color: #a71d5d;">lambda</span> (line)
      (string-prefix-p  <span style="color: #183691;">"\""</span> line))
    (split-string failure-message  <span style="color: #183691;">"\n"</span>))))

(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">plainorg--snapshot-override-image</span> (old-buffer old new-buffer new destination)
  (<span style="color: #a71d5d;">let</span> ((window-configuration (current-window-configuration))
        (action)
        (result))
    (<span style="color: #a71d5d;">unwind-protect</span>
        (<span style="color: #a71d5d;">progn</span>
          (delete-other-windows)
          (split-window-horizontally)
          (switch-to-buffer (<span style="color: #a71d5d;">with-current-buffer</span> (get-buffer-create old-buffer)
                              (<span style="color: #a71d5d;">let</span> ((inhibit-read-only t))
                                (erase-buffer))
                              (insert-file-contents old)
                              (image-mode)
                              (current-buffer)))
          (switch-to-buffer-other-window (<span style="color: #a71d5d;">with-current-buffer</span> (get-buffer-create new-buffer)
                                           (<span style="color: #a71d5d;">let</span> ((inhibit-read-only t))
                                             (erase-buffer))
                                           (insert-file-contents new)
                                           (image-mode)
                                           (current-buffer)))
          (<span style="color: #a71d5d;">while</span> (null result)
            (<span style="color: #a71d5d;">setq</span> action (read-char-choice (format  <span style="color: #183691;">"Override %s? (y)es (n)o (d)iff in browser? "</span>
                                                   (file-name-base old))
                                           '(?y ?n ?d ?q)))
            (<span style="color: #a71d5d;">cond</span> ((eq action ?n)
                   (<span style="color: #a71d5d;">setq</span> result
                         (format  <span style="color: #183691;">"Keeping old %s"</span> (file-name-base old))))
                  ((eq action ?y)
                   (copy-file new old t)
                   (<span style="color: #a71d5d;">setq</span> result
                         (format  <span style="color: #183691;">"Overriding old %s"</span> (file-name-base old))))
                  ((eq action ?d)
                   (shell-command (format  <span style="color: #183691;">"open -a Firefox %s --args --new-tab"</span> old))
                   (shell-command (format  <span style="color: #183691;">"open -a Firefox %s --args --new-tab"</span> new)))
                  ((eq action ?q)
                   (set-window-configuration window-configuration)
                   (<span style="color: #a71d5d;">setq</span> result (format  <span style="color: #183691;">"Quit %s"</span> (file-name-base old)))))))
      (set-window-configuration window-configuration)
      (kill-buffer old-buffer)
      (kill-buffer new-buffer))
    result))
</pre>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/emacs-bends-again</link>
  <guid isPermaLink="false">http://xenodium.com/emacs-bends-again</guid>
  <pubDate>Sun, 28 Nov 2021 00:00:00 +0000</pubDate>
</item>
<item>
  <title>Plain Org has joined the chat (iOS)</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-plain-org-has-joined-the-chat" class="outline-2">
 <h2 id="plain-org-has-joined-the-chat"> <span class="timestamp-wrapper"> <span class="timestamp">10 November 2021</span></span> Plain Org has joined the chat (iOS)</h2>
 <div class="outline-text-2" id="text-plain-org-has-joined-the-chat">
 <p>
The App Store is a crowded space when it come to markdown apps. A quick search yields a wonderful wealth of choice. Kinda overwhelming, but a great problem to have nonetheless.
</p>

 <p>
For those of us with org as our markup of choice, the App Store is far less crowded. I wish we could fill more than a screen's worth of search results, so you know… I could show you another pretty gif scrolling through org results. For now, we'll settle on a single frame showcasing our 4 org options.
</p>


 <div id="org6eeb2e0" class="figure">
 <p> <img src="../images/plain-org-has-joined-the-chat/store-side-comparison-mid.gif" alt="store-side-comparison-mid.gif" width="80%"></img></p>
</div>

 <p>
 <a href="https://beorg.app/">Beorg</a>,  <a href="http://mobileorg.github.io/">MobileOrg</a>,  <a href="https://flathabits.com/">Flat Habits</a>, and  <a href="https://orgro.org/">Orgro</a> are all great options. Each with strengths of their own.  <a href="https://organice.200ok.ch/">Organice</a>, while not on the App Store, is another option for those looking for a web alternative. Of these, I had already authored one of them. More on that in a sec… You see, about a year ago I wanted to play with Swift, SPM, and lsp itself. Also, having Swift code completion in Emacs via  <a href="https://github.com/emacs-lsp/lsp-sourcekit">lsp-sourcekit</a> sounded like a fun thing to try out, so I started using it while writing a Swift org parser.
</p>


 <div id="org9c11256" class="figure">
 <p> <img src="../images/plain-org-has-joined-the-chat/magit.png" alt="magit.png" width="75%"></img></p>
</div>

 <p>
While working on the parser, I happened to be reading  <a href="https://jamesclear.com/atomic-habits">Atomic Habits</a> (awesome book btw)… It was also a great time to play around with SwiftUI, which by the way, is pretty awesome too. With Atomic Habits fresh in mind, org parser in one hand, and SwiftUI in the other, I built  <a href="https://flathabits.com">Flat Habits</a>: a lightweight habit tracker powered by org.
</p>


 <div id="orgabf2b99" class="figure">
 <p> <img src="../images/frictionless-org-habits-on-ios/flat_habits.gif" alt="flat_habits.gif" width="80%" height="80%"></img></p>
</div>

 <p>
I love being able to save habit data to plain text and easily track on my iPhone (via Flat Habits) or laptop (via Emacs). I wanted to  <a href="https://xenodium.com/org-habits-on-ios-check-tasks-youre-next/">extend similar convenience to org tasks</a>, so I built  <a href="https://plainorg.com">Plain Org</a>.
</p>

 <p>
My previous  <a href="https://xenodium.com/org-habits-on-ios-check-tasks-youre-next/">post</a> mentioned  <i>quickly adding new tasks and searching existing ones</i> as Plain Org's driving goals. Of course, neither of those are as useful without automatic cloud syncing, so pluging into  <a href="https://support.apple.com/en-gb/HT206481#thirdparty">iOS's third party cloud support</a> was a must-have.
</p>

 <p>
With these baseline features in place, I  <a href="https://www.reddit.com/r/orgmode/comments/p5bonn/ios_plain_org_alpha_builds_now_on_testflight_dm/">started an alpha/beta group</a> via  <a href="https://testflight.apple.com/">TestFlight</a>. Early Plain Org adopters have been wonderfully supportive, given lots of great feedback, and helped shape the initial feature set you see below.
</p>

 <p>
 <i>There's plenty more that can be supported, but hey let's get v1 out the door. Gotta start somewhere.</i>
</p>
</div>

 <div id="outline-container-org2776e6e" class="outline-3">
 <h3 id="org2776e6e">Plain Org v1 features</h3>
 <div class="outline-text-3" id="text-org2776e6e">
 <ul class="org-ul"> <li>View and edit your org mode tasks while on the go.</li>
 <li>Beautifully rendered org markup.</li>
 <li>Sync your org files using your favorite cloud provider.</li>
 <li>Create new files.</li>
 <li>Outline-style editing with toolbar
 <ul class="org-ul"> <li>Keywords</li>
 <li>Indent</li>
 <li>Priority</li>
 <li>Tags</li>
 <li>Formatting: bold, italic, underline, strikethrough, verbatim, and code.</li>
</ul></li>
 <li>Add links from Safari via share extension.</li>
 <li>Add new tasks via Spotlight.</li>
 <li>Reorder headings via drag/drop.</li>
 <li>Checkboxes
 <ul class="org-ul"> <li>Interactive toggling.</li>
 <li>Quickly reset multiple checkboxes.</li>
</ul></li>
 <li>Follow local links.</li>
 <li>Show inline images.</li>
 <li>File-local keywords and visibility.</li>
 <li>Filter open/closed tasks.</li>
 <li>Show/hide stars.</li>
 <li>Edit raw text.</li>
 <li>Light/dark mode.</li>
</ul></div>
</div>

 <div id="outline-container-orga170ef9" class="outline-3">
 <h3 id="orga170ef9">Plain Org joins the chat</h3>
 <div class="outline-text-3" id="text-orga170ef9">
 <p>
Today Plain Org joins the likes of  <a href="https://beorg.app/">Beorg</a>,  <a href="http://mobileorg.github.io/">MobileOrg</a>,  <a href="https://flathabits.com/">Flat Habits</a>, and  <a href="https://orgro.org/">Orgro</a> on the App Store.
</p>


 <div id="orgb428aa5" class="figure">
 <p> <img src="../images/plain-org-has-joined-the-chat/intro.png" alt="intro.png" width="50%"></img></p>
</div>

 <br></br> <div style="text-align: center;">
   <a href="https://apps.apple.com/app/id1578965002">
     <img src="../images/flat-habits-for-ios/download-on-app-store.png" alt="download-on-app-store.png" height="40px"></img></a>
</div>

 <p style="text-align: center;">
  This post was written in    <a href="https://orgmode.org">org mode</a>.
</p>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/plain-org-has-joined-the-chat</link>
  <guid isPermaLink="false">http://xenodium.com/plain-org-has-joined-the-chat</guid>
  <pubDate>Wed, 10 Nov 2021 00:00:00 +0000</pubDate>
</item>
<item>
  <title>Plain Org for iOS (a month later)</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-plain-org-for-ios-a-month-later" class="outline-2">
 <h2 id="plain-org-for-ios-a-month-later"> <span class="timestamp-wrapper"> <span class="timestamp">19 September 2021</span></span> Plain Org for iOS (a month later)</h2>
 <div class="outline-text-2" id="text-plain-org-for-ios-a-month-later">
 <p>
A month ago, I posted about my desire to  <a href="https://xenodium.com/org-habits-on-ios-check-tasks-youre-next/">bring org tasks/TODOs to iOS</a> and make them quickly available from my iPhone.
</p>

 <p>
Since then, I've received some great feedback, which I've been slowly chipping away at. My intent isn't so much to move my org workflow over to iOS, but to supplement Emacs while away from my laptop.
</p>

 <p>
As of now, this is what the inline edit experience looks like:
</p>


 <div id="org06ceb21" class="figure">
 <p> <img src="../images/plain-org-for-ios-a-month-later/inline_keyword_toolbar.gif" alt="inline_keyword_toolbar.gif" width="50%" height="50%"></img></p>
</div>

 <p>
If, like me, you prefer dark mode. The app's got ya covered:
</p>


 <div id="org54d1d8f" class="figure">
 <p> <img src="../images/plain-org-for-ios-a-month-later/dark.png" alt="dark.png" width="50%" height="50%"></img></p>
</div>

 <p>
 <i>Plain Org</i> is not yet available on the App Store, but you can get a TestFlight invite if you send me an email address. Ping me on  <a href="https://www.reddit.com/user/xenodium">reddit</a>,  <a href="https://twitter.com/xenodium">twitter</a>, or email me at "plainorg" + "@" + "xenodium.com".
</p>

 <p>
You can also check out progress over at the  <a href="https://www.reddit.com/r/plainorg/">r/plainorg</a> subreddit.
</p>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/plain-org-for-ios-a-month-later</link>
  <guid isPermaLink="false">http://xenodium.com/plain-org-for-ios-a-month-later</guid>
  <pubDate>Sun, 19 Sep 2021 00:00:00 +0100</pubDate>
</item>
<item>
  <title>Org habits on iOS? Check! Tasks, you&apos;re next</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-org-habits-on-ios-check-tasks-youre-next" class="outline-2">
 <h2 id="org-habits-on-ios-check-tasks-youre-next"> <span class="timestamp-wrapper"> <span class="timestamp">19 August 2021</span></span> Org habits on iOS? Check! Tasks, you're next</h2>
 <div class="outline-text-2" id="text-org-habits-on-ios-check-tasks-youre-next">
 <p>
I'm an  <a href="https://orgmode.org">org mode</a> fan. This blog is powered by org. It's more of an accidental blog that started as a  <a href="https://github.com/xenodium/xenodium.github.io/blob/master/index.org">single org file</a> keeping notes. I use  <a href="https://orgmode.org/worg/org-contrib/babel/intro.html">org babel</a> too. Oh and  <a href="https://orgmode.org/manual/Tracking-your-habits.html">org habits</a>. My never-ending list of TODOs is also powered by org. I manage all of this from Emacs and peek at TODOs using  <a href="https://orgmode.org/manual/Agenda-Views.html">org agenda</a>. This all works really well while I'm sitting in front of my laptop running Emacs.
</p>

 <p>
But then I'm away from my laptop… and I need to quickly record habits on the go. I need it to be low-friction. Ssh'ing to an Emacs instance from a smartphone isn't an option. I'm an iPhone user, so whatever the solution, it should play nice with Emacs and org mode. I built  <a href="https://flathabits.com">Flat Habits</a> for habit tracking and I'm fairly happy with the result. As of today, my longest-tracked habit is on a 452-day streak.
</p>


 <div id="orgcad20f6" class="figure">
 <p> <img src="../images/frictionless-org-habits-on-ios/flat_habits.gif" alt="flat_habits.gif" width="80%" height="80%"></img></p>
</div>

 <p>
Moving on to org tasks/TODOs… I want something fairly frictionless while on the go. With  <i>Flat Habits</i> as a stepping stone, I can now reuse some parts to build  <a href="https://reddit.com/r/plainorg">Plain Org</a>. This new app should give me quick access to my tasks. The two driving goals are: quickly add new tasks and search existing ones while away from my laptop. Ok, maybe basic editing helps too. Oh and it should sync over cloud, of course.
</p>


 <div id="orgf8ed46e" class="figure">
 <p> <img src="../images/org-habits-on-ios-check-tasks-youre-next/plainorgdemo.gif" alt="plainorgdemo.gif" width="50%" height="50%"></img></p>
</div>

 <p>
I now have an early implementation of sorts,  <a href="https://www.reddit.com/r/plainorg/comments/p5bnji/ios_more_improvements_alpha_builds_now_on/">available on TestFlight</a>. If you'd like to give it a try,  <i>send me an email address</i> to receive the the invite. Ping me on  <a href="https://reddit.com/u/xenodium">reddit</a>,  <a href="https://twitter.com/xenodium">twitter</a>, or email me at "plainorg" + "@"  + "xenodium.com".
</p>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/org-habits-on-ios-check-tasks-youre-next</link>
  <guid isPermaLink="false">http://xenodium.com/org-habits-on-ios-check-tasks-youre-next</guid>
  <pubDate>Thu, 19 Aug 2021 00:00:00 +0100</pubDate>
</item>
<item>
  <title>macOS: Show in Finder / Show in Emacs</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-show-in-finder--show-in-emacs" class="outline-2">
 <h2 id="show-in-finder--show-in-emacs"> <span class="timestamp-wrapper"> <span class="timestamp">11 July 2021</span></span> macOS: Show in Finder / Show in Emacs</h2>
 <div class="outline-text-2" id="text-show-in-finder--show-in-emacs">
 <p>
From Christian Tietze's  <a href="https://christiantietze.de/posts/2021/07/open-finder-window-in-dired/">Open macOS Finder Window in Emacs Dired</a>, I learned about  <a href="https://github.com/kaz-yos/reveal-in-osx-finder">reveal-in-osx-finder</a>. This is handy for the few times I want to transition from Emacs to Finder for file management. I say few times since Emacs's directory editor,  <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Dired.html">dired</a>, is just awesome. I've written about dired customizations  <a href="https://xenodium.com/showhide-emacs-dired-details-in-style/">here</a> and  <a href="https://xenodium.com/showhide-emacs-dired-details-in-style/">here</a>, but since dired is  <i>just another buffer,</i> you can apply your Emacs magic like multiple cursors to  <a href="https://xenodium.com/batch-renaming-with-counsel-find-dired-and-wdired/">batch rename files in an editable dired buffer</a>.
</p>

 <p>
To transition from macOS Finder to Emacs, Christian offers an Emacs interactive command that fetches Finder's location and opens a dired buffer via AppleScript. On a similar note, I learned from redditor  <a href="https://www.reddit.com/user/pndc/">u/pndc</a> that  <a href="https://www.reddit.com/r/emacs/comments/ohgz0s/open_macos_finder_windows_path_in_dired/h4p8a8f?utm_source=share&utm_medium=web2x&context=3">Finder's proxy icons can be dragged over to Emacs</a>, which handily drops ya into a dired buffer.
</p>

 <p>
With these two solutions in mind, I looked into a third one to offer a context menu option in Finder to show the file in Emacs. This turned out to be fairly easy using Automator, which I've rarely used.
</p>


 <div id="org5d8cc48" class="figure">
 <p> <img src="../images/show-in-finder--show-in-emacs/show_in_emacs.gif" alt="show_in_emacs.gif" width="50%" height="50%"></img></p>
</div>

 <p>
I created a flow that runs a shell script to "Show in Emacs", revealing the selected file or folder in an dired buffer. This is similar to Christian's solution, but invoked from Finder itself. The flow also uses  <i>dired-goto-file</i> which moves the point (cursor) to the file listed under dired.
</p>


 <div id="org35def27" class="figure">
 <p> <img src="../images/show-in-finder--show-in-emacs/show_in_emacs.png" alt="show_in_emacs.png" width="98%" height="98%"></img></p>
</div>

 <div class="org-src-container">
 <pre class="src src-sh"> <span style="color: #333333;">current_dir</span>=$(dirname  <span style="color: #183691;">"$1"</span>)
osascript -e  <span style="color: #183691;">'tell application "Emacs" to activate'</span>
path/to/emacsclient --eval  <span style="color: #183691;">"(progn (dired \"$current_dir\") (dired-goto-file \"$1\"))"</span>
</pre>
</div>

 <p>
As a bonus, I added an "Open in Emacs" option, which does as it says on the tin. Rather than show the file listed in a dired buffer, it gets Emacs to open it in your favorite major mode. This option is not technically needed since Finder already provides an "Open With" context menu, but it does remove a few click here and there.
</p>


 <div id="org71ad749" class="figure">
 <p> <img src="../images/show-in-finder--show-in-emacs/open_in_emacs.png" alt="open_in_emacs.png" width="98%" height="98%"></img></p>
</div>

 <div class="org-src-container">
 <pre class="src src-sh">osascript -e  <span style="color: #183691;">'tell application "Emacs" to activate'</span>
/Users/alvaro/homebrew/bin/emacsclient --eval  <span style="color: #183691;">"(find-file \"$1\")"</span>
</pre>
</div>

 <p>
On a side note, Emacs defaults to creating new frames when opening files via "Open With" menu (or "open -a Emacs foo.txt"). I prefer to use my existing Emacs frame, which can be accomplished by setting ns-pop-up-frames to nil.
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">setq</span> ns-pop-up-frames nil)
</pre>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/show-in-finder--show-in-emacs</link>
  <guid isPermaLink="false">http://xenodium.com/show-in-finder--show-in-emacs</guid>
  <pubDate>Sun, 11 Jul 2021 00:00:00 +0100</pubDate>
</item>
<item>
  <title>Flat Habits 1.1 released</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-flat-habits-11-released" class="outline-2">
 <h2 id="flat-habits-11-released"> <span class="timestamp-wrapper"> <span class="timestamp">11 July 2021</span></span> Flat Habits 1.1 released</h2>
 <div class="outline-text-2" id="text-flat-habits-11-released">
 <p>
 <a href="https://flathabits.com/">Flat Habits</a> 1.1 is now available on the  <a href="https://apps.apple.com/app/id1558358855">App Store</a>. Flat Habits is a habit tracker that’s mindful of your time, data, and privacy. It's powered by  <a href="https://orgmode.org">org</a> plain text markup, enabling you to use your  <a href="https://xenodium.com/frictionless-org-habits-on-ios/">favorite editor</a> (Emacs, Vim, VSCode, etc.) to poke at your habit data.
</p>
</div>

 <div id="outline-container-orga6037d3" class="outline-3">
 <h3 id="orga6037d3">What's new?</h3>
 <div class="outline-text-3" id="text-orga6037d3">
 <p>
This release implements a few of features requested by users.
</p>
</div>
</div>

 <div id="outline-container-org915cf21" class="outline-3">
 <h3 id="org915cf21">Multiday weekly habits</h3>
 <div class="outline-text-3" id="text-org915cf21">
 <p>
This is the chunkiest addition and most requested feature. You can now select multiple days when scheduling weekly habits.
</p>


 <div id="orgeca85db" class="figure">
 <p> <img src="../images/flat-habits-11-released/multi_day_creation.gif" alt="multi_day_creation.gif" width="50%" height="50%"></img></p>
</div>


 <div id="org4a75402" class="figure">
 <p> <img src="../images/flat-habits-11-released/multi_day_calendar.png" alt="multi_day_calendar.png" width="50%" height="50%"></img></p>
</div>
</div>
</div>

 <div id="outline-container-org40422cf" class="outline-3">
 <h3 id="org40422cf">Historical management</h3>
 <div class="outline-text-3" id="text-org40422cf">
 <p>
Sometimes you forget to mark a habit done or make a mistake toggling one. Either way, you can now toggle any habit day from the calendar/streak view.
</p>
</div>

 <div id="outline-container-org4486460" class="outline-4">
 <h4 id="org4486460">Long tap</h4>
 <div class="outline-text-4" id="text-org4486460">
 <p>
Long tap shows you the editing option available for that day.
</p>


 <div id="org5cde779" class="figure">
 <p> <img src="../images/flat-habits-11-released/long_tap.gif" alt="long_tap.gif" width="50%" height="50%"></img></p>
</div>
</div>
</div>

 <div id="outline-container-org2bd38dd" class="outline-4">
 <h4 id="org2bd38dd">Short tap</h4>
 <div class="outline-text-4" id="text-org2bd38dd">
 <p>
Short tap typically toggles between "Done" and "Not done".
</p>


 <div id="orge0e5f56" class="figure">
 <p> <img src="../images/flat-habits-11-released/short_tap.gif" alt="short_tap.gif" width="50%" height="50%"></img></p>
</div>
</div>
</div>
</div>

 <div id="outline-container-orgd19f6b6" class="outline-3">
 <h3 id="orgd19f6b6">Where's today?</h3>
 <div class="outline-text-3" id="text-orgd19f6b6">
 <p>
A few folks rightfully asked for today's date to be highlighted in the calendar view, and so we now have a red circle.
</p>


 <div id="orgae1ab40" class="figure">
 <p> <img src="../images/flat-habits-11-released/today.png" alt="today.png" width="50%" height="50%"></img></p>
</div>
</div>
</div>

 <div id="outline-container-org80859af" class="outline-3">
 <h3 id="org80859af">Improved error messages</h3>
 <div class="outline-text-3" id="text-org80859af">
 <p>
Hopefully you don't run into issues, but if you do, I hope the app helps ya sort them out.
</p>
</div>
</div>

 <div id="outline-container-orge95a747" class="outline-3">
 <h3 id="orge95a747">Bugfixes</h3>
 <div class="outline-text-3" id="text-orge95a747">
 <ul class="org-ul"> <li>Tapping on blur now dismisses habit edit dialog.</li>
 <li>Future habits now longer editable.</li>
 <li>Skipped habits no longer have a default tap action.</li>
 <li>Undoing from streak/calendar view now refreshes correctly.</li>
 <li>Undoing habit addition on iPad removes streak/calendar view.</li>
</ul></div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/flat-habits-11-released</link>
  <guid isPermaLink="false">http://xenodium.com/flat-habits-11-released</guid>
  <pubDate>Sun, 11 Jul 2021 00:00:00 +0100</pubDate>
</item>
<item>
  <title>Emacs: smarter search and replace</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-emacs-smarter-search-and-replace" class="outline-2">
 <h2 id="emacs-smarter-search-and-replace"> <span class="timestamp-wrapper"> <span class="timestamp">27 June 2021</span></span> Emacs: smarter search and replace</h2>
 <div class="outline-text-2" id="text-emacs-smarter-search-and-replace">

 <div id="orgf0cc982" class="figure">
 <p> <img src="../images/emacs-smarter-search-and-replace/smarter_replace.gif" alt="smarter_replace.gif" width="75%" height="75%"></img></p>
</div>

 <p>
Not long ago, I made a note to go back and read  <a href="https://mac4translators.blogspot.com">Mac for Translators</a>'s  <a href="https://mac4translators.blogspot.com/2021/06/regex-with-elisp.html">Emacs regex with Emacs lisp</a> post. The author highlights Emacs's ability to apply additional logic when replacing text during a search-and-replace session. It does so by leveraging elisp expressions.
</p>

 <p>
Coincidentally, a redditor recently asked  <a href="https://www.reddit.com/r/emacs/comments/o878am/what_is_the_simplest_way_to_apply_a_math_formula/">What is the simplest way to apply a math formula to all numbers in a buffer/region?</a> Some of the answers also point to  <i>search and replace</i> leveraging elisp expressions.
</p>

 <p>
While I rarely need to apply additional logic when replacing matches, it's nice to know we have options  available in our Emacs toolbox. This prompted me to check out  <a href="https://github.com/emacs-mirror/emacs/blob/b8f9e58ef72402e69a1f0960816184d52e5d2d29/lisp/replace.el#L709">replace-regexp</a>'s documentation (via M-x  <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Name-Help.html">describe-function</a> or my favorite M-x  <a href="https://github.com/Wilfred/helpful">helpful-callable</a>). There's lots in there. Go check its docs out. You may be pleasantly surprised by all the features packed under this humble function.
</p>

 <p>
For instance, \& expands to the current match. Similarly, \#& expands to the current match, fed through  <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/String-Conversion.html">string-to-number</a>. But what if you'd like to feed the match to another function? You can use \, to signal evaluation of an elisp expression. In other words, you could multiply by 3 using \,(* 3 \#&) or inserting whether a number is odd or even with something like \,(if (oddp \#&) "(odd)" "(even)").
</p>

 <p>
Take the following text:
</p>

 <pre class="example" id="orgdad3b8b">
1
2
3
4
5
6
</pre>

 <p>
We can label each value "(odd)" or "(even)" as well as multiply by 3, by invoking  <i>replace-regexp</i> as follows:
</p>

 <blockquote>
 <p>
M-x replace-regexp
</p>
</blockquote>

 <p>
[PCRE] Replace regex:
</p>
 <blockquote>
 <p>
[-0-9.]+
</p>
</blockquote>

 <p>
Replace regex [-0-9.]+:
</p>
 <blockquote>
 <p>
\& \,(if (oddp \#&) "(odd)" "(even)") x 3 = \,(* 3 \#&)
</p>
</blockquote>

 <pre class="example" id="org03a694e">
1 (odd) x 3 = 3
2 (even) x 3 = 6
3 (odd) x 3 = 9
4 (even) x 3 = 12
5 (odd) x 3 = 15
6 (even) x 3 = 18
</pre>

 <p>
It's worth noting that  <i>replace-regexp</i>'s cousin  <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Query-Replace.html">query-replace-regexp</a> also handles all this wonderful magic.
</p>

 <p>
Happy searching and replacing!
</p>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/emacs-smarter-search-and-replace</link>
  <guid isPermaLink="false">http://xenodium.com/emacs-smarter-search-and-replace</guid>
  <pubDate>Sun, 27 Jun 2021 00:00:00 +0100</pubDate>
</item>
<item>
  <title>Previewing SwiftUI layouts in Emacs (revisited)</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-previewing-swiftui-layouts-in-emacs-revisited" class="outline-2">
 <h2 id="previewing-swiftui-layouts-in-emacs-revisited"> <span class="timestamp-wrapper"> <span class="timestamp">20 June 2021</span></span> Previewing SwiftUI layouts in Emacs (revisited)</h2>
 <div class="outline-text-2" id="text-previewing-swiftui-layouts-in-emacs-revisited">
 <p>
Back in May 2020, I shared a snippet to extend  <a href="https://github.com/zweifisch/ob-swift">ob-swift</a> to  <a href="https://xenodium.com/swiftui-layout-previews-using-emacs-org-blocks/">preview SwiftUI layouts using Emacs org blocks</a>.
</p>


 <div id="org706da5f" class="figure">
 <p> <img src="../images/swiftui-layout-previews-using-emacs-org-blocks/ob-swiftui.gif" alt="ob-swiftui.gif" width="75%" height="75%"></img></p>
</div>

 <p>
When I say extend, I didn't quite modify ob-swift itself, but rather  <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Advising-Functions.html">advised</a>  <a href="https://github.com/zweifisch/ob-swift/blob/ed478ddbbe41ce5373efde06b4dd0c3663c9055f/ob-swift.el#L37">org-babel-execute:swift</a> to modify its behavior at runtime.
</p>

 <p>
Fast-forward to June 2021 and Scott Nicholes  <a href="https://github.com/zweifisch/ob-swift/issues/4#issuecomment-858196354">reminded me there's still interest</a> in org babel SwiftUI support. ob-swift  <a href="https://github.com/zweifisch/ob-swift/commits/master">seems a little inactive</a>, but no worries there. The package offers great general-purpose Swift support. On the other hand, SwiftUI previews can likely live as a single-purpose package all on its own… and so I set off to bundle the rendering functionality into a new  <a href="https://github.com/xenodium/ob-swiftui">ob-swiftui</a> package.
</p>

 <p>
Luckily, org babel's documentation has a straightforward section to help you  <a href="https://orgmode.org/worg/org-contrib/babel/languages/index.html">develop support for new babel languages</a>. They simplified things by offering  <a href="https://code.orgmode.org/bzg/worg/raw/master/org-contrib/babel/ob-template.el">template.el</a>, which serves as the foundation for your language implementation. For the most part, it's a matter of searching, replacing strings, and removing the bits you don't need.
</p>

 <p>
The elisp core of ob-swiftui is fairly simple. It expands the org block body, inserts the expanded body into a temporary buffer, and finally feeds the code to the Swift toolchain for execution.
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">org-babel-execute:swiftui</span> (body params)
   <span style="color: #183691;">"Execute a block of SwiftUI code in BODY with org-babel header PARAMS.</span>
 <span style="color: #183691;">This function is called by `</span> <span style="color: #0086b3;">org-babel-execute-src-block</span> <span style="color: #183691;">'"</span>
  (message  <span style="color: #183691;">"executing SwiftUI source code block"</span>)
  (<span style="color: #a71d5d;">with-temp-buffer</span>
    (insert (ob-swiftui--expand-body body params))
    (shell-command-on-region
     (point-min)
     (point-max)
      <span style="color: #183691;">"swift -"</span> nil 't)
    (buffer-string)))
</pre>
</div>

 <p>
The expansion in  <i>ob-swiftui–expand-body</i> is a little more interesting. It decorates the block's body, so it can become a fully functional and stand-alone SwiftUI macOS app. If you're familiar with Swift and SwiftUI, the code should be fairly self-explanatory.
</p>

 <p>
From an org babel's perspective, the expanded code is executed whenever we press  <i>C-c C-c</i> (or M-x  <a href="https://orgmode.org/manual/The-Very-Busy-C_002dc-C_002dc-Key.html#The-Very-Busy-C_002dc-C_002dc-Key">org-ctrl-c-ctrl-c</a>) within the block itself.
</p>

 <p>
It's worthing mentioning that our new implementation supports two babel  <a href="https://www.orgmode.org/worg/org-contrib/babel/header-args.html">header arguments</a> (results and view). Both extracted from params using  <a href="https://github.com/emacs-mirror/emacs/blob/3af9e84ff59811734dcbb5d55e04e1fdb7051e77/lisp/emacs-lisp/map.el#L106">map-elt</a> and replaced in the expanded Swift code to enable/disable snapshotting or explicitly setting a SwiftUI root view.
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">ob-swiftui--expand-body</span> (body params)
   <span style="color: #183691;">"Expand BODY according to PARAMS and PROCESSED-PARAMS, return the expanded body."</span>
  (<span style="color: #a71d5d;">let</span> ((write-to-file (member  <span style="color: #183691;">"file"</span> (map-elt params  <span style="color: #a71d5d;">:result-params</span>)))
        (root-view (<span style="color: #a71d5d;">when</span> (<span style="color: #a71d5d;">and</span> (map-elt params  <span style="color: #a71d5d;">:view</span>)
                              (not (string-equal (map-elt params  <span style="color: #a71d5d;">:view</span>)  <span style="color: #183691;">"none"</span>)))
                     (map-elt params  <span style="color: #a71d5d;">:view</span>))))
    (format
      <span style="color: #183691;">"</span>
 <span style="color: #183691;">// Swift snippet heavily based on Chris Eidhof's code at:</span>
 <span style="color: #183691;">// https://gist.github.com/chriseidhof/26768f0b63fa3cdf8b46821e099df5ff</span>

 <span style="color: #183691;">import Cocoa</span>
 <span style="color: #183691;">import SwiftUI</span>
 <span style="color: #183691;">import Foundation</span>

 <span style="color: #183691;">let screenshotURL = URL(fileURLWithPath: NSTemporaryDirectory(), isDirectory: true).appendingPathComponent(ProcessInfo.processInfo.globallyUniqueString + \".png\")</span>
 <span style="color: #183691;">let preview = %s</span>

 <span style="color: #183691;">// Body to run.</span>
 <span style="color: #183691;">%s</span>

 <span style="color: #183691;">extension NSApplication {</span>
 <span style="color: #183691;">  public func run<V: View>(_ view: V) {</span>
 <span style="color: #183691;">    let appDelegate = AppDelegate(view)</span>
 <span style="color: #183691;">    NSApp.setActivationPolicy(.regular)</span>
 <span style="color: #183691;">    mainMenu = customMenu</span>
 <span style="color: #183691;">    delegate = appDelegate</span>
 <span style="color: #183691;">    run()</span>
 <span style="color: #183691;">  }</span>

 <span style="color: #183691;">  public func run<V: View>(@ViewBuilder view: () -> V) {</span>
 <span style="color: #183691;">    let appDelegate = AppDelegate(view())</span>
 <span style="color: #183691;">    NSApp.setActivationPolicy(.regular)</span>
 <span style="color: #183691;">    mainMenu = customMenu</span>
 <span style="color: #183691;">    delegate = appDelegate</span>
 <span style="color: #183691;">    run()</span>
 <span style="color: #183691;">  }</span>
 <span style="color: #183691;">}</span>

 <span style="color: #183691;">extension NSApplication {</span>
 <span style="color: #183691;">  var customMenu: NSMenu {</span>
 <span style="color: #183691;">    let appMenu = NSMenuItem()</span>
 <span style="color: #183691;">    appMenu.submenu = NSMenu()</span>

 <span style="color: #183691;">    let quitItem = NSMenuItem(</span>
 <span style="color: #183691;">      title: \"Quit </span> <span style="color: #333333;">\</span> <span style="color: #183691;">(ProcessInfo.processInfo.processName)\",</span>
 <span style="color: #183691;">      action: #selector(NSApplication.terminate(_:)), keyEquivalent: \"q\")</span>
 <span style="color: #183691;">    quitItem.keyEquivalentModifierMask = []</span>
 <span style="color: #183691;">    appMenu.submenu?.addItem(quitItem)</span>

 <span style="color: #183691;">    let mainMenu = NSMenu(title: \"Main Menu\")</span>
 <span style="color: #183691;">    mainMenu.addItem(appMenu)</span>
 <span style="color: #183691;">    return mainMenu</span>
 <span style="color: #183691;">  }</span>
 <span style="color: #183691;">}</span>

 <span style="color: #183691;">class AppDelegate<V: View>: NSObject, NSApplicationDelegate, NSWindowDelegate {</span>
 <span style="color: #183691;">  var window = NSWindow(</span>
 <span style="color: #183691;">    contentRect: NSRect(x: 0, y: 0, width: 414 * 0.2, height: 896 * 0.2),</span>
 <span style="color: #183691;">    styleMask: [.titled, .closable, .miniaturizable, .resizable, .fullSizeContentView],</span>
 <span style="color: #183691;">    backing: .buffered, defer: false)</span>

 <span style="color: #183691;">  var contentView: V</span>

 <span style="color: #183691;">  init(_ contentView: V) {</span>
 <span style="color: #183691;">    self.contentView = contentView</span>
 <span style="color: #183691;">  }</span>

 <span style="color: #183691;">  func applicationDidFinishLaunching(_ notification: Notification) {</span>
 <span style="color: #183691;">    window.delegate = self</span>
 <span style="color: #183691;">    window.center()</span>
 <span style="color: #183691;">    window.contentView = NSHostingView(rootView: contentView)</span>
 <span style="color: #183691;">    window.makeKeyAndOrderFront(nil)</span>

 <span style="color: #183691;">    if preview {</span>
 <span style="color: #183691;">      screenshot(view: window.contentView!, saveTo: screenshotURL)</span>
 <span style="color: #183691;">      // Write path (without newline) so org babel can parse it.</span>
 <span style="color: #183691;">      print(screenshotURL.path, terminator: \"\")</span>
 <span style="color: #183691;">      NSApplication.shared.terminate(self)</span>
 <span style="color: #183691;">      return</span>
 <span style="color: #183691;">    }</span>

 <span style="color: #183691;">    window.title = \"press q to exit\"</span>
 <span style="color: #183691;">    window.setFrameAutosaveName(\"Main Window\")</span>
 <span style="color: #183691;">    NSApp.activate(ignoringOtherApps: true)</span>
 <span style="color: #183691;">  }</span>
 <span style="color: #183691;">}</span>

 <span style="color: #183691;">func screenshot(view: NSView, saveTo fileURL: URL) {</span>
 <span style="color: #183691;">  let rep = view.bitmapImageRepForCachingDisplay(in: view.bounds)!</span>
 <span style="color: #183691;">  view.cacheDisplay(in: view.bounds, to: rep)</span>
 <span style="color: #183691;">  let pngData = rep.representation(using: .png, properties: [:])</span>
 <span style="color: #183691;">  try! pngData?.write(to: fileURL)</span>
 <span style="color: #183691;">}</span>

 <span style="color: #183691;">// Additional view definitions.</span>
 <span style="color: #183691;">%s</span>
 <span style="color: #183691;">"</span>
     (<span style="color: #a71d5d;">if</span> write-to-file
          <span style="color: #183691;">"true"</span>
        <span style="color: #183691;">"false"</span>)
     (<span style="color: #a71d5d;">if</span> root-view
         (format  <span style="color: #183691;">"NSApplication.shared.run(%s())"</span> root-view)
       (format  <span style="color: #183691;">"NSApplication.shared.run {%s}"</span> body))
     (<span style="color: #a71d5d;">if</span> root-view
         body
        <span style="color: #183691;">""</span>))))
</pre>
</div>

 <p>
For rendering inline SwiftUI previews in Emacs, we rely on NSView's  <a href="https://developer.apple.com/documentation/appkit/nsview/1483440-bitmapimagerepforcachingdisplay">bitmapImageRepForCachingDisplay</a> to capture an image snapshot. We write its output to a temporary file and piggyback-ride off org babel's  <i>:results file</i> header argument to automatically render the image inline.
</p>

 <p>
Here's ob-swiftui inline rendering in action:
</p>


 <div id="org119388e" class="figure">
 <p> <img src="../images/previewing-swiftui-layouts-in-emacs-revisited/obswiftui50.gif" alt="obswiftui50.gif"></img></p>
</div>

 <p>
When rendering SwiftUI externally, we're effectively running and interacting with the generated macOS app itself.
</p>


 <div id="orgc08e716" class="figure">
 <p> <img src="../images/previewing-swiftui-layouts-in-emacs-revisited/ob-swiftui-window.gif" alt="ob-swiftui-window.gif" width="75%" height="75%"></img></p>
</div>

 <p>
The two snippets give a general sense of what's needed to enable org babel to handle SwiftUI source blocks. Having said that, the full source and setup instructions are both available on  <a href="https://github.com/xenodium/ob-swiftui">github</a>.
</p>

 <p>
 <a href="https://github.com/xenodium/ob-swiftui">ob-swiftui</a> is now available on  <a href="https://melpa.org/#/ob-swiftui">melpa</a>.
</p>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/previewing-swiftui-layouts-in-emacs-revisited</link>
  <guid isPermaLink="false">http://xenodium.com/previewing-swiftui-layouts-in-emacs-revisited</guid>
  <pubDate>Sun, 20 Jun 2021 00:00:00 +0100</pubDate>
</item>
<item>
  <title>Blurring the lines between shell and editor</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-yasnippet-in-emacs-eshell" class="outline-2">
 <h2 id="yasnippet-in-emacs-eshell"> <span class="timestamp-wrapper"> <span class="timestamp">19 June 2021</span></span> Blurring the lines between shell and editor</h2>
 <div class="outline-text-2" id="text-yasnippet-in-emacs-eshell">

 <div id="org3f03dea" class="figure">
 <p> <img src="../images/yasnippet-in-emacs-eshell/yas-eshell.gif" alt="yas-eshell.gif" width="75%" height="75%"></img></p>
</div>

 <p>
I recently  <a href="https://twitter.com/xenodium/status/1404746233860837378">tweeted</a> that Vivek Haldar's  <a href="https://blog.vivekhaldar.com/post/3996068979/the-levels-of-emacs-proficiency">10-year old post</a> rings true today just the same. He writes about  <a href="https://blog.vivekhaldar.com/post/3996068979/the-levels-of-emacs-proficiency">the levels of Emacs proficiency</a>. All 6 levels are insightful in their own right, but for the sake of this post, let's quote an extract from level  <i>4. Shell inside Emacs</i>:
</p>

 <blockquote>
 <p>
"And then, you learned about it: M-x shell.
</p>

 <p>
It was all just text. Why did you need another application for it? Why should only the shell prompt be editable? Why can’t I move my cursor up a few lines to where the last command spewed out its results? All these problems simply disappear when your shell (or shells) simply becomes another Emacs buffer, upon which all of the text manipulation power of Emacs can be brought to bear."
</p>
</blockquote>

 <p>
In other words, we aren't merely removing shell restrictions, but opening up possibilities…
</p>

 <p>
Take Emacs eshell looping, for example. I use it so infrequently, I could never remember eshell's syntax. I would refer back to EmacsWiki's  <a href="https://www.emacswiki.org/emacs/EshellForLoop">Eshell For Loop</a> or Mastering Emacs's  <a href="https://masteringemacs.org/article/complete-guide-mastering-eshell">Mastering Eshell</a> comments for a reminder. It finally dawned on me. I don't need to internalize this eshell syntax. I have  <a href="https://github.com/joaotavora/YASnippet">YASnippet</a> available like any other buffer. I could just type "for" and let YASnippet do the rest for me.
</p>


 <div id="org70667ec" class="figure">
 <p> <img src="../images/yasnippet-in-emacs-eshell/yas-for.gif" alt="yas-for.gif" width="75%" height="75%"></img></p>
</div>

 <p>
All I need is a tiny YASnippet:
</p>

 <div class="org-src-container">
 <pre class="src src-YASnippet">#name : Eshell for loop
#key : for
# --
for f in ${1:*} { ${2:echo} "$f"; $3} $0
</pre>
</div>

 <p>
Want a gentle and succinct YASnippet intro? Check out Jake's  <a href="https://www.reddit.com/r/emacs/comments/o282fq/YASnippet_snippetstemplating_introductiontutorial/">YASnippet introduction video</a>.
</p>

 <span class="modified-timestamp">   <em>updated:
  </em></span>
 <p>
If you're a  <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Shell-Mode.html">shell-mode</a> user, YASnippet would have you covered in your favorite shell. The expansion snippet can be modified to a Bash equivalent, giving us the same benefit. We type "for" and let YASnippet expand and hop over arguments. Here's a Bash equivalent emphasizing the hopping a little more:
</p>


 <div id="org5bc080c" class="figure">
 <p> <img src="../images/yasnippet-in-emacs-eshell/yasbash.gif" alt="yasbash.gif" width="75%" height="75%"></img></p>
</div>

 <div class="org-src-container">
 <pre class="src src-YASnippet">#name : bash for loop
#key : for
# --
for f in ${1:*}; do ${2:echo} $f; done $0
</pre>
</div>

 <p>
ps. Looks like  <a href="https://github.com/akermu/emacs-libvterm">vterm</a>,  <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Term-Mode.html">term</a>, or  <a href="https://www.emacswiki.org/emacs/AnsiTerm">ansi-term</a> work too. See Shane Mulligan's post:  <a href="https://mullikine.github.io/posts/use-yasnippets-in-term/">Use YASnippets in term and vterm in emacs</a>.
</p>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/yasnippet-in-emacs-eshell</link>
  <guid isPermaLink="false">http://xenodium.com/yasnippet-in-emacs-eshell</guid>
  <pubDate>Sat, 19 Jun 2021 00:00:00 +0100</pubDate>
</item>
<item>
  <title>Emacs org block completion on melpa</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-emacs-org-block-completion-on-melpa" class="outline-2">
 <h2 id="emacs-org-block-completion-on-melpa"> <span class="timestamp-wrapper"> <span class="timestamp">06 June 2021</span></span> Emacs org block completion on melpa</h2>
 <div class="outline-text-2" id="text-emacs-org-block-completion-on-melpa">
 <p>
When enabled, the character "<" triggers company completion of org blocks.
</p>


 <div id="org6f8fde7" class="figure">
 <p> <img src="../images/emacs-org-block-completion-on-melpa/hello-company-org-block.gif" alt="hello-company-org-block.gif" width="50%" height="50%"></img></p>
</div>

 <p>
I get the occasional ping to package the  <a href="https://xenodium.com/emacs-org-block-company-completion">code from this post</a> and publish it  <a href="https://melpa.org/#/company-org-block">on melpa</a>. Finally gave it a go. Moved the code  <a href="https://github.com/xenodium/company-org-block">here</a>.
</p>

 <p>
This was my first time publishing on melpa. The process was very  <a href="https://github.com/melpa/melpa/pull/7593">smooth</a>. Big thanks to melpa volunteers!
</p>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/emacs-org-block-completion-on-melpa</link>
  <guid isPermaLink="false">http://xenodium.com/emacs-org-block-completion-on-melpa</guid>
  <pubDate>Sun, 06 Jun 2021 00:00:00 +0100</pubDate>
</item>
<item>
  <title>Emacs DWIM: do what ✨I✨ mean</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-emacs-dwim-do-what-i-mean" class="outline-2">
 <h2 id="emacs-dwim-do-what-i-mean"> <span class="timestamp-wrapper"> <span class="timestamp">01 June 2021</span></span> Emacs DWIM: do what ✨I✨ mean</h2>
 <div class="outline-text-2" id="text-emacs-dwim-do-what-i-mean">
 <p>
Update: There's a DWIM  <a href="https://xenodium.com/emacs-dwim-swiper-vs-isearch-vs-phi-search/">follow-up for searching</a>.
</p>


 <div id="org99eb1c6" class="figure">
 <p> <img src="../images/emacs-dwim-do-what-i-mean/do-what-i-mean.gif" alt="do-what-i-mean.gif" width="50%" height="50%"></img></p>
</div>

 <p>
I was a rather puzzled the first time I spotted DWIM in an Emacs interactive command name. Don't think I remember what the command itself was, but what's important here is that  <a href="https://en.wikipedia.org/wiki/DWIM">DWIM</a> stands for  <a href="https://en.wikipedia.org/wiki/DWIM">do what I mean</a>.
</p>

 <p>
I love DWIM interactive commands. They enable commands to be smarter and thus pack more functionality, without incurring the typical cognitive overhead associated with remembering multiple commands (or key bindings). The Emacs manual does a great job describing DWIM for the  <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Comment-Commands.html">comment-dwim</a> command:
</p>

 <pre class="example">
The word “dwim” is an acronym for “Do What I Mean”; it indicates that this command can be used for many different jobs relating to comments, depending on the situation where you use it.
</pre>

 <p>
It's really great to find built-in DWIM-powered Emacs commands. Third-party packages often include them too. I typically gravitate towards these commands and bind them in my Emacs config. Examples being upcase-dwim, downcase-dwim, or mc/mark-all-dwim.
</p>

 <p>
But what if the DWIM command doesn't exist or the author has written a command for what  <i>they</i> mean? This is your editor, so you can make it do what  <i>you</i> mean.
</p>

 <p>
Take for example,  <a href="https://orgmode.org/manual/Handling-Links.html">org-insert-link</a>, bound to  <i>C-c C-l</i> by default. It's handy for inserting  <a href="https://orgmode.org/guide/Hyperlinks.html">org mode links</a>. I used it so frequently that I quickly internalized its key binding. Having said that, I often found myself doing some lightweight preprocessing prior to invoking  <i>org-insert-link</i>. What if I can  <i>make org-insert-link do what I mean</i>?
</p>
</div>

 <div id="outline-container-org325937f" class="outline-3">
 <h3 id="org325937f">What do I mean?</h3>
 <div class="outline-text-3" id="text-org325937f">
</div>
 <div id="outline-container-orga8fd716" class="outline-4">
 <h4 id="orga8fd716">Use URLs when in clipboard</h4>
 <div class="outline-text-4" id="text-orga8fd716">
 <p>
If the URL is already in the clipboard, don't ask me for it. Just use it.
</p>
</div>
</div>

 <div id="outline-container-org6878d6c" class="outline-4">
 <h4 id="org6878d6c">Use the region too</h4>
 <div class="outline-text-4" id="text-org6878d6c">
 <p>
If I have a region selected and there's a URL in the clipboard, just sort it out without user interaction.
</p>


 <div id="org0449590" class="figure">
 <p> <img src="../images/emacs-dwim-do-what-i-mean/link-this-text.gif" alt="link-this-text.gif" width="50%" height="50%"></img></p>
</div>
</div>
</div>


 <div id="outline-container-org7533811" class="outline-4">
 <h4 id="org7533811">Automatically fetch titles</h4>
 <div class="outline-text-4" id="text-org7533811">
 <p>
Automatically fetch URL titles from their HTML tag, but ask me for tweaks before insertion.
</p>


 <div id="org111804b" class="figure">
 <p> <img src="../images/emacs-dwim-do-what-i-mean/do-what-i-mean.gif" alt="do-what-i-mean.gif" width="50%" height="50%"></img></p>
</div>
</div>
</div>

 <div id="outline-container-orgdadaad9" class="outline-4">
 <h4 id="orgdadaad9">Fallback to org-insert-link</h4>
 <div class="outline-text-4" id="text-orgdadaad9">
 <p>
If my DWIM rules don't apply, fall back to using good ol'  <a href="https://orgmode.org/manual/Handling-Links.html">org-insert-link</a>.
</p>

 <p>
My most common use case here is when editing an existing link where I don't want neither its title nor URL automatically handled.
</p>


 <div id="orgb217aa7" class="figure">
 <p> <img src="../images/emacs-dwim-do-what-i-mean/edit-link.gif" alt="edit-link.gif" width="50%" height="50%"></img></p>
</div>
</div>
</div>
</div>

 <div id="outline-container-orgabb9d06" class="outline-3">
 <h3 id="orgabb9d06">The code</h3>
 <div class="outline-text-3" id="text-orgabb9d06">
 <p>
This is your own DWIM command that does what  <i>you</i> mean. Strive to write a clean implementation, but hey you can be forgiven for not handling all the cases that other folks  <i>may</i> want or inlining more code than usual. The goal is to bend your editor a little, not write an Emacs package.
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">ar/org-insert-link-dwim</span> ()
   <span style="color: #183691;">"Like `</span> <span style="color: #0086b3;">org-insert-link</span> <span style="color: #183691;">' but with personal dwim preferences."</span>
  (<span style="color: #a71d5d;">interactive</span>)
  (<span style="color: #a71d5d;">let*</span> ((point-in-link (org-in-regexp org-link-any-re 1))
         (clipboard-url (<span style="color: #a71d5d;">when</span> (string-match-p  <span style="color: #183691;">"^http"</span> (current-kill 0))
                          (current-kill 0)))
         (region-content (<span style="color: #a71d5d;">when</span> (region-active-p)
                           (buffer-substring-no-properties (region-beginning)
                                                           (region-end)))))
    (<span style="color: #a71d5d;">cond</span> ((<span style="color: #a71d5d;">and</span> region-content clipboard-url (not point-in-link))
           (delete-region (region-beginning) (region-end))
           (insert (org-make-link-string clipboard-url region-content)))
          ((<span style="color: #a71d5d;">and</span> clipboard-url (not point-in-link))
           (insert (org-make-link-string
                    clipboard-url
                    (read-string  <span style="color: #183691;">"title: "</span>
                                 (<span style="color: #a71d5d;">with-current-buffer</span> (url-retrieve-synchronously clipboard-url)
                                   (dom-text (car
                                              (dom-by-tag (libxml-parse-html-region
                                                           (point-min)
                                                           (point-max))
                                                          'title))))))))
          (t
           (call-interactively 'org-insert-link)))))
</pre>
</div>
</div>
</div>

 <div id="outline-container-orgb110942" class="outline-3">
 <h3 id="orgb110942">Org web tools package</h3>
 <div class="outline-text-3" id="text-orgb110942">
 <p>
I showed how to write your own DWIM command, so you can make Emacs do what ✨you✨ mean.  <i>ar/org-insert-link-dwim</i> was built for my particular needs.
</p>

 <p>
Having said all of this, alphapapa has built a great package with helpers for the org web/link space. It doesn't do what I mean (for now anyway), but it may work for you:  <a href="https://github.com/alphapapa/org-web-tools">org-web-tools: View, capture, and archive Web pages in Org-mode</a> <sup> <a id="fnr.1" class="footref" href="#fn.1" role="doc-backlink">1</a></sup>.
</p>
</div>
</div>
</div>
 <div id="footnotes">
 <h2 class="footnotes">Footnotes: </h2>
 <div id="text-footnotes">

 <div class="footdef"> <sup> <a id="fn.1" class="footnum" href="#fnr.1" role="doc-backlink">1</a></sup> <div class="footpara" role="doc-footnote"> <p class="footpara">
This link was brought to you by  <i>ar/org-insert-link-dwim</i>.
</p></div></div>


</div>
</div></div>]]></description>
  <link>http://xenodium.com/emacs-dwim-do-what-i-mean</link>
  <guid isPermaLink="false">http://xenodium.com/emacs-dwim-do-what-i-mean</guid>
  <pubDate>Tue, 01 Jun 2021 00:00:00 +0100</pubDate>
</item>
<item>
  <title>Emacs link scraping (2021 edition)</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-emacs-link-scraping-2021-edition" class="outline-2">
 <h2 id="emacs-link-scraping-2021-edition"> <span class="timestamp-wrapper"> <span class="timestamp">28 May 2021</span></span> Emacs link scraping (2021 edition)</h2>
 <div class="outline-text-2" id="text-emacs-link-scraping-2021-edition">

 <div id="org1f4787f" class="figure">
 <p> <img src="../images/emacs-link-scraping-2021-edition/scrape.png" alt="scrape.png" width="95%" height="95%"></img></p>
</div>

 <p>
A recent Hacker News post,  <a href="https://news.ycombinator.com/item?id=27302195">Ask HN: Favorite Blogs by Individuals</a>, led me to dust off my oldie but trusty  <a href="https://github.com/xenodium/dotsies/blob/92ef8259f016cdd4f67caf0e520096f6da4f7a18/emacs/ar/ar-url.el#L42">command to extract comment links</a>. I use it to dissect these wonderful references more effectively.
</p>

 <p>
You see, I wrote this command  <a href="https://xenodium.com/get-emacs-to-gather-links-in-posts/">back in 2015</a>. We can likely revisit and improve. The  <a href="https://github.com/zweifisch/enlive">enlive</a> package continues to do a fine job  <a href="https://github.com/zweifisch/enlive/blob/604a8ca272b6889f114e2b5a13adb5b1dc4bae86/enlive.el#L39">fetching</a>, parsing, and  <a href="https://github.com/zweifisch/enlive/blob/604a8ca272b6889f114e2b5a13adb5b1dc4bae86/enlive.el#L142">querying</a> HTML. Let's improve my code instead… we can shed a few redundant bits and maybe use  <a href="https://xenodium.com/modern-elisp-libraries/">newer libraries and features</a>.
</p>

 <p>
Most importantly, let's improve the user experience by sanitizing and filtering URLs a little better.
</p>

 <p>
We start by writing a function that looks for a URL in the clipboard and subsequently fetches, parses, and extracts all links found in the target page.
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">require</span> ' <span style="color: #0086b3;">enlive</span>)
(<span style="color: #a71d5d;">require</span> ' <span style="color: #0086b3;">seq</span>)

(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">ar/scrape-links-from-clipboard-url</span> ()
   <span style="color: #183691;">"Scrape links from clipboard URL and return as a list. Fails if no URL in clipboard."</span>
  (<span style="color: #a71d5d;">unless</span> (string-prefix-p  <span style="color: #183691;">"http"</span> (current-kill 0))
    (<span style="color: #333333;">user-error</span>  <span style="color: #183691;">"no URL in clipboard"</span>))
  (<span style="color: #a71d5d;">thread-last</span> (enlive-query-all (enlive-fetch (current-kill 0)) [a])
    (mapcar (<span style="color: #a71d5d;">lambda</span> (element)
              (string-remove-suffix  <span style="color: #183691;">"/"</span> (enlive-attr element 'href))))
    (seq-filter (<span style="color: #a71d5d;">lambda</span> (link)
                  (string-prefix-p  <span style="color: #183691;">"http"</span> link)))
    (seq-uniq)
    (seq-sort (<span style="color: #a71d5d;">lambda</span> (l1 l2)
                (string-lessp (replace-regexp-in-string  <span style="color: #183691;">"^http</span> <span style="color: #969896;">\\</span> <span style="color: #a71d5d;">(</span> <span style="color: #183691;">s</span> <span style="color: #969896;">\\</span> <span style="color: #a71d5d;">)</span> <span style="color: #183691;">*://"</span>  <span style="color: #183691;">""</span> l1)
                              (replace-regexp-in-string  <span style="color: #183691;">"^http</span> <span style="color: #969896;">\\</span> <span style="color: #a71d5d;">(</span> <span style="color: #183691;">s</span> <span style="color: #969896;">\\</span> <span style="color: #a71d5d;">)</span> <span style="color: #183691;">*://"</span>  <span style="color: #183691;">""</span> l2))))))
</pre>
</div>

 <p>
Let's chat  <i>(current-kill 0)</i> for a sec. No improvement from my previous usage, but let's just say building interactive commands that work with your current clipboard (or  <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Kill-Ring.html">kill ring</a> in Emacs terminology) is super handy (see  <a href="https://xenodium.com/emacs-clone-git-repo-from-clipboard/">clone git repo from clipboard</a>).
</p>

 <p>
Moving on to sanitizing and filtering URLs… Links often have trailing slashes. Let's flush them.  <a href="https://github.com/emacs-mirror/emacs/blob/3af9e84ff59811734dcbb5d55e04e1fdb7051e77/lisp/emacs-lisp/subr-x.el#L261">string-remove-suffix</a> to the rescue. This and other handy string-manipulating functions are built into Emacs since 24.4 as part of  <a href="https://github.com/emacs-mirror/emacs/blob/master/lisp/emacs-lisp/subr-x.el">subr-x.el</a>.
</p>

 <p>
Next, we can keep http(s) links and ditch everything else. The end-goal is to extract links posted by users, so these are typically fully qualified external URLs.  <a href="https://github.com/emacs-mirror/emacs/blob/3af9e84ff59811734dcbb5d55e04e1fdb7051e77/lisp/emacs-lisp/seq.el">seq-filter</a> steps up to the task, included in Emacs since 25.1 as part of the  <a href="https://github.com/emacs-mirror/emacs/blob/master/lisp/emacs-lisp/seq.el">seq.el family</a>. We remove duplicate links using  <a href="https://github.com/emacs-mirror/emacs/blob/3af9e84ff59811734dcbb5d55e04e1fdb7051e77/lisp/emacs-lisp/seq.el#L431">seq-uniq</a> and sort them via  <a href="https://github.com/emacs-mirror/emacs/blob/3af9e84ff59811734dcbb5d55e04e1fdb7051e77/lisp/emacs-lisp/seq.el#L255">seq-sort</a>. All part of the same package.
</p>

 <p>
When sorting, we could straight up use  <i>seq-sort</i> and  <i>string-lessp</i> and nothing else, but it would separate http and https links. Let's not do that, so we drop  <i>http(s)</i> prior to comparing strings in  <i>seq-sort</i>'s predicate.  <a href="https://github.com/emacs-mirror/emacs/blob/3af9e84ff59811734dcbb5d55e04e1fdb7051e77/lisp/subr.el#L4468">replace-regexp-in-string</a> does the job here, but if you'd like to skip regular expressions,  <a href="https://github.com/emacs-mirror/emacs/blob/3af9e84ff59811734dcbb5d55e04e1fdb7051e77/lisp/emacs-lisp/subr-x.el#L255">string-remove-prefix</a> works just as well.
</p>

 <p>
Yay, sorting no longer cares about http vs https:
</p>

 <pre class="example">
https://andymatuschak.org
http://antirez.com
https://apenwarr.ca/log
...
</pre>

 <p>
With all that in mind, let's flatten list processing using  <a href="https://github.com/emacs-mirror/emacs/blob/3af9e84ff59811734dcbb5d55e04e1fdb7051e77/lisp/emacs-lisp/subr-x.el#L69">thread-last</a>. This isn't strictly necessary, but since this is the 2021 edition, we'll throw in this macro added to Emacs in 2016 as part of 25.1. Arthur Malabarba has a  <a href="https://endlessparentheses.com/new-in-emacs-25-1-more-flow-control-macros.html">great post on thread-last</a>.
</p>

 <p>
Now that we've built out  <i>ar/scrape-links-from-clipboard-url</i> function, let's make its content consumable!
</p>
</div>

 <div id="outline-container-orgb2b1c25" class="outline-3">
 <h3 id="orgb2b1c25">The completing frameworks way</h3>
 <div class="outline-text-3" id="text-orgb2b1c25">
 <p>
This is the 2021 edition, so power up your completion framework du jour and feed the output of  <i>ar/scrape-links-from-clipboard-url</i> to our completion robots…
</p>


 <div id="org973f473" class="figure">
 <p> <img src="../images/emacs-link-scraping-2021-edition/scrape_complete.gif" alt="scrape_complete.gif" width="95%" height="95%"></img></p>
</div>

 <p>
I'm heavily vested in  <a href="https://github.com/abo-abo/swiper">ivy</a>, but since we're using the built-in  <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Completion.html">completing-read</a> function, any completion framework like  <a href="https://github.com/minad/vertico">vertico</a>,  <a href="https://github.com/raxod502/selectrum/">selectrum</a>,  <a href="https://github.com/emacs-helm/helm">helm</a>, or  <a href="https://www.gnu.org/software/emacs/manual/html_node/ido/index.html">ido</a> should kick right in to give you extra powers.
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">ar/view-completing-links-at-clipboard-url</span> ()
   <span style="color: #183691;">"Scrape links from clipboard URL and open all in external browser."</span>
  (<span style="color: #a71d5d;">interactive</span>)
  (browse-url (completing-read  <span style="color: #183691;">"links: "</span>
                               (ar/scrape-links-from-clipboard-url))))
</pre>
</div>
</div>
</div>

 <div id="outline-container-org246e293" class="outline-3">
 <h3 id="org246e293">The auto-open way (use with caution)</h3>
 <div class="outline-text-3" id="text-org246e293">
 <p>
Sometimes you just want to open every link posted in the comments and use your browser to discard, closing tabs as needed. The recent HN news instance wasn't one of these cases, with a whopping 398 links returned by our  <i>ar/scrape-links-from-clipboard-url</i>.
</p>


 <div id="org4d50eb6" class="figure">
 <p> <img src="../images/emacs-link-scraping-2021-edition/scrape_browse.gif" alt="scrape_browse.gif" width="95%" height="95%"></img></p>
</div>

 <p>
 <i>Note: I capped the results to 5 in this gif/demo to prevent a Firefox tragedy (see  <a href="https://github.com/emacs-mirror/emacs/blob/3af9e84ff59811734dcbb5d55e04e1fdb7051e77/lisp/emacs-lisp/seq.el#L231">seq-take</a>).</i>
</p>

 <p>
In a case like Hacker News's, we don't want to surprise-attack the user and bomb their browser by opening a gazillion tabs, so let's give a little heads-up using  <a href="https://github.com/emacs-mirror/emacs/blob/3af9e84ff59811734dcbb5d55e04e1fdb7051e77/lisp/subr.el#L2869">y-or-n-p</a>.
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">ar/browse-links-at-clipboard-url</span> ()
  (<span style="color: #a71d5d;">interactive</span>)
  (<span style="color: #a71d5d;">let</span> ((links (ar/scrape-links-from-clipboard-url)))
    (<span style="color: #a71d5d;">when</span> (y-or-n-p (format  <span style="color: #183691;">"Open all %d links? "</span> (length links)))
      (mapc (<span style="color: #a71d5d;">lambda</span> (link)
              (browse-url link))
            links))))
</pre>
</div>
</div>
</div>

 <div id="outline-container-org5e2b7bb" class="outline-3">
 <h3 id="org5e2b7bb">The org way</h3>
 <div class="outline-text-3" id="text-org5e2b7bb">
 <p>
My  <a href="https://xenodium.com/get-emacs-to-gather-links-in-posts/">2015 solution</a> leveraged an  <a href="https://orgmode.org/">org mode</a> buffer to dump the fetched links. The org way is still my favorite. You can use whatever existing Emacs super powers you already have on top of the org buffer, including searching and filtering fueled by your favourite completion framework. I'm a fan of  <a href="https://oremacs.com/">Oleh</a>'s  <a href="https://github.com/abo-abo/swiper">swiper</a>.
</p>


 <div id="org33814c8" class="figure">
 <p> <img src="../images/emacs-link-scraping-2021-edition/scrape_org.gif" alt="scrape_org.gif" width="95%" height="95%"></img></p>
</div>

 <p>
The 2021 implementation is mostly a tidy-up, removing some cruft, but also uses our new  <i>ar/scrape-links-from-clipboard-url</i> function to filter and sort accordingly.
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">require</span> ' <span style="color: #0086b3;">org</span>)

(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">ar/view-links-at-clipboard-url</span> ()
   <span style="color: #183691;">"Scrape links from clipboard URL and dump to an org buffer."</span>
  (<span style="color: #a71d5d;">interactive</span>)
  (<span style="color: #a71d5d;">with-current-buffer</span> (get-buffer-create  <span style="color: #183691;">"*links*"</span>)
    (org-mode)
    (erase-buffer)
    (mapc (<span style="color: #a71d5d;">lambda</span> (link)
            (insert (org-make-link-string link)  <span style="color: #183691;">"\n"</span>))
          (ar/scrape-links-from-clipboard-url))
    (goto-char (point-min))
    (switch-to-buffer (current-buffer))))
</pre>
</div>
</div>
</div>

 <div id="outline-container-orga008cc5" class="outline-3">
 <h3 id="orga008cc5">Emacs + community + packages + your own glue = awesome</h3>
 <div class="outline-text-3" id="text-orga008cc5">
 <p>
To power our 2021 link scraper, we've used newer libraries included in more recent versions of Emacs, leveraged an older but solid HTML-parsing package, pulled in org mode (the epicenter of Emacs note-taking), dragged in our favorite completion framework, and tickled our handy browser all by smothering the lot with some elisp glue to make Emacs do exactly what we want.  <a href="http://emacsrocks.com/">Emacs does rock</a>.
</p>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/emacs-link-scraping-2021-edition</link>
  <guid isPermaLink="false">http://xenodium.com/emacs-link-scraping-2021-edition</guid>
  <pubDate>Fri, 28 May 2021 00:00:00 +0100</pubDate>
</item>
<item>
  <title>Emacs plus --with-native-comp</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-emacs-plus-with-native-comp" class="outline-2">
 <h2 id="emacs-plus-with-native-comp"> <span class="timestamp-wrapper"> <span class="timestamp">17 May 2021</span></span> Emacs plus –with-native-comp</h2>
 <div class="outline-text-2" id="text-emacs-plus-with-native-comp">

 <div id="org0a3389b" class="figure">
 <p> <img src="../images/emacs-plus-with-native-comp/brew-native-comp.png" alt="brew-native-comp.png" width="75%" height="75%"></img></p>
</div>

 <p>
I'm a big fan of  <a href="https://d12frosted.io/">Boris Buliga</a>'s  <a href="https://github.com/d12frosted/homebrew-emacs-plus">Emacs Plus</a>  <a href="https://brew.sh/">homebrew</a> recipe for customizing and installing Emacs builds on macOS.
</p>

 <p>
For a little while, I took a detour and built Emacs myself, so I could enable  <a href="https://twitter.com/Koral_001">Andrea Corallo</a>'s fantastic  <a href="http://akrl.sdf.org/gccemacs.html">native compilation</a>. I documented the steps  <a href="https://xenodium.com/trying-out-gccemacs-on-macos/">here</a>. Though it was fairly straightforward, I did miss Emacs Plus's convenience.
</p>

 <p>
I had been meaning to check back on Emacs Plus for native compilation support. Turns out, it was merged back in  <a href="https://github.com/d12frosted/homebrew-emacs-plus/pull/188">Dec 2020</a>, and it works great!
</p>

 <p>
Enabling native compilation is simple (just use  <i>–with-native-comp</i>). As a bonus, you get all the Emacs Plus goodies. I'm loving  <i>–with-elrumo2-icon</i>, enabling a spiffy icon to go with macOS Big Sur.  <i>–with-no-frame-refocus</i> is also handy to  <a href="https://xenodium.com/no-emacs-frame-refocus-on-macos/">avoid refocusing other frames</a> when another one is closed.
</p>

 <p>
In any case, here's the minimum needed to install Emacs Plus with native compilation support enabled:
</p>

 <div class="org-src-container">
 <pre class="src src-sh">brew tap d12frosted/emacs-plus
brew install emacs-plus@28 --with-native-comp
</pre>
</div>

 <p>
Sit tight. Homebrew will build and install some chunky dependencies (including gcc and libgccjit).
</p>

 <p>
Note: Your init.el needs tweaking to take advantage of native compilation. See my  <a href="https://xenodium.com/trying-out-gccemacs-on-macos/">previous post</a> for how I set mine, or go straight to  <a href="https://github.com/xenodium/dotsies/blob/main/emacs/features/fe-package-extensions.el#L19">my config</a>.
</p>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/emacs-plus-with-native-comp</link>
  <guid isPermaLink="false">http://xenodium.com/emacs-plus-with-native-comp</guid>
  <pubDate>Mon, 17 May 2021 00:00:00 +0100</pubDate>
</item>
<item>
  <title>Flat Habits meets org agenda</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-flat-habits-meets-org-agenda" class="outline-2">
 <h2 id="flat-habits-meets-org-agenda"> <span class="timestamp-wrapper"> <span class="timestamp">10 April 2021</span></span> Flat Habits meets org agenda</h2>
 <div class="outline-text-2" id="text-flat-habits-meets-org-agenda">
 <p>
UPDATE: Flat Habits now has its own page at  <a href="https://flathabits.com/">flathabits.com</a>.
</p>

 <p>
Flat Habits v1.0.2 is  <a href="https://apps.apple.com/app/id1558358855">out today</a>, with habit-toggling now supported from the streak view.
</p>

 <p>
Flat Habits runs on org, making it a great complement to Emacs and org agenda \o/
</p>


 <div id="org9f7b0d2" class="figure">
 <p> <img src="../images/flat-habits-meets-org-agenda/flat_agenda.gif" alt="flat_agenda.gif" width="75%" height="75%"></img></p>
</div>

 <div style="text-align: center;">
   <a href="https://apps.apple.com/app/id1558358855">
     <img src="../images/flat-habits-for-ios/download-on-app-store.png" alt="today_no_filter.png" height="40px"></img></a>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/flat-habits-meets-org-agenda</link>
  <guid isPermaLink="false">http://xenodium.com/flat-habits-meets-org-agenda</guid>
  <pubDate>Sat, 10 Apr 2021 00:00:00 +0100</pubDate>
</item>
<item>
  <title>Flat Habits v1.0.1 (org import menu)</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-flat-habits-v101-org-import-menu" class="outline-2">
 <h2 id="flat-habits-v101-org-import-menu"> <span class="timestamp-wrapper"> <span class="timestamp">23 March 2021</span></span> Flat Habits v1.0.1 (org import menu)</h2>
 <div class="outline-text-2" id="text-flat-habits-v101-org-import-menu">
 <p>
UPDATE: Flat Habits now has its own page at  <a href="https://flathabits.com/">flathabits.com</a>.
</p>

 <p>
Flat Habits v1.0.1 is now released and  <a href="https://apps.apple.com/app/id1558358855">available</a> in the App Store.
</p>
</div>

 <div id="outline-container-orgca7fae3" class="outline-3">
 <h3 id="orgca7fae3">org import (import vs in-place)</h3>
 <div class="outline-text-3" id="text-orgca7fae3">
 <p>
We can now import org files from the menu. Importing gives ya the option to either import (copy into the app) or open in-place. The latter enables users to sync org files with other iOS apps or just open/edit from Emacs for the full org-mode/agenda experience.
</p>

 <div style="text-align: center;">
   <img src="../images/flat-habits-v101-org-import-menu/menu.png" alt="today_no_filter.png" width="300px" style="padding: 10px;"></img> <img src="../images/flat-habits-v101-org-import-menu/filebrowse.png" alt="today_no_filter.png" width="300px" style="padding: 10px;"></img></div>

 <p>
Syncing with your desktop can be achieved by either iCloud or by enabling other providers in the Files app (after installing the likes of Google Drive, Dropbox, etc).
</p>

 <p>
 <i>Please note that importing (copying into the app) is currently the recommended flow.</i> Opening in-place and syncing is still fairly experimental, so please back up your org files regularly. If you do run into syncing issues, please get in touch.
</p>

 <p>
Good luck with your habits!
</p>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/flat-habits-v101-org-import-menu</link>
  <guid isPermaLink="false">http://xenodium.com/flat-habits-v101-org-import-menu</guid>
  <pubDate>Tue, 23 Mar 2021 00:00:00 +0000</pubDate>
</item>
<item>
  <title>Flat Habits for iOS (powered by org)</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-flat-habits-for-ios" class="outline-2">
 <h2 id="flat-habits-for-ios"> <span class="timestamp-wrapper"> <span class="timestamp">17 March 2021</span></span> Flat Habits for iOS (powered by org)</h2>
 <div class="outline-text-2" id="text-flat-habits-for-ios">
 <p>
UPDATE: Flat Habits now has its own page at  <a href="https://flathabits.com/">flathabits.com</a>.
</p>

 <p>
 <i>No friction. No social. No analytics. No account. No cloud. No lock-in.</i>
</p>
</div>

 <div id="outline-container-org11cbac1" class="outline-3">
 <h3 id="org11cbac1">So what is it?</h3>
 <div class="outline-text-3" id="text-org11cbac1">
 <p>
An iOS app to help you form and track lasting habits.
</p>

 <div style="text-align: center;">
   <img src="../images/flat-habits-for-ios/today_no_filter.png" alt="today_no_filter.png" width="300px" style="padding: 10px;"></img> <img src="../images/flat-habits-for-ios/meditate.png" alt="today_no_filter.png" width="300px" style="padding: 10px;"></img> <a href="https://apps.apple.com/app/id1558358855">
     <img src="../images/flat-habits-for-ios/download-on-app-store.png" alt="today_no_filter.png" height="40px"></img></a>
</div>
</div>
</div>

 <div id="outline-container-orgd17ef67" class="outline-3">
 <h3 id="orgd17ef67">Why an app?</h3>
 <div class="outline-text-3" id="text-orgd17ef67">
 <p>
Tracking and accountability may help you develop positive habits. A simple habit-tracking app should make this easy. I'm not a habits expert, but got inspired by James Clear's  <a href="https://jamesclear.com/atomic-habits">Atomic Habits</a>. Read that book if you're interested in the topic.
</p>

 <p>
I wanted a frictionless habit tracker that gets out of the way, so I built one to my taste.
</p>
</div>
</div>

 <div id="outline-container-org332dff3" class="outline-3">
 <h3 id="org332dff3">Sounds like a lot of work?</h3>
 <div class="outline-text-3" id="text-org332dff3">
 <p>
You mean habit tracking? It's not. I tried to make the app simple and focused. Mark a habit done whenever you do it. It's really encouraging to see your daily streaks grow. I really don't want to break them.
</p>
</div>
</div>

 <div id="outline-container-org8c8e772" class="outline-3">
 <h3 id="org8c8e772">What kind of habits?</h3>
 <div class="outline-text-3" id="text-org8c8e772">
 <p>
Any recurring habit you'd like to form like exercise, water the plants, read, make your bed, recycle, call grandma, yoga, cleaning, drink water, meditate, take a nap, make your lunch, journal, laundry, push-ups, sort out the dryer filter, floz, take your vitamins, take your meds, eat salad, eat fruit, practice a language, practice an instrument, go to bed early…
</p>
</div>
</div>

 <div id="outline-container-org513fa40" class="outline-3">
 <h3 id="org513fa40">So it's like a task/todo app?</h3>
 <div class="outline-text-3" id="text-org513fa40">
 <p>
Nope. This app focuses solely on habits. Unlike todos/tasks, habits must happen regularly. If you don't water the plants, they will die. If you don't exercise regularly, you won't get the health benefits. Keep your habits separate from that long list of todos. You know, that panic-inducing list you're too afraid to look at.
</p>
</div>
</div>

 <div id="outline-container-orgf75e088" class="outline-3">
 <h3 id="orgf75e088">Where is my data stored?</h3>
 <div class="outline-text-3" id="text-orgf75e088">
 <p>
On your iPhone as a plain text file (in  <a href="https://orgmode.org/">org mode</a> format). You can view, edit, or migrate your data at any time (use export from the menu). You may also save it to a shared location, so you can access it from multiple devices/apps. Some of us like to  <a href="http://xenodium.com/frictionless-org-habits-on-ios/">use our beloved text editors</a> (Emacs, Vim, VSCode, etc.) to poke at  <a href="https://orgmode.org/manual/Tracking-your-habits.html">habits</a>.
</p>
</div>
</div>

 <div id="outline-container-org8394034" class="outline-3">
 <h3 id="org8394034">Got more questions?</h3>
 <div class="outline-text-3" id="text-org8394034">
 <p>
I may not have the answer, but I can try. Ping me at  <i>flathabits*at*xenodium.com</i>.
</p>
</div>
</div>

 <div id="outline-container-org380396c" class="outline-3">
 <h3 id="org380396c">Privacy policy</h3>
 <div class="outline-text-3" id="text-org380396c">
 <p>
No personal data is sent to any server, as there is no server component to this app. There are neither third party integrations, accounts, analytics, nor trackers in this app. All your data is kept on your iPhone, unless you choose a cloud provider to sync or store your data. See your cloud provider's privacy policy for details on how they may handle it.
</p>

 <p>
If you choose to send feedback by email, you have the option to review and attach logs to help diagnose issues. If you'd like an email thread to be deleted, just ask.
</p>

 <p>
To join TestFlight as a beta tester, you likely gave your email address. If you'd like your email removed, just ask. Note that TestFlight has its own  <a href="https://www.apple.com/legal/internet-services/itunes/testflight/sren/terms.html">Terms Of Service</a>.
</p>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/flat-habits-for-ios</link>
  <guid isPermaLink="false">http://xenodium.com/flat-habits-for-ios</guid>
  <pubDate>Wed, 17 Mar 2021 00:00:00 +0000</pubDate>
</item>
<item>
  <title>Frictionless org habits on iOS</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-frictionless-org-habits-on-ios" class="outline-2">
 <h2 id="frictionless-org-habits-on-ios"> <span class="timestamp-wrapper"> <span class="timestamp">21 February 2021</span></span> Frictionless org habits on iOS</h2>
 <div class="outline-text-2" id="text-frictionless-org-habits-on-ios">
 <p>
UPDATE: Flat Habits now has its own page at  <a href="https://flathabits.com/">flathabits.com</a>.
</p>


 <div id="org93ab517" class="figure">
 <p> <img src="../images/frictionless-org-habits-on-ios/flat_habits.gif" alt="flat_habits.gif" width="80%" height="80%"></img></p>
</div>

 <p>
I've been wanting org to keep track of my daily habits for a little while. The catalyst: reading James Clear's wonderful  <a href="https://jamesclear.com/atomic-habits">Atomic Habits</a> (along with plenty of lock-down inspiration).
</p>

 <p>
As much as I live in Emacs and org mode, it just wasn't practical enough to rely on my laptop for tracking habits. I wanted less friction, so I've been experimenting with building a toy app for my needs. Naturally, org support was a strict requirement, so I could always poke at it from my beloved editor.
</p>

 <p>
I've been using the app every day with success. The habits seem to be sticking, but equally important, it's been really fun to join the fabulous world of Emacs/Org with iOS/SwiftUI.
</p>

 <p>
This is all very experimental <sup> <a id="fnr.1" class="footref" href="#fn.1" role="doc-backlink">1</a></sup> and as mentioned on  <a href="https://www.reddit.com/r/emacs/comments/ljurwx/org_habits_ios_app_want_to_try_it/">reddit</a> (follow-up  <a href="https://www.reddit.com/r/emacs/comments/lp62vn/org_habits_ios_app_followup_twoway_edit/">here</a>) and  <a href="https://twitter.com/xenodium/status/1361034010047176705">twitter</a>, the app isn't available on the App Store. I may consider publishing if there's enough interest, but in the mean time, you can reach out and install via  <a href="https://testflight.apple.com/">TestFlight</a>.
</p>

 <p>
Send me an email address to  <i>flathabits*at*xenodium.com</i> for a TestFlight invite.
</p>
</div>

 <div id="outline-container-org17d4b63" class="outline-3">
 <h3 id="org17d4b63">2021-03-12 Update: Now with iOS Files app/sync integration</h3>
 <div class="outline-text-3" id="text-org17d4b63">
 <p>
If you can sync your org file with your iPhone (ie. Drive/Dropbox/iCloud), and list it in the Files app, you should be able to open/edit <sup> <a id="fnr.1.100" class="footref" href="#fn.1" role="doc-backlink">1</a></sup> with  <i>Flat Habits</i> (that's the name now). With iOS Files integration, you should be able to sync your habits between your iPhone and your  <a href="https://www.gnu.org/software/emacs/">funky editor</a> powering org mode <sup> <a id="fnr.2" class="footref" href="#fn.2" role="doc-backlink">2</a></sup>.
</p>


 <div id="org0f2c7f0" class="figure">
 <p> <img src="../images/frictionless-org-habits-on-ios/filesapp_shorter.gif" alt="filesapp_shorter.gif" width="40%"></img></p>
</div>
</div>
</div>
</div>
 <div id="footnotes">
 <h2 class="footnotes">Footnotes: </h2>
 <div id="text-footnotes">

 <div class="footdef"> <sup> <a id="fn.1" class="footnum" href="#fnr.1" role="doc-backlink">1</a></sup> <div class="footpara" role="doc-footnote"> <p class="footpara">
The app's been fairly stable, but who knows… please backup your org file before feeding it to the lion.
</p></div></div>

 <div class="footdef"> <sup> <a id="fn.2" class="footnum" href="#fnr.2" role="doc-backlink">2</a></sup> <div class="footpara" role="doc-footnote"> <p class="footpara">
Yes, this post was written in  <a href="https://orgmode.org/">org mode</a>.
</p></div></div>


</div>
</div></div>]]></description>
  <link>http://xenodium.com/frictionless-org-habits-on-ios</link>
  <guid isPermaLink="false">http://xenodium.com/frictionless-org-habits-on-ios</guid>
  <pubDate>Sun, 21 Feb 2021 00:00:00 +0000</pubDate>
</item>
<item>
  <title>Emacs: mu4e icons</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-mu4e-icons" class="outline-2">
 <h2 id="mu4e-icons"> <span class="timestamp-wrapper"> <span class="timestamp">23 January 2021</span></span> Emacs: mu4e icons</h2>
 <div class="outline-text-2" id="text-mu4e-icons">
 <p>
Recently spotted  <a href="https://github.com/stardiviner/mu4e-marker-icons">mu4e-marker-icons</a>, which adds mu4e icons using  <a href="https://github.com/domtronn/all-the-icons.el">all-the-icons</a>.
</p>

 <p>
Although I'm not currently using all-the-icons, it did remind me to take a look at mu4e's built-in variables to spiff up my email. It's pretty simple. Find the icons you like and set them as follows:
</p>


 <div id="orgd5a7721" class="figure">
 <p> <img src="../images/mu4e-icons/mu4eicons.png" alt="mu4eicons.png" width="50%" height="50%"></img></p>
</div>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">setq</span> mu4e-headers-unread-mark    '(<span style="color: #183691;">"u"</span> .  <span style="color: #183691;">"📩 "</span>))
(<span style="color: #a71d5d;">setq</span> mu4e-headers-draft-mark     '(<span style="color: #183691;">"D"</span> .  <span style="color: #183691;">"🚧 "</span>))
(<span style="color: #a71d5d;">setq</span> mu4e-headers-flagged-mark   '(<span style="color: #183691;">"F"</span> .  <span style="color: #183691;">"🚩 "</span>))
(<span style="color: #a71d5d;">setq</span> mu4e-headers-new-mark       '(<span style="color: #183691;">"N"</span> .  <span style="color: #183691;">"✨ "</span>))
(<span style="color: #a71d5d;">setq</span> mu4e-headers-passed-mark    '(<span style="color: #183691;">"P"</span> .  <span style="color: #183691;">"↪ "</span>))
(<span style="color: #a71d5d;">setq</span> mu4e-headers-replied-mark   '(<span style="color: #183691;">"R"</span> .  <span style="color: #183691;">"↩ "</span>))
(<span style="color: #a71d5d;">setq</span> mu4e-headers-seen-mark      '(<span style="color: #183691;">"S"</span> .  <span style="color: #183691;">" "</span>))
(<span style="color: #a71d5d;">setq</span> mu4e-headers-trashed-mark   '(<span style="color: #183691;">"T"</span> .  <span style="color: #183691;">"🗑️"</span>))
(<span style="color: #a71d5d;">setq</span> mu4e-headers-attach-mark    '(<span style="color: #183691;">"a"</span> .  <span style="color: #183691;">"📎 "</span>))
(<span style="color: #a71d5d;">setq</span> mu4e-headers-encrypted-mark '(<span style="color: #183691;">"x"</span> .  <span style="color: #183691;">"🔑 "</span>))
(<span style="color: #a71d5d;">setq</span> mu4e-headers-signed-mark    '(<span style="color: #183691;">"s"</span> .  <span style="color: #183691;">"🖊 "</span>))
</pre>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/mu4e-icons</link>
  <guid isPermaLink="false">http://xenodium.com/mu4e-icons</guid>
  <pubDate>Sat, 23 Jan 2021 00:00:00 +0000</pubDate>
</item>
<item>
  <title>Swift package code coverage (plus Emacs overlay)</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-swift-package-code-coverage" class="outline-2">
 <h2 id="swift-package-code-coverage"> <span class="timestamp-wrapper"> <span class="timestamp">29 December 2020</span></span> Swift package code coverage (plus Emacs overlay)</h2>
 <div class="outline-text-2" id="text-swift-package-code-coverage">
 <p>
While playing around with Swift package manager, I had a quick look into code coverage options. Luckily, coverage reporting and exporting are supported out of the box (via  <a href="https://llvm.org/docs/CommandGuide/llvm-cov.html">llvm-cov</a>).
</p>

 <p>
Ensure tests are invoked as follows:
</p>

 <div class="org-src-container">
 <pre class="src src-sh">swift test --enable-code-coverage
</pre>
</div>

 <p>
A high level report can be generated with:
</p>

 <div class="org-src-container">
 <pre class="src src-bash">xcrun llvm-cov report .build/x86_64-apple-macosx/debug/FooPackageTests.xctest/Contents/MacOS/FooPackageTests \
      -instr-profile=.build/x86_64-apple-macosx/debug/codecov/default.profdata -ignore-filename-regex=".build|Tests"
</pre>
</div>

 <pre class="example">
Filename                                   Regions    Missed Regions     Cover   Functions  Missed Functions  Executed       Lines      Missed Lines     Cover
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
/tmp/Foo/Sources/Foo/Foo.swift                   2                 1    50.00%           2                 1    50.00%           6                 3    50.00%
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
TOTAL                                            2                 1    50.00%           2                 1    50.00%           6                 3    50.00%
</pre>


 <p>
llvm-cov can export as lcov format:
</p>

 <div class="org-src-container">
 <pre class="src src-sh">xcrun llvm-cov export -format= <span style="color: #183691;">"lcov"</span> .build/x86_64-apple-macosx/debug/FooPackageTests.xctest/Contents/MacOS/FooPackageTests -instr-profile=.build/x86_64-apple-macosx/debug/codecov/default.profdata -ignore-filename-regex= <span style="color: #183691;">".build|Tests"</span> > coverage.lcov
</pre>
</div>

 <p>
With the report in lcov format, we can look for an Emacs package to visualize coverage in source files. Found  <a href="https://github.com/twada/coverlay.el">coverlay.el</a> to require minimal setup. I was interested in highlighting only untested areas, so I set  <i>tested-line-background-color</i>
 to nil:
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">use-package</span>  <span style="color: #0086b3;">coverlay</span>
   <span style="color: #a71d5d;">:ensure</span> t
   <span style="color: #a71d5d;">:config</span>
  (<span style="color: #a71d5d;">setq</span> coverlay:tested-line-background-color nil))
</pre>
</div>

 <p>
After installing coverlay, I enabled the minor mode via  <i>M-x coverlay-minor-mode</i>, invoked  <i>M-x coverlay-watch-file</i> to watch  <i>coverage.lcov</i> for changes, and voilà!
</p>


 <div id="org39e8278" class="figure">
 <p> <img src="../images/swift-package-code-coverage/coverage.png" alt="coverage.png"></img></p>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/swift-package-code-coverage</link>
  <guid isPermaLink="false">http://xenodium.com/swift-package-code-coverage</guid>
  <pubDate>Tue, 29 Dec 2020 00:00:00 +0000</pubDate>
</item>
<item>
  <title>Patience</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-patience" class="outline-2">
 <h2 id="patience"> <span class="timestamp-wrapper"> <span class="timestamp">28 December 2020</span></span> Patience</h2>
 <div class="outline-text-2" id="text-patience">
 <p>
Via  <a href="https://twitter.com/orangebook_/status/1291844997097099265?s=12">Orange Book</a>, a reminder to myself:
</p>

 <ul class="org-ul"> <li>In investing, patience is rewarded.</li>
 <li>In growing a talent, patience is rewarded.</li>
 <li>In building a business, patience is rewarded.</li>
 <li>In love and friendships, patience is rewarded.</li>
 <li>Patience = success</li>
</ul> <p>
I feel like there's an Emacs lesson somewhere in there…
</p>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/patience</link>
  <guid isPermaLink="false">http://xenodium.com/patience</guid>
  <pubDate>Mon, 28 Dec 2020 00:00:00 +0000</pubDate>
</item>
<item>
  <title>Emacs: Rotate my macOS display</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-emacs-rotate-my-macos-display" class="outline-2">
 <h2 id="emacs-rotate-my-macos-display"> <span class="timestamp-wrapper"> <span class="timestamp">05 December 2020</span></span> Emacs: Rotate my macOS display</h2>
 <div class="outline-text-2" id="text-emacs-rotate-my-macos-display">
 <p>
Every so often, I rotate my monitor (vertical vs horizontal) for either work or to watch a movie. macOS enables changing the display rotation via a dropdown menu (under  <i>Preferences > Displays > Rotation</i>) where you can pick between  <i>Standard</i>,  <i>90°</i>,  <i>180°</i>, and  <i>270°</i>. That's all fine, but what I'd really like is a quick way to toggle between my preferred two choices:  <i>Standard</i> and  <i>270°</i>.
</p>

 <p>
Unsurprisingly, I'd also like to invoke it as an interactive command via Emacs's  <i>M-x</i> (see  <a href="http://xenodium.com/emacs-connect-my-bluetooth-speaker/index.html">Emacs: connect my Bluetooth speaker</a>). With narrowing frameworks like  <a href="https://github.com/abo-abo/swiper">ivy</a>,  <a href="https://emacs-helm.github.io/helm/">helm</a>, and  <a href="https://www.gnu.org/software/emacs/manual/html_mono/ido.html">ido</a>, invoking these commands is just a breeze.
</p>

 <p>
Turns out, this was pretty simple to accomplish, thanks to Eric Nitardy's  <a href="https://github.com/CdLbB/fb-rotate">fb-rotate</a> command line utility. All that's left to do is wrap it in a tiny elisp  <del>function</del> hack, add the toggling logic, and voilà!
</p>


 <div id="org78568f3" class="figure">
 <p> <img src="../images/emacs-rotate-my-macos-display/rotate.gif" alt="rotate.gif" width="75%" height="75%"></img></p>
</div>

 <p>
 <i>The screen capture goes a little funky when rotating the display, but you get the idea. It works better in person :)</i>
</p>

 <p>
…and here's the snippet:
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">ar/display-toggle-rotation</span> ()
  (<span style="color: #a71d5d;">interactive</span>)
  (<span style="color: #a71d5d;">require</span> ' <span style="color: #0086b3;">cl-lib</span>)
  (<span style="color: #333333;">cl-assert</span> (executable-find  <span style="color: #183691;">"fb-rotate"</span>) nil
              <span style="color: #183691;">"Install fb-rotate from https://github.com/CdLbB/fb-rotate"</span>)
   <span style="color: #969896;">;; </span> <span style="color: #969896;">#  Display_ID    Resolution  ____Display_Bounds____  Rotation</span>
   <span style="color: #969896;">;; </span> <span style="color: #969896;">2  0x2b347692    1440x2560      0     0  1440  2560    270    [main]</span>
   <span style="color: #969896;">;; </span> <span style="color: #969896;">From fb-rotate output, get the `</span> <span style="color: #0086b3;">current-rotation</span> <span style="color: #969896;">' from Column 7, row 1 zero-based.</span>
  (<span style="color: #a71d5d;">let</span> ((current-rotation (nth 7 (split-string (nth 1 (process-lines  <span style="color: #183691;">"fb-rotate"</span>  <span style="color: #183691;">"-i"</span>))))))
    (call-process-shell-command (format  <span style="color: #183691;">"fb-rotate -d 1 -r %s"</span>
                                        (<span style="color: #a71d5d;">if</span> (equal current-rotation  <span style="color: #183691;">"270"</span>)
                                             <span style="color: #183691;">"0"</span>
                                           <span style="color: #183691;">"270"</span>)))))
</pre>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/emacs-rotate-my-macos-display</link>
  <guid isPermaLink="false">http://xenodium.com/emacs-rotate-my-macos-display</guid>
  <pubDate>Sat, 05 Dec 2020 00:00:00 +0000</pubDate>
</item>
<item>
  <title>Emacs: Clone git repo from clipboard</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-emacs-clone-git-repo-from-clipboard" class="outline-2">
 <h2 id="emacs-clone-git-repo-from-clipboard"> <span class="timestamp-wrapper"> <span class="timestamp">29 November 2020</span></span> Emacs: Clone git repo from clipboard</h2>
 <div class="outline-text-2" id="text-emacs-clone-git-repo-from-clipboard">
 <p>
Cloning git repositories is a pretty common task. For me, it typically goes something like:
</p>

 <ul class="org-ul"> <li>Copy git repo URL from browser.</li>
 <li>Drop to Emacs eshell.</li>
 <li>Change current directory.</li>
 <li>Type "git clone ".</li>
 <li>Paste git repo URL.</li>
 <li>Run git command.</li>
 <li>Change directory to cloned repo.</li>
 <li>Open dired.</li>
</ul> <p>
No biggie, but why go through the same steps every time? We can do better. We have a hyper malleable editor, so let's get it to grab the URL from clipboard and do its thing.
</p>

 <p>
 <i>shell-command</i> or  <i>async-shell-command</i> can help in this space, but require additional work: change location, re-type command, what if directory already exists… This is Emacs, so we can craft the exact experience we want. I did take inspiration from  <i>shell-command</i> to display the process buffer correctly (git progress, control codes, etc.) and landed on the following experience:
</p>


 <div id="org223bb87" class="figure">
 <p> <img src="../images/emacs-clone-git-repo-from-clipboard/git_clone_dired.gif" alt="git_clone_dired.gif" width="75%" height="75%"></img></p>
</div>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp"> <span style="color: #969896;">;; </span> <span style="color: #969896;">-*- lexical-binding: t -*-</span>

(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">ar/git-clone-clipboard-url</span> ()
   <span style="color: #183691;">"Clone git URL in clipboard asynchronously and open in dired when finished."</span>
  (<span style="color: #a71d5d;">interactive</span>)
  (<span style="color: #333333;">cl-assert</span> (string-match-p  <span style="color: #183691;">"^</span> <span style="color: #969896;">\\</span> <span style="color: #a71d5d;">(</span> <span style="color: #183691;">http</span> <span style="color: #969896;">\\</span> <span style="color: #a71d5d;">|</span> <span style="color: #183691;">https</span> <span style="color: #969896;">\\</span> <span style="color: #a71d5d;">|</span> <span style="color: #183691;">ssh</span> <span style="color: #969896;">\\</span> <span style="color: #a71d5d;">)</span> <span style="color: #183691;">://"</span> (current-kill 0)) nil  <span style="color: #183691;">"No URL in clipboard"</span>)
  (<span style="color: #a71d5d;">let*</span> ((url (current-kill 0))
         (download-dir (expand-file-name  <span style="color: #183691;">"~/Downloads/"</span>))
         (project-dir (concat (file-name-as-directory download-dir)
                              (file-name-base url)))
         (default-directory download-dir)
         (command (format  <span style="color: #183691;">"git clone %s"</span> url))
         (buffer (generate-new-buffer (format  <span style="color: #183691;">"*%s*"</span> command)))
         (proc))
    (<span style="color: #a71d5d;">when</span> (file-exists-p project-dir)
      (<span style="color: #a71d5d;">if</span> (y-or-n-p (format  <span style="color: #183691;">"%s exists. delete?"</span> (file-name-base url)))
          (delete-directory project-dir t)
        (<span style="color: #333333;">user-error</span>  <span style="color: #183691;">"Bailed"</span>)))
    (switch-to-buffer buffer)
    (<span style="color: #a71d5d;">setq</span> proc (start-process-shell-command (nth 0 (split-string command)) buffer command))
    (<span style="color: #a71d5d;">with-current-buffer</span> buffer
      (<span style="color: #a71d5d;">setq</span> default-directory download-dir)
      (shell-command-save-pos-or-erase)
      (<span style="color: #a71d5d;">require</span> ' <span style="color: #0086b3;">shell</span>)
      (shell-mode)
      (view-mode +1))
    (set-process-sentinel proc (<span style="color: #a71d5d;">lambda</span> (process state)
                                 (<span style="color: #a71d5d;">let</span> ((output (<span style="color: #a71d5d;">with-current-buffer</span> (process-buffer process)
                                                 (buffer-string))))
                                   (kill-buffer (process-buffer process))
                                   (<span style="color: #a71d5d;">if</span> (= (process-exit-status process) 0)
                                       (<span style="color: #a71d5d;">progn</span>
                                         (message  <span style="color: #183691;">"finished: %s"</span> command)
                                         (dired project-dir))
                                     (<span style="color: #333333;">user-error</span> (format  <span style="color: #183691;">"%s\n%s"</span> command output))))))
    (set-process-filter proc #'comint-output-filter)))
</pre>
</div>

 <p>
Comment on  <a href="https://www.reddit.com/r/emacs/comments/k3iter/simplequick_git_repo_clone_from_browser_to_emacs/">reddit</a> or  <a href="https://twitter.com/xenodium/status/1333111043791458309">twitter</a>.
</p>
</div>

 <div id="outline-container-orga57472d" class="outline-3">
 <h3 id="orga57472d">Updates</h3>
 <div class="outline-text-3" id="text-orga57472d">
 <ul class="org-ul"> <li>Added lexical binding.</li>
 <li>Checks clipboard for ssh urls also.</li>
</ul></div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/emacs-clone-git-repo-from-clipboard</link>
  <guid isPermaLink="false">http://xenodium.com/emacs-clone-git-repo-from-clipboard</guid>
  <pubDate>Sun, 29 Nov 2020 00:00:00 +0000</pubDate>
</item>
<item>
  <title>Emacs: chaining org babel blocks</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-emacs-chaining-org-babel-blocks" class="outline-2">
 <h2 id="emacs-chaining-org-babel-blocks"> <span class="timestamp-wrapper"> <span class="timestamp">27 October 2020</span></span> Emacs: chaining org babel blocks</h2>
 <div class="outline-text-2" id="text-emacs-chaining-org-babel-blocks">
 <p>
Recently wanted to chain org babel blocks. That is, aggregate separate source blocks and execute as one combined block.
</p>


 <div id="orgecf202d" class="figure">
 <p> <img src="../images/emacs-chaining-org-babel-blocks/chain.gif" alt="chain.gif" width="50%" height="50%"></img></p>
</div>

 <p>
I wanted the chaining primarily driven through header arguments as follows:
</p>

 <div class="org-src-container">
 <pre class="src src-org">#+name: block-0
#+begin_src swift
  print("hello 0")
#+end_src

#+name: block-1
#+begin_src swift :include block-0
  print("hello 1")
#+end_src

#+RESULTS: block-1
: hello 0
: hello 1
</pre>
</div>

 <p>
I didn't find the above syntax and behaviour supported out of the box (or didn't search hard enough?). Fortunately, this is our beloved and malleable editor, so we can always bend it our way! Wasn't quite sure how to go about it, so I looked at other babel packages for inspiration.  <a href="https://github.com/astahlman/ob-async">ob-async</a> was great for that.
</p>

 <p>
Turns out, advicing  <i>org-babel-execute-src-block</i> did the job:
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">adviced:org-babel-execute-src-block</span> (<span style="color: #0086b3;">&optional</span> orig-fun arg info params)
  (<span style="color: #a71d5d;">let</span> ((body (nth 1 info))
        (include (assoc  <span style="color: #a71d5d;">:include</span> (nth 2 info)))
        (named-blocks (org-element-map (org-element-parse-buffer)
                          'src-block (<span style="color: #a71d5d;">lambda</span> (item)
                                       (<span style="color: #a71d5d;">when</span> (org-element-property  <span style="color: #a71d5d;">:name</span> item)
                                         (cons (org-element-property  <span style="color: #a71d5d;">:name</span> item)
                                               item))))))
    (<span style="color: #a71d5d;">while</span> include
      (<span style="color: #a71d5d;">unless</span> (cdr include)
        (<span style="color: #333333;">user-error</span>  <span style="color: #183691;">":include without value"</span> (cdr include)))
      (<span style="color: #a71d5d;">unless</span> (assoc (cdr include) named-blocks)
        (<span style="color: #333333;">user-error</span>  <span style="color: #183691;">"source block \"%s\" not found"</span> (cdr include)))
      (<span style="color: #a71d5d;">setq</span> body (concat (org-element-property  <span style="color: #a71d5d;">:value</span> (cdr (assoc (cdr include) named-blocks)))
                         body))
      (<span style="color: #a71d5d;">setf</span> (nth 1 info) body)
      (<span style="color: #a71d5d;">setq</span> include (assoc  <span style="color: #a71d5d;">:include</span>
                           (org-babel-parse-header-arguments
                            (org-element-property  <span style="color: #a71d5d;">:parameters</span> (cdr (assoc (cdr include) named-blocks)))))))
    (funcall orig-fun arg info params)))

(advice-add 'org-babel-execute-src-block  <span style="color: #a71d5d;">:around</span> 'adviced:org-babel-execute-src-block)
</pre>
</div>

 <p>
Before I built my own support, I did find that  <a href="https://orgmode.org/manual/Noweb-Reference-Syntax.html">noweb</a> got me most of what I needed, but required sprinkling blocks with placeholder references.
</p>


 <div id="orgba43e29" class="figure">
 <p> <img src="../images/emacs-chaining-org-babel-blocks/noweb.gif" alt="noweb.gif" width="50%" height="50%"></img></p>
</div>

 <p>
Combining  <a href="https://orgmode.org/manual/Noweb-Reference-Syntax.html">:noweb</a> and  <a href="https://org-babel.readthedocs.io/en/latest/header-args/#prologue">:prologue</a> would have been a great match, if only prologue did expand the noweb reference. I'm sure there's an alternative I'm missing. Either way, it was fun to poke at babel blocks and build my own chaining support.
</p>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/emacs-chaining-org-babel-blocks</link>
  <guid isPermaLink="false">http://xenodium.com/emacs-chaining-org-babel-blocks</guid>
  <pubDate>Tue, 27 Oct 2020 00:00:00 +0000</pubDate>
</item>
<item>
  <title>Emacs: quote wrap all in region</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-emacs-quote-wrap-all-in-region" class="outline-2">
 <h2 id="emacs-quote-wrap-all-in-region"> <span class="timestamp-wrapper"> <span class="timestamp">25 October 2020</span></span> Emacs: quote wrap all in region</h2>
 <div class="outline-text-2" id="text-emacs-quote-wrap-all-in-region">
 <p>
As I find myself moving more shell commands into Emacs interactive commands to  <a href="http://xenodium.com/emacs-create-a-swift-packageproject/">create a Swift package/project</a>,  <a href="http://xenodium.com/enrich-your-dired-batching-toolbox/">enrich dired's featureset</a>, or  <a href="http://xenodium.com/emacs-searchplay-music-macos/">search/play Music (macOS)</a>, I often need to take a single space-separated string, make an elisp list of strings, and feed it to functions like  <i>process-lines</i>. No biggie, but I thought it'd be a fun little function to write: take the region and wrap all items in quotes. As a bonus, made it toggable.
</p>


 <div id="orgb352a02" class="figure">
 <p> <img src="../images/emacs-quote-wrap-all-in-region/wrap-toggle-region.gif" alt="wrap-toggle-region.gif" width="50%" height="50%"></img></p>
</div>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">ar/toggle-quote-wrap-all-in-region</span> (beg end)
   <span style="color: #183691;">"Toggle wrapping all items in region with double quotes."</span>
  (<span style="color: #a71d5d;">interactive</span> (list (mark) (point)))
  (<span style="color: #a71d5d;">unless</span> (region-active-p)
    (<span style="color: #333333;">user-error</span>  <span style="color: #183691;">"no region to wrap"</span>))
  (<span style="color: #a71d5d;">let</span> ((deactivate-mark nil)
        (replacement (string-join
                      (mapcar (<span style="color: #a71d5d;">lambda</span> (item)
                                (<span style="color: #a71d5d;">if</span> (string-match-p  <span style="color: #183691;">"^\".*\"$"</span> item)
                                    (string-trim item  <span style="color: #183691;">"\""</span>  <span style="color: #183691;">"\""</span>)
                                  (format  <span style="color: #183691;">"\"%s\""</span> item)))
                              (split-string (buffer-substring beg end)))
                       <span style="color: #183691;">" "</span>)))
    (delete-region beg end)
    (insert replacement)))
</pre>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/emacs-quote-wrap-all-in-region</link>
  <guid isPermaLink="false">http://xenodium.com/emacs-quote-wrap-all-in-region</guid>
  <pubDate>Sun, 25 Oct 2020 00:00:00 +0100</pubDate>
</item>
<item>
  <title>Emacs: org block complete and edit</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-emacs-edit-after-org-block-completion" class="outline-2">
 <h2 id="emacs-edit-after-org-block-completion"> <span class="timestamp-wrapper"> <span class="timestamp">18 October 2020</span></span> Emacs: org block complete and edit</h2>
 <div class="outline-text-2" id="text-emacs-edit-after-org-block-completion">
 <p>
I quickly got used to  <a href="http://xenodium.com/emacs-org-block-company-completion/">Emacs org block company completion</a>. I did, however, almost always found myself running  <i>org-edit-special</i> immediately after inserting completion. I use  <b>C-c '</b> for that. That's all fine, but it just felt redundant.
</p>

 <p>
Why not automatically edit the source block in corresponding major mode after completion? I think I can also get used to that!
</p>


 <div id="org5a28f34" class="figure">
 <p> <img src="../images/emacs-edit-after-org-block-completion/automatic.gif" alt="automatic.gif" width="50%" height="50%"></img></p>
</div>

 <p>
Or maybe the automatic approach is too eager? There's also a middle ground: ask immediately after.
</p>


 <div id="org7beba36" class="figure">
 <p> <img src="../images/emacs-edit-after-org-block-completion/prompted.gif" alt="prompted.gif" width="50%" height="50%"></img></p>
</div>

 <p>
Or maybe I don't want either in the end? Time will tell, but I now have all three options available:
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">defcustom</span>  <span style="color: #333333;">company-org-block-edit-mode</span> 'auto
   <span style="color: #183691;">"Customize whether edit mode, post completion was inserted."</span>
   <span style="color: #a71d5d;">:type</span> '(choice
          (const  <span style="color: #a71d5d;">:tag</span>  <span style="color: #183691;">"nil: no edit after insertion"</span> nil)
          (const  <span style="color: #a71d5d;">:tag</span>  <span style="color: #183691;">"prompt: ask before edit"</span> prompt)
          (const  <span style="color: #a71d5d;">:tag</span>  <span style="color: #183691;">"auto edit, no prompt"</span> auto)))
</pre>
</div>

 <p>
The new option is now in the  <a href="https://github.com/xenodium/dotsies/blob/main/emacs/ar/company-org-block.el">company-org-block snippet</a> with my latest config.
</p>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/emacs-edit-after-org-block-completion</link>
  <guid isPermaLink="false">http://xenodium.com/emacs-edit-after-org-block-completion</guid>
  <pubDate>Sun, 18 Oct 2020 00:00:00 +0100</pubDate>
</item>
<item>
  <title>Emacs: create a Swift package/project</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-emacs-create-a-swift-packageproject" class="outline-2">
 <h2 id="emacs-create-a-swift-packageproject"> <span class="timestamp-wrapper"> <span class="timestamp">11 October 2020</span></span> Emacs: create a Swift package/project</h2>
 <div class="outline-text-2" id="text-emacs-create-a-swift-packageproject">
 <p>
Been playing around with  <a href="https://swift.org/package-manager/">Swift Package Manager (SPM)</a>. Creating a new Swift package (ie. project) is pretty simple.
</p>

 <p>
To create a library package, we can use the following:
</p>

 <div class="org-src-container">
 <pre class="src src-sh">swift package init --type library
</pre>
</div>

 <p>
Alternatively, to create a command-line utility use:
</p>

 <div class="org-src-container">
 <pre class="src src-sh">swift package init --type executable
</pre>
</div>

 <p>
Turns out, there are a few options: empty, library, executable, system-module, manifest.
</p>

 <p>
With a little elisp, we can write a completing function to quickly generate a Swift package/project without the need to drop to the shell.
</p>

 <p>
Bonus: I won't have to look up SPM options if I ever forget them.
</p>


 <div id="org7862ea9" class="figure">
 <p> <img src="../images/emacs-create-swift-package/swift-package.gif" alt="swift-package.gif" width="75%" height="75%"></img></p>
</div>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">ar/swift-package-init</span> ()
   <span style="color: #183691;">"Execute `swift package init', with optional name and completing type."</span>
  (<span style="color: #a71d5d;">interactive</span>)
  (<span style="color: #a71d5d;">let*</span> ((name (read-string  <span style="color: #183691;">"name (default): "</span>))
         (type (completing-read
                 <span style="color: #183691;">"project type: "</span>
                 <span style="color: #969896;">;; </span> <span style="color: #969896;">Splits "--type empty|library|executable|system-module|manifest"</span>
                (split-string
                 (nth 1 (split-string
                         (string-trim
                          (seq-find
                           (<span style="color: #a71d5d;">lambda</span> (line)
                             (string-match  <span style="color: #183691;">"--type"</span> line))
                           (process-lines  <span style="color: #183691;">"swift"</span>  <span style="color: #183691;">"package"</span>  <span style="color: #183691;">"init"</span>  <span style="color: #183691;">"--help"</span>)))
                          <span style="color: #183691;">"   "</span>))
                  <span style="color: #183691;">"|"</span>)))
         (command (format  <span style="color: #183691;">"swift package init --type %s"</span> type)))
    (<span style="color: #a71d5d;">unless</span> (string-empty-p name)
      (append command  <span style="color: #183691;">"--name "</span> name))
    (shell-command command))
  (dired default-directory)
  (revert-buffer))
</pre>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/emacs-create-a-swift-packageproject</link>
  <guid isPermaLink="false">http://xenodium.com/emacs-create-a-swift-packageproject</guid>
  <pubDate>Sun, 11 Oct 2020 00:00:00 +0100</pubDate>
</item>
<item>
  <title>Improved Ctrl-p/Ctrl-n macOS movement</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-improved-ctrl-p-ctrl-n-macos-movement" class="outline-2">
 <h2 id="improved-ctrl-p-ctrl-n-macos-movement"> <span class="timestamp-wrapper"> <span class="timestamp">04 October 2020</span></span> Improved Ctrl-p/Ctrl-n macOS movement</h2>
 <div class="outline-text-2" id="text-improved-ctrl-p-ctrl-n-macos-movement">
 <p>
macOS supports many Emacs bindings (out of the box). You can, for example, press C-p and C-n to move the cursor up and down (whether editing text in Emacs or any other macOS app). Jacob Rus's  <a href="http://www.hcs.harvard.edu/~jrus/site/cocoa-text.html">Customizing the Cocoa Text System</a> offers a more in-depth picture and also shows how to customize global macOS keybindings (via DefaultKeyBinding.dict).
</p>

 <p>
In addition to moving Emacs  <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Point.html">point</a> (cursor) up/down using C-p/C-n, I've internalized the same bindings to select an option from a list. Good Emacs examples of these are  <a href="https://company-mode.github.io/">company mode</a> and  <a href="https://github.com/abo-abo/swiper">ivy</a>.
</p>

 <p>
Vertical cursor movement using Emacs bindings works well in most macOS apps, including forms and text boxes in web pages. However, selecting from a completion list doesn't quite work as expected. Although the binding is technically handled, it moves the cursor within the text widget, ignoring the suggested choices.
</p>


 <div id="org746e8f6" class="figure">
 <p> <img src="../images/improved-ctrl-p-ctrl-n-macos-movement/bindings-borked.gif" alt="bindings-borked.gif" width="75%" height="75%"></img></p>
</div>

 <p>
Atif Afzal's  <a href="https://www.atfzl.com/use-emacs-key-bindings-everywhere">Use emacs key bindings everywhere</a> has a solution for the ignored case. He uses  <a href="https://github.com/pqrs-org/Karabiner-Elements">Karabiner Elements</a> to remap c-p and c-n to arrow-up and arrow-down.
</p>

 <p>
It's been roughly a week since I started using the Karabiner remapping, and I've yet to find a case where a web page (or any other macOS app) did not respond to c-p and c-n to move selection from a list.
</p>


 <div id="org4baacab" class="figure">
 <p> <img src="../images/improved-ctrl-p-ctrl-n-macos-movement/bindings-fixed.gif" alt="bindings-fixed.gif" width="75%" height="75%"></img></p>
</div>

 <p>
My ~/.config/karabiner/karabiner.json configuration is as follows:
</p>

 <div class="org-src-container">
 <pre class="src src-json">{
     <span style="color: #a71d5d;">"global"</span>: {
         <span style="color: #a71d5d;">"check_for_updates_on_startup"</span>:  <span style="color: #0086b3;">true</span>,
         <span style="color: #a71d5d;">"show_in_menu_bar"</span>:  <span style="color: #0086b3;">true</span>,
         <span style="color: #a71d5d;">"show_profile_name_in_menu_bar"</span>:  <span style="color: #0086b3;">false</span>
    },
     <span style="color: #a71d5d;">"profiles"</span>: [
        {
             <span style="color: #a71d5d;">"complex_modifications"</span>: {
                 <span style="color: #a71d5d;">"parameters"</span>: {
                     <span style="color: #a71d5d;">"basic.simultaneous_threshold_milliseconds"</span>:  <span style="color: #0086b3;">50</span>,
                     <span style="color: #a71d5d;">"basic.to_delayed_action_delay_milliseconds"</span>:  <span style="color: #0086b3;">500</span>,
                     <span style="color: #a71d5d;">"basic.to_if_alone_timeout_milliseconds"</span>:  <span style="color: #0086b3;">1000</span>,
                     <span style="color: #a71d5d;">"basic.to_if_held_down_threshold_milliseconds"</span>:  <span style="color: #0086b3;">500</span>,
                     <span style="color: #a71d5d;">"mouse_motion_to_scroll.speed"</span>:  <span style="color: #0086b3;">100</span>
                },
                 <span style="color: #a71d5d;">"rules"</span>: [
                    {
                         <span style="color: #a71d5d;">"description"</span>:  <span style="color: #183691;">"Ctrl+p/Ctrl+n to arrow up/down"</span>,
                         <span style="color: #a71d5d;">"manipulators"</span>: [
                            {
                                 <span style="color: #a71d5d;">"from"</span>: {
                                     <span style="color: #a71d5d;">"key_code"</span>:  <span style="color: #183691;">"p"</span>,
                                     <span style="color: #a71d5d;">"modifiers"</span>: {
                                         <span style="color: #a71d5d;">"mandatory"</span>: [
                                             <span style="color: #183691;">"control"</span>
                                        ]
                                    }
                                },
                                 <span style="color: #a71d5d;">"to"</span>: [
                                    {
                                         <span style="color: #a71d5d;">"key_code"</span>:  <span style="color: #183691;">"up_arrow"</span>
                                    }
                                ],
                                 <span style="color: #a71d5d;">"conditions"</span>: [
                                    {
                                         <span style="color: #a71d5d;">"type"</span>:  <span style="color: #183691;">"frontmost_application_unless"</span>,
                                         <span style="color: #a71d5d;">"bundle_identifiers"</span>: [
                                             <span style="color: #183691;">"^org\\.gnu\\.Emacs"</span>
                                        ]
                                    }
                                ],
                                 <span style="color: #a71d5d;">"type"</span>:  <span style="color: #183691;">"basic"</span>
                            },
                            {
                                 <span style="color: #a71d5d;">"from"</span>: {
                                     <span style="color: #a71d5d;">"key_code"</span>:  <span style="color: #183691;">"n"</span>,
                                     <span style="color: #a71d5d;">"modifiers"</span>: {
                                         <span style="color: #a71d5d;">"mandatory"</span>: [
                                             <span style="color: #183691;">"control"</span>
                                        ]
                                    }
                                },
                                 <span style="color: #a71d5d;">"to"</span>: [
                                    {
                                         <span style="color: #a71d5d;">"key_code"</span>:  <span style="color: #183691;">"down_arrow"</span>
                                    }
                                ],
                                 <span style="color: #a71d5d;">"conditions"</span>: [
                                    {
                                         <span style="color: #a71d5d;">"type"</span>:  <span style="color: #183691;">"frontmost_application_unless"</span>,
                                         <span style="color: #a71d5d;">"bundle_identifiers"</span>: [
                                             <span style="color: #183691;">"^org\\.gnu\\.Emacs"</span>
                                        ]
                                    }
                                ],
                                 <span style="color: #a71d5d;">"type"</span>:  <span style="color: #183691;">"basic"</span>
                            }
                        ]
                    }
                ]
            },
             <span style="color: #a71d5d;">"devices"</span>: [],
             <span style="color: #a71d5d;">"fn_function_keys"</span>: [],
             <span style="color: #a71d5d;">"name"</span>:  <span style="color: #183691;">"Default profile"</span>,
             <span style="color: #a71d5d;">"parameters"</span>: {
                 <span style="color: #a71d5d;">"delay_milliseconds_before_open_device"</span>:  <span style="color: #0086b3;">1000</span>
            },
             <span style="color: #a71d5d;">"selected"</span>:  <span style="color: #0086b3;">true</span>,
             <span style="color: #a71d5d;">"simple_modifications"</span>: [],
             <span style="color: #a71d5d;">"virtual_hid_keyboard"</span>: {
                 <span style="color: #a71d5d;">"country_code"</span>:  <span style="color: #0086b3;">0</span>,
                 <span style="color: #a71d5d;">"mouse_key_xy_scale"</span>:  <span style="color: #0086b3;">100</span>
            }
        }
    ]
}
</pre>
</div>
</div>

 <div id="outline-container-org676da38" class="outline-3">
 <h3 id="org676da38">Bonus (C-g to exit)</h3>
 <div class="outline-text-3" id="text-org676da38">
 <p>
Pressing Esc often dismisses or cancels macOS windows, menus, etc. This is also the case for web pages. As an Emacs user, I'm pretty used to pressing C-g to cancel, quit, or exit things. With that in mind, mapping C-g to Esc is surprisingly useful outside of Emacs. Here's the relevant Karabiner C-g binding for that:
</p>

 <div class="org-src-container">
 <pre class="src src-json">{
     <span style="color: #a71d5d;">"description"</span>:  <span style="color: #183691;">"Ctrl+G to Escape"</span>,
     <span style="color: #a71d5d;">"manipulators"</span>: [
        {
             <span style="color: #a71d5d;">"description"</span>:  <span style="color: #183691;">"emacs like escape"</span>,
             <span style="color: #a71d5d;">"from"</span>: {
                 <span style="color: #a71d5d;">"key_code"</span>:  <span style="color: #183691;">"g"</span>,
                 <span style="color: #a71d5d;">"modifiers"</span>: {
                     <span style="color: #a71d5d;">"mandatory"</span>: [
                         <span style="color: #183691;">"left_control"</span>
                    ]
                }
            },
             <span style="color: #a71d5d;">"to"</span>: [
                {
                     <span style="color: #a71d5d;">"key_code"</span>:  <span style="color: #183691;">"escape"</span>
                }
            ],
             <span style="color: #a71d5d;">"conditions"</span>: [
                {
                     <span style="color: #a71d5d;">"type"</span>:  <span style="color: #183691;">"frontmost_application_unless"</span>,
                     <span style="color: #a71d5d;">"bundle_identifiers"</span>: [
                         <span style="color: #183691;">"^org\\.gnu\\.Emacs"</span>
                    ]
                }
            ],
             <span style="color: #a71d5d;">"conditions"</span>: [
                {
                     <span style="color: #a71d5d;">"type"</span>:  <span style="color: #183691;">"frontmost_application_unless"</span>,
                     <span style="color: #a71d5d;">"bundle_identifiers"</span>: [
                         <span style="color: #183691;">"^org\\.gnu\\.Emacs"</span>
                    ]
                }
            ],
             <span style="color: #a71d5d;">"type"</span>:  <span style="color: #183691;">"basic"</span>
        }
    ]
}
</pre>
</div>

 <p>
UPDATE: Ensure bindings are only active when Emacs is  <span class="underline">not</span> active.</p>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/improved-ctrl-p-ctrl-n-macos-movement</link>
  <guid isPermaLink="false">http://xenodium.com/improved-ctrl-p-ctrl-n-macos-movement</guid>
  <pubDate>Sun, 04 Oct 2020 00:00:00 +0100</pubDate>
</item>
<item>
  <title>Emacs: search/play Music (macOS)</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-emacs-searchplay-music-macos" class="outline-2">
 <h2 id="emacs-searchplay-music-macos"> <span class="timestamp-wrapper"> <span class="timestamp">19 September 2020</span></span> Emacs: search/play Music (macOS)</h2>
 <div class="outline-text-2" id="text-emacs-searchplay-music-macos">
 <p>
While trying out macOS's Music app to manage offline media, I wondered if I could easily search and control playback from Emacs. Spoiler alert: yes it can be done and fuzzy searching music is rather gratifying.
</p>


 <div id="orgf5e3fe0" class="figure">
 <p> <img src="../images/emacs-searchplay-music-macos/music_search.gif" alt="music_search.gif" width="75%" height="75%"></img></p>
</div>

 <p>
Luckily, the hard work's already handled by  <a href="https://github.com/hile/pytunes">pytunes</a>, a command line interface to macOS's iTunes/Music app. We add  <a href="https://ffmpeg.org/ffprobe.html">ffprobe</a> and some elisp glue to the mix, and we can generate an Emacs media index.
</p>

 <p>
Indexing takes roughly a minute per 1000 files. Prolly suboptimal, but I don't intend to re-index frequently. For now, we can use a separate process to prevent Emacs from blocking, so we can get back to playing tetris from our beloved editor:
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">musica-index</span> ()
   <span style="color: #183691;">"Indexes Music's tracks in two stages:</span>
 <span style="color: #183691;">1. Generates \"Tracks.sqlite\" using pytunes (needs https://github.com/hile/pytunes installed).</span>
 <span style="color: #183691;">2. Caches an index at ~/.emacs.d/.musica.el."</span>
  (<span style="color: #a71d5d;">interactive</span>)
  (message  <span style="color: #183691;">"Indexing music... started"</span>)
  (<span style="color: #a71d5d;">let*</span> ((now (current-time))
         (name  <span style="color: #183691;">"Music indexing"</span>)
         (buffer (get-buffer-create (format  <span style="color: #183691;">"*%s*"</span> name))))
    (<span style="color: #a71d5d;">with-current-buffer</span> buffer
      (delete-region (point-min)
                     (point-max)))
    (set-process-sentinel
     (start-process name
                    buffer
                    (file-truename (expand-file-name invocation-name
                                                     invocation-directory))
                     <span style="color: #183691;">"--quick"</span>  <span style="color: #183691;">"--batch"</span>  <span style="color: #183691;">"--eval"</span>
                    (prin1-to-string
                     `(<span style="color: #a71d5d;">progn</span>
                        (<span style="color: #a71d5d;">interactive</span>)
                        (<span style="color: #a71d5d;">require</span> ' <span style="color: #0086b3;">cl-lib</span>)
                        (<span style="color: #a71d5d;">require</span> ' <span style="color: #0086b3;">seq</span>)
                        (<span style="color: #a71d5d;">require</span> ' <span style="color: #0086b3;">map</span>)

                        (message  <span style="color: #183691;">"Generating Tracks.sqlite..."</span>)
                        (process-lines  <span style="color: #183691;">"pytunes"</span>  <span style="color: #183691;">"update-index"</span>)  <span style="color: #969896;">;; </span> <span style="color: #969896;">Generates Tracks.sqlite</span>
                        (message  <span style="color: #183691;">"Generating Tracks.sqlite... done"</span>)

                        (<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">parse-tags</span> (path)
                          (<span style="color: #a71d5d;">with-temp-buffer</span>
                            (<span style="color: #a71d5d;">if</span> (eq 0 (call-process  <span style="color: #183691;">"ffprobe"</span> nil t nil  <span style="color: #183691;">"-v"</span>  <span style="color: #183691;">"quiet"</span>
                                                     <span style="color: #183691;">"-print_format"</span>  <span style="color: #183691;">"json"</span>  <span style="color: #183691;">"-show_format"</span> path))
                                (map-elt (json-parse-string (buffer-string)
                                                             <span style="color: #a71d5d;">:object-type</span> 'alist)
                                         'format)
                              (message  <span style="color: #183691;">"Warning: Couldn't read track metadata for %s"</span> path)
                              (message  <span style="color: #183691;">"%s"</span> (buffer-string))
                              (list (cons 'filename path)))))

                        (<span style="color: #a71d5d;">let*</span> ((paths (process-lines  <span style="color: #183691;">"sqlite3"</span>
                                                     (concat (expand-file-name  <span style="color: #183691;">"~/"</span>)
                                                              <span style="color: #183691;">"Music/Music/Music Library.musiclibrary/Tracks.sqlite"</span>)
                                                      <span style="color: #183691;">"select path from tracks"</span>))
                               (total (length paths))
                               (n 0)
                               (records (seq-map (<span style="color: #a71d5d;">lambda</span> (path)
                                                   (<span style="color: #a71d5d;">let</span> ((tags (parse-tags path)))
                                                     (message  <span style="color: #183691;">"%d/%d %s"</span> (<span style="color: #a71d5d;">setq</span> n (1+ n))
                                                              total (<span style="color: #a71d5d;">or</span> (map-elt (map-elt tags 'tags) 'title)  <span style="color: #183691;">"No title"</span>))
                                                     tags))
                                                 paths)))
                          (<span style="color: #a71d5d;">with-temp-buffer</span>
                            (prin1 records (current-buffer))
                            (write-file  <span style="color: #183691;">"~/.emacs.d/.musica.el"</span> nil))))))
     (<span style="color: #a71d5d;">lambda</span> (process state)
       (<span style="color: #a71d5d;">if</span> (= (process-exit-status process) 0)
           (message  <span style="color: #183691;">"Indexing music... finished (%.3fs)"</span>
                    (float-time (time-subtract (current-time) now)))
         (message  <span style="color: #183691;">"Indexing music... failed, see %s"</span> buffer))))))
</pre>
</div>

 <p>
Once media is indexed, we can feed it to  <a href="https://github.com/abo-abo/swiper">ivy</a> for that narrowing-down fuzzy-searching goodness! It's worth mentioning the  <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Size-of-Displayed-Text.html">truncate-string-to-width</a> function. Super handy for truncating strings to a fixed width and visually organizing search results in columns.
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">musica-search</span> ()
  (<span style="color: #a71d5d;">interactive</span>)
  (<span style="color: #333333;">cl-assert</span> (executable-find  <span style="color: #183691;">"pytunes"</span>) nil  <span style="color: #183691;">"pytunes not installed"</span>)
  (<span style="color: #a71d5d;">let*</span> ((c1-width (round (* (- (window-width) 9) 0.4)))
         (c2-width (round (* (- (window-width) 9) 0.3)))
         (c3-width (- (window-width) 9 c1-width c2-width)))
    (ivy-read  <span style="color: #183691;">"Play: "</span> (mapcar
                        (<span style="color: #a71d5d;">lambda</span> (track)
                          (<span style="color: #a71d5d;">let-alist</span> track
                            (cons (format  <span style="color: #183691;">"%s   %s   %s"</span>
                                          (truncate-string-to-width
                                           (<span style="color: #a71d5d;">or</span> .tags.title
                                               (file-name-base .filename)
                                                <span style="color: #183691;">"No title"</span>)  <span style="color: #333333;">c1-width nil ?\s </span> <span style="color: #333333;">"…"</span> <span style="color: #333333;">)</span>
                                          (truncate-string-to-width (propertize (<span style="color: #a71d5d;">or</span> .tags.artist  <span style="color: #183691;">""</span>)
                                                                                'face '(<span style="color: #a71d5d;">:foreground</span>  <span style="color: #183691;">"yellow"</span>))  <span style="color: #333333;">c2-width nil ?\s </span> <span style="color: #333333;">"…"</span> <span style="color: #333333;">)</span>
                                          (truncate-string-to-width
                                           (propertize (<span style="color: #a71d5d;">or</span> .tags.album  <span style="color: #183691;">""</span>)
                                                       'face '(<span style="color: #a71d5d;">:foreground</span>  <span style="color: #183691;">"cyan1"</span>))  <span style="color: #333333;">c3-width nil ?\s </span> <span style="color: #333333;">"…"</span> <span style="color: #333333;">))</span>
                                  track)))
                        (musica--index))
               <span style="color: #a71d5d;">:action</span> (<span style="color: #a71d5d;">lambda</span> (selection)
                        (<span style="color: #a71d5d;">let-alist</span> (cdr selection)
                          (process-lines  <span style="color: #183691;">"pytunes"</span>  <span style="color: #183691;">"play"</span> .filename)
                          (message  <span style="color: #183691;">"Playing: %s [%s] %s"</span>
                                   (<span style="color: #a71d5d;">or</span> .tags.title
                                       (file-name-base .filename)
                                        <span style="color: #183691;">"No title"</span>)
                                   (<span style="color: #a71d5d;">or</span> .tags.artist
                                        <span style="color: #183691;">"No artist"</span>)
                                   (<span style="color: #a71d5d;">or</span> .tags.album
                                        <span style="color: #183691;">"No album"</span>)))))))

(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">musica--index</span> ()
  (<span style="color: #a71d5d;">with-temp-buffer</span>
    (insert-file-contents  <span style="color: #183691;">"~/.emacs.d/.musica.el"</span>)
    (read (current-buffer))))
</pre>
</div>

 <p>
The remaining bits are straigtforward. We add a few interactive functions to control playback:
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">musica-info</span> ()
  (<span style="color: #a71d5d;">interactive</span>)
  (<span style="color: #a71d5d;">let</span> ((raw (process-lines  <span style="color: #183691;">"pytunes"</span>  <span style="color: #183691;">"info"</span>)))
    (message  <span style="color: #183691;">"%s [%s] %s"</span>
             (string-trim (string-remove-prefix  <span style="color: #183691;">"Title"</span> (nth 3 raw)))
             (string-trim (string-remove-prefix  <span style="color: #183691;">"Artist"</span> (nth 1 raw)))
             (string-trim (string-remove-prefix  <span style="color: #183691;">"Album"</span> (nth 2 raw))))))

(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">musica-play-pause</span> ()
  (<span style="color: #a71d5d;">interactive</span>)
  (<span style="color: #333333;">cl-assert</span> (executable-find  <span style="color: #183691;">"pytunes"</span>) nil  <span style="color: #183691;">"pytunes not installed"</span>)
  (process-lines  <span style="color: #183691;">"pytunes"</span>  <span style="color: #183691;">"play"</span>)
  (musica-info))

(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">musica-play-next</span> ()
  (<span style="color: #a71d5d;">interactive</span>)
  (<span style="color: #333333;">cl-assert</span> (executable-find  <span style="color: #183691;">"pytunes"</span>) nil  <span style="color: #183691;">"pytunes not installed"</span>)
  (process-lines  <span style="color: #183691;">"pytunes"</span>  <span style="color: #183691;">"next"</span>))

(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">musica-play-next-random</span> ()
  (<span style="color: #a71d5d;">interactive</span>)
  (<span style="color: #333333;">cl-assert</span> (executable-find  <span style="color: #183691;">"pytunes"</span>) nil  <span style="color: #183691;">"pytunes not installed"</span>)
  (process-lines  <span style="color: #183691;">"pytunes"</span>  <span style="color: #183691;">"shuffle"</span>  <span style="color: #183691;">"enable"</span>)
  (<span style="color: #a71d5d;">let-alist</span> (seq-random-elt (musica--index))
    (process-lines  <span style="color: #183691;">"pytunes"</span>  <span style="color: #183691;">"play"</span> .filename))
  (musica-info))

(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">musica-play-previous</span> ()
  (<span style="color: #a71d5d;">interactive</span>)
  (<span style="color: #333333;">cl-assert</span> (executable-find  <span style="color: #183691;">"pytunes"</span>) nil  <span style="color: #183691;">"pytunes not installed"</span>)
  (process-lines  <span style="color: #183691;">"pytunes"</span>  <span style="color: #183691;">"previous"</span>))
</pre>
</div>

 <p>
Finally, if we want some convenient keybindings, we can add something like:
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(global-set-key (kbd  <span style="color: #183691;">"C-c m SPC"</span>) #'musica-play-pause)
(global-set-key (kbd  <span style="color: #183691;">"C-c m i"</span>) #'musica-info)
(global-set-key (kbd  <span style="color: #183691;">"C-c m n"</span>) #'musica-play-next)
(global-set-key (kbd  <span style="color: #183691;">"C-c m p"</span>) #'musica-play-previous)
(global-set-key (kbd  <span style="color: #183691;">"C-c m r"</span>) #'musica-play-next-random)
(global-set-key (kbd  <span style="color: #183691;">"C-c m s"</span>) #'musica-search)
</pre>
</div>

 <p>
Hooray! Controlling music is now an Emacs keybinding away: \o/
</p>

 <p>
comments on  <a href="https://twitter.com/xenodium/status/1307294369326731264">twitter</a>.
</p>

 <p>
UPDATE1: Installing pytunes with  <i>pip3 install pytunes</i> didn't just work for me. Instead, I cloned and installed as:
</p>

 <div class="org-src-container">
 <pre class="src src-sh">git clone https://github.com/hile/pytunes
pip3 install file:///path/to/pytunes
pip3 install pytz
brew install libmagic
</pre>
</div>

 <p>
UPDATE2: Checked in to  <a href="https://github.com/xenodium/dotsies/blob/master/emacs/ar/musica.el">dot files</a>.
</p>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/emacs-searchplay-music-macos</link>
  <guid isPermaLink="false">http://xenodium.com/emacs-searchplay-music-macos</guid>
  <pubDate>Sat, 19 Sep 2020 00:00:00 +0100</pubDate>
</item>
<item>
  <title>Smarter Swift snippets</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-smarter-snippets" class="outline-2">
 <h2 id="smarter-snippets"> <span class="timestamp-wrapper"> <span class="timestamp">25 August 2020</span></span> Smarter Swift snippets</h2>
 <div class="outline-text-2" id="text-smarter-snippets">
 <p>
 <a href="https://twitter.com/safijari">Jari Safi</a> published a wonderful Emacs video  <a href="https://youtu.be/xmBovJvQ3KU">demoing python yasnippets in action</a>. The constructor snippet, automatically setting ivars, is just magical. I wanted it for Swift!
</p>

 <p>
I took a look at the  <a href="https://github.com/jorgenschaefer/elpy/blob/060a4eb78ec8eba9c8fe3466c40a414d84b3dc81/snippets/python-mode/__init__">__init__ snippet</a> from  <a href="https://github.com/jorgenschaefer">Jorgen Schäfer</a>'s  <a href="https://github.com/jorgenschaefer/elpy">elpy</a>. It uses  <a href="https://github.com/jorgenschaefer/elpy/blob/060a4eb78ec8eba9c8fe3466c40a414d84b3dc81/snippets/python-mode/.yas-setup.el#L33">elpy-snippet-init-assignments</a> to generate the assignments.
</p>

 <p>
With small tweaks, we can get the same action going on for Swift \o/
</p>


 <div id="orgc93e26d" class="figure">
 <p> <img src="../images/smarter-snippets/snippet.gif" alt="snippet.gif" width="75%" height="75%"></img></p>
</div>

 <p>
init.yasnippet:
</p>

 <div class="org-src-container">
 <pre class="src src-snippet"> <span style="color: #969896;"># -*- mode: snippet -*-</span>
 <span style="color: #969896;"># name: init with assignments</span>
 <span style="color: #969896;"># key: init</span>
 <span style="color: #969896;"># --</span>
init(<span style="color: #a71d5d;">${</span> <span style="color: #333333;">1</span> <span style="color: #a71d5d;">:</span>, args <span style="color: #a71d5d;">}</span>) {
   <span style="color: #a71d5d;">${</span> <span style="color: #333333;">1</span> <span style="color: #a71d5d;">:</span> <span style="color: #a71d5d;">$(</span>swift-snippet-init-assignments yas-text) <span style="color: #a71d5d;">}</span>
 <span style="color: #a71d5d;">}</span>
 <span style="color: #333333;">$</span> <span style="color: #183691;">0</span>
</pre>
</div>

 <p>
.yas-setup.el:
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">swift-snippet-init-assignments</span> (arg-string)
  (<span style="color: #a71d5d;">let</span> ((indentation (make-string (<span style="color: #a71d5d;">save-excursion</span>
                                    (goto-char start-point)
                                    (current-indentation))
                                  ?\s)))
    (string-trim (mapconcat (<span style="color: #a71d5d;">lambda</span> (arg)
                              (<span style="color: #a71d5d;">if</span> (string-match  <span style="color: #183691;">"^\\*"</span> arg)
                                   <span style="color: #183691;">""</span>
                                (format  <span style="color: #183691;">"self.%s = %s\n%s"</span>
                                        arg arg indentation)))
                            (swift-snippet-split-args arg-string)
                             <span style="color: #183691;">""</span>))))

(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">swift-snippet-split-args</span> (arg-string)
  (mapcar (<span style="color: #a71d5d;">lambda</span> (x)
            (<span style="color: #a71d5d;">if</span> (<span style="color: #a71d5d;">and</span> x (string-match  <span style="color: #183691;">"</span> <span style="color: #969896;">\\</span> <span style="color: #a71d5d;">(</span> <span style="color: #183691;">[[:alnum:]]*</span> <span style="color: #969896;">\\</span> <span style="color: #a71d5d;">)</span> <span style="color: #183691;">:"</span> x))
                (match-string-no-properties 1 x)
              x))
          (split-string arg-string  <span style="color: #183691;">"[[:blank:]]*,[[:blank:]]*"</span> t)))
</pre>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/smarter-snippets</link>
  <guid isPermaLink="false">http://xenodium.com/smarter-snippets</guid>
  <pubDate>Tue, 25 Aug 2020 00:00:00 +0100</pubDate>
</item>
<item>
  <title>Trying out gccemacs on macOS</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-trying-out-gccemacs-on-macos" class="outline-2">
 <h2 id="trying-out-gccemacs-on-macos"> <span class="timestamp-wrapper"> <span class="timestamp">16 August 2020</span></span> Trying out gccemacs on macOS</h2>
 <div class="outline-text-2" id="text-trying-out-gccemacs-on-macos">
 <p>
 <i>UPDATE: I'm no longer using these steps. See  <a href="https://xenodium.com/emacs-plus-with-native-comp/">Emacs plus –with-native-comp</a> for an easier alternative.</i>
</p>

 <p>
Below are the instructions I use to build Andrea Corallo's  <a href="http://akrl.sdf.org/gccemacs.html">gccemacs</a> on macOS. It is based on  <a href="https://github.com/AllenDang">Allen Dang</a>'s handy  <a href="https://gist.github.com/AllenDang/f019593e65572a8e0aefc96058a2d23e">instructions</a> plus some changes of my own.
</p>
</div>

 <div id="outline-container-org8d072f9" class="outline-3">
 <h3 id="org8d072f9">Install gcc and libgccjit via homebrew</h3>
 <div class="outline-text-3" id="text-org8d072f9">
 <div class="org-src-container">
 <pre class="src src-sh">brew install gcc libgccjit
</pre>
</div>
</div>
</div>

 <div id="outline-container-orgd4e966f" class="outline-3">
 <h3 id="orgd4e966f">Save configure script</h3>
 <div class="outline-text-3" id="text-orgd4e966f">
 <p>
Create configure-gccemacs.sh
</p>

 <div class="org-src-container">
 <pre class="src src-sh"> <span style="color: #969896;">#</span> <span style="color: #969896;">!/bin/</span> <span style="color: #a71d5d;">bash</span>

 <span style="color: #a71d5d;">set</span> -o nounset
 <span style="color: #a71d5d;">set</span> -o errexit

 <span style="color: #969896;"># </span> <span style="color: #969896;">Configures Emacs for building native comp support</span>
 <span style="color: #969896;"># </span> <span style="color: #969896;">http://akrl.sdf.org/gccemacs.html</span>

 <span style="color: #a71d5d;">readonly</span>  <span style="color: #333333;">GCC_DIR</span>= <span style="color: #183691;">"$(realpath $(brew --prefix libgccjit))"</span>
[[ -d $ <span style="color: #333333;">GCC_DIR</span> ]] ||  {  <span style="color: #a71d5d;">echo</span>  <span style="color: #183691;">"${GCC_DIR} not found"</span>;  <span style="color: #a71d5d;">exit</span> 1; }

 <span style="color: #a71d5d;">readonly</span>  <span style="color: #333333;">SED_DIR</span>= <span style="color: #183691;">"$(realpath $(brew --prefix gnu-sed))"</span>
[[ -d $ <span style="color: #333333;">SED_DIR</span> ]] ||  {  <span style="color: #a71d5d;">echo</span>  <span style="color: #183691;">"${SED_DIR} not found"</span>;  <span style="color: #a71d5d;">exit</span> 1; }

 <span style="color: #a71d5d;">readonly</span>  <span style="color: #333333;">GCC_INCLUDE_DIR</span>=${ <span style="color: #333333;">GCC_DIR</span>}/include
[[ -d $ <span style="color: #333333;">GCC_INCLUDE_DIR</span> ]] ||  {  <span style="color: #a71d5d;">echo</span>  <span style="color: #183691;">"${GCC_INCLUDE_DIR} not found"</span>;  <span style="color: #a71d5d;">exit</span> 1; }

 <span style="color: #a71d5d;">readonly</span>  <span style="color: #333333;">GCC_LIB_DIR</span>=${ <span style="color: #333333;">GCC_DIR</span>}/lib/gcc/10
[[ -d $ <span style="color: #333333;">GCC_LIB_DIR</span> ]] ||  {  <span style="color: #a71d5d;">echo</span>  <span style="color: #183691;">"${GCC_LIB_DIR} not found"</span>;  <span style="color: #a71d5d;">exit</span> 1; }

 <span style="color: #a71d5d;">export</span>  <span style="color: #333333;">PATH</span>= <span style="color: #183691;">"${SED_DIR}/libexec/gnubin:${PATH}"</span>
 <span style="color: #a71d5d;">export</span>  <span style="color: #333333;">CFLAGS</span>= <span style="color: #183691;">"-O2 -I${GCC_INCLUDE_DIR}"</span>
 <span style="color: #a71d5d;">export</span>  <span style="color: #333333;">LDFLAGS</span>= <span style="color: #183691;">"-L${GCC_LIB_DIR} -I${GCC_INCLUDE_DIR}"</span>
 <span style="color: #a71d5d;">export</span>  <span style="color: #333333;">LD_LIBRARY_PATH</span>= <span style="color: #183691;">"${GCC_LIB_DIR}"</span>
 <span style="color: #a71d5d;">export</span>  <span style="color: #333333;">DYLD_FALLBACK_LIBRARY_PATH</span>= <span style="color: #183691;">"${GCC_LIB_DIR}"</span>

 <span style="color: #a71d5d;">echo</span>  <span style="color: #183691;">"Environment"</span>
 <span style="color: #a71d5d;">echo</span>  <span style="color: #183691;">"-----------"</span>
 <span style="color: #a71d5d;">echo</span> PATH: $ <span style="color: #333333;">PATH</span>
 <span style="color: #a71d5d;">echo</span> CFLAGS: $ <span style="color: #333333;">CFLAGS</span>
 <span style="color: #a71d5d;">echo</span> LDFLAGS: $ <span style="color: #333333;">LDFLAGS</span>
 <span style="color: #a71d5d;">echo</span> DYLD_FALLBACK_LIBRARY_PATH: $ <span style="color: #333333;">DYLD_FALLBACK_LIBRARY_PATH</span>
 <span style="color: #a71d5d;">echo</span>  <span style="color: #183691;">"-----------"</span>

./autogen.sh

./configure  <span style="color: #183691;">\</span>
     --prefix= <span style="color: #183691;">"$PWD/nextstep/Emacs.app/Contents/MacOS"</span>  <span style="color: #183691;">\</span>
     --enable-locallisppath= <span style="color: #183691;">"${PWD}/nextstep/Emacs.app/Contents/MacOS"</span>  <span style="color: #183691;">\</span>
     --with-mailutils  <span style="color: #183691;">\</span>
     --with-ns  <span style="color: #183691;">\</span>
     --with-imagemagick  <span style="color: #183691;">\</span>
     --with-cairo  <span style="color: #183691;">\</span>
     --with-modules  <span style="color: #183691;">\</span>
     --with-xml2  <span style="color: #183691;">\</span>
     --with-gnutls  <span style="color: #183691;">\</span>
     --with-json  <span style="color: #183691;">\</span>
     --with-rsvg  <span style="color: #183691;">\</span>
     --with-native-compilation  <span style="color: #183691;">\</span>
     --disable-silent-rules  <span style="color: #183691;">\</span>
     --disable-ns-self-contained  <span style="color: #183691;">\</span>
     --without-dbus
</pre>
</div>

 <p>
Make it executable
</p>

 <div class="org-src-container">
 <pre class="src src-shell">chmod  <span style="color: #969896;">+x</span> configure-gccemacs.sh
</pre>
</div>
</div>
</div>

 <div id="outline-container-org829d233" class="outline-3">
 <h3 id="org829d233">Clone Emacs source</h3>
 <div class="outline-text-3" id="text-org829d233">
 <div class="org-src-container">
 <pre class="src src-shell">git clone  <span style="color: #969896;">--branch</span> master https://github.com/emacs-mirror/emacs gccemacs
</pre>
</div>
</div>
</div>

 <div id="outline-container-org4b24afe" class="outline-3">
 <h3 id="org4b24afe">Configure build</h3>
 <div class="outline-text-3" id="text-org4b24afe">
 <div class="org-src-container">
 <pre class="src src-sh"> <span style="color: #a71d5d;">cd</span> gccemacs
../configure-gccemacs.sh
</pre>
</div>
</div>
</div>

 <div id="outline-container-orgcaebace" class="outline-3">
 <h3 id="orgcaebace">Native lisp compiler found?</h3>
 <div class="outline-text-3" id="text-orgcaebace">
 <p>
Verify native lisp compiler is found:
</p>

 <div class="org-src-container">
 <pre class="src src-fundamental">Does Emacs have native lisp compiler?                   yes
</pre>
</div>
</div>
</div>

 <div id="outline-container-org98e6426" class="outline-3">
 <h3 id="org98e6426">Build</h3>
 <div class="outline-text-3" id="text-org98e6426">
 <p>
Put those cores to use. Find out how many you got with:
</p>

 <div class="org-src-container">
 <pre class="src src-sh">sysctl hw.logicalcpu
</pre>
</div>

 <pre class="example">
hw.logicalcpu: 4
</pre>


 <p>
Ok so build with:
</p>

 <div class="org-src-container">
 <pre class="src src-sh">make -j4  <span style="color: #333333;">NATIVE_FAST_BOOT</span>=1
cp -r lisp nextstep/Emacs.app/Contents/Resources/
cp -r native-lisp nextstep/Emacs.app/Contents
make install
</pre>
</div>

 <p>
 <b>Note:</b> Using  <i>NATIVE_FAST_BOOT=1</i> significantly improves build time (totalling between 20-30 mins, depending on your specs). Without it, the build can take  <b>hours</b>.
</p>

 <p>
The macOS app build (under nextstep/Emacs.app) is ready, but read on before launching.
</p>
</div>
</div>

 <div id="outline-container-org3edfb5a" class="outline-3">
 <h3 id="org3edfb5a">Remove ~/emacs.d</h3>
 <div class="outline-text-3" id="text-org3edfb5a">
 <p>
You likely want to start with a clean install, byte-compiling all packages with the latest Emacs version. In any case, rename ~/emacs.d (for backup?) or remove ~/emacs.d.
</p>
</div>
</div>

 <div id="outline-container-org7670ef5" class="outline-3">
 <h3 id="org7670ef5">init.el config</h3>
 <div class="outline-text-3" id="text-org7670ef5">
 <p>
Ensure  <i>exec-path</i> includes the script's "–prefix=" value,  <i>LIBRARY_PATH</i> points to gcc's lib dir, and finally set  <i>comp-deferred-compilation</i>. I wrapped the snippet in my   <i>exec-path-from-shell</i> config, but setting early in init.el should be enough.
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">use-package</span>  <span style="color: #0086b3;">exec-path-from-shell</span>
   <span style="color: #a71d5d;">:ensure</span> t
   <span style="color: #a71d5d;">:config</span>
  (exec-path-from-shell-initialize)
  (<span style="color: #a71d5d;">if</span> (<span style="color: #a71d5d;">and</span> (fboundp 'native-comp-available-p)
           (native-comp-available-p))
      (<span style="color: #a71d5d;">progn</span>
        (message  <span style="color: #183691;">"Native comp is available"</span>)
         <span style="color: #969896;">;; </span> <span style="color: #969896;">Using Emacs.app/Contents/MacOS/bin since it was compiled with</span>
         <span style="color: #969896;">;; </span> <span style="color: #969896;">./configure --prefix="$PWD/nextstep/Emacs.app/Contents/MacOS"</span>
        (add-to-list 'exec-path (concat invocation-directory  <span style="color: #183691;">"bin"</span>) t)
        (setenv  <span style="color: #183691;">"LIBRARY_PATH"</span> (concat (getenv  <span style="color: #183691;">"LIBRARY_PATH"</span>)
                                       (<span style="color: #a71d5d;">when</span> (getenv  <span style="color: #183691;">"LIBRARY_PATH"</span>)
                                          <span style="color: #183691;">":"</span>)
                                        <span style="color: #969896;">;; </span> <span style="color: #969896;">This is where Homebrew puts gcc libraries.</span>
                                       (car (file-expand-wildcards
                                             (expand-file-name  <span style="color: #183691;">"~/homebrew/opt/gcc/lib/gcc/*"</span>)))))
         <span style="color: #969896;">;; </span> <span style="color: #969896;">Only set after LIBRARY_PATH can find gcc libraries.</span>
        (<span style="color: #a71d5d;">setq</span> comp-deferred-compilation t))
    (message  <span style="color: #183691;">"Native comp is *not* available"</span>)))
</pre>
</div>
</div>
</div>

 <div id="outline-container-orgc48a1ca" class="outline-3">
 <h3 id="orgc48a1ca">Launch Emacs.app</h3>
 <div class="outline-text-3" id="text-orgc48a1ca">
 <p>
You're good to go. Open Emacs.app via finder or shell:
</p>

 <div class="org-src-container">
 <pre class="src src-sh">open nextstep/Emacs.app
</pre>
</div>
</div>
</div>

 <div id="outline-container-orge1118c4" class="outline-3">
 <h3 id="orge1118c4">Deferred compilation logs</h3>
 <div class="outline-text-3" id="text-orge1118c4">
 <p>
After setting  <i>comp-deferred-compilation</i> (in init.el config section), .elc files should be asyncronously compiled. Function definition should be updated to native compiled equivalent.
</p>

 <p>
Look out for an  <b> <b>Async-native-compile-log</b></b> buffer. Should have content like:
</p>

 <div class="org-src-container">
 <pre class="src src-fundamental">Compiling .emacs.d/elpa/moody-20200514.1946/moody.el...
Compiling .emacs.d/elpa/minions-20200522.1052/minions.el...
Compiling .emacs.d/elpa/persistent-scratch-20190922.1046/persistent-scratch.el...
Compiling .emacs.d/elpa/which-key-20200721.1927/which-key.el...
...
</pre>
</div>

 <p>
Can also check for .eln files:
</p>

 <div class="org-src-container">
 <pre class="src src-sh">find ~/.emacs.d -iname *.eln | wc -l
</pre>
</div>

 <pre class="example">
149
</pre>


 <p>
UPDATE1: Added  <i>Symlink Emacs.app/Contents/eln-cache</i> section for  <a href="http://akrl.sdf.org/gccemacs.html#org4b11ea1">update 11</a>.
</p>

 <p>
UPDATE2: Noted using NATIVE_FAST_BOOT makes the build much faster.
</p>

 <p>
UPDATE3: Removed symlinks and copied content instead. This simplifies things. Inspired by Ian Wahbe's  <a href="https://github.com/iwahbe/doom-config/blob/master/build-emacs.sh">build-emacs.sh</a>.
</p>

 <p>
UPDATE4: Removed homebrew recipe patching. Thanks to Dmitry Shishkin's  <a href="https://github.com/shshkn/emacs.d/blob/master/docs/nativecomp.md">instructions</a>.
</p>

 <p>
UPDATE5: Use new flag –with-native-compilation and master branch.</p>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/trying-out-gccemacs-on-macos</link>
  <guid isPermaLink="false">http://xenodium.com/trying-out-gccemacs-on-macos</guid>
  <pubDate>Sun, 16 Aug 2020 00:00:00 +0100</pubDate>
</item>
<item>
  <title>SwiftUI macOS desk clock</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-swiftui-desk-clock" class="outline-2">
 <h2 id="swiftui-desk-clock"> <span class="timestamp-wrapper"> <span class="timestamp">02 August 2020</span></span> SwiftUI macOS desk clock</h2>
 <div class="outline-text-2" id="text-swiftui-desk-clock">

 <div id="org83335c3" class="figure">
 <p> <img src="../images/swiftui-desk-clock/everclock.gif" alt="everclock.gif"></img></p>
</div>

 <p>
For time display, I've gone back and forth between an always-displayed macOS's menu bar to an auto-hide menu bar, and letting Emacs display the time. Neither felt great nor settled.
</p>

 <p>
With some tweaks, Paul Hudson's  <a href="https://www.hackingwithswift.com/quick-start/swiftui/how-to-use-a-timer-with-swiftui">How to use a timer with SwiftUI</a>, led me to build a simple desk clock. Ok, let's not get fancy. It's really just an always-on-top floating window, showing a swiftUI label, but hey I like the minimalist feel ;)
</p>

 <p>
Let's see if it sticks around or it gets in the way… Either way, here's standalone snippet. Run with  <i>swift deskclock.swift</i>.
</p>

 <div class="org-src-container">
 <pre class="src src-swift"> <span style="color: #a71d5d;">import</span> Cocoa
 <span style="color: #a71d5d;">import</span> SwiftUI

 <span style="color: #a71d5d;">let</span> application = NSApplication. <span style="color: #a71d5d;">shared</span>
 <span style="color: #a71d5d;">let</span> appDelegate =  <span style="color: #795da3;">AppDelegate</span>()
NSApp. <span style="color: #795da3;">setActivationPolicy</span>(. <span style="color: #a71d5d;">regular</span>)
application. <span style="color: #a71d5d;">delegate</span> = appDelegate
application. <span style="color: #333333;">mainMenu</span> = NSMenu. <span style="color: #795da3;">makeMenu</span>()
application. <span style="color: #a71d5d;">run</span>()

 <span style="color: #a71d5d;">struct</span>  <span style="color: #795da3;">ClockView</span>: View {
   <span style="color: #a71d5d;">@State</span>  <span style="color: #a71d5d;">var</span> time =  <span style="color: #183691;">"--:--"</span>

   <span style="color: #a71d5d;">let</span> timer =  <span style="color: #a71d5d;">Timer</span>. <span style="color: #a71d5d;">publish</span>(every: 1, on: . <span style="color: #a71d5d;">main</span>,  <span style="color: #a71d5d;">in</span>: . <span style="color: #a71d5d;">common</span>). <span style="color: #a71d5d;">autoconnect</span>()

   <span style="color: #a71d5d;">var</span> body:  <span style="color: #a71d5d;">some</span> View {
    GeometryReader { geometry  <span style="color: #a71d5d;">in</span>

      VStack {
         <span style="color: #795da3;">Text</span>(time)
          . <span style="color: #795da3;">onReceive</span>(timer) { input  <span style="color: #a71d5d;">in</span>
             <span style="color: #a71d5d;">let</span> formatter =  <span style="color: #a71d5d;">DateFormatter</span>()
            formatter. <span style="color: #a71d5d;">dateFormat</span> =  <span style="color: #183691;">"HH:mm"</span>
            time = formatter. <span style="color: #a71d5d;">string</span>(from: input)
          }
          . <span style="color: #795da3;">font</span>(. <span style="color: #795da3;">system</span>(size: 40))
          . <span style="color: #a71d5d;">padding</span>()
      }. <span style="color: #795da3;">frame</span>(width: geometry. <span style="color: #a71d5d;">size</span>. <span style="color: #333333;">width</span>, height: geometry. <span style="color: #a71d5d;">size</span>. <span style="color: #333333;">height</span>)
        . <span style="color: #a71d5d;">background</span>(Color. <span style="color: #333333;">black</span>)
        . <span style="color: #795da3;">cornerRadius</span>(10)
        . <span style="color: #795da3;">frame</span>(maxWidth: . <span style="color: #a71d5d;">infinity</span>, maxHeight: . <span style="color: #a71d5d;">infinity</span>)
    }
  }
}

 <span style="color: #a71d5d;">extension</span>  <span style="color: #795da3;">NSWindow</span> {
   <span style="color: #a71d5d;">static</span>  <span style="color: #a71d5d;">func</span>  <span style="color: #795da3;">makeWindow</span>() -> NSWindow {
     <span style="color: #a71d5d;">let</span> window =  <span style="color: #795da3;">NSWindow</span>(
      contentRect:  <span style="color: #a71d5d;">NSRect</span>. <span style="color: #795da3;">makeDefault</span>(),
      styleMask: [. <span style="color: #333333;">closable</span>, . <span style="color: #333333;">miniaturizable</span>, . <span style="color: #333333;">resizable</span>, . <span style="color: #333333;">fullSizeContentView</span>],
      backing: . <span style="color: #333333;">buffered</span>,  <span style="color: #a71d5d;">defer</span>:  <span style="color: #0086b3;">false</span>)
    window. <span style="color: #a71d5d;">level</span> = . <span style="color: #333333;">floating</span>
    window. <span style="color: #795da3;">setFrameAutosaveName</span>(<span style="color: #183691;">"everclock"</span>)
    window. <span style="color: #333333;">collectionBehavior</span> = [. <span style="color: #333333;">canJoinAllSpaces</span>, . <span style="color: #333333;">stationary</span>, . <span style="color: #333333;">ignoresCycle</span>, . <span style="color: #333333;">fullScreenPrimary</span>]
    window. <span style="color: #795da3;">makeKeyAndOrderFront</span>(<span style="color: #0086b3;">nil</span>)
    window. <span style="color: #333333;">isMovableByWindowBackground</span> =  <span style="color: #0086b3;">true</span>
    window. <span style="color: #333333;">titleVisibility</span> = . <span style="color: #333333;">hidden</span>
    window. <span style="color: #a71d5d;">backgroundColor</span> = . <span style="color: #333333;">clear</span>
     <span style="color: #a71d5d;">return</span> window
  }
}

 <span style="color: #a71d5d;">class</span>  <span style="color: #795da3;">AppDelegate</span>:  <span style="color: #a71d5d;">NSObject</span>, NSApplicationDelegate {
   <span style="color: #a71d5d;">var</span> window = NSWindow. <span style="color: #795da3;">makeWindow</span>()
   <span style="color: #a71d5d;">var</span> hostingView: NSView?

   <span style="color: #a71d5d;">func</span>  <span style="color: #795da3;">applicationDidFinishLaunching</span>(_ notification:  <span style="color: #a71d5d;">Notification</span>) {
    hostingView =  <span style="color: #795da3;">NSHostingView</span>(rootView:  <span style="color: #795da3;">ClockView</span>())
    window. <span style="color: #333333;">contentView</span> = hostingView
    NSApp. <span style="color: #795da3;">activate</span>(ignoringOtherApps:  <span style="color: #0086b3;">true</span>)
  }
}

 <span style="color: #a71d5d;">extension</span>  <span style="color: #a71d5d;">NSRect</span> {
   <span style="color: #a71d5d;">static</span>  <span style="color: #a71d5d;">func</span>  <span style="color: #795da3;">makeDefault</span>() ->  <span style="color: #a71d5d;">NSRect</span> {
     <span style="color: #a71d5d;">let</span> initialMargin =  <span style="color: #a71d5d;">CGFloat</span>(60)
     <span style="color: #a71d5d;">let</span> fallback =  <span style="color: #a71d5d;">NSRect</span>(x: 0, y: 0, width: 100, height: 150)

     <span style="color: #a71d5d;">guard</span>  <span style="color: #a71d5d;">let</span> screenFrame = NSScreen. <span style="color: #a71d5d;">main</span>?. <span style="color: #333333;">frame</span>  <span style="color: #a71d5d;">else</span> {
       <span style="color: #a71d5d;">return</span> fallback
    }

     <span style="color: #a71d5d;">return</span>  <span style="color: #a71d5d;">NSRect</span>(
      x: screenFrame. <span style="color: #333333;">maxX</span> - fallback. <span style="color: #333333;">width</span> - initialMargin,
      y: screenFrame. <span style="color: #333333;">maxY</span> - fallback. <span style="color: #333333;">height</span> - initialMargin,
      width: fallback. <span style="color: #333333;">width</span>, height: fallback. <span style="color: #333333;">height</span>)
  }
}

 <span style="color: #a71d5d;">extension</span>  <span style="color: #795da3;">NSMenu</span> {
   <span style="color: #a71d5d;">static</span>  <span style="color: #a71d5d;">func</span>  <span style="color: #795da3;">makeMenu</span>() -> NSMenu {
     <span style="color: #a71d5d;">let</span> appMenu =  <span style="color: #795da3;">NSMenuItem</span>()
    appMenu. <span style="color: #333333;">submenu</span> =  <span style="color: #795da3;">NSMenu</span>()

    appMenu. <span style="color: #333333;">submenu</span>?. <span style="color: #795da3;">addItem</span>(
       <span style="color: #795da3;">NSMenuItem</span>(
        title:  <span style="color: #183691;">"Quit \(</span> <span style="color: #a71d5d;">ProcessInfo</span>. <span style="color: #a71d5d;">processInfo</span>. <span style="color: #a71d5d;">processName</span> <span style="color: #183691;">)"</span>,
        action:  <span style="color: #a71d5d;">#selector</span>(NSApplication. <span style="color: #a71d5d;">terminate</span>(_:)), keyEquivalent:  <span style="color: #183691;">"q"</span>
      ))

     <span style="color: #a71d5d;">let</span> mainMenu =  <span style="color: #795da3;">NSMenu</span>(title:  <span style="color: #183691;">"Main Menu"</span>)
    mainMenu. <span style="color: #795da3;">addItem</span>(appMenu)
     <span style="color: #a71d5d;">return</span> mainMenu
  }
}

</pre>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/swiftui-desk-clock</link>
  <guid isPermaLink="false">http://xenodium.com/swiftui-desk-clock</guid>
  <pubDate>Sun, 02 Aug 2020 00:00:00 +0100</pubDate>
</item>
<item>
  <title>Emacs, search hackingwithswift.com</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-emacs-search-hackingwithswiftcom" class="outline-2">
 <h2 id="emacs-search-hackingwithswiftcom"> <span class="timestamp-wrapper"> <span class="timestamp">06 June 2020</span></span> Emacs, search hackingwithswift.com</h2>
 <div class="outline-text-2" id="text-emacs-search-hackingwithswiftcom">

 <div id="orga6fb849" class="figure">
 <p> <img src="../images/emacs-search-hackingwithswiftcom/hws.gif" alt="hws.gif" width="75%" height="75%"></img></p>
</div>

 <p>
 <a href="https://twitter.com/twostraws">Paul Hudson</a> authors excellent Swift material at  <a href="https://www.hackingwithswift.com/">hackingwithswift.com</a>. I regularly land on the site while searching for snippets from the browser. I was wondering if I could search for snippets directly from Emacs.
</p>

 <p>
Turns out, hackingwithswift uses a JSON HTTP request for querying code examples. With this in mind, we can use  <i>ivy-read</i> like Oleh Krehel's  <a href="https://github.com/abo-abo/swiper/blob/8d840b2e8680e2768edb794c9ccecf975f6ba4cf/counsel.el#L6680">counsel-search</a> and search for Swift snippets from our favorite editor:
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">require</span> ' <span style="color: #0086b3;">request</span>)
(<span style="color: #a71d5d;">require</span> ' <span style="color: #0086b3;">json</span>)

(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">ar/counsel-hacking-with-swift-search</span> ()
   <span style="color: #183691;">"Ivy interface to query hackingwithswift.com."</span>
  (<span style="color: #a71d5d;">interactive</span>)
  (ivy-read  <span style="color: #183691;">"hacking with swift: "</span>
            (<span style="color: #a71d5d;">lambda</span> (input)
              (<span style="color: #a71d5d;">or</span>
               (ivy-more-chars)
               (<span style="color: #a71d5d;">let</span> ((request-curl-options (list  <span style="color: #183691;">"-H"</span> (string-trim (url-http-user-agent-string)))))
                 (request
                    <span style="color: #183691;">"https://www.hackingwithswift.com/example-code/search"</span>
                    <span style="color: #a71d5d;">:type</span>  <span style="color: #183691;">"GET"</span>
                    <span style="color: #a71d5d;">:params</span> (list
                            (cons  <span style="color: #183691;">"search"</span> input))
                    <span style="color: #a71d5d;">:parser</span> 'json-read
                    <span style="color: #a71d5d;">:success</span> (<span style="color: #a71d5d;">cl-function</span>
                             (<span style="color: #a71d5d;">lambda</span> (<span style="color: #0086b3;">&key</span> data  <span style="color: #0086b3;">&allow-other-keys</span>)
                               (ivy-update-candidates
                                (mapcar (<span style="color: #a71d5d;">lambda</span> (item)
                                          (<span style="color: #a71d5d;">let-alist</span> item
                                            (propertize .title 'url .url)))
                                        data)))))
                 0)))
             <span style="color: #a71d5d;">:action</span> (<span style="color: #a71d5d;">lambda</span> (selection)
                      (browse-url (concat  <span style="color: #183691;">"https://www.hackingwithswift.com"</span>
                                          (get-text-property 0 'url selection))))
             <span style="color: #a71d5d;">:dynamic-collection</span> t
             <span style="color: #a71d5d;">:caller</span> 'ar/counsel-hacking-with-swift-search))
</pre>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/emacs-search-hackingwithswiftcom</link>
  <guid isPermaLink="false">http://xenodium.com/emacs-search-hackingwithswiftcom</guid>
  <pubDate>Sat, 06 Jun 2020 00:00:00 +0100</pubDate>
</item>
<item>
  <title>Preview SwiftUI layouts using Emacs org blocks</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-swiftui-layout-previews-using-emacs-org-blocks" class="outline-2">
 <h2 id="swiftui-layout-previews-using-emacs-org-blocks"> <span class="timestamp-wrapper"> <span class="timestamp">23 May 2020</span></span> Preview SwiftUI layouts using Emacs org blocks</h2>
 <div class="outline-text-2" id="text-swiftui-layout-previews-using-emacs-org-blocks">

 <div id="org50ed3c7" class="figure">
 <p> <img src="../images/swiftui-layout-previews-using-emacs-org-blocks/ob-swiftui.gif" alt="ob-swiftui.gif" width="75%" height="75%"></img></p>
</div>

 <p>
✨  <i>UPDATE: The snippets in this post are outdated. See  <a href="https://github.com/xenodium/ob-swiftui">ob-swiftui</a> for better SwiftUI babel support</i>. ✨
</p>

 <p>
Chris Eidhof  <a href="https://twitter.com/chriseidhof/status/1261360332594974721">twitted</a> a handy  <a href="https://gist.github.com/chriseidhof/26768f0b63fa3cdf8b46821e099df5ff">snippet</a> that enables quickly bootstrapping throwaway SwiftUI code. It can be easily integrated into other tools for rapid experimentation.
</p>

 <p>
Being a SwiftUI noob, I could use some SwiftUI integration with my editor of choice. With some elisp glue and a small patch, Chris's snippet can be used to generate SwiftUI inline previews using Emacs org babel. This is particularly handy for playing around with SwiftUI layouts.
</p>

 <p>
We can piggyback ride off zweifisch's  <a href="https://github.com/zweifisch/ob-swift">ob-swift</a> by advicing  <i>org-babel-execute:swift</i> to inject the org source block into the bootstrapping snippet. We also add a hook to  <i>org-babel-after-execute-hook</i> to automatically refresh the inline preview.
</p>

 <p>
If you're a  <a href="https://github.com/jwiegley/use-package">use-package</a> user, the following snippet should make things fairly self-contained (if you have  <a href="https://melpa.org/">melpa</a> set up already).
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">use-package</span>  <span style="color: #0086b3;">org</span>
   <span style="color: #a71d5d;">:hook</span> ((org-mode . org-display-inline-images))
   <span style="color: #a71d5d;">:config</span>

  (<span style="color: #a71d5d;">use-package</span>  <span style="color: #0086b3;">ob</span>
     <span style="color: #a71d5d;">:config</span>

    (<span style="color: #a71d5d;">use-package</span>  <span style="color: #0086b3;">ob-swift</span>
       <span style="color: #a71d5d;">:ensure</span> t
       <span style="color: #a71d5d;">:config</span>
      (org-babel-do-load-languages 'org-babel-load-languages
                                   (append org-babel-load-languages
                                           '((swift     . t))))

      (<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">ar/org-refresh-inline-images</span> ()
        (<span style="color: #a71d5d;">when</span> org-inline-image-overlays
          (org-redisplay-inline-images)))

       <span style="color: #969896;">;; </span> <span style="color: #969896;">Automatically refresh inline images.</span>
      (add-hook 'org-babel-after-execute-hook 'ar/org-refresh-inline-images)

      (<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">adviced:org-babel-execute:swift</span> (f  <span style="color: #0086b3;">&rest</span> args)
         <span style="color: #183691;">"Advice `</span> <span style="color: #0086b3;">adviced:org-babel-execute:swift</span> <span style="color: #183691;">' enabling swiftui header param."</span>
        (<span style="color: #a71d5d;">let*</span> ((body (nth 0 args))
               (params (nth 1 args))
               (swiftui (cdr (assoc  <span style="color: #a71d5d;">:swiftui</span> params)))
               (output))
          (<span style="color: #a71d5d;">when</span> swiftui
            (assert (<span style="color: #a71d5d;">or</span> (string-equal swiftui  <span style="color: #183691;">"preview"</span>)
                        (string-equal swiftui  <span style="color: #183691;">"interactive"</span>))
                    nil  <span style="color: #183691;">":swiftui must be either preview or interactive"</span>)
            (<span style="color: #a71d5d;">setq</span> body (format
                         <span style="color: #183691;">"</span>
 <span style="color: #183691;">import Cocoa</span>
 <span style="color: #183691;">import SwiftUI</span>
 <span style="color: #183691;">import Foundation</span>

 <span style="color: #183691;">let screenshotURL = URL(fileURLWithPath: NSTemporaryDirectory(), isDirectory: true).appendingPathComponent(ProcessInfo.processInfo.globallyUniqueString + \".png\")</span>
 <span style="color: #183691;">let preview = %s</span>

 <span style="color: #183691;">NSApplication.shared.run {</span>
 <span style="color: #183691;">  %s</span>
 <span style="color: #183691;">}</span>

 <span style="color: #183691;">extension NSApplication {</span>
 <span style="color: #183691;">  public func run<V: View>(@ViewBuilder view: () -> V) {</span>
 <span style="color: #183691;">    let appDelegate = AppDelegate(view())</span>
 <span style="color: #183691;">    NSApp.setActivationPolicy(.regular)</span>
 <span style="color: #183691;">    mainMenu = customMenu</span>
 <span style="color: #183691;">    delegate = appDelegate</span>
 <span style="color: #183691;">    run()</span>
 <span style="color: #183691;">  }</span>
 <span style="color: #183691;">}</span>

 <span style="color: #183691;">extension NSApplication {</span>
 <span style="color: #183691;">  var customMenu: NSMenu {</span>
 <span style="color: #183691;">    let appMenu = NSMenuItem()</span>
 <span style="color: #183691;">    appMenu.submenu = NSMenu()</span>

 <span style="color: #183691;">    let quitItem = NSMenuItem(</span>
 <span style="color: #183691;">      title: \"Quit </span> <span style="color: #333333;">\</span> <span style="color: #183691;">(ProcessInfo.processInfo.processName)\",</span>
 <span style="color: #183691;">      action: #selector(NSApplication.terminate(_:)), keyEquivalent: \"q\")</span>
 <span style="color: #183691;">    quitItem.keyEquivalentModifierMask = []</span>
 <span style="color: #183691;">    appMenu.submenu?.addItem(quitItem)</span>

 <span style="color: #183691;">    let mainMenu = NSMenu(title: \"Main Menu\")</span>
 <span style="color: #183691;">    mainMenu.addItem(appMenu)</span>
 <span style="color: #183691;">    return mainMenu</span>
 <span style="color: #183691;">  }</span>
 <span style="color: #183691;">}</span>

 <span style="color: #183691;">class AppDelegate<V: View>: NSObject, NSApplicationDelegate, NSWindowDelegate {</span>
 <span style="color: #183691;">  var window = NSWindow(</span>
 <span style="color: #183691;">    contentRect: NSRect(x: 0, y: 0, width: 414 * 0.2, height: 896 * 0.2),</span>
 <span style="color: #183691;">    styleMask: [.titled, .closable, .miniaturizable, .resizable, .fullSizeContentView],</span>
 <span style="color: #183691;">    backing: .buffered, defer: false)</span>

 <span style="color: #183691;">  var contentView: V</span>

 <span style="color: #183691;">  init(_ contentView: V) {</span>
 <span style="color: #183691;">    self.contentView = contentView</span>
 <span style="color: #183691;">  }</span>

 <span style="color: #183691;">  func applicationDidFinishLaunching(_ notification: Notification) {</span>
 <span style="color: #183691;">    window.delegate = self</span>
 <span style="color: #183691;">    window.center()</span>
 <span style="color: #183691;">    window.contentView = NSHostingView(rootView: contentView)</span>
 <span style="color: #183691;">    window.makeKeyAndOrderFront(nil)</span>

 <span style="color: #183691;">    if preview {</span>
 <span style="color: #183691;">      screenshot(view: window.contentView!, saveTo: screenshotURL)</span>
 <span style="color: #183691;">      // Write path (without newline) so org babel can parse it.</span>
 <span style="color: #183691;">      print(screenshotURL.path, terminator: \"\")</span>
 <span style="color: #183691;">      NSApplication.shared.terminate(self)</span>
 <span style="color: #183691;">      return</span>
 <span style="color: #183691;">    }</span>

 <span style="color: #183691;">    window.setFrameAutosaveName(\"Main Window\")</span>
 <span style="color: #183691;">    NSApp.activate(ignoringOtherApps: true)</span>
 <span style="color: #183691;">  }</span>
 <span style="color: #183691;">}</span>

 <span style="color: #183691;">func screenshot(view: NSView, saveTo fileURL: URL) {</span>
 <span style="color: #183691;">  let rep = view.bitmapImageRepForCachingDisplay(in: view.bounds)!</span>
 <span style="color: #183691;">  view.cacheDisplay(in: view.bounds, to: rep)</span>
 <span style="color: #183691;">  let pngData = rep.representation(using: .png, properties: [:])</span>
 <span style="color: #183691;">  try! pngData?.write(to: fileURL)</span>
 <span style="color: #183691;">}</span>
 <span style="color: #183691;">"</span>
                        (<span style="color: #a71d5d;">if</span> (string-equal swiftui  <span style="color: #183691;">"preview"</span>)
                             <span style="color: #183691;">"true"</span>
                           <span style="color: #183691;">"false"</span>)
                        body))
            (<span style="color: #a71d5d;">setq</span> args (list body params)))
          (<span style="color: #a71d5d;">setq</span> output (apply f args))
          (<span style="color: #a71d5d;">when</span> org-inline-image-overlays
            (org-redisplay-inline-images))
          output))

      (advice-add #'org-babel-execute:swift
                   <span style="color: #a71d5d;">:around</span>
                  #'adviced:org-babel-execute:swift))))
</pre>
</div>

 <p>
 <del>Snippet also at github  <a href="https://gist.github.com/xenodium/79154033bc26e733b8c43af228cbce5b">gist</a> and included in  <a href="https://github.com/xenodium/dotsies/blob/master/emacs/features/fe-org.el">my emacs config</a></del>.
</p>

 <p>
 <i>UPDATE: See  <a href="https://github.com/xenodium/ob-swiftui">ob-swiftui</a> for a better version of babel SwiftUI support.</i>
</p>

 <p>
Once the snippet is evaluated, we're ready to use in an org babel block. We introduced the  <i>:swiftui</i> header param to switch between inline static  <i>preview</i> and  <i>interactive</i> mode.
</p>

 <p>
To try out an inline  <i>preview</i>, create a new org file (eg. swiftui.org) and a source block like:
</p>

 <div class="org-src-container">
 <pre class="src src-org">#+begin_src swift :results file :swiftui preview
  VStack(spacing: 10) {
      HStack(spacing: 10) {
        Rectangle().fill(Color.yellow)
        Rectangle().fill(Color.green)
      }
      Rectangle().fill(Color.blue)
      HStack(spacing: 10) {
        Rectangle().fill(Color.green)
        Rectangle().fill(Color.yellow)
      }
    }
    .frame(maxWidth: .infinity, maxHeight: .infinity)
#+end_src
</pre>
</div>

 <div class="org-src-container">
 <pre class="src src-org">#+results:
</pre>
</div>

 <div id="orga30be89" class="figure">
 <p> <img src="../images/swiftui-layout-previews-using-emacs-org-blocks/vstack.jpg" alt="vstack.jpg"></img></p>
</div>

 <p>
Place the cursor anywhere inside the source block (#+begin_src/#+end_src) and press C-c C-c (or M-x org-ctrl-c-ctrl-c).
</p>

 <p>
To run interactively, change the  <i>:swiftui</i> param to  <i>interactive</i> and press C-c C-c (or M-x org-ctrl-c-ctrl-c). When running interactively, press "q" (without ⌘) to quit the Swift app.
</p>

 <p>
comments on  <a href="https://twitter.com/xenodium/status/1194224168709083137">twitter</a>.
</p>
</div>

 <div id="outline-container-orge644ce1" class="outline-3">
 <h3 id="orge644ce1">Update</h3>
 <div class="outline-text-3" id="text-orge644ce1">
 <ul class="org-ul"> <li>Tweaked the snippet to make it more self-contained and made the steps more reproducible. Need to work out how to package things to make them more accessible. May be best to contribute as a patch to  <a href="https://github.com/zweifisch/ob-swift">ob-swift</a> and we can avoid the icky  <i>advice-add</i>.</li>
 <li>Thanks to Chris Eidhof for PNG support (instead of TIFF). Also TIL Swift's  <i>print</i> has got a terminator param.</li>
</ul></div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/swiftui-layout-previews-using-emacs-org-blocks</link>
  <guid isPermaLink="false">http://xenodium.com/swiftui-layout-previews-using-emacs-org-blocks</guid>
  <pubDate>Sat, 23 May 2020 00:00:00 +0100</pubDate>
</item>
<item>
  <title>Open Emacs elfeed links in the background</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-open-emacs-elfeed-links-in-background" class="outline-2">
 <h2 id="open-emacs-elfeed-links-in-background"> <span class="timestamp-wrapper"> <span class="timestamp">22 May 2020</span></span> Open Emacs elfeed links in the background</h2>
 <div class="outline-text-2" id="text-open-emacs-elfeed-links-in-background">

 <div id="org536c581" class="figure">
 <p> <img src="../images/open-emacs-elfeed-links-in-background/background-browse.gif" alt="background-browse.gif" width="75%" height="75%"></img></p>
</div>

 <p>
Christopher Wellons's  <a href="https://github.com/skeeto/elfeed">elfeed</a> is a wonderful Emacs rss reader. In Mike Zamansky's  <a href="https://cestlaz.github.io/post/using-emacs-72-customizing-elfeed/">Using Emacs 72 - Customizing Elfeed</a> video, he highlights a desire to open elfeed entries in the background. That is, open the current rss entry (or selected entries) without shifting focus from Emacs to your browser. This behaviour is somewhat analogous to ⌘-clicking/ctrl-clicking on multiple links in the browser without losing focus.
</p>

 <p>
I've been wanting elfeed to open links in the background for some time. Zamansky's post was a great nudge to look into it. He points to the relevant  <a href="https://github.com/skeeto/elfeed/blob/58ab1f8bcc3014206db42a7a26f3120ba5de4ca6/elfeed-search.el#L783">elfeed-search-browse-url</a> function, re-implemented to suit his needs. In a similar spirit, I wrote a function to open the current rss entry (or selected entries) in the background.
</p>

 <p>
I'm running macOS, so I took a look at  <a href="https://github.com/emacs-mirror/emacs/blob/d714aa753b744c903d149a1f6c69262d958c313e/lisp/net/browse-url.el#L1018%20%20I%20">browse-url-default-macosx-browser</a> to get an idea of how URLs are opened. Simple. It let's macOS handle it via the "open" command, invoked through  <i>start process</i>. Looking at open's command-line options, we find  <i>–background</i> which "does not bring the application to the foreground."
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">open --background http://xenodium.com
</pre>
</div>

 <p>
"b" is already bound to  <i>elfeed-search-browse-url</i>, so in our snippet we'll bind "B" to our new background function, giving us some flexibility:
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">use-package</span>  <span style="color: #0086b3;">elfeed</span>
   <span style="color: #a71d5d;">:ensure</span> t
   <span style="color: #a71d5d;">:bind</span> (<span style="color: #a71d5d;">:map</span> elfeed-search-mode-map
              (<span style="color: #183691;">"B"</span> . ar/elfeed-search-browse-background-url))
   <span style="color: #a71d5d;">:config</span>
  (<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">ar/elfeed-search-browse-background-url</span> ()
     <span style="color: #183691;">"Open current `</span> <span style="color: #0086b3;">elfeed</span> <span style="color: #183691;">' entry (or region entries) in browser without losing focus."</span>
    (<span style="color: #a71d5d;">interactive</span>)
    (<span style="color: #a71d5d;">let</span> ((entries (elfeed-search-selected)))
      (mapc (<span style="color: #a71d5d;">lambda</span> (entry)
              (assert (memq system-type '(darwin)) t  <span style="color: #183691;">"open command is macOS only"</span>)
              (start-process (concat  <span style="color: #183691;">"open "</span> (elfeed-entry-link entry))
                             nil  <span style="color: #183691;">"open"</span>  <span style="color: #183691;">"--background"</span> (elfeed-entry-link entry))
              (elfeed-untag entry 'unread)
              (elfeed-search-update-entry entry))
            entries)
      (<span style="color: #a71d5d;">unless</span> (<span style="color: #a71d5d;">or</span> elfeed-search-remain-on-entry (use-region-p))
        (forward-line)))))
</pre>
</div>

 <p>
Maybe xdg-open does a similar thing on linux (I've not looked). Ping me if you have a linux solution and I can update the function.
</p>

 <p>
Happy Emacsing.
</p>

 <p>
ps. I noticed elfeed uses  <i>browse-url-generic</i> if  <i>elfeed-search-browse-url</i>'s is invoked with a prefix. Setting   <a href="https://github.com/emacs-mirror/emacs/blob/d0e2a341dd9a9a365fd311748df024ecb25b70ec/lisp/net/browse-url.el#L534">browse-url-generic-program</a> and  <a href="https://github.com/emacs-mirror/emacs/blob/d0e2a341dd9a9a365fd311748df024ecb25b70ec/lisp/net/browse-url.el#L539">browse-url-generic-args</a> to use background options may be a more generic solution. For now, a custom function does the job.
</p>

 <p>
comments on  <a href="https://twitter.com/xenodium/status/1263839324023525376">twitter</a>.
</p>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/open-emacs-elfeed-links-in-background</link>
  <guid isPermaLink="false">http://xenodium.com/open-emacs-elfeed-links-in-background</guid>
  <pubDate>Fri, 22 May 2020 00:00:00 +0100</pubDate>
</item>
<item>
  <title>Enrich Emacs direds batching toolbox</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-enrich-your-dired-batching-toolbox" class="outline-2">
 <h2 id="enrich-your-dired-batching-toolbox"> <span class="timestamp-wrapper"> <span class="timestamp">11 May 2020</span></span> Enrich Emacs dired's batching toolbox</h2>
 <div class="outline-text-2" id="text-enrich-your-dired-batching-toolbox">
</div>

 <div id="outline-container-org7bbcfb5" class="outline-3">
 <h3 id="org7bbcfb5">Update</h3>
 <div class="outline-text-3" id="text-org7bbcfb5">
 <p>
I now use  <a href="https://github.com/xenodium/dwim-shell-command">dwim-shell-command</a>, which reduces the logic to:
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">dwim-shell-commands-image-to-jpg</span> ()
   <span style="color: #183691;">"Convert all marked images to jpg(s)."</span>
  (<span style="color: #a71d5d;">interactive</span>)
  (dwim-shell-command-on-marked-files
    <span style="color: #183691;">"Convert to jpg"</span>
    <span style="color: #183691;">"convert -verbose '</span> <span style="color: #0086b3;"><<f>></span> <span style="color: #183691;">' '</span> <span style="color: #0086b3;"><<fne>>.jpg</span> <span style="color: #183691;">'"</span>
    <span style="color: #a71d5d;">:utils</span>  <span style="color: #183691;">"convert"</span>))
</pre>
</div>
</div>
</div>

 <div id="outline-container-orgbe81f5e" class="outline-3">
 <h3 id="orgbe81f5e">Original post</h3>
 <div class="outline-text-3" id="text-orgbe81f5e">
 <p>
Shell one-liners are super handy for batch-processing files. Say you'd like to convert a bunch of images from HEIC to jpg, you could use something like:
</p>

 <div class="org-src-container">
 <pre class="src src-sh"> <span style="color: #a71d5d;">for</span> f <span style="color: #a71d5d;"> in</span> *.HEIC ;  <span style="color: #a71d5d;">do</span> convert  <span style="color: #183691;">"$f"</span>  <span style="color: #183691;">"${f%.*}.jpg"</span>;  <span style="color: #a71d5d;">done</span>
</pre>
</div>

 <p>
Save the one-liner (or memorize it) and pull it from your toolbox next time you need it. This is handy as it is, but  <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Dired.html">Emacs dired</a> is just a file-management powerhouse. Its  <i>dired-map-over-marks</i> function is just a few elisp lines away from enabling all sorts of batch processing within your dired buffers.
</p>


 <p>
Dired already enables selecting and deselecting files using all sorts of built-in mechanisms ( <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Marks-vs-Flags.html">dired-mark-files-regexp</a>,  <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Dired-and-Find.html">find-name-dired</a>, etc) or wonderful third-party packages like Matus Goljer's  <a href="https://github.com/Fuco1/dired-hacks">dired-filters</a>.
</p>

 <p>
Regardless of how you selected your files, here's a snippet to run ImageMagick's  <a href="https://imagemagick.org/script/convert.php">convert</a> on a bunch of selected files:
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp"> <span style="color: #969896;">;;; </span> <span style="color: #969896;">-*- lexical-binding: t; -*-</span>

(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">ar/dired-convert-image</span> (<span style="color: #0086b3;">&optional</span> arg)
   <span style="color: #183691;">"Convert image files to other formats."</span>
  (<span style="color: #a71d5d;">interactive</span>  <span style="color: #183691;">"P"</span>)
  (assert (<span style="color: #a71d5d;">or</span> (executable-find  <span style="color: #183691;">"convert"</span>) (executable-find  <span style="color: #183691;">"magick.exe"</span>)) nil  <span style="color: #183691;">"Install imagemagick"</span>)
  (<span style="color: #a71d5d;">let*</span> ((dst-fpath)
         (src-fpath)
         (src-ext)
         (last-ext)
         (dst-ext))
    (mapc
     (<span style="color: #a71d5d;">lambda</span> (fpath)
       (<span style="color: #a71d5d;">setq</span> src-fpath fpath)
       (<span style="color: #a71d5d;">setq</span> src-ext (downcase (file-name-extension src-fpath)))
       (<span style="color: #a71d5d;">when</span> (<span style="color: #a71d5d;">or</span> (null dst-ext)
                 (not (string-equal dst-ext last-ext)))
         (<span style="color: #a71d5d;">setq</span> dst-ext (completing-read  <span style="color: #183691;">"to format: "</span>
                                        (seq-remove (<span style="color: #a71d5d;">lambda</span> (format)
                                                      (string-equal format src-ext))
                                                    '(<span style="color: #183691;">"jpg"</span>  <span style="color: #183691;">"png"</span>)))))
       (<span style="color: #a71d5d;">setq</span> last-ext dst-ext)
       (<span style="color: #a71d5d;">setq</span> dst-fpath (format  <span style="color: #183691;">"%s.%s"</span> (file-name-sans-extension src-fpath) dst-ext))
       (message  <span style="color: #183691;">"convert %s to %s ..."</span> (file-name-nondirectory dst-fpath) dst-ext)
       (set-process-sentinel
        (<span style="color: #a71d5d;">if</span> (string-equal system-type  <span style="color: #183691;">"windows-nt"</span>)
            (start-process  <span style="color: #183691;">"convert"</span>
                           (generate-new-buffer (format  <span style="color: #183691;">"*convert %s*"</span> (file-name-nondirectory src-fpath)))
                            <span style="color: #183691;">"magick.exe"</span>  <span style="color: #183691;">"convert"</span> src-fpath dst-fpath)
          (start-process  <span style="color: #183691;">"convert"</span>
                         (generate-new-buffer (format  <span style="color: #183691;">"*convert %s*"</span> (file-name-nondirectory src-fpath)))
                          <span style="color: #183691;">"convert"</span> src-fpath dst-fpath))
        (<span style="color: #a71d5d;">lambda</span> (process state)
          (<span style="color: #a71d5d;">if</span> (= (process-exit-status process) 0)
              (message  <span style="color: #183691;">"convert %s ✔"</span> (file-name-nondirectory dst-fpath))
            (message  <span style="color: #183691;">"convert %s ❌"</span> (file-name-nondirectory dst-fpath))
            (message (<span style="color: #a71d5d;">with-current-buffer</span> (process-buffer process)
                       (buffer-string))))
          (kill-buffer (process-buffer process)))))
     (<span style="color: #a71d5d;">dired-map-over-marks</span> (dired-get-filename) arg))))
</pre>
</div>

 <p>
The snippet can be shorter, but wouldn't be as friendly. We ask users to provide desired image format, spawn separate processes (avoids blocking Emacs), and generate a basic report. Also adds support for Windows.
</p>


 <div id="orge93cc05" class="figure">
 <p> <img src="../images/enrich-your-dired-batching-toolbox/batch-dired.gif" alt="batch-dired.gif"></img></p>
</div>
</div>

 <div id="outline-container-orgdf0670e" class="outline-3">
 <h3 id="orgdf0670e">BEWARE</h3>
 <div class="outline-text-3" id="text-orgdf0670e">
 <p>
The snippet isn't currently capping the number of processes, but hey we can revise in the future…
</p>
</div>
</div>


 <div id="outline-container-org21d64ef" class="outline-3">
 <h3 id="org21d64ef">Update</h3>
 <div class="outline-text-3" id="text-org21d64ef">
 <p>
Thanks to  <a href="https://github.com/pbeliveau">Philippe Beliveau</a> for pointing out a bug in snippet (now updated) and changes to make it Windows compatible.
</p>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/enrich-your-dired-batching-toolbox</link>
  <guid isPermaLink="false">http://xenodium.com/enrich-your-dired-batching-toolbox</guid>
  <pubDate>Mon, 11 May 2020 00:00:00 +0100</pubDate>
</item>
<item>
  <title>Emacs: connect my Bluetooth speaker</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-emacs-connect-my-bluetooth-speaker" class="outline-2">
 <h2 id="emacs-connect-my-bluetooth-speaker"> <span class="timestamp-wrapper"> <span class="timestamp">06 May 2020</span></span> Emacs: connect my Bluetooth speaker</h2>
 <div class="outline-text-2" id="text-emacs-connect-my-bluetooth-speaker">
 <p>
Connecting and disconnecting bluetooth devices on macOS is fairly simple: use the menu bar utility.
</p>


 <div id="org93223fb" class="figure">
 <p> <img src="../images/emacs-connect-my-bluetooth-speaker/macos-menu.png" alt="macos-menu.png" width="75%" height="75%"></img></p>
</div>

 <p>
 <i>But could we make it quicker from our beloved editor?</i>
</p>

 <p>
Turns out with a little elisp glue, we can fuzzy search our Bluetooth devices and toggle connections. We can use  <a href="https://twitter.com/_abo_abo">Oleh Krehel's</a>  <a href="https://github.com/abo-abo/swiper">ivy-read</a> for fuzzy searching and  <a href="https://twitter.com/lap_felix">Felix Lapalme</a>'s nifty  <a href="https://github.com/lapfelix/BluetoothConnector">BluetoothConnector</a> to list devices and toggle Bluetooth connections.
</p>

 <p>
As a bonus, we can make it remember the last selected device, so you can quickly toggle it again.
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">ar/ivy-bluetooth-connect</span> ()
   <span style="color: #183691;">"Connect to paired bluetooth device."</span>
  (<span style="color: #a71d5d;">interactive</span>)
  (assert (string-equal system-type  <span style="color: #183691;">"darwin"</span>)
          nil  <span style="color: #183691;">"macOS only. Sorry :/"</span>)
  (assert (executable-find  <span style="color: #183691;">"BluetoothConnector"</span>)
          nil  <span style="color: #183691;">"Install BluetoothConnector from https://github.com/lapfelix/BluetoothConnector"</span>)
  (ivy-read  <span style="color: #183691;">"(Dis)connect: "</span>
            (seq-map
             (<span style="color: #a71d5d;">lambda</span> (item)
               (<span style="color: #a71d5d;">let*</span> ((device (split-string item  <span style="color: #183691;">" - "</span>))
                      (mac (nth 0 device))
                      (name (nth 1 device)))
                 (propertize name
                             'mac mac)))
             (seq-filter
              (<span style="color: #a71d5d;">lambda</span> (line)
                 <span style="color: #969896;">;; </span> <span style="color: #969896;">Keep lines like: af-8c-3b-b1-99-af - Device name</span>
                (string-match-p  <span style="color: #183691;">"^[0-9a-f]\\{2\\}"</span> line))
              (<span style="color: #a71d5d;">with-current-buffer</span> (get-buffer-create  <span style="color: #183691;">"*BluetoothConnector*"</span>)
                (erase-buffer)
                 <span style="color: #969896;">;; </span> <span style="color: #969896;">BluetoothConnector exits with 64 if no param is given.</span>
                 <span style="color: #969896;">;; </span> <span style="color: #969896;">Invoke with no params to get a list of devices.</span>
                (<span style="color: #a71d5d;">unless</span> (eq 64 (call-process  <span style="color: #183691;">"BluetoothConnector"</span> nil (current-buffer)))
                  (<span style="color: #333333;">error</span> (buffer-string)))
                (split-string (buffer-string)  <span style="color: #183691;">"\n"</span>))))
             <span style="color: #a71d5d;">:require-match</span> t
             <span style="color: #a71d5d;">:preselect</span> (<span style="color: #a71d5d;">when</span> (boundp 'ar/misc-bluetooth-connect--history)
                         (nth 0 ar/misc-bluetooth-connect--history))
             <span style="color: #a71d5d;">:history</span> 'ar/misc-bluetooth-connect--history
             <span style="color: #a71d5d;">:caller</span> 'ar/toggle-bluetooth-connection
             <span style="color: #a71d5d;">:action</span> (<span style="color: #a71d5d;">lambda</span> (device)
                      (start-process  <span style="color: #183691;">"BluetoothConnector"</span>
                                     (get-buffer-create  <span style="color: #183691;">"*BluetoothConnector*"</span>)
                                      <span style="color: #183691;">"BluetoothConnector"</span> (get-text-property 0 'mac device)  <span style="color: #183691;">"--notify"</span>))))
</pre>
</div>


 <div id="org9970c68" class="figure">
 <p> <img src="../images/emacs-connect-my-bluetooth-speaker/connect-disconnect.gif" alt="connect-disconnect.gif" width="50%" height="50%"></img></p>
</div>

 <p>
comments on  <a href="https://twitter.com/xenodium/status/1258148035319734273">twitter</a>.
</p>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/emacs-connect-my-bluetooth-speaker</link>
  <guid isPermaLink="false">http://xenodium.com/emacs-connect-my-bluetooth-speaker</guid>
  <pubDate>Wed, 06 May 2020 00:00:00 +0100</pubDate>
</item>
<item>
  <title>mu/mu4e 1.4 released</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-mumu4e-14-released" class="outline-2">
 <h2 id="mumu4e-14-released"> <span class="timestamp-wrapper"> <span class="timestamp">19 April 2020</span></span> mu/mu4e 1.4 released</h2>
 <div class="outline-text-2" id="text-mumu4e-14-released">

 <div id="orgf2c9ac0" class="figure">
 <p> <img src="../images/mumu4e-14-released/mu14.png" alt="mu14.png" width="50%" height="50%"></img></p>
</div>

 <p>
 <a href="https://www.reddit.com/r/emacs/comments/g3nsgg/mumu4e_14_has_been_released/">mu/mu4e 1.4 is out</a>. About a week ago, I built and installed its  <a href="https://github.com/djcb/mu/releases/tag/1.3.10">pre-release version (1.3.10)</a> and noted  <a href="http://xenodium.com/building-mumu4e-on-macos/">build steps on macOS</a>. It's been working great for me. Today, I updated to 1.4.
</p>

 <p>
I was keen to try the new release out. I had been experiencing a short delay immediately after syncing/indexing mail. An initial investigation pointed to contact syncing, but I didn't dig further. The 1.4 release notes had a promising entry:
</p>

 <blockquote>
 <p>
In many cases, `mu4e' used to receive  <i>all</i> contacts after each indexing operation; this was slow for some users, so we have updated this to  <i>only</i> get the contacts that have changed since the last round.
</p>
</blockquote>

 <p>
After upgrading. The delay is gone for me \o/
</p>

 <p>
 <b>Note</b>: there are a few config tweaks needed for the 1.4 upgrade, but these are well-documented in the  <a href="https://github.com/djcb/mu/releases/tag/1.4">release notes</a>. For me, it primarily consisted of:
</p>

 <ul class="org-ul"> <li>Swapping elisp  <i>mu4e-maildir</i> var for  <i>mu init –maildir path/to/local/IMAP</i>.</li>
 <li>Swapping elisp  <i>mu4e-user-mail-address-list</i> for  <i>mu init –my-address address1@domain.com –my-address address2@domain.com</i>.</li>
 <li>Disabling  <i>mu4e-maildirs-extension</i> (not yet compatible with mu 1.4). No issues here, since I hardly ever look at the  <i>mu4e-main</i> buffer. I have global binding to my unread messages that looks a little something like this:</li>
</ul> <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">ar/mu4e-view-unread-messages</span> ()
  (<span style="color: #a71d5d;">interactive</span>)
  (mu4e-headers-search-bookmark (concat  <span style="color: #183691;">"flag:unread AND "</span>
                                         <span style="color: #183691;">"flag:unread AND "</span>
                                         <span style="color: #183691;">"NOT flag:trashed AND "</span>
                                         <span style="color: #183691;">"(maildir:/box1/INBOX OR "</span>
                                         <span style="color: #183691;">"maildir:/box2/INBOX)"</span>)))
</pre>
</div>

 <p>
comments on  <a href="https://twitter.com/xenodium/status/1251852526246379520">twitter</a>.
</p>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/mumu4e-14-released</link>
  <guid isPermaLink="false">http://xenodium.com/mumu4e-14-released</guid>
  <pubDate>Sun, 19 Apr 2020 00:00:00 +0100</pubDate>
</item>
<item>
  <title>Emacs&apos;s counsel-M-x meets multiple cursors</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-emacss-counsel-m-x-meets-multiple-cursors" class="outline-2">
 <h2 id="emacss-counsel-m-x-meets-multiple-cursors"> <span class="timestamp-wrapper"> <span class="timestamp">06 April 2020</span></span> Emacs's counsel-M-x meets multiple cursors</h2>
 <div class="outline-text-2" id="text-emacss-counsel-m-x-meets-multiple-cursors">
 <p>
I'm a fan of Magnar Sveen's  <a href="https://github.com/magnars/multiple-cursors.el">multiple cursors</a> Emacs implementation. It's just so fun to use and works very well with commands bound to my favorite keys.
</p>

 <p>
Every now and then I'd like to execute extended commands on all cursors, but they have no keys bound to them. If you're an  <a href="https://github.com/abo-abo/swiper">ivy/counsel</a> fan like me (and all packages by  <a href="https://oremacs.com/about/">Abo Abo</a>), you use  <i>counsel-M-x</i> to invoke commands. However,  <i>counsel-M-x</i> doesn't support multiple cursors out of the box. Luckily, this is Emacs and we can fix that…
</p>

 <p>
Back in December 2019, I made a note to revisit  <a href="https://www.reddit.com/user/snippins1987/">u/snippins1987</a>'s weekly tip to pair  <a href="https://www.reddit.com/r/emacs/comments/eeyhdz/weekly_tipstricketc_thread/fch1bkv?utm_source=share&utm_medium=web2x">helm-M-x with multiple cursors</a>. Finally got back to it. With a few changes, we can also make the snippet work with  <i>counsel-M-x</i> \o/.
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">adviced:counsel-M-x-action</span> (orig-fun  <span style="color: #0086b3;">&rest</span> r)
   <span style="color: #183691;">"Additional support for multiple cursors."</span>
  (apply orig-fun r)
  (<span style="color: #a71d5d;">let</span> ((cmd (intern (car r))))
    (<span style="color: #a71d5d;">when</span> (<span style="color: #a71d5d;">and</span> (boundp 'multiple-cursors-mode)
               multiple-cursors-mode
               cmd
               (not (memq cmd mc--default-cmds-to-run-once))
               (not (memq cmd mc/cmds-to-run-once))
               (<span style="color: #a71d5d;">or</span> mc/always-run-for-all
                   (memq cmd mc--default-cmds-to-run-for-all)
                   (memq cmd mc/cmds-to-run-for-all)
                   (mc/prompt-for-inclusion-in-whitelist cmd)))
      (mc/execute-command-for-all-fake-cursors cmd))))

(advice-add #'counsel-M-x-action
             <span style="color: #a71d5d;">:around</span>
            #'adviced:counsel-M-x-action)
</pre>
</div>


 <div id="org31691f6" class="figure">
 <p> <img src="../images/emacss-counsel-m-x-meets-multiple-cursors/counsel-mx-mc.gif" alt="counsel-mx-mc.gif"></img></p>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/emacss-counsel-m-x-meets-multiple-cursors</link>
  <guid isPermaLink="false">http://xenodium.com/emacss-counsel-m-x-meets-multiple-cursors</guid>
  <pubDate>Mon, 06 Apr 2020 00:00:00 +0100</pubDate>
</item>
<item>
  <title>String inflection Emacs package</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-string-inflection-emacs-package" class="outline-2">
 <h2 id="string-inflection-emacs-package"> <span class="timestamp-wrapper"> <span class="timestamp">29 March 2020</span></span> String inflection Emacs package</h2>
 <div class="outline-text-2" id="text-string-inflection-emacs-package">
 <p>
 <a href="https://github.com/akicho8/string-inflection">string-inflection</a> (by  <a href="https://github.com/akicho8">Akira Ikeda</a>) is a nifty package to cycle through string case styles:  <a href="https://en.wikipedia.org/wiki/Letter_case#Special_case_styles">camel, snake, kebab…</a> The package includes a handful of cycling functions for different languages (Ruby, Python and Java), but it's easy to mix and match to roll your own. For now, I'm binding  <i>C-M-j</i> to  <i>string-inflection-cycle</i>, which is an alias to  <i>string-inflection-ruby-style-cycle</i>.
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">use-package</span>  <span style="color: #0086b3;">string-inflection</span>
   <span style="color: #a71d5d;">:ensure</span> t
   <span style="color: #a71d5d;">:bind</span> (<span style="color: #a71d5d;">:map</span> prog-mode-map
              (<span style="color: #183691;">"C-M-j"</span> . string-inflection-cycle)))
</pre>
</div>


 <div id="org92b824c" class="figure">
 <p> <img src="../images/string-inflection-emacs-package/string_inflection.gif" alt="string_inflection.gif"></img></p>
</div>

 <p>
comments on  <a href="https://twitter.com/xenodium/status/1244355205698912261?s=20">twitter</a>
</p>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/string-inflection-emacs-package</link>
  <guid isPermaLink="false">http://xenodium.com/string-inflection-emacs-package</guid>
  <pubDate>Sun, 29 Mar 2020 00:00:00 +0000</pubDate>
</item>
<item>
  <title>Modern Emacs lisp libraries</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-modern-elisp-libraries" class="outline-2">
 <h2 id="modern-elisp-libraries"> <span class="timestamp-wrapper"> <span class="timestamp">21 March 2020</span></span> Modern Emacs lisp libraries</h2>
 <div class="outline-text-2" id="text-modern-elisp-libraries">
 <p>
Quickly finding related built-in elisp functions (without prefixes) can sometimes take a little poking around.
</p>

 <p>
Some modern and predictable built-in exceptions I now reach out to are:
</p>

 <ul class="org-ul"> <li> <a href="https://nicolas.petton.fr/ressources/emacsconf2015/">map.el</a> for key/values, alists, hash-tables and arrays (built-in as of Emacs 25.1).</li>
 <li> <a href="https://nicolas.petton.fr/ressources/emacsconf2015/">seq.el</a> for sequence manipulation functions (built-in as of Emacs 25.1).</li>
 <li> <a href="https://github.com/emacs-mirror/emacs/blob/master/lisp/emacs-lisp/subr-x.el">subr-x.el</a> has a handful of string functions (built-in as of Emacs 24.4).</li>
 <li> <a href="https://endlessparentheses.com/new-on-elpa-and-in-emacs-25-1-let-alist.html">let-alist.el</a> wonderful syntax for alists, great for json (built-in as of Emacs 25.1).</li>
</ul> <p>
If you don't mind reaching out to third-party libs (you likely have some of these already installed), here are some modern, predictable, and well-documented ones that always get me out of trouble:
</p>

 <ul class="org-ul"> <li> <a href="https://github.com/magnars/s.el#functions">s.el</a> string manipulation.</li>
 <li> <a href="https://github.com/rejeep/f.el">f.el</a> file/path handling.</li>
 <li> <a href="https://github.com/magnars/dash.el#functions">dash.el</a> for lists.</li>
 <li> <a href="https://github.com/Wilfred/ht.el">ht.el</a> for hashtables.</li>
 <li> <a href="https://github.com/alphapapa/ts.el">ts.el</a> for date and time.</li>
</ul> <p>
I'm happy with built-ins like map.el, seq.el, and let-alist.el. subr-x.el is also pretty nice, although not as full-featured as third-party s.el.
</p>

 <p>
Am I missing out on other modern built-ins or third-party libraries?
</p>

 <p>
UPDATE: Added a handful of newly discovered libraries plus  <a href="https://twitter.com/dmartincy/status/1241444701754085383?s=20">suggestions by Daniel Martín</a> (thanks!). Not tried any of these myself.
</p>

 <ul class="org-ul"> <li> <a href="https://github.com/emacs-mirror/emacs/blob/master/lisp/rtree.el">rtree.el</a> binary tree that stores ranges (Built-in).</li>
 <li> <a href="https://github.com/emacsorphanage/ov">ov.el</a> simple way to manipulate overlay.</li>
 <li>Toby Cubitt's  <a href="http://www.dr-qubit.org/tags/computing-code-emacs.html">libraries</a> (heap, overlays, queue, avl-tree, trie, dict-tree, etc).</li>
 <li> <a href="https://github.com/VincentToups/shadchen-el">shadchen.el</a> pattern-matching.</li>
 <li> <a href="https://phillord.github.io/m-buffer-el">m-buffer.el</a> buffers.</li>
 <li> <a href="https://github.com/tali713/esxml">esxml.el</a> xml and html.</li>
 <li> <a href="https://github.com/plexus/a.el">a.el</a> associative structures.</li>
 <li> <a href="https://github.com/troyp/asoc.el">asoc.el</a> association list library.</li>
 <li> <a href="https://github.com/yurikhan/yk-color">yk-color.el</a> linear RGB color manipulation.</li>
</ul> <p>
comments on  <a href="https://twitter.com/xenodium/status/1241439306511720448">twitter</a>
</p>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/modern-elisp-libraries</link>
  <guid isPermaLink="false">http://xenodium.com/modern-elisp-libraries</guid>
  <pubDate>Sat, 21 Mar 2020 00:00:00 +0000</pubDate>
</item>
<item>
  <title>Emacs smartparens auto-indent</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-emacs-smartparens-auto-indent" class="outline-2">
 <h2 id="emacs-smartparens-auto-indent"> <span class="timestamp-wrapper"> <span class="timestamp">20 March 2020</span></span> Emacs smartparens auto-indent</h2>
 <div class="outline-text-2" id="text-emacs-smartparens-auto-indent">
 <p>
While I do most editing in Emacs, I use Xcode every now and then. I like Xcode's pair matching (of brackets) combined with its auto-indent.
</p>


 <div id="org5bf1a7d" class="figure">
 <p> <img src="../images/emacs-smartparens-auto-indent/xcode_indent.gif" alt="xcode_indent.gif" width="50%" height="50%"></img></p>
</div>

 <p>
While the wonderful  <a href="https://github.com/Fuco1/smartparens">smartparens</a> gives Emacs pair-matching powers, it doesn't automatically indent between pairs (out of the box anyway).
</p>


 <div id="orgfcbd1e4" class="figure">
 <p> <img src="../images/emacs-smartparens-auto-indent/indent_bracket_before.gif" alt="indent_bracket_before.gif" width="50%" height="50%"></img></p>
</div>

 <p>
Luckily, smartparens does provide  <i>sp-local-pair,</i> which enables us to achieve a similar goal.
</p>

 <p>
With a short snippet, we can autoindent between {}, [], and () when pressing return in-between.
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">indent-between-pair</span> (<span style="color: #0086b3;">&rest</span> _ignored)
  (newline)
  (indent-according-to-mode)
  (forward-line -1)
  (indent-according-to-mode))

(sp-local-pair 'prog-mode  <span style="color: #183691;">"{"</span> nil  <span style="color: #a71d5d;">:post-handlers</span> '((indent-between-pair  <span style="color: #183691;">"RET"</span>)))
(sp-local-pair 'prog-mode  <span style="color: #183691;">"["</span> nil  <span style="color: #a71d5d;">:post-handlers</span> '((indent-between-pair  <span style="color: #183691;">"RET"</span>)))
(sp-local-pair 'prog-mode  <span style="color: #183691;">"("</span> nil  <span style="color: #a71d5d;">:post-handlers</span> '((indent-between-pair  <span style="color: #183691;">"RET"</span>)))
</pre>
</div>


 <div id="org7701438" class="figure">
 <p> <img src="../images/emacs-smartparens-auto-indent/indent_bracket_after.gif" alt="indent_bracket_after.gif" width="50%" height="50%"></img></p>
</div>

 <p>
comments on  <a href="https://twitter.com/xenodium/status/1241104117264781312">twitter</a>
</p>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/emacs-smartparens-auto-indent</link>
  <guid isPermaLink="false">http://xenodium.com/emacs-smartparens-auto-indent</guid>
  <pubDate>Fri, 20 Mar 2020 00:00:00 +0000</pubDate>
</item>
<item>
  <title>Nix bookmarks</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-nix-bookmarks" class="outline-2">
 <h2 id="nix-bookmarks"> <span class="timestamp-wrapper"> <span class="timestamp">15 February 2020</span></span> Nix bookmarks</h2>
 <div class="outline-text-2" id="text-nix-bookmarks">
 <span class="modified-timestamp">   <em>updated: 15 February 2020  </em></span>
 <ul class="org-ul"> <li> <a href="https://github.com/bergey/dotfiles/blob/4807ef9de187018a9cf7e1d571fc530e3ce07bfb/emacs/emacs.nix">Daniel Bergey's dotfiles/emacs.nix</a>.</li>
 <li> <a href="https://news.ycombinator.com/item?id=22295102">I Was Wrong about Nix | Hacker News</a>.</li>
 <li> <a href="https://christine.website/blog/i-was-wrong-about-nix-2020-02-10">I was wrong about Nix</a>.</li>
</ul></div>
</div>
</div>]]></description>
  <link>http://xenodium.com/nix-bookmarks</link>
  <guid isPermaLink="false">http://xenodium.com/nix-bookmarks</guid>
  <pubDate>Sat, 15 Feb 2020 00:00:00 +0000</pubDate>
</item>
<item>
  <title>SwiftUI bookmarks</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-swiftui-bookmarks" class="outline-2">
 <h2 id="swiftui-bookmarks"> <span class="timestamp-wrapper"> <span class="timestamp">29 December 2019</span></span> SwiftUI bookmarks</h2>
 <div class="outline-text-2" id="text-swiftui-bookmarks">
 <span class="modified-timestamp">   <em>updated: 23 November 2021  </em></span>
 <ul class="org-ul"> <li> <a href="https://github.com/AndreaMiotto/ActionOver">ActionOver: A custom SwiftUI modifier to present an Action Sheet on iPhone and a Popover on iPad and Mac</a>.</li>
 <li> <a href="https://www.hackingwithswift.com/articles/224/common-swiftui-mistakes-and-how-to-fix-them">8 Common SwiftUI Mistakes - and how to fix them – Hacking with Swift</a>.</li>
 <li> <a href="https://schwiftyui.com/swiftui/building-a-widget-for-ios-with-swiftui-and-widgetkit/">Building a Widget for iOS with SwiftUI and WidgetKit - SchwiftyUI</a>.</li>
 <li> <a href="https://swiftui.diegolavalle.com/posts/linewrapping-stacks/">Line-Wrapping Stacks - Swift You and I</a>.</li>
 <li> <a href="https://swiftwithmajid.com/2021/07/14/pull-to-refresh-in-swiftui/">Pull-to-Refresh in SwiftUI | Swift with Majid</a>.</li>
 <li> <a href="https://blog.rizwan.dev/blog/swiftui-import-export-files">SwiftUI Import/Export files | Rizwan's Blog 👨‍💻</a>.</li>
 <li> <a href="https://betterprogramming.pub/the-swiftui-toolbar-in-ios-14-b4a0fe6a3034">The SwiftUI Toolbar in iOS 14</a>.</li>
 <li> <a href="https://trailingclosure.com/">Trailing Closure (SwiftUI tutotials)</a>.</li>
 <li> <a href="https://www.avanderlee.com/swift/urlsession-common-pitfalls-with-background-download-upload-tasks/">URLSession: Common pitfalls with background download & upload tasks</a>.</li>
 <li> <a href="https://twitter.com/clarko/status/1284940951031439361"> SwiftUI live-blur materials that you can use like a background color</a>.</li>
 <li> <a href="https://emacsist.github.io/2020/01/07/swiftui-for-absolute-beginners%E8%AF%BB%E4%B9%A6/"><SwiftUI for Absolute Beginners>读书 - emacsist</a>.</li>
 <li> <a href="https://developer.apple.com/documentation/swiftui/environmentvalues">@Environment values</a>.</li>
 <li> <a href="https://twitter.com/natpanferova/status/1275903292946567168">`@State` `onChange`</a>.</li>
 <li> <a href="https://github.com/Jinxiansen/SwiftUI">`SwiftUI` Framework Learning and Usage Guide</a>.</li>
 <li> <a href="https://swiftui-lab.com/companion/">A Companion for SwiftUI - The SwiftUI Lab</a>.</li>
 <li> <a href="https://swiftbysundell.com/articles/deep-dive-into-swift-function-builders/">A deep dive into Swift’s function builders | Swift by Sundell</a>.</li>
 <li> <a href="https://www.objc.io/blog/2020/08/18/fuzzy-search/">A Fast Fuzzy Search Implementation · objc.io</a>.</li>
 <li> <a href="https://swiftbysundell.com/articles/swiftui-state-management-guide/">A guide to SwiftUI’s state management system | Swift by Sundell</a>.</li>
 <li> <a href="https://swiftbysundell.com/articles/swiftui-layout-system-guide-part-1/">A guide to the SwiftUI layout system - Part 1 | Swift by Sundell</a>.</li>
 <li> <a href="https://github.com/jordansinger/SwiftUI-Kit">A SwiftUI iOS system components and interactions demo app based on iOS 14</a>.</li>
 <li> <a href="https://swiftui-lab.com/swiftui-animations-part1/">Advanced SwiftUI Animations - Part 1: Paths - The SwiftUI Lab</a>.</li>
 <li> <a href="https://swiftui-lab.com/advanced-transitions/">Advanced SwiftUI Transitions - The SwiftUI Lab</a>.</li>
 <li> <a href="https://github.com/krzysztofzablocki/AutomaticSettings">AutomaticSettings: Data driven settings UI</a>.</li>
 <li> <a href="https://www.morningswiftui.com/blog/build-mapview-app-with-swiftui">Building a MapView app with SwiftUI — Morning SwiftUI</a>.</li>
 <li> <a href="https://swiftwithmajid.com/2019/12/25/building-pager-view-in-swiftui/">Building Pager view in SwiftUI | Majid’s blog about Swift development</a>.</li>
 <li> <a href="https://swiftwithmajid.com/2020/02/05/building-viewmodels-with-combine-framework/">Building ViewModels with Combine framework</a>.</li>
 <li> <a href="https://www.donnywals.com/category/combine/">Category: Combine – Donny Wals</a>.</li>
 <li> <a href="https://store.raywenderlich.com/products/combine-asynchronous-programming-with-swift">Combine: Asynchronous Programming with Swift</a>.</li>
 <li> <a href="https://swiftwithmajid.com/2019/08/28/composable-styling-in-swiftui/">Composable styling in SwiftUI | Swift with Majid</a>.</li>
 <li> <a href="https://www.oliverbinns.co.uk/2020/07/23/constructing-data-with-swift-function-builders/">Constructing Data with Swift Function Builders – Oliver Binns</a>.</li>
 <li> <a href="https://medium.com/flawless-app-stories/context-menu-alert-and-actionsheet-in-swiftui-b6ff0d1f8493">Context Menu, Alert and ActionSheet in SwiftUI</a>.</li>
 <li> <a href="https://danielsaidi.com/blog/2020/01/05/create-an-spm-package-for-swiftui">Create an SPM Package for SwiftUI | Daniel Saidi</a>.</li>
 <li> <a href="https://github.com/mattgallagher/CwlFitting">CwlFitting: A small SwiftUI package to aid with "shrink-to-fit" + "fill-aligned" VStack and HStack arrangements</a>.</li>
 <li> <a href="https://twitter.com/twostraws/status/1280996740053827584">debugPrint() SwiftUI modifier</a>.</li>
 <li> <a href="https://theswiftdev.com/2018/01/25/deep-dive-into-swift-frameworks/">Deep dive into Swift frameworks - The.Swift.Dev.</a>.</li>
 <li> <a href="https://dev.to/maeganwilson_/default-a-view-in-navigationview-with-swiftui-183p">Default a View in NavigationView with SwiftUI - DEV Community</a>.</li>
 <li> <a href="https://designcode.io/swiftui?promo=learnswiftui">designcode's SwiftUI course</a>.</li>
 <li> <a href="https://medium.com/over-engineering/monitoring-a-folder-for-changes-in-ios-dc3f8614f902">Detecting changes to a folder in iOS using Swift</a>.</li>
 <li> <a href="https://swiftui-lab.com/modal-dismiss-gesture/">Dismiss Gesture for SwiftUI Modals - The SwiftUI Lab</a>.</li>
 <li> <a href="https://medium.com/@karaiskc/first-learnings-from-adopting-swiftui-be2ee4289007">First learnings from adopting SwiftUI - Christos Karaiskos - Medium (card example)</a>.</li>
 <li> <a href="https://www.vadimbulavin.com/swift-function-builders-swiftui-view-builder/">Function Builders in Swift and SwiftUI</a>.</li>
 <li> <a href="https://swiftui-lab.com/geometryreader-to-the-rescue/">GeometryReader to the Rescue - The SwiftUI Lab</a>.</li>
 <li> <a href="https://medium.com/better-programming/gestures-in-swiftui-e94b784ecc7">Gestures in SwiftUI - Better Programming - Medium</a>.</li>
 <li> <a href="https://github.com/AppPear/ChartView">GitHub - AppPear/ChartView: ChartView made in SwiftUI</a>.</li>
 <li> <a href="https://github.com/dasautoooo/Parma">GitHub - dasautoooo/Parma: A SwiftUI view for displaying Markdown with custom.</a>.</li>
 <li> <a href="https://github.com/Dimillian/MovieSwiftUI">GitHub - Dimillian/MovieSwiftUI: SwiftUI & Combine app using MovieDB API.</a>.</li>
 <li> <a href="https://github.com/Jinxiansen/SwiftUI">GitHub - Jinxiansen/SwiftUI: `SwiftUI` Framework Learning and Usage Guide.</a>.</li>
 <li> <a href="https://github.com/mecid/SwiftUICharts">GitHub - mecid/SwiftUICharts: A simple line and bar charting library written for SwiftUI</a>.</li>
 <li> <a href="https://github.com/nalexn/EnvironmentOverrides">GitHub - nalexn/EnvironmentOverrides: QA assistant for a SwiftUI app</a>.</li>
 <li> <a href="https://github.com/nerdsupremacist/FancyScrollView">GitHub - nerdsupremacist/FancyScrollView (list with growing/snapping header)</a>.</li>
 <li> <a href="https://github.com/paololeonardi/WaterfallGrid">GitHub - paololeonardi/WaterfallGrid: A waterfall grid layout view for SwiftUI.</a>.</li>
 <li> <a href="https://github.com/SimpleBoilerplates/SwiftUI-Cheat-Sheet">GitHub - SimpleBoilerplates/SwiftUI-Cheat-Sheet: SwiftUI Cheat Sheet</a>.</li>
 <li> <a href="https://github.com/siteline/SwiftUI-Introspect">GitHub - siteline/SwiftUI-Introspect: Introspect underlying UIKit components</a>.</li>
 <li> <a href="https://github.com/SwiftUIX/SwiftUIX">GitHub - SwiftUIX/SwiftUIX: An extension to the standard SwiftUI library.</a>.</li>
 <li> <a href="https://swiftwithmajid.com/2019/11/13/gradient-in-swiftui/">Gradient in SwiftUI | Majid’s blog about Swift development</a>.</li>
 <li> <a href="https://www.hackingwithswift.com/example-code/uikit/how-to-add-a-toolbar-above-the-keyboard-using-inputaccessoryview">How to add a toolbar above the keyboard using inputAccessoryView</a>.</li>
 <li> <a href="https://twitter.com/myridiphis/status/1339840448689549312">How to animate along zIndex in SwiftUI</a>.</li>
 <li> <a href="https://blckbirds.com/post/side-menu-hamburger-menu-in-swiftui/">How to create a side menu (hamburger menu) in SwiftUI | BLCKBIRDS</a>.</li>
 <li> <a href="https://www.raywenderlich.com/4503153-how-to-create-a-splash-screen-with-swiftui">How to Create a Splash Screen With SwiftUI | raywenderlich.com</a>.</li>
 <li> <a href="https://stackoverflow.com/questions/56490963/how-to-display-a-search-bar-with-swiftui">how to display a search bar with SwiftUI - Stack Overflow</a>.</li>
 <li> <a href="https://www.hackingwithswift.com/articles/210/how-to-fix-slow-list-updates-in-swiftui">How to fix slow List updates in SwiftUI – Hacking with Swift</a>.</li>
 <li> <a href="https://medium.com/better-programming/scheduling-notifications-and-badges-in-swiftui-9edf8574b893">How to Schedule Notifications and Add Badges in SwiftUI</a>.</li>
 <li> <a href="https://twitter.com/icanzilb/status/1324685822063497217">Image resizing techniques in Swift (smooth scroll)</a>.</li>
 <li> <a href="https://medium.com/better-programming/implement-searchbar-in-swiftui-556a204e1970">Implement a Search Bar in SwiftUI - Better Programming - Medium</a>.</li>
 <li>Implementing Context Menus in iOS 13 Using SwiftUI or UIKit.</li>
 <li> <a href="https://twitter.com/chriseidhof/status/1280138752409636864">In the new SwiftUI, is there any reason you would still use ObservedObject instead of StateObject?</a>.</li>
 <li> <a href="https://swiftui-lab.com/communicating-with-the-view-tree-part-1/">Inspecting the View Tree with PreferenceKey - Part 1 - The SwiftUI Lab</a>.</li>
 <li> <a href="https://twitter.com/misaellandero/status/1285318302013837312">Integrate SwiftUI on UIKIT project its actually pretty easy</a>.</li>
 <li> <a href="https://stackoverflow.com/questions/56505043/how-to-make-view-the-size-of-another-view-in-swiftui">ios - How to make view the size of another view in SwiftUI - Stack Overflow</a>.</li>
 <li> <a href="https://elliehuxtable.com/lessons-learned-with-swift-ios-development/">Lessons learned with Swift + iOS development</a>.</li>
 <li> <a href="https://twitter.com/dmartincy/status/1275913911506780161">LLDB "_regexp-break <file>:<line>:<column>", breakpoint at a particular source code line and column</a>.</li>
 <li> <a href="https://swiftwithmajid.com/2020/07/08/mastering-grids-in-swiftui/">Mastering grids in SwiftUI | Swift with Majid</a>.</li>
 <li> <a href="https://swiftwithmajid.com/2020/09/24/mastering-scrollview-in-swiftui/">Mastering ScrollView in SwiftUI | Swift with Majid</a>.</li>
 <li> <a href="https://github.com/jordansinger/messages-multiplatform-swiftui-sample">Multiplatform Messages app for macOS, iOS, iPadOS in SwiftUI</a>.</li>
 <li> <a href="https://swiftwithmajid.com/2019/12/04/must-have-swiftui-extensions/">Must-have SwiftUI extensions | Majid’s blog about Swift development</a>.</li>
 <li> <a href="https://swiftwithmajid.com/2020/06/29/new-property-wrappers-in-swiftui/">New property wrappers in SwiftUI (@ScaledMetric, @SceneStorage, @AppStorage, @StateObject)</a>.</li>
 <li> <a href="https://twitter.com/natpanferova/status/1296725502305034240">On iOS 14, the keyboard is added to safe area</a>.</li>
 <li> <a href="https://www.objc.io/blog/2020/03/17/thinking-in-swiftui/">Our New Book: Thinking in SwiftUI · objc.io</a>.</li>
 <li> <a href="https://nalexn.github.io/anyview-vs-group/">Performance Battle: AnyView vs Group - Alexey Naumov</a>.</li>
 <li> <a href="https://gumroad.com/l/practical-combine/wwdc2020">Practical Combine: An introduction to Combine with real examples</a>.</li>
 <li> <a href="https://nalexn.github.io/swiftui-deep-linking/">Programmatic navigation in SwiftUI project - Alexey Naumov</a>.</li>
 <li> <a href="https://medium.com/get-chip/propert-wrappers-in-swift-5-1-14f610530710">Property Wrappers in Swift 5.1. An introduction to one of Swift 5.1’s</a>.</li>
 <li> <a href="https://twitter.com/navdeep_ua/status/1296591355485945856">Recreate iOS style Welcome Screen to any app in 3 minutes</a>.</li>
 <li> <a href="https://twitter.com/jsngr/status/1276700160643551232">Recreate this Control Center widget in SwiftUI</a>.</li>
 <li> <a href="https://dev.to/gualtierofr/remote-images-in-swiftui-49jp">Remote images in SwiftUI - DEV Community</a>.</li>
 <li> <a href="https://medium.com/ymedialabs-innovation/resizing-techniques-and-image-quality-that-every-ios-developer-should-know-e061f33f7aba">Resizing Techniques and Image Quality That Every iOS Developer Should Know (Swift)</a>.</li>
 <li> <a href="https://medium.com/flawless-app-stories/reusable-image-cache-in-swift-9b90eb338e8d">Reusable Image Cache in Swift - Flawless iOS - Medium</a>.</li>
 <li> <a href="https://ordinarycoding.com/articles/search-view-in-swiftui/">Search View in SwiftUI | Ordinary Coding</a>.</li>
 <li> <a href="https://www.hackingwithswift.com/books/ios-swiftui/selecting-dates-and-times-with-datepicker">Selecting dates and times with DatePicker</a>.</li>
 <li> <a href="https://twitter.com/icanzilb/status/1235884754576322560">Short video showing you how to debug, learn, or teach Combine operators with Timelane - the approach is always the same, add lanes - analyze the data</a>.</li>
 <li> <a href="https://swiftwithmajid.com/2020/07/21/sidebar-navigation-in-swiftui/">Sidebar navigation in SwiftUI | Swift with Majid</a>.</li>
 <li> <a href="https://github.com/alfianlosari/SwiftUIStaggeredNote">StaggeredList Sample App: A Staggered Pinterest Like Layout using SwiftUI</a>.</li>
 <li> <a href="https://developer.apple.com/documentation/swiftui/state_and_data_flow">State and Data Flow | Apple Developer Documentation</a>.</li>
 <li> <a href="https://twitter.com/twostraws/status/1279487425581133831">Stretchable header</a>.</li>
 <li> <a href="https://stackoverflow.com/questions/56578072/hstack-with-sf-symbols-image-not-aligned-centered">swift - HStack with SF Symbols Image not aligned centered - Stack Overflow</a>.</li>
 <li> <a href="https://stackoverflow.com/questions/59227158/imagepicker-in-swiftui">swift - ImagePicker in SwiftUI - Stack Overflow</a>.</li>
 <li> <a href="https://nshipster.com/propertywrapper/">Swift Property Wrappers - NSHipster</a>.</li>
 <li> <a href="https://swiftuipropertywrappers.com/">Swift UI Property Wrappers (@State, @StateObject, @EnvironmentObject, @ObservedObject, @Binding)</a>.</li>
 <li> <a href="https://stackoverflow.com/questions/62840571/not-receiving-scenephase-changes">swiftui - Not Receiving scenePhase Changes (foreground/background)</a>.</li>
 <li> <a href="https://medium.com/better-programming/swiftui-and-redux-clean-code-and-small-independent-components-6f46a5eb46b3">SwiftUI and Redux — Clean Code and Small, Independent Components</a>.</li>
 <li> <a href="https://sarunw.com/posts/swiftui-animation/">SwiftUI Animation (buttons, current-rotations, etc) | Sarun</a>.</li>
 <li> <a href="https://sarunw.com/posts/swiftui-animation/">SwiftUI Animation | Sarun</a>.</li>
 <li> <a href="https://medium.com/swlh/learn-master-%EF%B8%8F-swiftui-basic-components-in-10-minutes-dc327e71d245">SwiftUI basic components (form example)</a>.</li>
 <li> <a href="https://www.hackingwithswift.com/books/ios-swiftui/buttons-and-images">SwiftUI Buttons and images (using systemName)</a>.</li>
 <li> <a href="https://designcode.io/courses">SwiftUI courses</a>.</li>
 <li> <a href="https://swiftui-lab.com/custom-styling/">SwiftUI Custom Styling - The SwiftUI Lab (scaleEffect and opacity on isPressed)</a>.</li>
 <li> <a href="https://www.swiftcompiled.com/swiftui-datepicker/">SwiftUI DatePicker</a>.</li>
 <li> <a href="https://github.com/Leon12345679/QuickActionCard">SwiftUI displaying customizable quick action card</a>.</li>
 <li id="[[<a href=">https://troz.net/post/2020/swiftui_mac_big_sur/][SwiftUI for Mac on Big Sur">TrozWare]].</li>
 <li> <a href="https://twitter.com/jsngr/status/1276931917628219398">SwiftUI gives you .isPlaceholder in WidgetKit generate a placeholders</a></li>
 <li> <a href="https://kean.github.io/post/swiftui-layout-system">SwiftUI Layout System | Alexander Grebenyuk</a>.</li>
 <li> <a href="https://www.simpleswiftguide.com/swiftui-navigationview-tutorial-with-examples/">SwiftUI NavigationView tutorial with examples - Simple Swift Guide</a>.</li>
 <li> <a href="https://www.tomasznazarenko.com/frameworks/SwiftUI-notes/">SwiftUI notes - Tomasz Nazarenko Blog</a>.</li>
 <li> <a href="https://twitter.com/jamesthomson/status/1293506487063584770">SwiftUI picker gotchas</a>.</li>
 <li> <a href="https://twitter.com/Geri_Borbas/status/1262390699611369477">SwiftUI Search Bar in the Navigation Bar</a>.</li>
 <li> <a href="https://zonneveld.dev/">SwiftUI snippets by Jeroen Zonneveld</a>.</li>
 <li> <a href="https://www.appcoda.com/swiftui-form-ui/">SwiftUI Tutorial: How to Build a Form UI for iOS Apps</a>.</li>
 <li> <a href="https://swiftuihub.com/">SwiftUI Tutorials on SwiftUI Hub</a>.</li>
 <li> <a href="https://swiftui.gallery/">swiftui.gallery | A gallery of SwiftUI code example snippets</a>.</li>
 <li> <a href="https://swiftui.gallery/uploads/code/SignUpForm">swiftui.gallery: sign up form sample</a>.</li>
 <li> <a href="https://github.com/ygit/swiftui">swiftui: A collaborative list of awesome SwiftUI resources</a>.</li>
 <li> <a href="https://finestructure.co/blog/2020/1/20/swiftui-equal-widths-view-constraints">SwiftUI: Equal widths view constraints — finestructure</a>.</li>
 <li> <a href="https://www.objc.io/blog/2019/10/01/swiftui-shake-animation/">SwiftUI: Shake Animation · objc.io</a>.</li>
 <li> <a href="https://github.com/alfianlosari/SwiftUIStaggeredList">SwiftUIStaggeredList: Staggered Layout List Using SwiftUI</a>.</li>
 <li> <a href="https://medium.com/better-programming/swiftuis-new-app-lifecycle-and-replacements-for-appdelegate-and-scenedelegate-in-ios-14-c9cf4a2367a9">SwiftUI’s New App Lifecycle and Replacements for AppDelegate</a>.</li>
 <li> <a href="https://danielsaidi.com/blog/2020/01/05/create-an-spm-package-for-swiftui">Swipe gesture SwiftUI | Daniel Saidi</a>.</li>
 <li> <a href="https://www.reddit.com/r/swift/comments/elhakp/so_i_guess_my_journey_begins_now/">SwuiftUI books</a>.</li>
 <li> <a href="https://sarunw.com/tags/swiftui/">Tagged “SwiftUI” | Sarun</a>.</li>
 <li> <a href="https://swiftwithmajid.com/2020/02/26/textfield-in-swiftui/">TextField in SwiftUI | Majid’s blog about Swift development</a>.</li>
 <li> <a href="https://medium.com/better-programming/the-complete-swiftui-documentation-youve-been-waiting-for-fdfe7241add9">The Complete SwiftUI Documentation You’ve Been Waiting For</a>.</li>
 <li> <a href="https://swiftwithmajid.com/2020/07/02/the-difference-between-stateobject-environmentobject-and-observedobject-in-swiftui/">The difference between @StateObject, @EnvironmentObject, and @ObservedObject</a>.</li>
 <li> <a href="https://swiftui-lab.com/a-powerful-combo/">The Power of the Hosting+Representable Combo (scroll SwiftUI list)</a>.</li>
 <li> <a href="https://theswiftdev.com/2019/10/31/the-ultimate-combine-framework-tutorial-in-swift/">The ultimate Combine framework tutorial in Swift - The.Swift.Dev.</a>.</li>
 <li> <a href="https://twitter.com/dbuchanandev/status/1236411023340511233">Tweet on improving List SwiftUI performace (searching)</a>.</li>
 <li> <a href="https://www.raywenderlich.com/4829472-uicollectionview-custom-layout-tutorial-pinterest">UICollectionView Custom Layout Tutorial: Pinterest | raywenderlich.com</a>.</li>
 <li> <a href="https://medium.com/@dmytro.anokhin/url-image-view-in-swiftui-f08f85d942d8">URL Image view in SwiftUI</a>.</li>
 <li> <a href="https://heckj.github.io/swiftui-notes/">Using Combine (extensive online book)</a>.</li>
 <li> <a href="https://medium.com/better-programming/using-ios-14s-menu-as-a-picker-in-swiftui-b036c772037">Using iOS 14's Menu as a Picker in SwiftUI</a>.</li>
 <li> <a href="https://swiftwithmajid.com/2019/10/30/view-composition-in-swiftui/">View composition in SwiftUI | Majid’s blog about Swift development</a>.</li>
 <li> <a href="https://netsplit.com/swiftui/views-choose-their-own-sizes/">Views Choose Their Own Sizes – Netsplit.com</a>.</li>
 <li> <a href="https://medium.com/flawless-app-stories/visualize-combine-magic-with-swiftui-part-1-3a56e2a461b3">Visualize Combine Magic with SwiftUI Part 1 - Flawless iOS - Medium</a>.</li>
 <li> <a href="https://www.donnywals.com/whats-the-difference-between-stateobject-and-observedobject/">What’s the difference between @StateObject and @ObservedObject? – Donny Wals</a>.</li>
 <li> <a href="https://nalexn.github.io/swiftui-observableobject">Why I quit using the ObservableObject - Alexey Naumov</a>.</li>
 <li> <a href="https://swiftui-lab.com/working-with-focus-on-swiftui-views/">Working with Focus on SwiftUI Views - The SwiftUI Lab</a>.</li>
</ul></div>
</div>
</div>]]></description>
  <link>http://xenodium.com/swiftui-bookmarks</link>
  <guid isPermaLink="false">http://xenodium.com/swiftui-bookmarks</guid>
  <pubDate>Sun, 29 Dec 2019 00:00:00 +0000</pubDate>
</item>
<item>
  <title>Wizard zines comics in Emacs eshell</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-wizard-zines-comics-eshell-util" class="outline-2">
 <h2 id="wizard-zines-comics-eshell-util"> <span class="timestamp-wrapper"> <span class="timestamp">24 November 2019</span></span> Wizard zines comics in Emacs eshell</h2>
 <div class="outline-text-2" id="text-wizard-zines-comics-eshell-util">
 <p>
Over at  <a href="http://wizardzines.com">wizardzines.com</a>,  <a href="https://jvns.ca">Julia Evans</a> authors wonderful zines on topics like git, networking, linux, command-line utilities, and others. Some zines are paid. Some are free. No affiliation here, just a fan.
</p>

 <p>
A little while ago, Julia  <a href="https://twitter.com/b0rk/status/1192304892435738624">tweeted</a> about a utility she's building to view her original comics on similar topics. I instantly thought it'd be a fun tool to implement for Emacs  <a href="https://www.gnu.org/software/emacs/manual/html_mono/eshell.html">eshell</a>.
</p>

 <p>
Since then, I subscribed to  <a href="https://wizardzines.com/saturday-comics/">wizardzines.com/saturday-comics</a> and received a few comics (awk, tar, and bash tricks). I saved them locally (using topic name and dropping file extensions).
</p>

 <div class="org-src-container">
 <pre class="src src-sh">ls -1 ~/Downloads/wizardzines-comics/
</pre>
</div>

 <table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"> <colgroup> <col class="org-left"></col></colgroup> <tbody> <tr> <td class="org-left">awk</td>
</tr> <tr> <td class="org-left">bash</td>
</tr> <tr> <td class="org-left">tar</td>
</tr></tbody></table> <p>
By no means battle-tested, but here's an elisp snippet defining the  <i>ecomic</i> command. It displays inlined comics in the handy eshell.
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">require</span> ' <span style="color: #0086b3;">eshell</span>)
(<span style="color: #a71d5d;">require</span> ' <span style="color: #0086b3;">iimage</span>)

(<span style="color: #a71d5d;">defvar</span>  <span style="color: #333333;">wizardzines-comics-path</span>  <span style="color: #183691;">"~/Downloads/wizardzines-comics"</span>)

(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">eshell/ecomic</span> (<span style="color: #0086b3;">&rest</span> args)
   <span style="color: #183691;">"Display command comic in ARGS.</span>
 <span style="color: #183691;">Note: ensure comic images live in `</span> <span style="color: #0086b3;">wizardzines-comics-path</span> <span style="color: #183691;">', named with</span>
 <span style="color: #183691;">command name and no extension."</span>
  (eshell-eval-using-options
    <span style="color: #183691;">"ecomic"</span> args
   '((?h  <span style="color: #183691;">"help"</span> nil nil  <span style="color: #183691;">"show this usage screen"</span>)
      <span style="color: #a71d5d;">:external</span>  <span style="color: #183691;">"ecomic"</span>
      <span style="color: #a71d5d;">:show-usage</span>
      <span style="color: #a71d5d;">:usage</span>  <span style="color: #183691;">"COMMAND</span>

 <span style="color: #183691;">Show COMMAND comic from Julia Evans' https://wizardzines.com/saturday-comics"</span>)
   (<span style="color: #a71d5d;">let*</span> ((command (nth 0 (eshell-stringify-list (eshell-flatten-list args))))
          (image-fpath (concat (file-name-as-directory
                                (expand-file-name wizardzines-comics-path))
                               command)))
     (<span style="color: #a71d5d;">unless</span> (file-exists-p image-fpath)
       (<span style="color: #333333;">error</span>  <span style="color: #183691;">"comic: \"%s\" not found :-("</span> command))
     (eshell-buffered-print  <span style="color: #183691;">"\n"</span>)
     (add-text-properties 0 (length image-fpath)
                          `(display ,(create-image image-fpath)
                                    modification-hooks
                                    (iimage-modification-hook))
                          image-fpath)
     (eshell-buffered-print image-fpath)
     (eshell-flush))))
</pre>
</div>


 <div id="org83dc62b" class="figure">
 <p> <img src="../images/wizard-zines-comics-eshell-util/ecomic.gif" alt="ecomic.gif" width="75%" height="75%"></img></p>
</div>

 <p>
comments on  <a href="https://twitter.com/xenodium/status/1198542659704504321">twitter</a>
</p>
</div>

 <div id="outline-container-org80c8009" class="outline-3">
 <h3 id="org80c8009">Updates</h3>
 <div class="outline-text-3" id="text-org80c8009">
 <ul class="org-ul"> <li>Tweaked title.</li>
</ul></div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/wizard-zines-comics-eshell-util</link>
  <guid isPermaLink="false">http://xenodium.com/wizard-zines-comics-eshell-util</guid>
  <pubDate>Sun, 24 Nov 2019 00:00:00 +0000</pubDate>
</item>
<item>
  <title>Emacs counsel default search switches</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-emacs-counsel-default-search-switches" class="outline-2">
 <h2 id="emacs-counsel-default-search-switches"> <span class="timestamp-wrapper"> <span class="timestamp">21 November 2019</span></span> Emacs counsel default search switches</h2>
 <div class="outline-text-2" id="text-emacs-counsel-default-search-switches">
 <p>
Following up from  <a href="http://xenodium.com/enhanced-emacs-searching-with-counsel-switches">Enhanced Emacs searching with counsel switches</a>, rather than remembering  <a href="https://github.com/ggreer/the_silver_searcher">silver searcher</a> and  <a href="https://github.com/BurntSushi/ripgrep">ripgrep</a> switches, we can use  <a href="https://github.com/abo-abo/swiper">counsel's</a>  <i>ivy-initial-inputs-alist</i> to set these up as default visible switches.
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">push</span> '(counsel-ag .  <span style="color: #183691;">"--file-search-regex '' -- "</span>) ivy-initial-inputs-alist)
(<span style="color: #a71d5d;">push</span> '(counsel-rg .  <span style="color: #183691;">"--glob '</span> <span style="color: #0086b3;">**</span> <span style="color: #183691;">' -- "</span>) ivy-initial-inputs-alist)
</pre>
</div>

 <p>
The default switches stay out of the way in typical searches, but can be easily modified to include (or exclude) results matching specific file  <i>names</i>.
</p>


 <div id="org689ddb2" class="figure">
 <p> <img src="../images/emacs-counsel-default-search-switches/default-switches.gif" alt="default-switches.gif" width="75%" height="75%"></img></p>
</div>

 <p>
comments on  <a href="https://twitter.com/xenodium/status/1197673205688864768?s=20">twitter</a></p>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/emacs-counsel-default-search-switches</link>
  <guid isPermaLink="false">http://xenodium.com/emacs-counsel-default-search-switches</guid>
  <pubDate>Thu, 21 Nov 2019 00:00:00 +0000</pubDate>
</item>
<item>
  <title>Emacs org block company completion</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-emacs-org-block-company-completion" class="outline-2">
 <h2 id="emacs-org-block-company-completion"> <span class="timestamp-wrapper"> <span class="timestamp">10 November 2019</span></span> Emacs org block company completion</h2>
 <div class="outline-text-2" id="text-emacs-org-block-company-completion">
 <p>
UPDATE: This is now available  <a href="https://melpa.org/#/company-org-block">on melpa</a>.
</p>

 <p>
Back in 2015, I bound the "<" key to a hydra for quickly inserting org blocks. The idea came from Oleg's post on  <a href="https://oremacs.com/2015/03/07/hydra-org-templates/">org-mode block templates in Hydra</a>. The suggested binding settled in my muscle memory without much effort.
</p>

 <p>
Fast forward to Febrary 2019. I replaced the hydra with  <i> <a href="https://orgmode.org/manual/Easy-templates.html">org-insert-structure-template</a></i> when  <i>org-try-structure-completion</i> was removed from org mode. No biggie, as I kept the same binding to "<" and hardly noticed the change.
</p>

 <p>
Since my primary use-case for easy templates is inserting  <a href="https://orgmode.org/manual/Working-with-source-code.html">source blocks</a>, I was keen to expedite choosing the source language as well as inserting the source block itself.
</p>

 <p>
Writing a small  <a href="https://company-mode.github.io/">company mode</a> completion backend fits my primary use-case pretty well.
</p>


 <div id="orgc273b59" class="figure">
 <p> <img src="../images/emacs-org-block-company-completion/company-org-block.gif" alt="company-org-block.gif" width="50%" height="50%"></img></p>
</div>

 <p>
The company backend looks as follow ( <b>Warning:</b>  <a href="https://twitter.com/tpanum/status/1197772426072997888">Snippet needs Org v9.2</a>).
</p>

 <p>
Note: This code is not up to date. Install via  <a href="https://melpa.org/#/company-org-block">melpa</a> or see  <a href="https://github.com/xenodium/company-org-block">its repository</a>.
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">require</span> ' <span style="color: #0086b3;">map</span>)
(<span style="color: #a71d5d;">require</span> ' <span style="color: #0086b3;">org</span>)
(<span style="color: #a71d5d;">require</span> ' <span style="color: #0086b3;">seq</span>)

(<span style="color: #a71d5d;">defvar</span>  <span style="color: #333333;">company-org-block-bol-p</span> t  <span style="color: #183691;">"If t, detect completion when at</span>
 <span style="color: #183691;">begining of line, otherwise detect completion anywhere."</span>)

(<span style="color: #a71d5d;">defvar</span>  <span style="color: #333333;">company-org--regexp</span>  <span style="color: #183691;">"<</span> <span style="color: #969896;">\\</span> <span style="color: #a71d5d;">(</span> <span style="color: #183691;">[</span> <span style="color: #a71d5d;">^</span> <span style="color: #183691;"> ]*</span> <span style="color: #969896;">\\</span> <span style="color: #a71d5d;">)</span> <span style="color: #183691;">"</span>)

(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">company-org-block</span> (command  <span style="color: #0086b3;">&optional</span> arg  <span style="color: #0086b3;">&rest</span> ignored)
   <span style="color: #183691;">"Complete org babel languages into source blocks."</span>
  (<span style="color: #a71d5d;">interactive</span> (list 'interactive))
  (<span style="color: #a71d5d;">cl-case</span> command
    (<span style="color: #a71d5d;">interactive</span> (company-begin-backend 'company-org-block))
    (prefix (<span style="color: #a71d5d;">when</span> (derived-mode-p 'org-mode)
              (company-org-block--grab-symbol-cons)))
    (candidates (company-org-block--candidates arg))
    (post-completion
     (company-org-block--expand arg))))

(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">company-org-block--candidates</span> (prefix)
   <span style="color: #183691;">"Return a list of org babel languages matching PREFIX."</span>
  (seq-filter (<span style="color: #a71d5d;">lambda</span> (language)
                (string-prefix-p prefix language))
               <span style="color: #969896;">;; </span> <span style="color: #969896;">Flatten `</span> <span style="color: #0086b3;">org-babel-load-languages</span> <span style="color: #969896;">' and</span>
               <span style="color: #969896;">;; </span> <span style="color: #969896;">`</span> <span style="color: #0086b3;">org-structure-template-alist</span> <span style="color: #969896;">', join, and sort.</span>
              (seq-sort
               #'string-lessp
               (append
                (mapcar #'prin1-to-string
                        (map-keys org-babel-load-languages))
                (map-values org-structure-template-alist)))))

(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">company-org-block--template-p</span> (template)
  (seq-contains (map-values org-structure-template-alist)
                template))

(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">company-org-block--expand</span> (insertion)
   <span style="color: #183691;">"Replace INSERTION with actual source block."</span>
  (delete-region (point) (- (point) (1+  <span style="color: #969896;">;; </span> <span style="color: #969896;">Include "<" in length.</span>
                                     (length insertion))))
  (<span style="color: #a71d5d;">if</span> (company-org-block--template-p insertion)
      (company-org-block--wrap-point insertion
                                      <span style="color: #969896;">;; </span> <span style="color: #969896;">May be multiple words.</span>
                                      <span style="color: #969896;">;; </span> <span style="color: #969896;">Take the first one.</span>
                                     (nth 0 (split-string insertion)))
    (company-org-block--wrap-point (format  <span style="color: #183691;">"src %s"</span> insertion)
                                    <span style="color: #183691;">"src"</span>)))

(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">company-org-block--wrap-point</span> (begin end)
   <span style="color: #183691;">"Wrap point with block using BEGIN and END.  For example:</span>
 <span style="color: #183691;">#+begin_BEGIN</span>
 <span style="color: #183691;">  |</span>
 <span style="color: #183691;">#+end_END"</span>
  (insert (format  <span style="color: #183691;">"#+begin_%s\n"</span> begin))
  (insert (make-string org-edit-src-content-indentation ?\s))
   <span style="color: #969896;">;; </span> <span style="color: #969896;">Saving excursion restores point to location inside code block.</span>
  (<span style="color: #a71d5d;">save-excursion</span>
    (insert (format  <span style="color: #183691;">"\n#+end_%s"</span> end))))

(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">company-org-block--grab-symbol-cons</span> ()
   <span style="color: #183691;">"Return cons with symbol and t whenever prefix of < is found.</span>
 <span style="color: #183691;">For example: \"<e\" -> (\"e\" . t)"</span>
  (<span style="color: #a71d5d;">when</span> (looking-back (<span style="color: #a71d5d;">if</span> company-org-block-bol-p
                          (concat  <span style="color: #183691;">"^"</span> company-org--regexp)
                        company-org--regexp)
                      (line-beginning-position))
    (cons (match-string-no-properties 1) t)))
</pre>
</div>

 <p>
To use, add the backend enable  <i>company-mode</i> in  <i>org-mode</i>:
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(add-to-list 'company-backends 'company-org-block)
(company-mode +1)
</pre>
</div>
</div>

 <div id="outline-container-orgb5eb482" class="outline-3">
 <h3 id="orgb5eb482">Updates</h3>
 <div class="outline-text-3" id="text-orgb5eb482">
 <ul class="org-ul"> <li>Removed language-specific header logic (use  <i> <a href="https://www.orgmode.org/worg/org-contrib/babel/header-args.html">org-babel-default-header-args</a></i> instead).</li>
 <li>Also completes non-source block templates from  <a href="https://orgmode.org/manual/Easy-templates.html">org-structure-template-alist</a>.</li>
 <li>Source in my  <a href="https://github.com/xenodium/dotsies/blob/master/emacs/ar/company-org-block.el">dot files</a>.</li>
 <li>Removed unnecessary binding. Just add company backend as usual.</li>
 <li>Thanks to  <a href="https://twitter.com/takaxp">Takaaki Ishikawa</a> for  <a href="https://twitter.com/takaxp/status/1195884481535561729?s=20">suggesting `org-edit-src-content-indentation'</a>.</li>
 <li>Thanks to  <a href="https://twitter.com/tpanum">Thomas Kobber</a> for  <a href="https://twitter.com/xenodium/status/1194224168709083137">highlighting incompatibility</a> with older org versions.</li>
</ul></div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/emacs-org-block-company-completion</link>
  <guid isPermaLink="false">http://xenodium.com/emacs-org-block-company-completion</guid>
  <pubDate>Sun, 10 Nov 2019 00:00:00 +0000</pubDate>
</item>
<item>
  <title>Enhanced Emacs searching with counsel switches</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-enhanced-emacs-searching-with-counsel-switches" class="outline-2">
 <h2 id="enhanced-emacs-searching-with-counsel-switches"> <span class="timestamp-wrapper"> <span class="timestamp">10 November 2019</span></span> Enhanced Emacs searching with counsel switches</h2>
 <div class="outline-text-2" id="text-enhanced-emacs-searching-with-counsel-switches">
 <p>
The  <a href="https://github.com/abo-abo/swiper">counsel</a> family of Emacs search commands are great for searching the filesystem. More specifically,  <i>counsel-rg</i>,  <i>counsel-ag</i>, and  <i>counsel-pt</i>, which use the popular  <a href="https://github.com/BurntSushi/ripgrep">ripgrep</a>,  <a href="https://github.com/ggreer/the_silver_searcher">silver searcher</a>, and  <a href="https://github.com/monochromegane/the_platinum_searcher">platinum searcher</a> utilities.
</p>

 <p>
counsel-rg is my default searcher. It returns results quickly, with live updates as I tweak the search query.
</p>

 <p>
Up until recently, my queries typically matched text in files only. This works great, but every so often I wished I could amend the query to include (or exclude) results matching specific file  <i>names</i>. Turns out, you can prepend the search query with additional switches using the "–" separator.
</p>

 <p>
The switches are usually utility-specific, but if we wanted to keep results from file names matching a glob, we can prepend the ripgrep query with something like  <i>"–glob Make* –"</i> or the shorter version  <i>"-g Make* –"</i>.
</p>

 <p>
rg: -g Make* – install
</p>


 <div id="org358052e" class="figure">
 <p> <img src="../images/enhanced-emacs-searching-with-counsel-switches/counsel-rg-switch.gif" alt="counsel-rg-switch.gif" width="75%" height="75%"></img></p>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/enhanced-emacs-searching-with-counsel-switches</link>
  <guid isPermaLink="false">http://xenodium.com/enhanced-emacs-searching-with-counsel-switches</guid>
  <pubDate>Sun, 10 Nov 2019 00:00:00 +0000</pubDate>
</item>
<item>
  <title>A more reusable Emacs shell-command history</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-more-reusable-emacs-shell-command-history" class="outline-2">
 <h2 id="more-reusable-emacs-shell-command-history"> <span class="timestamp-wrapper"> <span class="timestamp">03 November 2019</span></span> A more reusable Emacs shell-command history</h2>
 <div class="outline-text-2" id="text-more-reusable-emacs-shell-command-history">
 <p>
 <a href="https://twitter.com/camdez">Cameron Desautel</a> has a great post on  <a href="https://engineering.collbox.co/post/working-faster-in-emacs-by-reading-the-future/">Working Faster in Emacs by Reading the "Future"</a>, highlighting  <i>M-n</i>'s usefulness for inserting minibuffer default values.
</p>

 <p>
Invoking  <i>M-n</i> in  <i>shell-command</i>'s prompt is handy for quickly getting the current buffer's file name. This works great for one-off shell commands like  <i>"chmod +x script.sh"</i> or  <i>"tidy -xml -i -m data.xml"</i>. Unfortunately, these commands aren't easily reusable from  <i>shell-command</i>'s minibuffer history, since it'll keep hardcoded file names.
</p>

 <p>
There's likely existing built-in functionality or a more elaborate package for this, but advising  <i>read-shell-command</i> enables us to write more reusable commands like  <i>"chmod +x $f"</i> or  <i>"tidy -xml -i -m $f".</i> We merely replace  <i>$f</i> with  <i>(buffer-file-name)</i>, and let everything else continue as usual.
</p>


 <div id="orgb5c5523" class="figure">
 <p> <img src="../images/more-reusable-emacs-shell-command-history/expanded-shell-command.png" alt="expanded-shell-command.png" width="50%" height="50%"></img></p>
</div>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">ar/adviced-read-shell-command</span> (orig-fun  <span style="color: #0086b3;">&rest</span> r)
   <span style="color: #183691;">"Advice around `</span> <span style="color: #0086b3;">read-shell-command</span> <span style="color: #183691;">' to replace $f with buffer file name."</span>
  (<span style="color: #a71d5d;">let</span> ((command (apply orig-fun r)))
    (<span style="color: #a71d5d;">if</span> (string-match-p  <span style="color: #183691;">"\\$f"</span> command)
        (replace-regexp-in-string  <span style="color: #183691;">"\\$f"</span>
                                  (<span style="color: #a71d5d;">or</span> (buffer-file-name)
                                      (<span style="color: #333333;">user-error</span>  <span style="color: #183691;">"No file file visited to replace $f"</span>))
                                  command)
      command)))

(advice-add 'read-shell-command
             <span style="color: #a71d5d;">:around</span>
            'ar/adviced-read-shell-command)
</pre>
</div>

 <p>
It's worth mentioning that searching minibuffer history is pretty simple when leveraging  <a href="https://github.com/abo-abo/swiper">counsel</a> to fuzzy search (via  <i>counsel-minibuffer-history</i>, bound to  <i>C-r</i> by default).
</p>


 <div id="org9b7bd27" class="figure">
 <p> <img src="../images/more-reusable-emacs-shell-command-history/richer-shell-command-history.gif" alt="richer-shell-command-history.gif" width="50%" height="50%"></img></p>
</div>

 <p>
On a final note, searching minibuffer history for cache hits is way more useful with richer history content. Be sure to save minibuffer history across Emacs sessions and increase  <i>shell-command-history</i> using the built-in  <a href="https://www.emacswiki.org/emacs/SaveHist">savehist-mode</a>.
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">use-package</span>  <span style="color: #0086b3;">savehist</span>
   <span style="color: #a71d5d;">:custom</span>
  (savehist-file  <span style="color: #183691;">"~/.emacs.d/savehist"</span>)
  (savehist-save-minibuffer-history t)
  (history-length 10000)
  (savehist-additional-variables
   '(shell-command-history))
   <span style="color: #a71d5d;">:config</span>
  (savehist-mode +1))
</pre>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/more-reusable-emacs-shell-command-history</link>
  <guid isPermaLink="false">http://xenodium.com/more-reusable-emacs-shell-command-history</guid>
  <pubDate>Sun, 03 Nov 2019 00:00:00 +0000</pubDate>
</item>
<item>
  <title>Emacs swiper and multiple cursors</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-emacs-swiper-and-multiple-cursors" class="outline-2">
 <h2 id="emacs-swiper-and-multiple-cursors"> <span class="timestamp-wrapper"> <span class="timestamp">10 October 2019</span></span> Emacs swiper and multiple cursors</h2>
 <div class="outline-text-2" id="text-emacs-swiper-and-multiple-cursors">
 <p>
Emacs  <a href="https://github.com/abo-abo/swiper">swiper</a> is awesome. I bound  <i>swiper-isearch</i> to  <i>C-s</i>. Also a big fan of  <a href="https://github.com/magnars/multiple-cursors.el">multiple cursors</a>. I use it regularly (it's fun).
</p>

 <p>
I had totally missed Ole's post back in 2015:  <a href="https://oremacs.com/2015/10/14/swiper-mc/">A simple multiple-cursors extension to swiper</a>. Turns out, swiper has multiple cursors support out of the box (bound to  <i>C-7</i> by default). Yay!
</p>

 <p>
UPDATE: Thanks to  <a href="https://irreal.org/blog/?p=8370">irreal's post</a>, please remember to add  <i>swiper-mc</i> to  <i>mc/cmds-to-run-once</i> list (or things won't work as expected). This typically happens interactively when you invoke C-7 the first time around. Make sure you answer "n" when you see a prompt like:
</p>


 <div id="org33e32da" class="figure">
 <p> <img src="../images/emacs-swiper-and-multiple-cursors/swiper-mc-no.png" alt="swiper-mc-no.png" width="50%" height="50%"></img></p>
</div>

 <p>
If you happen to choose "y" by mistake, take a look at  <b>~/.emacs.d/.mc-lists.el</b> to correct it. Remove  <i>swiper-mc</i> from  <i>mc/cmds-to-run-for-all</i>
 and add it to  <i>mc/cmds-to-run-once</i>. Invoke  <i>m-x eval-buffer</i> to reset the values and you're good to go.
</p>


 <div id="org8c43de4" class="figure">
 <p> <img src="../images/emacs-swiper-and-multiple-cursors/swipermc.gif" alt="swipermc.gif" width="75%" height="75%"></img></p>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/emacs-swiper-and-multiple-cursors</link>
  <guid isPermaLink="false">http://xenodium.com/emacs-swiper-and-multiple-cursors</guid>
  <pubDate>Thu, 10 Oct 2019 00:00:00 +0100</pubDate>
</item>
<item>
  <title>Spam blacklisting with Emacs org babel</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-spam-blacklisting-with-emacs-org-babel" class="outline-2">
 <h2 id="spam-blacklisting-with-emacs-org-babel"> <span class="timestamp-wrapper"> <span class="timestamp">08 October 2019</span></span> Spam blacklisting with Emacs org babel</h2>
 <div class="outline-text-2" id="text-spam-blacklisting-with-emacs-org-babel">
 <p>
Some email provider accept regular expressions to blacklist additional spam. My blacklist is long and tedious to update, but hey… Emacs org babel can simplify things here.
</p>

 <p>
It's way easier to maintain a blacklist (with no regex) using an org table.
</p>
</div>

 <div id="outline-container-org40446d0" class="outline-3">
 <h3 id="org40446d0">Blacklist</h3>
 <div class="outline-text-3" id="text-org40446d0">
 <div class="org-src-container">
 <pre class="src src-org">#+name: spam-entries
| .spammy                |
| dodgyfella@hotmail.com |
| henryzeespammer.com    |
| yumspam.com            |
</pre>
</div>

 <p>
and subsequently use org babel (elisp snippet) to generate the regex.
</p>
</div>
</div>

 <div id="outline-container-org80e85e0" class="outline-3">
 <h3 id="org80e85e0">Regex gen</h3>
 <div class="outline-text-3" id="text-org80e85e0">
 <div class="org-src-container">
 <pre class="src src-org">#+begin_src emacs-lisp :var rows=spam-entries
  (require 'dash)
  (require 's)

  (concat "^"
          (s-join "|"
                  (mapcar (lambda (entry)
                            (setq entry (regexp-quote
                                         (s-trim entry)))
                            (assert (s-present? entry))
                            (cond
                             ;; Blacklist email address: joe@spammer.spammy
                             ((s-contains-p "@" entry)
                              (format "(%s)" entry))
                             ;; Blacklist top-level domain: .spammy
                             ((s-starts-with-p "\\." entry)
                              (format "([^.]*%s)" entry))
                             ;; Blacklist domain: @spammer.spammy
                             (t
                              (format "(.*@%s)" entry))))
                          (-sort
                           'string<
                           (-map (lambda (row)
                                   (nth 0 row))
                                 rows))))
          "$")

#+end_src

#+RESULTS:
: ^([^.]*\.spammy)|(dodgyfella@hotmail\.com)|(.*@henryzeespammer\.com)|(.*@yumspam\.com)$
</pre>
</div>

 <p>
UPDATE: Tweaked elisp and regex (but not animation) also found John Bokma's post:  <a href="http://johnbokma.com/blog/2019/05/13/blacklisting-domains-with-postfix.html">Blacklisting domains with Postfix</a>.
</p>


 <div id="org1d3aff9" class="figure">
 <p> <img src="../images/spam-blacklisting-with-emacs-org-babel/blacklist.png" alt="blacklist.png" width="75%" height="75%"></img></p>
</div>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/spam-blacklisting-with-emacs-org-babel</link>
  <guid isPermaLink="false">http://xenodium.com/spam-blacklisting-with-emacs-org-babel</guid>
  <pubDate>Tue, 08 Oct 2019 00:00:00 +0100</pubDate>
</item>
<item>
  <title>Rewriting dates with Emacs multiple cursors</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-rewriting-dates-with-emacs-multiple-cursors" class="outline-2">
 <h2 id="rewriting-dates-with-emacs-multiple-cursors"> <span class="timestamp-wrapper"> <span class="timestamp">06 October 2019</span></span> Rewriting dates with Emacs multiple cursors</h2>
 <div class="outline-text-2" id="text-rewriting-dates-with-emacs-multiple-cursors">
 <p>
Needed to rewrite the date format in a couple of csv columns. Emacs multiple cursors helps here, but needed a function to parse and reformat the dates themselves.
</p>

 <p>
I can likely reformat dates using the built-in  <i>parse-time-string</i> and  <i>format-time-string</i> functions, but hey why not give the  <a href="https://github.com/alphapapa/ts.el">ts.el</a> library a try…
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">ar/region-to-timestamp</span> ()
   <span style="color: #183691;">"Convert date like \"29 Apr 2019\" to \"2019-04-29\"."</span>
  (<span style="color: #a71d5d;">interactive</span>)
  (<span style="color: #a71d5d;">let</span> ((date (ts-parse (buffer-substring
                         (region-beginning)
                         (region-end)))))
    (delete-region (region-beginning)
                   (region-end))
    (insert (ts-format  <span style="color: #183691;">"%Y-%m-%d"</span> date))))
</pre>
</div>

 <p>
Bound the new function to a temporary keybinding, so I can invoke from multiple cursors:
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">bind-key</span>  <span style="color: #183691;">"M-q"</span> #'ar/region-to-timestamp)
</pre>
</div>

 <p>
and voilà!
</p>


 <div id="org6c96799" class="figure">
 <p> <img src="../images/rewriting-dates-with-emacs-multiple-cursors/ts.gif" alt="ts.gif" width="40%" height="40%"></img></p>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/rewriting-dates-with-emacs-multiple-cursors</link>
  <guid isPermaLink="false">http://xenodium.com/rewriting-dates-with-emacs-multiple-cursors</guid>
  <pubDate>Sun, 06 Oct 2019 00:00:00 +0100</pubDate>
</item>
<item>
  <title>Show/hide Emacs dired details in style</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-showhide-emacs-dired-details-in-style" class="outline-2">
 <h2 id="showhide-emacs-dired-details-in-style"> <span class="timestamp-wrapper"> <span class="timestamp">05 October 2019</span></span> Show/hide Emacs dired details in style</h2>
 <div class="outline-text-2" id="text-showhide-emacs-dired-details-in-style">
 <p>
Emacs  <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Dired.html">dired</a> is a powerful directory browser/editor. By default, it shows lots of handy file and directory details.
</p>


 <div id="org97fd7ed" class="figure">
 <p> <img src="../images/showhide-emacs-dired-details-in-style/dired.png" alt="dired.png" width="75%" height="75%"></img></p>
</div>

 <p>
I typically prefer hiding file and directory details until I need them. The built-in  <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Misc-Dired-Features.html">dired-hide-details-mode</a> makes this easy with the "(" key toggle. Coupled with  <a href="https://twitter.com/sanityinc">Steve Purcell</a>'s  <a href="https://github.com/purcell/diredfl">diredfl</a> (for coloring), it strikes a great user experience.
</p>


 <div id="orga5c67e6" class="figure">
 <p> <img src="../images/showhide-emacs-dired-details-in-style/diredfl.gif" alt="diredfl.gif" width="75%" height="75%"></img></p>
</div>

 <p>
With a short snippet, you can also show/hide dired details in style:
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">use-package</span>  <span style="color: #0086b3;">dired</span>
   <span style="color: #a71d5d;">:hook</span> (dired-mode . dired-hide-details-mode)
   <span style="color: #a71d5d;">:config</span>
   <span style="color: #969896;">;; </span> <span style="color: #969896;">Colourful columns.</span>
  (<span style="color: #a71d5d;">use-package</span>  <span style="color: #0086b3;">diredfl</span>
     <span style="color: #a71d5d;">:ensure</span> t
     <span style="color: #a71d5d;">:config</span>
    (diredfl-global-mode 1)))
</pre>
</div>

 <p>
 <b>UPDATE:</b> Thanks to  <a href="https://twitter.com/dmartincy">Daniel Martín</a>, who  <a href="https://twitter.com/dmartincy/status/1180512330288975872">pointed me</a> to  <a href="https://github.com/clemera/dired-git-info">dired-git-info</a>. This package adds git logs to dired file and directory details.
</p>


 <div id="org9e83b2d" class="figure">
 <p> <img src="../images/showhide-emacs-dired-details-in-style/dired-git-info.gif" alt="dired-git-info.gif" width="90%" height="90%"></img></p>
</div>

 <p>
Binding  <i>dired-git-info-mode</i> to ")" is a nice complement to  <i>dired-hide-details-mode</i>'s "(" binding.
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">use-package</span>  <span style="color: #0086b3;">dired-git-info</span>
     <span style="color: #a71d5d;">:ensure</span> t
     <span style="color: #a71d5d;">:bind</span> (<span style="color: #a71d5d;">:map</span> dired-mode-map
                (<span style="color: #183691;">")"</span> . dired-git-info-mode)))
</pre>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/showhide-emacs-dired-details-in-style</link>
  <guid isPermaLink="false">http://xenodium.com/showhide-emacs-dired-details-in-style</guid>
  <pubDate>Sat, 05 Oct 2019 00:00:00 +0100</pubDate>
</item>
<item>
  <title>Speeding up Emacs tramp via ControlMaster</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-speeding-up-emacs-tramp-via-controlmaster" class="outline-2">
 <h2 id="speeding-up-emacs-tramp-via-controlmaster"> <span class="timestamp-wrapper"> <span class="timestamp">01 September 2019</span></span> Speeding up Emacs tramp via ControlMaster</h2>
 <div class="outline-text-2" id="text-speeding-up-emacs-tramp-via-controlmaster">
 <p>
Via  <a href="https://gist.github.com/ralt/a36288cd748ce185b26237e6b85b27bb">Florian Margaine's Eshell config</a>, I discovered ssh's  <a href="https://man.openbsd.org/ssh_config#ControlMaster">ControlMaster</a>. It enables sharing multiple sessions over a single network connection. This has the benefit of speeding up Emacs TRAMP.
</p>

 <p>
In your ~/.ssh/config add:
</p>

 <div class="org-src-container">
 <pre class="src src-fundamental">Host *
    ControlPath ~/.ssh/master-%h:%p
    ControlMaster auto
    ControlPersist 10m
</pre>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/speeding-up-emacs-tramp-via-controlmaster</link>
  <guid isPermaLink="false">http://xenodium.com/speeding-up-emacs-tramp-via-controlmaster</guid>
  <pubDate>Sun, 01 Sep 2019 00:00:00 +0100</pubDate>
</item>
<item>
  <title>gnu global, ctags, and Emacs setup</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-gnu-global-ctags-and-emacs-setup" class="outline-2">
 <h2 id="gnu-global-ctags-and-emacs-setup"> <span class="timestamp-wrapper"> <span class="timestamp">04 June 2019</span></span> gnu global, ctags, and Emacs setup</h2>
 <div class="outline-text-2" id="text-gnu-global-ctags-and-emacs-setup">
</div>

 <div id="outline-container-org74a4d74" class="outline-3">
 <h3 id="org74a4d74">Universal ctags (newer)</h3>
 <div class="outline-text-3" id="text-org74a4d74">
 <p>
I'm now using universal  <a href="https://ctags.io/">ctags</a>, as recommended by  <a href="https://github.com/redguardtoo/counsel-etags">counsel-etags</a>.
</p>

 <p>
From universal ctag's  <a href="https://docs.ctags.io/en/latest/osx.html">Building on Mac OS</a>:
</p>

 <div class="org-src-container">
 <pre class="src src-sh">brew tap universal-ctags/universal-ctags
brew install --HEAD universal-ctags
</pre>
</div>

 <p>
.ctags
</p>

 <div class="org-src-container">
 <pre class="src src-fundamental">--langdef=swift
--langmap=swift:+.swift

--kinddef-swift=v,variable,variables
--kinddef-swift=f,function,functions
--kinddef-swift=s,struct,structs
--kinddef-swift=c,class,classes
--kinddef-swift=p,protocol,protocols
--kinddef-swift=e,enum,enums
--kinddef-swift=t,typealias,typealiases

--regex-swift=/(var|let)[ \t]+([^:=]+).*$/\2/v/
--regex-swift=/func[ \t]+([^\(\)]+)\([^\(\)]*\)/\1/f/
--regex-swift=/struct[ \t]+([^:\{]+).*$/\1/s/
--regex-swift=/class[ \t]+([^:\{]+).*$/\1/c/
--regex-swift=/protocol[ \t]+([^:\{]+).*$/\1/p/
--regex-swift=/enum[ \t]+([^:\{]+).*$/\1/e/
--regex-swift=/(typealias)[ \t]+([^:=]+).*$/\2/v/
</pre>
</div>
</div>
</div>

 <div id="outline-container-org2bb9f19" class="outline-3">
 <h3 id="org2bb9f19">Exuberant ctags (older/buggy?)</h3>
 <div class="outline-text-3" id="text-org2bb9f19">
 <p>
Install gnu global (ensure homebrew uses –with-exuberant-ctags flag).
</p>

 <div class="org-src-container">
 <pre class="src src-sh">brew install global
brew install ctags
pip install pygments
</pre>
</div>

 <p>
.ctags
</p>

 <div class="org-src-container">
 <pre class="src src-fundamental">--langdef=swift
--langmap=swift:.swift
--regex-swift=/[[:<:]]class[[:>:]][[:space:]]+([[:alnum:]_]+)/\1/c,class/
--regex-swift=/[[:<:]]enum[[:>:]][[:space:]]+([[:alnum:]_]+)/\1/e,enum/
--regex-swift=/[[:<:]]func[[:>:]][[:space:]]+([[:alnum:]_]+)/\1/f,function/
--regex-swift=/[[:<:]]protocol[[:>:]][[:space:]]+([[:alnum:]_]+)/\1/P,protocol/
--regex-swift=/[[:<:]]struct[[:>:]][[:space:]]+([[:alnum:]_]+)/\1/s,struct/
--regex-swift=/[[:<:]]typealias[[:>:]][[:space:]]+([[:alnum:]_]+)/\1/t,typealias/
</pre>
</div>

 <p>
.globalrc
</p>

 <div class="org-src-container">
 <pre class="src src-fundamental">default:\
    :tc=pygments:

ctags:\
    :tc=exuberant-ctags:

exuberant-ctags|plugin-example|setting to use Exuberant Ctags plug-in parser:\
    :tc=common:\
    :ctagscom=ctags:\
    :ctagslib=$libdir/gtags/exuberant-ctags.la:\
    :langmap=Swift\:.swift:\
    :gtags_parser=Swift\:$ctagslib:

pygments:\
    :tc=pygments-parser:

pygments-parser|Pygments plug-in parser:\
    :langmap=Swift\:.swift:\
    :gtags_parser=Swift\:$pygmentslib:\
    :langmap=Common-Lisp\:.cl.lisp.el:\
    :gtags_parser=Common-Lisp\:$pygmentslib:\
    :langmap=Python\:.py.pyw.sc.tac.sage:\
    :gtags_parser=Python\:$pygmentslib:\
    :langmap=Ruby\:.rb.rbw.rake.gemspec.rbx.duby:\
    :gtags_parser=Ruby\:$pygmentslib:\
    :langmap=Objective-C++\:.mm.hh:\
    :gtags_parser=Objective-C++\:$pygmentslib:\
    :langmap=Objective-C\:.m.h:\
    :gtags_parser=Objective-C\:$pygmentslib:\
    :ctagscom=ctags:\
    :pygmentslib=$libdir/gtags/pygments-parser.la:\
    :tc=common:

common:\
    :skip=build/,HTML/,HTML.pub/,tags,TAGS,ID,y.tab.c,y.tab.h,gtags.files,cscope.files,cscope.out,cscope.po.out,cscope.in.out,SCCS/,RCS/,CVS/,CVSROOT/,{arch}/,autom4te.cache/,*.orig,*.rej,*.bak,*~,#*#,*.swp,*.tmp,*_flymake.*,*_flymake,*.o,*.a,*.so,*.lo,*.zip,*.gz,*.bz2,*.xz,*.lzh,*.Z,*.tgz,*.min.js,*min.css:
</pre>
</div>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">use-package</span>  <span style="color: #0086b3;">counsel-gtags</span>
   <span style="color: #a71d5d;">:ensure</span> t
   <span style="color: #a71d5d;">:commands</span> counsel-gtags-mode
   <span style="color: #a71d5d;">:bind</span> (<span style="color: #a71d5d;">:map</span>
         counsel-gtags-mode-map
         (<span style="color: #183691;">"M-."</span> . counsel-gtags-dwim)
         (<span style="color: #183691;">"M-,"</span> . counsel-gtags-go-backward))
   <span style="color: #a71d5d;">:hook</span> ((swift-mode . counsel-gtags-mode)
         (swift-mode . ggtags-mode)))

 <span style="color: #969896;">;; </span> <span style="color: #969896;">Needs .ctags and .globalrc in $HOME.</span>
(<span style="color: #a71d5d;">use-package</span>  <span style="color: #0086b3;">ggtags</span>
   <span style="color: #a71d5d;">:ensure</span> t
   <span style="color: #a71d5d;">:commands</span> ggtags-mode)
</pre>
</div>

 <p>
Helpful references
</p>

 <p>
 <a href="https://github.com/osdakira/dotfiles/blob/395640726d669674496a8035458840f0742e54a5/gtags.conf">https://github.com/osdakira/dotfiles/blob/395640726d669674496a8035458840f0742e54a5/gtags.conf</a>
 <a href="https://github.com/NicholasTD07/dotfiles/blob/e66eb05b408fbcb0d47994fc8a0a79bf438b9e03/.globalrc">https://github.com/NicholasTD07/dotfiles/blob/e66eb05b408fbcb0d47994fc8a0a79bf438b9e03/.globalrc</a>
 <a href="https://github.com/NicholasTD07/dotfiles/blob/master/.ctags">https://github.com/NicholasTD07/dotfiles/blob/master/.ctags</a>
 <a href="https://github.com/sg2002/gtags.conf-tutorial/blob/master/gtags.conf">https://github.com/sg2002/gtags.conf-tutorial/blob/master/gtags.conf</a>
 <a href="https://aozsky.com/swift/swift_ide">https://aozsky.com/swift/swift_ide</a>
</p>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/gnu-global-ctags-and-emacs-setup</link>
  <guid isPermaLink="false">http://xenodium.com/gnu-global-ctags-and-emacs-setup</guid>
  <pubDate>Tue, 04 Jun 2019 00:00:00 +0100</pubDate>
</item>
<item>
  <title>mu4e as macOS mail composer</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-mu4e-as-macos-mail-composer" class="outline-2">
 <h2 id="mu4e-as-macos-mail-composer"> <span class="timestamp-wrapper"> <span class="timestamp">29 May 2019</span></span> mu4e as macOS mail composer</h2>
 <div class="outline-text-2" id="text-mu4e-as-macos-mail-composer">
 <p>
Via  <a href="https://www.reddit.com/r/emacs/comments/6lh2pp/using_emacs_as_default_mailer_on_macos">Using Emacs as Default Mailer on macOS</a>, a tiny script to handle mailto: links.
</p>

 <p>
From  <i>/Script Editor</i>, save following script as Application (MailOnEmacs.app). From Mail.app,  <i>Preferences -> Default email reader</i> and chosse MailOnEmacs.app.
</p>

 <pre class="example">
on open location myurl
        tell application "Emacs" to activate
        set text item delimiters to {":"}
        do shell script "/path/to/emacsclient --eval '(browse-url-mail \"" & myurl & "\")'"
end open location
</pre>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/mu4e-as-macos-mail-composer</link>
  <guid isPermaLink="false">http://xenodium.com/mu4e-as-macos-mail-composer</guid>
  <pubDate>Wed, 29 May 2019 00:00:00 +0100</pubDate>
</item>
<item>
  <title>Plotting ledger reports in org</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-plotting-ledger-reports-in-org" class="outline-2">
 <h2 id="plotting-ledger-reports-in-org"> <span class="timestamp-wrapper"> <span class="timestamp">24 May 2019</span></span> Plotting ledger reports in org</h2>
 <div class="outline-text-2" id="text-plotting-ledger-reports-in-org">
</div>
 <div id="outline-container-org1247c00" class="outline-3">
 <h3 id="org1247c00">My ledger file</h3>
 <div class="outline-text-3" id="text-org1247c00">
 <p>
Save path to  <a href="plotting-ledger-reports-in-org/my.ledger">my.ledger</a> in  <i>ledger-file</i> block.
</p>

 <div class="org-src-container">
 <pre class="src src-org">#+name: ledger-file
#+begin_src emacs-lisp
"my.ledger"
#+end_src
</pre>
</div>
</div>
</div>

 <div id="outline-container-org855bd43" class="outline-3">
 <h3 id="org855bd43">gnuplot terminal (png or qt)</h3>
 <div class="outline-text-3" id="text-org855bd43">
 <p>
Select gnuplot terminal. Using png to output images, but qt is handy too for interactive chart inspection.
</p>

 <div class="org-src-container">
 <pre class="src src-org">Use png for inline or qt for interactive
#+name: gnuplot-term
#+begin_src emacs-lisp
"png"
#+end_src
</pre>
</div>
</div>
</div>

 <div id="outline-container-org1aa1994" class="outline-3">
 <h3 id="org1aa1994">Monthly Income and Expenses</h3>
 <div class="outline-text-3" id="text-org1aa1994">
 <p>
Generate income report.
</p>

 <div class="org-src-container">
 <pre class="src src-org">#+name: income-data
#+begin_src bash :results table :noweb yes
  ledger -f <<<ledger-file>>> -j reg ^Income -M --collapse --plot-amount-format="%(format_date(date, \"%Y-%m-%d\")) %(abs(quantity(scrub(display_amount))))\n"
#+end_src
</pre>
</div>

 <p>
Generate expenses report.
</p>

 <div class="org-src-container">
 <pre class="src src-org">#+name: expenses-data
#+begin_src sh :results table :noweb yes
  ledger -f <<<ledger-file>>> -j reg ^Expenses -M --collapse
#+end_src
</pre>
</div>

 <p>
Plot income vs expenses.
</p>

 <div class="org-src-container">
 <pre class="src src-gnuplot"> <span style="color: #0086b3;">set</span> terminal myterm size 3500,1500
 <span style="color: #0086b3;">set</span> style data histogram
 <span style="color: #0086b3;">set</span> style histogram clustered gap 1
 <span style="color: #0086b3;">set</span> style fill transparent solid 0.4 noborder
 <span style="color: #0086b3;">set</span> xtics nomirror scale 0 center
 <span style="color: #0086b3;">set</span> ytics add (<span style="color: #183691;">''</span> 0) scale 0
 <span style="color: #0086b3;">set</span> border 1
 <span style="color: #0086b3;">set</span> grid ytics
 <span style="color: #0086b3;">set</span>  <span style="color: #0086b3;">title</span>  <span style="color: #183691;">"Monthly Income and Expenses"</span>
 <span style="color: #0086b3;">set</span> ylabel  <span style="color: #183691;">"Amount"</span>
 <span style="color: #a71d5d;">plot</span> income  <span style="color: #0086b3;">using</span> 2:xticlabels(<span style="color: #795da3;">strftime</span>(<span style="color: #183691;">'%b'</span>,  <span style="color: #795da3;">strptime</span>(<span style="color: #183691;">'%Y-%m-%d'</span>, strcol(1))))  <span style="color: #0086b3;">title</span>  <span style="color: #183691;">"Income"</span>  <span style="color: #0086b3;">linecolor</span> rgb  <span style="color: #183691;">"light-salmon"</span>,  <span style="color: #183691;">''</span>  <span style="color: #0086b3;">using</span> 0:2:2  <span style="color: #0086b3;">with</span>  <span style="color: #795da3;">labels</span> left font  <span style="color: #183691;">"Courier,8"</span> rotate by 15 offset -4,0.5 textcolor  <span style="color: #0086b3;">linestyle</span> 0  <span style="color: #0086b3;">notitle</span>, expenses  <span style="color: #0086b3;">using</span> 2  <span style="color: #0086b3;">title</span>  <span style="color: #183691;">"Expenses"</span>  <span style="color: #0086b3;">linecolor</span> rgb  <span style="color: #183691;">"light-green"</span>,  <span style="color: #183691;">''</span>  <span style="color: #0086b3;">using</span> 0:2:2  <span style="color: #0086b3;">with</span>  <span style="color: #795da3;">labels</span> left font  <span style="color: #183691;">"Courier,8"</span> rotate by 15 offset 0,0.5 textcolor  <span style="color: #0086b3;">linestyle</span> 0  <span style="color: #0086b3;">notitle</span>
</pre>
</div>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/plotting-ledger-reports-in-org</link>
  <guid isPermaLink="false">http://xenodium.com/plotting-ledger-reports-in-org</guid>
  <pubDate>Fri, 24 May 2019 00:00:00 +0100</pubDate>
</item>
<item>
  <title>Batch file renaming with counsel, find-dired, and wdired</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-batch-renaming-with-counsel-find-dired-and-wdired" class="outline-2">
 <h2 id="batch-renaming-with-counsel-find-dired-and-wdired"> <span class="timestamp-wrapper"> <span class="timestamp">04 May 2019</span></span> Batch file renaming with counsel, find-dired, and wdired</h2>
 <div class="outline-text-2" id="text-batch-renaming-with-counsel-find-dired-and-wdired">
 <p>
The first time I saw  <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Wdired.html">wdired</a> in action, it blew my mind. wdired makes  <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Dired.html#Dired">dired</a> (directory editor) buffers writeable, so you can edit them like any other Emacs buffer. You can subsequently use all your favorite file-editing tricks to rename files (amongst other things). You can see it in action at the end of  <a href="http://emacsrocks.com/e16.html">Emacs Rocks episode 16</a>.
</p>

 <p>
When combining  <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Dired-and-Find.html">find-dired</a> with wdired, one can easily find matching files and quickly batch rename them using something like  <a href="https://github.com/magnars/multiple-cursors.el">multiple cursors</a> or  <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Keyboard-Macros.html">keyboard macros</a>. I've been a fan of the  <i>find-dired</i> ->  <i>dired-toggle-read-only</i> ->  <i>mc/mark-all-like-this</i> workflow for quite some time, but I always wished I could adjust  <i>find-dired</i> queries a little quicker by getting immediate feedback.
</p>

 <p>
Completion frontends like  <a href="https://github.com/abo-abo/swiper">ivy</a> and  <a href="https://github.com/emacs-helm/helm">helm</a> are perfect for getting this kind of immediate feedback. Peeking into ivy's  <a href="https://github.com/abo-abo/swiper/blob/master/counsel.el">counsel source</a>, I borrowed some ideas to glue counsel-style narrowing on a find command, which I can easily translate to a writeable dired buffer for all that joyful-mutiple-cursor-editing experience.
</p>


 <div id="org8afa4d0" class="figure">
 <p> <img src="../images/batch-renaming-with-counsel-find-dired-and-wdired/counsel-find.gif" alt="counsel-find.gif" width="50%" height="50%"></img></p>
</div>

 <p>
The code for  <i>ar/counsel-find</i> is a little rough but can be found at  <a href="https://github.com/xenodium/dotsies/blob/master/emacs/ar/ar-counsel-find.el">here</a>.
</p>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/batch-renaming-with-counsel-find-dired-and-wdired</link>
  <guid isPermaLink="false">http://xenodium.com/batch-renaming-with-counsel-find-dired-and-wdired</guid>
  <pubDate>Sat, 04 May 2019 00:00:00 +0100</pubDate>
</item>
<item>
  <title>Mark region, indent, restore location</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-mark-region-indent-restore-location" class="outline-2">
 <h2 id="mark-region-indent-restore-location"> <span class="timestamp-wrapper"> <span class="timestamp">16 April 2019</span></span> Mark region, indent, restore location</h2>
 <div class="outline-text-2" id="text-mark-region-indent-restore-location">
 <p>
When I'm not using an automatic code formatter (ie. clang-format, gofmt, etc.), I often find myself using Emacs region marking commands like  <i>mark-defun</i>,  <i>er/expand-region</i>, and  <i>mark-whole-buffer</i> prior to pressing <tab>, which is bound to  <i>indent-for-tab-command</i>.
</p>

 <p>
This is all working as expected: the selection gets indented and the point is left in the current location.
</p>

 <p>
Say we have the following snippet we'd like to indent.
</p>


 <div id="org11769a5" class="figure">
 <p> <img src="../images/mark-region-indent-restore-location/before.png" alt="before.png"></img></p>
</div>

 <p>
Mark region with C-M-h (mark-defun)
</p>


 <div id="org0a0f801" class="figure">
 <p> <img src="../images/mark-region-indent-restore-location/selection.png" alt="selection.png"></img></p>
</div>

 <p>
Indent with <tab> (indent-for-tab-command)
</p>


 <div id="org0e5e1c0" class="figure">
 <p> <img src="../images/mark-region-indent-restore-location/basic-indent.png" alt="basic-indent.png"></img></p>
</div>

 <p>
We're done. The selected function is now indented as expected.
</p>

 <p>
But… I always wished the point returned to the location prior to initiating the region-marking command, in this case  <i>mark-defun</i>.
</p>

 <p>
In short, I wish the point had ended in the following location.
</p>


 <div id="orgc8319ce" class="figure">
 <p> <img src="../images/mark-region-indent-restore-location/smart-indent.png" alt="smart-indent.png"></img></p>
</div>

 <p>
I'm not aware of an existing package that helps with this, so here's a tiny minor mode (divert-mode) to help with restoring point location after indenting a region. The  <i>diverted-events</i> variable can be used to track specific region selecting commands and associate breadcrumb functions to replace the point location as needed.
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp"> <span style="color: #969896;">;;; </span> <span style="color: #969896;">diverted.el --- Identify temporary diversions and automatically</span>
 <span style="color: #969896;">;;; </span> <span style="color: #969896;">move point back to original location.</span>

 <span style="color: #969896;">;;; </span> <span style="color: #969896;">Commentary:</span>
 <span style="color: #969896;">;; </span> <span style="color: #969896;">Automatically come back to a original location prior to diversion.</span>


 <span style="color: #969896;">;;; </span> <span style="color: #969896;">Code:</span>

(<span style="color: #a71d5d;">require</span> ' <span style="color: #0086b3;">cl</span>)
(<span style="color: #a71d5d;">require</span> ' <span style="color: #0086b3;">seq</span>)

(defstruct diverted-event
  from  <span style="color: #969896;">;; </span> <span style="color: #969896;">Initial function (eg. 'mark-defun)</span>
  to  <span style="color: #969896;">;; </span> <span style="color: #969896;">Follow-up function (eg. 'indent-for-tab-command)</span>
  breadcrumb)

(<span style="color: #a71d5d;">defvar</span>  <span style="color: #333333;">diverted-events</span>
  (list
   (make-diverted-event  <span style="color: #a71d5d;">:from</span> 'mark-defun
                         <span style="color: #a71d5d;">:to</span> 'indent-for-tab-command
                         <span style="color: #a71d5d;">:breadcrumb</span> (<span style="color: #a71d5d;">lambda</span> ()
                                      (diverted--pop-to-mark-command 2)))
   (make-diverted-event  <span style="color: #a71d5d;">:from</span> 'er/expand-region
                         <span style="color: #a71d5d;">:to</span> 'indent-for-tab-command
                         <span style="color: #a71d5d;">:breadcrumb</span> (<span style="color: #a71d5d;">lambda</span> ()
                                      (diverted--pop-to-mark-command 2)))
   (make-diverted-event  <span style="color: #a71d5d;">:from</span> 'mark-whole-buffer
                         <span style="color: #a71d5d;">:to</span> 'indent-for-tab-command
                         <span style="color: #a71d5d;">:breadcrumb</span> (<span style="color: #a71d5d;">lambda</span> ()
                                      (diverted--pop-to-mark-command 2))))
   <span style="color: #183691;">"Diversion events to look for."</span>)

(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">diverted--resolve</span> (symbol)
   <span style="color: #183691;">"Resolve SYMBOL to event."</span>
  (seq-find (<span style="color: #a71d5d;">lambda</span> (event)
              (equal symbol
                     (diverted-event-from event)))
            diverted-events))

(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">diverted--pop-to-mark-command</span> (n)
   <span style="color: #183691;">"Invoke `</span> <span style="color: #0086b3;">pop-to-mark-command</span> <span style="color: #183691;">' N number of times."</span>
  (<span style="color: #a71d5d;">dotimes</span> (_ n)
    (pop-to-mark-command)))

(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">diverted--advice-fun</span> (orig-fun  <span style="color: #0086b3;">&rest</span> r)
   <span style="color: #183691;">"Get back to location prior to diversion using advice around `</span> <span style="color: #0086b3;">diverted-events</span> <span style="color: #183691;">' (ORIG-FUN and R)."</span>
  (<span style="color: #a71d5d;">let</span> ((recognized-event (diverted--resolve last-command)))
    (<span style="color: #a71d5d;">when</span> recognized-event
      (funcall (diverted-event-breadcrumb recognized-event))
      (message  <span style="color: #183691;">"Breadcrumbed prior to `</span> <span style="color: #0086b3;">%s</span> <span style="color: #183691;">'"</span>
               (diverted-event-from recognized-event)))))

(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">diverted-mode-enable</span> ()
   <span style="color: #183691;">"Enable diverted-mode."</span>
  (<span style="color: #a71d5d;">interactive</span>)
  (diverted-mode-disable)
  (mapc (<span style="color: #a71d5d;">lambda</span> (event)
          (advice-add (diverted-event-to event)
                       <span style="color: #a71d5d;">:after</span>
                      'diverted--advice-fun)
          (message  <span style="color: #183691;">"Looking for `</span> <span style="color: #0086b3;">%s</span> <span style="color: #183691;">' after `</span> <span style="color: #0086b3;">%s</span> <span style="color: #183691;">' diversions."</span>
                   (diverted-event-to event)
                   (diverted-event-from event)))
        diverted-events)
  (message  <span style="color: #183691;">"diverted-mode enabled"</span>))

(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">diverted-mode-disable</span> ()
   <span style="color: #183691;">"Disable diverted-mode."</span>
  (<span style="color: #a71d5d;">interactive</span>)
  (mapc (<span style="color: #a71d5d;">lambda</span> (event)
          (advice-remove (diverted-event-to event)
                         'diverted--advice-fun)
          (message  <span style="color: #183691;">"Ignoring `</span> <span style="color: #0086b3;">%s</span> <span style="color: #183691;">' after `</span> <span style="color: #0086b3;">%s</span> <span style="color: #183691;">' diversions."</span>
                   (diverted-event-to event)
                   (diverted-event-from event)))
        diverted-events)
  (message  <span style="color: #183691;">"diverted-mode disabled"</span>))

(<span style="color: #a71d5d;">define-minor-mode</span>  <span style="color: #795da3;">diverted-mode</span>
   <span style="color: #183691;">"Detect temporary diversions and restore point location."</span>
   <span style="color: #a71d5d;">:init-value</span> nil
   <span style="color: #a71d5d;">:lighter</span>  <span style="color: #183691;">" diverted"</span>
   <span style="color: #a71d5d;">:global</span> t
  (<span style="color: #a71d5d;">if</span> diverted-mode
      (diverted-mode-enable)
    (diverted-mode-disable)))

(<span style="color: #a71d5d;">provide</span> ' <span style="color: #0086b3;">diverted</span>)

 <span style="color: #969896;">;;; </span> <span style="color: #969896;">diverted.el ends here</span>
</pre>
</div>

 <p>
UPDATE(2019-04-20): Source  <a href="https://github.com/xenodium/dotsies/blob/master/emacs/ar/diverted.el">on github</a>.
</p>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/mark-region-indent-restore-location</link>
  <guid isPermaLink="false">http://xenodium.com/mark-region-indent-restore-location</guid>
  <pubDate>Tue, 16 Apr 2019 00:00:00 +0100</pubDate>
</item>
<item>
  <title>Compound interest calculations</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-compound-interest-calculations" class="outline-2">
 <h2 id="compound-interest-calculations"> <span class="timestamp-wrapper"> <span class="timestamp">14 April 2019</span></span> Compound interest calculations</h2>
 <div class="outline-text-2" id="text-compound-interest-calculations">
 <p>
Saving  <a href="https://twitter.com/tonytechwriter">Tony Bedford's</a> python snippets for  <a href="https://coffeeandcode.neocities.org/financial-calculations-1.html">calculating compound interest</a>. Really just an excuse to fire up Emacs and play with org babel.
</p>

 <div class="org-src-container">
 <pre class="src src-python"> <span style="color: #333333;">t</span> = 20  <span style="color: #969896;"># </span> <span style="color: #969896;">years</span>
 <span style="color: #333333;">r</span> = 0.07  <span style="color: #969896;"># </span> <span style="color: #969896;">rate</span>
 <span style="color: #333333;">pv</span> = 200000.00  <span style="color: #969896;"># </span> <span style="color: #969896;">present value</span>
 <span style="color: #333333;">fv</span> = pv * (1+r)**t  <span style="color: #969896;"># </span> <span style="color: #969896;">future value</span>
 <span style="color: #a71d5d;">print</span>(<span style="color: #183691;">"Pension of %.2f at %d%% will be worth %.2f in %d years"</span> % (pv, 100 * r, fv, t))
</pre>
</div>

 <pre class="example">
Pension of 200000.00 at 7% will be worth 773936.89 in 20 years
</pre>



 <div class="org-src-container">
 <pre class="src src-python"> <span style="color: #333333;">t</span> = 20  <span style="color: #969896;"># </span> <span style="color: #969896;">years</span>
 <span style="color: #333333;">r</span> = 0.07  <span style="color: #969896;"># </span> <span style="color: #969896;">rate</span>
 <span style="color: #333333;">pv</span> = 200000.00  <span style="color: #969896;"># </span> <span style="color: #969896;">present value</span>
 <span style="color: #333333;">n</span> = 1
 <span style="color: #333333;">fv</span> = pv * (1 + r/n)**(n*t)  <span style="color: #969896;"># </span> <span style="color: #969896;">future value</span>
 <span style="color: #a71d5d;">print</span> (<span style="color: #183691;">"First formula calculates final value to: %.2f"</span> % fv)

 <span style="color: #333333;">fv</span> = pv * (1 + r/n)**(n*1)  <span style="color: #969896;"># </span> <span style="color: #969896;">year 1 only</span>
 <span style="color: #a71d5d;">print</span>(<span style="color: #183691;">"Year %d: %.2f"</span> % (1, fv))
 <span style="color: #a71d5d;">for</span> i  <span style="color: #a71d5d;">in</span>  <span style="color: #a71d5d;">range</span> (2, t+1):
     <span style="color: #333333;">fv</span> = fv * (1 + r/n)**(n*1)  <span style="color: #969896;"># </span> <span style="color: #969896;">Calculate one year at a time</span>
     <span style="color: #a71d5d;">print</span>(<span style="color: #183691;">"Year %d: %.2f"</span> % (i, fv))
</pre>
</div>

 <pre class="example" id="org1895b34">
First formula calculates final value to: 773936.89
Year 1: 214000.00
Year 2: 228980.00
Year 3: 245008.60
Year 4: 262159.20
Year 5: 280510.35
Year 6: 300146.07
Year 7: 321156.30
Year 8: 343637.24
Year 9: 367691.84
Year 10: 393430.27
Year 11: 420970.39
Year 12: 450438.32
Year 13: 481969.00
Year 14: 515706.83
Year 15: 551806.31
Year 16: 590432.75
Year 17: 631763.04
Year 18: 675986.46
Year 19: 723305.51
Year 20: 773936.89
</pre>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/compound-interest-calculations</link>
  <guid isPermaLink="false">http://xenodium.com/compound-interest-calculations</guid>
  <pubDate>Sun, 14 Apr 2019 00:00:00 +0100</pubDate>
</item>
<item>
  <title>Building mu/mu4e on macOS</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-building-mumu4e-on-macos" class="outline-2">
 <h2 id="building-mumu4e-on-macos"> <span class="timestamp-wrapper"> <span class="timestamp">11 April 2019</span></span> Building mu/mu4e on macOS</h2>
 <div class="outline-text-2" id="text-building-mumu4e-on-macos">
 <p>
I've now built Emacs's  <a href="http://www.djcbsoftware.nl/code/mu/">mu/mu4e</a> releases a handful of times on macOS. These are the steps, so I don't forget.
</p>
</div>

 <div id="outline-container-orge38e433" class="outline-3">
 <h3 id="orge38e433">1.4</h3>
 <div class="outline-text-3" id="text-orge38e433">
 <p>
Updated steps for building  <a href="http://www.djcbsoftware.nl/code/mu/">mu/mu4e</a> 1.4:
</p>

 <div class="org-src-container">
 <pre class="src src-sh">brew install gmime
 <span style="color: #a71d5d;">export</span>  <span style="color: #333333;">CPPFLAGS</span>= <span style="color: #183691;">"-I$(brew --prefix)/Cellar/gmime/3.2.3/include -I$(brew --prefix)/include"</span>
 <span style="color: #a71d5d;">export</span>  <span style="color: #333333;">LDFLAGS</span>=-L$(brew --prefix)/Cellar/gmime/3.2.3/lib
 <span style="color: #a71d5d;">export</span>  <span style="color: #333333;">PKG_CONFIG_PATH</span>=$(brew --prefix)/Cellar/gmime/3.2.3/lib/pkgconfig:$(brew --prefix)/opt/libffi/lib/pkgconfig
 <span style="color: #a71d5d;">export</span>  <span style="color: #333333;">EMACS</span>=/Applications/Emacs.app/Contents/MacOS/Emacs
./configure --prefix=$(~/local)
make install
</pre>
</div>
</div>
</div>
 <div id="outline-container-orga0a31be" class="outline-3">
 <h3 id="orga0a31be">1.2</h3>
 <div class="outline-text-3" id="text-orga0a31be">
 <p>
Recently built Emacs's  <a href="http://www.djcbsoftware.nl/code/mu/">mu/mu4e</a> 1.2.0 from source on macOS. Steps:
</p>

 <div class="org-src-container">
 <pre class="src src-sh">brew install gmime
 <span style="color: #a71d5d;">export</span>  <span style="color: #333333;">CPPFLAGS</span>=-I$(brew --prefix)/Cellar/gmime/3.2.3/include
 <span style="color: #a71d5d;">export</span>  <span style="color: #333333;">LDFLAGS</span>=-L$(brew --prefix)/Cellar/gmime/3.2.3/lib
 <span style="color: #a71d5d;">export</span>  <span style="color: #333333;">PKG_CONFIG_PATH</span>=$(brew --prefix)/Cellar/gmime/3.2.3/lib/pkgconfig:$(brew --prefix)/opt/libffi/lib/pkgconfig
./configure --prefix=$(~/local) --disable-dependency-tracking
make install
</pre>
</div>

 <p>
UPDATE(2019-04-16): Another approach at Irreal's  <a href="https://irreal.org/blog/?p=7976">Mu/mu4e 1.2 Available</a>.
</p>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/building-mumu4e-on-macos</link>
  <guid isPermaLink="false">http://xenodium.com/building-mumu4e-on-macos</guid>
  <pubDate>Thu, 11 Apr 2019 00:00:00 +0100</pubDate>
</item>
<item>
  <title>Inserting numbers with Emacs multiple cursors</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-inserting-numbers-with-emacs-multiple-cursors" class="outline-2">
 <h2 id="inserting-numbers-with-emacs-multiple-cursors"> <span class="timestamp-wrapper"> <span class="timestamp">17 March 2019</span></span> Inserting numbers with Emacs multiple cursors</h2>
 <div class="outline-text-2" id="text-inserting-numbers-with-emacs-multiple-cursors">
 <p>
TIL that multiple cursor's  <i>mc/insert-numbers</i> enables you to quickly enter increasing numbers for each cursor. I have  <i>mc/insert-numbers</i> bound to # in  <i>region-bindings-mode-map.</i> By default, sequence starts at 0, but invoking  <i>mc/insert-numbers</i> with prefix enables you to quickly change that.
</p>

 <p>
Came in handy when numbering an org table:
</p>


 <div id="org51f5af9" class="figure">
 <p> <img src="../images/inserting-numbers-with-emacs-multiple-cursors/mc-number.gif" alt="mc-number.gif"></img></p>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/inserting-numbers-with-emacs-multiple-cursors</link>
  <guid isPermaLink="false">http://xenodium.com/inserting-numbers-with-emacs-multiple-cursors</guid>
  <pubDate>Sun, 17 Mar 2019 00:00:00 +0000</pubDate>
</item>
<item>
  <title>No Emacs frame refocus on macOS</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-no-emacs-frame-refocus-on-macos" class="outline-2">
 <h2 id="no-emacs-frame-refocus-on-macos"> <span class="timestamp-wrapper"> <span class="timestamp">16 March 2019</span></span> No Emacs frame refocus on macOS</h2>
 <div class="outline-text-2" id="text-no-emacs-frame-refocus-on-macos">
 <p>
This one's been bugging me for a while. On macOS, Emacs automatically focuses (raises) other frames when one is closed.
</p>


 <div id="orge7ed7e6" class="figure">
 <p> <img src="../images/no-emacs-frame-refocus-on-macos/before.gif" alt="before.gif" width="50%" height="50%"></img></p>
</div>

 <p>
This has the unfortunate side-effect that I could be moved from one macOS desktop/space to another when closing an Emacs frame.
</p>

 <p>
Finally managed do something about it. Since I install Emacs on macOS via homebrew, a  <del> <a href="https://github.com/xenodium/homebrew-emacs-plus/commit/79a8e98b222fa262746f6db620ddd1fdb151ece9">small patch on emacs-plus recipe</a></del>  <a href="https://github.com/d12frosted/homebrew-emacs-plus/pull/122/commits/71bf246930bfedb337bcc0e21587ccbbb917e5bf">small patch on emacs-plus recipe</a> did the job.
</p>


 <div id="org994b651" class="figure">
 <p> <img src="../images/no-emacs-frame-refocus-on-macos/after.gif" alt="after.gif" width="50%" height="50%"></img></p>
</div>

 <p>
UPDATE: Pull request  <a href="https://github.com/d12frosted/homebrew-emacs-plus/pull/122">merged</a> in d12frosted/emacs-plus.
</p>

 <p>
The  <del> <a href="https://github.com/xenodium/homebrew-emacs-plus/commit/79a8e98b222fa262746f6db620ddd1fdb151ece9">patch</a></del>  <a href="https://github.com/d12frosted/homebrew-emacs-plus/pull/122/commits/71bf246930bfedb337bcc0e21587ccbbb917e5bf">patch</a> has been merged into  <a href="https://github.com/d12frosted/homebrew-emacs-plus">d12frosted/homebrew-emacs-plus</a>. To use:
</p>

 <div class="org-src-container">
 <pre class="src src-sh">brew tap d12frosted/emacs-plus
brew install emacs-plus --without-spacemacs-icon --with-no-frame-refocus
</pre>
</div>

 <p>
Balance restored.
</p>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/no-emacs-frame-refocus-on-macos</link>
  <guid isPermaLink="false">http://xenodium.com/no-emacs-frame-refocus-on-macos</guid>
  <pubDate>Sat, 16 Mar 2019 00:00:00 +0000</pubDate>
</item>
<item>
  <title>Language server protocol (LSP) bookmarks</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-language-server-protocol-lsp-bookmarks" class="outline-2">
 <h2 id="language-server-protocol-lsp-bookmarks"> <span class="timestamp-wrapper"> <span class="timestamp">12 March 2019</span></span> Language server protocol (LSP) bookmarks</h2>
 <div class="outline-text-2" id="text-language-server-protocol-lsp-bookmarks">
 <span class="modified-timestamp">   <em>updated: 14 April 2019  </em></span>
 <ul class="org-ul"> <li> <a href="https://github.com/eclipse/eclipse.jdt.ls">Eclipse JDT Language Server</a>.</li>
 <li> <a href="https://github.com/emacs-lsp/lsp-java">Emacs Java IDE using Eclipse JDT Language Server</a>.</li>
 <li> <a href="https://github.com/vscode-langservers/vscode-html-languageserver-bin">vscode-html-languageserver extracted from VSCode</a>.</li>
</ul></div>
</div>
</div>]]></description>
  <link>http://xenodium.com/language-server-protocol-lsp-bookmarks</link>
  <guid isPermaLink="false">http://xenodium.com/language-server-protocol-lsp-bookmarks</guid>
  <pubDate>Tue, 12 Mar 2019 00:00:00 +0000</pubDate>
</item>
<item>
  <title>Copy from desktop to mobile via QR code</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-copy-from-desktop-to-mobile-via-qr-code" class="outline-2">
 <h2 id="copy-from-desktop-to-mobile-via-qr-code"> <span class="timestamp-wrapper"> <span class="timestamp">24 February 2019</span></span> Copy from desktop to mobile via QR code</h2>
 <div class="outline-text-2" id="text-copy-from-desktop-to-mobile-via-qr-code">
 <p>
 <a href="https://twitter.com/marcin_mbork">Marcin Borkowski</a> has a nice  <a href="http://mbork.pl/2019-02-24_Transferring_strings_to_a_phone_via_QR_codes">tip</a> to quickly copy text or URLs between desktop and mobile using QR codes.
</p>

 <p>
Wrote a little elisp to do a similar thing using the clipboard via Emacs:
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">ar/misc-clipboard-to-qr</span> ()
   <span style="color: #183691;">"Convert text in clipboard to qrcode and display within Emacs."</span>
  (<span style="color: #a71d5d;">interactive</span>)
  (<span style="color: #a71d5d;">let</span> ((temp-file (concat (temporary-file-directory)  <span style="color: #183691;">"qr-code"</span>)))
    (<span style="color: #a71d5d;">if</span> (eq 0 (shell-command (format  <span style="color: #183691;">"qrencode -s10 -o %s %s"</span>
                                     temp-file
                                     (shell-quote-argument (current-kill 0)))
                              <span style="color: #183691;">"*qrencode*"</span>))
        (switch-to-buffer (find-file-noselect temp-file t))
      (<span style="color: #333333;">error</span>  <span style="color: #183691;">"Error: Could not create qrcode, check *qrencode* buffer"</span>))))
</pre>
</div>


 <div id="org2123084" class="figure">
 <p> <img src="../images/copy-from-desktop-to-mobile-via-qr-code/qrencode.gif" alt="qrencode.gif" width="75%" height="75%"></img></p>
</div>

 <p>
ps.  <a href="https://feeding.cloud.geek.nz/posts/encoding-wifi-access-point-passwords-qr-code/">Encoding your WiFi access point password into a QR code</a> shows how to encode WiFi access point passwords:
</p>

 <div class="org-src-container">
 <pre class="src src-sh">qrencode -o wifi.png  <span style="color: #183691;">"WIFI:T:WPA;S:<SSID>;P:<PASSWORD>;;"</span>
</pre>
</div>

 <p>
More comprehensively:
</p>

 <div class="org-src-container">
 <pre class="src src-sh"> <span style="color: #333333;">SSID</span>=SSID_GOES_HERE
pwgen -s 63 > 00wifi.txt
qrencode -o 00wifi.png  <span style="color: #183691;">"WIFI:T:WPA;S:${SSID};P:$(cat 00wifi.txt);;"</span>
</pre>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/copy-from-desktop-to-mobile-via-qr-code</link>
  <guid isPermaLink="false">http://xenodium.com/copy-from-desktop-to-mobile-via-qr-code</guid>
  <pubDate>Sun, 24 Feb 2019 00:00:00 +0000</pubDate>
</item>
<item>
  <title>Swapping Emacs ivy collections/sources</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-swapping-emacs-ivy-collectionssources" class="outline-2">
 <h2 id="swapping-emacs-ivy-collectionssources"> <span class="timestamp-wrapper"> <span class="timestamp">13 January 2019</span></span> Swapping Emacs ivy collections/sources</h2>
 <div class="outline-text-2" id="text-swapping-emacs-ivy-collectionssources">
 <p>
 <a href="https://github.com/abo-abo/swiper">Ivy</a> is great. I've been meaning to figure out a way to swap sources while running ivy. This would enable me to cycle through different sources using the existing search parameters.
</p>

 <p>
At first look,  <i>'ivy-set-sources</i> seemed like the right choice, but it's used during setup to agregate sources. Subsequent  <i>'ivy-set-sources</i> calls are ignored during an  <i>'ivy-read</i> session.
</p>

 <p>
There's an ivy  <a href="https://github.com/abo-abo/swiper/issues/606">feature request</a> over at github with a similar goal in mind. Although the feature is not yet supported, there's a handy suggestion to use  <i>'ivy-quit-and-run</i> to quit the current command and run a different one.
</p>

 <p>
With  <i>'ivy-quit-and-run</i> in mind, we can write our  <i>'ar/ivy-read</i> function to take a list of sources and add a little logic to cycle through them using a keybiding, in my case <left> and <right>.
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp"> <span style="color: #969896;">;;; </span> <span style="color: #969896;">-*- lexical-binding: t; -*-</span>

(<span style="color: #a71d5d;">require</span> ' <span style="color: #0086b3;">cl</span>)

(<span style="color: #a71d5d;">cl-defstruct</span>
    ar/ivy-source
  prompt
  collection
  action)

(<span style="color: #a71d5d;">cl-defun</span>  <span style="color: #795da3;">ar/ivy-read</span> (sources  <span style="color: #0086b3;">&key</span> index initial-input)
  (<span style="color: #a71d5d;">let</span> ((kmap (make-sparse-keymap))
        (source))
    (<span style="color: #333333;">cl-assert</span> (> (length sources) 0))
    (<span style="color: #a71d5d;">when</span> (null index) (<span style="color: #a71d5d;">setq</span> index 0))
    (<span style="color: #a71d5d;">setq</span> source (nth index sources))
    (define-key kmap (kbd  <span style="color: #183691;">"<right>"</span>) (<span style="color: #a71d5d;">lambda</span> ()
                                       (<span style="color: #a71d5d;">interactive</span>)
                                       (ivy-quit-and-run (ar/ivy-read sources
                                                                       <span style="color: #a71d5d;">:index</span> (<span style="color: #a71d5d;">if</span> (>= (1+ index)
                                                                                     (length sources))
                                                                                 0
                                                                               (1+ index))
                                                                       <span style="color: #a71d5d;">:initial-input</span> ivy-text))))
    (define-key kmap (kbd  <span style="color: #183691;">"<left>"</span>) (<span style="color: #a71d5d;">lambda</span> ()
                                      (<span style="color: #a71d5d;">interactive</span>)
                                      (ivy-quit-and-run (ar/ivy-read sources
                                                                      <span style="color: #a71d5d;">:index</span> (<span style="color: #a71d5d;">if</span> (< (1- index)
                                                                                   0)
                                                                                (1- (length sources))
                                                                              (1- index))
                                                                      <span style="color: #a71d5d;">:initial-input</span> ivy-text))))
    (ivy-read (ar/ivy-source-prompt source)
              (ar/ivy-source-collection source)
               <span style="color: #a71d5d;">:action</span> (ar/ivy-source-action source)
               <span style="color: #a71d5d;">:initial-input</span> initial-input
               <span style="color: #a71d5d;">:keymap</span> kmap)))

(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">ar/ivy-food-menu</span> ()
  (<span style="color: #a71d5d;">interactive</span>)
  (ar/ivy-read (list
                (make-ar/ivy-source  <span style="color: #a71d5d;">:prompt</span>  <span style="color: #183691;">"Pizza: "</span>
                                     <span style="color: #a71d5d;">:action</span> (<span style="color: #a71d5d;">lambda</span> (selection)
                                              (message  <span style="color: #183691;">"Selected pizza: %s"</span> selection))
                                     <span style="color: #a71d5d;">:collection</span> (<span style="color: #a71d5d;">lambda</span> (str pred v)
                                                  (list  <span style="color: #183691;">"Bianca Neve - Mozzarella, Ricotta, Sausage, Extra Virgin Olive Oil, Basil"</span>
                                                         <span style="color: #183691;">"Boscaiola - Mozzarella, Tomato Sauce, Sausage, Mushrooms, Extra Virgin Olive Oil, Basil"</span>
                                                         <span style="color: #183691;">"Calzone - Ricotta, Ham, Mushrooms, Artichokes. Topped with Tomato Sauce and Extra Virgin Olive Oil."</span>
                                                         <span style="color: #183691;">"Capricciosa - Mozzarella,Tomato Sauce, Prosciutto Cotto Ham, Mushrooms, Artichokes, Extra Virgin Olive Oil."</span>
                                                         <span style="color: #183691;">"Carciofi - Mozzarella, Tomato Sauce, Artichokes, Extra Virgin Olive Oil, Basil."</span>
                                                         <span style="color: #183691;">"Diavola - Mozzarella, Tomato Sauce, Spicy Salami, Extra Virgin Olive Oil, Basil."</span>
                                                         <span style="color: #183691;">"Funghi - Mozzarella, Tomato Sauce, Mushrooms, Extra Virgin Olive Oil, Basil."</span>)))
                (make-ar/ivy-source  <span style="color: #a71d5d;">:prompt</span>  <span style="color: #183691;">"Tacos: "</span>
                                     <span style="color: #a71d5d;">:action</span> (<span style="color: #a71d5d;">lambda</span> (selection)
                                              (message  <span style="color: #183691;">"Selected taco: %s"</span> selection))
                                     <span style="color: #a71d5d;">:collection</span> (<span style="color: #a71d5d;">lambda</span> (str pred v)
                                                  (list  <span style="color: #183691;">"Pork pibil - Slow cooked in citrus & spices, with pink pickled onions."</span>
                                                         <span style="color: #183691;">"Grilled chicken & avocado - Ancho rub, guacamole & green tomatillo salsa."</span>
                                                         <span style="color: #183691;">"Plantain - Sweet & spicy chipotle & crumbled feta."</span>
                                                         <span style="color: #183691;">"Poblano pepper - Caramelised onions, corn & cashew nut mole."</span>
                                                         <span style="color: #183691;">"Buttermilk chicken - Served crispy fried with habanero & white onion relish & spiced mayo."</span>
                                                         <span style="color: #183691;">"Sustainable battered cod - mSC certified cod with shredded slaw, chipotle mayo & pickled cucumber."</span>
                                                         <span style="color: #183691;">"Chargrilled steak - Avocado & chipotle salsas."</span>)))
                (make-ar/ivy-source  <span style="color: #a71d5d;">:prompt</span>  <span style="color: #183691;">"Burgers: "</span>
                                     <span style="color: #a71d5d;">:action</span> (<span style="color: #a71d5d;">lambda</span> (selection)
                                              (message  <span style="color: #183691;">"Selected burger: %s"</span> selection))
                                     <span style="color: #a71d5d;">:collection</span> (<span style="color: #a71d5d;">lambda</span> (str pred v)
                                                  (list  <span style="color: #183691;">"The cheese - Aged beef patty with american cheese, gherkins, ketchup & mustard."</span>
                                                         <span style="color: #183691;">"The yeah! - Aged beef patty with american cheese, gherkins, yeah! sauce & salad."</span>
                                                         <span style="color: #183691;">"The yfc or hot yfc - Crispy chicken with lime or chipotle crema, lettuce, pickled onion & slaw."</span>
                                                         <span style="color: #183691;">"The rancher - Grilled chicken with ranch dressing, bacon & salad."</span>
                                                         <span style="color: #183691;">"The bubbah - Aged beef patty with smokey aubergine, pickled red cabbage, lettuce, roast toms, onions & cheddar."</span>
                                                         <span style="color: #183691;">"The bulgogi - Sesame-spiced beef patty with miso mayo, pickled radish, onion, cucumber & spring onion."</span>
                                                         <span style="color: #183691;">"The summer - Aged beef patty with sriracha mayo, lettuce, onion, toms, avo, cheddar & bacon."</span>))))))
</pre>
</div>


 <div id="orgf2ad841" class="figure">
 <p> <img src="../images/swapping-emacs-ivy-collectionssources/ivy-cycle-sources.gif" alt="ivy-cycle-sources.gif" width="75%" height="75%"></img></p>
</div>

 <p>
ps. Menu data from  <a href="https://starofkings.co.uk/food-and-drink/">Star of Kings</a>,  <a href="https://www.wahaca.co.uk/menu/food/">Wahaca</a>, and  <a href="https://pizzarino.us/menu">Pizzarino</a>.
</p>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/swapping-emacs-ivy-collectionssources</link>
  <guid isPermaLink="false">http://xenodium.com/swapping-emacs-ivy-collectionssources</guid>
  <pubDate>Sun, 13 Jan 2019 00:00:00 +0000</pubDate>
</item>
<item>
  <title>Emacs on macOS Mojave</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-emacs-on-macos-mojave" class="outline-2">
 <h2 id="emacs-on-macos-mojave"> <span class="timestamp-wrapper"> <span class="timestamp">12 January 2019</span></span> Emacs on macOS Mojave</h2>
 <div class="outline-text-2" id="text-emacs-on-macos-mojave">
 <p>
Had issues running Emacs on macOS Mojave (blank unresponsive screen). Bleeding edge emacs-plus did the job:
</p>

 <div class="org-src-container">
 <pre class="src src-sh">brew tap d12frosted/emacs-plus
brew install emacs-plus --without-spacemacs-icon --HEAD
</pre>
</div>

 <div class="org-src-container">
 <pre class="src src-sh">brew info emacs-plus
</pre>
</div>

 <pre class="example" id="org033df10">
d12frosted/emacs-plus/emacs-plus: stable 26.1, devel 26.1-rc1, HEAD
GNU Emacs text editor
https://www.gnu.org/software/emacs/
/Users/some-user/homebrew/Cellar/emacs-plus/HEAD-8fe21b0 (3,985 files, 123.0MB) *
  Built from source on 2019-01-12 at 09:26:09 with: --without-spacemacs-icon
From: https://github.com/d12frosted/homebrew-emacs-plus/blob/master/Formula/emacs-plus.rb
==> Dependencies
Build: pkg-config
Recommended: little-cms2, gnutls, librsvg, imagemagick@6
Optional: dbus, mailutils
==> Requirements
Optional: x11
==> Options
--with-ctags
	Don't remove the ctags executable that Emacs provides
--with-dbus
	Build with dbus support
--with-emacs-icons-project-EmacsIcon1
	Using Emacs icon project EmacsIcon1
--with-emacs-icons-project-EmacsIcon2
	Using Emacs icon project EmacsIcon2
--with-emacs-icons-project-EmacsIcon3
	Using Emacs icon project EmacsIcon3
--with-emacs-icons-project-EmacsIcon4
	Using Emacs icon project EmacsIcon4
--with-emacs-icons-project-EmacsIcon5
	Using Emacs icon project EmacsIcon5
--with-emacs-icons-project-EmacsIcon6
	Using Emacs icon project EmacsIcon6
--with-emacs-icons-project-EmacsIcon7
	Using Emacs icon project EmacsIcon7
--with-emacs-icons-project-EmacsIcon8
	Using Emacs icon project EmacsIcon8
--with-emacs-icons-project-EmacsIcon9
	Using Emacs icon project EmacsIcon9
--with-emacs-icons-project-emacs-card-blue-deep
	Using Emacs icon project emacs-card-blue-deep
--with-emacs-icons-project-emacs-card-british-racing-green
	Using Emacs icon project emacs-card-british-racing-green
--with-emacs-icons-project-emacs-card-carmine
	Using Emacs icon project emacs-card-carmine
--with-emacs-icons-project-emacs-card-green
	Using Emacs icon project emacs-card-green
--with-mailutils
	Build with mailutils support
--with-modern-icon
	Using a modern style Emacs icon by @tpanum
--with-no-titlebar
	Experimental: build without titlebar
--with-pdumper
	Experimental: build from pdumper branch and with
         increasedremembered_data size (--HEAD only)
--with-x11
	Experimental: build with x11 support
--with-xwidgets
	Experimental: build with xwidgets support (--HEAD only)
--without-cocoa
	Build a non-Cocoa version of Emacs
--without-gnutls
	Build without gnutls support
--without-imagemagick@6
	Build without imagemagick@6 support
--without-librsvg
	Build without librsvg support
--without-libxml2
	Build without libxml2 support
--without-little-cms2
	Build without little-cms2 support
--without-modules
	Build without dynamic modules support
--without-multicolor-fonts
	Build without a patch that enables multicolor font support
--without-spacemacs-icon
	Build without Spacemacs icon by Nasser Alshammari
--devel
	Install development version 26.1-rc1
--HEAD
	Install HEAD version
==> Caveats
Emacs.app was installed to:
  /Users/some-user/homebrew/Cellar/emacs-plus/26.1

To link the application to default Homebrew App location:
  brew linkapps
or:
  ln -s /Users/some-user/homebrew/Cellar/emacs-plus/26.1/Emacs.app /Applications

--natural-title-bar option was removed from this formula, in order to
  duplicate its effect add following line to your init.el file
  (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
  (add-to-list 'default-frame-alist '(ns-appearance . dark))
or:
  (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
  (add-to-list 'default-frame-alist '(ns-appearance . light))

If you are using macOS Mojave, please note that most of the experimental
options are forbidden on Mojave. This is temporary decision.


To have launchd start d12frosted/emacs-plus/emacs-plus now and restart at login:
  brew services start d12frosted/emacs-plus/emacs-plus
Or, if you don't want/need a background service you can just run:
  emacs
</pre>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/emacs-on-macos-mojave</link>
  <guid isPermaLink="false">http://xenodium.com/emacs-on-macos-mojave</guid>
  <pubDate>Sat, 12 Jan 2019 00:00:00 +0000</pubDate>
</item>
<item>
  <title>Podcast bookmarks</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-podcast-bookmarks" class="outline-2">
 <h2 id="podcast-bookmarks"> <span class="timestamp-wrapper"> <span class="timestamp">12 January 2019</span></span> Podcast bookmarks</h2>
 <div class="outline-text-2" id="text-podcast-bookmarks">
 <span class="modified-timestamp">   <em>updated: 12 January 2019  </em></span>
 <ul class="org-ul"> <li> <a href="https://destinationlinux.org/">Destination Linux. A conversational podcast by people who love running Linux.</a>.</li>
 <li> <a href="https://emacscast.org/">EmacsCast</a>.</li>
 <li> <a href="http://faif.us/">Free as in Freedom</a>.</li>
 <li> <a href="http://gnuworldorder.info/">Gnu World Order</a>.</li>
 <li> <a href="https://latenightlinux.com/">Late Night Linux</a>.</li>
 <li> <a href="https://librelounge.org/">Libre Lounge</a>.</li>
 <li> <a href="https://linuxlads.com/">Linux Lads Podcast</a>.</li>
 <li> <a href="https://www.thebinarytimes.net/">The Binary Times Podcast (Linux/free software/hardware/culture)</a>.</li>
 <li> <a href="http://ubuntupodcast.org/">Ubuntu Podcast</a>.</li>
</ul></div>
</div>
</div>]]></description>
  <link>http://xenodium.com/podcast-bookmarks</link>
  <guid isPermaLink="false">http://xenodium.com/podcast-bookmarks</guid>
  <pubDate>Sat, 12 Jan 2019 00:00:00 +0000</pubDate>
</item>
<item>
  <title>Trying out Emacs pdf tools</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-trying-out-emacs-pdf-tools" class="outline-2">
 <h2 id="trying-out-emacs-pdf-tools"> <span class="timestamp-wrapper"> <span class="timestamp">06 January 2019</span></span> Trying out Emacs pdf tools</h2>
 <div class="outline-text-2" id="text-trying-out-emacs-pdf-tools">
 <p>
Late to the party, giving  <a href="https://github.com/politza/pdf-tools">pdf-tools</a> a try.
</p>

 <p>
The  <a href="https://github.com/politza/pdf-tools#compiling-on-os-x">macOS install instructions</a> have a prerequisite:
</p>

 <div class="org-src-container">
 <pre class="src src-sh">brew install poppler automake
</pre>
</div>

 <p>
Installed with:
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">use-package</span>  <span style="color: #0086b3;">pdf-tools</span>
   <span style="color: #a71d5d;">:ensure</span> t
   <span style="color: #a71d5d;">:mode</span> (<span style="color: #183691;">"\\.pdf\\'"</span> . pdf-view-mode)
   <span style="color: #a71d5d;">:config</span>
  (pdf-tools-install)
  (<span style="color: #a71d5d;">setq-default</span> pdf-view-display-size 'fit-page)
  (<span style="color: #a71d5d;">setq</span> pdf-annot-activate-created-annotations t))
</pre>
</div>


 <div id="org7ef53cf" class="figure">
 <p> <img src="../images/trying-out-emacs-pdf-tools/pdf-tools.png" alt="pdf-tools.png" width="75%" height="75%"></img></p>
</div>

 <p>
ps. (pdf-tools-install) may not find libffi on macOS. Try:
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(setenv  <span style="color: #183691;">"PKG_CONFIG_PATH"</span>
        (f-join
         (file-name-as-directory
          (nth 0
               (split-string
                (shell-command-to-string  <span style="color: #183691;">"brew --prefix"</span>))))
          <span style="color: #183691;">"Cellar"</span>  <span style="color: #183691;">"libffi"</span>  <span style="color: #183691;">"3.2.1"</span>  <span style="color: #183691;">"lib"</span>  <span style="color: #183691;">"pkgconfig"</span>))
</pre>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/trying-out-emacs-pdf-tools</link>
  <guid isPermaLink="false">http://xenodium.com/trying-out-emacs-pdf-tools</guid>
  <pubDate>Sun, 06 Jan 2019 00:00:00 +0000</pubDate>
</item>
<item>
  <title>Emailing pdfs to kindle from mu4e</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-emailing-pdfs-to-kindle-from-mu4e" class="outline-2">
 <h2 id="emailing-pdfs-to-kindle-from-mu4e"> <span class="timestamp-wrapper"> <span class="timestamp">25 December 2018</span></span> Emailing pdfs to kindle from mu4e</h2>
 <div class="outline-text-2" id="text-emailing-pdfs-to-kindle-from-mu4e">
 <p>
Wanted to send a pdf to my kindle for some holiday reading. You can easily do this by emailing the pdf to your kindle-bound email address.
</p>

 <p>
Now, I typically attach files when composing mu4e emails by using  <i>mml-attach-file</i>, which attaches the file using  <i><#part>…<#/part></i>. However, the Amazon service did not find the attached pdf, so no pdf was added to my Kindle.
</p>

 <p>
Fortunately, I found a handy  <a href="https://www.reddit.com/r/emacs/comments/97abs7/anyone_uses_mu4e_to_send_mobi_files_to_kindle">Reddit thread, leding me to a working solution</a>. Wrapping the part using  <i><#multipart type=mixed>…<#/multipart></i> did the job, using  <i>mml-insert-multipart</i>, followed by  <i>mml-attach-file</i>.
</p>

 <p>
Resulting attachment should look something like:
</p>

 <pre class="example" id="org2146877">
<#multipart type=mixed>
<#part type="application/pdf" filename="/path/to/file.pdf" disposition=attachment>
<#/part>
<#/multipart>
</pre>

 <p>
I should add a convenience elisp function for this, but that's for another time…
</p>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/emailing-pdfs-to-kindle-from-mu4e</link>
  <guid isPermaLink="false">http://xenodium.com/emailing-pdfs-to-kindle-from-mu4e</guid>
  <pubDate>Tue, 25 Dec 2018 00:00:00 +0000</pubDate>
</item>
<item>
  <title>DWIM ivy quit</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-dwim-ivy-quit" class="outline-2">
 <h2 id="dwim-ivy-quit"> <span class="timestamp-wrapper"> <span class="timestamp">08 December 2018</span></span> DWIM ivy quit</h2>
 <div class="outline-text-2" id="text-dwim-ivy-quit">
 <p>
"Do-what-I-mean" (DWIM) functions enable us to introduce new Emacs powers to existing workflows without incurring the typical cost of remembering multiple related functions or introducing yet another key binding. DWIM functions invoke other functions, based on current context.
</p>

 <p>
I wanted a small tweak in Ivy's  <i>`minibuffer-keyboard-quit'</i> invocation, commonly invoked via  <i>C-g</i> key binding:
</p>

 <ol class="org-ol"> <li>If we have text selected in minibuffer, deselect it.</li>
 <li>If we have any text in minibuffer, clear it.</li>
 <li>If no text in minibuffer, quit.</li>
</ol> <p>
Added  <i>`ar/ivy-keyboard-quit-dwim'</i> for this purpose. Binding it to C-g in  <i>ivy-minibuffer-map</i>:
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">use-package</span>  <span style="color: #0086b3;">ivy</span>
   <span style="color: #a71d5d;">:ensure</span> t
   <span style="color: #a71d5d;">:bind</span> (<span style="color: #a71d5d;">:map</span> ivy-minibuffer-map
              (<span style="color: #183691;">"C-g"</span> . ar/ivy-keyboard-quit-dwim))
   <span style="color: #a71d5d;">:config</span>
  (<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">ar/ivy-keyboard-quit-dwim</span> ()
     <span style="color: #183691;">"If region active, deactivate. If there's content, clear the minibuffer. Otherwise quit."</span>
    (<span style="color: #a71d5d;">interactive</span>)
    (<span style="color: #a71d5d;">cond</span> ((<span style="color: #a71d5d;">and</span> delete-selection-mode (region-active-p))
           (<span style="color: #a71d5d;">setq</span> deactivate-mark t))
          ((> (length ivy-text) 0)
           (delete-minibuffer-contents))
          (t
           (minibuffer-keyboard-quit)))))
</pre>
</div>


 <div id="orgf80270d" class="figure">
 <p> <img src="../images/dwim-ivy-quit/ivy-keybqoard-quit-dwim.gif" alt="ivy-keybqoard-quit-dwim.gif" width="75%" height="75%"></img></p>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/dwim-ivy-quit</link>
  <guid isPermaLink="false">http://xenodium.com/dwim-ivy-quit</guid>
  <pubDate>Sat, 08 Dec 2018 00:00:00 +0000</pubDate>
</item>
<item>
  <title>Diffing directories content size</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-diffing-directories-content-size" class="outline-2">
 <h2 id="diffing-directories-content-size"> <span class="timestamp-wrapper"> <span class="timestamp">05 December 2018</span></span> Diffing directories content size</h2>
 <div class="outline-text-2" id="text-diffing-directories-content-size">
 <p>
Needed to diff two directories, but only interested in file size changes. diff, find, sort, and stat seem to do the job:
</p>

 <div class="org-src-container">
 <pre class="src src-sh">diff <(find dir1 -type f -exec stat -f  <span style="color: #183691;">'%N %z'</span>  <span style="color: #183691;">'{}'</span>  <span style="color: #183691;">\;</span> | sort) <(find dir2 -type f -exec stat -f  <span style="color: #183691;">'%N %z'</span>  <span style="color: #183691;">'{}'</span>  <span style="color: #183691;">\;</span> | sort)
</pre>
</div>

 <pre class="example" id="org16f3d84">
1,3c1,2
< dir1/one.txt 14
< dir1/subdir/file.txt 5
< dir1/three.txt 7
---
> dir2/one.txt 19
> dir2/two.txt 0
</pre>

 <p>
 <i>Note: Using diff, find, sort, and stat on macOS.</i>
</p>
</div>

 <div id="outline-container-org33bbd73" class="outline-3">
 <h3 id="org33bbd73">Update 1</h3>
 <div class="outline-text-3" id="text-org33bbd73">
 <p>
I've since learned about mtree (thanks  <a href="https://twitter.com/romanzolotarev/status/1070249301815771137">Roman</a>!). A nice utility to add to the toolbox.
</p>

 <div class="org-src-container">
 <pre class="src src-sh">mtree -p emacs-25.1 -c -k size -d
</pre>
</div>

 <pre class="example" id="orgf5a1299">
#	   user: me
#	machine: my-machine
#	   tree: /path/to/emacs-25.1
#	   date: Wed Dec  5 22:21:07 2018
# .
/set type=dir
.               size=1152
# ./admin
admin           size=960
# ./admin/charsets
charsets        size=544
# ./admin/charsets/glibc
glibc           size=3392
# ./admin/charsets/glibc
..
# ./admin/charsets/mapfiles
mapfiles        size=640
# ./admin/charsets/mapfiles
..
</pre>
</div>
</div>

 <div id="outline-container-org7e578f0" class="outline-3">
 <h3 id="org7e578f0">Update 2</h3>
 <div class="outline-text-3" id="text-org7e578f0">
 <p>
I've added Emacs ediff to the mix:
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">require</span> ' <span style="color: #0086b3;">f</span>)

(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">ar/ediff-dir-content-size</span> ()
     <span style="color: #183691;">"Diff all subdirectories (sizes only) in two directories."</span>
    (<span style="color: #a71d5d;">interactive</span>)
    (<span style="color: #a71d5d;">let*</span> ((dir1-path (read-directory-name  <span style="color: #183691;">"Dir 1: "</span>))
           (dir2-path (read-directory-name  <span style="color: #183691;">"Dir 2: "</span>))
           (buf1 (get-buffer-create (format  <span style="color: #183691;">"*Dir 1 (%s)*"</span> (f-base dir1-path))))
           (buf2 (get-buffer-create (format  <span style="color: #183691;">"*Dir 2 (%s)*"</span> (f-base dir2-path)))))
      (<span style="color: #a71d5d;">with-current-buffer</span> buf1
        (erase-buffer))
      (<span style="color: #a71d5d;">with-current-buffer</span> buf2
        (erase-buffer))
      (shell-command (format  <span style="color: #183691;">"cd %s; find . -type d | sort | du -h"</span> dir1-path) buf1)
      (shell-command (format  <span style="color: #183691;">"cd %s; find . -type d | sort | du -h"</span> dir2-path) buf2)
      (ediff-buffers buf1 buf2)))
</pre>
</div>


 <div id="orga6a4e47" class="figure">
 <p> <img src="../images/diffing-directories-content-size/ediff-dir-content-size.png" alt="ediff-dir-content-size.png" width="75%" height="75%"></img></p>
</div>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/diffing-directories-content-size</link>
  <guid isPermaLink="false">http://xenodium.com/diffing-directories-content-size</guid>
  <pubDate>Wed, 05 Dec 2018 00:00:00 +0000</pubDate>
</item>
<item>
  <title>Swift nil-coalescing operator</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-swift-nil-coalescing-operator" class="outline-2">
 <h2 id="swift-nil-coalescing-operator"> <span class="timestamp-wrapper"> <span class="timestamp">02 December 2018</span></span> Swift nil-coalescing operator</h2>
 <div class="outline-text-2" id="text-swift-nil-coalescing-operator">
 <p>
 <a href="https://twitter.com/twostraws">Paul Hudson</a>, over at  <a href="https://www.hackingwithswift.com/">Hacking with Swift</a>, has written  <a href="https://www.hackingwithswift.com/articles/136/the-complete-guide-to-optionals-in-swift">The Complete Guide to Optionals in Swift</a>. One of the many highlights is the  <a href="https://docs.swift.org/swift-book/LanguageGuide/BasicOperators.html#ID72">nil-coalescing operator</a>. If you're a fan of the  <a href="https://en.wikipedia.org/wiki/Ternary_operation">C-like syntax in ternary operations</a>, you'd enjoy chaining with Swift's nil-coalescing operator:
</p>

 <div class="org-src-container">
 <pre class="src src-swift"> <span style="color: #a71d5d;">let</span> players = [  <span style="color: #183691;">"goose"</span>:  <span style="color: #183691;">"run!"</span> ]
 <span style="color: #a71d5d;">let</span> move = players[ <span style="color: #183691;">"duck1"</span>] ?? players[ <span style="color: #183691;">"duck2"</span>] ?? players[ <span style="color: #183691;">"duck3"</span>] ?? players[ <span style="color: #183691;">"goose"</span>]
 <span style="color: #a71d5d;">print</span>(<span style="color: #183691;">"\(</span> <span style="color: #a71d5d;">String</span>(describing: move) <span style="color: #183691;">)"</span>)
</pre>
</div>

 <pre class="example">
Optional("run!")
</pre>


 <p>
ps. Swift snippet run on Emacs  <a href="https://orgmode.org/worg/org-contrib/babel/intro.html">org babel's</a>  <a href="https://github.com/zweifisch/ob-swift">ob-swift</a>. See  <a href="../multiline-swift-strings">Multiline Swift strings</a> for details.
</p>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/swift-nil-coalescing-operator</link>
  <guid isPermaLink="false">http://xenodium.com/swift-nil-coalescing-operator</guid>
  <pubDate>Sun, 02 Dec 2018 00:00:00 +0000</pubDate>
</item>
<item>
  <title>Ocado vs Asda (org table)</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-ocado-vs-asda-org-table" class="outline-2">
 <h2 id="ocado-vs-asda-org-table"> <span class="timestamp-wrapper"> <span class="timestamp">01 December 2018</span></span> Ocado vs Asda (org table)</h2>
 <div class="outline-text-2" id="text-ocado-vs-asda-org-table">
 <p>
Someone handed me an  <a href="https://www.ocado.com">Ocado</a> shopping voucher for 30% off. Sounded promising, even for a one-off.
</p>

 <p>
With my  <a href="https://www.amazon.co.uk/Transforming-Relationship-Achieving-Financial-Independence/dp/0143115766/">Money or Your Life</a> hat on, I took a closer look for potential savings. Results were disappointing, when compared to alternatives like Asda.
</p>

 <p>
Here's a table comparing Ocado (30% off) and Asda (no discount):
</p>

 <table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"> <colgroup> <col class="org-left"></col> <col class="org-right"></col> <col class="org-right"></col></colgroup> <thead> <tr> <th scope="col" class="org-left"> </th>
 <th scope="col" class="org-right">Ocado</th>
 <th scope="col" class="org-right">Asda</th>
</tr></thead> <tbody> <tr> <td class="org-left"> <a href="https://www.ocado.com/webshop/product/Coconut-Merchant-Organic-Raw-Extra-Virgin-Coconut-Oil/372144011">Coconut Merchant Organic Raw Extra Virgin Coconut Oil 500ml</a></td>
 <td class="org-right">6.74</td>
 <td class="org-right"> </td>
</tr> <tr> <td class="org-left"> <a href="https://groceries.asda.com/product/oils/ktc-coconut-hair-oil/910000033621">KTC 100% pure coconut oil</a></td>
 <td class="org-right"> </td>
 <td class="org-right">2.00</td>
</tr> <tr> <td class="org-left"> <a href="https://www.ocado.com/webshop/product/Waitrose-Love-Life-Popcorn-Maize/25130011">Waitrose Love Life Popcorn Maize 510g</a></td>
 <td class="org-right">1.50</td>
 <td class="org-right"> </td>
</tr> <tr> <td class="org-left"> <a href="https://groceries.asda.com/promotion/2-for-pound-1.50/ls89129">Cypressa Popping Corn 2x500g = 1000g</a></td>
 <td class="org-right"> </td>
 <td class="org-right">1.50</td>
</tr> <tr> <td class="org-left"> <a href="https://www.ocado.com/webshop/product/Whitworths-Ground-Almonds/275684011">Whitworths Ground Almonds</a></td>
 <td class="org-right">2.00</td>
 <td class="org-right"> </td>
</tr> <tr> <td class="org-left"> <a href="https://groceries.asda.com/product/baking-nuts-seeds-fruit/whitworths-ground-almonds/910000797981">Whitworths Ground Almonds</a></td>
 <td class="org-right"> </td>
 <td class="org-right">1.60</td>
</tr></tbody> <tbody> <tr> <td class="org-left">Total</td>
 <td class="org-right"> </td>
 <td class="org-right">£ 5.10</td>
</tr></tbody> <tbody> <tr> <td class="org-left">-30%</td>
 <td class="org-right">£ 7.17</td>
 <td class="org-right"> </td>
</tr></tbody></table> <p>
On the upside, Ocado has plenty of items I cannot find at Asda. May be a good opportunity to get these items at a discount.
</p>
</div>

 <div id="outline-container-org78e2569" class="outline-3">
 <h3 id="org78e2569">Emacs org tables</h3>
 <div class="outline-text-3" id="text-org78e2569">
 <p>
Small tables are the perfect use-case for Emacs  <a href="https://orgmode.org/manual/Tables.html">org-mode tables</a>. Been a while since I used one, so great timing for a little refresh.
</p>

 <p>
Here's the org source for the table above (prior to exporting to HTML):
</p>

 <div class="org-src-container">
 <pre class="src src-org">|-------------------------------------------------------------+--------+--------|
|                                                             |  Ocado |   Asda |
|-------------------------------------------------------------+--------+--------|
| [[https://www.ocado.com/webshop/product/Coconut-Merchant-Organic-Raw-Extra-Virgin-Coconut-Oil/372144011][Coconut Merchant Organic Raw Extra Virgin Coconut Oil 500ml]] |   6.74 |        |
| [[https://groceries.asda.com/product/oils/ktc-coconut-hair-oil/910000033621][KTC 100% pure coconut oil]]                                   |        |   2.00 |
| [[https://www.ocado.com/webshop/product/Waitrose-Love-Life-Popcorn-Maize/25130011][Waitrose Love Life Popcorn Maize 510g]]                       |   1.50 |        |
| [[https://groceries.asda.com/promotion/2-for-pound-1.50/ls89129][Cypressa Popping Corn 2x500g = 1000g]]                        |        |   1.50 |
| [[https://www.ocado.com/webshop/product/Whitworths-Ground-Almonds/275684011][Whitworths Ground Almonds]]                                   |   2.00 |        |
| [[https://groceries.asda.com/product/baking-nuts-seeds-fruit/whitworths-ground-almonds/910000797981][Whitworths Ground Almonds]]                                   |        |   1.60 |
|-------------------------------------------------------------+--------+--------|
| Total                                                       |        | £ 5.10 |
|-------------------------------------------------------------+--------+--------|
| -30%                                                        | £ 7.17 |        |
|-------------------------------------------------------------+--------+--------|
#+TBLFM: @8$3=vsum(@2$3..@7$3);£ %.2f::@9$2=vsum(@2$2..@7$2) * 0.7;£ %.2f
</pre>
</div>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/ocado-vs-asda-org-table</link>
  <guid isPermaLink="false">http://xenodium.com/ocado-vs-asda-org-table</guid>
  <pubDate>Sat, 01 Dec 2018 00:00:00 +0000</pubDate>
</item>
<item>
  <title>Quickly swapping elfeed filters</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-quickly-swapping-elfeed-filters" class="outline-2">
 <h2 id="quickly-swapping-elfeed-filters"> <span class="timestamp-wrapper"> <span class="timestamp">17 November 2018</span></span> Quickly swapping elfeed filters</h2>
 <div class="outline-text-2" id="text-quickly-swapping-elfeed-filters">
 <p>
I seem to be more efficient in getting through rss feeds by individually browsing through related content. That is, I can get through all Emacs entries a lot faster if I look at Emacs content exclusively, instead of mixing with say BBC news.  <a href="https://github.com/skeeto/elfeed">Elfeed</a> filters are great for filtering related content.
</p>

 <p>
I wanted a way to easily switch through my typical categories of related content by quickly changing elfeed filters using a completion framework.
</p>

 <p>
Emacs's  <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Minibuffer-Completion.html">completing-read</a> plays nicely with your favorite completing framework (mine is  <a href="https://github.com/abo-abo/swiper">ivy</a>). With a couple of functions, we can get Emacs to ask us for the filtering category using human-readable options and quickly presenting related content. Binding the new functionality to <tab> is working well for me.
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">use-package</span>  <span style="color: #0086b3;">elfeed</span>  <span style="color: #a71d5d;">:ensure</span> t
   <span style="color: #a71d5d;">:commands</span> elfeed
   <span style="color: #a71d5d;">:bind</span> (<span style="color: #a71d5d;">:map</span> elfeed-search-mode-map
              (<span style="color: #183691;">"<tab>"</span> . ar/elfeed-completing-filter))
   <span style="color: #a71d5d;">:config</span>
  (<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">ar/elfeed-filter-results-count</span> (search-filter)
     <span style="color: #183691;">"Count results for SEARCH-FILTER."</span>
    (<span style="color: #a71d5d;">let*</span> ((filter (elfeed-search-parse-filter search-filter))
           (head (list nil))
           (tail head)
           (count 0))
      (<span style="color: #a71d5d;">let</span> ((lexical-binding t)
            (func (byte-compile (elfeed-search-compile-filter filter))))
        (with-elfeed-db-visit (entry feed)
          (<span style="color: #a71d5d;">when</span> (funcall func entry feed count)
            (<span style="color: #a71d5d;">setf</span> (cdr tail) (list entry)
                  tail (cdr tail)
                  count (1+ count)))))
      count))

  (<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">ar/elfeed-completing-filter</span> ()
     <span style="color: #183691;">"Completing filter."</span>
    (<span style="color: #a71d5d;">interactive</span>)
    (<span style="color: #a71d5d;">let</span> ((categories (-filter
                       (<span style="color: #a71d5d;">lambda</span> (item)
                         (> (ar/elfeed-filter-results-count (cdr item))
                            0))
                       '((<span style="color: #183691;">"All"</span> .  <span style="color: #183691;">"@6-months-ago +unread"</span>)
                         (<span style="color: #183691;">"BBC"</span> .  <span style="color: #183691;">"@6-months-ago +unread +bbc"</span>)
                         (<span style="color: #183691;">"Dev"</span> .  <span style="color: #183691;">"@6-months-ago +unread +dev"</span>)
                         (<span style="color: #183691;">"Emacs"</span> .  <span style="color: #183691;">"@6-months-ago +unread +emacs"</span>)
                         (<span style="color: #183691;">"Health"</span> .  <span style="color: #183691;">"@6-months-ago +unread +health"</span>)
                         (<span style="color: #183691;">"Hacker News"</span> .  <span style="color: #183691;">"@6-months-ago +unread +hackernews"</span>)
                         (<span style="color: #183691;">"iOS"</span> .  <span style="color: #183691;">"@6-months-ago +unread +ios"</span>)
                         (<span style="color: #183691;">"Money"</span> .  <span style="color: #183691;">"@6-months-ago +unread +money"</span>)))))
      (<span style="color: #a71d5d;">if</span> (> (length categories) 0)
          (<span style="color: #a71d5d;">progn</span>
            (ar/elfeed-view-filtered (cdr (assoc (completing-read  <span style="color: #183691;">"Categories: "</span> categories)
                                                 categories)))
            (goto-char (window-start)))
        (message  <span style="color: #183691;">"All caught up \\o/"</span>)))))
</pre>
</div>


 <div id="orgec509e1" class="figure">
 <p> <img src="../images/quickly-swapping-elfeed-filters/completing-elfeed.gif" alt="completing-elfeed.gif" width="75%" height="75%"></img></p>
</div>

 <p>
We don't actually need two functions, but  <i>ar/elfeed-filter-results-count</i> enables us to list only those feeds that actually have new content. The list will shrink as we get through our content. When no content is left, we get a little celebratory message.
</p>


 <div id="orgc31e15f" class="figure">
 <p> <img src="../images/quickly-swapping-elfeed-filters/no-left.png" alt="no-left.png" width="75%" height="75%"></img></p>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/quickly-swapping-elfeed-filters</link>
  <guid isPermaLink="false">http://xenodium.com/quickly-swapping-elfeed-filters</guid>
  <pubDate>Sat, 17 Nov 2018 00:00:00 +0000</pubDate>
</item>
<item>
  <title>Faster elfeed browsing with paging</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-faster-elfeed-browsing-with-paging" class="outline-2">
 <h2 id="faster-elfeed-browsing-with-paging"> <span class="timestamp-wrapper"> <span class="timestamp">13 November 2018</span></span> Faster elfeed browsing with paging</h2>
 <div class="outline-text-2" id="text-faster-elfeed-browsing-with-paging">
 <p>
Following up from  <a href="http://xenodium.com/#faster-junk-mail-deletion-with-mu4e">faster junk mail deletion with mu4e</a>, elfeed is another candidate for enabling actions on pages. In this case, marking rss entries as read, page by Page.
</p>

 <p>
If on  <a href="https://github.com/jwiegley/use-package">use-package</a>, the function can defined and bound to the "v" key using:
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">use-package</span>  <span style="color: #0086b3;">elfeed</span>
   <span style="color: #a71d5d;">:ensure</span> t
   <span style="color: #a71d5d;">:bind</span> (<span style="color: #a71d5d;">:map</span> elfeed-search-mode-map
              (<span style="color: #183691;">"v"</span> . ar/elfeed-mark-visible-as-read))
   <span style="color: #a71d5d;">:config</span>
  (<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">ar/elfeed-mark-visible-as-read</span> ()
    (<span style="color: #a71d5d;">interactive</span>)
    (<span style="color: #a71d5d;">require</span> ' <span style="color: #0086b3;">window-end-visible</span>)
    (set-mark (window-start))
    (goto-char (window-end-visible))
    (activate-mark)
    (elfeed-search-untag-all-unread)
    (elfeed-search-update--force)
    (deactivate-mark)
    (goto-char (window-start))))
</pre>
</div>


 <div id="orgb312adc" class="figure">
 <p> <img src="../images/faster-elfeed-browsing-with-paging/elfeed-read-by-page.gif" alt="elfeed-read-by-page.gif" width="75%" height="75%"></img></p>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/faster-elfeed-browsing-with-paging</link>
  <guid isPermaLink="false">http://xenodium.com/faster-elfeed-browsing-with-paging</guid>
  <pubDate>Tue, 13 Nov 2018 00:00:00 +0000</pubDate>
</item>
<item>
  <title>Faster junk mail deletion with mu4e</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-faster-junk-mail-deletion-with-mu4e" class="outline-2">
 <h2 id="faster-junk-mail-deletion-with-mu4e"> <span class="timestamp-wrapper"> <span class="timestamp">10 November 2018</span></span> Faster junk mail deletion with mu4e</h2>
 <div class="outline-text-2" id="text-faster-junk-mail-deletion-with-mu4e">
 <p>
It's been roughly 5 months since  <a href="http://xenodium.com/#trying-out-mu4e-and-offlineimap">my mu4e email migration</a>. Happy with my choice.  <a href="http://www.djcbsoftware.nl/code/mu/mu4e.html">Mu4e</a> is awesome.
</p>

 <p>
I now have 4 email accounts managed by mu4e, and unfortunately receiving lots of junk mail.
</p>

 <p>
I regularly peek at junk folders for false positives and delete junk email permanently. I've been wanting a quick way to glance at junk mail and easily delete page by page.
</p>

 <p>
Deleting emails page by page is not supported in mu4e by default.  <i>Fortunately, this is Emacs and we can change that™.</i>
</p>

 <p>
There's a handy package by Roland Walker called  <a href="http://github.com/rolandwalker/window-end-visible">window-end-visible</a>. We can use it to select mu4e emails by page and subsequently glue it all together to enable deleting emails by page.
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">require</span> ' <span style="color: #0086b3;">mu4e</span>)
(<span style="color: #a71d5d;">require</span> ' <span style="color: #0086b3;">window-end-visible</span>)

(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">ar/mu4e-delete-page</span> ()
  (<span style="color: #a71d5d;">interactive</span>)
  (set-mark (window-start))
  (goto-char (window-end-visible))
  (activate-mark)
  (mu4e-headers-mark-for-trash)
  (mu4e-mark-execute-all t)
  (deactivate-mark)
  (goto-char (window-start)))
</pre>
</div>

 <p>
I'm a  <a href="https://github.com/jwiegley/use-package">use-package</a> fan, so I use it to bind the "v" key to delete  <i>visible emails (by page</i>).
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">use-package</span>  <span style="color: #0086b3;">mu4e</span>
   <span style="color: #a71d5d;">:bind</span> (<span style="color: #a71d5d;">:map</span> mu4e-headers-mode-map
         (<span style="color: #183691;">"v"</span> . ar/mu4e-delete-page))
</pre>
</div>


 <div id="org7509b9e" class="figure">
 <p> <img src="../images/faster-junk-mail-deletion-with-mu4e/delete-junk.gif" alt="delete-junk.gif" width="75%" height="75%"></img></p>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/faster-junk-mail-deletion-with-mu4e</link>
  <guid isPermaLink="false">http://xenodium.com/faster-junk-mail-deletion-with-mu4e</guid>
  <pubDate>Sat, 10 Nov 2018 00:00:00 +0000</pubDate>
</item>
<item>
  <title>Rust bookmarks</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-rust-bookmarks" class="outline-2">
 <h2 id="rust-bookmarks"> <span class="timestamp-wrapper"> <span class="timestamp">29 October 2018</span></span> Rust bookmarks</h2>
 <div class="outline-text-2" id="text-rust-bookmarks">
 <span class="modified-timestamp">   <em>updated: 11 July 2021  </em></span>
 <ul class="org-ul"> <li> <a href="https://robert.kra.hn/posts/2021-02-07_rust-with-emacs/">Configuring Emacs for Rust development | Robert Krahn</a>.</li>
 <li> <a href="https://www.snoyman.com/blog/2018/10/introducing-rust-crash-course">Introducing the Rust crash course</a>.</li>
 <li> <a href="https://news.ycombinator.com/item">Rust Language Cheat Sheet (cheats.rs) </a>.</li>
</ul></div>
</div>
</div>]]></description>
  <link>http://xenodium.com/rust-bookmarks</link>
  <guid isPermaLink="false">http://xenodium.com/rust-bookmarks</guid>
  <pubDate>Mon, 29 Oct 2018 00:00:00 +0000</pubDate>
</item>
<item>
  <title>imenu on Emacs eshell</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-imenu-on-emacs-eshell" class="outline-2">
 <h2 id="imenu-on-emacs-eshell"> <span class="timestamp-wrapper"> <span class="timestamp">17 October 2018</span></span> imenu on Emacs eshell</h2>
 <div class="outline-text-2" id="text-imenu-on-emacs-eshell">
 <p>
 <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Imenu.html">imenu</a> navigation is one of those Emacs gems I didn't discover until much later on. It does what you'd expect in all types of modes. In rare instances, I've found specific modes missing imenu support. Fortunately, this is Emacs and you can fix that.
</p>

 <p>
 <a href="https://www.gnu.org/software/emacs/manual/html_mono/eshell.html">Eshell</a> has a handy feature to jump back and forth over previous prompts using  <i>M-x eshell-previous-prompt (C-c C-p)</i> and  <i>M-x eshell-next-prompt (C-c C-n)</i>. Upon learning about these two functions, my immediate reaction was to try imenu. Surprisingly, it didn't "just work\n", but a tiny bit of elisp brought balance back to the Emacs universe.
</p>

 <p>
In an eshell mode hook function, one can set the  <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Imenu.html#index-imenu_002dgeneric_002dexpression-2058">imenu-generic-expression</a> to help it find your favorite prompt:
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">setq-local</span> imenu-generic-expression
                  '((<span style="color: #183691;">"Prompt"</span>  <span style="color: #183691;">" $ </span> <span style="color: #969896;">\\</span> <span style="color: #a71d5d;">(</span> <span style="color: #183691;">.*</span> <span style="color: #969896;">\\</span> <span style="color: #a71d5d;">)</span> <span style="color: #183691;">"</span> 1)))
</pre>
</div>

 <p>
Ah it's the little things…
</p>


 <div id="org1bd3f07" class="figure">
 <p> <img src="../images/imenu-on-emacs-eshell/eshell-imenu.gif" alt="eshell-imenu.gif" width="75%" height="75%"></img></p>
</div>

 <p>
ps. If wondering why my imenu experience looks a little different, that's because I'm using Abo Abo's wonderful  <a href="https://github.com/abo-abo/swiper">counsel</a> and  <i>M-x counsel-semantic-or-imenu</i>.
</p>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/imenu-on-emacs-eshell</link>
  <guid isPermaLink="false">http://xenodium.com/imenu-on-emacs-eshell</guid>
  <pubDate>Wed, 17 Oct 2018 00:00:00 +0100</pubDate>
</item>
<item>
  <title>macOS app bookmarks</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-macos-app-bookmarks" class="outline-2">
 <h2 id="macos-app-bookmarks"> <span class="timestamp-wrapper"> <span class="timestamp">05 October 2018</span></span> macOS app bookmarks</h2>
 <div class="outline-text-2" id="text-macos-app-bookmarks">
 <span class="modified-timestamp">   <em>updated: 13 December 2020  </em></span>
 <ul class="org-ul"> <li> <a href="http://www.hcs.harvard.edu/~jrus/site/cocoa-text.html">Customizing the Cocoa Text System</a>.</li>
 <li> <a href="https://dmgbuild.readthedocs.io/en/latest/">dmgbuild - A command line tool to build .dmg files</a>.</li>
 <li> <a href="https://github.com/GetStream/Winds/blob/master/README.md">GetStream/Winds: macOS rss reader</a>.</li>
 <li> <a href="https://github.com/herrbischoff/awesome-macos-command-line#itunes">GitHub - herrbischoff/awesome-macos-command-line</a>.</li>
 <li> <a href="https://github.com/koekeishiya/yabai">GitHub - koekeishiya/yabai: A tiling window manager for macOS based on binary</a>.</li>
 <li> <a href="https://github.com/TermiT/Flycut">GitHub - TermiT/Flycut: Clean and simple clipboard manager for developers</a>.</li>
 <li> <a href="https://news.ycombinator.com/item?id=21794858">Hidden Bar: macOS utility to hide unused menu bar icons, written in Swift</a>.</li>
 <li> <a href="https://www.obdev.at/products/launchbar/index.html">LaunchBar 6 (can I implement flows in Emacs)?</a>.</li>
 <li> <a href="https://news.ycombinator.com/item?id=21179713">List of open source applications for macOS (Hacker News)</a>.</li>
 <li> <a href="https://macopenweb.com/">Mac Open Web, by Brian Warren</a>.</li>
 <li> <a href="https://eclecticlight.co/mac-troubleshooting-summary/">Mac Troubleshooting Summary – The Eclectic Light Company</a>.</li>
 <li> <a href="https://github.com/kam800/MachObfuscator/blob/master/README.md">MachObfuscator/README.md at master · kam800/MachObfuscator · GitHub</a>.</li>
 <li> <a href="https://papers.put.as/macosx/macosx/">macOS · Papers, Slides and Thesis Archive</a>.</li>
 <li> <a href="https://www.gonsie.com/blorg/ipad-setup.html">My iPad Setup</a>.</li>
 <li> <a href="https://github.com/nikitavoloboev/my-mac-os">My wonderful world of macOS</a>.</li>
 <li> <a href="https://github.com/nikitavoloboev/my-mac-os">my-mac-os: My wonderful world of macOS</a>.</li>
 <li> <a href="https://thesweetsetup.com/netnewswire-5-0-relaunches-as-an-open-source-rss-reader-for-the-mac/">NetNewsWire 5.0 Relaunches as an Open-Source RSS Reader for the Mac – The Sweet Setup</a>.</li>
 <li> <a href="https://smilesoftware.com/pdfpen/?">PDF Editor - PDFpen - Edit PDF Files (Smile Software)</a>.</li>
 <li> <a href="http://solutions.weblite.ca/pdfocrx/">PDF OCR X - Mac & Windows OCR Software to convert PDFs and Images to Text</a>.</li>
 <li> <a href="https://apps.apple.com/us/app/rested-simple-http-requests/id421879749">‎RESTed - Simple HTTP Requests on the Mac App Store</a>.</li>
</ul></div>
</div>
</div>]]></description>
  <link>http://xenodium.com/macos-app-bookmarks</link>
  <guid isPermaLink="false">http://xenodium.com/macos-app-bookmarks</guid>
  <pubDate>Fri, 05 Oct 2018 00:00:00 +0100</pubDate>
</item>
<item>
  <title>GTD/Get things done bookmarks</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-gtdget-things-done-bookmarks" class="outline-2">
 <h2 id="gtdget-things-done-bookmarks"> <span class="timestamp-wrapper"> <span class="timestamp">28 August 2018</span></span> GTD/Get things done bookmarks</h2>
 <div class="outline-text-2" id="text-gtdget-things-done-bookmarks">
 <span class="modified-timestamp">   <em>updated: 18 May 2019  </em></span>
 <ul class="org-ul"> <li> <a href="https://jamesstuber.com/plan-your-day/">Daily Time Management with Todoist and Google Calendar | JamesStuber.com</a>.</li>
 <li> <a href="https://klinger.io/post/71640845938/dont-drown-in-email-how-to-use-gmail-more">Don’t drown in email! How to use Gmail more efficiently. - Startup Lessons Learned</a>.</li>
 <li> <a href="https://praxis.fortelabs.co/gtd-x-pkm-8ff720ef6939/">Getting Things Done + Personal Knowledge Management - Praxis</a>.</li>
 <li> <a href="https://emacs.cafe/emacs/orgmode/gtd/2017/06/30/orgmode-gtd.html">Orgmode for GTD/Get things done</a>.</li>
</ul></div>
</div>
</div>]]></description>
  <link>http://xenodium.com/gtdget-things-done-bookmarks</link>
  <guid isPermaLink="false">http://xenodium.com/gtdget-things-done-bookmarks</guid>
  <pubDate>Tue, 28 Aug 2018 00:00:00 +0100</pubDate>
</item>
<item>
  <title>Actionable URLs in Emacs buffers</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-actionable-urls-in-emacs-buffers" class="outline-2">
 <h2 id="actionable-urls-in-emacs-buffers"> <span class="timestamp-wrapper"> <span class="timestamp">22 August 2018</span></span> Actionable URLs in Emacs buffers</h2>
 <div class="outline-text-2" id="text-actionable-urls-in-emacs-buffers">
 <p>
Should have enabled actionable URLs in my Emacs buffers long ago. Can now click or press return to follow links. It's great on eshell, compilation buffers, async shell commands, code, etc.
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">use-package</span>  <span style="color: #0086b3;">goto-addr</span>
   <span style="color: #a71d5d;">:hook</span> ((compilation-mode . goto-address-mode)
         (prog-mode . goto-address-prog-mode)
         (eshell-mode . goto-address-mode)
         (shell-mode . goto-address-mode))
   <span style="color: #a71d5d;">:bind</span> (<span style="color: #a71d5d;">:map</span> goto-address-highlight-keymap
              (<span style="color: #183691;">"<RET>"</span> . goto-address-at-point)
              (<span style="color: #183691;">"M-<RET>"</span> . newline))
   <span style="color: #a71d5d;">:commands</span> (goto-address-prog-mode
             goto-address-mode))
</pre>
</div>


 <div id="orgde770fe" class="figure">
 <p> <img src="../images/actionable-urls-in-emacs-buffers/goto-address.png" alt="goto-address.png" width="75%" height="75%"></img></p>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/actionable-urls-in-emacs-buffers</link>
  <guid isPermaLink="false">http://xenodium.com/actionable-urls-in-emacs-buffers</guid>
  <pubDate>Wed, 22 Aug 2018 00:00:00 +0100</pubDate>
</item>
<item>
  <title>Enabling Control-Meta(⌘)-D on macOS</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-enabling-control-meta-d-on-macos" class="outline-2">
 <h2 id="enabling-control-meta-d-on-macos"> <span class="timestamp-wrapper"> <span class="timestamp">18 August 2018</span></span> Enabling Control-Meta(⌘)-D on macOS</h2>
 <div class="outline-text-2" id="text-enabling-control-meta-d-on-macos">
 <p>
I use command (⌘) as my Emacs Meta key. Recently discovered C-M-d is not available to Emacs for binding keys on macOS. Stack Exchange had the  <a href="https://apple.stackexchange.com/questions/22785/how-do-i-disable-the-command-control-d-word-definition-keyboard-shortcut-in-os-x">workaround</a>:
</p>

 <div class="org-src-container">
 <pre class="src src-sh">defaults write com.apple.symbolichotkeys AppleSymbolicHotKeys -dict-add 70  <span style="color: #183691;">'<dict><key>enabled</key><false/></dict>'</span>
</pre>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/enabling-control-meta-d-on-macos</link>
  <guid isPermaLink="false">http://xenodium.com/enabling-control-meta-d-on-macos</guid>
  <pubDate>Sat, 18 Aug 2018 00:00:00 +0100</pubDate>
</item>
<item>
  <title>M-r history search in git-commit-mode</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-m-r-history-search-in-git-commit-mode" class="outline-2">
 <h2 id="m-r-history-search-in-git-commit-mode"> <span class="timestamp-wrapper"> <span class="timestamp">12 August 2018</span></span> M-r history search in git-commit-mode</h2>
 <div class="outline-text-2" id="text-m-r-history-search-in-git-commit-mode">
 <p>
I've grown accustomed to M-r bindings to search Emacs history. Been wanting similar functionality to search commit message history. Turns out  <i>log-edit-comment-ring</i> has some of my local commit message history. Feeding it to  <i>completing-read</i> gives me an easily searchable history when using a completing framework like ivy or helm:
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">ar/git-commit-search-message-history</span> ()
   <span style="color: #183691;">"Search and insert commit message from history."</span>
  (<span style="color: #a71d5d;">interactive</span>)
  (insert (completing-read  <span style="color: #183691;">"History: "</span>
                            <span style="color: #969896;">;; </span> <span style="color: #969896;">Remove unnecessary newlines from beginning and end.</span>
                           (mapcar (<span style="color: #a71d5d;">lambda</span> (text)
                                     (string-trim text))
                                   (ring-elements log-edit-comment-ring)))))
</pre>
</div>

 <p>
Now we bind it to  <i>M-r</i> and we're good to go:
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">bind-key</span>  <span style="color: #183691;">"M-r"</span> #'ar/git-commit-search-message-history git-commit-mode-map)
</pre>
</div>

 <p>
May also want to persist  <i>log-edit-comment-ring</i> across Emacs sessions by adding  <i>log-edit-comment-ring</i> to savehist variables. Also ensure  <i>savehist-mode</i> is enabled:
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(add-to-list 'savehist-additional-variables log-edit-comment-ring)
(savehist-mode +1)
</pre>
</div>


 <div id="org0e354ed" class="figure">
 <p> <img src="../images/m-r-history-search-in-git-commit-mode/m-r-commit-history.png" alt="m-r-commit-history.png" width="75%" height="75%"></img></p>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/m-r-history-search-in-git-commit-mode</link>
  <guid isPermaLink="false">http://xenodium.com/m-r-history-search-in-git-commit-mode</guid>
  <pubDate>Sun, 12 Aug 2018 00:00:00 +0100</pubDate>
</item>
<item>
  <title>Ledger bookmarks</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-ledger-bookmarks" class="outline-2">
 <h2 id="ledger-bookmarks"> <span class="timestamp-wrapper"> <span class="timestamp">08 August 2018</span></span> Ledger bookmarks</h2>
 <div class="outline-text-2" id="text-ledger-bookmarks">
 <span class="modified-timestamp">   <em>updated: 30 September 2021  </em></span>
 <ul class="org-ul"> <li> <a href="https://github.com/adept/full-fledged-hledger">"Full-fledged Hledger" Tutorial (interesting approach with great traceability and regeneration)</a>.</li>
 <li> <a href="https://github.com/adept/full-fledged-hledger/wiki">"Full-fledged Hledger" Tutorial</a>.</li>
 <li> <a href="https://www.khanacademy.org/economics-finance-domain/core-finance/accounting-and-financial-stateme">Accounting and financial statements (Khan Academy)</a>.</li>
 <li> <a href="https://cvillefoss.blog/2019/02/12/accounting-in-plain-text-part-1/">Accounting in Plain Text, Part 1 – cvilleFOSS</a>.</li>
 <li> <a href="http://matthiaskauer.com/2015/08/command-line-accounting-a-look-at-the-various-ledger-ports/">Command Line Accounting - A look at the various ledger ports (mkauer)</a>.</li>
 <li> <a href="https://www.reddit.com/r/emacs/comments/46hs9q/conquering_your_finances_with_emacs_and_ledger/">Conquering Your Finances with Emacs and Ledger : emacs</a>.</li>
 <li> <a href="https://github.com/awalker4/ledgerTalk2016">Conquering your finances with Emacs and Ledger</a>.</li>
 <li> <a href="https://github.com/ledger/ledger/wiki/CSV-Import">Convert a CSV file (comma separated values) from your bank into ledger format</a>.</li>
 <li> <a href="https://frdmtoplay.com/envelope-budgeting-with-ledger/">Envelope Budgeting with ledger</a>.</li>
 <li> <a href="https://github.com/simonmichael/hledger/tree/master/examples/csv">Examples of recent and older CSV rules files for ledger</a>.</li>
 <li> <a href="https://github.com/adept/full-fledged-hledger">full-fledged-hledger: Tutorial on Hledger setup</a>.</li>
 <li> <a href="https://github.com/barrucadu/finances">GitHub - barrucadu/finances: A small tool to visualise my hledger journal.</a>.</li>
 <li> <a href="https://github.com/Clever/csvlint">GitHub - Clever/csvlint: library and command line tool that validates a CSV file</a>.</li>
 <li> <a href="https://www.reddit.com/r/Bitcoin/comments/155gw5/heres_how_you_use_ledger_to_account_for_bitcoin/">Here's how you use ledger to account for Bitcoin transactions</a>.</li>
 <li> <a href="https://pauley.org.za/hledger-flow/">Hledger Flow: Step-By-Step</a>.</li>
 <li> <a href="https://www.reddit.com/r/plaintextaccounting/comments/8b10o0/importing_trans=actions_from_bank/">Importing transactions from bank. : plaintextaccounting (Reddit)</a>.</li>
 <li> <a href="https://patrickskiba.com/ledger-cli/2019/12/07/introduction-to-ledger-cli.html">Introduction to ledger and text-based accounting | Patrick Skiba</a>.</li>
 <li> <a href="https://sirodoht.com/blog/introduction-to-plain-text-accounting/">Introduction to plain text accounting (sirodoht blog)</a>.</li>
 <li> <a href="https://devhints.io/ledger">Ledger CLI cheatsheet</a>.</li>
 <li> <a href="https://devhints.io/ledger-csv">Ledger CSV format cheatsheet</a>.</li>
 <li> <a href="https://devhints.io/ledger-examples">Ledger examples cheatsheet</a>.</li>
 <li> <a href="https://devhints.io/ledger-periods">Ledger periods cheatsheet</a>.</li>
 <li> <a href="https://felixcrux.com/blog/ledger-practices">Ledger Practices - Felix Crux</a>.</li>
 <li> <a href="https://devhints.io/ledger-query">Ledger queries cheatsheet</a>.</li>
 <li> <a href="https://github.com/sheehamj13/ledger-reports">Ledger Report Scripts (tested on macOS Mojave)</a>.</li>
 <li> <a href="https://news.ycombinator.com/item?id=7707262">Ledger, a powerful CLI accounting tool (Hacker News)</a>.</li>
 <li> <a href="https://www.reddit.com/r/emacs/comments/6a3oxv/ledgerledgermode_tips_and_tricks/">ledger/ledger-mode tips and tricks? (Reddit)</a>.</li>
 <li> <a href="https://www.ledger-cli.org/3.0/doc/ledger3.html#The-convert-command">Ledger: Command-Line Accounting (convert csv command)</a>.</li>
 <li> <a href="https://www.ledger-cli.org/3.0/doc/ledger3.html">Ledger: Command-Line Accounting (documentation)</a>.</li>
 <li> <a href="https://gitlab.com/rjurga/ludget">ludget: ledger-cli data visualization</a>.</li>
 <li> <a href="https://memo.barrucadu.co.uk/personal-finance.html">Memo's personal Finance post on plain-text accounting</a>.</li>
 <li> <a href="https://plaintextaccounting.org/#comparisons">Plain Text Accounting, a guide to Ledger and friends - plaintextaccounting.org (comparisons)</a>.</li>
 <li> <a href="https://plaintextaccounting.org/#data-importconversion">Plain Text Accounting, a guide to Ledger and friends - plaintextaccounting.org (import)</a>.</li>
 <li> <a href="https://www.petekeen.net/keeping-finances-with-ledger">Program your Finances: Command-line Accounting (Pete Keen)</a>.</li>
 <li> <a href="https://www.sundialdreams.com/report-scripts-for-ledger-cli-with-gnuplot/">Report Scripts for Ledger CLI with Gnuplot (日光漫想)</a>.</li>
 <li> <a href="https://news.ycombinator.com/item?id=17845565">Show HN: Ledger-analytics – Analytics for ledger-cli (Hacker News)</a>.</li>
 <li> <a href="https://github.com/rememberYou/.emacs.d/blob/a095e0e3e88cd64e6ef5e8062d3215d67ad9e285/config.org#ledger">Terencio's Ledger Emacs config</a>.</li>
 <li> <a href="https://plaintextproject.online">The Plain Text Project</a>.</li>
 <li> <a href="https://www.reddit.com/r/emacs/comments/8x4xtt/tip_how_i_use_ledger_to_track_my_money">TIP: How I use ledger to track my money : emacs</a>.</li>
 <li> <a href="http://rantsideasstuff.com/posts/2018/07/01-tracking-investments-in-lots-with-hledger/">Tracking Investments in Lots with Hledger</a>.</li>
 <li> <a href="https://www.reddit.com/r/plaintextaccounting/comments/bhxdew/unrealized_gains/">Unrealized gains : plaintextaccounting</a>.</li>
 <li> <a href="https://emacs.cafe/ledger/emacs/ynab/budgeting/2018/06/12/elbank-ynab.html">Using Ledger for YNAB-like envelope budgeting</a>.</li>
 <li> <a href="https://memo.barrucadu.co.uk/hledger-influxdb-grafana.html">Visualise your finances with hledger, InfluxDB, and Grafana</a>.</li>
 <li> <a href="https://www.mint.com/mint-categories">Ways to Categorize Your Spending (Mint)</a>.</li>
 <li> <a href="https://github.com/ledger/ledger/wiki/Who's-using-ledger%3F">Who's using ledger? · ledger/ledger Wiki</a>.</li>
</ul></div>
</div>
</div>]]></description>
  <link>http://xenodium.com/ledger-bookmarks</link>
  <guid isPermaLink="false">http://xenodium.com/ledger-bookmarks</guid>
  <pubDate>Wed, 08 Aug 2018 00:00:00 +0100</pubDate>
</item>
<item>
  <title>Tip: Convert .texi to .info</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-tip-convert-texi-to-info" class="outline-2">
 <h2 id="tip-convert-texi-to-info"> <span class="timestamp-wrapper"> <span class="timestamp">07 August 2018</span></span> Tip: Convert .texi to .info</h2>
 <div class="outline-text-2" id="text-tip-convert-texi-to-info">
 <p>
Convert with:
</p>

 <div class="org-src-container">
 <pre class="src src-sh">makeinfo doc.texi
</pre>
</div>

 <p>
View with:
</p>

 <p>
Open in Emacs and render as info with:
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">ar/format-info-mode</span> ()
  (<span style="color: #a71d5d;">interactive</span>)
  (<span style="color: #a71d5d;">let</span> ((file-name (buffer-file-name)))
    (kill-buffer (current-buffer))
    (info file-name)))
</pre>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/tip-convert-texi-to-info</link>
  <guid isPermaLink="false">http://xenodium.com/tip-convert-texi-to-info</guid>
  <pubDate>Tue, 07 Aug 2018 00:00:00 +0100</pubDate>
</item>
<item>
  <title>fitbit API, org babel, and gnuplot</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-fitbit-api-org-babel-and-gnuplot" class="outline-2">
 <h2 id="fitbit-api-org-babel-and-gnuplot"> <span class="timestamp-wrapper"> <span class="timestamp">11 July 2018</span></span> fitbit API, org babel, and gnuplot</h2>
 <div class="outline-text-2" id="text-fitbit-api-org-babel-and-gnuplot">
 <p>
Retook running recently. Took the dust off my aria scale and used the opportunity to check out fitbit's API.
</p>

 <p>
First register your app at  <a href="https://dev.fitbit.com/apps/new">dev.fitbit.com/apps/new</a> and get a client_id=AABBCC.
</p>


 <div id="orgcea3cff" class="figure">
 <p> <img src="../images/fitbit-api-org-babel-and-gnuplot/fitbitapp.png" alt="fitbitapp.png" width="75%" height="75%"></img></p>
</div>

 <p>
You'll also need your USER_ID, from your Fitbitx user profile.
</p>


 <div id="orgb593e67" class="figure">
 <p> <img src="../images/fitbit-api-org-babel-and-gnuplot/fitbituser.png" alt="fitbituser.png" width="75%" height="75%"></img></p>
</div>

 <p>
We'll also need a token. I used the  <a href="https://dev.fitbit.com/build/reference/web-api/oauth2/">implicit grant flow</a> URL in my browser and extracted access_token=TOKEN.
</p>

 <p>
Now let's wire up two org source blocks to fetch the data and subsequently plot using gnuplot.
</p>

 <p>
It's pretty neat. You can take the output from one source block and use it as input to another.
</p>

 <p>
We use curl to fetch data from fitbit's API and pipe through  <a href="https://stedolan.github.io/jq/">jq</a> and sed to massage the output format into two columns.
</p>

 <p>
 <b>Note:</b> Before using gnuplot in org babel, you'll need to install the gnuplot package and add to babel languages.
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">use-package</span>  <span style="color: #0086b3;">gnuplot</span>  <span style="color: #a71d5d;">:ensure</span> t)

(<span style="color: #a71d5d;">use-package</span>  <span style="color: #0086b3;">ob</span>
   <span style="color: #a71d5d;">:config</span>
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((gnuplot . t))))
</pre>
</div>

 <div class="org-src-container">
 <pre class="src src-sh" id="org17df564">curl -s -H  <span style="color: #183691;">"Authorization: Bearer TOKEN"</span> https://api.fitbit.com/1/user/USER_ID/body/weight/date/2018-06-09/2018-07-11.json | jq  <span style="color: #183691;">'.[][] | "\(.dateTime) \(.value)"'</span> | sed  <span style="color: #183691;">'s/"//g'</span>
</pre>
</div>

 <table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"> <colgroup> <col class="org-right"></col> <col class="org-right"></col></colgroup> <tbody> <tr> <td class="org-right">2018-06-09</td>
 <td class="org-right">65.753</td>
</tr> <tr> <td class="org-right">2018-06-10</td>
 <td class="org-right">65.762</td>
</tr> <tr> <td class="org-right">2018-06-11</td>
 <td class="org-right">65.771</td>
</tr> <tr> <td class="org-right">2018-06-12</td>
 <td class="org-right">65.78</td>
</tr> <tr> <td class="org-right">2018-06-13</td>
 <td class="org-right">65.789</td>
</tr> <tr> <td class="org-right">2018-06-14</td>
 <td class="org-right">65.798</td>
</tr> <tr> <td class="org-right">2018-06-15</td>
 <td class="org-right">65.807</td>
</tr> <tr> <td class="org-right">2018-06-16</td>
 <td class="org-right">65.816</td>
</tr> <tr> <td class="org-right">2018-06-17</td>
 <td class="org-right">65.825</td>
</tr> <tr> <td class="org-right">2018-06-18</td>
 <td class="org-right">65.85</td>
</tr> <tr> <td class="org-right">2018-06-19</td>
 <td class="org-right">65.96</td>
</tr> <tr> <td class="org-right">2018-06-20</td>
 <td class="org-right">64.1</td>
</tr> <tr> <td class="org-right">2018-06-21</td>
 <td class="org-right">65.64</td>
</tr> <tr> <td class="org-right">2018-06-22</td>
 <td class="org-right">65.47</td>
</tr> <tr> <td class="org-right">2018-06-23</td>
 <td class="org-right">65.515</td>
</tr> <tr> <td class="org-right">2018-06-24</td>
 <td class="org-right">65.56</td>
</tr> <tr> <td class="org-right">2018-06-25</td>
 <td class="org-right">65.605</td>
</tr> <tr> <td class="org-right">2018-06-26</td>
 <td class="org-right">65.65</td>
</tr> <tr> <td class="org-right">2018-06-27</td>
 <td class="org-right">65.18</td>
</tr> <tr> <td class="org-right">2018-06-28</td>
 <td class="org-right">64.49</td>
</tr> <tr> <td class="org-right">2018-06-29</td>
 <td class="org-right">64.49</td>
</tr> <tr> <td class="org-right">2018-06-30</td>
 <td class="org-right">64.41</td>
</tr> <tr> <td class="org-right">2018-07-01</td>
 <td class="org-right">64.33</td>
</tr> <tr> <td class="org-right">2018-07-02</td>
 <td class="org-right">64.25</td>
</tr> <tr> <td class="org-right">2018-07-03</td>
 <td class="org-right">64.17</td>
</tr> <tr> <td class="org-right">2018-07-04</td>
 <td class="org-right">64.55</td>
</tr> <tr> <td class="org-right">2018-07-05</td>
 <td class="org-right">64.39</td>
</tr> <tr> <td class="org-right">2018-07-06</td>
 <td class="org-right">64.33</td>
</tr> <tr> <td class="org-right">2018-07-07</td>
 <td class="org-right">65.06</td>
</tr> <tr> <td class="org-right">2018-07-08</td>
 <td class="org-right">63.28</td>
</tr> <tr> <td class="org-right">2018-07-09</td>
 <td class="org-right">63.4</td>
</tr> <tr> <td class="org-right">2018-07-10</td>
 <td class="org-right">64.22</td>
</tr> <tr> <td class="org-right">2018-07-11</td>
 <td class="org-right">63.95</td>
</tr></tbody></table> <p>
Now feed the two column data to gnuplot.
</p>

 <div class="org-src-container">
 <pre class="src src-gnuplot"> <span style="color: #0086b3;">reset</span>
 <span style="color: #0086b3;">set</span>  <span style="color: #0086b3;">title</span>  <span style="color: #183691;">"My recent weight"</span>
 <span style="color: #0086b3;">set</span> xdata time
 <span style="color: #0086b3;">set</span> timefmt  <span style="color: #183691;">'%Y-%m-%d'</span>
 <span style="color: #0086b3;">set</span> format x  <span style="color: #183691;">"%d/%m/%y"</span>
 <span style="color: #0086b3;">set</span> term png
 <span style="color: #0086b3;">set</span> xrange [ <span style="color: #183691;">'2018-06-09'</span>: <span style="color: #183691;">'2018-07-11'</span>]
 <span style="color: #a71d5d;">plot</span> data u 1:2  <span style="color: #0086b3;">with</span>  <span style="color: #795da3;">linespoints</span>  <span style="color: #0086b3;">title</span>  <span style="color: #183691;">'Weight in Kg'</span>
</pre>
</div>


 <div id="org8508740" class="figure">
 <p> <img src="../images/fitbit-api-org-babel-and-gnuplot/weight.png" alt="weight.png" width="75%" height="75%"></img></p>
</div>

 <p>
Fetching data and plotting through org babel and gnuplot is pretty sweet. I've barely scratched the surface. There's more at  <a href="https://orgmode.org/worg/org-contrib/babel/languages/ob-doc-gnuplot.html">Org-babel-gnuplot</a> and  <a href="https://orgmode.org/worg/org-tutorials/org-plot.html">Plotting tables in Org-Mode using org-plot</a>. Either way, this is another Emacs super power to keep in the toolbox.</p>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/fitbit-api-org-babel-and-gnuplot</link>
  <guid isPermaLink="false">http://xenodium.com/fitbit-api-org-babel-and-gnuplot</guid>
  <pubDate>Wed, 11 Jul 2018 00:00:00 +0100</pubDate>
</item>
<item>
  <title>Emacs utilities for your OS</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-emacs-utilities-for-your-os" class="outline-2">
 <h2 id="emacs-utilities-for-your-os"> <span class="timestamp-wrapper"> <span class="timestamp">07 July 2018</span></span> Emacs utilities for your OS</h2>
 <div class="outline-text-2" id="text-emacs-utilities-for-your-os">
 <p>
Narrowing utilities are a wonderful way of increasing productivity. I have a few workflows using Emacs's  <a href="https://github.com/emacs-helm/helm">Helm</a> framework.
</p>

 <p>
There are great productivity boosters like  <a href="https://www.alfredapp.com/">Alfred</a> and  <a href="https://qsapp.com/">Quicksilver</a> for macOS, with batteries included.
</p>

 <p>
If you're a tinkerer, you'd enjoy the powerful  <a href="http://hammerspoon.org/">Hammerspoon</a>. Like elisp gluing all things Emacs, Hammerspoon uses Lua to glue all things macOS. You can build your own narrowing utilities using  <a href="http://www.hammerspoon.org/docs/hs.chooser.html">chooser</a> and a little Lua.
</p>

 <pre class="example">
local chooser = hs.chooser.new(function(choice)
      hs.alert.show(choice['text'])
end)

chooser:choices({
      {
         ["text"] = "Alfred\n",
         ["subText"] = "macOS only\n",
      },
      {
         ["text"] = "Quicksilver\n",
         ["subText"] = "macOS only\n",
      },
      {
         ["text"] = "Hammerspoon\n",
         ["subText"] = "macOS only\n",
      },
      {
         ["text"] = "Emacs\n",
         ["subText"] = "is everywhere :)\n",
      },
})
chooser:show()
</pre>


 <div id="orgb5131da" class="figure">
 <p> <img src="../images/emacs-utilities-for-your-os/chooser.png" alt="chooser.png" width="75%" height="75%"></img></p>
</div>

 <p>
Howard Abrams's post on  <a href="http://howardism.org/Technical/Emacs/capturing-content.html">Capturing Content for Emacs</a> inspired me to look at gluing Emacs and macOS to launch my own cross-platform narrowing utilities.
</p>

 <p>
I've also taken this opportunity to look at Oleh Krehel's wonderful completion package:  <a href="https://github.com/abo-abo/swiper">Ivy</a>. We can use it to build a macOS narrowing utility.
</p>

 <p>
Ivy is remarkably easy to use. Turns out,  <a href="http://oremacs.com/swiper/#api">ivy-read</a> is all you need. A simple Emacs completion can be accomplished with little elisp.
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(ivy-read  <span style="color: #183691;">"Hello ivy: "</span>
          '(<span style="color: #183691;">"One "</span>
             <span style="color: #183691;">"Two "</span>
             <span style="color: #183691;">"Three "</span>
             <span style="color: #183691;">"Four "</span>))
</pre>
</div>


 <div id="org90ba2ec" class="figure">
 <p> <img src="../images/emacs-utilities-for-your-os/simple_ivy.png" alt="simple_ivy.png" width="50%" height="50%"></img></p>
</div>

 <p>
Pretty nifty. Let's make this completion more accessible from the rest of the OS. To do so, we create a separate Emacs frame and make it pretty. We also want it to interact with the OS. We'll use  <i>ivy-read</i>'s  <i>:action</i> to invoke a tiny bit of AppleScript.
</p>

 <p>
Oh and we'll also use some funny quotes to tease ourselves about our beloved editor.
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">with-current-buffer</span> (get-buffer-create  <span style="color: #183691;">"*modal-ivy*"</span>)
  (<span style="color: #a71d5d;">let</span> ((frame (make-frame '((auto-raise . t)
                             (background-color .  <span style="color: #183691;">"DeepSkyBlue3"</span>)
                             (cursor-color .  <span style="color: #183691;">"MediumPurple1"</span>)
                             (font .  <span style="color: #183691;">"Menlo 15"</span>)
                             (foreground-color .  <span style="color: #183691;">"#eeeeec"</span>)
                             (height . 20)
                             (internal-border-width . 20)
                             (left . 0.33)
                             (left-fringe . 0)
                             (line-spacing . 3)
                             (menu-bar-lines . 0)
                             (minibuffer . only)
                             (right-fringe . 0)
                             (tool-bar-lines . 0)
                             (top . 48)
                             (undecorated . t)
                             (unsplittable . t)
                             (vertical-scroll-bars . nil)
                             (width . 110)))))
    (set-face-attribute 'ivy-minibuffer-match-face-1 frame
                         <span style="color: #a71d5d;">:background</span> nil
                         <span style="color: #a71d5d;">:foreground</span> nil)
    (set-face-attribute 'ivy-minibuffer-match-face-2 frame
                         <span style="color: #a71d5d;">:background</span> nil
                         <span style="color: #a71d5d;">:foreground</span>  <span style="color: #183691;">"orange1"</span>)
    (set-face-attribute 'ivy-minibuffer-match-face-3 frame
                         <span style="color: #a71d5d;">:background</span> nil
                         <span style="color: #a71d5d;">:foreground</span>  <span style="color: #183691;">"orange1"</span>)
    (set-face-attribute 'ivy-minibuffer-match-face-4 frame
                         <span style="color: #a71d5d;">:background</span> nil
                         <span style="color: #a71d5d;">:foreground</span>  <span style="color: #183691;">"orange1"</span>)
    (set-face-attribute 'ivy-current-match frame
                         <span style="color: #a71d5d;">:background</span>  <span style="color: #183691;">"#ffc911"</span>
                         <span style="color: #a71d5d;">:foreground</span>  <span style="color: #183691;">"red"</span>)
    (set-face-attribute 'minibuffer-prompt frame
                         <span style="color: #a71d5d;">:foreground</span>  <span style="color: #183691;">"grey"</span>)
    (<span style="color: #a71d5d;">let</span> ((ivy-height 20)
          (ivy-count-format  <span style="color: #183691;">""</span>))
      (ivy-read  <span style="color: #183691;">"Emacs acronyms: "</span>
                '(<span style="color: #183691;">" Emacs: Escape-Meta-Alt-Control-Shift "</span>
                   <span style="color: #183691;">" Emacs: Eight Megabytes And Constantly Swapping "</span>
                   <span style="color: #183691;">" Emacs: Even a Master of Arts Comes Simpler "</span>
                   <span style="color: #183691;">" Emacs: Each Manual's Audience is Completely Stupified "</span>
                   <span style="color: #183691;">" Emacs: Eventually Munches All Computer Storage "</span>
                   <span style="color: #183691;">" Emacs: Eradication of Memory Accomplished with Complete Simplicity "</span>
                   <span style="color: #183691;">" Emacs: Easily Maintained with the Assistance of Chemical Solutions "</span>
                   <span style="color: #183691;">" Emacs: Extended Macros Are Considered Superfluous "</span>
                   <span style="color: #183691;">" Emacs: Every Mode Accelerates Creation of Software "</span>
                   <span style="color: #183691;">" Emacs: Elsewhere Maybe All Commands are Simple "</span>
                   <span style="color: #183691;">" Emacs: Emacs Makes All Computing Simple "</span>
                   <span style="color: #183691;">" Emacs: Emacs Masquerades As Comfortable Shell "</span>
                   <span style="color: #183691;">" Emacs: Emacs My Alternative Computer Story "</span>
                   <span style="color: #183691;">" Emacs: Emacs Made Almost Completely Screwed "</span>
                   <span style="color: #183691;">" Emacs: Each Mail A Continued Surprise "</span>
                   <span style="color: #183691;">" Emacs: Eating Memory And Cycle-Sucking "</span>
                   <span style="color: #183691;">" Emacs: Elvis Masterminds All Computer Software "</span>
                   <span style="color: #183691;">" Emacs: Emacs Makes A Computer Slow"</span> )
                 <span style="color: #a71d5d;">:action</span> (<span style="color: #a71d5d;">lambda</span> (funny-quote)
                          (async-shell-command (format  <span style="color: #183691;">"osascript -e 'tell app \"System Events\" to display dialog \"%s\" buttons {\"OK\"}'"</span> funny-quote)))
                 <span style="color: #a71d5d;">:unwind</span> (<span style="color: #a71d5d;">lambda</span> ()
                          (shell-command  <span style="color: #183691;">"/Applications/Hammerspoon.app/Contents/Resources/extensions/hs/ipc/bin/hs -c 'backFromEmacs()'"</span>)
                          (delete-frame)
                          (other-window 1))))))
</pre>
</div>


 <div id="org885651d" class="figure">
 <p> <img src="../images/emacs-utilities-for-your-os/ivy_frame.gif" alt="ivy_frame.gif" width="100%" height="100%"></img></p>
</div>

 <p>
So where's all this going? I wrote a utility to extract all links from  <a href="https://raw.githubusercontent.com/xenodium/xenodium.github.io/master/index.org">this page's org file</a> and make them easily searchable from anywhere on macOS by invoking  <b>⌥-W</b>.
</p>

 <p>
The keys are bound using Lua, Hammerspoon, and emacsclient. This works well on macOS, but there are alternatives for other operating systems.
</p>

 <pre class="example">
hs.execute("emacsclient -ne \""..elisp.."\" -s /tmp/emacs*/server")
</pre>

 <p>
Here's the resulting utility in action:
</p>


 <div id="org089068c" class="figure">
 <p> <img src="../images/emacs-utilities-for-your-os/ivy_links.gif" alt="ivy_links.gif" width="100%" height="100%"></img></p>
</div>

 <p>
These integrations look promising. They enable me to bring cross-platform Emacs utilities into areas I hadn't considered.
</p>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/emacs-utilities-for-your-os</link>
  <guid isPermaLink="false">http://xenodium.com/emacs-utilities-for-your-os</guid>
  <pubDate>Sat, 07 Jul 2018 00:00:00 +0100</pubDate>
</item>
<item>
  <title>Trying out mu4e with mbsync</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-trying-out-mu4e-with-mbsync" class="outline-2">
 <h2 id="trying-out-mu4e-with-mbsync"> <span class="timestamp-wrapper"> <span class="timestamp">17 June 2018</span></span> Trying out mu4e with mbsync</h2>
 <div class="outline-text-2" id="text-trying-out-mu4e-with-mbsync">
 <p>
The email fun in Emacs continues. After a few weeks since I  <a href="../trying-out-mu4e-and-offlineimap">started using mu4e and offlineimap</a>, I'm sold. Both are awesome.  <a href="http://isync.sourceforge.net/mbsync.html">Mbsync</a> is an  <a href="http://www.offlineimap.org/">offlineimap</a> alternative. Despite resyncing all my mail, the transition was fairly smooth. Here's how…
</p>
</div>

 <div id="outline-container-orgaccb507" class="outline-3">
 <h3 id="orgaccb507">Install isync (for mbsync)</h3>
 <div class="outline-text-3" id="text-orgaccb507">
 <div class="org-src-container">
 <pre class="src src-sh">brew install isync
</pre>
</div>
</div>
</div>

 <div id="outline-container-org7927890" class="outline-3">
 <h3 id="org7927890">Configure mbsync</h3>
 <div class="outline-text-3" id="text-org7927890">
 <p>
Mbsync uses  <code>~/.mbsyncrc</code> for configuration. Migrating  <a href="../trying-out-mu4e-and-offlineimap">~/.offlineimaprc</a> to  <code>~/.mbsyncrc</code> looks like:
</p>

 <div class="org-src-container">
 <pre class="src src-conf">IMAPAccount Personal
Host some.imap.host.com
User your_user_name
PassCmd  <span style="color: #183691;">"gpg --quiet --batch -d ~/.offlineimap_accountname.gpg"</span>
Port 993
SSLType IMAPS
AuthMechs Login
CertificateFile  ~/.offlineimapcerts.pem
 <span style="color: #969896;"># </span> <span style="color: #969896;">My IMAP provider doesn't handle concurrent IMAP commands.</span>
PipelineDepth 1

IMAPStore Personal-remote
Account Personal

MaildirStore Personal-local
Path ~/IMAP/Personal/
Inbox ~/IMAP/Personal/INBOX

Channel Personal
Master :Personal-remote:
Slave :Personal-local:
Patterns *
Create Slave
Sync All
Expunge Both
SyncState *
</pre>
</div>
</div>
</div>
 <div id="outline-container-org065de90" class="outline-3">
 <h3 id="org065de90">No concurrent IMAP commands supported</h3>
 <div class="outline-text-3" id="text-org065de90">
 <p>
My IMAP provider doesn't handle concurrent IMAP commands.  <a href="https://kdecherf.com/blog/2017/05/01/mbsync-and-office-365/">mbsync and Office 365</a> had the answer:
</p>

 <div class="org-src-container">
 <pre class="src src-conf">PipelineDepth 1
</pre>
</div>
</div>
</div>

 <div id="outline-container-orge0b9bae" class="outline-3">
 <h3 id="orge0b9bae">Initial sync</h3>
 <div class="outline-text-3" id="text-orge0b9bae">
 <p>
Run initial from the command line sync:
</p>

 <div class="org-src-container">
 <pre class="src src-sh">mbsync -Va
</pre>
</div>

 <p>
While syncing my largest inbox, it sometimes received an unexpected EOF error:
</p>

 <pre class="example">
IMAP error: unexpected EOF from some.imap.host.com (1.2.3.4:993)
</pre>

 <p>
First few times, I restarted the syncing manually, but then used a loop to automatically restart it.
</p>

 <p>
Bash loops:
</p>

 <div class="org-src-container">
 <pre class="src src-sh"> <span style="color: #a71d5d;">while </span> <span style="color: #a71d5d;">true</span>;  <span style="color: #a71d5d;">do</span> mbsync -V Personal; sleep 5;  <span style="color: #a71d5d;">done</span>
</pre>
</div>

 <div class="org-src-container">
 <pre class="src src-sh"> <span style="color: #a71d5d;">for</span> i <span style="color: #a71d5d;"> in</span> {1..5};  <span style="color: #a71d5d;">do</span> mbsync -V Personal; sleep 5;  <span style="color: #a71d5d;">done</span>
</pre>
</div>

 <p>
Eshell loop:
</p>

 <div class="org-src-container">
 <pre class="src src-sh"> <span style="color: #a71d5d;">for</span> i <span style="color: #a71d5d;"> in</span> (number-sequence 1 10) {mbsync -V Personal; sleep 5}
</pre>
</div>
</div>
</div>

 <div id="outline-container-orgf5d0b77" class="outline-3">
 <h3 id="orgf5d0b77">Create mu index</h3>
 <div class="outline-text-3" id="text-orgf5d0b77">
 <p>
Reindex using mu, but first remove existing index for offlineimap messages:
</p>

 <div class="org-src-container">
 <pre class="src src-sh">rm -rf ~/.mu
</pre>
</div>

 <p>
Ok, do index now:
</p>

 <div class="org-src-container">
 <pre class="src src-sh">mu index --maildir=~/IMAP
</pre>
</div>
</div>
</div>

 <div id="outline-container-org4d2c748" class="outline-3">
 <h3 id="org4d2c748">Mu4e tweaks</h3>
 <div class="outline-text-3" id="text-org4d2c748">
 <p>
The  <i>get mail</i> command should now point to mbsync.
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(csetq mu4e-get-mail-command  <span style="color: #183691;">"mbsync -Va"</span>)
</pre>
</div>

 <p>
I had issues with duplicate IDs after moving and deleting messages from mu4e.  <a href="http://pragmaticemacs.com/emacs/migrating-from-offlineimap-to-mbsync-for-mu4e/">Migrating from offlineimap to mbsync for mu4e</a> had the answer:
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(csetq mu4e-change-filenames-when-moving t)
</pre>
</div>
</div>
</div>

 <div id="outline-container-orgab16679" class="outline-3">
 <h3 id="orgab16679">Helpful references</h3>
 <div class="outline-text-3" id="text-orgab16679">
 <ul class="org-ul"> <li> <a href="https://webgefrickel.de/blog/a-modern-mutt-setup">A modern mutt setup with neomutt, mbsync, msmtp and mu — part one | webgefrickel</a>.</li>
 <li> <a href="http://pragmaticemacs.com/emacs/migrating-from-offlineimap-to-mbsync-for-mu4e/">Migrating from offlineimap to mbsync for mu4e | Pragmatic Emacs</a>.</li>
 <li> <a href="https://copyninja.info/blog/email_setup.html">My personal Email setup - Notmuch, mbsync, postfix and dovecot</a>.</li>
 <li> <a href="https://github.com/jeremy-compostella/org-msg/blob/master/README.org">org-msg: Compose and reply to emails in a Outlook HTML friendly style</a>.</li>
 <li> <a href="http://www.ict4g.net/adolfo/notes/2014/12/27/EmacsIMAP.html">Reading IMAP Mail in Emacs on OSX</a>.</li>
</ul></div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/trying-out-mu4e-with-mbsync</link>
  <guid isPermaLink="false">http://xenodium.com/trying-out-mu4e-with-mbsync</guid>
  <pubDate>Sun, 17 Jun 2018 00:00:00 +0100</pubDate>
</item>
<item>
  <title>Sticky function keys on touch bar</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-sticky-function-keys-on-touch-bar" class="outline-2">
 <h2 id="sticky-function-keys-on-touch-bar"> <span class="timestamp-wrapper"> <span class="timestamp">15 June 2018</span></span> Sticky function keys on touch bar</h2>
 <div class="outline-text-2" id="text-sticky-function-keys-on-touch-bar">
 <p>
Visible (and sticky) function keys are not the touch bar default for Emacs. Let's change that:
</p>


 <div id="orga7227f7" class="figure">
 <p> <img src="../images/sticky-function-keys-on-touch-bar/touchbar_function_keys.png" alt="touchbar_function_keys.png" width="75%" height="75%"></img></p>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/sticky-function-keys-on-touch-bar</link>
  <guid isPermaLink="false">http://xenodium.com/sticky-function-keys-on-touch-bar</guid>
  <pubDate>Fri, 15 Jun 2018 00:00:00 +0100</pubDate>
</item>
<item>
  <title>Trying out mu4e and offlineimap</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-trying-out-mu4e-and-offlineimap" class="outline-2">
 <h2 id="trying-out-mu4e-and-offlineimap"> <span class="timestamp-wrapper"> <span class="timestamp">28 May 2018</span></span> Trying out mu4e and offlineimap</h2>
 <div class="outline-text-2" id="text-trying-out-mu4e-and-offlineimap">

 <div id="org710693a" class="figure">
 <p> <img src="../images/trying-out-mu4e-and-offlineimap/mu4e.png" alt="mu4e.png" width="75%" height="75%"></img></p>
</div>

 <p>
Managing Email from Emacs. Surely that's crazy-talk, but hey… let's give it a try.
</p>
</div>

 <div id="outline-container-orgae380b2" class="outline-3">
 <h3 id="orgae380b2">Install offlineimap</h3>
 <div class="outline-text-3" id="text-orgae380b2">
 <p>
Need to sync via imap. Use offlineimap. I'm on macOS, so homebrew is king for installing:
</p>

 <div class="org-src-container">
 <pre class="src src-sh">brew install offlineimap
</pre>
</div>

 <p>
Before can configure offlineimap, we'll need to handle a few things first.
</p>
</div>
</div>

 <div id="outline-container-org7804952" class="outline-3">
 <h3 id="org7804952">Get a cert fingerprint</h3>
 <div class="outline-text-3" id="text-org7804952">
 <p>
Use openssl for getting a certificate fingerprint. From offlineimap's  <a href="http://www.offlineimap.org/doc/FAQ.html#view-the-fingerprint">FAQ:</a>
</p>

 <div class="org-src-container">
 <pre class="src src-sh"> <span style="color: #333333;">SSL_CERT_DIR</span>= <span style="color: #183691;">""</span> openssl s_client -connect imap.migadu.com:993 < /dev/null 2>/dev/null | openssl x509 -fingerprint -noout -text -in /dev/stdin
</pre>
</div>

 <p>
Should give you something like:
</p>

 <blockquote>
 <p>
SHA1 Fingerprint=AA:BB:CC:DD:EE:DD:FF:AA:00:AA:2A:AA:AA:AA:A8:20:80:AA:A2:AA
</p>
</blockquote>
</div>
</div>

 <div id="outline-container-orgd4cd83c" class="outline-3">
 <h3 id="orgd4cd83c">Encrypt password</h3>
 <div class="outline-text-3" id="text-orgd4cd83c">
 <p>
Offlineimap can read passwords in plain text in its .offlineimaprc config file, but that's yuckie. Let's encrypt the password and use gnupg for that. Install it:
</p>

 <div class="org-src-container">
 <pre class="src src-sh">brew install gnupg
</pre>
</div>

 <p>
If you haven't already, generate a key
</p>

 <div class="org-src-container">
 <pre class="src src-sh">gpg --full-gen-key
</pre>
</div>

 <p>
Generate an offlineimap account password file.
</p>

 <div class="org-src-container">
 <pre class="src src-sh"> <span style="color: #a71d5d;">echo</span>  <span style="color: #183691;">"YourPassword"</span> | gpg --encrypt --recipient  <span style="color: #183691;">"Your Name"</span> -o ~/.offlineimap_accountname.gpg
</pre>
</div>
</div>
</div>

 <div id="outline-container-orgd56260d" class="outline-3">
 <h3 id="orgd56260d">Python password  wrapper</h3>
 <div class="outline-text-3" id="text-orgd56260d">
 <p>
Based on Fabian's  <a href="https://f-koehler.github.io/posts/2015-03-17-offlineimap-msmtp-gnupg.html">Encrypt OfflineIMAP and msmtp password with GnuPG</a>, I created ~/.read_password.py with:
</p>

 <div class="org-src-container">
 <pre class="src src-python"> <span style="color: #a71d5d;">import</span> os
 <span style="color: #a71d5d;">import</span> subprocess

 <span style="color: #a71d5d;">def</span>  <span style="color: #795da3;">read_password</span>(path):
   <span style="color: #a71d5d;">return</span> subprocess.check_output([ <span style="color: #183691;">"gpg\n"</span>,  <span style="color: #183691;">"--quiet\n"</span>,  <span style="color: #183691;">"--batch\n"</span>,  <span style="color: #183691;">"-d\n"</span>, os.path.expanduser(path)]).strip()
</pre>
</div>

 <p>
ps. Alternatively, see  <a href="http://stevelosh.com/blog/2012/10/the-homely-mutt/#retrieving-passwords">The homely Mutt</a>'s section to store password in macOS's keychain.
</p>
</div>
</div>

 <div id="outline-container-org6c4491d" class="outline-3">
 <h3 id="org6c4491d">Configure offlineimap</h3>
 <div class="outline-text-3" id="text-org6c4491d">
 <p>
Offlineimap uses ~/.offlineimaprc for configuration. We now have all we need to put the configuration together:
</p>

 <div class="org-src-container">
 <pre class="src src-conf">[ <span style="color: #0086b3;">general</span>]
 <span style="color: #333333;">accounts</span> = Personal

 <span style="color: #969896;"># </span> <span style="color: #969896;">Load this python file.</span>
 <span style="color: #333333;">pythonfile</span> = ~/.read_password.py

[ <span style="color: #0086b3;">Account Personal</span>]
 <span style="color: #333333;">localrepository</span> = Personal-Local

 <span style="color: #333333;">remoterepository</span> = Personal-Remote

 <span style="color: #969896;"># </span> <span style="color: #969896;">After syncing, let mu index it.</span>
 <span style="color: #333333;">postsynchook</span> = mu index --maildir ~/stuff/active/Mail

 <span style="color: #969896;"># </span> <span style="color: #969896;">Sync imap every 5 minutes.</span>
 <span style="color: #333333;">autorefresh</span> = 5

 <span style="color: #969896;"># </span> <span style="color: #969896;">Alternate between 10 quick syncs and full syncs.</span>
 <span style="color: #333333;">quick</span> = 10

[ <span style="color: #0086b3;">Repository Personal-Local</span>]
 <span style="color: #333333;">type</span> = Maildir
 <span style="color: #333333;">localfolders</span> = ~/stuff/active/Mail/Personal

[ <span style="color: #0086b3;">Repository Personal-Remote</span>]
 <span style="color: #333333;">type</span> = IMAP
 <span style="color: #333333;">remotehost</span> = some.imap.host.com
 <span style="color: #333333;">remoteuser</span> = your_user_name

 <span style="color: #969896;"># </span> <span style="color: #969896;">Use function defined in .read_password.py to read the password.</span>
 <span style="color: #333333;">remotepasseval</span> = read_password(<span style="color: #183691;">"~/.offlineimap_personal_account_password.gpg"</span>)

 <span style="color: #969896;"># </span> <span style="color: #969896;">Use the SHA1 fingerprint retrieved with openssl.</span>
 <span style="color: #333333;">cert_fingerprint</span> = aabbccddeeddffaa00aa2aaaaaaaa82080aaa2aa
</pre>
</div>
</div>

 <div id="outline-container-orgc3ffa48" class="outline-4">
 <h4 id="orgc3ffa48">Cert file</h4>
 <div class="outline-text-4" id="text-orgc3ffa48">
 <p>
You can use macOS's certificates from Keychain Access -> System Roots -> Certificates, select all, and ⌘-⇧-e (for export items). Save to ~/certs.pem and use offlineimap configutation:
</p>

 <blockquote>
 <p>
sslcacertfile = /path/to/certs.pem
</p>
</blockquote>

 <p>
Another option is executing lib/mk-ca-bundle.pl from curl's tarball to generate ca-bundle.crt, using certdata.txt from Mozilla's source tree.
</p>
</div>
</div>
</div>

 <div id="outline-container-org9c7d4f3" class="outline-3">
 <h3 id="org9c7d4f3">Install mu4e</h3>
 <div class="outline-text-3" id="text-org9c7d4f3">
 <p>
Manually modified mu4e recipe to pick up my Emacs binary. TIL about homebrew's edit command:
</p>

 <div class="org-src-container">
 <pre class="src src-sh">brew edit mu
</pre>
</div>

 <p>
Changed the one line:
</p>

 <blockquote>
 <ul class="org-ul"> <li>ENV["EMACS"] = "no" if build.without? "emacs"</li>
 <li>ENV["EMACS"] = "/Users/alvaro/homebrew/Cellar/emacs-plus/26.1-rc1_2/bin/emacs"</li>
</ul></blockquote>

 <p>
Finally installed mu4e:
</p>

 <div class="org-src-container">
 <pre class="src src-sh">brew install mu
</pre>
</div>
</div>
</div>

 <div id="outline-container-orgecafb21" class="outline-3">
 <h3 id="orgecafb21">Configure mu4e</h3>
 <div class="outline-text-3" id="text-orgecafb21">
 <p>
Lastly, configure mu4e:
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(add-to-list 'load-path
             (expand-file-name  <span style="color: #183691;">"~/homebrew/share/emacs/site-lisp/mu/mu4e"</span>))
(<span style="color: #a71d5d;">use-package</span>  <span style="color: #0086b3;">mu4e</span>
   <span style="color: #a71d5d;">:config</span>
   <span style="color: #969896;">;; </span> <span style="color: #969896;">Update mail using '</span> <span style="color: #0086b3;">U</span> <span style="color: #969896;">' in main view:</span>
  (<span style="color: #a71d5d;">setq</span> mu4e-get-mail-command  <span style="color: #183691;">"offlineimap"</span>)
  (<span style="color: #a71d5d;">setq</span> mu4e-view-show-addresses t)
  (<span style="color: #a71d5d;">setq</span> mu4e-attachment-dir (expand-file-name  <span style="color: #183691;">"~/Downloads/"</span>))
  (<span style="color: #a71d5d;">setq</span> mu4e-maildir  <span style="color: #183691;">"path/to/Mail"</span>)
  (<span style="color: #a71d5d;">setq</span> mu4e-html2text-command  <span style="color: #183691;">"w3m -T text/html"</span>)  <span style="color: #969896;">;; </span> <span style="color: #969896;">alternatively "textutil -stdin -format html -convert txt -stdout"</span>
  (<span style="color: #a71d5d;">setq</span> mu4e-user-mail-address-list '(<span style="color: #183691;">"myself@domain1.com"</span>
                                       <span style="color: #183691;">"myself@domain2.com"</span>))
  (<span style="color: #a71d5d;">setq</span> mu4e-context-policy 'pick-first)
  (<span style="color: #a71d5d;">setq</span> mu4e-compose-context-policy 'always-ask)
  (<span style="color: #a71d5d;">setq</span> mu4e-contexts
        (list
         (make-mu4e-context
           <span style="color: #a71d5d;">:name</span>  <span style="color: #183691;">"domain1"</span>
           <span style="color: #a71d5d;">:enter-func</span> (<span style="color: #a71d5d;">lambda</span> () (mu4e-message  <span style="color: #183691;">"Entering context myself@domain1.com"</span>))
           <span style="color: #a71d5d;">:leave-func</span> (<span style="color: #a71d5d;">lambda</span> () (mu4e-message  <span style="color: #183691;">"Leaving context myself@domain1.com"</span>))
           <span style="color: #a71d5d;">:match-func</span> (<span style="color: #a71d5d;">lambda</span> (msg)
                        (<span style="color: #a71d5d;">when</span> msg
                          (mu4e-message-contact-field-matches
                           msg '(<span style="color: #a71d5d;">:from</span>  <span style="color: #a71d5d;">:to</span>  <span style="color: #a71d5d;">:cc</span>  <span style="color: #a71d5d;">:bcc</span>)  <span style="color: #183691;">"myself@domain1.com"</span>)))
           <span style="color: #a71d5d;">:vars</span> '((user-mail-address .  <span style="color: #183691;">"myself@domain1.com"</span>)
                  (user-full-name .  <span style="color: #183691;">"My name"</span>)
                  (mu4e-sent-folder .  <span style="color: #183691;">"/Domain1/Sent"</span>)
                  (mu4e-drafts-folder .  <span style="color: #183691;">"/Domain1/Drafts"</span>)
                  (mu4e-trash-folder .  <span style="color: #183691;">"/Domain1/Trash"</span>)
                  (mu4e-compose-signature . nil)
                  (mu4e-compose-format-flowed . nil)
                  (smtpmail-smtp-user .  <span style="color: #183691;">"myself@domain1.com"</span>)
                  (smtpmail-smtp-server .  <span style="color: #183691;">"smtp.domain1.com"</span>)
                  (smtpmail-smtp-service . 587)))
         (make-mu4e-context
           <span style="color: #a71d5d;">:name</span>  <span style="color: #183691;">"domain2"</span>
           <span style="color: #a71d5d;">:enter-func</span> (<span style="color: #a71d5d;">lambda</span> () (mu4e-message  <span style="color: #183691;">"Entering context myself@domain2.com"</span>))
           <span style="color: #a71d5d;">:leave-func</span> (<span style="color: #a71d5d;">lambda</span> () (mu4e-message  <span style="color: #183691;">"Leaving context myself@domain2.com"</span>))
           <span style="color: #a71d5d;">:match-func</span> (<span style="color: #a71d5d;">lambda</span> (msg)
                        (<span style="color: #a71d5d;">when</span> msg
                          (mu4e-message-contact-field-matches
                           msg '(<span style="color: #a71d5d;">:from</span>  <span style="color: #a71d5d;">:to</span>  <span style="color: #a71d5d;">:cc</span>  <span style="color: #a71d5d;">:bcc</span>)  <span style="color: #183691;">"myself@domain2.com"</span>)))
           <span style="color: #a71d5d;">:vars</span> '((user-mail-address .  <span style="color: #183691;">"myself@domain2.com"</span>)
                  (user-full-name .  <span style="color: #183691;">"My name"</span>)
                  (mu4e-sent-folder .  <span style="color: #183691;">"/Domain2/Sent"</span>)
                  (mu4e-drafts-folder .  <span style="color: #183691;">"/Domain2/Drafts"</span>)
                  (mu4e-trash-folder .  <span style="color: #183691;">"/Domain2/Trash"</span>)
                  (mu4e-compose-signature . nil)
                  (mu4e-compose-format-flowed . nil)
                  (smtpmail-smtp-user .  <span style="color: #183691;">"myself@domain2.com"</span>)
                  (smtpmail-smtp-server .  <span style="color: #183691;">"smtp.domain2.com"</span>)
                  (smtpmail-smtp-service . 587))))))

(<span style="color: #a71d5d;">use-package</span>  <span style="color: #0086b3;">smtpmail</span>
   <span style="color: #a71d5d;">:config</span>
  (<span style="color: #a71d5d;">setq</span> smtpmail-stream-type 'starttls)
  (<span style="color: #a71d5d;">setq</span> smtpmail-debug-info t)
  (<span style="color: #a71d5d;">setq</span> smtpmail-warn-about-unknown-extensions t)
  (<span style="color: #a71d5d;">setq</span> smtpmail-queue-mail t)
  (<span style="color: #a71d5d;">setq</span> smtpmail-default-smtp-server nil)
   <span style="color: #969896;">;; </span> <span style="color: #969896;">Created with mu mkdir path/to/Mail/queue</span>
   <span style="color: #969896;">;; </span> <span style="color: #969896;">Also avoid indexing.</span>
   <span style="color: #969896;">;; </span> <span style="color: #969896;">touch path/to/Mail/queue/.noindex</span>
  (<span style="color: #a71d5d;">setq</span> smtpmail-queue-dir  <span style="color: #183691;">"path/to/Mail/queue/cur"</span>))

(<span style="color: #a71d5d;">use-package</span>  <span style="color: #0086b3;">message</span>
   <span style="color: #a71d5d;">:config</span>
  (<span style="color: #a71d5d;">setq</span> message-send-mail-function 'smtpmail-send-it))
</pre>
</div>
</div>
</div>
 <div id="outline-container-orge284a1f" class="outline-3">
 <h3 id="orge284a1f">Authinfo</h3>
 <div class="outline-text-3" id="text-orge284a1f">
 <p>
Create an ~/.authinfo file for sendmail authentication with:
</p>

 <pre class="example">
machine smtp.host1.com login account1@host1.com password somepassword1
machine smtp.host2.com login account2@host2.com password somepassword2
</pre>

 <p>
Encrypt ~/.authinfo with M-x epa-encrypt-file. Keep ~/.authinfo.gpg and delete ~/.authinfo.
</p>
</div>
</div>

 <div id="outline-container-org75898de" class="outline-3">
 <h3 id="org75898de">Mu4e helpful references</h3>
 <div class="outline-text-3" id="text-org75898de">
 <ul class="org-ul"> <li> <a href="http://cachestocaches.com/2017/3/complete-guide-email-emacs-using-mu-and-">A Complete Guide to Email in Emacs using Mu and Mu4e</a>.</li>
 <li> <a href="https://www.reddit.com/r/emacs/comments/5fkq7r/a_year_with_notmuch_mail_a_superfast_email_client/">A year with Notmuch mail - a super-fast email client available on Emacs</a>.</li>
 <li> <a href="https://dev.to/shrysr/archaic-text-based-email-clients-rock-3flm">Archaic: text based email clients rock - DEV Community (lots of great links)</a>.</li>
 <li> <a href="https://gist.github.com/areina/3879626">areina's Manage your email in emacs with mu4e</a>.</li>
 <li> <a href="https://notanumber.io/2016-10-03/better-email-with-mu4e/">Better Email with mu4e (NaN)</a>.</li>
 <li> <a href="https://vxlabs.com/2014/06/06/configuring-emacs-mu4e-with-nullmailer-offlineimap-and-multiple-identities/">Configuring Emacs mu4e with nullmailer, offlineimap and multiple identities</a>.</li>
 <li> <a href="http://www.macs.hw.ac.uk/~rs46/posts/2014-01-13-mu4e-email-client.html">Drowning in Email; mu4e to the Rescue</a>.</li>
 <li> <a href="https://ebzzry.io/en/emacs-mail/">Ebzzry: Setting up Mail in Emacs</a>.</li>
 <li> <a href="http://www.kirang.in/2014/11/13/emacs-as-email-client-with-offlineimap-and-mu4e-on-osx">Emacs as email client with offlineimap and mu4e on OS X</a>.</li>
 <li> <a href="https://zmalltalker.com/linux/mu.html">Email done right (mu)</a>.</li>
 <li> <a href="https://f-koehler.github.io/posts/2015-03-17-offlineimap-msmtp-gnupg.html">Encrypt OfflineIMAP and msmtp password with GnuPG</a>.</li>
 <li> <a href="https://etienne.depar.is/emacs.d/mu4e.html">Etienne's Mu4e customization</a>.</li>
 <li> <a href="https://github.com/OfflineIMAP/imapfw">GitHub - OfflineIMAP/imapfw: imapfw (IMAP/mail framework)</a>.</li>
 <li> <a href="https://github.com/kensanata/ggg">Gmail Gnus GPG Guide (GGGG)</a>.</li>
 <li> <a href="https://martinralbrecht.wordpress.com/2016/05/30/handling-email-with-emacs/">Handling Email with Emacs</a> (helm included).</li>
 <li> <a href="https://www.reddit.com/r/emacs/comments/5hfcid/i_got_mu4e_working/">I got mu4e working! (Reddit)</a>.</li>
 <li> <a href="https://blog.danielgempesaw.com/post/43467552978/installing-mu-and-mu4e-with-homebrew-with-emacs">Installing mu and mu4e with homebrew with emacs</a>.</li>
 <li> <a href="https://github.com/iqbalansari/dotEmacs/blob/master/config/mail.org">Iqbal Ansari's mail config</a>.</li>
 <li> <a href="https://github.com/iqbalansari/dotEmacs/blob/master/config/mail.org">iqbalansari/dotEmacs: calendar integration</a>.</li>
 <li> <a href="https://jherrlin.github.io/posts/emacs-mu4e/">Mail in Emacs with mu4e and mbsync (jherrlin)</a>.</li>
 <li> <a href="http://pragmaticemacs.com/emacs/master-your-inbox-with-mu4e-and-org-mode/">Master your inbox with mu4e and org-mode</a>.</li>
 <li> <a href="https://github.com/djcb/mu">Mu's github mirror</a>.</li>
 <li> <a href="http://www.djcbsoftware.nl/code/mu">Mu's page</a>.</li>
 <li> <a href="http://wenshanren.org/?p=111">mu4e: an E-mail Client for Emacs</a>.</li>
 <li> <a href="https://github.com/danielfleischer/mu4easy">mu4easy: mu4e + mbsync configuration for multiple accounts.</a>.</li>
 <li> <a href="http://rudolfochrist.github.io/blog/2015/03/21/offlineimap-with-ssl-files-on-osx/">OfflineIMAP with SSL files on OSX - Sebastian Christ</a>.</li>
 <li> <a href="https://news.ycombinator.com/item?id=14221501">OfflineIMAP: sync and backup tool for IMAP (Hacker News) and mbsync in comments</a>.</li>
 <li> <a href="https://github.com/redguardtoo/mastering-emacs-in-one-year-guide/blob/master/gnus-guide-en.org">Practical guide to use Gnus with Gmail</a>.</li>
 <li> <a href="http://pragmaticemacs.com/mu4e-tutorials/">Pragmatic Emacs's mu4e tutorials</a>.</li>
 <li> <a href="http://prodissues.com/2016/02/adding-mu4e-support-to-emacs.html">Prodissues: Adding mu4e Support To Emacs</a>.</li>
 <li> <a href="http://prodissues.com/2016/02/emacs-gpg-for-dummies.html">Prodissues: Emacs GPG For Dummies</a>.</li>
 <li> <a href="http://ict4g.net/adolfo/notes/2014/12/27/emacs-imap.html">Reading IMAP Mail in Emacs on OSX</a>.</li>
 <li> <a href="https://vxlabs.com/2019/07/03/send-queued-mails-in-background-with-mu4e/">Sending queued mails in the background with mu4e</a>.</li>
 <li> <a href="https://aliquote.org/post/setting-up-mu4e-1-0-c/">Setting Up Mu4e 1.0 C - aliquot</a>.</li>
 <li> <a href="https://dataswamp.org/~solene/2018-05-22-mu4esmtp.html">Solene's post: Sending mail with mu4e</a>.</li>
 <li> <a href="https://lars.ingebrigtsen.no/2014/12/01/the-emacs-network-security-manager">The Emacs Network Security Manager</a>.</li>
 <li> <a href="http://tech.memoryimprintstudio.com/the-ultimate-emailing-agent-with-mu4e-and-emacs">The Ultimate Emailing Agent with Mu4e and Emacs</a>.</li>
 <li> <a href="https://www.reddit.com/r/emacs/comments/8q84dl/tip_how_to_easily_manage_your_emails_with_mu4e/">TIP: How to easily manage your emails with mu4e (Reddit)</a>.</li>
 <li> <a href="https://etienne.depar.is/a-ecrit/post/2016/09/23/Two-custom-headers-for-mu4e">Two custom headers for mu4e - Étienne Deparis</a>.</li>
 <li> <a href="https://www.reddit.com/r/emacs/comments/73a3gp/using_emacs_to_read_gmail/">Using Emacs to read gmail (Emacs subreddit)</a>.</li>
 <li> <a href="http://www.brool.com/post/using-mu4e/">Using mu4e (Brool blog)</a>.</li>
 <li> <a href="https://github.com/zamansky/using-emacs/blob/master/mu4econfig-sample.el">Zamansky mu4e's sample config</a>.</li>
 <li> <a href="https://www.youtube.com/watch?v=newRHXKm4H4">Zamansky's video on mu4e</a>.</li>
</ul></div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/trying-out-mu4e-and-offlineimap</link>
  <guid isPermaLink="false">http://xenodium.com/trying-out-mu4e-and-offlineimap</guid>
  <pubDate>Mon, 28 May 2018 00:00:00 +0100</pubDate>
</item>
<item>
  <title>Transparent Emacs titlebars on macOS</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-transparent-emacs-titlebars-on-macos" class="outline-2">
 <h2 id="transparent-emacs-titlebars-on-macos"> <span class="timestamp-wrapper"> <span class="timestamp">24 May 2018</span></span> Transparent Emacs titlebars on macOS</h2>
 <div class="outline-text-2" id="text-transparent-emacs-titlebars-on-macos">
 <p>
Happy with  <a href="https://github.com/d12frosted/homebrew-emacs-plus">Emacs Plus</a> builds on Mac. You get some eye-candy bonuses like transparent titlebars.
</p>

 <p>
To install:
</p>

 <div class="org-src-container">
 <pre class="src src-sh">brew tap d12frosted/emacs-plus
brew install emacs-plus --without-spacemacs-icon
</pre>
</div>

 <p>
Config:
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">when</span> (memq window-system '(mac ns))
  (add-to-list 'default-frame-alist '(ns-appearance . dark))  <span style="color: #969896;">; </span> <span style="color: #969896;">nil for dark text</span>
  (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t)))
</pre>
</div>


 <div id="orgc6ed2ff" class="figure">
 <p> <img src="../images/transparent-emacs-titlebars-on-macos/transparent-emacs-titlebars-macos.png" alt="transparent-emacs-titlebars-macos.png" width="75%" height="75%"></img></p>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/transparent-emacs-titlebars-on-macos</link>
  <guid isPermaLink="false">http://xenodium.com/transparent-emacs-titlebars-on-macos</guid>
  <pubDate>Thu, 24 May 2018 00:00:00 +0100</pubDate>
</item>
<item>
  <title>Train Emacs to open files externally</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-train-emacs-to-open-files-externally" class="outline-2">
 <h2 id="train-emacs-to-open-files-externally"> <span class="timestamp-wrapper"> <span class="timestamp">23 May 2018</span></span> Train Emacs to open files externally</h2>
 <div class="outline-text-2" id="text-train-emacs-to-open-files-externally">
 <p>
TIL about the  <a href="https://bitbucket.org/jpkotta/openwith">openwith</a> package. It enables Emacs to defer to external programs for certain files. You choose which ones. Neat.
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">use-package</span>  <span style="color: #0086b3;">openwith</span>  <span style="color: #a71d5d;">:ensure</span> t
   <span style="color: #a71d5d;">:config</span>
  (csetq openwith-associations
         '((<span style="color: #183691;">"\\.</span> <span style="color: #969896;">\\</span> <span style="color: #a71d5d;">(</span> <span style="color: #183691;">mp4</span> <span style="color: #969896;">\\</span> <span style="color: #a71d5d;">|</span> <span style="color: #183691;">mp3</span> <span style="color: #969896;">\\</span> <span style="color: #a71d5d;">|</span> <span style="color: #183691;">webm</span> <span style="color: #969896;">\\</span> <span style="color: #a71d5d;">|</span> <span style="color: #183691;">avi</span> <span style="color: #969896;">\\</span> <span style="color: #a71d5d;">|</span> <span style="color: #183691;">flv</span> <span style="color: #969896;">\\</span> <span style="color: #a71d5d;">|</span> <span style="color: #183691;">mov</span> <span style="color: #969896;">\\</span> <span style="color: #a71d5d;">)</span> <span style="color: #183691;">$"</span>  <span style="color: #183691;">"open"</span> (file))))
  (openwith-mode 1))
</pre>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/train-emacs-to-open-files-externally</link>
  <guid isPermaLink="false">http://xenodium.com/train-emacs-to-open-files-externally</guid>
  <pubDate>Wed, 23 May 2018 00:00:00 +0100</pubDate>
</item>
<item>
  <title>Debugging Emacs binary</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-debugging-emacs-binary" class="outline-2">
 <h2 id="debugging-emacs-binary"> <span class="timestamp-wrapper"> <span class="timestamp">19 April 2018</span></span> Debugging Emacs binary</h2>
 <div class="outline-text-2" id="text-debugging-emacs-binary">
 <p>
From  <a href="https://emacs.stackexchange.com/questions/14354/how-do-i-debug-an-emacs-crash">How do I debug an emacs crash? (Emacs Stack Exchange)</a>, disable optimizations when configuring and build:
</p>

 <div class="org-src-container">
 <pre class="src src-sh"> <span style="color: #333333;">CFLAGS</span>= <span style="color: #183691;">"-O0 -g3"</span> ./configure ...
make
</pre>
</div>

 <p>
And good 'ol gdb (lldb works too):
</p>

 <div class="org-src-container">
 <pre class="src src-sh">gdb ../nextstep/Emacs.app/Contents/MacOS/Emacs
</pre>
</div>
</div>

 <div id="outline-container-org21c346d" class="outline-3">
 <h3 id="org21c346d">Reference</h3>
 <div class="outline-text-3" id="text-org21c346d">
 <ul class="org-ul"> <li> <a href="https://git.savannah.gnu.org/cgit/emacs.git/tree/etc/DEBUG">etc/DEBUG: Debugging GNU Emacs</a>.</li>
</ul></div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/debugging-emacs-binary</link>
  <guid isPermaLink="false">http://xenodium.com/debugging-emacs-binary</guid>
  <pubDate>Thu, 19 Apr 2018 00:00:00 +0100</pubDate>
</item>
<item>
  <title>Hammerspoon bookmarks</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-hammerspoon-bookmarks" class="outline-2">
 <h2 id="hammerspoon-bookmarks"> <span class="timestamp-wrapper"> <span class="timestamp">14 April 2018</span></span> Hammerspoon bookmarks</h2>
 <div class="outline-text-2" id="text-hammerspoon-bookmarks">
 <span class="modified-timestamp">   <em>updated: 22 April 2019  </em></span>
 <ul class="org-ul"> <li> <a href="https://github.com/peterpme/dotfiles/blob/master/hammerspoon/grid.lua">dotfiles/grid.lua at master</a> for simple functions to resize windows.</li>
 <li> <a href="https://gist.github.com/justintanner/71d640be159c2a76e85d5196cf22e98a">Emacs keys everywhere Hammerspoon Script</a>.</li>
 <li> <a href="http://zzamboni.org/post/getting-started-with-hammerspoon/">Getting Started With Hammerspoon (by Diego Martín Zamboni)</a>.</li>
 <li> <a href="https://github.com/agzam/spacehammer">Hammerspoon config inspired by Spacemacs</a>.</li>
 <li> <a href="http://zzamboni.org/post/just-enough-lua-to-be-productive-in-hammerspoon-part-1/">Just Enough Lua to Be Productive in Hammerspoon, Part 1</a>.</li>
 <li> <a href="http://zzamboni.org/post/just-enough-lua-to-be-productive-in-hammerspoon-part-2/">Just Enough Lua to Be Productive in Hammerspoon, Part 2</a>.</li>
 <li> <a href="https://github.com/anandpiyer/.dotfiles/blob/fb7bdf5d6382515f36587f2ada83330d83983624/.hammerspoon/init.lua#L200">launchOrFocusByBundleID</a> for global key bindings (there are Emacs goodies there too).</li>
 <li> <a href="https://github.com/schilken/dot-hammerspoon">My configuration with init.lua and the require()ed modules</a>.</li>
 <li> <a href="http://www.hammerspoon.org/Spoons/Seal.html">Seal</a>. Helm-like for hammerspoon.</li>
 <li> <a href="https://blog.kalis.me/setup-hyper-key-hammerspoon-macos/">Set up a Hyper Key with Hammerspoon on macOS</a>.</li>
 <li> <a href="https://github.com/asmagill/hammerspoon-config/blob/07ec892ab1351d2a7659d802e4cbfa8e8a0d5702/_scratch/zerobrane.lua">ZeroBrane completion</a> and  <a href="https://github.com/cmsj/hammerspoon-config/blob/master/init.lua">here</a> also.</li>
</ul></div>
</div>
</div>]]></description>
  <link>http://xenodium.com/hammerspoon-bookmarks</link>
  <guid isPermaLink="false">http://xenodium.com/hammerspoon-bookmarks</guid>
  <pubDate>Sat, 14 Apr 2018 00:00:00 +0100</pubDate>
</item>
<item>
  <title>Trying out ShellCheck</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-trying-out-shellcheck" class="outline-2">
 <h2 id="trying-out-shellcheck"> <span class="timestamp-wrapper"> <span class="timestamp">08 April 2018</span></span> Trying out ShellCheck</h2>
 <div class="outline-text-2" id="text-trying-out-shellcheck">
 <p>
 <a href="https://github.com/koalaman/shellcheck">ShellCheck</a> gives you automatic warnings/suggestions in bash/sh shell scripts.
</p>

 <div class="org-src-container">
 <pre class="src src-sh">$ brew install shellcheck
</pre>
</div>

 <p>
Bonus: If using Emacs's  <a href="https://github.com/flycheck/flycheck">flycheck</a>, you get ShellCheck support out of the box.</p>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/trying-out-shellcheck</link>
  <guid isPermaLink="false">http://xenodium.com/trying-out-shellcheck</guid>
  <pubDate>Sun, 08 Apr 2018 00:00:00 +0100</pubDate>
</item>
<item>
  <title>Getting macOS app bundle ID</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-getting-macos-app-bundle-id" class="outline-2">
 <h2 id="getting-macos-app-bundle-id"> <span class="timestamp-wrapper"> <span class="timestamp">04 April 2018</span></span> Getting macOS app bundle ID</h2>
 <div class="outline-text-2" id="text-getting-macos-app-bundle-id">
 <p>
From  <a href="https://stackoverflow.com/questions/39464668/how-to-get-bundle-id-of-mac-application#39464824">stack overflow</a>:
</p>

 <p>
Option 1
</p>

 <div class="org-src-container">
 <pre class="src src-sh">osascript -e  <span style="color: #183691;">'id of app "Emacs"'</span>
</pre>
</div>

 <p>
Option 2
</p>

 <div class="org-src-container">
 <pre class="src src-sh">mdls -name kMDItemCFBundleIdentifier -r SomeApp.app
</pre>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/getting-macos-app-bundle-id</link>
  <guid isPermaLink="false">http://xenodium.com/getting-macos-app-bundle-id</guid>
  <pubDate>Wed, 04 Apr 2018 00:00:00 +0100</pubDate>
</item>
<item>
  <title>org-babel Objective-C support</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-org-babel-objective-c-support" class="outline-2">
 <h2 id="org-babel-objective-c-support"> <span class="timestamp-wrapper"> <span class="timestamp">16 November 2017</span></span> org-babel Objective-C support</h2>
 <div class="outline-text-2" id="text-org-babel-objective-c-support">
 <p>
Wanted to quickly execute an Objective-C snippet. org-babel didn't support it out of the box, but adding it was straightforward (looked at ob-C.el and ob-java.el):
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">require</span> ' <span style="color: #0086b3;">ob</span>)

(<span style="color: #a71d5d;">defcustom</span>  <span style="color: #333333;">org-babel-objc-compile-command</span>  <span style="color: #183691;">"clang -x objective-c -framework Foundation"</span>
   <span style="color: #183691;">"For example: \"clang -x objective-c -framework Foundation\"."</span>
   <span style="color: #a71d5d;">:group</span> 'org-babel
   <span style="color: #a71d5d;">:version</span>  <span style="color: #183691;">"24.3"</span>
   <span style="color: #a71d5d;">:type</span> 'string)

(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">org-babel-execute:objc</span> (body params)
   <span style="color: #183691;">"Compile Objective-C BODY with org PARAMS and execute binary."</span>
  (<span style="color: #a71d5d;">let*</span> ((src-file (org-babel-temp-file  <span style="color: #183691;">"org-babel-objc-block-"</span>  <span style="color: #183691;">".m"</span>))
         (cmpflag (<span style="color: #a71d5d;">or</span> (cdr (assq  <span style="color: #a71d5d;">:cmpflag</span> params))  <span style="color: #183691;">""</span>))
         (full-body (org-babel-expand-body:generic body params))
         (bin-file
          (org-babel-process-file-name
           (org-babel-temp-file  <span style="color: #183691;">"org-babel-objc-block"</span> org-babel-exeext))))
    (<span style="color: #a71d5d;">with-temp-file</span> src-file (insert full-body))
    (org-babel-eval
     (concat org-babel-objc-compile-command  <span style="color: #183691;">" "</span> cmpflag  <span style="color: #183691;">" "</span> src-file  <span style="color: #183691;">" "</span>  <span style="color: #183691;">"-o"</span>  <span style="color: #183691;">" "</span> bin-file)  <span style="color: #183691;">""</span>)

     <span style="color: #969896;">;; </span> <span style="color: #969896;">Using 2>&1 since org babel does not include stderr in output from NSLog.</span>
    (<span style="color: #a71d5d;">let</span> ((results (org-babel-eval (concat (org-babel-process-file-name bin-file)  <span style="color: #183691;">" 2>&1"</span>)   <span style="color: #183691;">""</span>)))
      (org-babel-reassemble-table
       (<span style="color: #a71d5d;">org-babel-result-cond</span> (cdr (assq  <span style="color: #a71d5d;">:result-params</span> params))
         (org-babel-read results)
         (<span style="color: #a71d5d;">let</span> ((tmp-file (org-babel-temp-file  <span style="color: #183691;">"c-"</span>)))
           (<span style="color: #a71d5d;">with-temp-file</span> tmp-file (insert results))
           (org-babel-import-elisp-from-file tmp-file)))
       (org-babel-pick-name
        (cdr (assq  <span style="color: #a71d5d;">:colname-names</span> params)) (cdr (assq  <span style="color: #a71d5d;">:colnames</span> params)))
       (org-babel-pick-name
        (cdr (assq  <span style="color: #a71d5d;">:rowname-names</span> params)) (cdr (assq  <span style="color: #a71d5d;">:rownames</span> params)))))))

(<span style="color: #a71d5d;">provide</span> ' <span style="color: #0086b3;">ob-objc</span>)
</pre>
</div>

 <p>
Add  <i>objc</i> to  <i>org-babel-load-languages</i>, and you can subsequently compile and run Objective-C blocks like:
</p>

 <div class="org-src-container">
 <pre class="src src-objc"> <span style="color: #a71d5d;">#import</span>  <span style="color: #183691;"><Foundation/Foundation.h></span>

 <span style="color: #0086b3;">int</span>  <span style="color: #795da3;">main</span>() {
  NSLog(@ <span style="color: #183691;">"Hello World"</span>);
   <span style="color: #a71d5d;">return</span> 0;
}
</pre>
</div>

 <pre class="example">
2017-11-16 01:47:28.923 org-babel-objc-block-Aai8ux[15319:346480] Hello World
</pre>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/org-babel-objective-c-support</link>
  <guid isPermaLink="false">http://xenodium.com/org-babel-objective-c-support</guid>
  <pubDate>Thu, 16 Nov 2017 00:00:00 +0000</pubDate>
</item>
<item>
  <title>Eshell pcomplete company completion</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-eshell-pcomplete-company-completion" class="outline-2">
 <h2 id="eshell-pcomplete-company-completion"> <span class="timestamp-wrapper"> <span class="timestamp">01 November 2017</span></span> Eshell pcomplete company completion</h2>
 <div class="outline-text-2" id="text-eshell-pcomplete-company-completion">
 <p>
Howard Abrams's  <a href="https://www.youtube.com/watch?v=RhYNu6i_uY4">Introduction to eshell video</a> prompted me to poke at eshell some more. This time, I got eshell context aware completion by glueing the excellent  <a href="https://company-mode.github.io">company</a> and  <a href="https://masteringemacs.org/article/pcomplete-context-sensitive-completion-emacs">pcomplete</a> packages.
</p>


 <div id="orga600766" class="figure">
 <p> <img src="../images/eshell-pcomplete-company-completion/company-pcomplete.png" alt="company-pcomplete.png" width="75%" height="75%"></img></p>
</div>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">require</span> ' <span style="color: #0086b3;">cl-lib</span>)
(<span style="color: #a71d5d;">require</span> ' <span style="color: #0086b3;">company</span>)
(<span style="color: #a71d5d;">require</span> ' <span style="color: #0086b3;">dash</span>)
(<span style="color: #a71d5d;">require</span> ' <span style="color: #0086b3;">pcomplete</span>)
(<span style="color: #a71d5d;">require</span> ' <span style="color: #0086b3;">s</span>)

(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">company-pcomplete--overlap-tail</span> (a b)
   <span style="color: #183691;">"When A is \"SomeDev\" and B is \"Developer\", return \"eloper\"."</span>
  (<span style="color: #a71d5d;">let</span> ((prefix a)
        (remaining nil))
    (<span style="color: #a71d5d;">while</span> (<span style="color: #a71d5d;">and</span> (not remaining) (> (length prefix) 0))
      (<span style="color: #a71d5d;">when</span> (s-starts-with? prefix b)
        (<span style="color: #a71d5d;">setq</span> remaining (substring b (length prefix))))
      (<span style="color: #a71d5d;">setq</span> prefix (substring prefix 1)))
    remaining))

(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">company-pcomplete--candidates</span> (prefix)
   <span style="color: #183691;">"Get candidates for PREFIX company completion using `</span> <span style="color: #0086b3;">pcomplete</span> <span style="color: #183691;">'."</span>
   <span style="color: #969896;">;; </span> <span style="color: #969896;">When prefix is: "~/Down" and completion is "Downloads", need</span>
   <span style="color: #969896;">;; </span> <span style="color: #969896;">to find common string and join into "~/Downloads/".</span>
  (-map (<span style="color: #a71d5d;">lambda</span> (item)
          (<span style="color: #a71d5d;">if</span> (s-starts-with? prefix item)
              item
            (concat prefix (company-pcomplete--overlap-tail prefix item))))
        (all-completions prefix (pcomplete-completions))))

(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">company-pcomplete</span> (command  <span style="color: #0086b3;">&optional</span> arg  <span style="color: #0086b3;">&rest</span> ignored)
   <span style="color: #183691;">"Complete using pcomplete. See `</span> <span style="color: #0086b3;">company</span> <span style="color: #183691;">''s COMMAND ARG and IGNORED for details."</span>
  (<span style="color: #a71d5d;">interactive</span> (list 'interactive))
  (case command
    (<span style="color: #a71d5d;">interactive</span> (company-begin-backend 'company-pcomplete))
    (prefix (company-grab-symbol))
    (candidates
     (company-pcomplete--candidates arg))))
</pre>
</div>

 <p>
Don't forget to add  <i>company-pcomplete</i> to  <i>company-backends,</i> and if you want an explicit binding, use something like:
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">bind-key</span>  <span style="color: #183691;">"<backtab>"</span> #'company-complete eshell-mode-map)
</pre>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/eshell-pcomplete-company-completion</link>
  <guid isPermaLink="false">http://xenodium.com/eshell-pcomplete-company-completion</guid>
  <pubDate>Wed, 01 Nov 2017 00:00:00 +0000</pubDate>
</item>
<item>
  <title>Basic imenu in helpful-mode</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-basic-imenu-in-helpful-mode" class="outline-2">
 <h2 id="basic-imenu-in-helpful-mode"> <span class="timestamp-wrapper"> <span class="timestamp">10 September 2017</span></span> Basic imenu in helpful-mode</h2>
 <div class="outline-text-2" id="text-basic-imenu-in-helpful-mode">
 <p>
I'm finding Wilfred Hughes's  <a href="https://github.com/Wilfred/helpful">helpful-mode</a>, well… rather helpful. However, I'm missing imenu support. Here's a hacky way to get basic imenu.
</p>


 <div id="org6fb5630" class="figure">
 <p> <img src="../images/basic-imenu-for-helpful-mode/helpful-imenu.png" alt="helpful-imenu.png" width="75%" height="75%"></img></p>
</div>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">helpful--create-imenu-index</span> ()
   <span style="color: #183691;">"Create an `</span> <span style="color: #0086b3;">imenu</span> <span style="color: #183691;">' index for helpful."</span>
  (beginning-of-buffer)
  (<span style="color: #a71d5d;">let</span> ((imenu-items '()))
    (<span style="color: #a71d5d;">while</span> (<span style="color: #a71d5d;">progn</span>
             (beginning-of-line)
              <span style="color: #969896;">;; </span> <span style="color: #969896;">Not great, but determine if looking at heading:</span>
              <span style="color: #969896;">;; </span> <span style="color: #969896;">1. if it has bold face.</span>
              <span style="color: #969896;">;; </span> <span style="color: #969896;">2. if it is capitalized.</span>
             (<span style="color: #a71d5d;">when</span> (<span style="color: #a71d5d;">and</span> (eq 'bold (face-at-point))
                        (string-match-p
                          <span style="color: #183691;">"[A-Z]"</span>
                         (buffer-substring (line-beginning-position)
                                           (line-end-position))))
               (add-to-list 'imenu-items
                            (cons (buffer-substring (line-beginning-position)
                                                    (line-end-position))
                                  (line-beginning-position))))
             (= 0 (forward-line 1))))
    imenu-items))

(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">helpful-mode-hook-function</span> ()
   <span style="color: #183691;">"A hook function for `</span> <span style="color: #0086b3;">helpful-mode</span> <span style="color: #183691;">'."</span>
  (<span style="color: #a71d5d;">setq</span> imenu-create-index-function #'helpful--create-imenu-index))

(add-hook 'helpful-mode-hook
          #'helpful-mode-hook-function)
</pre>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/basic-imenu-in-helpful-mode</link>
  <guid isPermaLink="false">http://xenodium.com/basic-imenu-in-helpful-mode</guid>
  <pubDate>Sun, 10 Sep 2017 00:00:00 +0100</pubDate>
</item>
<item>
  <title>Projectile shell dir company completion</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-projectile-shell-dir-company-completion" class="outline-2">
 <h2 id="projectile-shell-dir-company-completion"> <span class="timestamp-wrapper"> <span class="timestamp">19 August 2017</span></span> Projectile shell dir company completion</h2>
 <div class="outline-text-2" id="text-projectile-shell-dir-company-completion">
 <p>
 <a href="https://github.com/bbatsov/projectile">Projectile</a> and  <a href="https://company-mode.github.io">company</a> are just amazing Emacs packages. Projectile gives random access to files, while company completes well… anything. For shells, Emacs has a handful of options.
</p>

 <p>
Standing on the shoulders of package giants ( <a href="https://github.com/magnars/dash.el">dash</a> and  <a href="https://github.com/rejeep/f.el">f</a> included) and some elisp, we can bring random access to project directories from the shell.
</p>


 <div id="orge8880e1" class="figure">
 <p> <img src="../images/projectile-shell-dir-company-completion/company-projectile-cd.png" alt="company-projectile-cd.png" width="75%" height="75%"></img></p>
</div>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">require</span> ' <span style="color: #0086b3;">cl-lib</span>)
(<span style="color: #a71d5d;">require</span> ' <span style="color: #0086b3;">company</span>)
(<span style="color: #a71d5d;">require</span> ' <span style="color: #0086b3;">dash</span>)
(<span style="color: #a71d5d;">require</span> ' <span style="color: #0086b3;">f</span>)
(<span style="color: #a71d5d;">require</span> ' <span style="color: #0086b3;">projectile</span>)

(<span style="color: #a71d5d;">defvar-local</span>  <span style="color: #333333;">company-projectile-cd-prefix</span>  <span style="color: #183691;">"cd "</span>)

(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">company-projectile-cd</span> (command  <span style="color: #0086b3;">&optional</span> arg  <span style="color: #0086b3;">&rest</span> ignored)
   <span style="color: #183691;">"Company shell completion for any projectile path."</span>
  (<span style="color: #a71d5d;">interactive</span> (list 'interactive))
  (case command
    (<span style="color: #a71d5d;">interactive</span> (company-begin-backend 'company-projectile-cd))
    (prefix
     (company-grab-symbol-cons company-projectile-cd-prefix
                               (length company-projectile-cd-prefix)))
    (candidates
     (company-projectile-cd--candidates
      (company-grab-symbol-cons company-projectile-cd-prefix
                                (length company-projectile-cd-prefix))))
    (post-completion
     (company-projectile-cd--expand-inserted-path arg))))

(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">company-projectile-cd--candidates</span> (input)
   <span style="color: #183691;">"Return candidates for given INPUT."</span>
  (company-projectile-cd--reset-root)
  (<span style="color: #a71d5d;">when</span> (consp input)
    (<span style="color: #a71d5d;">let</span> ((search-term (substring-no-properties
                        (car input) 0 (length (car input))))
          (prefix-found (cdr input)))
      (<span style="color: #a71d5d;">when</span> prefix-found
        (<span style="color: #a71d5d;">if</span> (projectile-project-p)
            (company-projectile-cd--projectile search-term)
          (company-projectile-cd--find-fallback search-term))))))

(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">company-projectile-cd--projectile</span> (search-term)
  (-filter (<span style="color: #a71d5d;">lambda</span> (path)
             (string-match-p (regexp-quote
                              search-term)
                             path))
           (-snoc
            (projectile-current-project-dirs)
             <span style="color: #969896;">;; </span> <span style="color: #969896;">Throw project root in there also.</span>
            (projectile-project-root))))

(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">company-projectile-cd--find-fallback</span> (search-term)
  (<span style="color: #a71d5d;">ignore-errors</span>
    (-map (<span style="color: #a71d5d;">lambda</span> (path)
            (string-remove-prefix  <span style="color: #183691;">"./"</span> path))
          (apply #'process-lines
                 (list  <span style="color: #183691;">"find"</span>  <span style="color: #183691;">"."</span>  <span style="color: #183691;">"-type"</span>  <span style="color: #183691;">"d"</span>   <span style="color: #183691;">"-maxdepth"</span>  <span style="color: #183691;">"2"</span>  <span style="color: #183691;">"-iname"</span>
                       (format  <span style="color: #183691;">"</span> <span style="color: #333333;">\</span> <span style="color: #183691;">*%s</span> <span style="color: #333333;">\</span> <span style="color: #183691;">*"</span> search-term))))))

(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">company-projectile-cd--expand-inserted-path</span> (path)
   <span style="color: #183691;">"Replace relative PATH insertion with its absolute equivalent if needed."</span>
  (<span style="color: #a71d5d;">unless</span> (f-exists-p path)
    (delete-region (point) (- (point) (length path)))
    (insert (concat (projectile-project-root) path))))

(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">company-projectile-cd--reset-root</span> ()
   <span style="color: #183691;">"Reset project root. Useful when cd'ing in and out of projects."</span>
  (projectile-reset-cached-project-root)
  (<span style="color: #a71d5d;">when</span> (projectile-project-p)
    (projectile-project-root)))
</pre>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/projectile-shell-dir-company-completion</link>
  <guid isPermaLink="false">http://xenodium.com/projectile-shell-dir-company-completion</guid>
  <pubDate>Sat, 19 Aug 2017 00:00:00 +0100</pubDate>
</item>
<item>
  <title>Search/insert one-liners with Emacs helm-ag</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-search-insert-one-liners-with-emacs-helm-ag" class="outline-2">
 <h2 id="search-insert-one-liners-with-emacs-helm-ag"> <span class="timestamp-wrapper"> <span class="timestamp">07 July 2017</span></span> Search/insert one-liners with Emacs helm-ag</h2>
 <div class="outline-text-2" id="text-search-insert-one-liners-with-emacs-helm-ag">
 <p>
Emacs  <a href="https://github.com/emacs-helm/helm">helm</a> is awesome.  <a href="https://github.com/syohex/emacs-helm-ag">helm-ag</a> is double awesome. Searching for one-liners in your codebase, narrowing down with helm, and easily inserting is triple awesome.
</p>


 <div id="org0600721" class="figure">
 <p> <img src="../images/search-and-insert-one-liners-with-helm-ag/helm-ag-insert.gif" alt="helm-ag-insert.gif" width="75%" height="75%"></img></p>
</div>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">ar/helm-ag</span> (arg)
   <span style="color: #183691;">"Helm-ag search remembering last location.  With ARG, forget the last location."</span>
  (<span style="color: #a71d5d;">interactive</span>  <span style="color: #183691;">"P"</span>)
  (<span style="color: #a71d5d;">defvar</span>  <span style="color: #333333;">ar/helm-ag--default-locaction</span> nil)
  (<span style="color: #a71d5d;">setq</span> ar/helm-ag--default-locaction
                 (read-directory-name  <span style="color: #183691;">"search in: "</span> (<span style="color: #a71d5d;">if</span> arg
                                                        default-directory
                                                      ar/helm-ag--default-locaction)  <span style="color: #333333;">nil t))</span>
  (helm-do-ag ar/helm-ag--default-locaction))

(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">ar/helm-ag-insert</span> (arg)
   <span style="color: #969896;">;; </span> <span style="color: #969896;">Helm-ag and insert match.</span>
  (<span style="color: #a71d5d;">interactive</span>  <span style="color: #183691;">"P"</span>)
  (<span style="color: #a71d5d;">let*</span> ((actions (helm-make-actions
                    <span style="color: #183691;">"Insert"</span>
                   (<span style="color: #a71d5d;">lambda</span> (candidate)
                      <span style="color: #969896;">;; </span> <span style="color: #969896;">Drop file:line:column. For example:</span>
                      <span style="color: #969896;">;; </span> <span style="color: #969896;">arc_hostlink.c:13:2:#include <linux/fs.h></span>
                      <span style="color: #969896;">;; </span> <span style="color: #969896;">=> #include <linux/fs.h></span>
                     (insert (replace-regexp-in-string  <span style="color: #183691;">"^[</span> <span style="color: #a71d5d;">^</span> <span style="color: #183691;"> ]*:"</span>  <span style="color: #183691;">""</span> candidate)))))
         (helm-source-do-ag (helm-build-async-source  <span style="color: #183691;">"The Silver Searcher"</span>
                               <span style="color: #a71d5d;">:init</span> 'helm-ag--do-ag-set-command
                               <span style="color: #a71d5d;">:candidates-process</span> 'helm-ag--do-ag-candidate-process
                               <span style="color: #a71d5d;">:persistent-action</span>  'helm-ag--persistent-action
                               <span style="color: #a71d5d;">:action</span> actions
                               <span style="color: #a71d5d;">:nohighlight</span> t
                               <span style="color: #a71d5d;">:requires-pattern</span> 3
                               <span style="color: #a71d5d;">:candidate-number-limit</span> 9999
                               <span style="color: #a71d5d;">:keymap</span> helm-do-ag-map
                               <span style="color: #a71d5d;">:follow</span> (<span style="color: #a71d5d;">and</span> helm-follow-mode-persistent 1))))
    (call-interactively #'ar/helm-ag)))
</pre>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/search-insert-one-liners-with-emacs-helm-ag</link>
  <guid isPermaLink="false">http://xenodium.com/search-insert-one-liners-with-emacs-helm-ag</guid>
  <pubDate>Fri, 07 Jul 2017 00:00:00 +0100</pubDate>
</item>
<item>
  <title>GnuPG and macOS</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-gnupg-and-macos" class="outline-2">
 <h2 id="gnupg-and-macos"> <span class="timestamp-wrapper"> <span class="timestamp">23 April 2017</span></span> GnuPG and macOS</h2>
 <div class="outline-text-2" id="text-gnupg-and-macos">
 <p>
Had problems installing and using GnuPG on macOS, primarily for Emacs use:
</p>

 <pre class="example" id="orge319584">
gpg: problem with the agent: Inappropriate ioctl for device
gpg: error creating passphrase: Operation cancelled
gpg: symmetric encryption of '[stdin]' failed: Operation cancelled
</pre>

 <p>
Basic installation required:
</p>

 <div class="org-src-container">
 <pre class="src src-sh">brew install gnupg
</pre>
</div>

 <p>
But worked around the error above by using pinentry-mac (UI), instead of Emacs prompts.
</p>

 <div class="org-src-container">
 <pre class="src src-sh">brew install pinentry-mac
</pre>
</div>

 <p>
Edited ~/.gnupg/gpg-agent.conf with:
</p>

 <pre class="example" id="org95f3abd">
pinentry-program path/to/homebrew/bin/pinentry-mac
</pre>

 <p>
May need to kill gpg-agent to reload config.
</p>

 <div class="org-src-container">
 <pre class="src src-sh">gpgconf --kill gpg-agent
</pre>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/gnupg-and-macos</link>
  <guid isPermaLink="false">http://xenodium.com/gnupg-and-macos</guid>
  <pubDate>Sun, 23 Apr 2017 00:00:00 +0100</pubDate>
</item>
<item>
  <title>Fuzzy search Emacs compile history</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-fuzzy-search-emacs-compile-history" class="outline-2">
 <h2 id="fuzzy-search-emacs-compile-history"> <span class="timestamp-wrapper"> <span class="timestamp">15 September 2016</span></span> Fuzzy search Emacs compile history</h2>
 <div class="outline-text-2" id="text-fuzzy-search-emacs-compile-history">
 <p>
I wrote about  <a href="../search-bash-history-with-emacs-helm">searching bash history with Emacs Helm</a> some time ago. Since then, I've learned about  <i>completing-read</i> to generically handle simple Emacs completions (very handy for supporting Helm, Ivy, and Ido completions).
</p>

 <p>
Here's a simple way to combine  <i>completing-read</i> and the  <i>compile</i> command to enable fuzzy searching your compile history:
</p>


 <div id="orgcba4cbf" class="figure">
 <p> <img src="../images/fuzzy-search-emacs-compile-history/fuzzy_compile.gif" alt="fuzzy_compile.gif" width="75%" height="75%"></img></p>
</div>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">ar/compile-completing</span> ()
   <span style="color: #183691;">"Compile with completing options."</span>
  (<span style="color: #a71d5d;">interactive</span>)
  (<span style="color: #a71d5d;">let</span> ((compile-command (completing-read  <span style="color: #183691;">"Compile command: "</span> compile-history)))
    (compile compile-command)
    (add-to-list 'compile-history compile-command)))
</pre>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/fuzzy-search-emacs-compile-history</link>
  <guid isPermaLink="false">http://xenodium.com/fuzzy-search-emacs-compile-history</guid>
  <pubDate>Thu, 15 Sep 2016 00:00:00 +0100</pubDate>
</item>
<item>
  <title>Jumping on the Emacs 25 bandwagon</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-jumping-on-emacs-25-bandwagon" class="outline-2">
 <h2 id="jumping-on-emacs-25-bandwagon"> <span class="timestamp-wrapper"> <span class="timestamp">05 September 2016</span></span> Jumping on the Emacs 25 bandwagon</h2>
 <div class="outline-text-2" id="text-jumping-on-emacs-25-bandwagon">
 <p>
Can't miss out on all the new fun. Emacs 25 RC2 is out and lots of people already using it. Since I'm mostly on MacOS these days, installing via homebrew with –devel, gets you RC2:
</p>
 <div class="org-src-container">
 <pre class="src src-sh">brew install emacs --devel --with-cocoa --with-gnutls --with-librsvg --with-imagemagick
</pre>
</div>


 <div id="org123e106" class="figure">
 <p> <img src="../images/jumping-on-emacs-25-bandwagon/emacs25.png" alt="emacs25.png" width="75%" height="75%"></img></p>
</div>

 <p>
The only hiccup so far's been org mode failing to export, which was fixed by re-installing it (follow  <a href="https://lists.gnu.org/archive/html/emacs-orgmode/2015-08/msg00320.html">this thread</a>).</p>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/jumping-on-emacs-25-bandwagon</link>
  <guid isPermaLink="false">http://xenodium.com/jumping-on-emacs-25-bandwagon</guid>
  <pubDate>Mon, 05 Sep 2016 00:00:00 +0100</pubDate>
</item>
<item>
  <title>Emacs and emotional vocab</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-emacs-and-emotional-vocab" class="outline-2">
 <h2 id="emacs-and-emotional-vocab"> <span class="timestamp-wrapper"> <span class="timestamp">17 June 2016</span></span> Emacs and emotional vocab</h2>
 <div class="outline-text-2" id="text-emacs-and-emotional-vocab">
 <p>
Having read  <a href="http://www.nytimes.com/2016/06/05/opinion/sunday/are-you-in-despair-thats-good.html">Are You in Despair? That’s Good</a>, I was encouraged to expand my emotional vocabulary. As a  <a href="https://github.com/emacs-mirror/emacs/blob/master/lisp/play/zone.el">zone.el</a> fan (checkout  <a href="https://github.com/wasamasa/zone-nyan">nyan</a>,  <a href="https://github.com/kawabata/zone-sl">sl</a>, and  <a href="https://github.com/kawabata/zone-rainbow">rainbow</a>), I looked into writing a zone  <a href="https://github.com/emacs-mirror/emacs/blob/master/lisp/play/zone.el#L52">program</a>. When  <i>zone-when-idle</i> is set, zone acts as a screensaver of sorts. We can use this to display random emotional vocab whenever Emacs is idle for a period of time. Let's get to it…
</p>

 <p>
Zone keeps a list of programs to choose from when kicked off. Below is a basic  <i>zone-hello</i> program, along with an interactive command for previewing. Not much to these. The tiny program prepares the screen for zoning and inserts text while no input is pending.
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">zone-hello</span> ()
  (delete-other-windows)
  (<span style="color: #a71d5d;">setq</span> mode-line-format nil)
  (zone-fill-out-screen (window-width) (window-height))
  (delete-region (point-min) (point-max))
  (goto-char (point-min))
  (<span style="color: #a71d5d;">while</span> (not (input-pending-p))
    (insert  <span style="color: #183691;">"hello zone\n"</span>)
    (zone-park/sit-for (point-min) 0.2)))

(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">zone-hello-preview</span> ()
  (<span style="color: #a71d5d;">interactive</span>)
  (<span style="color: #a71d5d;">let</span> ((zone-programs [zone-hello]))
    (zone)))
</pre>
</div>

 <p>
Here's what  <i>zone-hello</i> looks like:
</p>


 <div id="org8d4cbcc" class="figure">
 <p> <img src="../images/emacs-and-emotional-vocab/minimal-zone.gif" alt="minimal-zone.gif" width="75%" height="75%"></img></p>
</div>

 <p>
Back to improving our emotional vocabulary, we'll need a dictionary for our goal. A quick search yields a potential list of  <a href="http://www.psychpage.com/learning/library/assess/feelings.html">words</a>. We can use  <a href="http://wordnet.princeton.edu/">WordNet</a> to define them while offline. These two sources will do for now. We tie it all together in  <a href="https://github.com/xenodium/dotfiles/blob/master/emacs/ar/zone-words.el">zone-words.el</a> and the resulting zone program looks as follow:
</p>


 <div id="org3cea343" class="figure">
 <p> <img src="../images/emacs-and-emotional-vocab/emotions.gif" alt="emotions.gif" width="75%" height="75%"></img></p>
</div>

 <p>
UPDATE: Just came across  <a href="http://blog.josephwilk.net/art/emacs-animation.html">Animations With Emacs</a>. A post with awesome zone examples.
</p>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/emacs-and-emotional-vocab</link>
  <guid isPermaLink="false">http://xenodium.com/emacs-and-emotional-vocab</guid>
  <pubDate>Fri, 17 Jun 2016 00:00:00 +0100</pubDate>
</item>
<item>
  <title>Emacs: Find number of days between dates</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-emacs-find-number-of-days-between-dates" class="outline-2">
 <h2 id="emacs-find-number-of-days-between-dates"> <span class="timestamp-wrapper"> <span class="timestamp">10 May 2016</span></span> Emacs: Find number of days between dates</h2>
 <div class="outline-text-2" id="text-emacs-find-number-of-days-between-dates">
 <p>
Needed to find the number of days between two dates. Emacs calendar must know this…
</p>

 <ul class="org-ul"> <li>Fire up the manual (M-x info-emacs-manual or C-h r).</li>
 <li>Info-goto-node (or g).</li>
 <li>Type "counting days" and voilá:</li>
</ul> <blockquote>
 <p>
To determine the number of days in a range, set the mark on one date
using `C-<SPC>', move point to another date, and type `M-='
(`calendar-count-days-region').  The numbers of days shown is
 <span class="underline">inclusive</span>; that is, it includes the days specified by mark and point.
</p>
</blockquote>


 <div id="orgb4c939f" class="figure">
 <p> <img src="../images/emacs-find-number-of-days-between-dates/emacs-days-between-dates.gif" alt="emacs-days-between-dates.gif" width="75%" height="75%"></img></p>
</div>

 <p>
 <i>Note: you can use the mouse to jump to another date, or "g d" (calendar-goto-date).</i></p>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/emacs-find-number-of-days-between-dates</link>
  <guid isPermaLink="false">http://xenodium.com/emacs-find-number-of-days-between-dates</guid>
  <pubDate>Tue, 10 May 2016 00:00:00 +0100</pubDate>
</item>
<item>
  <title>Emacs Objective-C tagging with RTags</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-emacs-objective-c-tagging-with-rtags" class="outline-2">
 <h2 id="emacs-objective-c-tagging-with-rtags"> <span class="timestamp-wrapper"> <span class="timestamp">28 March 2016</span></span> Emacs Objective-C tagging with RTags</h2>
 <div class="outline-text-2" id="text-emacs-objective-c-tagging-with-rtags">
</div>
 <div id="outline-container-orgb347bf4" class="outline-3">
 <h3 id="orgb347bf4">Install libclang on Mac</h3>
 <div class="outline-text-3" id="text-orgb347bf4">
 <div class="org-src-container">
 <pre class="src src-sh">brew install llvm --with-clang
</pre>
</div>
</div>
</div>

 <div id="outline-container-orga751c8b" class="outline-3">
 <h3 id="orga751c8b">Install RTags</h3>
 <div class="outline-text-3" id="text-orga751c8b">
 <div class="org-src-container">
 <pre class="src src-sh">git clone --recursive https://github.com/Andersbakken/rtags.git
 <span style="color: #a71d5d;">cd</span> rtags
cmake -DCMAKE_PREFIX_PATH=/Users/your-user-name/homebrew/opt/llvm -DCMAKE_EXPORT_COMPILE_COMMANDS=1 .
make
</pre>
</div>
</div>
</div>

 <div id="outline-container-org68bd09d" class="outline-3">
 <h3 id="org68bd09d">Start RTags daemon</h3>
 <div class="outline-text-3" id="text-org68bd09d">
 <div class="org-src-container">
 <pre class="src src-sh">path/to/rtags/bin/rdm 2> /tmp/rdm.log
</pre>
</div>
</div>
</div>

 <div id="outline-container-org5cbdb52" class="outline-3">
 <h3 id="org5cbdb52">Compilation database</h3>
 <div class="outline-text-3" id="text-org5cbdb52">
</div>
 <div id="outline-container-org52fc996" class="outline-4">
 <h4 id="org52fc996">Install xctool</h4>
 <div class="outline-text-4" id="text-org52fc996">
 <div class="org-src-container">
 <pre class="src src-sh">brew install xctool
</pre>
</div>
</div>
</div>
 <div id="outline-container-org9ffdc64" class="outline-4">
 <h4 id="org9ffdc64">Generate a compilation database</h4>
 <div class="outline-text-4" id="text-org9ffdc64">
 <div class="org-src-container">
 <pre class="src src-sh"> <span style="color: #a71d5d;">cd</span> path/to/your/objc-project
xctool -sdk iphonesimulator -arch x86_64 -scheme SomeScheme -reporter pretty -reporter json-compilation-database:compile_commands.json clean build
</pre>
</div>
</div>
</div>
</div>

 <div id="outline-container-org0ca85cb" class="outline-3">
 <h3 id="org0ca85cb">Load compilation database</h3>
 <div class="outline-text-3" id="text-org0ca85cb">
 <div class="org-src-container">
 <pre class="src src-sh">path/to/rtags/bin/rc -J path/to/your/objc-project/compile_commands.json
</pre>
</div>
</div>
</div>

 <div id="outline-container-org60afc3f" class="outline-3">
 <h3 id="org60afc3f">Install RTags Emacs package</h3>
 <div class="outline-text-3" id="text-org60afc3f">
 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">use-package</span>  <span style="color: #0086b3;">rtags</span>  <span style="color: #a71d5d;">:ensure</span> t
   <span style="color: #a71d5d;">:config</span>
  (<span style="color: #a71d5d;">setq</span> rtags-use-helm t)  <span style="color: #969896;">;; </span> <span style="color: #969896;">Optional. Enable if helm fan (I am!).</span>
  (<span style="color: #a71d5d;">setq</span> rtags-path  <span style="color: #183691;">"path/to/rtags/bin/"</span>))
</pre>
</div>
</div>
</div>

 <div id="outline-container-orgba67e9d" class="outline-3">
 <h3 id="orgba67e9d">Ready to go</h3>
 <div class="outline-text-3" id="text-orgba67e9d">
 <p>
Use any of the rtags interactive commands. For example:
</p>

 <pre class="example" id="orgc2a5215">
M-x rtags-find-symbol
</pre>
</div>
</div>

 <div id="outline-container-org223bd70" class="outline-3">
 <h3 id="org223bd70">References</h3>
 <div class="outline-text-3" id="text-org223bd70">
 <ul class="org-ul"> <li> <a href="https://github.com/Andersbakken/rtags#tldr-quickstart">RTags TLDR Quickstart</a>.</li>
 <li> <a href="http://syamajala.github.io/c-ide.html">Emacs as C++ IDE</a>.</li>
</ul></div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/emacs-objective-c-tagging-with-rtags</link>
  <guid isPermaLink="false">http://xenodium.com/emacs-objective-c-tagging-with-rtags</guid>
  <pubDate>Mon, 28 Mar 2016 00:00:00 +0100</pubDate>
</item>
<item>
  <title>Emacs lisp snippets</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-emacs-lisp-snippets" class="outline-2">
 <h2 id="emacs-lisp-snippets"> <span class="timestamp-wrapper"> <span class="timestamp">02 March 2016</span></span> Emacs lisp snippets</h2>
 <div class="outline-text-2" id="text-emacs-lisp-snippets">
</div>
 <div id="outline-container-org6a8527f" class="outline-3">
 <h3 id="org6a8527f">cl-loop for in</h3>
 <div class="outline-text-3" id="text-org6a8527f">
 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">cl-loop</span> for day in '(<span style="color: #183691;">"mon"</span>  <span style="color: #183691;">"tue"</span>  <span style="color: #183691;">"wed"</span>  <span style="color: #183691;">"thu"</span>  <span style="color: #183691;">"fri"</span>  <span style="color: #183691;">"sat"</span>  <span style="color: #183691;">"sun"</span>)
         do (print day))
</pre>
</div>

 <pre class="example" id="orgc25e957">

"mon"

"tue"

"wed"

"thu"

"fri"

"sat"

"sun"
</pre>
</div>
</div>

 <div id="outline-container-org4445ece" class="outline-3">
 <h3 id="org4445ece">cl-loop for from to</h3>
 <div class="outline-text-3" id="text-org4445ece">
 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">cl-loop</span> for x from 1 to 5
         do (print x))
</pre>
</div>

 <pre class="example" id="orgc23f428">

1

2

3

4

5
</pre>
</div>
</div>

 <div id="outline-container-orga42546c" class="outline-3">
 <h3 id="orga42546c">pcase literal matching</h3>
 <div class="outline-text-3" id="text-orga42546c">
 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">pcase</span>  <span style="color: #183691;">"word"</span>
  ('word (message  <span style="color: #183691;">"Matched 'word symbol"</span>))
  (<span style="color: #183691;">"word"</span> (message  <span style="color: #183691;">"Matched \"word\" string"</span>)))
</pre>
</div>

 <pre class="example">
Matched "word" string
</pre>
</div>
</div>

 <div id="outline-container-orgd6207d5" class="outline-3">
 <h3 id="orgd6207d5">Avoid nesting with the help of thread-first and thread-last.</h3>
 <div class="outline-text-3" id="text-orgd6207d5">
 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">thread-last</span>  <span style="color: #183691;">"12.....34"</span>
  (string-remove-prefix  <span style="color: #183691;">"1"</span>)
  (string-remove-suffix  <span style="color: #183691;">"4"</span>))
</pre>
</div>

 <pre class="example">
2.....3
</pre>
</div>
</div>

 <div id="outline-container-orgc2b70a5" class="outline-3">
 <h3 id="orgc2b70a5">Find file upwards, up parents, up hierarchy</h3>
 <div class="outline-text-3" id="text-orgc2b70a5">
 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(locate-dominating-file FILE NAME)
</pre>
</div>
</div>
</div>
 <div id="outline-container-org951a572" class="outline-3">
 <h3 id="org951a572">Find executable in PATH</h3>
 <div class="outline-text-3" id="text-org951a572">
 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(executable-find COMMAND)
</pre>
</div>
</div>
</div>
 <div id="outline-container-orgd3c9e8a" class="outline-3">
 <h3 id="orgd3c9e8a">Read string with completion (helm/ido/ivy friendly)</h3>
 <div class="outline-text-3" id="text-orgd3c9e8a">
 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(completing-read PROMPT COLLECTION  <span style="color: #0086b3;">&optional</span> PREDICATE REQUIRE-MATCH INITIAL-INPUT HIST DEF INHERIT-INPUT-METHOD)
</pre>
</div>
</div>
</div>
 <div id="outline-container-orgd5cf06f" class="outline-3">
 <h3 id="orgd5cf06f">Execute command/process and return list (similar to shell-command-to-string)</h3>
 <div class="outline-text-3" id="text-orgd5cf06f">
 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(process-lines PROGRAM  <span style="color: #0086b3;">&rest</span> ARGS)
</pre>
</div>
</div>
</div>
 <div id="outline-container-org1f9bd3a" class="outline-3">
 <h3 id="org1f9bd3a">Iterating org buffer</h3>
 <div class="outline-text-3" id="text-org1f9bd3a">
 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(org-element-map (org-element-parse-buffer) '(headline link)
  (<span style="color: #a71d5d;">lambda</span> (element)
    (<span style="color: #a71d5d;">cond</span>
     ((<span style="color: #a71d5d;">and</span> (eq (org-element-type element) 'headline)
           (= (org-element-property  <span style="color: #a71d5d;">:level</span> element) 1))
      (print  <span style="color: #183691;">"headline"</span>))
     ((eq (org-element-type element) 'link)
      (print  <span style="color: #183691;">"link"</span>)))
    nil))
</pre>
</div>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/emacs-lisp-snippets</link>
  <guid isPermaLink="false">http://xenodium.com/emacs-lisp-snippets</guid>
  <pubDate>Wed, 02 Mar 2016 00:00:00 +0000</pubDate>
</item>
<item>
  <title>Defined elisp variables matching regexp</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-defined-elisp-variables-matching-regexp" class="outline-2">
 <h2 id="defined-elisp-variables-matching-regexp"> <span class="timestamp-wrapper"> <span class="timestamp">14 February 2016</span></span> Defined elisp variables matching regexp</h2>
 <div class="outline-text-2" id="text-defined-elisp-variables-matching-regexp">
 <p>
You can use "M-x  <i>apropos-variable</i>" to get documentation for variables matching a pattern. For more flexibility, some elisp can help with getting a list of all variables matching a regexp:
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">ar/variables-matching-pattern</span> (pattern)
   <span style="color: #183691;">"Get a list of all variables matching PATTERN."</span>
  (<span style="color: #a71d5d;">let</span> ((matched-variables '()))
    (mapatoms
     (<span style="color: #a71d5d;">lambda</span> (symbol)
        <span style="color: #969896;">;; </span> <span style="color: #969896;">Symbol is variable?</span>
       (<span style="color: #a71d5d;">when</span> (<span style="color: #a71d5d;">and</span> (boundp symbol)
                  (string-match pattern (symbol-name symbol)))
         (add-to-list 'matched-variables symbol))))
    matched-variables))

(<span style="color: #a71d5d;">let</span> ((variables  <span style="color: #183691;">""</span>))
  (mapc (<span style="color: #a71d5d;">lambda</span> (variable-symbol)
          (<span style="color: #a71d5d;">setq</span> variables
                (concat variables
                        (format  <span style="color: #183691;">"%s => %s\n"</span>
                                (symbol-name variable-symbol)
                                (symbol-value variable-symbol)))))
        (ar/variables-matching-pattern  <span style="color: #183691;">"^tern-.*"</span>))
  variables)
</pre>
</div>

 <pre class="example" id="org6c6cca2">
tern-mode-keymap => (keymap (3 keymap (4 . tern-get-docs) (3 . tern-get-type) (18 . tern-rename-variable)) (27 keymap (44 . tern-pop-find-definition) (67108910 . tern-find-definition-by-name) (46 . tern-find-definition)))
tern-update-argument-hints-async => nil
tern-known-port => nil
tern-mode => nil
tern-activity-since-command => -1
tern-project-dir => nil
tern-last-point-pos => nil
tern-last-completions => nil
tern-explicit-port => nil
tern-idle-time => 2.5
tern-find-definition-stack => nil
tern-last-argument-hints => nil
tern-idle-timer => nil
tern-server => nil
tern-last-docs-url => nil
tern-buffer-is-dirty => nil
tern-command-generation => 0
tern-flash-timeout => 0.5
tern-update-argument-hints-timer => 500
tern-mode-hook => nil
tern-command => (tern)
</pre>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/defined-elisp-variables-matching-regexp</link>
  <guid isPermaLink="false">http://xenodium.com/defined-elisp-variables-matching-regexp</guid>
  <pubDate>Sun, 14 Feb 2016 00:00:00 +0000</pubDate>
</item>
<item>
  <title>Proselint via Emacs flycheck</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-proselint-via-emacs-flycheck" class="outline-2">
 <h2 id="proselint-via-emacs-flycheck"> <span class="timestamp-wrapper"> <span class="timestamp">13 February 2016</span></span> Proselint via Emacs flycheck</h2>
 <div class="outline-text-2" id="text-proselint-via-emacs-flycheck">
 <p>
Based on  <a href="http://unconj.ca/blog/linting-prose-in-emacs.html">Linting Prose in Emacs</a>…
</p>

 <p>
Needs proselint installed:
</p>

 <div class="org-src-container">
 <pre class="src src-sh">pip install proselint
</pre>
</div>

 <p>
Also needs a flycheck checker defined:
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">flycheck-define-checker</span> proselint
   <span style="color: #183691;">"A linter for prose."</span>
   <span style="color: #a71d5d;">:command</span> (<span style="color: #183691;">"proselint"</span> source-inplace)
   <span style="color: #a71d5d;">:error-patterns</span>
  ((warning line-start (file-name)  <span style="color: #183691;">":"</span> line  <span style="color: #183691;">":"</span> column  <span style="color: #183691;">": "</span>
            (id (one-or-more (not (any  <span style="color: #183691;">" "</span>))))
            (message) line-end))
   <span style="color: #a71d5d;">:modes</span> (gfm-mode
          markdown-mode
          org-mode
          text-mode))

(add-to-list 'flycheck-checkers 'proselint)
</pre>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/proselint-via-emacs-flycheck</link>
  <guid isPermaLink="false">http://xenodium.com/proselint-via-emacs-flycheck</guid>
  <pubDate>Sat, 13 Feb 2016 00:00:00 +0000</pubDate>
</item>
<item>
  <title>Doh! undo last commit (Magit edition)</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-doh-undo-last-commit-magit-edition" class="outline-2">
 <h2 id="doh-undo-last-commit-magit-edition"> <span class="timestamp-wrapper"> <span class="timestamp">11 February 2016</span></span> Doh! undo last commit (Magit edition)</h2>
 <div class="outline-text-2" id="text-doh-undo-last-commit-magit-edition">
 <p>
I previously noted  <a href="../doh-undo-last-git-commit">how to undo your last git commit (ie. soft reset)</a>. Using Magit:
</p>

 <ol class="org-ol"> <li>M-x  <i>magit-log-current</i>.</li>
 <li>Move point to prior revision.</li>
 <li>M-x  <i>magit-reset-soft</i> (defaults to revision at point).</li>
</ol> <p>
Or if you want a single function:
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">require</span> ' <span style="color: #0086b3;">magit</span>)

(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">ar/magit-soft-reset-head~1</span> ()
   <span style="color: #183691;">"Soft reset current git repo to HEAD~1."</span>
  (<span style="color: #a71d5d;">interactive</span>)
  (magit-reset-soft  <span style="color: #183691;">"HEAD~1"</span>))
</pre>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/doh-undo-last-commit-magit-edition</link>
  <guid isPermaLink="false">http://xenodium.com/doh-undo-last-commit-magit-edition</guid>
  <pubDate>Thu, 11 Feb 2016 00:00:00 +0000</pubDate>
</item>
<item>
  <title>Emacs lisp tips backlog</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-emacs-lisp-tips-backlog" class="outline-2">
 <h2 id="emacs-lisp-tips-backlog"> <span class="timestamp-wrapper"> <span class="timestamp">06 February 2016</span></span> Emacs lisp tips backlog</h2>
 <div class="outline-text-2" id="text-emacs-lisp-tips-backlog">
 <span class="modified-timestamp">   <em>updated: 27 December 2018  </em></span>
</div>
 <ul class="org-ul"> <li> <a id="orgaacc3c6"></a> <span class="todo TODO">TODO</span>  <a href="https://github.com/mola-T/signal">Signal: a library offering enriched hook-like features</a>. <br></br></li>
 <li> <a id="org522ac6c"></a> <span class="todo TODO">TODO</span>  <a href="http://mbork.pl/2016-05-15_debug-on-whatever">Debugging tips</a>. <br></br></li>
 <li> <a id="orgb764443"></a> <span class="todo TODO">TODO</span>  <a href="http://article.gmane.org/gmane.emacs.devel/202535">Examples of Emacs modules</a>. <br></br></li>
 <li> <a id="orge92ec44"></a> <span class="todo TODO">TODO</span>  <a href="https://gitlab.com/RobertCochran/neato-graph-bar">htop-like CPU and memory graphs for Emacs</a>. <br></br></li>
 <li> <a id="org9574eb2"></a> <span class="todo TODO">TODO</span>  <a href="https://github.com/mola-T/timp">Timp: multithreading library</a>. <br></br></li>
 <li> <a id="orgc12f189"></a> <span class="todo TODO">TODO</span>  <a href="http://www.wilfred.me.uk/blog/2016/04/28/effortless-major-mode-development/">Effortless Major Mode Development</a>. <br></br></li>
 <li> <a id="orgf82462b"></a> <span class="todo TODO">TODO</span>  <a href="https://github.com/tkych/cl-spark">cl-spark implementation of Zach Holman's spark and Gil Gonçalves' vspark with little extension</a>. <br></br></li>
 <li> <a id="orgb893281"></a> <span class="todo TODO">TODO</span>  <a href="http://endlessparentheses.com/new-in-emacs-25-1-map-el-library.html">map.el for map-like collections built-in as of 25.1</a>. <br></br></li>
 <li> <a id="orgee43868"></a> <span class="todo TODO">TODO</span>  <a href="https://github.com/emacs-mirror/emacs/blob/master/lisp/emacs-lisp/map.el">Standard library for key/value data structures</a>. <br></br></li>
 <li> <a id="org39f5762"></a> <span class="todo TODO">TODO</span>  <a href="http://oremacs.com/2015/01/11/pretty-elisp-regex/">Making Elisp regex look nicer</a>. <br></br></li>
 <li> <a id="orgeeb2d26"></a> <span class="todo TODO">TODO</span>  <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Porting-old-advices.html#Porting-old-advices">Adapting code using the old defadvice</a>. <br></br></li>
 <li> <a id="orgfc66344"></a> <span class="todo TODO">TODO</span>  <a href="http://endlessparentheses.com/new-on-elpa-and-in-emacs-25-1-seq-el.html">seq.el sequence library built-in as of 25.1</a>. <br></br></li>
 <li> <a id="orga5f30af"></a> <span class="todo TODO">TODO</span>  <a href="https://github.com/syohex/emacs-parson">Binding of parson JSON parser</a>. <br></br></li>
 <li> <a id="orgf431e41"></a> <span class="todo TODO">TODO</span>  <a href="http://puntoblogspot.blogspot.co.uk/2016/02/with-this-little-trick-helm-dash-gets.html?m=1">Helm-dash find-as-you-type</a>. <br></br></li>
 <li> <a id="orga761b55"></a> <span class="todo TODO">TODO</span>  <a href="http://emacs.stackexchange.com/questions/12121/org-mode-parsing-rich-html-directly-when-pasting">Org mode - Parsing rich HTML directly when pasting? (Stack Overflow)</a>. <br></br></li>
 <li> <a id="org3ccf553"></a> <span class="todo TODO">TODO</span> From  <a href="https://twitter.com/_wilfredh/status/694643167056916480">@_wilfredh</a>, use (interactive "*") for commands that edit the buffer, so they show a helpful error if the buffer is read only. <br></br></li>
</ul></div>
</div>]]></description>
  <link>http://xenodium.com/emacs-lisp-tips-backlog</link>
  <guid isPermaLink="false">http://xenodium.com/emacs-lisp-tips-backlog</guid>
  <pubDate>Sat, 06 Feb 2016 00:00:00 +0000</pubDate>
</item>
<item>
  <title>Entering accents in Emacs</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-entering-accents-in-emacs" class="outline-2">
 <h2 id="entering-accents-in-emacs"> <span class="timestamp-wrapper"> <span class="timestamp">04 February 2016</span></span> Entering accents in Emacs</h2>
 <div class="outline-text-2" id="text-entering-accents-in-emacs">
 <p>
Via Irreal's  <a href="http://irreal.org/blog/?p=4945">Entering Accented Characters in Emacs</a>, a reminder on how to enter accents using  <b>C-x 8</b>. For example:
</p>

 <pre class="example" id="org0425f86">
C-x 8 ' A -> Á
</pre>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/entering-accents-in-emacs</link>
  <guid isPermaLink="false">http://xenodium.com/entering-accents-in-emacs</guid>
  <pubDate>Thu, 04 Feb 2016 00:00:00 +0000</pubDate>
</item>
<item>
  <title>Emacs dired for batch byte compilation</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-emacs-dired-for-batch-byte-compilation" class="outline-2">
 <h2 id="emacs-dired-for-batch-byte-compilation"> <span class="timestamp-wrapper"> <span class="timestamp">01 February 2016</span></span> Emacs dired for batch byte compilation</h2>
 <div class="outline-text-2" id="text-emacs-dired-for-batch-byte-compilation">
 <p>
Recently updated org-mode and started seeing an invalid function error:
</p>

 <blockquote>
 <p>
Error (use-package): ob :config: Invalid function: org-babel-header-args-safe-fn
</p>
</blockquote>

 <p>
Just learned dired enables you to mark files and byte compile via  <i>M-x dired-do-byte-compile</i>.</p>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/emacs-dired-for-batch-byte-compilation</link>
  <guid isPermaLink="false">http://xenodium.com/emacs-dired-for-batch-byte-compilation</guid>
  <pubDate>Mon, 01 Feb 2016 00:00:00 +0000</pubDate>
</item>
<item>
  <title>Echo Emacs keybiding from function name</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-echo-emacs-keybiding-from-function-name" class="outline-2">
 <h2 id="echo-emacs-keybiding-from-function-name"> <span class="timestamp-wrapper"> <span class="timestamp">01 February 2016</span></span> Echo Emacs keybiding from function name</h2>
 <div class="outline-text-2" id="text-echo-emacs-keybiding-from-function-name">
 <p>
Picked up via Emacs Redux's  <a href="http://emacsredux.com/blog/2016/02/01/display-the-keybinding-for-a-command-with-substitute-command-keys/">Display the Keybinding for a Command With Substitute-command-keys</a>, with my own example:
</p>
 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(message (substitute-command-keys  <span style="color: #183691;">"Press \\[</span> <span style="color: #0086b3;">ar/ox-html-export</span> <span style="color: #183691;">] to export org file"</span>))
</pre>
</div>

 <pre class="example">
Press <f6> to export org file
</pre>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/echo-emacs-keybiding-from-function-name</link>
  <guid isPermaLink="false">http://xenodium.com/echo-emacs-keybiding-from-function-name</guid>
  <pubDate>Mon, 01 Feb 2016 00:00:00 +0000</pubDate>
</item>
<item>
  <title>Added Emacs zone-rainbow</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-added-emacs-zone-rainbow" class="outline-2">
 <h2 id="added-emacs-zone-rainbow"> <span class="timestamp-wrapper"> <span class="timestamp">19 January 2016</span></span> Added Emacs zone-rainbow</h2>
 <div class="outline-text-2" id="text-added-emacs-zone-rainbow">
 <p>
 <a href="http://twitter.com/kawabata">kawabata's</a>  <a href="https://github.com/kawabata/zone-rainbow">zone-rainbow</a> popped up on melpa today. Added to zone-programs. Just because :)
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">use-package</span>  <span style="color: #0086b3;">zone-rainbow</span>  <span style="color: #a71d5d;">:ensure</span> t
   <span style="color: #a71d5d;">:after</span> zone
   <span style="color: #a71d5d;">:config</span>
  (<span style="color: #a71d5d;">setq</span> zone-programs (vconcat [zone-rainbow] zone-programs)))
</pre>
</div>


 <div id="org71277e1" class="figure">
 <p> <img src="../images/added-emacs-zone-rainbow/zone-rainbow.gif" alt="zone-rainbow.gif" width="75%" height="75%"></img></p>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/added-emacs-zone-rainbow</link>
  <guid isPermaLink="false">http://xenodium.com/added-emacs-zone-rainbow</guid>
  <pubDate>Tue, 19 Jan 2016 00:00:00 +0000</pubDate>
</item>
<item>
  <title>Basic Emacs keybindings on Linux desktop</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-basic-emacs-keybindings-on-linux-desktop" class="outline-2">
 <h2 id="basic-emacs-keybindings-on-linux-desktop"> <span class="timestamp-wrapper"> <span class="timestamp">11 January 2016</span></span> Basic Emacs keybindings on Linux desktop</h2>
 <div class="outline-text-2" id="text-basic-emacs-keybindings-on-linux-desktop">
 <p>
Miss C-a, C-e in your browser and other Linux apps? You can enable the GTK Emacs key theme:
</p>
 <div class="org-src-container">
 <pre class="src src-sh">$ gsettings set org.gnome.desktop.interface gtk-key-theme  <span style="color: #183691;">"Emacs"</span>
</pre>
</div>
 <p>
or if on Cinnamon:
</p>
 <div class="org-src-container">
 <pre class="src src-sh">$ gsettings set org.cinnamon.desktop.interface gtk-key-theme Emacs
</pre>
</div>
 <p>
If your desktop environment is not running gnome-settings-daemon, start it with:
</p>
 <div class="org-src-container">
 <pre class="src src-sh">$ gnome-settings-daemon
</pre>
</div>
 <p>
More at  <a href="http://www.jefftk.com/p/emacs-keybindings-in-chrome-without-gnome">Emacs Keybindings in Chrome Without Gnome</a> and  <a href="http://promberger.info/linux/2010/02/16/how-to-get-emacs-key-bindings-in-ubuntu/">How to get Emacs key bindings in Ubuntu</a>.
</p>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/basic-emacs-keybindings-on-linux-desktop</link>
  <guid isPermaLink="false">http://xenodium.com/basic-emacs-keybindings-on-linux-desktop</guid>
  <pubDate>Mon, 11 Jan 2016 00:00:00 +0000</pubDate>
</item>
<item>
  <title>Emacs Objective-C completion with Irony</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-emacs-objective-c-completion-with-irony" class="outline-2">
 <h2 id="emacs-objective-c-completion-with-irony"> <span class="timestamp-wrapper"> <span class="timestamp">08 January 2016</span></span> Emacs Objective-C completion with Irony</h2>
 <div class="outline-text-2" id="text-emacs-objective-c-completion-with-irony">
</div>
 <div id="outline-container-orgd4fc58e" class="outline-3">
 <h3 id="orgd4fc58e">Install libclang on Mac</h3>
 <div class="outline-text-3" id="text-orgd4fc58e">
 <div class="org-src-container">
 <pre class="src src-sh">brew install llvm --with-clang
</pre>
</div>
</div>
</div>
 <div id="outline-container-orgda497c1" class="outline-3">
 <h3 id="orgda497c1">Configure Emacs</h3>
 <div class="outline-text-3" id="text-orgda497c1">
 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">use-package</span>  <span style="color: #0086b3;">irony</span>  <span style="color: #a71d5d;">:ensure</span> t
   <span style="color: #a71d5d;">:config</span>
  (add-hook 'objc-mode-hook 'irony-mode)
  (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options))

(<span style="color: #a71d5d;">use-package</span>  <span style="color: #0086b3;">company-irony</span>  <span style="color: #a71d5d;">:ensure</span> t
   <span style="color: #a71d5d;">:config</span>
  (add-hook  'objc-mode-hook (<span style="color: #a71d5d;">lambda</span> ()
                               (<span style="color: #a71d5d;">setq-local</span> company-backends '((company-irony)))))
  (add-hook 'irony-mode-hook 'company-irony-setup-begin-commands))
</pre>
</div>
</div>
</div>
 <div id="outline-container-org5f70b06" class="outline-3">
 <h3 id="org5f70b06">install irony server</h3>
 <div class="outline-text-3" id="text-org5f70b06">
 <p>
Run:
</p>
 <pre class="example" id="org269cc11">
M-x irony-install-server
</pre>
 <p>
NOTE: Needs libclang: Install with "brew install llvm –with-clang" By default, irony-install-server did not find libclang on Mac OS.  <i>irony-install-server</i> invokes cmake for you. Work around by adding:
</p>
 <pre class="example" id="org616c77a">
-DCMAKE_PREFIX_PATH=/Users/your-user-name/homebrew/opt/llvm
</pre>
 <p>
For example:
</p>
 <pre class="example" id="org71e31c0">
cmake -DCMAKE_PREFIX_PATH=/Users/your-user-name/homebrew/opt/llvm -DCMAKE_INSTALL_PREFIX\=/Users/your-user-name/.emacs.d/irony/ /Users/your-user-name/.emacs.d/elpa/irony-20160106.1223/server && cmake --build . --use-stderr --config Release --target install
</pre>
</div>
</div>
 <div id="outline-container-org38d6f18" class="outline-3">
 <h3 id="org38d6f18">Compilation database</h3>
 <div class="outline-text-3" id="text-org38d6f18">
</div>
 <div id="outline-container-org7e51cb0" class="outline-4">
 <h4 id="org7e51cb0">Install xctool</h4>
 <div class="outline-text-4" id="text-org7e51cb0">
 <div class="org-src-container">
 <pre class="src src-sh">brew install xctool
</pre>
</div>
</div>
</div>
 <div id="outline-container-org96253ed" class="outline-4">
 <h4 id="org96253ed">Generate compilation database</h4>
 <div class="outline-text-4" id="text-org96253ed">
 <div class="org-src-container">
 <pre class="src src-sh">xctool -sdk iphonesimulator -arch x86_64 -scheme SomeScheme -reporter pretty -reporter json-compilation-database:compile_commands.json clean build
</pre>
</div>
</div>
</div>
</div>
 <div id="outline-container-org3140694" class="outline-3">
 <h3 id="org3140694">Set Irony's database path</h3>
 <div class="outline-text-3" id="text-org3140694">
 <blockquote>
 <p>
M-x irony-cdb-json-add-compile-commands-path
</p>
</blockquote>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/emacs-objective-c-completion-with-irony</link>
  <guid isPermaLink="false">http://xenodium.com/emacs-objective-c-completion-with-irony</guid>
  <pubDate>Fri, 08 Jan 2016 00:00:00 +0000</pubDate>
</item>
<item>
  <title>Emacs highlight-symbol-mode</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-emacs-highlight-symbol-mode" class="outline-2">
 <h2 id="emacs-highlight-symbol-mode"> <span class="timestamp-wrapper"> <span class="timestamp">03 January 2016</span></span> Emacs highlight-symbol-mode</h2>
 <div class="outline-text-2" id="text-emacs-highlight-symbol-mode">
 <p>
Been a fan of  <a href="https://github.com/fgeller/highlight-thing.el">highlight-thing-mode</a>. It automatically highlights all instances of symbol at point. Today, I gave  <a href="https://github.com/nschum/highlight-symbol.el">highlight-symbol</a> a try. Similar concept, but also adds the ability to jump to next/previous instances of symbol at point.
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">use-package</span>  <span style="color: #0086b3;">highlight-symbol</span>  <span style="color: #a71d5d;">:ensure</span> t
   <span style="color: #a71d5d;">:config</span>
  (set-face-attribute 'highlight-symbol-face nil
                       <span style="color: #a71d5d;">:background</span>  <span style="color: #183691;">"default"</span>
                       <span style="color: #a71d5d;">:foreground</span>  <span style="color: #183691;">"#FA009A"</span>)
  (<span style="color: #a71d5d;">setq</span> highlight-symbol-idle-delay 0)
  (<span style="color: #a71d5d;">setq</span> highlight-symbol-on-navigation-p t)
  (add-hook 'prog-mode-hook #'highlight-symbol-mode)
  (add-hook 'prog-mode-hook #'highlight-symbol-nav-mode))
</pre>
</div>


 <div id="org84b6412" class="figure">
 <p> <img src="../images/emacs-highlight-symbol-mode/highlight-symbol.gif" alt="highlight-symbol.gif" width="75%" height="75%"></img></p>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/emacs-highlight-symbol-mode</link>
  <guid isPermaLink="false">http://xenodium.com/emacs-highlight-symbol-mode</guid>
  <pubDate>Sun, 03 Jan 2016 00:00:00 +0000</pubDate>
</item>
<item>
  <title>Find in $PATH with type and which</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-find-in-path-with-type-and-which" class="outline-2">
 <h2 id="find-in-path-with-type-and-which"> <span class="timestamp-wrapper"> <span class="timestamp">30 December 2015</span></span> Find in $PATH with type and which</h2>
 <div class="outline-text-2" id="text-find-in-path-with-type-and-which">
 <p>
I typically use  <i>which</i> to figure out the first binary found in $PATH:
</p>
 <div class="org-src-container">
 <pre class="src src-sh"> <span style="color: #a71d5d;">which</span> -a emacsclient
</pre>
</div>

 <pre class="example">
/Users/user/homebrew/bin/emacsclient
/usr/bin/emacsclient
</pre>


 <p>
I always forget about  <i>type</i> though:
</p>

 <div class="org-src-container">
 <pre class="src src-sh"> <span style="color: #a71d5d;">type</span> -a emacsclient
</pre>
</div>

 <pre class="example">
emacsclient is /Users/user/homebrew/bin/emacsclient
emacsclient is /usr/bin/emacsclient
</pre>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/find-in-path-with-type-and-which</link>
  <guid isPermaLink="false">http://xenodium.com/find-in-path-with-type-and-which</guid>
  <pubDate>Wed, 30 Dec 2015 00:00:00 +0000</pubDate>
</item>
<item>
  <title>Clojure bookmarks</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-clojure-bookmarks" class="outline-2">
 <h2 id="clojure-bookmarks"> <span class="timestamp-wrapper"> <span class="timestamp">25 December 2015</span></span> Clojure bookmarks</h2>
 <div class="outline-text-2" id="text-clojure-bookmarks">
 <span class="modified-timestamp">   <em>updated: 23 October 2018  </em></span>
 <ul class="org-ul"> <li> <a href="http://swannodette.github.io/2015/12/23/year-in-review/">2015 in review</a>.</li>
 <li> <a href="http://www.clojurestacks.com/misc/2018/05/06/a-call-for-clojure-stacks.html">A call for Clojure stacks · Clojure Stacks</a>.</li>
 <li> <a href="https://github.com/nrepl/nrepl">GitHub - nrepl/nrepl: A Clojure network REPL that provides a server and client, along with some common APIs of use to IDEs and other tools that may need to evaluate Clojure code in remote environments.</a>.</li>
</ul></div>
</div>
</div>]]></description>
  <link>http://xenodium.com/clojure-bookmarks</link>
  <guid isPermaLink="false">http://xenodium.com/clojure-bookmarks</guid>
  <pubDate>Fri, 25 Dec 2015 00:00:00 +0000</pubDate>
</item>
<item>
  <title>Search bash history with Emacs helm</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-search-bash-history-with-emacs-helm" class="outline-2">
 <h2 id="search-bash-history-with-emacs-helm"> <span class="timestamp-wrapper"> <span class="timestamp">20 December 2015</span></span> Search bash history with Emacs helm</h2>
 <div class="outline-text-2" id="text-search-bash-history-with-emacs-helm">
 <p>
Following up from  <a href="../change-emacs-shells-cwd-with-helm-projectile">changing CWD with helm projectile</a>, here's a way to search your bash history with helm:
</p>


 <div id="org8585a13" class="figure">
 <p> <img src="../images/search-bash-history-with-emacs-helm/helm-bash-history.gif" alt="helm-bash-history.gif" width="75%" height="75%"></img></p>
</div>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">ar/helm-helm</span> (title candidates on-select-function)
   <span style="color: #183691;">"Helm with TITLE CANDIDATES and ON-SELECT-FUNCTION."</span>
  (helm  <span style="color: #a71d5d;">:sources</span> `((name . ,title)
                   (candidates . ,candidates)
                   (action . ,on-select-function))
         <span style="color: #a71d5d;">:buffer</span>  <span style="color: #183691;">"*helm-exec*"</span>
         <span style="color: #a71d5d;">:candidate-number-limit</span> 10000))

(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">ar/shell-send-command</span> (command)
   <span style="color: #183691;">"Send COMMAND to shell mode."</span>
  (assert (string-equal mode-name  <span style="color: #183691;">"Shell"</span>) nil  <span style="color: #183691;">"Not in Shell mode"</span>)
  (goto-char (point-max))
  (comint-kill-input)
  (insert command)
  (comint-send-input))

(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">ar/helm-shell-search-history</span> ()
   <span style="color: #183691;">"Narrow down bash history with helm."</span>
  (<span style="color: #a71d5d;">interactive</span>)
  (assert (string-equal mode-name  <span style="color: #183691;">"Shell"</span>) nil  <span style="color: #183691;">"Not in Shell mode"</span>)
  (ar/helm-helm  <span style="color: #183691;">"bash history"</span>
                (<span style="color: #a71d5d;">with-temp-buffer</span>
                  (insert-file-contents  <span style="color: #183691;">"~/.bash_history"</span>)
                  (reverse
                   (delete-dups
                    (split-string (buffer-string)  <span style="color: #183691;">"\n"</span>))))
                #'ar/shell-send-command))
</pre>
</div>

 <p>
Bonus: Replace existing M-r binding to use ar/helm-shell-search-history.
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">bind-key</span>  <span style="color: #183691;">"M-r"</span> #'ar/helm-shell-search-history shell-mode-map)
</pre>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/search-bash-history-with-emacs-helm</link>
  <guid isPermaLink="false">http://xenodium.com/search-bash-history-with-emacs-helm</guid>
  <pubDate>Sun, 20 Dec 2015 00:00:00 +0000</pubDate>
</item>
<item>
  <title>Drill down Emacs dired with dired-subtree</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-drill-down-emacs-dired-with-dired-subtree" class="outline-2">
 <h2 id="drill-down-emacs-dired-with-dired-subtree"> <span class="timestamp-wrapper"> <span class="timestamp">14 December 2015</span></span> Drill down Emacs dired with dired-subtree</h2>
 <div class="outline-text-2" id="text-drill-down-emacs-dired-with-dired-subtree">
 <p>
JCS, from  <a href="http://irreal.org/blog">Irreal</a>, recently  <a href="http://irreal.org/blog/?p%3D4777">highlighted</a> fuco's  <a href="https://github.com/Fuco1/dired-hacks">dired-hacks</a>.  <a href="https://github.com/Fuco1/dired-hacks/blob/master/dired-subtree.el">dired-subtree</a> is super handy for drilling subdirectories down. Bound <tab> and <backtab> to toggle and cycle subtrees.
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">use-package</span>  <span style="color: #0086b3;">dired-subtree</span>  <span style="color: #a71d5d;">:ensure</span> t
   <span style="color: #a71d5d;">:after</span> dired
   <span style="color: #a71d5d;">:config</span>
  (<span style="color: #a71d5d;">bind-key</span>  <span style="color: #183691;">"<tab>"</span> #'dired-subtree-toggle dired-mode-map)
  (<span style="color: #a71d5d;">bind-key</span>  <span style="color: #183691;">"<backtab>"</span> #'dired-subtree-cycle dired-mode-map))
</pre>
</div>


 <div id="org4e397e6" class="figure">
 <p> <img src="../images/drill-down-emacs-dired-with-dired-subtree/dired-subtree.gif" alt="dired-subtree.gif" width="75%" height="75%"></img></p>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/drill-down-emacs-dired-with-dired-subtree</link>
  <guid isPermaLink="false">http://xenodium.com/drill-down-emacs-dired-with-dired-subtree</guid>
  <pubDate>Mon, 14 Dec 2015 00:00:00 +0000</pubDate>
</item>
<item>
  <title>Emacs text faces</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-emacs-text-faces" class="outline-2">
 <h2 id="emacs-text-faces"> <span class="timestamp-wrapper"> <span class="timestamp">12 December 2015</span></span> Emacs text faces</h2>
 <div class="outline-text-2" id="text-emacs-text-faces">
 <ul class="org-ul"> <li>Text faces = Text styles.</li>
 <li>Face attributes: font, height, weight, slant, foreground/background color, and underlining or overlining.</li>
 <li>Font lock mode automatically assigns faces to text.</li>
 <li>M-x list-faces-display: Shows faces defined.</li>
 <li>M-x helm-colors: Also handy.</li>
 <li>Unspecified attributes are taken from 'default' face.</li>
</ul></div>
</div>
</div>]]></description>
  <link>http://xenodium.com/emacs-text-faces</link>
  <guid isPermaLink="false">http://xenodium.com/emacs-text-faces</guid>
  <pubDate>Sat, 12 Dec 2015 00:00:00 +0000</pubDate>
</item>
<item>
  <title>Installing Emacs spaceline</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-installing-emacs-spaceline" class="outline-2">
 <h2 id="installing-emacs-spaceline"> <span class="timestamp-wrapper"> <span class="timestamp">30 November 2015</span></span> Installing Emacs spaceline</h2>
 <div class="outline-text-2" id="text-installing-emacs-spaceline">
 <p>
Gave  <a href="https://github.com/TheBB/spaceline/">Spaceline</a> a try.  <a href="https://github.com/syl20bnr/spacemacs">Spacemacs</a>'s powerline theme. Setup was super simple (Thanks  <a href="https://github.com/TheBB">Eivind Fonn</a> and  <a href="https://github.com/syl20bnr/spacemacs">Sylvain Benner</a>):
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">use-package</span>  <span style="color: #0086b3;">spaceline</span>  <span style="color: #a71d5d;">:ensure</span> t
   <span style="color: #a71d5d;">:config</span>
  (<span style="color: #a71d5d;">use-package</span>  <span style="color: #0086b3;">spaceline-config</span>
     <span style="color: #a71d5d;">:config</span>
    (spaceline-toggle-minor-modes-off)
    (spaceline-toggle-buffer-encoding-off)
    (spaceline-toggle-buffer-encoding-abbrev-off)
    (<span style="color: #a71d5d;">setq</span> powerline-default-separator 'rounded)
    (<span style="color: #a71d5d;">setq</span> spaceline-highlight-face-func 'spaceline-highlight-face-evil-state)
    (spaceline-define-segment line-column
       <span style="color: #183691;">"The current line and column numbers."</span>
       <span style="color: #183691;">"l:%l c:%2c"</span>)
    (spaceline-define-segment time
       <span style="color: #183691;">"The current time."</span>
      (format-time-string  <span style="color: #183691;">"%H:%M"</span>))
    (spaceline-define-segment date
       <span style="color: #183691;">"The current date."</span>
      (format-time-string  <span style="color: #183691;">"%h %d"</span>))
    (spaceline-toggle-time-on)
    (spaceline-emacs-theme 'date 'time))
</pre>
</div>


 <div id="orgf263c38" class="figure">
 <p> <img src="../images/installing-emacs-spaceline/spaceline.png" alt="spaceline.png" width="75%" height="75%"></img></p>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/installing-emacs-spaceline</link>
  <guid isPermaLink="false">http://xenodium.com/installing-emacs-spaceline</guid>
  <pubDate>Mon, 30 Nov 2015 00:00:00 +0000</pubDate>
</item>
<item>
  <title>package.el incomprehensible buffer</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-package-el-incomprehensible-buffer" class="outline-2">
 <h2 id="package-el-incomprehensible-buffer"> <span class="timestamp-wrapper"> <span class="timestamp">29 November 2015</span></span> package.el incomprehensible buffer</h2>
 <div class="outline-text-2" id="text-package-el-incomprehensible-buffer">
 <p>
Came across "incomprehensible buffer" error in package.el.  <a href="http://osdir.com/ml/general/2015-11/msg22232.html">Workaround patch</a>:
</p>
 <div class="org-src-container">
 <pre class="src src-emacs-lisp">--- a/lisp/emacs-lisp/package.el
+++ b/lisp/emacs-lisp/package.el
@@ -1161,6 +1161,7 @@ package--with-work-buffer
(<span style="color: #a71d5d;">let*</span> ((url (concat ,url-1 ,file))
       (callback (<span style="color: #a71d5d;">lambda</span> (status)
                   (<span style="color: #a71d5d;">let</span> ((b (current-buffer)))
+                    (goto-char (point-min))
                     (<span style="color: #a71d5d;">unwind-protect</span> (wrap-errors
                                      (<span style="color: #a71d5d;">when-let</span> ((er (plist-get
                                                      status  <span style="color: #a71d5d;">:error</span>)))
                                        (<span style="color: #333333;">error</span>  <span style="color: #183691;">"Error retrieving: %s %S"</span> url er))
</pre>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/package-el-incomprehensible-buffer</link>
  <guid isPermaLink="false">http://xenodium.com/package-el-incomprehensible-buffer</guid>
  <pubDate>Sun, 29 Nov 2015 00:00:00 +0000</pubDate>
</item>
<item>
  <title>Installing Emacs 25 devel on Mac OS X</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-installing-emacs-on-mac-os-x" class="outline-2">
 <h2 id="installing-emacs-on-mac-os-x"> <span class="timestamp-wrapper"> <span class="timestamp">26 November 2015</span></span> Installing Emacs 25 devel on Mac OS X</h2>
 <div class="outline-text-2" id="text-installing-emacs-on-mac-os-x">
</div>
 <div id="outline-container-org1f6f049" class="outline-3">
 <h3 id="org1f6f049">Stable</h3>
 <div class="outline-text-3" id="text-org1f6f049">
 <div class="org-src-container">
 <pre class="src src-sh">brew update
brew install emacs --HEAD --use-git-head --with-cocoa --with-srgb --with-gnutls
brew linkapps emacs
</pre>
</div>
</div>
</div>
 <div id="outline-container-org944cebf" class="outline-3">
 <h3 id="org944cebf">Development</h3>
 <div class="outline-text-3" id="text-org944cebf">
 <div class="org-src-container">
 <pre class="src src-sh">  brew update
  brew install emacs --devel --with-cocoa --with-srgb --with-gnutls
  brew linkapps emacs
 <span style="color: #a71d5d;">then</span>
</pre>
</div>
 <p>
Had problems loading seq. Removed byte-compiled packages:
</p>
 <div class="org-src-container">
 <pre class="src src-sh">$ find ~/.emacs.d/elpa -iname *.elc -exec rm  <span style="color: #183691;">'{}'</span>  <span style="color: #183691;">\;</span>
</pre>
</div>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/installing-emacs-on-mac-os-x</link>
  <guid isPermaLink="false">http://xenodium.com/installing-emacs-on-mac-os-x</guid>
  <pubDate>Thu, 26 Nov 2015 00:00:00 +0000</pubDate>
</item>
<item>
  <title>Recover from an unresponsive Emacs</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-recover-from-an-unresponsive-emacs" class="outline-2">
 <h2 id="recover-from-an-unresponsive-emacs"> <span class="timestamp-wrapper"> <span class="timestamp">04 November 2015</span></span> Recover from an unresponsive Emacs</h2>
 <div class="outline-text-2" id="text-recover-from-an-unresponsive-emacs">
 <p>
 <a href="https://twitter.com/_wilfredh">Wilfred Hughes</a> has a handy  <a href="https://twitter.com/_wilfredh/status/659499112677642242?refsrc%3Demail&s%3D11">tip</a> to bail you out of a hung Emacs instance:
</p>

 <div class="org-src-container">
 <pre class="src src-sh">pkill -SIGUSR2 emacs
</pre>
</div>

 <p>
ps. Not had a chance to try it, but next time it happens…
</p>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/recover-from-an-unresponsive-emacs</link>
  <guid isPermaLink="false">http://xenodium.com/recover-from-an-unresponsive-emacs</guid>
  <pubDate>Wed, 04 Nov 2015 00:00:00 +0000</pubDate>
</item>
<item>
  <title>Get Emacs to gather links in posts</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-get-emacs-to-gather-links-in-posts" class="outline-2">
 <h2 id="get-emacs-to-gather-links-in-posts"> <span class="timestamp-wrapper"> <span class="timestamp">17 October 2015</span></span> Get Emacs to gather links in posts</h2>
 <div class="outline-text-2" id="text-get-emacs-to-gather-links-in-posts">
 <p>
Comments in posts can be a great source of recommendations. Here's a way to extract post links using Emacs and  <a href="http://github.com/zweifisch/enlive">enlive</a>.
</p>


 <div id="org40d6fba" class="figure">
 <p> <img src="../images/get-emacs-to-gather-urls-in-posts/emacs-enlive-url-fetch.gif" alt="emacs-enlive-url-fetch.gif" width="75%" height="75%"></img></p>
</div>
 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">require</span> ' <span style="color: #0086b3;">enlive</span>)  <span style="color: #969896;">;; </span> <span style="color: #969896;">https://github.com/zweifisch/enlive</span>
(<span style="color: #a71d5d;">require</span> ' <span style="color: #0086b3;">org</span>)

(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">ar/input-clipboard-url-or-prompt</span> ()
   <span style="color: #183691;">"Return a URL from clipboard or prompt user for one."</span>
  (<span style="color: #a71d5d;">let*</span> ((clipboard (current-kill 0))
         (url (<span style="color: #a71d5d;">if</span> (string-match  <span style="color: #183691;">"^https?://"</span> clipboard)
                  clipboard
                (read-string  <span style="color: #183691;">"URL: "</span>))))
    (<span style="color: #a71d5d;">unless</span> (string-match  <span style="color: #183691;">"^https?://"</span> url)
      (<span style="color: #333333;">error</span>  <span style="color: #183691;">"Not a URL"</span>))
    url))

(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">ar/url-fetch-anchor-elements</span> (url)
   <span style="color: #183691;">"Fetch anchor elements in URL as list of alist:</span>
 <span style="color: #183691;">\((title . \"my title\")</span>
 <span style="color: #183691;"> (url . \"http://some.location.com\"))."</span>
  (<span style="color: #a71d5d;">let</span> ((elements (enlive-query-all (enlive-fetch url) [a])))
    (mapcar (<span style="color: #a71d5d;">lambda</span> (element)
              `((title . ,(enlive-text element))
                (url . ,(enlive-attr element 'href))))
            elements)))

(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">ar/url-view-links-at</span> ()
   <span style="color: #183691;">"View external links in HTML from prompted URL or clipboard."</span>
  (<span style="color: #a71d5d;">interactive</span>)
  (<span style="color: #a71d5d;">with-current-buffer</span> (get-buffer-create  <span style="color: #183691;">"*links*"</span>)
    (org-mode)
    (view-mode -1)
    (erase-buffer)
    (mapc (<span style="color: #a71d5d;">lambda</span> (anchor)
            (<span style="color: #a71d5d;">let-alist</span> anchor
              (<span style="color: #a71d5d;">when</span> (<span style="color: #a71d5d;">and</span> .url (string-match  <span style="color: #183691;">"^http"</span> .url))
                (insert (org-make-link-string .url
                                              .title)  <span style="color: #333333;">"\n"</span> <span style="color: #333333;">))))</span>
          (ar/url-fetch-anchor-elements
           (ar/input-clipboard-url-or-prompt)))
    (delete-duplicate-lines (point-min) (point-max))
    (goto-char (point-min))
    (toggle-truncate-lines +1)
    (view-mode +1)
(switch-to-buffer (current-buffer))))
</pre>
</div>

 <p>
UPDATE(2019-04-13): Refreshed post with latest code from my  <a href="https://github.com/xenodium/dotsies/blob/9cf32157c5fec140218898dfcb11e74f623fec6c/emacs/ar/ar-url.el#L35">init</a>. Thanks to  <a href="https://twitter.com/sjig">Gĳs</a> for pinging.
</p>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/get-emacs-to-gather-links-in-posts</link>
  <guid isPermaLink="false">http://xenodium.com/get-emacs-to-gather-links-in-posts</guid>
  <pubDate>Sat, 17 Oct 2015 00:00:00 +0100</pubDate>
</item>
<item>
  <title>Change Emacs shell&apos;s CWD with helm projectile</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-change-emacs-shells-cwd-with-helm-projectile" class="outline-2">
 <h2 id="change-emacs-shells-cwd-with-helm-projectile"> <span class="timestamp-wrapper"> <span class="timestamp">08 October 2015</span></span> Change Emacs shell's CWD with helm projectile</h2>
 <div class="outline-text-2" id="text-change-emacs-shells-cwd-with-helm-projectile">
 <p>
If using Emacs shell and helm projectile, you can wire these up to quickly change your current working directory.
</p>


 <div id="org0f7936d" class="figure">
 <p> <img src="../images/change-emacs-shells-cwd-with-helm-projectile/change-cwd-with-helm-projectile.gif" alt="change-cwd-with-helm-projectile.gif" width="75%" height="75%"></img></p>
</div>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">require</span> ' <span style="color: #0086b3;">helm-projectile</span>)

(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">ar/shell-cd</span> (dir-path)
 <span style="color: #183691;">"Like shell-pop--cd-to-cwd-shell, but without recentering."</span>
  (<span style="color: #a71d5d;">unless</span> (string-equal mode-name  <span style="color: #183691;">"Shell"</span>)
    (<span style="color: #333333;">error</span>  <span style="color: #183691;">"Not in Shell mode"</span>))
  (message mode-name)
  (goto-char (point-max))
  (comint-kill-input)
  (insert (concat  <span style="color: #183691;">"cd "</span> (shell-quote-argument dir-path)))
  (<span style="color: #a71d5d;">let</span> ((comint-process-echoes t))
    (comint-send-input)))

(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">ar/helm-projectile-shell-cd</span> ()
   <span style="color: #183691;">"Change shell current working directory using helm projectile."</span>
  (<span style="color: #a71d5d;">interactive</span>)
  (<span style="color: #a71d5d;">unless</span> (string-equal mode-name  <span style="color: #183691;">"Shell"</span>)
    (<span style="color: #333333;">error</span>  <span style="color: #183691;">"Not in Shell mode"</span>))
  (<span style="color: #a71d5d;">let</span> ((helm-dir-source (copy-tree  helm-source-projectile-directories-list)))
    (add-to-list 'helm-dir-source '(action . ar/shell-cd))
    (add-to-list 'helm-dir-source '(keymap . nil))
    (add-to-list 'helm-dir-source '(header-line .  <span style="color: #183691;">"cd to directory..."</span>))
    (helm  <span style="color: #a71d5d;">:sources</span> helm-dir-source
           <span style="color: #a71d5d;">:buffer</span>  <span style="color: #183691;">"*helm-dirs*"</span>
           <span style="color: #a71d5d;">:candidate-number-limit</span> 10000)))
</pre>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/change-emacs-shells-cwd-with-helm-projectile</link>
  <guid isPermaLink="false">http://xenodium.com/change-emacs-shells-cwd-with-helm-projectile</guid>
  <pubDate>Thu, 08 Oct 2015 00:00:00 +0100</pubDate>
</item>
<item>
  <title>React bookmarks</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-react-bookmarks" class="outline-2">
 <h2 id="react-bookmarks"> <span class="timestamp-wrapper"> <span class="timestamp">18 September 2015</span></span> React bookmarks</h2>
 <div class="outline-text-2" id="text-react-bookmarks">
 <span class="modified-timestamp">   <em>updated: 12 July 2018  </em></span>
 <ul class="org-ul"> <li> <a href="https://medium.com/dailyjs/11-mistakes-ive-made-during-react-native-redux-app-development-8544e2be9a9">11 mistakes I’ve made during React Native / Redux app development</a>.</li>
 <li> <a href="https://news.ycombinator.com/item?id=10962784">9 things every React.js beginner should know (Hacker News)</a>.</li>
 <li> <a href="https://camjackson.net/post/9-things-every-reactjs-beginner-should-know">9 things every React.js beginner should know</a>.</li>
 <li> <a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/">A Complete Guide to Flexbox</a>.</li>
 <li> <a href="https://github.com/wix/react-native-navigation">A complete native navigation solution for React Native with optional redux support - nav bars, tabs, drawer, modals</a>.</li>
 <li> <a href="http://mrn.js.org/">A Material Design style React Native component library</a>.</li>
 <li> <a href="https://github.com/syrusakbary/react-native-refresher/blob/master/README.md">A pull to refresh ListView for React Native</a>.</li>
 <li> <a href="http://nerds.airbnb.com/facebook-react-native/">Adam Wolf's React Native talk</a>.</li>
 <li> <a href="http://moduscreate.com/aligning-children-using-flexbox-in-react-native/">Aligning Children using Flexbox in React Native</a>.</li>
 <li> <a href="https://egghead.io/lessons/react-applying-basic-styles-in-react-native">Applying baisc styles in react native (video)</a>.</li>
 <li> <a href="https://egghead.io/lessons/react-applying-basic-styles-in-react-native">Applying Basic Styles in React Native</a>.</li>
 <li> <a href="https://twitter.com/floydophone/status/649786438330945536">Avoid premature fluxing</a>.</li>
 <li> <a href="https://github.com/enaqx/awesome-react/">Awesome React: a collection of awesome things regarding React ecosystem</a>.</li>
 <li> <a href="https://github.com/babel/babel-eslint">babel-eslint</a>.</li>
 <li> <a href="https://medium.com/infinite-red/beginner-s-guide-to-using-cocoapods-with-react-native-46cb4d372995#.i87ebbwl0">Beginner’s Guide to Using CocoaPods with React Native</a>.</li>
 <li> <a href="https://medium.com/delivery-com-engineering/react-native-in-an-existing-ios-app-delivered-874ba95a3c52#.kin2ke23s">Beyong React Native's "getting started guide"</a>.</li>
 <li> <a href="http://blog.bonnieeisenman.com/">Bonnie Eisenman's blog (some react)</a>.</li>
 <li> <a href="https://corbt.com/posts/2015/12/22/breaking-up-heavy-processing-in-react-native.html">Breaking up Heavy Processing in React Native (Blog post)</a>.</li>
 <li> <a href="https://www.youtube.com/watch?v=cI9bDvDEsYE">Brent Vatne - Building li.st for Android with Exponent and React Native at react-europe 2016</a>.</li>
 <li> <a href="http://tadeuzagallo.com/blog/react-native-bridge/">Bridging in React Native: An in-depth look into React Native's core</a>.</li>
 <li> <a href="http://tech.taskrabbit.com/blog/2015/10/18/building-react-native-apps/">Building React Native Apps</a>.</li>
 <li> <a href="http://makeitopen.com/tutorials/building-the-f8-app">Bulding the F8 app</a>.</li>
 <li> <a href="https://github.com/adamterlson/cairn">Cairn: a tiny library for React Native replacing default styling syntax</a>.</li>
 <li> <a href="https://medium.com/the-exponent-log/coding-apps-with-react-native-at-exponent-7a5922da27bf#.udrk6kz05">Coding Apps with React Native at Exponent</a>.</li>
 <li> <a href="http://codewinds.com/blog/2015-04-02-emacs-flycheck-eslint-jsx.html">Configuring Emacs to use eslint and babel with flycheck for javascript and React.js JSX</a>.</li>
 <li> <a href="https://github.com/markerikson/react-redux-links">Curated tutorial and resource links I've collected on React, Redux, ES6, and more</a>.</li>
 <li> <a href="https://www.youtube.com/watch?v=xsSnOQynTHs">Dan Abramov - Live React: Hot Reloading with Time Travel at react-europe 2015</a>.</li>
 <li> <a href="https://medium.com/@shaheenghiassy/deep-diving-react-native-debugging-ea406ed3a691">Deep Diving React Native Debugging</a>.</li>
 <li> <a href="http://ilikekillnerds.com/2015/02/developing-react-js-components-using-es6/">Developing React.js Components Using ES6</a>.</li>
 <li> <a href="https://github.com/rebeccahughes/react-native-device-info">Device Information for React Native iOS and Android</a>.</li>
 <li> <a href="https://engineering.hexacta.com/didact-learning-how-react-works-by-building-it-from-scratch-51007984e5c5">Didact: a DIY guide to build your own React – Hexacta Engineering</a>.</li>
 <li> <a href="http://ejohn.org/blog/ecmascript-5-strict-mode-json-and-more/">ECMAScript 5 Strict Mode, JSON, and More</a>.</li>
 <li> <a href="https://github.com/Intellicode/eslint-plugin-react-native">ESLint plugin for React Native</a>.</li>
 <li> <a href="https://github.com/gcazaciuc/eslint-plugin-flowtype">eslint-plugin-flowtype</a>.</li>
 <li> <a href="https://exponentjs.com/">Exponentjs</a>.</li>
 <li> <a href="https://github.com/coodoo/flowery">Flowery: prettifies the result generated by Facebook Flow</a>.</li>
 <li> <a href="http://blog.krawaller.se/img/flux-diagram.png">Flux diagram</a>.</li>
 <li> <a href="https://egghead.io/series/getting-started-with-redux">Getting Started with Redux (30 lessons)</a>.</li>
 <li> <a href="https://gist.github.com/joshdover/235714771d94509a83609b16d232014a">Idiomatic React Testing Patterns</a>.</li>
 <li> <a href="https://github.com/facebook/react-native/commit/1303e6d0392e8bc4da1198c98fc8cd7ad488b81c">Implement XHR timeout for Android and IOS natively</a>.</li>
 <li> <a href="https://github.com/facebook/react-native/commit/e4c53c28aea7e067e48f5c8c0100c7cafc031b06">Improved shadow performance on iOS</a>.</li>
 <li> <a href="https://news.ycombinator.com/item?id=11093275">Learn Raw React – No JSX, No Flux, No ES6, No Webpack (Hacker News)</a>.</li>
 <li> <a href="https://github.com/DianQK/LearnRxSwift/blob/master/README.md">LearnRxSwift</a>.</li>
 <li> <a href="https://github.com/facebook/react-native/issues/499#issuecomment-128836161">ListView rendering issue</a>.</li>
 <li> <a href="https://github.com/marcshilling/react-native-image-picker">Native image/photo picker for react native</a>.</li>
 <li> <a href="https://www.youtube.com/watch?v=dOSwHABLvdM">Native react navigation in every platform</a>.</li>
 <li> <a href="https://github.com/geirman/offlineMovies">OfflineMovies: retrieves movies from an api and caches the result offline</a>.</li>
 <li> <a href="https://corbt.com/posts/2015/09/16/one-day-with-react-native-for-android.html">One day with React Native for Android</a>.</li>
 <li> <a href="https://www.youtube.com/watch?v%3Dfh_Y4mPivuM">Optimizing React Native views (Screencast)</a>.</li>
 <li> <a href="https://www.youtube.com/watch?v=fh_Y4mPivuM">Optimizing React Native views (Screencast)</a>.</li>
 <li> <a href="https://facebook.github.io/react/docs/context.html">Passing info automatically through a tree</a>.</li>
 <li> <a href="https://medium.com/@sharathprabhal/progressive-image-loading-in-react-native-ecc88e724343#.ffudiaxf3">Progressive image loading</a>.</li>
 <li> <a href="http://reactscript.com/categories/layout/">React and React Native Layout Components - ReactScript</a>.</li>
 <li> <a href="https://github.com/kriasoft/react-component-starter">React Component Starter Kit</a>.</li>
 <li> <a href="http://iamdustan.com/2016/01/18/react-custom-renderers/">React Custom Renderers (Blog post)</a>.</li>
 <li> <a href="https://facebook.github.io/react/contributing/design-principles.html">React Design Principles</a>.</li>
 <li> <a href="https://github.com/naoufal/react-native-accordion">React Native accordion</a>.</li>
 <li> <a href="https://github.com/mastermoo/react-native-action-button">React Native action button</a>.</li>
 <li> <a href="https://medium.com/react-weekly/react-native-and-typescript-ad57b7413ead#.w5lky7jol">React Native and Typescript</a>.</li>
 <li> <a href="http://browniefed.com/blog/2015/08/01/react-native-animated-listview-row-swipe/">React Native Animated ScrollView Row Swipe Actions</a>.</li>
 <li> <a href="http://zaicheng.me/2016/06/20/react-native-initial-setup/">React Native App initial setup</a>.</li>
 <li> <a href="https://medium.com/delivery-com-engineering/react-native-in-an-existing-ios-app-dynamic-routing-7013e03fa9ad#.cyv7v7oez">React Native in an Existing iOS App: Dynamic Routing</a>.</li>
 <li> <a href="https://github.com/ericvicenti/react-native-community/">React Native in the Github Community</a>.</li>
 <li> <a href="http://moduscreate.com/react-native-layout-system/">React Native Layout System</a>.</li>
 <li> <a href="https://github.com/lelandrichardson/react-native-maps">React Native Mapview component for iOS + Android</a>.</li>
 <li> <a href="https://github.com/react-native-material-design/react-native-material-design">React Native Material Design (react-native-material-design)</a>.</li>
 <li> <a href="https://github.com/xinthink/react-native-material-kit">React Native Material Design (xinthink)</a>.</li>
 <li> <a href="http://us10.campaign-archive2.com/?u%3Ddb0dd948e2b729ee62625b1a8&id%3Dfbfe8b6010&e%3Dc7b5ce9f56">React Native Newsletter - Issue #24</a>.</li>
 <li> <a href="http://us10.campaign-archive2.com/?u%3Ddb0dd948e2b729ee62625b1a8&id%3D674b414994&e%3Dc7b5ce9f56">React Native Newsletter - Issue #25</a>.</li>
 <li> <a href="https://github.com/rnpm/rnpm">React Native Package Manager (rnpn)</a>.</li>
 <li> <a href="https://rnplay.org/">React Native Playground</a>.</li>
 <li> <a href="http://npm.taobao.org/package/react-native-scrollable-decorator">React Native scrollable decorator</a>.</li>
 <li> <a href="https://github.com/marty-wang/react-native-toolkit">React Native Toolkit (navigation examples)</a>.</li>
 <li> <a href="http://www.raywenderlich.com/99473/introducing-react-native-building-apps-javascript">React Native Tutorial: Building Apps with JavaScript</a>.</li>
 <li> <a href="https://medium.com/@Jpoliachik/react-native-s-layoutanimation-is-awesome-4a4d317afd3e#.97zx978rl">React Native’s LayoutAnimation is Awesome</a>.</li>
 <li> <a href="http://aeflash.com/2015-02/react-tips-and-best-practices.html">React Tips and Best Practices</a>.</li>
 <li> <a href="https://news.ycombinator.com/item?id=14144142">React-Move – Animate anything in React (Hacker News)</a>.</li>
 <li> <a href="https://github.com/lwansbrough/react-native-camera">react-native-camera: A Camera component for React Native</a>.</li>
 <li> <a href="https://github.com/aksonov/react-native-redux-router">react-native-redux-router (replace push/pop screens with easy syntax)</a>.</li>
 <li> <a href="http://www.reactjsprogram.com/">React.js Program: A project based, linear approach to learning React.js and the React.js ecosystem</a>.</li>
 <li> <a href="https://react.parts/native">react.parts/native feed</a>.</li>
 <li> <a href="https://www.youtube.com/watch?v=dwP1TNXE6fc">Reactive Programming Overview</a>.</li>
 <li> <a href="https://github.com/aerofs/react-native-auto-updater">ReactNativeAutoUpdater</a>.</li>
 <li> <a href="https://github.com/rackt/redux">Redux: Predictable state container for JavaScript apps</a>.</li>
 <li> <a href="http://jlongster.com/Removing-User-Interface-Complexity,-or-Why-React-is-Awesome">Removing User Interface Complexity, or Why React is Awesome</a>.</li>
 <li> <a href="https://medium.com/@elieslama/responsive-design-in-react-native-876ea9cd72a8#.cjpedynak">Responsive Design in React Native</a>.</li>
 <li> <a href="https://rnplay.org/">rnplay.org: Test and share React Native code samples</a>.</li>
 <li> <a href="https://github.com/bartonhammond/snowflake">Snowflake (React iOS/Android + Redux + Jest testable + parse.com + bitrise.io)</a>.</li>
 <li> <a href="http://hharnisc.github.io/2015/04/15/react-native-and-meteor.html">Some Thoughts On Gluing React Native and Meteor (Blog post)</a>.</li>
 <li> <a href="http://www.schibsted.pl/2015/10/testing-react-native-components-with-jest/">Testing react Native with jest</a>.</li>
 <li> <a href="https://www.firebase.com/blog/2016-01-20-tutorial-firebase-react-native.html">The beginners guide to React Native and Firebase (Blog post)</a>.</li>
 <li> <a href="https://medium.com/swlh/the-case-for-flux-379b7d1982c6#.109lf7s2a">The Case for Flux</a>.</li>
 <li> <a href="https://github.com/Reactive-Extensions/RxJS">The Reactive Extensions for JavaScript</a>.</li>
 <li> <a href="http://www.reactivemanifesto.org/">The reactive manifesto</a>.</li>
 <li> <a href="https://facebook.github.io/react/docs/thinking-in-react.html">Thinking in React</a>.</li>
 <li> <a href="https://getsiphon.com/blog/2016/01/20/future-of-app-development/">Thoughts on the future of mobile app development (Blog post)</a>.</li>
 <li> <a href="https://medium.com/the-react-native-log/tips-for-styling-your-react-native-apps-3f61608655eb#.tg2qh13vd">Tips for styling your React Native apps</a>.</li>
 <li> <a href="http://stanleycyang.github.io/technology/reactjs/native/ios/2015/10/04/react-native-tutorial-with-navigation-and-animation.html">Tutorial: Handcrafting an iOS Application with React Native (and lots of love)</a>.</li>
 <li> <a href="https://medium.com/@jcfrancisco/unit-testing-react-native-components-a-firsthand-guide-cea561df242b#.arff9dygw">Unit Testing React Native Components: A Firsthand Guide</a>.</li>
 <li> <a href="https://medium.com/infinite-red/using-redux-saga-to-simplify-your-growing-react-native-codebase-2b8036f650de#.382a5inf8">Using redux-saga To Simplify Your Growing React Native Codebase</a>.</li>
 <li> <a href="https://medium.com/shoutem/ways-to-pass-objects-between-native-and-javascript-in-react-native-c3dcae7bf4f5">Ways to pass objects between native and JavaScript in React Native</a>.</li>
 <li> <a href="http://blog.zmxv.com/2015/09/what-i-learned-from-building-react.html">What I learned from building with React</a>.</li>
 <li> <a href="https://www.youtube.com/watch?v=QQRDcYsN4xs">Why React Native is Better than Native for Your Mobile Application</a>.</li>
 <li> <a href="http://addyosmani.com/writing-modular-js/">Writing Modular JavaScript With AMD, CommonJS & ES Harmony</a>.</li>
 <li> <a href="https://github.com/johnmastro/react-snippets.el">Yasnippets for React</a>.</li>
</ul></div>
</div>
</div>]]></description>
  <link>http://xenodium.com/react-bookmarks</link>
  <guid isPermaLink="false">http://xenodium.com/react-bookmarks</guid>
  <pubDate>Fri, 18 Sep 2015 00:00:00 +0100</pubDate>
</item>
<item>
  <title>Open closest build file in Emacs</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-open-closest-build-file-in-emacs" class="outline-2">
 <h2 id="open-closest-build-file-in-emacs"> <span class="timestamp-wrapper"> <span class="timestamp">17 July 2015</span></span> Open closest build file in Emacs</h2>
 <div class="outline-text-2" id="text-open-closest-build-file-in-emacs">
 <p>
Whether it's Makefile, SConstruct, BUILD, or your favorite build file, chances are you have to tweak it from time to time.  <code>ar/open-build-file</code> searches your current and parent directories to find a build file.
</p>
 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">defvar</span>  <span style="color: #333333;">ar/project-file-names</span> '(<span style="color: #183691;">"Makefile"</span>  <span style="color: #183691;">"SConstruct"</span>  <span style="color: #183691;">"BUILD"</span>))

(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">ar/parent-directory</span> (path)
   <span style="color: #183691;">"Get parent directory for PATH."</span>
  (<span style="color: #a71d5d;">unless</span> (equal  <span style="color: #183691;">"/"</span> path)
    (file-name-directory (directory-file-name path))))

(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">ar/find-upwards</span> (path filename)
   <span style="color: #183691;">"Search upwards from PATH for a file named FILENAME."</span>
  (<span style="color: #a71d5d;">let</span> ((file (concat path filename))
        (parent (ar/parent-directory (expand-file-name path))))
    (<span style="color: #a71d5d;">if</span> (file-exists-p file)
        file
      (<span style="color: #a71d5d;">when</span> parent
        (ar/find-upwards parent filename)))))

(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">ar/open-closest</span> (filename)
   <span style="color: #183691;">"Open the closest FILENAME in current or parent dirs (handy for finding Makefiles)."</span>
  (<span style="color: #a71d5d;">let</span> ((closest-file-path (ar/find-upwards (buffer-file-name)
                                                 filename)))
    (<span style="color: #a71d5d;">when</span> closest-file-path
      (message closest-file-path)
      (switch-to-buffer (find-file-noselect closest-file-path)))
    closest-file-path))

(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">ar/open-build-file</span> ()
   <span style="color: #183691;">"Open the closest project file in current or parent directory.</span>
 <span style="color: #183691;">For example: Makefile, SConstruct, BUILD, etc.</span>
 <span style="color: #183691;">Append `</span> <span style="color: #0086b3;">ar/project-file-names</span> <span style="color: #183691;">' to search for other file names."</span>
  (<span style="color: #a71d5d;">interactive</span>)
  (<span style="color: #a71d5d;">catch</span> ' <span style="color: #0086b3;">found</span>
    (mapc (<span style="color: #a71d5d;">lambda</span> (filename)
            (<span style="color: #a71d5d;">when</span> (ar/open-closest filename)
              (<span style="color: #a71d5d;">throw</span> ' <span style="color: #0086b3;">found</span> t)))
          ar/project-file-names)
    (<span style="color: #333333;">error</span>  <span style="color: #183691;">"No project file found"</span>)))
</pre>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/open-closest-build-file-in-emacs</link>
  <guid isPermaLink="false">http://xenodium.com/open-closest-build-file-in-emacs</guid>
  <pubDate>Fri, 17 Jul 2015 00:00:00 +0100</pubDate>
</item>
<item>
  <title>Recognize new password prompts in Emacs shell</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-recognize-new-password-prompts-in-emacs-shell" class="outline-2">
 <h2 id="recognize-new-password-prompts-in-emacs-shell"> <span class="timestamp-wrapper"> <span class="timestamp">13 July 2015</span></span> Recognize new password prompts in Emacs shell</h2>
 <div class="outline-text-2" id="text-recognize-new-password-prompts-in-emacs-shell">
 <p>
At some point, you may come across a trusted command-line utility prompting you for a password, and Emacs shell happily displaying each typed character to the nearby-world to see. Luckily, you can train Emacs to recognize new password prompts and hide the typed characters in modes deriving from comint. Append the password prompt REGEXP:
</p>
 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">setq</span> comint-password-prompt-regexp (concat comint-password-prompt-regexp
                                             <span style="color: #183691;">"</span> <span style="color: #969896;">\\</span> <span style="color: #a71d5d;">|</span> <span style="color: #183691;">"</span>
                                             <span style="color: #183691;">"Password for red alert:"</span>))
</pre>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/recognize-new-password-prompts-in-emacs-shell</link>
  <guid isPermaLink="false">http://xenodium.com/recognize-new-password-prompts-in-emacs-shell</guid>
  <pubDate>Mon, 13 Jul 2015 00:00:00 +0100</pubDate>
</item>
<item>
  <title>Fishing with Emacs</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-fishing-with-emacs" class="outline-2">
 <h2 id="fishing-with-emacs"> <span class="timestamp-wrapper"> <span class="timestamp">03 July 2015</span></span> Fishing with Emacs</h2>
 <div class="outline-text-2" id="text-fishing-with-emacs">
 <p>
OK not quite, but having recently learned about  <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Appending-Kills.html">C-M-w (append-next-kill)</a>, I used it in a keyboard macro to fish out matching lines. This is similar to  <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Other-Repeating-Search.html">flush-lines</a>, except the kill ring is also populated. This is handy, if you need the flushed lines. Here's an example.
</p>


 <div id="org2ebd672" class="figure">
 <p> <img src="../images/fishing-with-emacs/fishing.gif" alt="fishing.gif" width="75%" height="75%"></img></p>
</div>

 <p>
Here's the equivalent in Emacs lisp:
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">flush-kill-lines</span> (regex)
   <span style="color: #183691;">"Flush lines matching REGEX and append to kill ring.  Restrict to \</span>
 <span style="color: #183691;">region if active."</span>
  (<span style="color: #a71d5d;">interactive</span>  <span style="color: #183691;">"sFlush kill regex: "</span>)
  (<span style="color: #a71d5d;">save-excursion</span>
    (<span style="color: #a71d5d;">save-restriction</span>
      (<span style="color: #a71d5d;">when</span> (use-region-p)
        (narrow-to-region (point) (mark))
        (goto-char 0))
      (<span style="color: #a71d5d;">while</span> (search-forward-regexp regex nil t)
        (move-beginning-of-line nil)
        (kill-whole-line)))))
</pre>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/fishing-with-emacs</link>
  <guid isPermaLink="false">http://xenodium.com/fishing-with-emacs</guid>
  <pubDate>Fri, 03 Jul 2015 00:00:00 +0100</pubDate>
</item>
<item>
  <title>Searchable ebooks in Emacs</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-searchable-ebooks-in-emacs" class="outline-2">
 <h2 id="searchable-ebooks-in-emacs"> <span class="timestamp-wrapper"> <span class="timestamp">30 June 2015</span></span> Searchable ebooks in Emacs</h2>
 <div class="outline-text-2" id="text-searchable-ebooks-in-emacs">
 <p>
If you haven't bought  <a href="https://www.masteringemacs.org/book">Mastering Emacs</a> by  <a href="https://twitter.com/mickeynp">Mickey Petersen</a>, you should. It's a wonderful source of Emacs tips. Having just finished the ebook on my Kindle, I was keen to go back and fish out some of that newly found wisdom. My immediate reaction was to figure out a way to make the ebook searchable from Emacs.
</p>

 <p>
The ebook is available in epub and pdf format. Though Emacs's docview is super handy for viewing pdf's, searching didn't feel as comfortable as searching in org mode. The epub, on the other hand, proved useful.  <a href="http://pandoc.org">Pandoc</a> can easily convert from epub to org.
</p>

 <div class="org-src-container">
 <pre class="src src-sh">pandoc  --from=epub --to=org mastering-emacs.epub > mastering-emacs.org
</pre>
</div>

 <p>
After a some tidying (mostly removing BEGIN_HTML/END_HTML blocks and adding TITLE/AUTHOR), the resulting org file is surprisingly clean and easy to search/navigate.  <a href="https://github.com/ShingoFukuyama/helm-swoop">helm-swoop</a> and  <a href="https://github.com/emacs-helm/helm/blob/199b9feb396eedc0e502dd767b19060f7dc09f6a/helm-org.el">helm-org-in-buffer-headings</a> are great for that.
</p>


 <div id="orgf94e75b" class="figure">
 <p> <img src="../images/searchable-ebooks-in-emacs/mastering-emacs-org-00.png" alt="mastering-emacs-org-00.png" width="75%" height="75%"></img></p>
</div>

 <div id="org5e0cd73" class="figure">
 <p> <img src="../images/searchable-ebooks-in-emacs/mastering-emacs-org-01.png" alt="mastering-emacs-org-01.png" width="75%" height="75%"></img></p>
</div>

 <div id="orgdc5e0f2" class="figure">
 <p> <img src="../images/searchable-ebooks-in-emacs/mastering-emacs-org-02.png" alt="mastering-emacs-org-02.png" width="75%" height="75%"></img></p>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/searchable-ebooks-in-emacs</link>
  <guid isPermaLink="false">http://xenodium.com/searchable-ebooks-in-emacs</guid>
  <pubDate>Tue, 30 Jun 2015 00:00:00 +0100</pubDate>
</item>
<item>
  <title>Xcode bookmarks</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-xcode-bookmarks" class="outline-2">
 <h2 id="xcode-bookmarks"> <span class="timestamp-wrapper"> <span class="timestamp">02 June 2015</span></span> Xcode bookmarks</h2>
 <div class="outline-text-2" id="text-xcode-bookmarks">
 <span class="modified-timestamp">   <em>updated: 23 January 2021  </em></span>
 <ul class="org-ul"> <li> <a href="https://medium.com/ios-os-x-development/a-better-way-to-automatically-merge-changes-in-your-xcode-project-files-3d83b3583fe4#.hz33egjv1">A Better Way to Automatically Merge Changes in Your XCode Project Files</a>.</li>
 <li> <a href="http://www.amazon.co.uk/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882/ref=sr_1_1?ie=UTF8&qid=1444472656&sr=8-1&keywords=Clean+Code%3A+A+Handbook+of+Agile+Software+Craftsmanship">Clean Code: A Handbook of Agile Software Craftsmanship (Book)</a>.</li>
 <li> <a href="https://medium.com/passei-direto-product-and-technology/from-xcode-to-testflight-using-command-line-288c3a85bd93">From Xcode to TestFlight using command line</a>.</li>
 <li> <a href="https://github.com/FuzzyAutocomplete/FuzzyAutocompletePlugin/blob/master/README.md">Fuzzy autocomplete for Xcode</a>.</li>
 <li> <a href="https://github.com/kolinkrewinkel/Multiplex">Multiplex (like Emacs multiple cursor but for Xcode)</a>.</li>
 <li> <a href="http://chen.do/blog/2013/10/22/reverse-engineering-xcode-with-dtrace/">Reverse-engineering Xcode with dtrace</a>.</li>
</ul></div>
</div>
</div>]]></description>
  <link>http://xenodium.com/xcode-bookmarks</link>
  <guid isPermaLink="false">http://xenodium.com/xcode-bookmarks</guid>
  <pubDate>Tue, 02 Jun 2015 00:00:00 +0100</pubDate>
</item>
<item>
  <title>Mastering Emacs is out</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-mastering-emacs-is-out" class="outline-2">
 <h2 id="mastering-emacs-is-out"> <span class="timestamp-wrapper"> <span class="timestamp">28 May 2015</span></span> Mastering Emacs is out</h2>
 <div class="outline-text-2" id="text-mastering-emacs-is-out">
 <p>
Emacs is amazingly alive. New packages are regularly listed on  <a href="http://melpa.org">melpa</a> and a new book just came out:  <a href="https://www.masteringemacs.org/book">Mastering Emacs</a> by  <a href="https://twitter.com/mickeynp">Mickey Petersen</a>.
</p>


 <div id="orgfd92fae" class="figure">
 <p> <a href="https://www.masteringemacs.org/book"> <img src="../images/mastering-emacs-is-out/cover.png" alt="cover.png"></img></a>
</p>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/mastering-emacs-is-out</link>
  <guid isPermaLink="false">http://xenodium.com/mastering-emacs-is-out</guid>
  <pubDate>Thu, 28 May 2015 00:00:00 +0100</pubDate>
</item>
<item>
  <title>define-word</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-define-word" class="outline-2">
 <h2 id="define-word"> <span class="timestamp-wrapper"> <span class="timestamp">25 May 2015</span></span> define-word</h2>
 <div class="outline-text-2" id="text-define-word">
 <p>
Installed  <a href="https://github.com/abo-abo">Abo Abo's</a>  <a href="https://github.com/abo-abo/define-word">define-word</a> Emacs package. A handy package to define words at point.
</p>


 <div id="orgbf5ac42" class="figure">
 <p> <img src="../images/define-word/define-word.png" alt="define-word.png" width="75%" height="75%"></img></p>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/define-word</link>
  <guid isPermaLink="false">http://xenodium.com/define-word</guid>
  <pubDate>Mon, 25 May 2015 00:00:00 +0100</pubDate>
</item>
<item>
  <title>restclient.el</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-restclient.el" class="outline-2">
 <h2 id="restclient.el"> <span class="timestamp-wrapper"> <span class="timestamp">25 May 2015</span></span> restclient.el</h2>
 <div class="outline-text-2" id="text-restclient.el">
 <p>
Installed  <a href="https://github.com/pashky/restclient.el">Pashky's</a>  <a href="https://github.com/pashky/restclient.el">restclient.el</a> Emacs package. Super helpful when trying out REST APIs.
</p>


 <div id="org7ef4da7" class="figure">
 <p> <img src="../images/restclient.el/restclient.png" alt="restclient.png" width="75%" height="75%"></img></p>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/restclient.el</link>
  <guid isPermaLink="false">http://xenodium.com/restclient.el</guid>
  <pubDate>Mon, 25 May 2015 00:00:00 +0100</pubDate>
</item>
<item>
  <title>Regex bookmarks</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-regex-bookmarks" class="outline-2">
 <h2 id="regex-bookmarks"> <span class="timestamp-wrapper"> <span class="timestamp">22 May 2015</span></span> Regex bookmarks</h2>
 <div class="outline-text-2" id="text-regex-bookmarks">
 <span class="modified-timestamp">   <em>updated: 06 August 2019  </em></span>
 <ul class="org-ul"> <li> <a href="http://ergoemacs.org/emacs/emacs_regex.html">Emacs: Text Pattern Matching (regex) tutorial</a>.</li>
 <li> <a href="https://dev.to/emmawedekind/regex-cheat-sheet-2j2a">Regex Cheat Sheet (DEV Community)</a>.</li>
 <li> <a href="http://regexrenamer.sourceforge.net/help/regex_quickref.html">Regex quick reference</a>: From regexrenamer.</li>
 <li> <a href="https://news.ycombinator.com/item">RegExr, see hacker news comments for other suggestions</a>.</li>
 <li> <a href="http://regexr.com/">RegExr: A website for interactive regex prototyping with syntax highlighting</a>.</li>
</ul></div>
</div>
</div>]]></description>
  <link>http://xenodium.com/regex-bookmarks</link>
  <guid isPermaLink="false">http://xenodium.com/regex-bookmarks</guid>
  <pubDate>Fri, 22 May 2015 00:00:00 +0100</pubDate>
</item>
<item>
  <title>Flushing empty lines in Emacs</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-flushing-empty-lines-in-emacs" class="outline-2">
 <h2 id="flushing-empty-lines-in-emacs"> <span class="timestamp-wrapper"> <span class="timestamp">22 May 2015</span></span> Flushing empty lines in Emacs</h2>
 <div class="outline-text-2" id="text-flushing-empty-lines-in-emacs">
 <p>
Via  <a href="https://www.masteringemacs.org">masteringemacs.org</a>,  <a href="https://www.masteringemacs.org/article/removing-blank-lines-buffer">removing blank lines in a buffer</a>:
</p>
 <pre class="example" id="orgcb075b8">
M-x flush-lines RET ^$ RET
</pre>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/flushing-empty-lines-in-emacs</link>
  <guid isPermaLink="false">http://xenodium.com/flushing-empty-lines-in-emacs</guid>
  <pubDate>Fri, 22 May 2015 00:00:00 +0100</pubDate>
</item>
<item>
  <title>Emacs key bindings and maps</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-emacs-key-bindings-and-maps" class="outline-2">
 <h2 id="emacs-key-bindings-and-maps"> <span class="timestamp-wrapper"> <span class="timestamp">23 April 2015</span></span> Emacs key bindings and maps</h2>
 <div class="outline-text-2" id="text-emacs-key-bindings-and-maps">
</div>
 <div id="outline-container-org0ccfada" class="outline-3">
 <h3 id="org0ccfada">based on  <a href="http://www.masteringemacs.org/article/mastering-key-bindings-emacs">masteringemacs.org</a>.</h3>
</div>
 <div id="outline-container-org349808c" class="outline-3">
 <h3 id="org349808c">bonus tip</h3>
 <div class="outline-text-3" id="text-org349808c">
 <p>
prefix key, followed by c-h, lists keys in prefix.
</p>
</div>
</div>
 <div id="outline-container-org18a35a2" class="outline-3">
 <h3 id="org18a35a2">keymap</h3>
 <div class="outline-text-3" id="text-org18a35a2">
 <p>
maps key to action.
</p>
</div>
</div>
 <div id="outline-container-org68b12a3" class="outline-3">
 <h3 id="org68b12a3">keymap found in buffer and most major modes.</h3>
</div>
 <div id="outline-container-orge034bc4" class="outline-3">
 <h3 id="orge034bc4">keys</h3>
 <div class="outline-text-3" id="text-orge034bc4">
 <ul class="org-ul"> <li>undefined: self explanatory.</li>
 <li>prefix key: ie. c-x (part of complete key).</li>
 <li>complete key: complete input executes associated command.</li>
</ul></div>
</div>
 <div id="outline-container-org0516fae" class="outline-3">
 <h3 id="org0516fae">mapping</h3>
 <div class="outline-text-3" id="text-org0516fae">
 <ul class="org-ul"> <li>(define-key keymap key def): add to current buffer map.</li>
 <li>(local-set-key key command): add to active buffer (no map option).</li>
 <li>(local-unset-key key)</li>
 <li>(global-set-key key command): add to global keymap (all buffers).</li>
 <li>(global-unset-key key)</li>
</ul></div>
</div>
 <div id="outline-container-org0c6958d" class="outline-3">
 <h3 id="org0c6958d">key codes</h3>
 <div class="outline-text-3" id="text-org0c6958d">
 <ul class="org-ul"> <li>kbd: macro transaltes human-readable key to emacs readable.</li>
 <li>function and navigation keys must be surrounded by <>.</li>
 <li>example: (kbd "c-c p") or (kbd "<f8>") of (kbd "<down>").</li>
</ul></div>
</div>
 <div id="outline-container-orgbce2e5d" class="outline-3">
 <h3 id="orgbce2e5d">remapping</h3>
 <div class="outline-text-3" id="text-orgbce2e5d">
 <ul class="org-ul"> <li>use remap to replace mapping (ie. kill-line with my/kill-line).</li>
 <li>(define-key keymap [remap original-function] 'my-own-function).</li>
</ul></div>
</div>
 <div id="outline-container-org7e140bb" class="outline-3">
 <h3 id="org7e140bb">reserved keys</h3>
 <div class="outline-text-3" id="text-org7e140bb">
 <ul class="org-ul"> <li>"c-c ?" generally reserved for you, but third party packages use it.</li>
 <li>function keys (ie. f1-f12).</li>
 <li>hyper and super (ancient).</li>
</ul></div>
</div>
 <div id="outline-container-org49adf5a" class="outline-3">
 <h3 id="org49adf5a">lookup order</h3>
 <div class="outline-text-3" id="text-org49adf5a">
 <ul class="org-ul"> <li>in a nutshell: minor mode keys, local keys, global keys.</li>
 <li>full order:
 <ol class="org-ol"> <li>overriding-terminal-local-map: terminal-specific key binds.</li>
 <li>overriding-local-map: override all other local keymaps (avoid if possible).</li>
 <li>char property at point: useful for yasnippet.</li>
 <li>emulation-mode-map-alists: advanced multi-mode keymap.</li>
 <li>minor-mode-overriding-map-alist: minor modes in major modes.</li>
 <li>minor-mode-map-alist: as previous (preferred for minor modes) <–—</li>
 <li>current-local-map: buffers current local map.</li>
 <li>current-global-map: last place to look (ie. global).</li>
</ol></li>
</ul></div>
</div>
 <div id="outline-container-org544d155" class="outline-3">
 <h3 id="org544d155">mode hooks</h3>
 <div class="outline-text-3" id="text-org544d155">
 <ul class="org-ul"> <li>(local-set-key (kbd "c-c q") 'my-awesome-method)) in hook-method.</li>
 <li>for key-chord-define, use current-local-map.</li>
</ul></div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/emacs-key-bindings-and-maps</link>
  <guid isPermaLink="false">http://xenodium.com/emacs-key-bindings-and-maps</guid>
  <pubDate>Thu, 23 Apr 2015 00:00:00 +0100</pubDate>
</item>
<item>
  <title>Helm-describe-helm-attribute</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-helm-describe-helm-attribute" class="outline-2">
 <h2 id="helm-describe-helm-attribute"> <span class="timestamp-wrapper"> <span class="timestamp">14 April 2015</span></span> Helm-describe-helm-attribute</h2>
 <div class="outline-text-2" id="text-helm-describe-helm-attribute">
 <p>
 <a href="https://www.youtube.com/watch?v%3DXjKtkEMUYGc">Writing A Spotify Client in 16 Minutes</a> is fantastic for picking up helm and Emacs lisp tips. Of interest helm-describe-helm-attribute, second to the awesomeness of helm-spotify integration.
</p>
 <div class="org-src-container">
 <pre class="src src-html">< <span style="color: #795da3;">iframe</span>  <span style="color: #333333;">width</span>= <span style="color: #183691;">'420'</span>
         <span style="color: #333333;">height</span>= <span style="color: #183691;">'315'</span>
         <span style="color: #333333;">src</span>= <span style="color: #183691;">'https://www.youtube.com/embed/XjKtkEMUYGc'</span>
         <span style="color: #333333;">frameborder</span>= <span style="color: #183691;">'0'</span>
        allowfullscreen>
</ <span style="color: #795da3;">iframe</span>>
</pre>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/helm-describe-helm-attribute</link>
  <guid isPermaLink="false">http://xenodium.com/helm-describe-helm-attribute</guid>
  <pubDate>Tue, 14 Apr 2015 00:00:00 +0100</pubDate>
</item>
<item>
  <title>Youtube videos in your org html export</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-youtube-videos-in-your-org-html-export" class="outline-2">
 <h2 id="youtube-videos-in-your-org-html-export"> <span class="timestamp-wrapper"> <span class="timestamp">12 April 2015</span></span> Youtube videos in your org html export</h2>
 <div class="outline-text-2" id="text-youtube-videos-in-your-org-html-export">
 <p>
 <a href="https://twitter.com/sachachua">Sacha Chua</a> and  <a href="https://twitter.com/jwiegley">John Wiegley</a> posted a wonderful video on  <a href="http://sachachua.com/blog/2015/04/2015-04-08-emacs-lisp-development-tips-with-john-wiegley">Emacs lisp development tips</a>. Embedding the following raw HTML using #+BEGIN_HTML/#+END_HTML:
</p>
 <div class="org-src-container">
 <pre class="src src-html">< <span style="color: #795da3;">iframe</span>  <span style="color: #333333;">width</span>= <span style="color: #183691;">"420"</span>
         <span style="color: #333333;">height</span>= <span style="color: #183691;">"315"</span>
         <span style="color: #333333;">src</span>= <span style="color: #183691;">"https://www.youtube.com/embed/QRBcm6jFJ3Q"</span>
         <span style="color: #333333;">frameborder</span>= <span style="color: #183691;">"0"</span>
        allowfullscreen>
</ <span style="color: #795da3;">iframe</span>>
</pre>
</div>
 <p>
results in an embedded video when exporting your org file:
</p>
 <div class="org-src-container">
 <pre class="src src-html">< <span style="color: #795da3;">iframe</span>  <span style="color: #333333;">width</span>= <span style="color: #183691;">"420"</span>
         <span style="color: #333333;">height</span>= <span style="color: #183691;">"315"</span>
         <span style="color: #333333;">src</span>= <span style="color: #183691;">"https://www.youtube.com/embed/QRBcm6jFJ3Q"</span>
         <span style="color: #333333;">frameborder</span>= <span style="color: #183691;">"0"</span>
        allowfullscreen>
</ <span style="color: #795da3;">iframe</span>>
</pre>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/youtube-videos-in-your-org-html-export</link>
  <guid isPermaLink="false">http://xenodium.com/youtube-videos-in-your-org-html-export</guid>
  <pubDate>Sun, 12 Apr 2015 00:00:00 +0100</pubDate>
</item>
<item>
  <title>Git commit message style</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-git-commit-message-style" class="outline-2">
 <h2 id="git-commit-message-style"> <span class="timestamp-wrapper"> <span class="timestamp">09 April 2015</span></span> Git commit message style</h2>
 <div class="outline-text-2" id="text-git-commit-message-style">
 <p>
Adopted Tim Pope's Git commit message  <a href="http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html">style</a>. Also enabled Emacs's git-commit-training-wheels-mode:
</p>
 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">use-package</span>  <span style="color: #0086b3;">git-commit-training-wheels-mode</span>  <span style="color: #a71d5d;">:ensure</span> t
   <span style="color: #a71d5d;">:commands</span> (git-commit-training-wheels-mode))

(<span style="color: #a71d5d;">use-package</span>  <span style="color: #0086b3;">git-commit-mode</span>  <span style="color: #a71d5d;">:ensure</span> t
   <span style="color: #a71d5d;">:config</span>
  (add-hook 'git-commit-mode-hook 'git-commit-training-wheels-mode)
   <span style="color: #a71d5d;">:commands</span> (git-commit-mode))
</pre>
</div>
 <p>
Another great  <a href="http://chris.beams.io/posts/git-commit/">post</a> by Chris Beams.
</p>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/git-commit-message-style</link>
  <guid isPermaLink="false">http://xenodium.com/git-commit-message-style</guid>
  <pubDate>Thu, 09 Apr 2015 00:00:00 +0100</pubDate>
</item>
<item>
  <title>fci-mode and org-html-export-to-html bug</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-fci-mode-and-org-html-export-to-html-bug" class="outline-2">
 <h2 id="fci-mode-and-org-html-export-to-html-bug"> <span class="timestamp-wrapper"> <span class="timestamp">06 April 2015</span></span> fci-mode and org-html-export-to-html bug</h2>
 <div class="outline-text-2" id="text-fci-mode-and-org-html-export-to-html-bug">
 <p>
Having enabled fci-mode in most programing modes, org-html-export-to-html now exports an additional unicode character in source blocks. This  <a href="http://lists.gnu.org/archive/html/emacs-orgmode/2014-09/msg00777.html">thread</a> has a workaround:
</p>
 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">org-html-fontify-code</span> (code lang)
   <span style="color: #969896;">;; </span> <span style="color: #969896;">...</span>
  (funcall lang-mode)
 <span style="color: #969896;">;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;</span>
  (<span style="color: #a71d5d;">when</span> (<span style="color: #a71d5d;">require</span> ' <span style="color: #0086b3;">fill-column-indicator</span> nil 'noerror)
    (fci-mode -1))
 <span style="color: #969896;">;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;</span>
  (insert code)
   <span style="color: #969896;">;; </span> <span style="color: #969896;">...</span>
</pre>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/fci-mode-and-org-html-export-to-html-bug</link>
  <guid isPermaLink="false">http://xenodium.com/fci-mode-and-org-html-export-to-html-bug</guid>
  <pubDate>Mon, 06 Apr 2015 00:00:00 +0100</pubDate>
</item>
<item>
  <title>Emacs init.el bookmarks</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-emacs-init.el-bookmarks" class="outline-2">
 <h2 id="emacs-init.el-bookmarks"> <span class="timestamp-wrapper"> <span class="timestamp">28 March 2015</span></span> Emacs init.el bookmarks</h2>
 <div class="outline-text-2" id="text-emacs-init.el-bookmarks">
 <span class="modified-timestamp">   <em>updated: 12 December 2020  </em></span>
 <ul class="org-ul"> <li> <a href="https://github.com/daschwa/emacs.d">Adam Schwartz's init</a>.</li>
 <li> <a href="https://github.com/apg/emacs-config/tree/master/lisp/activator.d">Andrew Gwozdziewycz's init.el</a>.</li>
 <li> <a href="http://www.cs.utah.edu/~aek/code/init.el.html">Andrew Kensler's init.el</a>.</li>
 <li> <a href="https://github.com/Droogans/.emacs.d/blob/mac/init.el">Andrew's .emacs</a>.</li>
 <li> <a href="https://github.com/ikame/.emacs.d-literate">Anler Hernandez's literate config</a>.</li>
 <li> <a href="https://github.com/redguardtoo/emacs.d/">Chen Bin's init.el</a>.</li>
 <li> <a href="https://github.com/eastwood/config/blob/master/emacs.d/org-init.org">Clinton Ryan's init (JS config)</a>.</li>
 <li> <a href="https://github.com/daviderestivo/emacs-config/blob/master/README.md">daviderestivo/emacs-config (clean/macOS)</a>.</li>
 <li> <a href="https://github.com/iocanel/dotfiles/blob/master/.config/emacs/config.org">dotfiles/config.org at master · iocanel/dotfiles · GitHub (mu4e config)</a>.</li>
 <li> <a href="https://www.emacswiki.org/emacs/StarterKits">EmacsWiki: Starter Kits</a>.</li>
 <li> <a href="https://github.com/ejmr/DotEmacs/blob/master/.emacs">Eric James Michael Ritz</a>.</li>
 <li> <a href="https://github.com/alhassy/emacs.d">GitHub - alhassy/emacs.d: My Emacs configuration, literately</a>.</li>
 <li> <a href="https://github.com/rememberYou/.emacs.d/">GitHub - FIXME rememberYou/.emacs.d: Personal GNU Emacs configuration</a>.</li>
 <li> <a href="https://github.com/Fuco1/.emacs.d">GitHub - Fuco1/.emacs.d: My emacs config</a>.</li>
 <li> <a href="https://github.com/MatthewZMD/.emacs.d">GitHub - MatthewZMD/.emacs.d: M-EMACS, a full-feature GNU Emacs configuration</a>.</li>
 <li> <a href="https://github.com/zamansky/emacs.dz">GitHub - zamansky/emacs.dz: Awesome emacs config files</a>.</li>
 <li> <a href="https://github.com/zoliky/dotemacs">GitHub - zoliky/dotemacs: My GNU Emacs configuration (super clean)</a>.</li>
 <li> <a href="https://github.com/grettke/home/blob/master/ALEC.txt">Grant Rettke's literate config</a>.</li>
 <li> <a href="http://doc.rix.si/org/fsem.html">Hardcore Freestyle Emacs</a>.</li>
 <li> <a href="https://github.com/huseyinyilmaz/emacs-config/blob/master/lisp/user-init.el">Huseyin Yilmaz</a>.</li>
 <li> <a href="https://github.com/ianpan870102/.personal-emacs.d/blob/master/init.el">ianpan870102/.personal-emacs.d</a>.</li>
 <li> <a href="http://ivanmalison.github.io/dotfiles/">Ivan Malison's Emacs init</a>.</li>
 <li> <a href="http://ivanmalison.github.io/dotfiles/#colorizecompliationbuffers">Ivan Malison's init.el</a>.</li>
 <li> <a href="http://www.john2x.com/emacs.html">John's Emacs Config (mu4e and ledger usage)</a>.</li>
 <li> <a href="https://justin.abrah.ms/dotfiles/emacs.html">Justin Abrahms: My Emacs Configuration</a>.</li>
 <li> <a href="https://ladicle.com/post/config/">Ladicle's Emacs Configuration</a>.</li>
 <li> <a href="https://github.com/MatthewZMD/.emacs.d#lsp">M-EMACS's lsp config</a>.</li>
 <li> <a href="https://github.com/msparks/dotfiles/blob/master/.emacs">Mark Sparks's init.el</a>.</li>
 <li> <a href="https://github.com/CQQL/dotfiles/blob/master/src/.emacs.d/init.el">Marten Lienen's init.el</a>.</li>
 <li> <a href="http://writequit.org/org/settings.html">Mathew Lee Hinman's Emacs settings file</a>.</li>
 <li> <a href="https://github.com/angrybacon/dotemacs/blob/master/dotemacs.org">Mathieu Marques's wonderful literary config (uses tern for Javascript)</a>.</li>
 <li> <a href="https://github.com/abdullin/emacs.d/blob/master/emacs.org">Rinat Abdullin's literary config</a>.</li>
 <li> <a href="https://github.com/To1ne/temacco">Temacco's init</a>.</li>
 <li> <a href="https://gitlab.com/to1ne/temacco">Temacco's Plutonium empowered emacs</a>.</li>
 <li> <a href="https://github.com/wasamasa/dotemacs/blob/master/TODO.org">Wasamama's extensive init TODO </a>.</li>
 <li> <a href="http://zzamboni.org/post/my-emacs-configuration-with-commentary/">zzamboni.org | My Emacs Configuration, With Commentary</a>.</li>
 <li> <a href="https://etienne.depar.is/emacs.d/init.html">Étienne Deparis's Emacs Main Initialization File</a>.</li>
</ul></div>
</div>
</div>]]></description>
  <link>http://xenodium.com/emacs-init.el-bookmarks</link>
  <guid isPermaLink="false">http://xenodium.com/emacs-init.el-bookmarks</guid>
  <pubDate>Sat, 28 Mar 2015 00:00:00 +0000</pubDate>
</item>
<item>
  <title>Helm buffer URLs</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-helm-buffer-urls" class="outline-2">
 <h2 id="helm-buffer-urls"> <span class="timestamp-wrapper"> <span class="timestamp">26 March 2015</span></span> Helm buffer URLs</h2>
 <div class="outline-text-2" id="text-helm-buffer-urls">
 <p>
Venturing into Emacs lisp and  <a href="https://github.com/emacs-helm/helm">Helm</a>. Here's a go at listing all URLs in current buffer.
</p>
 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">require</span> ' <span style="color: #0086b3;">goto-addr</span>)

(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">ar/helm-buffer-url-candidates</span> ()
   <span style="color: #183691;">"Generate helm candidates for all URLs in buffer."</span>
  (<span style="color: #a71d5d;">save-excursion</span>
    (goto-char (point-min))
    (<span style="color: #a71d5d;">let</span> ((helm-candidates '())
          (url))
      (<span style="color: #a71d5d;">while</span> (re-search-forward goto-address-url-regexp
                                nil t)
        (<span style="color: #a71d5d;">setq</span> url
              (buffer-substring-no-properties (match-beginning 0)
                                              (match-end 0)))
        (add-to-list 'helm-candidates
                     (cons url
                           url)))
      helm-candidates)))

(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">ar/helm-buffer-urls</span> ()
   <span style="color: #183691;">"Narrow down and open a URL in buffer."</span>
  (<span style="color: #a71d5d;">interactive</span>)
  (helm  <span style="color: #a71d5d;">:sources</span> `(((name .  <span style="color: #183691;">"Buffer URLs"</span>)
                    (candidates . ,(ar/helm-buffer-url-candidates))
                    (action . (<span style="color: #a71d5d;">lambda</span> (url)
                                (browse-url url)))))))
</pre>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/helm-buffer-urls</link>
  <guid isPermaLink="false">http://xenodium.com/helm-buffer-urls</guid>
  <pubDate>Thu, 26 Mar 2015 00:00:00 +0000</pubDate>
</item>
<item>
  <title>Org tips from 2015-03-18 Emacs hangout</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-org-tips-from-2015-03-18-emacs-hangout" class="outline-2">
 <h2 id="org-tips-from-2015-03-18-emacs-hangout"> <span class="timestamp-wrapper"> <span class="timestamp">19 March 2015</span></span> Org tips from 2015-03-18 Emacs hangout</h2>
 <div class="outline-text-2" id="text-org-tips-from-2015-03-18-emacs-hangout">
 <span class="modified-timestamp">   <em>updated: 22 March 2015  </em></span>
 <p>
Lots of great tips in  <a href="http://sachachua.com/blog/2015/03/emacs-hangout-2015-03-18-show-notes/">Emacs Hangout 2015-03-18</a>. Favorites:
</p>
 <ul class="org-ul"> <li>Private org drawer to prevent export:</li>
</ul> <div class="org-src-container">
 <pre class="src src-org">:PRIVATE:
My super duper secret text I don't want to export.
:END:
</pre>
</div>
 <ul class="org-ul"> <li>C-c C-p/C-c C-n Jump over sections.</li>
 <li>(setq org-hide-leading-stars t).</li>
 <li>(org-bullets-mode).</li>
 <li>(org-refile).</li>
 <li>C-u (org-refile) jumps, no refile.</li>
 <li>(helm-org-in-buffer-headings).</li>
</ul></div>
</div>
</div>]]></description>
  <link>http://xenodium.com/org-tips-from-2015-03-18-emacs-hangout</link>
  <guid isPermaLink="false">http://xenodium.com/org-tips-from-2015-03-18-emacs-hangout</guid>
  <pubDate>Thu, 19 Mar 2015 00:00:00 +0000</pubDate>
</item>
<item>
  <title>Emacs lisp debug on entry</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-emacs-lisp-debug-on-entry" class="outline-2">
 <h2 id="emacs-lisp-debug-on-entry"> <span class="timestamp-wrapper"> <span class="timestamp">17 March 2015</span></span> Emacs lisp debug on entry</h2>
 <div class="outline-text-2" id="text-emacs-lisp-debug-on-entry">
 <p>
Wanted to track down which package was enabling ido-mode on my behalf. debug-on-entry to the rescue. Pass the method name in question and you're good to go.
</p>
 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(debug-on-entry 'ido-mode)
</pre>
</div>
 <p>
When done, use cancel.
</p>
 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(cancel-debug-on-entry 'ido-mode)
</pre>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/emacs-lisp-debug-on-entry</link>
  <guid isPermaLink="false">http://xenodium.com/emacs-lisp-debug-on-entry</guid>
  <pubDate>Tue, 17 Mar 2015 00:00:00 +0000</pubDate>
</item>
<item>
  <title>Prefill Emacs swiper with current region</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-prefill-emacs-swiper-with-current-region" class="outline-2">
 <h2 id="prefill-emacs-swiper-with-current-region"> <span class="timestamp-wrapper"> <span class="timestamp">14 March 2015</span></span> Prefill Emacs swiper with current region</h2>
 <div class="outline-text-2" id="text-prefill-emacs-swiper-with-current-region">
 <p>
The new  <a href="https://github.com/abo-abo/swiper">swiper</a> Emacs package is proving to be a great alternative to  <a href="https://github.com/ShingoFukuyama/helm-swoop">helm-swoop</a>. Here's how to prefill with current region:
</p>
 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">ar/prefilled-swiper</span> ()
   <span style="color: #183691;">"Pre-fill swiper input with region."</span>
  (<span style="color: #a71d5d;">interactive</span>)
  (<span style="color: #a71d5d;">if</span> (region-active-p)
      (<span style="color: #a71d5d;">let</span> ((region-text (buffer-substring (region-beginning)
                                           (region-end))))
        (swiper region-text))
    (swiper)))

(global-set-key (kbd  <span style="color: #183691;">"C-s"</span>)
                #'ar/prefilled-swiper)
</pre>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/prefill-emacs-swiper-with-current-region</link>
  <guid isPermaLink="false">http://xenodium.com/prefill-emacs-swiper-with-current-region</guid>
  <pubDate>Sat, 14 Mar 2015 00:00:00 +0000</pubDate>
</item>
<item>
  <title>Hack on Emacs London meetup bookmarks</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-hack-on-emacs-meetup" class="outline-2">
 <h2 id="hack-on-emacs-meetup"> <span class="timestamp-wrapper"> <span class="timestamp">11 March 2015</span></span> Hack on Emacs London meetup bookmarks</h2>
 <div class="outline-text-2" id="text-hack-on-emacs-meetup">
 <ul class="org-ul"> <li> <a href="http://www.european-lisp-symposium.org">European Lisp Symposium</a>.</li>
 <li> <a href="https://github.com/kai2nenobu/guide-key">guide-key</a> displays available key bindings.</li>
 <li> <a href="https://github.com/csrhodes/iplayer-el">iplayer-el</a> Emacs interface to the BBC's iPlayer.</li>
 <li> <a href="https://github.com/csrhodes/swankr">swankr</a> REPL (swank protocol for R).</li>
</ul></div>
</div>
</div>]]></description>
  <link>http://xenodium.com/hack-on-emacs-meetup</link>
  <guid isPermaLink="false">http://xenodium.com/hack-on-emacs-meetup</guid>
  <pubDate>Wed, 11 Mar 2015 00:00:00 +0000</pubDate>
</item>
<item>
  <title>Working with OS X and Emacs tips</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-working-with-os-x-and-emacs-tips" class="outline-2">
 <h2 id="working-with-os-x-and-emacs-tips"> <span class="timestamp-wrapper"> <span class="timestamp">09 March 2015</span></span> Working with OS X and Emacs tips</h2>
 <div class="outline-text-2" id="text-working-with-os-x-and-emacs-tips">
 <p>
From  <a href="http://emacsblog.org">M-x all-things-emacs</a>, Ryan McGeary's OS X/Emacs  <a href="http://emacsblog.org/2011/01/04/how-i-work-working-with-os-x-and-emacs/">workflow</a>.
</p>
</div>
 <div id="outline-container-org1484ee4" class="outline-3">
 <h3 id="org1484ee4">Frequently used apps:</h3>
 <div class="outline-text-3" id="text-org1484ee4">
 <ul class="org-ul"> <li> <a href="https://agilebits.com/onepassword">1 password</a>.</li>
 <li> <a href="http://www.choosyosx.com/">Choosy</a>.</li>
 <li> <a href="http://mizage.com/divvy/">Divvy</a>.</li>
 <li> <a href="http://www.red-sweater.com/fastscripts">Fastscript</a>.</li>
 <li> <a href="http://fluidapp.com/">Fluid</a> (SSB).</li>
 <li> <a href="http://www.obdev.at/products/launchbar/index.html">Launchbar</a>.</li>
 <li> <a href="https://evernote.com/skitch/guide/mac/">Skitch (screenshots)</a>.</li>
 <li> <a href="http://smilesoftware.com/TextExpander/index.html">te (Text expander)</a>.</li>
</ul></div>
</div>
 <div id="outline-container-org522a8f6" class="outline-3">
 <h3 id="org522a8f6">Dotfiles</h3>
 <div class="outline-text-3" id="text-org522a8f6">
 <ul class="org-ul"> <li> <a href="https://github.com/rmm5t/dotfiles">Github</a>.</li>
</ul></div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/working-with-os-x-and-emacs-tips</link>
  <guid isPermaLink="false">http://xenodium.com/working-with-os-x-and-emacs-tips</guid>
  <pubDate>Mon, 09 Mar 2015 00:00:00 +0000</pubDate>
</item>
<item>
  <title>Org mode bookmarks</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-org-mode-bookmarks" class="outline-2">
 <h2 id="org-mode-bookmarks"> <span class="timestamp-wrapper"> <span class="timestamp">08 March 2015</span></span> Org mode bookmarks</h2>
 <div class="outline-text-2" id="text-org-mode-bookmarks">
 <span class="modified-timestamp">   <em>updated: 23 November 2021  </em></span>
 <ul class="org-ul"> <li> <a href="https://karl-voit.at/2017/08/12/org-rabbit-hole/">[org-agenda] UOMF: Org Mode As a Rabbit Hole: Agenda Tasks Piling Up</a>.</li>
 <li> <a href="http://www.emacslife.com/baby-steps-org.html">A Baby Steps Guide to Managing Your Tasks with Org</a>.</li>
 <li> <a href="https://blog.aaronbieber.com/2016/09/24/an-agenda-for-life-with-org-mode.html">An Agenda for Life With Org Mode</a>.</li>
 <li> <a href="https://scripter.co/notes/org-table-spreadsheet/">An Org Table Spreadsheet cheatsheet</a>.</li>
 <li> <a href="http://stackoverflow.com/questions/13340616/assign-ids-to-every-entry-in-org-mode">Assigning ids to entries</a>.</li>
 <li> <a href="http://thewanderingcoder.com/2015/03/automating-boilerplate-in-org-mode-journalling/">Automating boilerplate in org-mode journalling</a>.</li>
 <li> <a href="https://www.reddit.com/r/emacs/comments/jc4uou/tags_everywhere/">Beautiful Emacs tags (maybe for org mode?)</a>.</li>
 <li> <a href="https://zzamboni.org/post/beautifying-org-mode-in-emacs">Beautifying Org Mode in Emacs</a>.</li>
 <li> <a href="https://emacs-doctor.com/blogging-from-emacs.html">Blogging from GNU Emacs/org (with rss example)</a>.</li>
 <li> <a href="https://www.sadiqpk.org/blog/2018/08/08/blogging-with-org-mode.html">Blogging with Emacs org-mode</a>.</li>
 <li> <a href="https://yewtu.be/watch">Build a second brain</a>.</li>
 <li> <a href="https://mullikine.github.io/posts/arbitrary-interpreters-for-babel/">Compounding Confoundment: arbitrary interpreters for Babel</a>.</li>
 <li> <a href="https://gitlab.com/sadiq/sadiq.gitlab.io/blob/master/src/blog-atom.sh">Creating org atom xml feed with blog-atom.sh</a>.</li>
 <li> <a href="https://github.com/philipphoman/org-mode-poster">Creating scientific posters with org-mode</a>.</li>
 <li> <a href="https://dev.to/learnbyexample/customizing-pandoc-to-generate-beautiful-pdfs-from-markdown-3lbj">Customizing pandoc to generate beautiful pdfs from markdown (helpful to tweak org export)</a>.</li>
 <li> <a href="https://github.com/dfeich/org-babel-examples/blob/master/README.org">dfeich/org-babel-examples (GitHub)</a>.</li>
 <li> <a href="https://github.com/dfeich/org-babel-examples/blob/master/README.org">Dfeich’s Org-babel, org-exporter, org-table example collection</a>.</li>
 <li> <a href="https://gitlab.com/zzamboni/ox-leanpub">Diego Zamboni / ox-leanpub · GitLab</a>.</li>
 <li> <a href="http://correl.phoenixinquis.net/2015/07/12/git-graphs.html">Drawing Git Graphs with Graphviz and Org-Mode</a>.</li>
 <li> <a href="http://ergoemacs.org/emacs/elisp_parse_org_mode.html">Elisp: Parse Org Mode (API examples by Xah Lee)</a>.</li>
 <li> <a href="http://ehneilsen.net/notebook/orgExamples/org-examples.html">Emacs org-mode examples and cookbook</a>.</li>
 <li> <a href="https://jherrlin.github.io/posts/emacs-orgmode-source-code-blocks2/">Emacs Orgmode Source Code Blocks 2 | jherrlin</a>.</li>
 <li> <a href="https://emacs.stackexchange.com/questions/51399/org-babel-tangle-with-function-in-header-arguments/51769#51769">Executing org source blocks when loading file (and defining file-local vars)</a>.</li>
 <li> <a href="https://github.com/nikclayton/ob-html-chrome">Export Org HTML SRC blocks as PNG files using Chrome</a>.</li>
 <li> <a href="https://gitlab.com/ambrevar/ambrevar.gitlab.io/blob/master/feed-builder/feed-builder.el">feed-builder/feed-builder.el an org/blog rss implementation</a>.</li>
 <li> <a href="https://github.com/DarkBuffalo/ox-report">GitHub - DarkBuffalo/ox-report: Export your org file to minutes report PDF file</a>.</li>
 <li> <a href="https://github.com/misohena/el-easydraw">GitHub - misohena/el-easydraw: Embedded drawing tool for Emacs</a>.</li>
 <li> <a href="https://github.com/niklasfasching/go-org">GitHub - niklasfasching/go-org: Org mode parser with html & pretty printed org rendering</a>.</li>
 <li> <a href="https://github.com/alphapapa/helm-org-rifle">helm-org-rifle:  Rifle through your Org buffers and acquire your target</a>.</li>
 <li> <a href="https://www.reddit.com/r/emacs/comments/6mzgkg/how_can_orgbabel_be_configured_to_set_variables/">How can org-babel be configured to set variables across multiple language? (Reddit)</a>.</li>
 <li> <a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html">How I use org-mode</a>.</li>
 <li> <a href="https://orgmode.org/manual/HTML-doctypes.html#HTML-doctypes">HTML doctypes (The Org Manual)</a>.</li>
 <li> <a href="https://www.miskatonic.org/2016/08/25/image-display-size-in-org/">Image display size in Org</a>.</li>
 <li> <a href="https://karl-voit.at/2021/08/28/pim-lecture-tug-2021/">Karl Voit's personal information management PIM Lecture at TU Graz</a>.</li>
 <li> <a href="http://kelvinh.github.io/wiki/org-mode-manual/">Kevin's org notes</a>.</li>
 <li> <a href="http://howardism.org/Technical/Emacs/literate-devops.html">Literate DevOps with org source blocks (Howardism)</a>.</li>
 <li> <a href="http://www.howardism.org/Technical/Emacs/literate-devops.html">Literate DevOps</a>.</li>
 <li> <a href="http://cachestocaches.com/2018/6/org-literate-programming/">Literate Programming with Org-mode</a>.</li>
 <li> <a href="https://www.offerzen.com/blog/literate-programming-empower-your-writing-with-emacs-org-mode">Literate Programming: Empower Your Writing with Emacs Org-Mode</a>.</li>
 <li> <a href="http://www.newartisans.com/2007/08/using-org-mode-as-a-day-planner/">Lost in Technopolis (getting things done with org agenda)</a>.</li>
 <li> <a href="http://irreal.org/blog/?p=7651">Making a Poster with Org-mode (Irreal)</a>.</li>
 <li> <a href="https://isamert.net/2021/04/21/managing-your-contacts-in-org-mode-and-syncing-them-to-your-phone-android-ios-whatever-.html">Managing your contacts in org-mode and syncing them to your phone</a>.</li>
 <li> <a href="https://www.bytedude.com/files/managing-your-life-with-org-mode.html">Managing Your Life With org-mode and Other Tools</a>.</li>
 <li> <a href="http://mbork.pl/2018-08-18_Embedding_files_in_Org-mode_revisited">Marcin Borkowski: 2018-08-18 Embedding files in Org-mode revisited</a>.</li>
 <li> <a href="https://fuco1.github.io/2018-12-23-Multiline-fontification-with-org-emphasis-alist.html">Multiline fontification (ie. bold) with org-emphasis-alist</a>.</li>
 <li> <a href="https://joshrollinswrites.com/emacsorg/org-capture-template-1/">My Org Capture Templates - Part 1 &middot; The Art of Not Asking Why</a>.</li>
 <li> <a href="https://joshrollinswrites.com/emacsorg/org-capture-template-3/">My Org Capture Templates - Part 3 &middot; The Art of Not Asking Why</a>.</li>
 <li> <a href="https://www.reddit.com/r/emacs/comments/hnf3cw/my_orgmode_agenda_much_better_now_with_category/">My org-mode agenda, much better now with category icons! : emacs</a>.</li>
 <li> <a href="https://patrickskiba.com/org-mode/2019/05/22/uses-for-org-mode.html">My Org-mode use cases (Patrick Skiba)</a>.</li>
 <li> <a href="http://www.cachestocaches.com/2016/9/my-workflow-org-agenda/">My Workflow with Org-Agenda</a>.</li>
 <li> <a href="https://christiantietze.de/posts/2019/12/emacs-notifications/">Native macOS Notifications for Emacs Org Tasks and Appointments</a>.</li>
 <li> <a href="https://kitchingroup.cheme.cmu.edu/blog/2016/11/04/New-link-features-in-org-9/">New link features in org 9</a>.</li>
 <li> <a href="https://github.com/ndwarshuis/om.el/blob/master/README.md">om.el/README.md at master · ndwarshuis/om.el · GitHub</a>.</li>
 <li> <a href="https://github.com/dfeich/org-babel-examples">Org babel examples repo</a>.</li>
 <li> <a href="https://org-babel.readthedocs.io/en/latest/">Org Babel reference card</a>.</li>
 <li> <a href="https://raw.githubusercontent.com/eschulte/babel-dev/master/scraps.org">org babel scraps</a>.</li>
 <li> <a href="https://ag91.github.io/blog/2020/08/28/org-crypt-and-logbook-how-they-can-work-together-for-a-secure-agenda/">Org crypt and LOGBOOK: how they can work together for a secure agenda.</a>.</li>
 <li> <a href="https://titan-c.gitlab.io/org-cv/">Org CV/resume</a>.</li>
 <li> <a href="http://www.star.bris.ac.uk/bjm/org-basics.html">Org mode basics</a>.</li>
 <li> <a href="https://writepermission.com/org-blogging-rss-feed.html">Org mode blogging: RSS feed</a>.</li>
 <li> <a href="http://home.fnal.gov/~neilsen/notebook/orgExamples/org-examples.html">Org mode examples and cookbook</a>.</li>
 <li> <a href="http://home.fnal.gov/~neilsen/notebook/orgExamples/org-examples.html">Org mode examples</a>.</li>
 <li> <a href="https://www.reddit.com/r/emacs/comments/9d8i7y/org_mode_habits/">Org Mode Habits : emacs</a>.</li>
 <li> <a href="https://gist.github.com/drj42/1755992">Org mode reference card</a>.</li>
 <li> <a href="https://orgmode.org/worg/org-tutorials/">Org tutorials</a>.</li>
 <li> <a href="https://alphapapa.github.io/org-almanac/">org-almanac</a>.</li>
 <li> <a href="https://github.com/sprig/org-capture-extension/blob/master/README.md">org-capture-extension (GitHub)</a>.</li>
 <li> <a href="https://github.com/eschulte/org-ehtml">org-ehtml: Export Org-mode files as editable web pages</a>.</li>
 <li> <a href="https://github.com/theodorewiles/org-mind-map">org-mind-map: creates graphviz directed graphs from org-mode files</a>.</li>
 <li> <a href="http://pragmaticemacs.com/emacs/org-mode-basics-vii-a-todo-list-with-schedules-and-deadlines/">Org-mode basics VII: A TODO list with schedules and deadlines | Pragmatic Emacs</a>.</li>
 <li> <a href="https://bzg.fr/en/some-emacs-org-mode-features-you-may-not-know.html/">Org-mode features You May Not Know · Bastien Guerry - Liberté, informatique</a>.</li>
 <li> <a href="https://yiufung.net/post/org-mode-hidden-gems-pt2/">Org-mode Hidden Gems - 02 Tables</a>.</li>
 <li> <a href="https://github.com/flexibeast/org-vcard/">org-mode support for vCard export and import</a>.</li>
 <li> <a href="https://github.com/weirdNox/org-noter">org-noter: Emacs document annotator, using Org-mode</a>.</li>
 <li> <a href="https://alhassy.github.io/org-special-block-extras/README.html">org-special-block-extras</a>.</li>
 <li> <a href="https://github.com/alphapapa/org-web-tools">org-web-tools: Commands and functions for retrieving web page content and processing it into and displaying it as Org-mode content.</a>.</li>
 <li> <a href="https://github.com/alphapapa/org-web-tools">org-web-tools: View, capture, and archive Web pages in Org-mode</a>.</li>
 <li> <a href="https://github.com/lyon0xd/uml/blob/master/org/test.org">org/uml examples</a>.</li>
 <li> <a href="https://www.zcl.space/tools/organize-you-life-in-org/">Organize you life in Emacs Org | ZCL.SPACE</a>.</li>
 <li> <a href="http://doc.norang.ca/org-mode.html">Organize your life in plain text</a>.</li>
 <li> <a href="https://www.youtube.com/playlist?list=PLVtKhBrRV_ZkPnBtt_TD1Cs9PJlU0IIdE&app=desktop">OrgMode tutorial - YouTube channel</a>.</li>
 <li> <a href="https://forum.effectivealtruism.org/posts/w4CM7RfTLXxYLDccX/pablo-stafforini-s-forecasting-system-1">Pablo Stafforini’s Forecasting System - EA Forum</a>.</li>
 <li> <a href="https://medium.com/@tasshin/plan-your-day-daily-time-management-with-emacs-org-mode-and-google-calendar-a9162837fdb3">Plan your day: Daily Time Management with Emacs, Org-Mode, and Google Calendar</a>.</li>
 <li> <a href="https://news.ycombinator.com/item?id=23130104">Prettifying Org Mode with CSS | Hacker News</a>.</li>
 <li> <a href="https://sandyuraz.com/articles/orgmode-css/">Prettifying Org Mode with CSS</a>.</li>
 <li> <a href="https://puntoblogspot.blogspot.com/2018/12/3-basic-org-agenda-tips-for.html">puntoblogspot: 3 basic org agenda tips for the fundamentally forgetful</a>.</li>
 <li> <a href="https://vxlabs.com/2017/06/03/querying-restful-webservices-into-emacs-orgmode-tables/">Querying RESTful webservices into Emacs orgmode tables (vxlabs)</a>.</li>
 <li> <a href="https://www.youtube.com/playlist?list=PLVtKhBrRV_ZkPnBtt_TD1Cs9PJlU0IIdE">Rainer König's OrgMode YouTube tutorials</a>.</li>
 <li> <a href="https://fuco1.github.io/2019-02-10-Refiling-hydra-with-pre-defined-targets.html">Refiling hydra with pre-defined targets</a>.</li>
 <li> <a href="http://blog.lujun9972.win/emacs-document/blog/2018/10/22/ricing-up-org-mode/index.html">Ricing up Org Mode - EMACS-DOCUMENT</a>.</li>
 <li> <a href="https://lepisma.github.io/2017/10/28/ricing-org-mode/">Ricing up Org Mode</a>.</li>
 <li> <a href="https://www.arcadianvisions.com/blog/#orga597dcf">Robust Notes with Embedded Code (extensive org babel usage)</a>.</li>
 <li> <a href="https://orgmode.org/guide/">The compact Org-mode Guide</a>.</li>
 <li> <a href="https://ag91.github.io/blog/2020/09/04/the-poor-org-user-spaced-repetition/">The Poor Org-User Spaced Repetition - Where parallels cross</a>.</li>
 <li> <a href="http://www.flutterbys.com.au/stats/tut/tut16.1.html">Tutorial 16.1 - Emacs orgmode tables</a>.</li>
 <li> <a href="https://karl-voit.at/2017/01/15/org-clone-subtree-with-time-shift/">UOMF: Recurring Events with Org Mode</a>.</li>
 <li> <a href="http://www.sastibe.de/2018/05/2018-05-11-emacs-org-mode-rest-apis-stocks/">Use Emacs Org Mode and REST APIs for an up-to-date Stock Portfolio</a>.</li>
 <li> <a href="http://cestlaz.github.io/posts/using-emacs-24-capture-2/#.WTtEbXWw5pg">Using Emacs - 24 - Org Capture 2</a>.</li>
 <li> <a href="https://cestlaz.github.io/post/using-emacs-54-org-tables">Using Emacs 54 Org Tables</a>.</li>
 <li> <a href="https://dpitt.me/blog/2020/03/zettelkasten">Using Emacs's org-mode As Your Zettelkasten</a>.</li>
 <li> <a href="http://www.diegoberrocal.com/blog/2015/08/19/org-protocol/">Using org-capture with org-protocol be like - Diego Berrocal</a>.</li>
 <li> <a href="http://kitchingroup.cheme.cmu.edu/blog/2019/02/12/Using-results-from-one-code-block-in-another-org-mode/">Using results from one code block in another org-mode</a>.</li>
 <li> <a href="https://ofosos.org/2017/12/04/sudo-org-babel/">Using sudo in org-babel</a>.</li>
 <li> <a href="https://www.reddit.com/r/emacs/comments/jof1p3/visit_tangled_file_with_orgopenatpoint/">Visit tangled file with org-open-at-point (supports tramp/ssh)</a>.</li>
 <li> <a href="https://pjs64.wordpress.com/2020/12/07/worgsheet-calc-intro/">WorgSheet Calc Intro – Dj Pj (lots of tips and shortcuts)</a>.</li>
 <li> <a href="http://katherine.cox-buday.com/blog/2015/03/14/writing-specs-with-org-mode/">Writing Specs with Org-mode</a>.</li>
 <li> <a href="https://www.youtube.com/watch">YouTube: org introduction</a>.</li>
 <li> <a href="https://github.com/nobiot/Zero-to-Emacs-and-Org-roam">Zero to Emacs and Org-roam: a step-by-step guide</a>.</li>
</ul></div>
</div>
</div>]]></description>
  <link>http://xenodium.com/org-mode-bookmarks</link>
  <guid isPermaLink="false">http://xenodium.com/org-mode-bookmarks</guid>
  <pubDate>Sun, 08 Mar 2015 00:00:00 +0000</pubDate>
</item>
<item>
  <title>Golang bookmarks</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-golang-bookmarks" class="outline-2">
 <h2 id="golang-bookmarks"> <span class="timestamp-wrapper"> <span class="timestamp">06 March 2015</span></span> Golang bookmarks</h2>
 <div class="outline-text-2" id="text-golang-bookmarks">
 <span class="modified-timestamp">   <em>updated: 15 April 2020  </em></span>
 <ul class="org-ul"> <li> <a href="http://spf13.com/presentation/7-common-mistakes-in-go-2015/?utm_source=feedburner&utm_medium=feed&utm_campaign=Feed%3A+spf13+%28Steve+Francia%27s+Blog%29">7 Common mistakes in Go</a>.</li>
 <li> <a href="https://github.com/mingrammer/commonregex">A collection of common regular expressions for Go</a>.</li>
 <li> <a href="https://github.com/avelino/awesome-go">A curated list of awesome Go packages</a>.</li>
 <li> <a href="https://github.com/guardrailsio/awesome-golang-security">A curated list of awesome golang Security related resources</a>.</li>
 <li> <a href="https://iosexample.com/a-drawer-implement-on-swiftui/">A Drawer implement on SwiftUI</a>.</li>
 <li> <a href="https://github.com/montanaflynn/stats">A statistics package with common functions that are missing from the Golang standard library</a>.</li>
 <li> <a href="http://dave.cheney.net/2015/11/29/a-whirlwind-tour-of-gos-runtime-environment-variables">A whirlwind tour of Go’s runtime environment variables</a>.</li>
 <li> <a href="https://dev.to/shindakun/attempting-to-learn-go---now-sending-rest-requests-akp">Attempting to Learn Go - Now Sending GET/POST REST Requests</a>.</li>
 <li> <a href="https://stackoverflow.com/questions/59100973/python-grpc-equivalent-of-golangs-perrpccredentials">authentication - python gRPC equivalent of golang's PerRPCCredentials</a>.</li>
 <li> <a href="http://www.jerf.org/iri/post/2945">Avoiding Reflection (And Such) In Go</a>.</li>
 <li> <a href="https://github.com/iangudger/basicGoAPI">BasicGoAPI (ie. REST)</a>.</li>
 <li> <a href="https://chrislovecnm.com/golang/bazel/bazel-hello-world/">Bazel Golang Hello World (Kubernetes musings by chrislovecnm)</a>.</li>
 <li> <a href="http://beego.me/docs/intro/releases.md">Beego, platform for web apps</a>.</li>
 <li> <a href="https://gobuffalo.io/">Buffalo & Rapid Web Development in Go</a>.</li>
 <li> <a href="https://www.youtube.com/watch?v=eTjNtNnVOGY">Building a RESTful API in Go Using Only the Standard Library (Episode 1)</a>.</li>
 <li> <a href="http://blog.wercker.com/2013/08/07/building-an-api-with-golang-rethinkdb-wercker.html">Building an API with Golang, RethinkDB and wercker</a>.</li>
 <li> <a href="https://dev.to/codehakase/building-small-containers-for-kubernetes-290j">Building Small Containers for Kubernetes (golang http)</a>.</li>
 <li> <a href="https://github.com/elliotchance/c2go">c2go: A tool for transpiling C to Go.</a>.</li>
 <li> <a href="https://godoc.org/golang.org/x/tools/cmd/vet">Command vet (reports suspicious constructs)</a>.</li>
 <li> <a href="http://www.kotancode.com/2015/09/10/complex-json-handling-in-go/">Complex json handling in Go</a>.</li>
 <li> <a href="https://github.com/adrianduke/configr">Configr: abstraction on top of configuration sources</a>.</li>
 <li> <a href="http://jen20.com/2015/02/06/configuring-emacs-for-go-part-1.html">Configuring emacs and evil mode for Go development (Part 1)</a>.</li>
 <li> <a href="https://www.scaledrone.com/blog/posts/creating-an-api-client-in-go">Creating an API Client in Go</a>.</li>
 <li> <a href="http://dave.cheney.net/2015/08/22/cross-compilation-with-go-1-5">Cross compilation with Go 1.5</a>.</li>
 <li> <a href="http://biasedbit.com/blog/golang-custom-transports/">Custom transports and timeouts</a>.</li>
 <li> <a href="https://medium.com/@deckarep/dancing-with-go-s-mutexes-92407ae927bf#.uixrkc790">Dancing with Go’s Mutexes</a>.</li>
 <li> <a href="https://medium.com/better-programming/debug-go-like-a-pro-213d4d74e940">Debug Go Like a Pro - Better Programming - Medium</a>.</li>
 <li> <a href="https://blog.gopheracademy.com/advent-2015/debugging-with-delve/">Debugging Go programs with Delve</a>.</li>
 <li> <a href="https://github.com/elcct/defaultproject">defaultproject (REST/web starter)</a>.</li>
 <li> <a href="https://blog.golang.org/defer-panic-and-recover">Defer, Panic, and Recover</a>.</li>
 <li> <a href="https://arenzana.org/2019/01/emacs-go-mode">Emacs Go Mode (Isma details his Emacs Golang setup)</a>.</li>
 <li> <a href="http://words.volant.is/articles/authentication-golang-web-applications/">End-user authentication for Go web applications</a>.</li>
 <li> <a href="https://entgo.io/">ent · An entity framework for Go</a>.</li>
 <li> <a href="https://blog.golang.org/error-handling-and-go">Error handling in Go</a>.</li>
 <li> <a href="http://www.darrencoxall.com/golang/executing-commands-in-go/">Executing commands in Go</a>.</li>
 <li> <a href="https://news.ycombinator.com/item?id=17765413">Exploring Error Handling Patterns in Go (Hacker News)</a>.</li>
 <li> <a href="http://blog.matttproud.com/2015/02/exploring-gos-runtime-how-process.html">Exploring Go's runtime</a>.</li>
 <li> <a href="https://hackernoon.com/face-recognition-with-go-676a555b8a7e">Face recognition with Go – Hacker Noon</a>.</li>
 <li> <a href="https://github.com/valyala/fasthttp">fasthttp: Fast HTTP implementation for Go</a>.</li>
 <li> <a href="https://github.com/gorilla/mux">GitHub - gorilla/mux: A powerful URL router and dispatcher for golang.</a>.</li>
 <li> <a href="https://github.com/montanaflynn/stats">GitHub - montanaflynn/stats: A well tested and comprehensive Golang statistics library package with no dependencies.</a>.</li>
 <li> <a href="https://github.com/ndabAP/vue-go-example">GitHub - ndabAP/vue-go-example: Vue.js and Go example project</a>.</li>
 <li> <a href="https://github.com/Nerzal/gocloak">GitHub - Nerzal/gocloak: golang keycloak client</a>.</li>
 <li> <a href="https://github.com/sethgrid/multibar">GitHub - sethgrid/multibar: Display multiple progress bars in Go (golang).</a>.</li>
 <li> <a href="https://peter.bourgon.org/go-best-practices-2016/">Go best practices, six years in</a>.</li>
 <li> <a href="https://gobyexample.com/">Go by Example</a>.</li>
 <li> <a href="https://news.ycombinator.com/item?id%3D9399286">Go Challenge 3 HN comments</a>.</li>
 <li> <a href="https://github.com/golang/go/wiki/CodeReviewComments">Go Code Review Comments</a>.</li>
 <li> <a href="https://gotalks.googleplex.com/codelab/flag.article">Go command Line Flags</a>.</li>
 <li> <a href="http://blog.golang.org/pipelines">Go Concurrency Patterns: Pipelines and cancellation</a>.</li>
 <li> <a href="https://github.com/grpc/grpc-go/tree/master/examples/features/authentication">Go grpc authentication</a>.</li>
 <li> <a href="https://timr.co/go-interfaces-the-tricky-parts">Go interfaces, the tricky parts</a>.</li>
 <li> <a href="https://github.com/otium/ytdl">Go library for downloading YouTube videos</a>.</li>
 <li> <a href="https://github.com/alecthomas/gometalinter">Go Meta Linter</a>.</li>
 <li> <a href="http://www.gregosuri.com/2015/12/04/go-proverbs-illustrated/">Go Proverbs Illustrated</a>.</li>
 <li> <a href="https://blog.jpalardy.com/posts/go-slice-gotcha/">Go Slice Gotcha</a>.</li>
 <li> <a href="http://gohugo.io/templates/go-templates">Go Template Primer</a>.</li>
 <li> <a href="http://golang.rakyll.org/go-tool-flags/">Go tooling essentials (useful flags in tooling)</a>.</li>
 <li> <a href="https://www.youtube.com/watch?v=uBjoTxosSys">Go Tooling in Action - YouTube</a>.</li>
 <li> <a href="https://medium.com/go-walkthrough/go-walkthrough-encoding-json-package-9681d1d37a8f#.9rix3aqzg">Go Walkthrough: encoding/json package</a>.</li>
 <li> <a href="https://medium.com/go-walkthrough/go-walkthrough-fmt-55a14bbbfc53#.egmp9nwqv">Go Walkthrough: fmt (formatting strings)</a>.</li>
 <li> <a href="https://medium.com/@matzhouse/go-grpc-and-docker-c1fb2ec8e9f0">Go, gRPC and Docker</a>.</li>
 <li> <a href="http://go-bootstrap.io/">go-bootstrap to generate a lean and mean Go web project</a>.</li>
 <li> <a href="https://medium.com/@dgryski/go-fuzz-github-com-arolek-ase-3c74d5a3150c#.5ybv38lzm">go-fuzz github.com/arolek/ase tutorial</a>.</li>
 <li> <a href="https://github.com/cathalgarvey/go-minilock">Go-miniLock: The Minilock File Encryption System, Ported to Pure Go</a>.</li>
 <li>go-rename.</li>
 <li> <a href="https://github.com/emicklei/go-restful">Go-restful</a>.</li>
 <li> <a href="https://github.com/jroimartin/gocui/blob/master/README.md">GOCUI - Go Console User Interface</a>.</li>
 <li> <a href="http://goji.io/">Goji: A web microframework for Golang</a>.</li>
 <li> <a href="https://github.com/luciotato/golang-notes/blob/master/OOP.md">Golang concepts from an OOP point of view</a>.</li>
 <li> <a href="https://news.ycombinator.com/item?id=12522652">Golang landmines</a>.</li>
 <li> <a href="http://golangtoolbox.com/">Golang toolbox (high quality Go packages)</a>.</li>
 <li> <a href="http://xahlee.info/golang/golang_index.html">Golang Tutorial (Xah Lee's)</a>.</li>
 <li> <a href="https://davidsbond.github.io/2019/06/14/creating-grpc-interceptors-in-go.html">Golang: Creating gRPC interceptors (David Bond)</a>.</li>
 <li> <a href="http://xahlee.info/golang/golang_rune.html">Golang: Rune</a>.</li>
 <li> <a href="https://www.youtube.com/playlist?list=PL2ntRZ1ySWBf-_z-gHCOR2N156Nw930Hm">GopherCon 2015 videos</a>.</li>
 <li> <a href="https://www.youtube.com/watch?v=5v2fqm_8jYI">GopherCon 2016: Jack Lindamood - Practical Advice for Go Library Authors (YouTube)</a>.</li>
 <li> <a href="https://www.youtube.com/watch?v=5v2fqm_8jYI">GopherCon 2016: Jack Lindamood - Practical Advice for Go Library Authors</a>.</li>
 <li> <a href="https://about.sourcegraph.com/go/gophercon-2018-how-to-write-a-parser-in-go/">GopherCon 2018 - How to Write a Parser in Go</a>.</li>
 <li> <a href="https://github.com/gopherjs/gopherjs">Gopherjs: A compiler from Go to JavaScript</a>.</li>
 <li> <a href="https://github.com/visualfc/goqt">GoQt: golang Qt bindings</a>.</li>
 <li>gorepl-mode.</li>
 <li> <a href="https://github.com/securego/gosec">gosec - Golang Security Checker</a>.</li>
 <li> <a href="https://news.ycombinator.com/item?id=21603483">Go’s Features of Last Resort | Hacker News</a>.</li>
 <li> <a href="https://eli.thegreenplace.net/2020/graceful-shutdown-of-a-tcp-server-in-go/">Graceful shutdown of a TCP server in Go - Eli Bendersky's website</a>.</li>
 <li> <a href="https://github.com/levigross/grequests">GRequests: A Go "clone" of the great and famous Requests library</a>.</li>
 <li> <a href="https://grpc.io/docs/guides/auth/">gRPC authentication documentation</a>.</li>
 <li> <a href="https://github.com/apps/guardrails">GuardRails is a GitHub app that provides security feedback in your pull requests</a>.</li>
 <li> <a href="https://www.alexedwards.net/blog/how-to-hash-and-verify-passwords-with-argon2-in-go">How to Hash and Verify Passwords With Argon2 in Go - Alex Edwards</a>.</li>
 <li> <a href="https://news.ycombinator.com/item?id=17061713">How to start a Go project in 2018 | Hacker News</a>.</li>
 <li> <a href="https://golang.org/doc/code.html">How to Write Go Code</a>.</li>
 <li> <a href="https://medium.com/pantomath/how-we-use-grpc-to-build-a-client-server-system-in-go-dd20045fa1c2">How we use gRPC to build a client/server system in Go (auth and TLS included)</a>.</li>
 <li> <a href="http://www.gohugo.io/">HUGO: a static website engine in Go</a>.</li>
 <li> <a href="http://nathanleclaire.com/blog/2015/10/10/interfaces-and-composition-for-effective-unit-testing-in-golang/">Interfaces and Composition for Effective Unit Testing in Golang</a>.</li>
 <li> <a href="https://github.com/kubernetes/kubernetes/blob/master/Godeps/Godeps.json">Kubernetes godeps</a>.</li>
 <li> <a href="https://commandcenter.blogspot.com/2012/06/less-is-exponentially-more.html">Less is exponentially more (Rob Pike's Go reasoning)</a>.</li>
 <li> <a href="https://lets-go.alexedwards.net/">Let's Go! Learn to Build Professional Web Applications With Golang</a>.</li>
 <li> <a href="http://dave.cheney.net/2015/11/05/lets-talk-about-logging">Let's talk about logging</a>.</li>
 <li> <a href="http://www.alexedwards.net/blog/making-and-using-middleware">Making and Using HTTP Middleware in Go</a>.</li>
 <li> <a href="https://github.com/alexflint/go-restructure">Match regular expressions into struct fields</a>.</li>
 <li> <a href="http://bouk.co/blog/monkey-patching-in-go/">Monkey Patching in Go</a>.</li>
 <li> <a href="https://github.com/golang/go/wiki/PanicAndRecover">PanicAndRecover</a>.</li>
 <li> <a href="http://maciekmm.net/html-golang-stream-processing/">Parsing HTML with Go using stream processing</a>.</li>
 <li> <a href="https://www.sohamkamani.com/blog/2018/02/25/golang-password-authentication-and-storage/">Password authentication and storage in Go (Golang)</a>.</li>
 <li> <a href="https://www.amazon.com/Peaceful-Parent-Happy-Kids-Connecting/dp/0399160280/">Peaceful Parent, Happy Kids: How to Stop Yelling and Start Connecting</a>.</li>
 <li> <a href="https://peter.bourgon.org/go-best-practices-2016/">Peter Bourgon · Go best practices, six years in</a>.</li>
 <li> <a href="https://news.ycombinator.com/item?id=19218097">Practical Go: Real-world advice for writing maintainable Go programs (Hacker News)</a>.</li>
 <li> <a href="https://github.com/bradfitz/exp-httpclient/blob/master/problems.md">Problems with Go net/http Client API</a>.</li>
 <li> <a href="https://github.com/m3ng9i/ran">Ran: a simple static web server written in Go</a>.</li>
 <li> <a href="https://blog.gopheracademy.com/advent-2015/reducing-boilerplate-with-go-generate/">Reducing boilerplate with go generate</a>.</li>
 <li> <a href="https://research.swtch.com/interfaces">research!rsc: Go Data Structures: Interfaces</a>.</li>
 <li> <a href="https://www.youtube.com/watch?feature=youtu.be">RESTful Web API Basics in Go</a>.</li>
 <li> <a href="http://www.linkedin.com/pulse/restful-webservice-using-golang-sqlite-uttam-gandhi">Restful webservice using golang with sqlite</a>.</li>
 <li> <a href="http://revel.github.io/">Revel:</a> A high-productivity web framework for the Go language.</li>
 <li> <a href="https://github.com/bazelbuild/rules_go/blob/master/go/core.rst#go_binary">rules_go/core.rst at master · bazelbuild/rules_go</a>.</li>
 <li> <a href="https://golang.org/pkg/runtime/pprof/">runtime.pprof for profiling</a>.</li>
 <li> <a href="https://bitbucket.org/seanerussell/sashay">Sashay Go codegen</a>.</li>
 <li> <a href="https://syslog.ravelin.com/making-something-faster-56dd6b772b83">Seven steps to 100x faster Go</a>.</li>
 <li> <a href="https://github.com/grpc/grpc-go/issues/106">Simple password authentication example · Issue #106 · grpc/grpc-go</a>.</li>
 <li> <a href="https://github.com/dghubble/sling">Sling: Go REST client library for creating and sending API requests</a>.</li>
 <li> <a href="https://machiel.me/using-tags-in-go/">Small introduction to tags in Go</a>.</li>
 <li> <a href="https://news.ycombinator.com/item?id=13213902">So you want to expose Go on the Internet (Hacker News)</a>.</li>
 <li> <a href="https://www.cockroachlabs.com/blog/rounding-implementations-in-go/">Survey of Rounding Implementations in Go | Cockroach Labs</a>.</li>
 <li> <a href="https://github.com/yvasiyarov/swagger">Swagger Go documentation generator</a>.</li>
 <li> <a href="https://news.ycombinator.com/item?id%3D9716964">Ten useful techniques in Go (HN comments)</a>.</li>
 <li> <a href="http://arslan.io/ten-useful-techniques-in-go">Ten useful techniques in Go</a>.</li>
 <li> <a href="https://github.com/gizak/termui">termui, Go terminal dashboard</a>.</li>
 <li> <a href="https://dev.to/dannypsnl/testing-in-go-35ei">Testing in Go - DEV Community</a>.</li>
 <li> <a href="https://sourcegraph.com/blog/live/gopherconindia/112025389257%20">The 5 stages of learning Go</a>.</li>
 <li> <a href="https://dave.cheney.net/2014/03/25/the-empty-struct">The empty struct (Dave Cheney)</a>.</li>
 <li> <a href="http://golangcookbook.com/">The Go Cookbook</a>.</li>
 <li> <a href="http://go-talks.appspot.com/github.com/ChrisHines/talks/structured-logging/structured-logging.slide#1">The Hunt for a Logger Interface</a>.</li>
 <li> <a href="https://dave.cheney.net/2017/04/29/there-is-no-pass-by-reference-in-go">There is no pass-by-reference in Go | Dave Cheney</a>.</li>
 <li> <a href="http://openmymind.net/Things-I-Wish-Someone-Had-Told-Me-About-Go/">Things I wish someone told me about Go</a>.</li>
 <li> <a href="https://scripter.co/time-formatting-in-go/">Time formatting in Go ❚ A Scripter's Notes</a>.</li>
 <li> <a href="https://news.ycombinator.com/item?id=21225401">Uber Go Style Guide (Hacker News)</a>.</li>
 <li> <a href="http://divan.github.io/posts/go_concurrency_visualize/">Visualizing Concurrency in Go</a>.</li>
 <li> <a href="https://groups.google.com/forum/#!msg/golang-nuts/R7ryo7RdBPY/t7XFNGyRDQAJ">What's So Bad About Stdlib's Log Package? (Groups discussion)</a>.</li>
 <li> <a href="https://www.youtube.com/watch?v=YmbbmyxSlcg">Writing Unit Tests for your net/http Handlers</a>.</li>
</ul></div>
</div>
</div>]]></description>
  <link>http://xenodium.com/golang-bookmarks</link>
  <guid isPermaLink="false">http://xenodium.com/golang-bookmarks</guid>
  <pubDate>Fri, 06 Mar 2015 00:00:00 +0000</pubDate>
</item>
<item>
  <title>Learning Emacs lisp</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-learning-emacs-lisp" class="outline-2">
 <h2 id="learning-emacs-lisp"> <span class="timestamp-wrapper"> <span class="timestamp">05 March 2015</span></span> Learning Emacs lisp</h2>
 <div class="outline-text-2" id="text-learning-emacs-lisp">
 <span class="modified-timestamp">   <em>updated: 13 April 2015  </em></span>
 <ul class="org-ul"> <li>Use nreverse and nconc to operate on lists in-place.</li>
 <li>Set buffer local variables:</li>
</ul> <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">setq-local</span> my-clever-var)
</pre>
</div>
 <ul class="org-ul"> <li>Execute before saving buffer:</li>
</ul> <div class="org-src-container">
 <pre class="src src-emacs-lisp">(add-hook 'write-file-hooks
          (<span style="color: #a71d5d;">lambda</span> ()
            (message  <span style="color: #183691;">"about to save!"</span>)))
</pre>
</div>
 <ul class="org-ul"> <li>Possibly use to start processes and send file content:</li>
</ul> <div class="org-src-container">
 <pre class="src src-emacs-lisp">(make-comint NAME PROGRAM  <span style="color: #0086b3;">&optional</span> STARTFILE  <span style="color: #0086b3;">&rest</span> SWITCHES)
</pre>
</div>
 <ul class="org-ul"> <li>Creating markers:</li>
</ul> <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">setq</span> my-marker (copy-marker (point)))
  #<marker at 10251 in *ielm*>

(marker-buffer my-marker)
  #<buffer *ielm*>

(marker-position my-marker)
  10251 (#o24013, #x280b, ?⠋)
</pre>
</div>
 <ul class="org-ul"> <li>Get org heading at point:</li>
</ul> <div class="org-src-container">
 <pre class="src src-emacs-lisp">(org-get-heading 'no-tags 'no-todo)
</pre>
</div>
 <ul class="org-ul"> <li>Remove string text properties. From manual:</li>
</ul> <blockquote>
 <p>
(substring-no-properties STRING &optional FROM TO)
</p>

 <p>
Return a substring of STRING, without text properties.
It starts at index FROM and ends before TO.
TO may be nil or omitted; then the substring runs to the end of STRING.
If FROM is nil or omitted, the substring starts at the beginning of STRING.
If FROM or TO is negative, it counts from the end.
</p>
</blockquote>
 <ul class="org-ul"> <li>Skip org entry metadata/drawers:</li>
</ul> <div class="org-src-container">
 <pre class="src src-emacs-lisp">(org-end-of-meta-data-and-drawers)
</pre>
</div>
 <ul class="org-ul"> <li>Random access to org entry using id (or CUSTOM_ID):</li>
</ul> <div class="org-src-container">
 <pre class="src src-emacs-lisp">(org-open-link-from-string  <span style="color: #183691;">"[[#%exciting-custom-id]]"</span>)
</pre>
</div>
 <ul class="org-ul"> <li>From  <a href="http://endlessparentheses.com/debugging-emacs-lisp-part-1-earn-your-independence.html">Debugging Elisp Part 1: Earn your independence</a>:</li>
</ul> <blockquote>
 <ul class="org-ul"> <li>Go to where the function is defined.</li>
 <li>Press C-u C-M-x. Edebug breakpoint for function.</li>
 <li>Invoke function in question.</li>
 <li>n/c will get you around.</li>
 <li>q when done.</li>
</ul></blockquote>
 <ul class="org-ul"> <li>Pretty printing objects:</li>
</ul> <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">let</span> ((my-var (list  <span style="color: #183691;">"val1"</span>
                     <span style="color: #183691;">"val2"</span>
                     <span style="color: #183691;">"val3"</span>)))
  (pp-to-string my-var))
</pre>
</div>
 <ul class="org-ul"> <li>Search and/or replace in curent buffer:</li>
</ul> <div class="org-src-container">
 <pre class="src src-emacs-lisp">(re-search-forward  <span style="color: #183691;">"needle"</span>
                   nil t)
(match-beginning 0)  <span style="color: #969896;">;; </span> <span style="color: #969896;">Start location of match from last search.</span>
(match-end 0)  <span style="color: #969896;">;; </span> <span style="color: #969896;">End location of match from last search.</span>
(replace-match  <span style="color: #183691;">"love"</span>)

 <span style="color: #969896;">;; </span> <span style="color: #969896;">needle-in-haystack</span>
</pre>
</div>
 <ul class="org-ul"> <li>Restrict buffer editing to a region:</li>
</ul> <div class="org-src-container">
 <pre class="src src-emacs-lisp">(narrow-to-region (point)
                  (point-max))
</pre>
</div>
 <ul class="org-ul"> <li>Restore restriction:</li>
</ul> <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">save-restriction</span> (narrow-to-region (point)
                                    (point-max))
</pre>
</div>
 <ul class="org-ul"> <li>Restore point, mark, and current buffer:</li>
</ul> <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">save-excursion</span> (goto-char (point-max))
                (insert  <span style="color: #183691;">"Hello elisp."</span>))
</pre>
</div>
 <ul class="org-ul"> <li>Concatenating strings:</li>
</ul> <div class="org-src-container">
 <pre class="src src-emacs-lisp">(concat  <span style="color: #183691;">"Hello "</span>  <span style="color: #183691;">"elisp "</span>  <span style="color: #183691;">"world."</span>)
</pre>
</div>
 <ul class="org-ul"> <li>Grabbing thing at point:</li>
</ul> <div class="org-src-container">
 <pre class="src src-emacs-lisp">(thing-at-point 'word)
(thing-at-point 'symbol)
(thing-at-point 'line)
</pre>
</div>
 <ul class="org-ul"> <li>Unit test with ert.</li>
 <li>Basic iteration with dolist:</li>
</ul> <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">dolist</span> (v '(<span style="color: #183691;">"a"</span>  <span style="color: #183691;">"b"</span>  <span style="color: #183691;">"c"</span>))
  (print v))
</pre>
</div>
 <ul class="org-ul"> <li>Output to other buffer:</li>
</ul> <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">with-current-buffer</span> (get-buffer-create  <span style="color: #183691;">"*some buffer*"</span>)
  (princ '(some list to print)
         (current-buffer)))
</pre>
</div>
 <ul class="org-ul"> <li>For a temporary buffer, use with-temp-buffer:</li>
</ul> <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">with-temp-buffer</span>
  (insert  <span style="color: #183691;">"abc"</span>)
  (point))
</pre>
</div>
 <ul class="org-ul"> <li>Cons cells  <a href="http://emacslife.com/read-lisp-tweak-emacs/beginner-2-understand-emacs-lisp.html#sec-4-4">bookmark</a>.</li>
 <li>Check for substring:</li>
</ul> <div class="org-src-container">
 <pre class="src src-emacs-lisp">(string-match-p REGEXP STRING  <span style="color: #0086b3;">&optional</span> START)
</pre>
</div>
 <ul class="org-ul"> <li>Matching substrings and accessing groups:</li>
</ul> <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">setq</span> haystack  <span style="color: #183691;">"Always click [[http://reddit.com/r/emacs][here]]."</span>)
(<span style="color: #a71d5d;">setq</span> needle-re  <span style="color: #183691;">"\\[\\[</span> <span style="color: #969896;">\\</span> <span style="color: #a71d5d;">(</span> <span style="color: #183691;">.*</span> <span style="color: #969896;">\\</span> <span style="color: #a71d5d;">)</span> <span style="color: #183691;">]\\[</span> <span style="color: #969896;">\\</span> <span style="color: #a71d5d;">(</span> <span style="color: #183691;">.*</span> <span style="color: #969896;">\\</span> <span style="color: #a71d5d;">)</span> <span style="color: #183691;">]]"</span>)
   <span style="color: #183691;">"\\[\\[</span> <span style="color: #969896;">\\</span> <span style="color: #a71d5d;">(</span> <span style="color: #183691;">.*</span> <span style="color: #969896;">\\</span> <span style="color: #a71d5d;">)</span> <span style="color: #183691;">]\\[</span> <span style="color: #969896;">\\</span> <span style="color: #a71d5d;">(</span> <span style="color: #183691;">.*</span> <span style="color: #969896;">\\</span> <span style="color: #a71d5d;">)</span> <span style="color: #183691;">]]"</span>

(string-match needle-re haystack)
  13 (#o15, #xd, ?\C-m)

(match-string 0 haystack)
   <span style="color: #183691;">"[[http://reddit.com/r/emacs][here]]"</span>

(match-string 1 haystack)
   <span style="color: #183691;">"http://reddit.com/r/emacs"</span>

(match-string 2 haystack)
   <span style="color: #183691;">"here"</span>
</pre>
</div>
 <ul class="org-ul"> <li>Return argument unchanged (noop):</li>
</ul> <div class="org-src-container">
 <pre class="src src-emacs-lisp">(identity ARG)
</pre>
</div>
 <ul class="org-ul"> <li>Org insert today's timestamp</li>
</ul> <div class="org-src-container">
 <pre class="src src-emacs-lisp">(org-insert-time-stamp (current-time))
</pre>
</div>
 <ul class="org-ul"> <li> <a href="http://ergoemacs.org/emacs/elisp_determine_OS_version.html">OS version in .emacs</a>: Determine OS in emacs lisp.</li>
 <li>First element</li>
</ul> <div class="org-src-container">
 <pre class="src src-emacs-lisp">(car LIST)
</pre>
</div>
 <ul class="org-ul"> <li>All but first element</li>
</ul> <div class="org-src-container">
 <pre class="src src-emacs-lisp">(cdr LIST)
</pre>
</div>
 <ul class="org-ul"> <li>Add NEWELT to front of PLACE</li>
</ul> <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">push</span> NEWELT PLACE)
</pre>
</div>
 <ul class="org-ul"> <li>Invoke 'FUNCTION for each in SEQUENCE</li>
</ul> <div class="org-src-container">
 <pre class="src src-emacs-lisp">(mapcar FUNCTION SEQUENCE)
</pre>
</div>
 <ul class="org-ul"> <li>Search/replace</li>
</ul> <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">while</span> (search-forward  <span style="color: #183691;">"Hello"</span>)
  (replace-match  <span style="color: #183691;">"Bonjour"</span>))
</pre>
</div>
 <ul class="org-ul"> <li>Save to kill ring = copy.</li>
 <li>Point = cursor position.</li>
 <li>Mark = a buffer position.</li>
 <li>Kill = cut text.</li>
 <li>Yank = paste.</li>
 <li>Buffer:File = 1:1.</li>
 <li>Window:Buffer = 1:1.</li>
 <li>Frame:Window = 1:many.</li>
 <li>Font lock = syntax highlighting.</li>
</ul></div>
</div>
</div>]]></description>
  <link>http://xenodium.com/learning-emacs-lisp</link>
  <guid isPermaLink="false">http://xenodium.com/learning-emacs-lisp</guid>
  <pubDate>Thu, 05 Mar 2015 00:00:00 +0000</pubDate>
</item>
<item>
  <title>Books backlog</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-books-backlog" class="outline-2">
 <h2 id="books-backlog"> <span class="timestamp-wrapper"> <span class="timestamp">30 December 2014</span></span> Books backlog</h2>
 <div class="outline-text-2" id="text-books-backlog">
 <span class="modified-timestamp">   <em>updated: 06 February 2021  </em></span>
</div>
 <ul class="org-ul"> <li> <a id="orgd71a672"></a> <span class="todo TODO">TODO</span>  <a href="https://books.apple.com/us/book/id1551005489">‎Swift Secrets on Apple Books</a>. <br></br></li>
 <li> <a id="orgef3c8d6"></a> <span class="todo TODO">TODO</span>  <a href="https://www.amazon.co.uk/Island-Aldous-Huxley/dp/0099477777">Island: Amazon.co.uk: Aldous Huxley: 9780099477778: Books</a>. <br></br></li>
 <li> <a id="org69d38de"></a> <span class="todo TODO">TODO</span>  <a href="https://www.amazon.com/Hieroglyph-Stories-Visions-Better-Future-ebook/dp/B00H7LUR3K">Amazon.com: Hieroglyph: Stories and Visions for a Better Future eBook</a>. <br></br></li>
 <li> <a id="org9efce7b"></a> <span class="todo TODO">TODO</span>  <a href="https://www.amazon.com/Meredith-Silicon-David-Oliver-Doswell/dp/B088T2ZZG5">Meredith: The Future of Silicon Valley (fiction)</a>. <br></br></li>
 <li> <a id="org376e011"></a> <span class="todo TODO">TODO</span>  <a href="https://www.amazon.co.uk/Working-Public-Making-Maintenance-Software-ebook/dp/B08BDGXVK9/ref=sr_1_1">Working in Public: The Making and Maintenance of Open Source Software eBook</a>. <br></br></li>
 <li> <a id="org994d04c"></a> <span class="todo TODO">TODO</span>  <a href="https://www.amazon.com/No-More-Mr-Nice-Guy/dp/0762415339">No More Mr Nice Guy: A Proven Plan for Getting What You Want</a>. <br></br></li>
 <li> <a id="org30d1195"></a> <span class="todo TODO">TODO</span>  <a href="https://twitter.com/AllegedlyMiri/status/1301302388939259905">Thread on Wask Factory (more titles)</a>. <br></br></li>
 <li> <a id="orgfa78a61"></a> <span class="todo TODO">TODO</span>  <a href="https://en.wikipedia.org/wiki/The_Wasp_Factory">The Wasp Factory - Wikipedia</a>. <br></br></li>
 <li> <a id="orga02cfe2"></a> <span class="todo TODO">TODO</span>  <a href="https://twitter.com/mariskreizman/status/1305922866433724416">Book recommendation thread by Maris Kreizman</a>. <br></br></li>
 <li> <a id="orgfca5469"></a> <span class="todo TODO">TODO</span>  <a href="https://www.amazon.com/dp/B0898YGR58">Extreme Privacy: What It Takes to Disappear: Bazzell, Michael: 9798643343707</a>. <br></br></li>
 <li> <a id="orga925409"></a> <span class="todo TODO">TODO</span>  <a href="https://www.theatlantic.com/health/archive/2011/10/you-are-not-so-smart-why-we-cant-tell-good-wine-from-bad/247240/">'You Are Not So Smart': Why We Can't Tell Good Wine From Bad - The Atlantic</a>. <br></br></li>
 <li> <a id="orgd8b10e4"></a> <span class="todo TODO">TODO</span>  <a href="https://stephaniekelton.com/book/">The Deficit Myth - Stephanie Kelton</a>. <br></br></li>
 <li> <a id="orgced609c"></a> <span class="todo TODO">TODO</span>  <a href="https://muratbuffalo.blogspot.com/2020/06/some-book-recommendations.html">Metadata: Forty book recommendations</a>. <br></br></li>
 <li> <a id="orgb7b276c"></a> <span class="todo TODO">TODO</span>  <a href="https://www.goodreads.com/list/show/89580.Solarpunk">Solarpunk (62 books)</a>. <br></br></li>
 <li> <a id="orgdc6648c"></a> <span class="todo TODO">TODO</span>  <a href="https://theanarchistlibrary.org/library/p-m-bolo-bolo">Bolo’bolo | The Anarchist Library</a>. <br></br></li>
 <li> <a id="orgba02552"></a> <span class="todo TODO">TODO</span>  <a href="https://archive.org/details/velvetmonkeywren00muir/page/260">The velvet monkey wrench : Muir, John, 1918-</a>. <br></br></li>
 <li> <a id="org2ba9e6d"></a> <span class="todo TODO">TODO</span>  <a href="https://www.goodreads.com/list/show/131328.Solarpunk_Community_Discord_List">Solarpunk Community Discord List (108 books)</a>. <br></br></li>
 <li> <a id="orgcb8a5b7"></a> <span class="todo TODO">TODO</span>  <a href="https://www.amazon.co.uk/Launch-Internet-Millionaires-Anything-Paperback/dp/B00N4E4HQC/ref=sr_1_1">Launch: An Internet Millionaire's Secret Formula to Sell Almost anything online</a>. <br></br></li>
 <li> <a id="orgfdf7ab0"></a> <span class="todo TODO">TODO</span>  <a href="https://www.amazon.com/Psychology-Money-Timeless-lessons-happiness/dp/0857197681/">The Psychology of Money: The Psychology of Money: Timeless lessons on wealth, greed, and happiness</a>. <br></br></li>
 <li> <a id="org1dcb2df"></a> <span class="todo TODO">TODO</span>  <a href="https://thequilltolive.com/recommendations-2/">Recommendations | The Quill to Live</a>. <br></br></li>
 <li> <a id="orgabc26d8"></a> <span class="todo TODO">TODO</span>  <a href="https://fumbling.it/posts/my-2020-reading-list/">My 2020 Reading List · FumbLing</a>. <br></br></li>
 <li> <a id="orga2ffb6c"></a> <span class="todo TODO">TODO</span>  <a href="https://www.goodreads.com/book/show/37903770-norse-mythology">Norse Mythology by Neil Gaiman</a>. <br></br></li>
 <li> <a id="orgd293ba6"></a> <span class="todo TODO">TODO</span>  <a href="https://www.goodreads.com/book/show/18216145-auto">Auto by David Wailing</a>. <br></br></li>
 <li> <a id="org961a7a2"></a> <span class="todo TODO">TODO</span>  <a href="https://news.ycombinator.com/item?id=22573204">Ask HN: Book recommendations for understanding financial systems? | Hacker News</a>. <br></br></li>
 <li> <a id="orgf49a809"></a> <span class="todo TODO">TODO</span>  <a href="https://en.wikipedia.org/wiki/Andromeda_(novel)">Andromeda (novel) - Wikipedia</a>. <br></br></li>
 <li> <a id="org818530a"></a> <span class="todo TODO">TODO</span>  <a href="https://medium.com/solarpunks/solarpunk-a-reference-guide-8bcf18871965">SOLARPUNK : A REFERENCE GUIDE - Solarpunks - Medium</a>. <br></br></li>
 <li> <a id="org77cda35"></a> <span class="todo TODO">TODO</span>  <a href="https://en.wikipedia.org/wiki/The_Final_Circle_of_Paradise">The Final Circle of Paradise - Wikipedia</a>. <br></br></li>
 <li> <a id="org9deedab"></a> <span class="todo TODO">TODO</span>  <a href="https://twitter.com/mariskreizman/status/1193898883153354752">Here's a visual of my 35 favorite books of the decade.</a>. <br></br></li>
 <li> <a id="orgfd28307"></a> <span class="todo TODO">TODO</span>  <a href="https://news.ycombinator.com/item?id=22559493">Cyberpunk: Then and Now | Hacker News</a>. <br></br></li>
 <li> <a id="org68735b5"></a> <span class="todo TODO">TODO</span>  <a href="https://www.amazon.co.uk/Accelerate-Software-Performing-Technology-Organizations/dp/1942788339/ref=sr_1_1">Accelerate: The Science of Lean Software and Devops</a>. <br></br></li>
 <li> <a id="org018dede"></a> <span class="todo TODO">TODO</span>  <a href="https://hackernewsbooks.com/book/drive-the-surprising-truth-about-what-motivates-us/f10867f03ab0e2c362b3450119170a5a">Drive: The Surprising Truth About What Motivates Us | Hacker News Books</a>. <br></br></li>
 <li> <a id="orge87dac1"></a> <span class="todo TODO">TODO</span>  <a href="https://en.wikipedia.org/wiki/Pachinko_(novel)">Pachinko (novel) - Wikipedia</a>. <br></br></li>
 <li> <a id="org8f44b67"></a> <span class="todo TODO">TODO</span>  <a href="https://twitter.com/twostraws/status/1205416072058490880">Paul Hudson on Twitter: Can you recommend some manga?</a>. <br></br></li>
 <li> <a id="org88f5ad1"></a> <span class="todo TODO">TODO</span>  <a href="https://twitter.com/dan_abramov/status/1190762799338790913">Dan Abramov: Please point me to a book about programming that isn't boring</a>. <br></br></li>
 <li> <a id="org16977de"></a> <span class="todo TODO">TODO</span>  <a href="https://www.amazon.com/gp/registry/wishlist/28JXH54TPGED7">John's Amazon wishlist</a>. <br></br></li>
 <li> <a id="org133094f"></a> <span class="todo TODO">TODO</span>  <a href="https://www.amazon.co.uk/Super-Thinking-Upgrade-Reasoning-Decisions-ebook/dp/B07FRXC3KN/ref=sr_1_2">Super Thinking: Upgrade Your Reasoning and Make Better Decisions with Mental Models</a>. <br></br></li>
 <li> <a id="orgd9304c2"></a> <span class="todo TODO">TODO</span>  <a href="https://www.amazon.co.uk/s?k=Giulia+Enders">Gut: the inside story of our body's most under-rated organ</a>. <br></br></li>
 <li> <a id="org6fc88b3"></a> <span class="todo TODO">TODO</span>  <a href="https://twitter.com/evansandhoefner/status/1048426752404410368">Evan Sandhoefner on Twitter: Which books/papers/talks/etc have blown your mind / changed your worldview significantly?</a>. <br></br></li>
 <li> <a id="orgae374a5"></a> <span class="todo TODO">TODO</span>  <a href="https://www.amazon.co.uk/Joy-Demand-Discovering-Happiness-Within/dp/0062378872/ref=sr_1_1">JOY ON DEMAND: The Art of Discovering the Happiness Within</a>. <br></br></li>
 <li> <a id="org8c0af34"></a> <span class="todo TODO">TODO</span>  <a href="https://www.amazon.co.uk/Minute-Meditation-Expanded-Quiet-Change/dp/0399173420/ref=sr_1_2">8 Minute Meditation Expanded : Quiet Your Mind. Change Your Life</a>. <br></br></li>
 <li> <a id="org26d9967"></a> <span class="todo TODO">TODO</span>  <a href="https://www.amazon.co.uk/Mindfulness-Plain-English-20th-Anniversary/dp/0861719069/ref=sr_1_1">Mindfulness in Plain English: 20th Anniversary Edition: Amazon.co.uk</a>. <br></br></li>
 <li> <a id="org308d07b"></a> <span class="todo TODO">TODO</span>  <a href="https://twitter.com/bettina_bosch/status/1164430628852572161">Bettina Bauer: What is your favorite Science Fiction novel? (twitter)</a>. <br></br></li>
 <li> <a id="org249d7c4"></a> <span class="todo TODO">TODO</span>  <a href="https://www.amazon.com/Altered-Traits-Science-Reveals-Meditation/dp/0399184384">Altered Traits: Science Reveals How Meditation Changes Your Mind, Brain, and Body</a>. <br></br></li>
 <li> <a id="org10046d1"></a> <span class="todo TODO">TODO</span>  <a href="https://www.amazon.com/Junk-Food-Japan-Addictive-Kurobuta/dp/1472919920">Junk Food Japan: Addictive Food from Kurobuta</a>. <br></br></li>
 <li> <a id="org1ad1b64"></a> <span class="todo TODO">TODO</span>  <a href="https://news.ycombinator.com/item?id=20332455">Ask HN: Recommend one book I need to read this summer?</a>. <br></br></li>
 <li> <a id="orgab934f5"></a> <span class="todo TODO">TODO</span> I am a cat (Soseki Natsume). <br></br></li>
 <li> <a id="orgfa3791c"></a> <span class="todo TODO">TODO</span>  <a href="https://www.amazon.co.uk/Thinking-Systems-Primer-Diana-Wright/dp/184407725X">Thinking in Systems: A Primer: Amazon.co.uk: Diana Wright, Donella H. Meadows: 9781844077250: Books</a>. <br></br></li>
 <li> <a id="orgec038a3"></a> <span class="todo TODO">TODO</span>  <a href="http://www.lisperati.com/casting-spels-emacs/html/casting-spels-emacs-1.html">Casting SPELs in Lisp (Emacs edition)</a>. <br></br></li>
 <li> <a id="org6b324ea"></a> <span class="todo TODO">TODO</span>  <a href="http://landoflisp.com/">Land of lisp</a>. <br></br></li>
 <li> <a id="org5d323a2"></a> <span class="todo TODO">TODO</span>  <a href="https://www.goodreads.com/book/show/558738.Juggling_for_the_Complete_Klutz">Juggling for the Complete Klutz by John Cassidy</a>. <br></br></li>
 <li> <a id="org7323cb7"></a> <span class="todo TODO">TODO</span>  <a href="https://www.amazon.co.uk/Positioning-Battle-Your-Al-Ries-ebook/">Positioning: The Battle for Your Mind</a>. <br></br></li>
 <li> <a id="orge2821a5"></a> <span class="todo TODO">TODO</span>  <a href="https://en.wikipedia.org/wiki/Snow_Crash">Snow Crash - Wikipedia</a>. <br></br></li>
 <li> <a id="orgd8b6632"></a> <span class="todo TODO">TODO</span>  <a href="https://www.powells.com/book/-9781119404507">The Little Book of Common Sense Investing, Updated and Revised</a>. <br></br></li>
 <li> <a id="orgec1f88b"></a> <span class="todo TODO">TODO</span>  <a href="https://www.amazon.com/Little-LISPer-Third-Daniel-Friedman/dp/0023397632">The Little LISPer, Third Edition: 9780023397639: Computer Science Books @ Amazon.com</a>. <br></br></li>
 <li> <a id="org8339461"></a> <span class="todo TODO">TODO</span>  <a href="https://www.amazon.com/Anatomy-Peace-Resolving-Heart-Conflict/dp/1626564310">The Anatomy of Peace: Resolving the Heart of Conflict</a>. <br></br></li>
 <li> <a id="org79faaf1"></a> <span class="todo TODO">TODO</span>  <a href="https://superfastthebook.com/">Superfast Lead at speed</a>. <br></br></li>
 <li> <a id="orgcc6357e"></a> <span class="todo TODO">TODO</span>  <a href="https://ofone.co/">A company of one</a>. <br></br></li>
 <li> <a id="org2dd35c4"></a> <span class="todo TODO">TODO</span>  <a href="https://www.goodreads.com/book/show/27220736-shoe-dog">Shoe Dog: A Memoir by the Creator of NIKE</a>. <br></br></li>
 <li> <a id="org3c53247"></a> <span class="todo TODO">TODO</span>  <a href="https://twitter.com/thegooddeath/status/1077325245940289537?s=12">Caitlin Doughty's top 8 books from 2018</a>. <br></br></li>
 <li> <a id="orga6d1fe7"></a> <span class="todo TODO">TODO</span>  <a href="https://www.amazon.co.uk/Global-Economy-Youve-Never-Seen-ebook/dp/B07GVT67HB/ref=tmm_kin_swatch_0?_encoding=UTF8&qid=1545746296&sr=8-1">Global Economy as you've never seen it</a>. <br></br></li>
 <li> <a id="org95ff258"></a> <span class="todo TODO">TODO</span>  <a href="https://www.amazon.com/Replay-Ken-Grimwood/dp/068816112X">Replay</a>. <br></br></li>
 <li> <a id="org61694a5"></a> <span class="todo TODO">TODO</span>  <a href="https://www.amazon.com/Siddhartha-Novel-Hermann-Hesse/dp/0553208845">Siddhartha: A Novel</a>. <br></br></li>
 <li> <a id="org00d72c0"></a> <span class="todo TODO">TODO</span>  <a href="https://en.wikipedia.org/wiki/Out_(novel)">Out (novel) by Natsuo Kirino</a>. <br></br></li>
 <li> <a id="org2ca1b7d"></a> <span class="todo TODO">TODO</span>  <a href="https://www.pitt.edu/~dash/japantales.html">Folklore, Folktales, and Fairy Tales from Japan: A Digital Library</a>. <br></br></li>
 <li> <a id="org0743577"></a> <span class="todo TODO">TODO</span>  <a href="https://www.goodreads.com/book/show/15811545-a-tale-for-the-time-being">A Tale for the Time Being by Ruth Ozeki</a>. <br></br></li>
 <li> <a id="org6c56ee0"></a> <span class="todo TODO">TODO</span>  <a href="https://www.amazon.com/dp/0571171044/ref=rdr_ext_tmb">Kitchen by Banan Yashimoto</a>. <br></br></li>
 <li> <a id="org78f44d8"></a> <span class="todo TODO">TODO</span>  <a href="https://www.amazon.com/Overspent-American-Want-What-Dont/dp/0060977582/ref=sr_1_3/136-0317326-4068376?ie=UTF8&qid=1538250472&sr=8-3&keywords=juliet+schor&dpID=51%252BdTsv9XUL&preST=_SY291_BO1,204,203,200_QL40_&dpSrc=srch">The Overspent American: Why We Want What We Don't Need Paperback</a>. <br></br></li>
 <li> <a id="org2c5a0f0"></a> <span class="todo TODO">TODO</span>  <a href="https://www.goodreads.com/book/show/13540802-enough">Enough by Patrick Rhone</a>. <br></br></li>
 <li> <a id="orgc117dd4"></a> <span class="todo TODO">TODO</span>  <a href="https://hotair.tech/about/">Hot Air has a nice selection</a>. <br></br></li>
 <li> <a id="org7e34cd0"></a> <span class="todo TODO">TODO</span>  <a href="https://www.amazon.com/Domain-Driven-Design-Tackling-Complexity-Software/dp/0321125215">Domain-Driven Design: Tackling Complexity in the Heart of Software 1st Edition</a>. <br></br></li>
 <li> <a id="orgc0056d3"></a> <span class="todo TODO">TODO</span>  <a href="https://www.amazon.com/Seeing-like-State-Certain-Condition/dp/0300078153">Seeing like a State: How Certain Schemes to Improve the Human Condition Have Failed Paperback</a>. <br></br></li>
 <li> <a id="orge77b478"></a> <span class="todo TODO">TODO</span>  <a href="https://www.amazon.com/Conquest-Abundance-Abstraction-versus-Richness/dp/0226245349">Conquest of Abundance: A Tale of Abstraction versus the Richness of Being 2nd Edition</a>. <br></br></li>
 <li> <a id="orgca4d265"></a> <span class="todo TODO">TODO</span>  <a href="https://books.google.co.uk/books?id=a6sRdYLlmqIC&pg=PA6&lpg=PA6&redir_esc=y">The Wisdom of No Escape: And the Path of Loving-Kindness</a>. <br></br></li>
 <li> <a id="org0744592"></a> <span class="todo TODO">TODO</span>  <a href="https://www.amazon.com/Anatomy-Peace-Resolving-Heart-Conflict/dp/1626564310">The Anatomy of Peace: Resolving the Heart of Conflict</a>. <br></br></li>
 <li> <a id="orgac67927"></a> <span class="todo TODO">TODO</span>  <a href="https://en.wikipedia.org/wiki/The_Millionaire_Next_Door">The Millionaire Next Door</a>. <br></br></li>
 <li> <a id="orgd9f80dc"></a> <span class="todo TODO">TODO</span>  <a href="https://www.amazon.co.uk/Refactoring-Improving-Existing-Addison-Wesley-Technology-ebook/dp/B007WTFWJ6/ref=sr_1_1?s=digital-text&ie=UTF8&qid=1515533074&sr=1-1&keywords=refactoring+fowler">Refactoring: Improving the Design of Existing Code</a>. <br></br></li>
 <li> <a id="org24d5827"></a> <span class="todo TODO">TODO</span>  <a href="https://news.ycombinator.com/item?id=12896313">Touched by the Goddess: On Ramanujan (Hacker News)</a>. <br></br></li>
 <li> <a id="orge02cbad"></a> <span class="todo TODO">TODO</span>  <a href="https://www.amazon.com/Kundalini-Untold-Story-Himalayan/dp/0994002793">Kundalini – An Untold Story: A Himalayan Mystic's Insight into the Power of Kundalini and Chakra Sadhana</a>. <br></br></li>
 <li> <a id="orge51c1a3"></a> <span class="todo TODO">TODO</span>  <a href="https://news.ycombinator.com/item?id=12365693">Show HN: Top books mentioned in comments on Hacker News</a>. <br></br></li>
 <li> <a id="org38281c6"></a> <span class="todo TODO">TODO</span>  <a href="https://en.wikipedia.org/wiki/The_Prime_of_Miss_Jean_Brodie_%2528novel%2529">The Prime of Miss Jean Brodie (novel)</a>. <br></br></li>
 <li> <a id="orge3d1704"></a> <span class="todo TODO">TODO</span>  <a href="https://www.goodreads.com/book/show/53849.Plan_B">Plan B</a>. <br></br></li>
 <li> <a id="orgb1d3a0b"></a> <span class="todo TODO">TODO</span>  <a href="http://www.amazon.com/Deskbound-Standing-Up-Sitting-World/dp/1628600586">Deskbound</a>. <br></br></li>
 <li> <a id="orgde07dec"></a> <span class="todo TODO">TODO</span>  <a href="http://www.amazon.com/The-Way-Wanderlust-Writing-Travelers/dp/1609521056">The Way of Wanderlust: The Best Travel Writing of Don George (Travelers' Tales)</a>. <br></br></li>
 <li> <a id="orgad62c3f"></a> <span class="todo TODO">TODO</span>  <a href="https://en.m.wikipedia.org/wiki/We_%28novel%29">We (novel)</a>. <br></br></li>
 <li> <a id="orgac30663"></a> <span class="todo TODO">TODO</span>  <a href="http://ramiro.org/vis/hn-most-linked-books/">Top Books on Amazon Based on Links in Hacker News Comments (Hacker News)</a>. <br></br></li>
 <li> <a id="orgdf1159c"></a> <span class="todo TODO">TODO</span> I'm OK, You're OK (Thomas A. Harris). <br></br></li>
 <li> <a id="org89e2c79"></a> <span class="todo TODO">TODO</span> Mistakes Were Made (but not by me) (Tavris/Aronson). <br></br></li>
 <li> <a id="orga8df534"></a> <span class="todo TODO">TODO</span> Crucial Conversations (Patterson, Kelly…). <br></br></li>
 <li> <a id="org5b35f68"></a> <span class="todo TODO">TODO</span> When Prophecy Fails (Festinger). <br></br></li>
 <li> <a id="org128461c"></a> <span class="todo TODO">TODO</span> Influence (Robert Cialdini). <br></br></li>
 <li> <a id="orgdd3e1f5"></a> <span class="todo TODO">TODO</span> The Seven Day Weekend (Ricardo Semler). <br></br></li>
 <li> <a id="org705a526"></a> <span class="todo TODO">TODO</span> Elements of Style (various). <br></br></li>
 <li> <a id="org876d31e"></a> <span class="todo TODO">TODO</span> The Man Who Sold the Eiffel Tower (various). <br></br></li>
 <li> <a id="org150eecf"></a> <span class="todo TODO">TODO</span> How to talk to anyone (Leil Lowndes). <br></br></li>
 <li> <a id="org1ca5150"></a> <span class="todo TODO">TODO</span>  <a href="http://www.gutenberg.org/ebooks/1091?msg=welcome_stranger">On Heroes, Hero-Worship, and the Heroic in History by Thomas Carlyle</a>. <br></br></li>
 <li> <a id="org44b65e0"></a> <span class="todo TODO">TODO</span>  <a href="http://www.amazon.com/Light-Asia-Sir-Edwin-Arnold/dp/1491290447/ref=sr_1_1?s=books&ie=UTF8&qid=1451846351&sr=1-1&keywords=the+light+of+asia+by+sir+edwin+arnold">Edwin Sir Arnold's The Light of Asia</a>. <br></br></li>
 <li> <a id="org9767bde"></a> <span class="todo TODO">TODO</span>  <a href="http://www.amazon.com/Song-Celestial-Bhagavad-Gita-From-Mahabharata/dp/1848301596">Edwin Sir Arnold's The Song Celestial or Bhagavad-Gita</a>. <br></br></li>
 <li> <a id="org615bb80"></a> <span class="todo TODO">TODO</span>  <a href="http://www.amazon.com/great-curries-india-camellia-panjabi/dp/1904920357">50 great curries of india</a>. <br></br></li>
 <li> <a id="org992bb0c"></a> <span class="todo TODO">TODO</span>  <a href="http://www.amazon.com/gp/product/034549802X?ie%3DUTF8&tag%3Doffsitoftimfe-20&linkCode%3Das2&camp%3D1789&creative%3D390957&creativeASIN%3D034549802X">8 Week to optimum health</a>. <br></br></li>
 <li> <a id="orgba6f9db"></a> <span class="todo TODO">TODO</span>  <a href="http://www.amazon.com/Guide-Good-Life-Ancient-Stoic/dp/0195374614">A Guide to the Good Life: The Ancient Art of Stoic Joy</a>. <br></br></li>
 <li> <a id="orgb737d86"></a> <span class="todo TODO">TODO</span>  <a href="http://www.amazon.co.uk/Building-Microservices-Sam-Newman/dp/1491950358/ref%3Dsr_1_1?ie%3DUTF8&qid%3D1442603949&sr%3D8-1&keywords%3Dbuilding%2Bmicroservices">Building Microservices</a>. <br></br></li>
 <li> <a id="org1139532"></a> <span class="todo TODO">TODO</span>  <a href="http://ocw.mit.edu/ans7870/21f/21f.027/opium_wars_01/ow1_essay.pdf">First Opium War essay</a>. <br></br></li>
 <li> <a id="orgee8f7a7"></a> <span class="todo TODO">TODO</span>  <a href="http://www.amazon.com/full-catastrophe-living-wisdom-illness/dp/0739358588">Full catastrophe living</a>. <br></br></li>
 <li> <a id="orge8ef755"></a> <span class="todo TODO">TODO</span>  <a href="https://www.goodreads.com/">goodreads.com</a>. <br></br></li>
 <li> <a id="orgdd41134"></a> <span class="todo TODO">TODO</span>  <a href="http://www.amazon.com/gp/product/0061121088?ie%3DUTF8&tag%3Doffsitoftimfe-20&linkCode%3Das2&camp%3D1789&creative%3D390957&creativeASIN%3D0061121088">Leaving Microsoft to Change the world</a>. <br></br></li>
 <li> <a id="orgd10c636"></a> <span class="todo TODO">TODO</span>  <a href="http://www.amazon.com/gp/product/0140442103?ie%3DUTF8&tag%3Doffsitoftimfe-20&linkCode%3Das2&camp%3D1789&creative%3D390957&creativeASIN%3D0140442103">Letters from a stoic</a>. <br></br></li>
 <li> <a id="org7236fc9"></a> <span class="todo TODO">TODO</span>  <a href="http://www.goodreads.com/review/list/266149-michael?page=1&shelf=2014_read&view=covers">Michael's bookshelf</a>. <br></br></li>
 <li> <a id="org7fef735"></a> <span class="todo TODO">TODO</span>  <a href="http://www.brainpickings.org/2014/12/29/neil-degrasse-tyson-reading-list/">Neil degrasse tyson's reading list</a>. <br></br></li>
 <li> <a id="orgd74df76"></a> <span class="todo TODO">TODO</span>  <a href="https://en.wikipedia.org/wiki/On_the_Road">On the Road, by Jack Kerouac</a>. <br></br></li>
 <li> <a id="org328c257"></a> <span class="todo TODO">TODO</span>  <a href="https://librivox.org/search?primary_key=0&search_category=title&search_page=1&search_form=get_results">Public domain audio books</a>. <br></br></li>
 <li> <a id="orgedf53cf"></a> <span class="todo TODO">TODO</span>  <a href="http://www.amazon.co.uk/gp/product/1840001585/sr=8-1/qid=1419902519/ref=olp_product_details?ie=utf8&me=&qid=1419902519&sr=8-1">Royal horticultural society's organic Gardening</a>. <br></br></li>
 <li> <a id="orgf9d303a"></a> <span class="todo TODO">TODO</span>  <a href="http://www.salmanrushdie.com/books/">Salman Rushdie books</a>. <br></br></li>
 <li> <a id="org0b73e1e"></a> <span class="todo TODO">TODO</span>  <a href="http://www.amazon.com/Technopoly-The-Surrender-Culture-Technology/dp/0679745408">Technopoly: The Surrender of Culture to Technology</a>. <br></br></li>
 <li> <a id="org3a29843"></a> <span class="todo TODO">TODO</span> The Songlines, Bruce Chatwin. <br></br></li>
 <li> <a id="org4b2f565"></a> <span class="todo TODO">TODO</span>  <a href="http://www.amazon.co.uk/Walkers-Guide-Outdoor-Clues-Signs/dp/1444780085">The Walker's Guide to Outdoor Clues and Signs</a>. <br></br></li>
 <li> <a id="orgb894e35"></a> <span class="todo TODO">TODO</span>  <a href="http://www.amazon.co.uk/Thing-Explainer-Complicated-Stuff-Simple/dp/1473620910">Thing Explainer: Complicated Stuff in Simple Words</a>. <br></br></li>
 <li> <a id="org0f9fc9c"></a> <span class="todo TODO">TODO</span>  <a href="http://www.amazon.co.uk/madhur-jaffreys-ultimate-curry-bible/dp/0091874157/ref=sr_1_3?ie=utf8&qid=1419973767&sr=8-3&keywords=madhur+jaffrey+curry">Ultimate curry bible</a>. <br></br></li>
 <li> <a id="org37de052"></a> <span class="todo TODO">TODO</span>  <a href="http://www.amazon.co.uk/gp/product/1840001585/sr=8-1/qid=1419902519/ref=olp_product_details?ie=utf8&me=&qid=1419902519&sr=8-1">Veg patch</a>. <br></br></li>
 <li> <a id="orgf6bad7c"></a> <span class="todo TODO">TODO</span>  <a href="http://www.amazon.co.uk/JavaScript-Developer-ECMAScript-OdeToCode-Programming-ebook/dp/B018D12X0C">What Every JavaScript Developer Should Know About ECMAScript 2015</a>. <br></br></li>
 <li> <a id="org70e0d1f"></a> <span class="todo TODO">TODO</span>  <a href="http://camdez.com/blog/2016/01/02/2016-reading-list/">Cameron Desautels's 2016 reading list</a>. <br></br></li>
 <li> <a id="org9227821"></a> <span class="todo TODO">TODO</span> Thinking Fast and Slow (Kahneman). <br></br></li>
 <li> <a id="org0cc9e11"></a> <span class="done DONE">DONE</span>  <a href="https://www.goodreads.com/book/show/28209634-autonomous">Autonomous by Annalee Newitz</a>. <br></br></li>
 <li> <a id="org8ec1449"></a> <span class="done DONE">DONE</span>  <a href="https://www.goodreads.com/book/show/12924261-this-book-is-full-of-spiders">This Book Is Full of Spiders by David Wong</a>. <br></br></li>
 <li> <a id="org291b37f"></a> <span class="done DONE">DONE</span>  <a href="https://www.amazon.com/Why-We-Sleep-Unlocking-Dreams/dp/1501144316">Why we sleep</a> ( <a href="https://twitter.com/uberstuber/status/1138291707231887361?s=12">twitter outline</a>). <br></br></li>
 <li> <a id="orgb187f54"></a> <span class="done DONE">DONE</span>  <a href="http://www.amazon.com/Flow-Psychology-Experience-Perennial-Classics/dp/0061339202/">Flow: The Psychology of Optimal Experience</a>. <br></br></li>
 <li> <a id="org52671c4"></a> <span class="done DONE">DONE</span>  <a href="http://www.harukimurakami.com/library/">Haruki Murakami</a>. <br></br></li>
 <li> <a id="org4fbd20d"></a> <span class="done DONE">DONE</span>  <a href="http://www.amazon.com/gp/product/0812992180?ie%3DUTF8&tag%3Doffsitoftimfe-20&linkCode%3Das2&camp%3D1789&creative%3D390957&creativeASIN%3D0812992180">Vagabonding: An Uncommon Guide to the Art of Long-Term World Travel</a>. <br></br></li>
</ul></div>
</div>]]></description>
  <link>http://xenodium.com/books-backlog</link>
  <guid isPermaLink="false">http://xenodium.com/books-backlog</guid>
  <pubDate>Tue, 30 Dec 2014 00:00:00 +0000</pubDate>
</item>
<item>
  <title>Video backlog</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-online-video-backlog" class="outline-2">
 <h2 id="online-video-backlog"> <span class="timestamp-wrapper"> <span class="timestamp">30 December 2014</span></span> Video backlog</h2>
 <div class="outline-text-2" id="text-online-video-backlog">
 <span class="modified-timestamp">   <em>updated: 12 January 2019  </em></span>
</div>
 <ul class="org-ul"> <li> <a id="org28734ef"></a> <span class="todo TODO">TODO</span>  <a href="https://www.youtube.com/watch?v=wBraurRo_bg">Frank Ostaseski: "Inviting the Wisdom of Death into Life"</a>. <br></br></li>
 <li> <a id="orgde1cb14"></a> <span class="todo TODO">TODO</span>  <a href="https://news.ycombinator.com/item?id=17210164">YouTube’s top creators are burning out (Hacker News)</a>. <br></br></li>
 <li> <a id="orgbbfd948"></a> <span class="todo TODO">TODO</span>  <a href="https://www.youtube.com/playlist?list=PL94E35692EB9D36F3">Donald Knuth Lectures - YouTube</a>. <br></br></li>
 <li> <a id="orged7d560"></a> <span class="todo TODO">TODO</span> Rashomon by Akira Kurosawa. <br></br></li>
 <li> <a id="org4149aeb"></a> <span class="todo TODO">TODO</span>  <a href="https://vimeo.com/97903574">Seeing spaces</a>. <br></br></li>
 <li> <a id="org654497c"></a> <span class="todo TODO">TODO</span>  <a href="https://www.youtube.com/watch?v=HHYs78uIx3M">An exclusive seminar with Julian Assange</a>. <br></br></li>
 <li> <a id="org46d58bc"></a> <span class="todo TODO">TODO</span>  <a href="https://www.youtube.com/watch?v=LrObZ_HZZUc">The (Secret) City of London, Part 1: History</a>. <br></br></li>
 <li> <a id="org597526a"></a> <span class="todo TODO">TODO</span>  <a href="https://www.youtube.com/watch?v=z1ROpIKZe-c">The (Secret) City of London, Part 2: History</a>. <br></br></li>
 <li> <a id="org9365be3"></a> <span class="todo TODO">TODO</span>  <a href="https://www.youtube.com/watch?v=kXBJLH2xrBM">The UK Gold</a>. <br></br></li>
 <li> <a id="orgbf6dc2a"></a> <span class="todo TODO">TODO</span>  <a href="https://www.youtube.com/watch?v=Jio7DK15Q1E&feature=youtu.be">Terra Plana - Learning the skill of barefoot running</a>. <br></br></li>
 <li> <a id="org0e9b378"></a> <span class="todo TODO">TODO</span>  <a href="https://www.youtube.com/watch?v=Zwx1PaWbD4U">The Science of Compassion ॐ Mata Amritanandamayi ॐ Documentary</a>. <br></br></li>
 <li> <a id="org2658f38"></a> <span class="todo TODO">TODO</span>  <a href="https://www.youtube.com/playlist?list=PLZdCLR02grLrEwKaZv-5QbUzK0zGKOOcr">Rich Hickey Talks (clojure)</a>. <br></br></li>
 <li> <a id="orgb5c7253"></a> <span class="todo TODO">TODO</span>  <a href="https://egghead.io/lessons/javascript-redux-the-single-immutable-state-tree">Redux: The Single Immutable State Tree screencast</a>. <br></br></li>
 <li> <a id="org47045b3"></a> <span class="todo TODO">TODO</span>  <a href="https://channel9.msdn.com/Shows/Going+Deep/Anders-Hejlsberg-and-Lars-Bak-TypeScript-JavaScript-and-Dart">Anders Hejlsberg and Lars Bak: TypeScript, JavaScript, and Dart</a>. <br></br></li>
 <li> <a id="orgf1dd554"></a> <span class="todo TODO">TODO</span>  <a href="http://www.slowhustle.com/how-to-travel-the-slow-hustle-way-insights-from-50-episodes/">How To Travel… The Slow Hustle Way</a>. <br></br></li>
 <li> <a id="org42c9e25"></a> <span class="todo TODO">TODO</span>  <a href="https://www.youtube.com/watch?time_continue%3D1&v%3DnUjgKoOYxos">2015-12-10 Emacs Chat - John Wiegley</a>. <br></br></li>
 <li> <a id="orga5da8a7"></a> <span class="todo TODO">TODO</span>  <a href="http://emacsnyc.org/2015/03/02/how-i-use-org-capture-and-stuff.html">How To Order Salads From Inside Emacs</a>. <br></br></li>
 <li> <a id="org2df74d6"></a> <span class="todo TODO">TODO</span>  <a href="http://emacsnyc.org/2014/04/07/an-introduction-to-emacs-lisp.html">An introduction to Emacs Lisp</a>. <br></br></li>
 <li> <a id="org5704cd4"></a> <span class="todo TODO">TODO</span>  <a href="https://vimeo.com/139910837?ref%3Dtw-share">12 Challenging Steps to Being a Better Interviewer – Cate Huston at The Lead Developer 2015</a>. <br></br></li>
 <li> <a id="org7aba45e"></a> <span class="todo TODO">TODO</span>  <a href="https://www.youtube.com/watch?v%3D8o46HH-TfNY">Born Rich: Children Of The Insanely Wealthy</a>. <br></br></li>
 <li> <a id="orgf802cee"></a> <span class="todo TODO">TODO</span>  <a href="https://www.youtube.com/watch?v%3DFtieBc3KptU&feature%3Dyoutu.be&a">Emacs for writers</a>. <br></br></li>
 <li> <a id="org225c936"></a> <span class="todo TODO">TODO</span>  <a href="https://www.youtube.com/watch?v%3dbkdt9bfh5gs">Frugal fire 002: justin mccurry (rootofgood)</a>. <br></br></li>
 <li> <a id="org08c1cd8"></a> <span class="todo TODO">TODO</span> Graham Hancock – The War on Consciousness. <br></br></li>
 <li> <a id="org2b1bc97"></a> <span class="todo TODO">TODO</span>  <a href="http://www.nfb.ca/film/griefwalker?utm_content%3dbuffer24b02&utm_medium%3dsocial&utm_source%3dtwitter.com&utm_campaign%3dbuffer">Griefwalker</a>. <br></br></li>
 <li> <a id="orgbcd3c80"></a> <span class="todo TODO">TODO</span>  <a href="https://www.youtube.com/watch?v%3DSwkjqGd8NC4">How to win the loser's game</a>. <br></br></li>
 <li> <a id="orge689ab1"></a> <span class="todo TODO">TODO</span>  <a href="https://www.youtube.com/playlist?list%3DPLBDA2E52FB1EF80C9">John Green's "Crash Course History" videos</a>. <br></br></li>
 <li> <a id="orgfc28efd"></a> <span class="todo TODO">TODO</span>  <a href="https://www.youtube.com/watch?v%3DunX4FQqM6vI">Matthieu Ricard Leads a Meditation on Altruistic Love and Compassion</a>. <br></br></li>
 <li> <a id="org1dce48c"></a> <span class="todo TODO">TODO</span>  <a href="https://www.youtube.com/watch?v%3DjUlWDxhSlt8">Matthieu Ricard: "Altruism" | Talks at Google</a>. <br></br></li>
 <li> <a id="org27c78f5"></a> <span class="todo TODO">TODO</span> Nick Hanauer – Rich People Don’t Create Jobs. <br></br></li>
 <li> <a id="org9df8a90"></a> <span class="todo TODO">TODO</span>  <a href="https://www.youtube.com/watch?v%3DcsyL9EC0S0c">Programming is terrible — Lessons learned from a life wasted</a>. <br></br></li>
 <li> <a id="orgdd70b05"></a> <span class="todo TODO">TODO</span> Rupert Sheldrake – The Science of Delusion. <br></br></li>
 <li> <a id="orgf329b25"></a> <span class="todo TODO">TODO</span>  <a href="https://www.youtube.com/watch?v%3DVXTpTRuPiPQ">Surya Namaskar stretches</a>. <br></br></li>
 <li> <a id="orgb5c396d"></a> <span class="todo TODO">TODO</span>  <a href="http://audio-video.gnu.org/video/misc/2015-01__gnu_guix__the_emacs_of_distros.webm">The Emacs of distros</a>. <br></br></li>
 <li> <a id="orged53082"></a> <span class="todo TODO">TODO</span>  <a href="https://www.youtube.com/watch?v%3D17jymDn0W6U&sns%3Dem">The Known Universe by AMNH</a>. <br></br></li>
 <li> <a id="org79b3be9"></a> <span class="done DONE">DONE</span>  <a href="https://www.youtube.com/watch?v=ttLgyKk7yMA">Juliet Schor Iris Nights: Re-Thinking Materialism</a>. <br></br></li>
 <li> <a id="org87bfdb6"></a> <span class="done DONE">DONE</span>  <a href="https://archive.org/details/The.Internets.Own.Boy.The.Story.of.Aaron.Swartz.2014.WEBRiP.XViD.AC3LEGi0N">The Internets own boy</a>. <br></br></li>
 <li> <a id="org62c67c3"></a> <span class="done DONE">DONE</span>  <a href="https://www.youtube.com/watch?v%3DFw8BV4VFOwM">BBC's secret of levitation</a>. <br></br></li>
 <li> <a id="org254bab7"></a> <span class="done DONE">DONE</span>  <a href="https://vimeo.com/15351476">Hold Fast</a>. <br></br></li>
 <li> <a id="org8df3710"></a> <span class="done DONE">DONE</span>  <a href="https://www.youtube.com/watch?v=8crol-ydfmi">This is water, commencement speech</a>. <br></br></li>
 <li> <a id="org47a61db"></a> <span class="done DONE">DONE</span>  <a href="https://www.youtube.com/watch?v=dkyjvv7huzw">This is water</a>. <br></br></li>
</ul></div>
</div>]]></description>
  <link>http://xenodium.com/online-video-backlog</link>
  <guid isPermaLink="false">http://xenodium.com/online-video-backlog</guid>
  <pubDate>Tue, 30 Dec 2014 00:00:00 +0000</pubDate>
</item>
<item>
  <title>Emacs tips backlog</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-emacs-tips-backlog" class="outline-2">
 <h2 id="emacs-tips-backlog"> <span class="timestamp-wrapper"> <span class="timestamp">03 December 2014</span></span> Emacs tips backlog</h2>
 <div class="outline-text-2" id="text-emacs-tips-backlog">
 <span class="modified-timestamp">   <em>updated: 18 June 2017  </em></span>
</div>
 <ul class="org-ul"> <li> <a id="orgbd5b0a8"></a> <span class="todo TODO">TODO</span>  <a href="https://github.com/mrkkrp/typit">Typit: typing game for Emacs</a>. <br></br></li>
 <li> <a id="org0033938"></a> <span class="todo TODO">TODO</span>  <a href="https://github.com/Wilfred/pyimport">pyimports</a>. <br></br></li>
 <li> <a id="org67f6d3f"></a> <span class="todo TODO">TODO</span>  <a href="http://sriramkswamy.github.io/dotemacs/">Sriram Krishnaswamy's init</a>. <br></br></li>
 <li> <a id="org0da79f8"></a> <span class="todo TODO">TODO</span>  <a href="http://williambert.online/2014/02/using-a-node-repl-with-emacs/">Using a Node repl in Emacs with nvm and npm</a>. <br></br></li>
 <li> <a id="org2d58661"></a> <span class="todo TODO">TODO</span>  <a href="https://github.com/afainer/arview">arview</a>. <br></br></li>
 <li> <a id="org6b13392"></a> <span class="todo TODO">TODO</span>  <a href="https://github.com/PythonNut/company-flx">company-flx: fuzzy matching to company</a>. <br></br></li>
 <li> <a id="orgfe363cc"></a> <span class="todo TODO">TODO</span>  <a href="https://melpa.org/?utm_source=dlvr.it&utm_medium=twitter#/go-guru">Integration of the Go 'guru' analysis tool into Emacs</a>. <br></br></li>
 <li> <a id="org7181136"></a> <span class="todo TODO">TODO</span>  <a href="https://github.com/company-mode/company-statistics">company-mode/company-statistics: Sort completion candidates by previous completion choices</a>. <br></br></li>
 <li> <a id="org1f217a9"></a> <span class="todo TODO">TODO</span>  <a href="https://www.youtube.com/watch?v=mtliRYQd0j4&feature=youtu.be">Rewrite git history with Emacs, magit and git rebase</a>. <br></br></li>
 <li> <a id="orgf5cb096"></a> <span class="todo TODO">TODO</span>  <a href="https://github.com/trezona-lecomte/coverage">Code coverage highlighting for Emacs</a>. <br></br></li>
 <li> <a id="orgeb58c17"></a> <span class="todo TODO">TODO</span>  <a href="http://elpa.gnu.org/packages/tramp-theme.html">tramp-theme</a>. <br></br></li>
 <li> <a id="orgbcc5cbf"></a> <span class="todo TODO">TODO</span>  <a href="https://github.com/alexmurray/cstyle">cstyle</a>. <br></br></li>
 <li> <a id="org6f3a2f1"></a> <span class="todo TODO">TODO</span>  <a href="https://github.com/sigma/dotemacs/blob/master/lisp/config/go-config.el">A go Emacs config</a>. <br></br></li>
 <li> <a id="orgcd2a190"></a> <span class="todo TODO">TODO</span>  <a href="http://clubctrl.com/org/prog/howto.html">Try out ox-twbs</a>. <br></br></li>
 <li> <a id="orgb91c8a2"></a> <span class="todo TODO">TODO</span>  <a href="http://ergoemacs.org/emacs/function-frequency.html">Emacs Lisp function frequency</a>. <br></br></li>
 <li> <a id="org320f125"></a> <span class="todo TODO">TODO</span>  <a href="http://emacs.stackexchange.com/questions/7908/how-to-make-yasnippet-and-company-work-nicer">How to make yasnippet and company work nicer? (Stack Exchange)</a>. <br></br></li>
 <li> <a id="org5fb3194"></a> <span class="todo TODO">TODO</span>  <a href="https://github.com/nekop/yasnippet-java-mode/blob/master/java-snippets.el">yasnippet-java-mode/java-snippets.el</a>. <br></br></li>
 <li> <a id="org8ac5051"></a> <span class="todo TODO">TODO</span>  <a href="https://github.com/Lindydancer/font-lock-studio">font-lock-studio</a>. <br></br></li>
 <li> <a id="org19c13cc"></a> <span class="todo TODO">TODO</span>  <a href="https://github.com/jorgenschaefer/emacs-buttercup">buttercup</a>. <br></br></li>
 <li> <a id="org072691f"></a> <span class="todo TODO">TODO</span>  <a href="https://github.com/niku/markdown-preview-eww">markdown-preview-eww</a>. <br></br></li>
 <li> <a id="org9e8ac27"></a> <span class="todo TODO">TODO</span>  <a href="http://puntoblogspot.blogspot.co.uk/2016/01/til-ediff-revision.html?m=1">ediff-revision and magit-find-file to compare branches</a>. <br></br></li>
 <li> <a id="org4481ac0"></a> <span class="todo TODO">TODO</span>  <a href="https://github.com/Gnouc/flycheck-checkbashisms/blob/master/README.md">Flycheck linter for sh using checkbashisms</a>. <br></br></li>
 <li> <a id="org612a3f3"></a> <span class="todo TODO">TODO</span>  <a href="http://draketo.de/light/english/free-software/el-kanban-org-table">El Kanban Org: parse org-mode todo-states to use org-tables as Kanban tables</a>. <br></br></li>
 <li> <a id="orge946591"></a> <span class="todo TODO">TODO</span>  <a href="http://qiita.com/fujimisakari/items/a6ff082f0e8eddc09511">Emacs iOS development (qiita)</a>. <br></br></li>
 <li> <a id="orgadad04c"></a> <span class="todo TODO">TODO</span>  <a href="http://blog.fujimisakari.com/Emacs%25E3%2581%25A6%25E3%2582%2599iOS%25E9%2596%258B%25E7%2599%25BA-objective-c-%25E3%2581%2599%25E3%2582%258B%25E3%2581%259F%25E3%2582%2581%25E3%2581%25AE%25E7%2592%25B0%25E5%25A2%2583%25E6%25A7%258B%25E7%25AF%2589/">Emacs iOS development (fujimisakari)</a>. <br></br></li>
 <li> <a id="orgf3a3ab5"></a> <span class="todo TODO">TODO</span>  <a href="http://orgmode.org/worg/org-tutorials/encrypting-files.html">encrypting org files</a>. <br></br></li>
 <li> <a id="org53bdbf4"></a> <span class="todo TODO">TODO</span>  <a href="https://github.com/flycheck/flycheck-pos-tip">flycheck-pos-tip</a>. <br></br></li>
 <li> <a id="org392febf"></a> <span class="todo TODO">TODO</span>  <a href="http://tiborsimko.org/emacs-epydoc-snippets.html">Writing Python Docstrings with Emacs</a>. <br></br></li>
 <li> <a id="orgb866c5f"></a> <span class="todo TODO">TODO</span>  <a href="https://github.com/To1ne/temacco/commit/6a084365ae137db2cdd035b7533847880d8c6cac">Try Completion for Objective-C (Github diff)</a>. <br></br></li>
 <li> <a id="orgcedc79e"></a> <span class="todo TODO">TODO</span>  <a href="https://github.com/steckerhalter/emacs-fasd">Emacs fasd support</a>. <br></br></li>
 <li> <a id="orgdbc1794"></a> <span class="todo TODO">TODO</span>  <a href="https://github.com/benma/visual-regexp.el">visual-regexp</a>. <br></br></li>
 <li> <a id="orgcbaddac"></a> <span class="todo TODO">TODO</span>  <a href="http://emacsredux.com/blog/2014/05/16/opening-large-files/">Open large files</a>. <br></br></li>
 <li> <a id="org6ab84b1"></a> <span class="todo TODO">TODO</span>  <a href="https://github.com/nathankot/company-sourcekit">company-sourcekit</a> (Swift completion):  <a href="https://github.com/wiruzx/dotfiles/blob/master/.emacs#L24">sample config</a>. <br></br></li>
 <li> <a id="org7bb5ffd"></a> <span class="todo TODO">TODO</span>  <a href="https://github.com/dakrone/emacs-java-imports">emacs-java-imports</a>. <br></br></li>
 <li> <a id="orgb373faa"></a> <span class="todo TODO">TODO</span> append-to-buffer. <br></br></li>
 <li> <a id="orgee4774f"></a> <span class="todo TODO">TODO</span>  <a href="https://github.com/wavexx/python-x.el">python-x: extras for interactive evaluation</a>. <br></br></li>
 <li> <a id="orgbe27ecd"></a> <span class="todo TODO">TODO</span>  <a href="https://github.com/emacsmirror/outlined-elisp-mode">outlined-elisp-mode</a>. <br></br></li>
 <li> <a id="org72da6b4"></a> <span class="todo TODO">TODO</span>  <a href="https://github.com/tj64/outline-magic">outlien-magic</a>. <br></br></li>
 <li> <a id="orgfa418bc"></a> <span class="todo TODO">TODO</span> Gutter and linum+ config (see  <a href="https://github.com/zvlex/dotfiles">zvlex/dotfiles</a>). <br></br></li>
 <li> <a id="orga3f7eb1"></a> <span class="todo TODO">TODO</span>  <a href="https://github.com/emacsfodder/kurecolor">kurecolor</a>: Editing color. <br></br></li>
 <li> <a id="org5c8a7e5"></a> <span class="todo TODO">TODO</span>  <a href="https://www.gnu.org/software/emacs/manual/html_node/autotype/Autoinserting.html">auto-insert-mode</a>. <br></br></li>
 <li> <a id="orgaa43572"></a> <span class="todo TODO">TODO</span> Buffer local cursor color:  <a href="https://github.com/skk-dev/ddskk/blob/master/readmes/readme.ccc.org">ccc</a>. <br></br></li>
 <li> <a id="orgedd1265"></a> <span class="todo TODO">TODO</span> clang indexing tool:  <a href="http://ffevotte.github.io/clang-tags/">clang-tags</a>. <br></br></li>
 <li> <a id="orgd7ab83f"></a> <span class="todo TODO">TODO</span> Create custom theme: Trường's  <a href="http://truongtx.me/2013/03/31/color-theming-in-emacs-24/">post</a>. <br></br></li>
 <li> <a id="org291e8df"></a> <span class="todo TODO">TODO</span>  <a href="https://github.com/Fuco1/dired-hacks">dired-hacks</a>. <br></br></li>
 <li> <a id="org3e171da"></a> <span class="todo TODO">TODO</span> gtd emacs workflow: Charles cave's  <a href="http://members.optusnet.com.au/~charles57/gtd/gtd_workflow.html">notes</a>. <br></br></li>
 <li> <a id="orgb96a0b5"></a> <span class="done DONE">DONE</span> emacs-index-search (lookup subject in Emacs manual). <br></br></li>
 <li> <a id="org7c591d2"></a> <span class="done DONE">DONE</span> info-apropos (lookup subject in all manuals). <br></br></li>
 <li> <a id="org1e0f9df"></a> <span class="todo TODO">TODO</span> Jumping around tips:  <a href="http://zerokspot.com/weblog/2015/01/07/jumping-around-in-emacs/">zerokspot</a>. <br></br></li>
 <li> <a id="org75ba6fc"></a> <span class="todo TODO">TODO</span> Mac OS clipboard support (from terminal):  <a href="https://github.com/jkp/pbcopy.el">pbcopy</a>. <br></br></li>
 <li> <a id="org2e23330"></a> <span class="done OBSOLETE">OBSOLETE</span>  <a href="https://github.com/m0smith/malabar-mode">Malabar mode</a>: For Java. <br></br></li>
 <li> <a id="orge632f0d"></a> <span class="todo TODO">TODO</span> Melpa recipe format: <a href="https://github.com/milkypostman/melpa#recipe-format">format</a>. <br></br></li>
 <li> <a id="org5ed8ab7"></a> <span class="done OBSOLETE">OBSOLETE</span> Naturaldocs for javascript:  <a href="http://naiquevin.github.io/naturaldocs-for-javascript-in-emacs.html">Vineet's post</a>. <br></br></li>
 <li> <a id="org33575da"></a> <span class="todo TODO">TODO</span> Org protocol: see irreal's  <a href="http://irreal.org/blog/?p=3594">post</a> and oremacs's  <a href="http://oremacs.com/2015/01/07/org-protocol-1/">part 1</a> and  <a href="http://oremacs.com/2015/01/08/org-protocol-2/">part 2</a>. <br></br></li>
 <li> <a id="orge08fb73"></a> <span class="todo TODO">TODO</span> org-multiple-keymap.  More at  <a href="https://github.com/myuhe/org-multiple-keymap.el">org-multiple-keymap.el</a>. <br></br></li>
 <li> <a id="org13cd9ae"></a> <span class="todo TODO">TODO</span>  <a href="https://github.com/yjwen/org-reveal/tree/stable">org-reveal</a>: Export org to reveal.js. <br></br></li>
 <li> <a id="orga0336ed"></a> <span class="todo TODO">TODO</span> Practice touch/speed typing:  <a href="https://github.com/hagleitn/speed-type">speedtype</a>. <br></br></li>
 <li> <a id="org6c04824"></a> <span class="todo TODO">TODO</span> private configuration:  <a href="https://github.com/cheunghy/private">private</a>. <br></br></li>
 <li> <a id="org7ee8b72"></a> <span class="todo TODO">TODO</span> project management for C/C++:  <a href="https://github.com/lefterisjp/malinka">malinka</a>. <br></br></li>
 <li> <a id="orgb3fddbf"></a> <span class="todo TODO">TODO</span> Project templates:  <a href="https://github.com/chrisbarrett/skeletor.el">skeletor</a>. <br></br></li>
 <li> <a id="orge38d557"></a> <span class="todo TODO">TODO</span> Rewrite git logs. See  <a href="http://shingofukuyama.github.io/emacs-magit-reword-commit-messages/">emacs magit tutorial | rewrite older commit</a>. <br></br></li>
 <li> <a id="orgac6f55c"></a> <span class="todo TODO">TODO</span>  <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Selective-Display.html">Selective display</a>: Hide lines longer than. <br></br></li>
 <li> <a id="orgb279bbf"></a> <span class="todo TODO">TODO</span> shell-command-on-region: Print inline with C-u M-|. <br></br></li>
 <li> <a id="org0c59b6f"></a> <span class="todo TODO">TODO</span> shell-command: Print output inline with C-u M-!. <br></br></li>
 <li> <a id="orgcaa5ec4"></a> <span class="todo TODO">TODO</span> Simplify media file transformations:  <a href="https://github.com/abo-abo/make-it-so">make-it-so</a>. <br></br></li>
 <li> <a id="org249dfd5"></a> <span class="todo TODO">TODO</span>  <a href="https://github.com/mineo/yatemplate">yatemplate</a>. <br></br></li>
 <li> <a id="orgb56af26"></a> <span class="todo TODO">TODO</span>  <a href="https://github.com/fujimisakari/emacs-helm-xcdoc">emacs-helm-xcdoc</a>. <br></br></li>
 <li> <a id="orgd189993"></a> <span class="done OBSOLETE">OBSOLETE</span>  <a href="https://github.com/facetframer/orgnav">Drill down org files using orgnav (helm-based)</a>. <br></br></li>
 <li> <a id="orgcae15ef"></a> <span class="done OBSOLETE">OBSOLETE</span>  <a href="https://github.com/prettier/prettier-emacs">Prettier emacs</a>. (use  <a href="https://github.com/purcell/reformatter.el">reformatter.el</a>.) <br></br></li>
 <li> <a id="orge69b47b"></a> <span class="done OBSOLETE">OBSOLETE</span>  <a href="http://amitp.blogspot.co.uk/search/label/emacs">Spaceline walkthrough</a>. <br></br></li>
 <li> <a id="orgf70ec9f"></a> <span class="done OBSOLETE">OBSOLETE</span> Try out emacs Android debug (see this  <a href="http://gregorygrubbs.com/development/tips-on-android-development-using-emacs/">post</a>). <br></br></li>
 <li> <a id="org6bb24ec"></a> <span class="done OBSOLETE">OBSOLETE</span>  <a href="https://github.com/syohex/emacs-quickrun">quickrun.el</a>. <br></br></li>
 <li> <a id="org66d386a"></a> <span class="done OBSOLETE">OBSOLETE</span>  <a href="https://github.com/zakame/emacs-for-javascript">Emacs for JavaScript</a>. <br></br></li>
 <li> <a id="org352ecec"></a> <span class="done OBSOLETE">OBSOLETE</span>  <a href="https://github.com/iced/go-gopath/blob/master/README.md">go-gopath</a>. <br></br></li>
 <li> <a id="orgd42cdd0"></a> <span class="done OBSOLETE">OBSOLETE</span>  <a href="https://github.com/alezost/shift-number.el">shift-number.el</a>. <br></br></li>
 <li> <a id="orga0fb2a5"></a> <span class="done OBSOLETE">OBSOLETE</span>  <a href="https://github.com/xuchunyang/DevDocs.el">https://github.com/xuchunyang/DevDocs.el</a>. <br></br></li>
 <li> <a id="org03936b4"></a> <span class="done OBSOLETE">OBSOLETE</span>  <a href="https://github.com/jasonm23/emacs-select-themes/blob/master/select-themes.el">select-themes</a>. <br></br></li>
 <li> <a id="org1a3fbe0"></a> <span class="done OBSOLETE">OBSOLETE</span>  <a href="https://github.com/bmag/helm-purpose">Emacs purpose</a>. <br></br></li>
 <li> <a id="org7c868a6"></a> <span class="done OBSOLETE">OBSOLETE</span>  <a href="http://bling.github.io/blog/2016/01/18/why-are-you-changing-gc-cons-threshold/">Why are you changing gc-cons-threshold?</a>. <br></br></li>
 <li> <a id="org48dec15"></a> <span class="done OBSOLETE">OBSOLETE</span>  <a href="https://github.com/nivekuil/corral">Corral</a>. <br></br></li>
 <li> <a id="org81c75d6"></a> <span class="done OBSOLETE">OBSOLETE</span>  <a href="https://github.com/nicklanasa/xcode-mode/blob/master/README.md">xcode-mode</a>. <br></br></li>
 <li> <a id="orge3f4e36"></a> <span class="done OBSOLETE">OBSOLETE</span>  <a href="https://github.com/yuutayamada/commenter">commenter</a>. <br></br></li>
 <li> <a id="orgea3108b"></a> <span class="done OBSOLETE">OBSOLETE</span>  <a href="https://github.com/ustun/emacs-helpers-for-js/blob/master/uojs.el">Emacs JavaScript helpers</a>. <br></br></li>
 <li> <a id="org1fe0920"></a> <span class="done OBSOLETE">OBSOLETE</span>  <a href="https://github.com/lujun9972/yahoo-weather-mode">yahoo-weather-mode</a>. <br></br></li>
 <li> <a id="orgf3c8f17"></a> <span class="done OBSOLETE">OBSOLETE</span>  <a href="https://github.com/peteyy/.emacs.d/blob/master/settings/language-javascript.el">Peek at peteyy's Javascript config</a>. <br></br></li>
 <li> <a id="orgde9a026"></a> <span class="done OBSOLETE">OBSOLETE</span>  <a href="https://github.com/trotzig/import-js">import-js</a>. <br></br></li>
 <li> <a id="org5146a89"></a> <span class="done OBSOLETE">OBSOLETE</span>  <a href="https://github.com/CodyReichert/es6-snippets">ES6 yasnippets</a>. <br></br></li>
 <li> <a id="orgb01e1ba"></a> <span class="done OBSOLETE">OBSOLETE</span>  <a href="https://github.com/swank-js/swank-js">swank-js</a>. <br></br></li>
 <li> <a id="orgcd3a340"></a> <span class="done OBSOLETE">OBSOLETE</span>  <a href="https://github.com/ananthakumaran/tide">TypeScript Interactive Development Environment for Emacs</a>. <br></br></li>
 <li> <a id="orgb83832c"></a> <span class="done DONE">DONE</span> Try out  <a href="https://github.com/jacobdufault/cquery/blob/master/emacs/cquery.el">cquery</a>,  <a href="https://github.com/emacs-lsp/lsp-mode">emacs-lsp</a>, and  <a href="https://github.com/tigersoldier/company-lsp">company-lsp</a>. <br></br></li>
 <li> <a id="org69be5ea"></a> <span class="done DONE">DONE</span> (setq projectile-use-git-grep t).  <span class="timestamp-wrapper"> <span class="timestamp">27 December 2018</span></span> <br></br></li>
 <li> <a id="org85ca312"></a> <span class="done DONE">DONE</span>  <a href="https://www.reddit.com/r/emacs/comments/46lv2q/is_there_any_easy_way_to_make_org_files_password/">Is there any easy way to make .org files password protected? (Reddit)</a>. <br></br></li>
 <li> <a id="org8e640bf"></a> <span class="done DONE">DONE</span> use-package binding to different maps <br></br> <div class="outline-text-5" id="text-org8e640bf">
 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(<span style="color: #a71d5d;">use-package</span>  <span style="color: #0086b3;">term</span>
   <span style="color: #a71d5d;">:bind</span>
  (<span style="color: #a71d5d;">:map</span>
   term-mode-map
   (<span style="color: #183691;">"M-p"</span> . term-send-up)
   (<span style="color: #183691;">"M-n"</span> . term-send-down)
    <span style="color: #a71d5d;">:map</span> term-raw-map
   (<span style="color: #183691;">"M-o"</span> . other-window)
   (<span style="color: #183691;">"M-p"</span> . term-send-up)
   (<span style="color: #183691;">"M-n"</span> . term-send-down)))
</pre>
</div>
</div>
</li>
 <li> <a id="orgdca6971"></a> <span class="done DONE">DONE</span>  <a href="https://github.com/syohex/emacs-qrencode/blob/master/README.md">Emacs qrencode</a>. <br></br></li>
 <li> <a id="orgd867279"></a> <span class="done DONE">DONE</span>  <a href="https://github.com/Fuco1/smartparens">Smartparens</a>. <br></br></li>
 <li> <a id="org1e89b39"></a> <span class="done DONE">DONE</span>  <a href="https://gist.github.com/syohex/626af66ba3650252b0a2">Hash region</a>. <br></br></li>
 <li> <a id="org3382d08"></a> <span class="done DONE">DONE</span>  <a href="https://github.com/syohex/emacs-helm-ispell">helm-ispell</a>. <br></br></li>
 <li> <a id="orge6dfb5e"></a> <span class="done DONE">DONE</span>  <a href="https://github.com/HKey/dired-atool">Pack/unpack files with atool on dired</a>. <br></br></li>
 <li> <a id="orgbcccfc5"></a> <span class="done DONE">DONE</span>  <a href="https://github.com/Alexander-Miller/company-shell">company-shell</a>. <br></br></li>
 <li> <a id="orgfdee730"></a> <span class="done DONE">DONE</span> artbollocks-mode and writegood. More at Sacha's  <a href="http://sachachua.com/blog/2011/12/emacs-artbollocks-mode-el-and-writing-more-clearly/">post</a>. <br></br></li>
 <li> <a id="org174736d"></a> <span class="done DONE">DONE</span> comint-prompt-read-only for making shell prompts read-only. <br></br></li>
 <li> <a id="org901a025"></a> <span class="done DONE">DONE</span>  <a href="https://github.com/kelvinh/org-page">org-page</a>: Static blog. <br></br></li>
 <li> <a id="orge1b1cae"></a> <span class="done DONE">DONE</span>  <a href="https://www.reddit.com/r/emacs/comments/43b42y/i_just_realized_emacs_has_a_fast_infix_calculator/">I just realized Emacs has a fast infix calculator that's not calc or quick-calc… (Reddit)</a>. <br></br></li>
 <li> <a id="org3c576ce"></a> <span class="done DONE">DONE</span>  <a href="http://promberger.info/linux/2010/02/16/how-to-get-emacs-key-bindings-in-ubuntu/">How to get emacs key bindings in Ubuntu</a>. <br></br></li>
 <li> <a id="org7622934"></a> <span class="done DONE">DONE</span>  <a href="https://github.com/calvinwyoung/org-autolist">org-autolist</a>. <br></br></li>
 <li> <a id="orgb3ba44a"></a> <span class="done DONE">DONE</span> Move up by parens: More at the  <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Moving-by-Parens.html">manual</a>. <br></br></li>
 <li> <a id="org940c3ef"></a> <span class="done DONE">DONE</span> sunrise-sunset. <br></br></li>
 <li> <a id="orgb1e7791"></a> <span class="done DONE">DONE</span>  <a href="https://github.com/abo-abo/ace-window">ace-window</a>. <br></br></li>
 <li> <a id="org260860b"></a> <span class="done DONE">DONE</span> Checkdoc. <br></br></li>
 <li> <a id="org6819965"></a> <span class="done DONE">DONE</span> Choose magit repo c-u c-x g (magit-status). <br></br></li>
 <li> <a id="orga97908d"></a> <span class="done DONE">DONE</span> continue comment blocks: m-j (indent-new-comment-line). <br></br></li>
 <li> <a id="org9336579"></a> <span class="done DONE">DONE</span> Debug expanded elisp macros: See Wisdom and Wonder's  <a href="http://www.wisdomandwonder.com/link/9316/how-to-debug-expanded-elisp-macros">post</a>. <br></br></li>
 <li> <a id="orgeadf67e"></a> <span class="done DONE">DONE</span> delete-duplicate-lines <br></br></li>
 <li> <a id="org807a0ba"></a> <span class="done DONE">DONE</span> Describe bindings: C-h b lists all bindings. <br></br></li>
 <li> <a id="org87dcb8a"></a> <span class="done DONE">DONE</span> Disable furniture <br></br> <div class="outline-text-5" id="text-org87dcb8a">
 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(menu-bar-mode -1)
(toggle-scroll-bar -1)
(tool-bar-mode -1)
</pre>
</div>
</div>
</li>
 <li> <a id="org29dc497"></a> <span class="done DONE">DONE</span>  <a href="https://github.com/silex/elmacro">elmacro</a> shows keyboard as emacs lisp. <br></br></li>
 <li> <a id="orgd427bf9"></a> <span class="done DONE">DONE</span> yasnippet mirrors with transformations more at  <a href="https://capitaomorte.github.io/yasnippet/snippet-development.html#sec-3-6">snippet development</a>. <br></br> <div class="outline-text-5" id="text-orgd427bf9">
 <p>
For example:
</p>
 <div class="org-src-container">
 <pre class="src src-sh"> <span style="color: #795da3;">-</span> (${ <span style="color: #333333;">1</span>:id})${ <span style="color: #333333;">2</span>:foo}
{
     <span style="color: #a71d5d;">return</span> $ <span style="color: #333333;">2</span>;
}

 <span style="color: #795da3;">-</span> (void) <span style="color: #a71d5d;">set</span>${ <span style="color: #333333;">2</span>:$(capitalize yas-text)}:($ <span style="color: #333333;">1</span>)avalue
{
    [$ <span style="color: #333333;">2</span> autorelease];
    $ <span style="color: #333333;">2</span> = [avalue retain];
}
$ <span style="color: #333333;">0</span>
</pre>
</div>
</div>
</li>
 <li> <a id="orgcc8b18f"></a> <span class="done DONE">DONE</span> Emacs regex:  <a href="http://ergoemacs.org/emacs/emacs_regex.html">Emacs: text pattern matching (regex) tutorial</a>. <br></br></li>
 <li> <a id="orge85dd7a"></a> <span class="done DONE">DONE</span> export ascii art:  <a href="http://www.lysator.liu.se/~tab/artist/">artist mode</a> +  <a href="http://ditaa.sourceforge.net">ditaa</a> for uml. demo  <a href="https://www.youtube.com/watch?v=ciux87xo8fc">video</a>. <br></br></li>
 <li> <a id="orgf02283c"></a> <span class="done DONE">DONE</span>  <a href="https://github.com/abo-abo/lispy">lispy</a>. <br></br></li>
 <li> <a id="orga60b6af"></a> <span class="done DONE">DONE</span>  <a href="https://github.com/dandavison/minimal">minimal</a>: minimalist appearance. <br></br></li>
 <li> <a id="org95b5c8b"></a> <span class="done DONE">DONE</span> Narrowing regions <br></br> <div class="outline-text-5" id="text-org95b5c8b">
 <ul class="org-ul"> <li>c-x n n (narrow-to-region).</li>
 <li>c-x n w (Widen).</li>
</ul></div>
</li>
 <li> <a id="orgb49a3ce"></a> <span class="done DONE">DONE</span>  <a href="https://www.gnu.org/software/emacs/manual/nxml-mode.html">nxml-mode</a>. <br></br></li>
 <li> <a id="org04b291f"></a> <span class="done DONE">DONE</span>  <a href="https://github.com/jonnay/emagicians-starter-kit/blob/master/themes/org-beautify-theme.org">org-beautify-theme</a>: a sub-theme to make org-mode more beautiful. <br></br></li>
 <li> <a id="orgd0a4985"></a> <span class="done DONE">DONE</span> Recursive query/replace <br></br> <div class="outline-text-5" id="text-orgd0a4985">
 <ul class="org-ul"> <li>M-x find-dired RET.</li>
 <li>Navigate to location, RET.</li>
 <li>Add find argument (omit for all files), RET.</li>
 <li>t (select all).</li>
 <li>Q (query-replace).</li>
 <li>Enter search/replace terms.</li>
 <li>y/n for each match.</li>
 <li>C-x s ! (save all).</li>
</ul></div>
</li>
 <li> <a id="org6da9d7c"></a> <span class="done DONE">DONE</span> Repeat last command: C-x z (and just z threreafter). <br></br></li>
 <li> <a id="orge278038"></a> <span class="done DONE">DONE</span> Replace char with a newline <br></br> <div class="outline-text-5" id="text-orge278038">
 <ul class="org-ul"> <li>M-x replace-string RET ; RET C-q C-j.</li>
 <li>C-q (quoted-insert).</li>
 <li>C-j (newline).</li>
</ul></div>
</li>
 <li> <a id="orgd73e80b"></a> <span class="done DONE">DONE</span>  <a href="https://github.com/bruce-connor/smart-mode-line">smart-mode-line</a>,  <a href="http://pages.sachachua.com/.emacs.d/sacha.html">sacha's sample usage</a>. <br></br></li>
 <li> <a id="org4c604ac"></a> <span class="done DONE">DONE</span> Toggling key bingings:  <a href="http://oremacs.com/2014/12/25/ode-to-toggle/">ode to the toggle</a>. <br></br></li>
 <li> <a id="orgbb8d357"></a> <span class="done DONE">DONE</span>  <a href="https://github.com/damiencassou/unify-opening">unify-opening</a> <br></br></li>
 <li> <a id="org0955c8d"></a> <span class="done DONE">DONE</span> use-package:  <a href="http://www.lunaryorn.com/2015/01/06/my-emacs-configuration-with-use-package.html">lunaryorn</a>. <br></br></li>
 <li> <a id="org8dbfb0e"></a> <span class="done DONE">DONE</span>  <a href="https://github.com/aaronbieber/sunshine.el">sunshine.el</a>. <br></br></li>
 <li> <a id="org39d1c25"></a> <span class="done DONE">DONE</span> youtube-dl:  <a href="http://oremacs.com/2015/01/05/youtube-dl/">or emacs</a>. <br></br></li>
</ul></div>
</div>]]></description>
  <link>http://xenodium.com/emacs-tips-backlog</link>
  <guid isPermaLink="false">http://xenodium.com/emacs-tips-backlog</guid>
  <pubDate>Wed, 03 Dec 2014 00:00:00 +0000</pubDate>
</item>
<item>
  <title>Emacs lisp bookmarks</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-emacs-lisp-bookmarks" class="outline-2">
 <h2 id="emacs-lisp-bookmarks"> <span class="timestamp-wrapper"> <span class="timestamp">20 September 2014</span></span> Emacs lisp bookmarks</h2>
 <div class="outline-text-2" id="text-emacs-lisp-bookmarks">
 <span class="modified-timestamp">   <em>updated: 28 November 2021  </em></span>
 <ul class="org-ul"> <li> <a href="https://twitter.com/kaushalmodi/status/1059873868175826946?s=12">(setq search-whitespace-regexp ".*?") isearch "abc ghi" matches "abcdefghi"</a>.</li>
 <li> <a href="https://github.com/kinghom/elisp-guide">A quick guide to Emacs Lisp programming</a>.</li>
 <li> <a href="https://github.com/alphapapa/unpackaged.el#font-compare">A snippet to try out fonts</a>.</li>
 <li>Abo abo's  <a href="https://github.com/abo-abo/elisp-guide">Emacs Lisp Guide</a>.</li>
 <li> <a href="http://www.wilfred.me.uk/blog/2015/03/19/adding-a-new-language-to-emacs/">Adding A New Language to Emacs (ie. writing a new major mode)</a>.</li>
 <li> <a href="https://github.com/alphapapa/emacs-package-dev-handbook">alphapapa's The Emacs Package Developer’s Handbook</a>.</li>
 <li> <a href="https://nullprogram.com/blog/2019/03/10/">An Async / Await Library for Emacs Lisp « null program</a>.</li>
 <li> <a href="http://harryrschwartz.com/2014/04/08/an-introduction-to-emacs-lisp.html">An introduction to emacs lisp</a>.</li>
 <li> <a href="https://elpa.gnu.org/packages/path-iterator.html">An iterator for traversing a directory path</a>.</li>
 <li> <a href="https://www.badykov.com/emacs/2020/05/05/async-company-mode-backend/">Async autocompletion in Emacs – Kraken of Thought</a>.</li>
 <li> <a href="http://caiorss.github.io/Emacs-Elisp-Programming/Elisp_Snippets.html">Caio Rordrigues's Elisp Snippets</a>.</li>
 <li> <a href="https://github.com/caiorss/Emacs-Elisp-Programming">Caio's Emacs - Programming and Customization</a>.</li>
 <li> <a href="https://rosettacode.org/wiki/Category:Emacs_Lisp">Category:Emacs Lisp - Rosetta Code</a>.</li>
 <li> <a href="https://tech.tonyballantyne.com/emacs/lisp-loops/">Common Lisp Loops – Tony Ballantyne Tech</a>.</li>
 <li> <a href="https://tech.tonyballantyne.com/emacs/date-and-time/">Date and Time – Tony Ballantyne Tech</a>.</li>
 <li> <a href="http://www.emacswiki.org/emacs/ElDoc">eldoc-mode</a>.</li>
 <li> <a href="https://github.com/alphapapa/elexandria/blob/a22b12f3472baa617545d2f247ea41f5ef70a488/elexandria.el#L103">elexandria/elexandria.el's with-file-buffer macro</a>.</li>
 <li> <a href="https://github.com/alhassy/ElispCheatSheet">ElispCheatSheet: Quick reference to the core language of Emacs —Editor MACroS.</a>.</li>
 <li> <a href="https://github.com/caiorss/Emacs-Elisp-Programming">Emacs - Elisp Programming and Customization</a>.</li>
 <li> <a href="https://caiorss.github.io/Emacs-Elisp-Programming/Elisp_Programming.html">Emacs Elisp Programming guide</a>.</li>
 <li> <a href="https://github.com/chrisdone/elisp-guide/blob/master/README.md">Emacs Lisp Guide, chrisdone/elisp-guide · GitHub</a>.</li>
 <li> <a href="https://github.com/larsmagne/emacs-sqlite3">Emacs sqlite binding of Emacs Lisp inspired by mruby-sqlite3</a>.</li>
 <li> <a href="http://www.emacswiki.org/emacs/EmacsSymbolNotation">Emacs symbol notation</a>.</li>
 <li> <a href="https://github.com/skeeto/emacs-bencode">emacs-bencode: Bencode package for Emacs Lisp (encoding losely structured data)</a>.</li>
 <li> <a href="http://newartisans.com/2016/01/pattern-matching-with-pcase/">Emacs: Pattern Matching with pcase</a>.</li>
 <li> <a href="https://curiousprogrammer.wordpress.com/2009/06/08/error-handling-in-emacs-lisp/">Error Handling in Emacs Lisp</a>.</li>
 <li> <a href="https://www.reddit.com/r/emacs/comments/9auzla/example_showing_how_useful_the_ampleregexps/">Example showing how useful the ample-regexps package is : emacs</a>.</li>
 <li> <a href="http://www.emacswiki.org/emacs/find-library.el">find-library</a>.</li>
 <li> <a href="https://github.com/functionreturnfunction/format-table">format-table: Parse and reformat tabular data in emacs (Looks great for converting between org, json, and other RDBMS)</a>.</li>
 <li> <a href="https://github.com/alphapapa/ts.el">GitHub - alphapapa/ts.el: Emacs date-time library</a>.</li>
 <li> <a href="https://github.com/brandelune/nipel">GitHub - brandelune/nipel: New Introduction to Programming in Emacs Lisp</a>.</li>
 <li> <a href="https://github.com/Lindydancer/face-explorer">GitHub - Lindydancer/face-explorer: Library and tools for faces and text properties</a>.</li>
 <li> <a href="https://github.com/p3r7/awesome-elisp">GitHub - p3r7/awesome-elisp: A curated list of emacs-lisp development resources</a>.</li>
 <li> <a href="https://github.com/Wilfred/ht.el">GitHub - Wilfred/ht.el: The missing hash table library for Emacs</a>.</li>
 <li> <a href="https://github.com/xuchunyang/elisp-demos/">GitHub - xuchunyang/elisp-demos: Demonstrate Emacs Lisp APIs</a>.</li>
 <li> <a href="http://ruzkuku.com/texts/emacs-style.html">Good Style in modern Emacs Packages</a>.</li>
 <li> <a href="https://harryrschwartz.com/2014/04/08/an-introduction-to-emacs-lisp.html">Harry R. Schwartz's An Introduction to Emacs Lisp</a>.</li>
 <li> <a href="https://yoo2080.wordpress.com/2013/09/22/how-to-choose-emacs-lisp-package-namespace-prefix">How to choose Emacs Lisp package namespace prefix</a>.</li>
 <li> <a href="http://nullprogram.com/blog/2013/02/06/">How to Make an Emacs Minor Mode</a>.</li>
 <li> <a href="http://emacslife.com/how-to-read-emacs-lisp.html">How to read emacs lisp</a>.</li>
 <li> <a href="https://yoo2080.wordpress.com/2014/07/20/it-is-not-hard-to-edit-lisp-code/">It's not hard to edit Lisp code</a>.</li>
 <li> <a href="https://github.com/hypernumbers/learn_elisp_the_hard_way/blob/master/contents/why-did-I-write-this-book.rst">Learn elisp the hard way</a>.</li>
 <li> <a href="https://bzg.fr/en/learn-emacs-lisp-in-15-minutes/">Learn Emacs Lisp in 15 minutes - Bastien Guerry</a>.</li>
 <li> <a href="http://bzg.fr/learn-emacs-lisp-in-15-minutes.html">Learn emacs lisp in 15 minutes</a>.</li>
 <li> <a href="http://thewanderingcoder.com/2015/01/emacs-org-mode-links-and-exported-html/">Links and exported HTML</a>.</li>
 <li> <a href="https://yoo2080.wordpress.com/2013/08/07/living-with-emacs-lisp">Living with Emacs Lisp</a>.</li>
 <li> <a href="http://www.gigamonkeys.com/book/loop-for-black-belts.html">LOOP for Black Belts</a>.</li>
 <li> <a href="http://mbork.pl/2018-12-03_looking-back-p">Marcin Borkowski: 2018-12-03 looking-back-p</a>.</li>
 <li> <a href="http://mbork.pl/2019-03-25_Using_benchmark_to_measure_speed_of_Elisp_code">Marcin Borkowski: 2019-03-25 Using benchmark to measure speed of Elisp code</a>.</li>
 <li> <a href="http://www.nongnu.org/emacs-tiny-tools/elisp-coding/">Nongnu elisp guidelines</a>.</li>
 <li> <a href="http://newartisans.com/2016/01/pattern-matching-with-pcase/">Pattern matching with pcase</a>.</li>
 <li> <a href="https://tech.tonyballantyne.com/emacs/pattern-matching-pcase/">Pattern Matching: pcase – Tony Ballantyne Tech</a>.</li>
 <li> <a href="http://emacslife.com/how-to-read-emacs-lisp.html">Read Lisp, Tweak Emacs</a>.</li>
 <li> <a href="https://joelmccracken.github.io/entries/reading-writing-data-in-emacs-batch-via-stdin-stdout/">Reading from stdin and writing to stdout with Emacs batch</a>.</li>
 <li> <a href="http://thewanderingcoder.com/2015/02/refactoring-beginning-emacs-lisp-i-adding-tests/">Refactoring “Beginning Emacs Lisp”: I: Adding Tests</a>.</li>
 <li> <a href="https://gist.github.com/equwal/89b1ef5ac8d4d737cfd37f66e9ba4895">Selecting and trying out different fonts in Emacs</a>.</li>
 <li> <a href="https://github.com/purcell/elisp-slime-nav">Slime-style navigation for Emacs Lisp</a>.</li>
 <li> <a href="https://hungyi.net/posts/split-list-into-batches-elisp/">Split a List Into Batches Using Emacs Lisp - Hung-Yi’s Journal</a>.</li>
 <li> <a href="https://zck.me/testing-buffer-modifying-emacs-code">Testing Emacs code that modifies buffers</a>.</li>
 <li> <a href="http://nic.ferrier.me.uk/blog/2012_07/tips-and-tricks-for-emacslisp">Tips on Emacs Lisp programming</a>.</li>
 <li> <a href="http://endlessparentheses.com/understanding-letf-and-how-it-replaces-flet.html">Understanding letf and how it replaces flet · Endless Parentheses</a>.</li>
 <li> <a href="https://github.com/larsmagne/vpt.el/blob/master/vpt.el">Variable Pitch Tables</a>.</li>
 <li> <a href="https://github.com/larsmagne/vpt.el">vpt.el: An Emacs package to display tabular data with variable pitch fonts</a>.</li>
 <li> <a href="https://github.com/larsmagne/watch-directory.el/blob/master/watch-directory.el">Watch a directory using elisp (larsmagne)</a>.</li>
 <li> <a href="https://github.com/larsmagne/watch-directory.el/blob/master/watch-directory.el">watch-directory.el watches a directory for new files</a>.</li>
 <li> <a href="https://www.reddit.com/r/emacs/comments/43nh3h/whats_the_best_practice_to_write_emacslispat_2016/">What's the best practice to write emacs-lisp (at 2016)? (Reddit)</a>.</li>
 <li> <a href="https://emacs.stackexchange.com/questions/2868/whats-wrong-with-find-file-noselect">What's wrong with `find-file-noselect`? (Emacs Stack Exchange)</a>.</li>
 <li> <a href="http://wikemacs.org/wiki/Emacs_Lisp_Cookbook">Wikemacs's Emacs Lisp Cookbook</a>.</li>
 <li> <a href="https://with-emacs.com/posts/tutorials/almost-all-you-need-to-know-about-variables/">with-emacs · (Almost) All You Need to Know About Variables</a>.</li>
 <li> <a href="https://qiita.com/itiut@github/items/d917eafd6ab255629346">with-suppressed-message macro</a>.</li>
 <li> <a href="https://www.youtube.com/watch?v=XjKtkEMUYGc&feature=youtu.be">Writing a Spotify Client</a>.</li>
 <li> <a href="https://iloveemacs.wordpress.com/2016/02/27/writing-web-apps-in-emacs-lisp/">Writing Web apps in Emacs Lisp (simple-httpd)</a>.</li>
 <li> <a href="http://ergoemacs.org/emacs/elisp_symbol.html">Xah Lee's Emacs Lisp Symbol (tutorial)</a>.</li>
 <li> <a href="http://ergoemacs.org/emacs/elisp_common_functions.html">Xah's Common Emacs Lisp Functions</a>.</li>
 <li> <a href="http://ergoemacs.org/emacs/elisp_idioms_batch.html">Xah's Emacs Lisp idioms for Text Processing in Batch Style</a>.</li>
 <li> <a href="http://ergoemacs.org/emacs/elisp.html">Xah's Emacs Lisp Tutorial</a>.</li>
 <li> <a href="https://github.com/bddean/xml-plus">XML utilities for Emacs lisp</a>.</li>
 <li> <a href="https://github.com/xuchunyang/elisp-demos/blob/master/elisp-demos.org">Xu Chunyang's Elisp demos/examples/snippets </a>.</li>
</ul></div>
</div>
</div>]]></description>
  <link>http://xenodium.com/emacs-lisp-bookmarks</link>
  <guid isPermaLink="false">http://xenodium.com/emacs-lisp-bookmarks</guid>
  <pubDate>Sat, 20 Sep 2014 00:00:00 +0100</pubDate>
</item>
<item>
  <title>gpg/pgp bookmarks</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-gpgpgp-bookmarks" class="outline-2">
 <h2 id="gpgpgp-bookmarks"> <span class="timestamp-wrapper"> <span class="timestamp">20 September 2014</span></span> gpg/pgp bookmarks</h2>
 <div class="outline-text-2" id="text-gpgpgp-bookmarks">
 <span class="modified-timestamp">   <em>updated: 06 May 2019  </em></span>
 <ul class="org-ul"> <li> <a href="https://gpgtools.tenderapp.com/kb/gpg-keychain-faq/backup-or-transfer-your-keys">Backup or transfer your keys / GPG Keychain FAQ / Knowledge Base - GPGTools Support</a>.</li>
 <li> <a href="https://alexcabal.com/creating-the-perfect-gpg-keypair">Creating the perfect GPG keypair - Alex Cabal</a>.</li>
 <li> <a href="https://github.com/kensanata/ggg">Gmail, Gnus and GPG guide</a>.</li>
 <li> <a href="https://emacsist.github.io/2019/01/01/gnupg2%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8C%97/">GnuPG2 snippets - emacsist</a>.</li>
 <li> <a href="https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-57pt1r4.pdf">NIST Special Publication: Recommendation for Key Management</a>.</li>
 <li> <a href="https://riseup.net/en/security/message-security/openpgp/best-practices">OpenPGP Best Practices - riseup.net</a>.</li>
 <li> <a href="https://medium.com/@ahawkins/securing-my-digital-life-gpg-yubikey-ssh-on-macos-5f115cb01266">Securing My Digital Life: GPG, Yubikey, & SSH on macOS</a>.</li>
 <li> <a href="https://www.gnupg.org/gph/en/manual.html">The GNU Privacy handbook</a>.</li>
</ul></div>
</div>
</div>]]></description>
  <link>http://xenodium.com/gpgpgp-bookmarks</link>
  <guid isPermaLink="false">http://xenodium.com/gpgpgp-bookmarks</guid>
  <pubDate>Sat, 20 Sep 2014 00:00:00 +0100</pubDate>
</item>
<item>
  <title>Emacs bookmarks</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-emacs-bookmarks" class="outline-2">
 <h2 id="emacs-bookmarks"> <span class="timestamp-wrapper"> <span class="timestamp">19 September 2014</span></span> Emacs bookmarks</h2>
 <div class="outline-text-2" id="text-emacs-bookmarks">
 <span class="modified-timestamp">   <em>updated: 23 November 2021  </em></span>
 <ul class="org-ul"> <li>[[ <a href="https://christiantietze.de/posts/2021/06/emacs-center-window-on-current-monitor/">https://christiantietze.de/posts/2021/06/emacs-center-window-on-current-monitor/</a></li>
 <li> <a href="https://karthinks.com/software/bridging-islands-in-emacs-1/">Bridging Islands in Emacs: re-builder and query-replace-regexp | Karthinks</a>.</li>
 <li> <a href="https://willschenk.com/articles/2020/tramp_tricks/">Emacs Tramp tricks</a>.</li>
 <li> <a href="https://philjackson.github.io//emacs/shell/2021/07/26/export-an-environment-variable-to-emacs/">Export an environment variable to Emacs | Snippets and other bits</a>.</li>
 <li> <a href="https://ruzkuku.com/texts/lesser-known.html#m-x-find-library-mode-local-ret-2004">Lesser known functionalities in core Emacs (see setq-mode-local)</a>.</li>
 <li> <a href="https://ruzkuku.com/texts/lesser-known.html">Lesser known functionalities in core Emacs</a>.</li>
 <li> <a href="https://philjackson.github.io/emacs/mu4e/email/2021/08/30/save-all-mu4e-attachments/">Save all mu4e attachments | Snippets and other bits</a>.</li>
</ul> <p>
][Christian Tietze: Emacs: center window on current monitor]].
</p>
 <ul class="org-ul"> <li> <a href="https://github.com/junjiemars/.emacs.d/blob/master/config/gud-cdb.el">.emacs.d/gud-cdb.el (supports lldb)</a>.</li>
 <li> <a href="https://github.com/junjiemars/.emacs.d/blob/master/config/gud-lldb.el">.emacs.d/gud-lldb.el at master · junjiemars/.emacs.d · GitHub</a>.</li>
 <li> <a href="https://emacsthemes.com/">A GNU Emacs Themes Gallery (great for previewing)</a>.</li>
 <li> <a href="http://irreal.org/blog/?p=5378">A Reminder About Macro Counters</a>.</li>
 <li> <a href="https://spin.atomicobject.com/2016/05/27/write-emacs-package/">A Simple Guide to Writing & Publishing Emacs Packages</a>.</li>
 <li> <a href="https://www.reddit.com/r/emacs/comments/ggnekq/a_very_minimal_but_elegant_emacs_i_think/">A very minimal but elegant emacs (I think) : emacs</a>.</li>
 <li> <a href="http://blog.aaronbieber.com">Aaron Bieber's blog</a>.</li>
 <li> <a href="http://www.jesshamrick.com/2012/09/10/absolute-beginners-guide-to-emacs/">Absolute Beginner's Guide to Emacs</a>.</li>
 <li> <a href="https://scripter.co/accessing-devdocs-from-emacs/">Accessing Devdocs from Emacs</a>.</li>
 <li> <a href="https://blog.d46.us/advanced-emacs-startup">Advanced Techniques for Reducing Emacs Startup Time</a>.</li>
 <li> <a href="https://github.com/baohaojun/ajoke">Ajoke</a>.</li>
 <li> <a href="https://amitp.blogspot.com/2019/07/emacs-mode-line-simplified.html">Amit's Thoughts: Emacs mode line simplified</a>.</li>
 <li> <a href="http://www.masteringemacs.org/article/introduction-magit-emacs-mode-git">An introduction to Magit, an Emacs mode for Git</a>.</li>
 <li> <a href="https://www.reddit.com/r/emacs/comments/htfwfa/andrea_corallo_gccemacs_update_10_july_16_2020/">Andrea Corallo: gccemacs Update 10 (July 16, 2020)</a>.</li>
 <li> <a href="http://m00natic.github.io/emacs/emacs-wiki.html">Andrey's Opionated Emacs Guide</a>.</li>
 <li> <a href="http://danmidwood.com/content/2014/11/21/animated-paredit.html">Animated guide to paredit</a>.</li>
 <li> <a href="https://www.reddit.com/r/emacs/comments/ehzxhn/any_packagesolution_to_fix_cursor_13_from_top_of/">Any package/solution to fix cursor 1/3 from top of buffer? (ie. alternatives to centered-cursor-mode)</a>.</li>
 <li> <a href="http://blog.binchen.org/posts/aspell-0-60-8-will-have-direct-support-for-camelcase-words.html">Aspell 0.60.8 will have direct support for camelCase words (Update Emacs flyspell setup)</a>.</li>
 <li> <a href="https://vxlabs.com/2018/03/30/asynchronous-rsync-with-emacs-dired-and-tramp/">Asynchronous rsync with Emacs, dired and tramp. – vxlabs</a>.</li>
 <li> <a href="https://oracleyue.github.io/2018/05/13/emacs-setup-md/">Automator to open files in Emacs clients by double-clicks</a>.</li>
 <li> <a href="https://github.com/emacs-tw/awesome-emacs/blob/master/README.org">Awesome Emacs</a>.</li>
 <li> <a href="https://github.com/manateelazycat/aweshell">Awesome shell extension eshell with wonderful features</a>.</li>
 <li> <a href="https://github.com/bzg/emacs-training">Bastien's Emacs training</a>.</li>
 <li> <a href="https://www.reddit.com/r/emacs/comments/3r9fic/best_practicestip_for_companymode_andor_yasnippet/">Best practices/tip for Companymode and/or YASnippet</a>.</li>
 <li> <a href="https://github.com/walseb/blimp/blob/master/readme.org">Blimp - Bustling Image Manipulation Package (Emacs)</a>.</li>
 <li> <a href="https://lars.ingebrigtsen.no/2020/08/02/emacs-on-macos-for-linux-peeps/">Building Emacs on Macos for Linux Peeps – Random Thoughts</a>.</li>
 <li> <a href="https://beepb00p.xyz/pkm-search.html">Building personal search infrastructure for your knowledge and code | beepb00p</a>.</li>
 <li> <a href="https://www.reddit.com/r/emacs/comments/969wlv/c_integration_rtags_vs_emacsc=query_vs_ironymode/">C++ Integration: rtags vs emacs-cquery vs irony-mode (Reddit)</a>.</li>
 <li> <a href="http://cachestocaches.com/2015/8/c-completion-emacs/">C/C++ Completion in Emacs</a>.</li>
 <li> <a href="https://www.reddit.com/r/emacs/comments/66pq04/cant_get_tern_mode_to_work_properly/">Can't get Tern mode to work properly (Reddit)</a>.</li>
 <li> <a href="http://irreal.org/blog/?p=7207">Capturing Code Snippets</a>.</li>
 <li> <a href="https://www.reddit.com/r/emacs/comments/9dg13i/cclsnavigate_semantic_navigat=ion_for_cc/">ccls-navigate: semantic navigation for C/C++/ObjC </a>.</li>
 <li> <a href="https://github.com/MaskRay/ccls">ccls: C/C++/ObjC language server supporting cross references, hierarchies, completion and semantic highlighting</a>.</li>
 <li> <a href="https://two-wrongs.com/centered-cursor-mode-in-vanilla-emacs">Centered Cursor Mode in Vanilla Emacs</a>.</li>
 <li> <a href="https://github.com/redguardtoo/emacs.d/issues/827">Chen Bin's councel/ctags/etags config</a>.</li>
 <li> <a href="https://ddavis.fyi/blog/2018-07-07-emacs-cpp-ide/">Clangd based Emacs C++ IDE (Doug Davis)</a>.</li>
 <li> <a href="https://twitter.com/magit_emacs/status/1284245544160952320">Colors in emacs -nw (use ~/.Xresources)</a>.</li>
 <li> <a href="https://people.gnome.org/~federico/blog/compilation-notifications-in-emacs.html">Compilation notifications in Emacs - Federico's Blog</a>.</li>
 <li> <a href="https://medium.com/@suvratapte/configuring-emacs-from-scratch-intro-3157bed9d040">Configuring Emacs from Scratch — Intro - Suvrat Apte - Medium</a>.</li>
 <li> <a href="http://codewinds.com/blog/2015-04-02-emacs-flycheck-eslint-jsx.html">Configuring emacs to use eslint and babel with flycheck for javascript and React.js JSX</a>.</li>
 <li> <a href="http://mbork.pl/Content_AND_Presentation">Content AND Presentation</a>.</li>
 <li> <a href="https://github.com/redguardtoo/counsel-etags#ctags-setup">counsel-etags: Fast, energy-saving, and powerful code navigation solution</a>.</li>
 <li> <a href="https://erick.navarro.io/blog/creating-an-emacs-formatter-the-easy-way/">Creating an emacs formatter the easy way</a>.</li>
 <li> <a href="https://lars.ingebrigtsen.no/2018/11/12/cropping-images-in-emacs/">Cropping Images in Emacs (Lars Ingebrigtsen)</a>.</li>
 <li> <a href="https://emacs.zeef.com/ehartc">Curated list of packages by Ernst de Hart</a>.</li>
 <li> <a href="https://gist.github.com/maciejsmolinski/ea09a7b6dfabe70fac040915bc266b5e">Custom REPL snippet</a>.</li>
 <li> <a href="http://emacs-fu.blogspot.co.uk/2011/08/customizing-mode-line.html">Customizing emacs mode line</a>.</li>
 <li> <a href="https://zhangda.wordpress.com/">Da's recipes on Emacs, IT, and more (Da Zhang's web notes)</a>.</li>
 <li> <a href="http://www.modernemacs.com/post/major-mode-part-1/">Deep diving into a major mode - Part 1 | Modern Emacs</a> (handy for writing a REPL).</li>
 <li> <a href="http://www.modernemacs.com/post/major-mode-part-2/">Deep diving into a major mode - Part 2 (IDE Features) | Modern Emacs</a>.</li>
 <li> <a href="https://gonewest818.github.io/2020/02/dimmer.el-20200227.1712">dimmer.el (highlights active window)</a>.</li>
 <li> <a href="http://irreal.org/blog/?p=5380">Directory-Local Variables</a>.</li>
 <li> <a href="https://github.com/Silex/docker.el/blob/master/README.md">docker.el: Emacs integration for Docker</a>.</li>
 <li> <a href="https://scripter.co/do-ediff-as-i-mean/">Ediff DWIM function by scripter.co</a>.</li>
 <li> <a href="https://emacsnotes.wordpress.com/2018/05/14/editing-html-textareas-with-emacs-bye-bye-its-all-text-hello-textern/">Editing HTML Textareas with Emacs: Bye, bye “It’s All Text! “, Hello “Textern"</a>.</li>
 <li> <a href="https://gleek.github.io/blog/2017/04/11/editing-remote-code-with-emacs/">Editing remote code with Emacs (tramp tips) - Umar Ahmad</a>.</li>
 <li> <a href="https://lgfang.github.io/mynotes/emacs/emacs-xml.html#sec-5">Editing XML in Emacs</a>.</li>
 <li> <a href="http://www.masteringemacs.org/articles/2011/01/14/effective-editing-movement/">Effective editing I:Movement</a></li>
 <li> <a href="http://ergoemacs.org/emacs/effective_emacs.html">Effective emacs tips</a>: From ergoemacs.</li>
 <li> <a href="https://sites.google.com/site/steveyegge2/effective-emacs">Effective emacs</a>: Steve Yegge's effective emacs tips.</li>
 <li> <a href="https://ddavis.io/posts/eglot-cpp-ide/">Eglot based Emacs C++ IDE with clangd (ddavis.io)</a>.</li>
 <li> <a href="https://github.com/sp1ff/elfeed-score/blob/master/README.org">elfeed-score: brings Gnus-style scoring to Elfeed</a>.</li>
 <li> <a href="https://realpython.com/blog/python/emacs-the-best-python-editor/?utm_content=buffer661a4&utm_medium=social&utm_source=twitter.com&utm_campaign=buffer">Emacs - the Best Python Editor?</a>.</li>
 <li> <a href="https://qiita.com/advent-calendar/2019/emacs">Emacs Advent Calendar 2019 - Qiita</a>.</li>
 <li> <a href="https://twitter.com/sanityinc/status/1182877775746588672">Emacs and macOS Catalina issues (twitter)</a>.</li>
 <li> <a href="https://www.mortens.dev/blog/emacs-and-the-language-server-protocol/">Emacs and the Language Server Protocol - Morten's Dev</a>.</li>
 <li> <a href="https://joshwolfe.ca/post/emacs-for-csharp/">Emacs as a C# development environment - Josh Wolfe</a>.</li>
 <li> <a href="https://forums.unrealengine.com/showthread.php?52891-Emacs-as-my-UE4-IDE-with-intellisense">Emacs as my UE4 IDE with intellisense</a>.</li>
 <li> <a href="https://lars.ingebrigtsen.no/2016/06/28/emacs-can-haz-fancy-meme/">EMACS CAN HAZ FANCY MEME – Random Thoughts</a>.</li>
 <li> <a href="http://www.swaroopch.com/2013/10/17/emacs-configuration-tutorial">Emacs configuration</a>: Simplify package management with cask.</li>
 <li> <a href="http://emacsfodder.github.io/">Emacs Fodder</a>.</li>
 <li> <a href="https://sites.google.com/site/drielsma/xcodeplusemacs">Emacs for Cocoa development</a>.</li>
 <li> <a href="https://github.com/pierre-lecocq/emacs4developers">Emacs for developers</a>.</li>
 <li> <a href="https://patrickskiba.com/emacs/2019/09/07/emacs-for-react-dev.html">Emacs for the React developer (Patrick Skiba)</a>.</li>
 <li> <a href="https://patrickskiba.com/emacs/2019/09/07/emacs-for-react-dev.html">Emacs for the React developer | Patrick Skiba</a>.</li>
 <li> <a href="https://www.reddit.com/r/emacs/comments/ca6q7v/emacs_for_web_dev_rjsx_webmode_tide_js2etc/">Emacs for Web/Javascript Dev: rjsx, web-mode, tide, js2…..etc?</a>.</li>
 <li> <a href="http://roupam.github.io/">Emacs for Xcode+ios Development</a>.</li>
 <li> <a href="https://punchagan.muse-amuse.in/blog/emacs-frame-as-a-pop-up-input/">Emacs frame as a pop-up input - Noetic Nought</a>.</li>
 <li> <a href="https://huytd.github.io/emacs-from-scratch.html">Emacs from scratch (huytd)</a>.</li>
 <li> <a href="https://www.redbubble.com/shop/emacs">Emacs Gifts & Merchandise | Redbubble</a>.</li>
 <li> <a href="https://arenzana.org/2019/12/emacs-go-mode-revisited/">Emacs Go Mode – Revisited – arenzana.org</a>.</li>
 <li> <a href="http://www.reddit.com/r/emacs/comments/1rck3u/what_do_you_use_to_navigate_code">Emacs goodies</a>: Emacs post with tips for navigating code.</li>
 <li> <a href="http://emacshorrors.com">Emacs horrors</a>.</li>
 <li> <a href="https://sachachua.com/blog/2021/04/emacs-hydra-allow-completion-when-i-can-t-remember-the-command-name/">Emacs Hydra: Allow completion when I can't remember the command name</a>.</li>
 <li> <a href="https://github.com/redguardtoo/mastering-emacs-in-one-year-guide/blob/master/guide-en.org">Emacs in one year</a>: Someone's emacs experience over a year.</li>
 <li> <a href="http://emacs.sexy/">Emacs is sexy</a>.</li>
 <li> <a href="http://irreal.org/blog/">Emacs Keybindings for Mac OS X</a>.</li>
 <li> <a href="https://gist.github.com/avendael/7028579">Emacs keybindings for vimium</a>.</li>
 <li> <a href="http://overtone.github.io/emacs-live/">Emacs live</a>.</li>
 <li> <a href="https://phst.eu/emacs-modules">Emacs modules (Philipp’s documents)</a>.</li>
 <li> <a href="http://www.emacswiki.org/emacs/EmacsNiftyTricks">Emacs Nifty tricks</a>: Another source of emacs goodness.</li>
 <li> <a href="http://emacsnyc.org/videos.html">Emacs NYC videos</a>.</li>
 <li> <a href="https://gitea.petton.fr/DamienCassou/khardel">Emacs package integrating khard, a console cardav client</a>.</li>
 <li> <a href="http://emacsredux.com/">Emacs redux</a>.</li>
 <li> <a href="http://emacsrocks.com">Emacs rocks</a>.</li>
 <li> <a href="https://ubolonton.github.io/emacs-module-rs/0.8.0/">Emacs Rust module</a>.</li>
 <li> <a href="https://alexn.org/wiki/emacs.html">Emacs Setup (macOS) - Alexandru Nedelcu</a>.</li>
 <li> <a href="https://gist.github.com/rangeoshun/67cb17392c523579bc6cbd758b2315c1">Emacs snippet: Typescript with CSS in JS, JSX and graphql highlighing.</a>.</li>
 <li> <a href="http://bzg.fr/emacs-strip-tease.html">Emacs striptease (removing furniture)</a>.</li>
 <li> <a href="https://willschenk.com/articles/2020/tramp_tricks/">Emacs Tramp tricks (including docker snippet)</a>.</li>
 <li> <a href="https://forums.freebsd.org/threads/emacs-tramp-very-slow-on-connection.64498/">Emacs Tramp very slow on connection (The FreeBSD Forums)</a>.</li>
 <li> <a href="http://planet.emacsen.org/">Emacs workshop</a>.</li>
 <li> <a href="http://lavnir.be/wp/">Emacs | less</a>.</li>
 <li> <a href="https://realpython.com/emacs-the-best-python-editor/">Emacs – The Best Python Editor? – Real Python</a>.</li>
 <li> <a href="https://idiocy.org/emacs-fonts-and-fontsets.html">Emacs, fonts and fontsets</a>.</li>
 <li> <a href="https://jherrlin.github.io/posts/emacs-gnupg-and-pass/">Emacs, GnuPG and Pass | jherrlin</a>.</li>
 <li> <a href="https://github.com/mathiasdahl/emacs-launcher">emacs-launcher: A launcher for programs, files, folders, web pages and other, using Emacs (supersedes anything-launcher)</a>.</li>
 <li> <a href="https://github.com/emacs-lsp/dap-mode#swift">emacs-lsp/dap-mode: Debug Adapter Protocol for Emacs (Swift included)</a>.</li>
 <li> <a href="https://github.com/emacs-lsp/lsp-ivy/tree/78c1429c62c19006058b89d462657e1448d1e595">emacs-lsp/lsp-ivy: ivy workspace symbols offered by lsp-mode</a>.</li>
 <li> <a href="https://github.com/shshkn/emacs.d/blob/master/docs/nativecomp.md">emacs.d/nativecomp.md (gccemacs)</a>.</li>
 <li> <a href="https://www.alexgallego.org/emacs/productivity/2016/01/16/emacs-no-modeline.html">Emacs: No modeline</a>.</li>
 <li> <a href="https://realpython.com/emacs-the-best-python-editor/">Emacs: The Best Python Editor? – Real Python</a>.</li>
 <li> <a href="https://www.reddit.com/r/emacs/comments/hhbcg7/emacsclient_eval_with_command_line_arguments/">Emacsclient –eval with command line arguments? : emacs</a>.</li>
 <li> <a href="http://emacslife.com/">Emacslife</a>.</li>
 <li> <a href="https://github.com/cireu/emacsql-sqlite3">emacsql-sqlite3: Yet another EmacSQL backend for SQLite</a>.</li>
 <li> <a href="https://www.emacswiki.org/emacs/CreatingYourOwnCompileErrorRegexp">EmacsWiki: Creating Your Own Compile Error Regexp</a>.</li>
 <li> <a href="https://www.emacswiki.org/emacs/EshellForLoop">EmacsWiki: Eshell For Loop</a>.</li>
 <li> <a href="https://github.com/jonnay/emagicians-starter-kit">Emagicians starter kit</a>.</li>
 <li> <a href="https://github.com/m-parashar/emax64">emax64: 64-bit Emacs for Windows with ImageMagick 7</a>.</li>
 <li> <a href="http://endlessparentheses.com">Endless parenthesis</a>.</li>
 <li> <a href="http://www.skybert.net/emacs/java/">Enterprise Java Development in Emacs</a>.</li>
 <li> <a href="https://ambrevar.xyz/emacs-eshell/">Eshell as a main shell</a>.</li>
 <li> <a href="https://github.com/kaihaosw/eshell-prompt-extras/blob/master/README.md">eshell-prompt-extras: Display extra information and color for your eshell prompt</a>.</li>
 <li> <a href="http://www.misshula.org/category/tutorials.html">Evan Misshula (lots of great tutorials)</a>.</li>
 <li> <a href="http://edkolev.github.io/posts/2017-09-10-travis-for-emacs-packages.html">Evgeni Kolev Blog - Travis CI integration for emacs packages</a>.</li>
 <li> <a href="http://mitchfincher.blogspot.co.uk/2017/03/example-of-syntax-highlighting-with.html">Example of Syntax Highlighting</a>.</li>
 <li> <a href="https://francismurillo.github.io/2017-04-15-Exploring-Emacs-chart-Library/">Exploring Emacs chart Library (chart-bar-quickie)</a>.</li>
 <li> <a href="https://twitter.com/maciejsmolinski/status/1269886224774451200">extend #emacs to run an interactive REPL process</a>.</li>
 <li> <a href="https://www.reddit.com/r/emacs/comments/973418/feedbuilderel_an_rss_and_atom=_generator/">feed-builder.el: An RSS (and Atom?) generator : emacs</a>.</li>
 <li> <a href="http://irreal.org/blog/?p=7359">Find Commits Affecting a Function (Irreal)</a>.</li>
 <li> <a href="https://github.com/d11wtq/fiplr">Fiplr</a>: An Emacs Fuzzy Find in Project Package.</li>
 <li> <a href="https://gist.github.com/dive/f64c645a9086afce8e5dd2590071dbf9">Fix Emacs permissions on macOS Catalina</a>.</li>
 <li> <a href="https://github.com/lewang/flx">Flx for emacs</a>: Sublime-style searching for emacs.</li>
 <li> <a href="https://manuel-uberti.github.io//emacs/2019/07/18/reformatter/">Format XML like a pro</a>.</li>
 <li> <a href="https://juanjoalvarez.net/es/detail/2014/sep/19/vim-emacsevil-chaotic-migration-guide/">From Vim to Emacs+Evil chaotic migration guide</a>.</li>
 <li> <a href="http://fukuyama.co">Fukuyama's Emacs/iOS</a>.</li>
 <li> <a href="https://gist.github.com/mikroskeem/0a5c909c1880408adf732ceba6d3f9ab#gistcomment-3294346">gccemacs on OSX (mikroskeem's gist)</a>.</li>
 <li> <a href="https://gitlab.com/koral/gcmh">GCMH - the Garbage Collector Magic Hack</a>.</li>
 <li> <a href="https://blog.hoetzel.info/post/eshell-notifications">Get desktop notifications from Emacs shell commands ·</a>.</li>
 <li> <a href="https://www.reddit.com/r/emacs/comments/e8cm8x/get_stackoverflow_answers_with_completion_without/">Get Stackoverflow answers with completion (without Helm) : emacs</a>.</li>
 <li> <a href="https://github.com/GhostText/GhostText/blob/master/README.md">GhostText: Use Emacs to write in your browser</a>.</li>
 <li> <a href="http://whatworks4me.wordpress.com/2011/04/13/view-git-diffs-in-emacs-using-ediff/">Git diffs using Emacs ediff</a>.</li>
 <li> <a href="https://github.com/akirak/git-identity.el">git-identity.el: Manage multiple Git identities from inside Emacs</a>.</li>
 <li> <a href="https://github.com/alphapapa/yequake">GitHub - alphapapa/yequake: Drop-down Emacs frames, like Yakuake (modal emacs frames)</a>.</li>
 <li> <a href="https://github.com/AndreaCrotti/yasnippet-snippets">GitHub - AndreaCrotti/yasnippet-snippets: a collection of yasnippet</a>.</li>
 <li> <a href="https://github.com/bastibe/annotate.el">GitHub - bastibe/annotate.el: Annotate.el</a>.</li>
 <li> <a href="https://github.com/bzg/emacs-training">GitHub - bzg/emacs-training: Emacs training</a>.</li>
 <li> <a href="https://github.com/CeleritasCelery/company-async-files">GitHub - CeleritasCelery/company-async-files: company-files with an async banckend</a>.</li>
 <li> <a href="https://github.com/chuntaro/epaint">GitHub - chuntaro/epaint: A simple paint tool for Emacs</a>.</li>
 <li> <a href="https://github.com/dieggsy/esh-autosuggest">GitHub - dieggsy/esh-autosuggest: Fish-like autosuggestions in eshell.</a>.</li>
 <li> <a href="https://github.com/emacs-jp/dmacro">GitHub - emacs-jp/dmacro: Repeated detection and execution of key operationw</a>.</li>
 <li> <a href="https://github.com/gexplorer/simple-modeline">GitHub - gexplorer/simple-modeline: A simple mode-line for Emacs.</a>.</li>
 <li> <a href="https://github.com/joaotavora/eglot">GitHub - joaotavora/eglot: A client for Language Server Protocol servers</a>.</li>
 <li> <a href="https://github.com/mmontone/template-overlays">GitHub - mmontone/template-overlays: Emacs overlays for template files</a>.</li>
 <li> <a href="https://github.com/p3r7/space-theming">GitHub - p3r7/space-theming: A port of Spacemacs theming layer to vanilla Emacs</a>.</li>
 <li> <a href="https://github.com/politza/pdf-tools">GitHub - politza/pdf-tools: Emacs support library for PDF files.</a>.</li>
 <li> <a href="https://github.com/rougier/elegant-emacs">GitHub - rougier/elegant-emacs: A very minimal but elegant emacs (I think)</a>.</li>
 <li> <a href="https://github.com/sebastiencs/company-box">GitHub - sebastiencs/company-box: A company front-end with icons</a>.</li>
 <li> <a href="https://github.com/takaxp/moom">GitHub - takaxp/moom: A Moom port to Emacs - Make your dominant hand FREE from your mouse (easily move frames)</a>.</li>
 <li> <a href="https://github.com/wbolster/emacs-direnv">GitHub - wbolster/emacs-direnv: direnv integration for emacs</a>.</li>
 <li> <a href="https://github.com/xuchunyang/another-emacs-server">GitHub - xuchunyang/another-emacs-server: An Emacs server built on HTTP and JSON</a>.</li>
 <li> <a href="https://github.com/yyoncho/dap-mode/">GitHub - yyoncho/dap-mode: Debug Adapter Protocol for Emacs (Java/Python)</a>.</li>
 <li> <a href="https://github.com/zk-phi/electric-case">GitHub - zk-phi/electric-case: automatic foo-bar to fooBar and foo_bar</a>.</li>
 <li> <a href="https://github.com/stapelberg/configfiles/blob/master/.github/workflows/emacs.yml">Github continuous integration for your Emacs init (yml config)</a>.</li>
 <li> <a href="https://github.com/rememberYou/.emacs.d/blob/b00402c2b51d0435ca8b0267ef71f5fa3558d41a/config.org#gnuplot">gnuplot Emacs config</a>.</li>
 <li> <a href="https://github.com/benma/go-dlv.el">Go Delve - Debug Go programs interactively with the GUD</a>.</li>
 <li> <a href="https://www.bytedude.com/gpg-in-emacs/">GPG In Emacs | Bytedude</a>.</li>
 <li> <a href="http://doc.rix.si/org/fsem.html">Hardcore Freestyle Emacs</a>.</li>
 <li> <a href="https://github.com/bbatsov/projectile">Helm Projectile</a>: Is awesome for finding files in emacs.</li>
 <li> <a href="https://www.emacswiki.org/emacs/HelpPlus">Help Plus: Enhancing Emacs help functions</a>.</li>
 <li> <a href="https://github.com/jekor/hidepw">hidepw - an Emacs minor mode for hiding passwords</a>.</li>
 <li> <a href="https://hotair.tech/blog/goodbye-vscode">Hot Air - Goodbye VSCode, Hello Emacs (Again) has handy JavaScript tips</a>.</li>
 <li> <a href="https://www.reddit.com/r/emacs/comments/efsg0t/how_i_enqueue_online_videos_in_mpv_with_emacs/">How I enqueue online videos in mpv with Emacs : emacs</a>.</li>
 <li> <a href="https://www.reddit.com/r/emacs/comments/f3ed3r/how_is_doom_emacs_so_damn_fast/">How is Doom Emacs so damn fast? : emacs</a>.</li>
 <li> <a href="https://github.com/hlissner/doom-emacs/wiki/FAQ#how-is-dooms-startup-so-fast">How is Doom’s startup so fast?</a></li>
 <li> <a href="http://blog.yitang.uk/2015/09/24/how-to-create-a-screencast-gif-in-emacs/">How to Create a Screencast GIF in Emacs</a>.</li>
 <li> <a href="https://nullprogram.com/blog/2013/02/06/">How to Make an Emacs Minor Mode</a>.</li>
 <li> <a href="https://yoo2080.wordpress.com/2011/12/01/how-to-run-a-new-instance-of-emacs-from-within-emacs-2/">How to run a new instance of emacs from within emacs | Yoo Box</a>.</li>
 <li> <a href="https://sixty-north.com/blog/series/how-to-write-company-mode-backends.html">How to write company-mode backends</a>.</li>
 <li> <a href="http://tim.hibal.org/blog/how-we-wrote-a-textbook">How We Wrote a Textbook & (Tim Wheeler)</a>.</li>
 <li> <a href="http://www.howardism.org/Technical/Emacs/piper-presentation-transcript.html">Howard Abrams's Death to the Shell presentation</a>.</li>
 <li> <a href="https://github.com/howardabrams/dot-files/blob/master/emacs-eshell.org">Howard Abrams's eshell config</a>.</li>
 <li> <a href="https://github.com/chrisbarrett/swift-mode">hrisbarrett/swift-mode</a>.</li>
 <li> <a href="https://github.com/iamleeg/swift-mode">iamleeg/swift-mode</a>.</li>
 <li> <a href="https://vxlabs.com/2019/08/25/format-flowed-with-long-lines/">Improve the plaintext email experience through format=flowed with long lines. - vxlabs (mu4e)</a>.</li>
 <li> <a href="https://github.com/mkcms/interactive-align">interactive-align: Interactively align by regular expression in emacs</a>.</li>
 <li> <a href="http://skybert.net/emacs/investigating-emacs-cpu-usage/">investigating Emacs CPU usage</a>.</li>
 <li> <a href="http://ivanmalison.github.io/dotfiles/#go">Ivan Malison's Go config </a>.</li>
 <li> <a href="https://www.reddit.com/r/emacs/comments/57fnar/ivy_completion_at_point_in_an_overlay/">Ivy completion at point in an overlay : emacs</a>.</li>
 <li> <a href="https://writequit.org/denver-emacs/presentations/2017-04-11-ivy.html">Ivy, Counsel and Swiper (writequit.org)</a>.</li>
 <li> <a href="https://github.com/Yevgnen/ivy-rich/">ivy-rich: An ivy wrapper providing additional customizations </a>.</li>
 <li> <a href="https://github.com/squiter/ivy-youtube">ivy-youtube: Search for an Youtube video inside Emacs with Ivy</a>.</li>
 <li> <a href="https://github.com/skeeto/javadoc-lookup">javadoc-lookup</a>.</li>
 <li> <a href="http://blog.binchen.org/posts/javascript-code-navigation-in-counsel-etags.html">Javascript code navigation in counsel-etags (Chen's blog)</a>.</li>
 <li> <a href="http://truongtx.me/2014/02/23/set-up-javascript-development-environment-in-emacs/">Javascript development environment</a>.</li>
 <li> <a href="https://github.com/jcs-elpa/parse-it">jcs-elpa/parse-it: Basic Parser in Emacs Lisp (Swift and ObjC included)</a>.</li>
 <li> <a href="http://www.xiangji.me/">JI Xiang</a>.</li>
 <li> <a href="https://gitlab.com/jjzmajic/handle">jjzmajic / handle: A handle for major-mode generic functions.</a>.</li>
 <li> <a href="https://hackr.io/tutorials/learn-emacs">Learn Emacs - 2019 Most Recommended Emacs Tutorials | Hackr.io</a>.</li>
 <li> <a href="https://github.com/rememberYou/.emacs.d/blob/b00402c2b51d0435ca8b0267ef71f5fa3558d41a/config.org#ledger">Ledger Emacs config</a>.</li>
 <li> <a href="http://www.lunaryorn.com/">Lunarsite</a>.</li>
 <li> <a href="https://spin.atomicobject.com/2019/12/12/fixing-emacs-macos-catalina/">macOS Catalina: Fixing Emacs After an Upgrade</a>.</li>
 <li> <a href="https://magit.vc/manual/magit/Wip-Modes.html">Magit User Manual: Wip Modes</a>.</li>
 <li> <a href="https://github.com/legoscia/messages-are-flowing">Make it easier to send "flowed" email messages from Emacs (mu4e)</a>.</li>
 <li> <a href="http://www.lunaryorn.com/posts/make-your-emacs-mode-line-more-useful.html">Make your Emacs Mode Line more useful - Sebastian Wiesner</a>.</li>
 <li> <a href="http://zeekat.nl/articles/making-emacs-work-for-me.html">Making Emacs work for me</a>.</li>
 <li> <a href="https://ebzzry.io/en/emacs-dired/">Managing Directories with Emacs (dired)</a>.</li>
 <li> <a href="http://mbork.pl/2019-03-18_Free_Emacs_key_bindings">Marcin Borkowski: 2019-03-18 Free Emacs key bindings</a>.</li>
 <li> <a href="http://mbork.pl/2019-07-08_Pausing_an_Emacs_keyboard_macro">Marcin Borkowski: 2019-07-08 Pausing an Emacs keyboard macro</a>.</li>
 <li> <a href="http://mbork.pl/2015-07-04_C-x_4_bindings">Marcin Borkowski: C-x 4 bindings</a>.</li>
 <li> <a href="https://github.com/elpa-host/marquee-header">Marquee header (scrolling text header/notification)</a>.</li>
 <li> <a href="http://www.masteringemacs.org">Mastering Emacs</a>.</li>
 <li> <a href="https://github.com/mopemope/meghanada-emacs">Meghanada-Mode: A Better Java Development Environment for Emacs</a>.</li>
 <li> <a href="https://lars.ingebrigtsen.no/2017/10/15/meme-x-giffy/">meme x giffy – Random Thoughts</a>.</li>
 <li> <a href="https://two-wrongs.com/migrating-away-from-use-package.html">Migrating Away From Use-Package</a>.</li>
 <li> <a href="http://truongtx.me/2013/03/10/emacs-setting-up-perfect-environment-for-cc-programming">More emacs C++ goodness</a>: More emacs dev environment tips.</li>
 <li> <a href="https://groups.google.com/forum/m/#!topic/mu-discuss/JqHEGycEyKI">mu4e & xwidget / webkit snippet</a>.</li>
 <li> <a href="http://www.macs.hw.ac.uk/~rs46/posts/2014-11-16-mu4e-signatures.html">Multiple Email Signatures with mu4e</a>.</li>
 <li> <a href="https://www.reddit.com/r/emacs/comments/e79l6c/my_companyposframe_configuration_displaying/">My company-posframe configuration displaying backend names</a>.</li>
 <li> <a href="http://www.lunaryorn.com/2015/01/06/my-emacs-configuration-with-use-package.html">My Emacs Configuration with use-package</a>.</li>
 <li> <a href="https://gridsome.netlify.com/blog/2018/11/18/my-emacs-development-workflow/">My emacs development workflow</a>.</li>
 <li> <a href="http://www.pygopar.com/my-java-android-and-eclim-setup/">My Java, Android and Eclim Setup</a>.</li>
 <li> <a href="https://admiralakber.github.io/2018/09/20/myos-email/">myOS / email - Building the perfect email setup (Emacs/notmuch/mbsync)</a>.</li>
 <li> <a href="https://joelmccracken.github.io/entries/name-emacs-daemons-with-the-daemon-equals-option/">Name Emacs Daemons With the '–daemon=' Option</a>.</li>
 <li> <a href="https://github.com/DamienCassou/navigel">navigel: Emacs library to facilitate the creation of tabulated-list based UIs</a>.</li>
 <li> <a href="http://bbbscarter.wordpress.com/category/coding/emacs/">Nerdgasms's Emacs tips</a>.</li>
 <li> <a href="https://github.com/codesuki/bazel-mode">Neri Marschik's bazel-mode: Basic Bazel support for Emacs</a>.</li>
 <li> <a href="http://was.tl/projects/nimble/">Nimble (markdown replacement)</a>.</li>
 <li> <a href="http://angelic-sedition.github.io/">Nocturnal Artifice</a>.</li>
 <li> <a href="https://github.com/danielmartin/ns-playgrounds">ns-playgrounds: Execute Swift and Objective C code snippets in Emacs (Extended org babel support)</a>.</li>
 <li> <a href="https://sam217pa.github.io/2016/09/11/nuclear-power-editing-via-ivy-and-ag/">Nuclear weapon multi-editing via Ivy and Ag · Samuel Barreto</a>.</li>
 <li> <a href="http://renard.github.io/o-blog-v2/">o-blog</a>.</li>
 <li> <a href="https://github.com/al-skobelev/objc-yassnippets/tree/master/objc-mode">Objective-C snippets #1</a>.</li>
 <li> <a href="https://github.com/altschuler/yas-objc">Objective-C snippets #2</a>.</li>
 <li> <a href="https://github.com/al-skobelev/objc-yassnippets">Objective-C snippets #3</a>.</li>
 <li> <a href="https://github.com/bodil/ohai-emacs">Ohai Emacs</a>.</li>
 <li> <a href="https://gitlab.liu.se/davby02/olc">olc: Open Location Code support for Emacs</a>.</li>
 <li> <a href="http://oremacs.com/">Or Emacs</a>.</li>
 <li> <a href="https://karl-voit.at/orgmode/">Organize Your Life With Org-Mode</a>.</li>
 <li> <a href="https://www.reddit.com/r/emacs/comments/c0bg27/outlookstyle_html_replies_with_mu4e/">Outlook-style HTML replies with mu4e</a>.</li>
 <li> <a href="https://patrickskiba.com/unix/tools/2019/09/18/password-management-with-pass.html">Password Management with Pass and Emacs (Patrick Skiba)</a>.</li>
 <li> <a href="https://peach-melpa.org/">PeachMelpa (Browse Emacs themes from MELPA)</a>.</li>
 <li> <a href="https://stuff.mit.edu/iap/2007/emacs/emacs-slides-1.pdf">Phil Sung's Emacs slides</a>.</li>
 <li> <a href="http://www.philandstuff.com/">Philip Potter Emacs blog</a>.</li>
 <li> <a href="https://github.com/jcaw/porthole">Porthole: RPC servers for Emacs</a>.</li>
 <li> <a href="https://yiufung.net/post/anki-org/">Power up Anki with Emacs, Org mode, anki-editor and more</a>.</li>
 <li> <a href="https://github.com/bbatsov/prelude">Prelude emacs distribution</a>.</li>
 <li> <a href="https://github.com/raxod502/prescient.el/blob/master/README.md">prescient.el: simple but effective sorting and filtering for Emacs (ivy and company).</a>.</li>
 <li> <a href="http://www.howardism.org/Technical/Emacs/eshell-present.html">Presenting the Eshell</a>.</li>
 <li> <a href="https://www.projectile.mx/en/latest/projects/">Projects - Projectile: The Project Interaction Library for Emacs</a>.</li>
 <li> <a href="http://punchagan.muse-amuse.in/posts/index.html">Punchagan's blog</a>.</li>
 <li> <a href="https://github.com/purcell/emacs.d/blob/4c81c50ba77d165df8008dd5905f8c49102793d4/lisp/init-site-lisp.el#L7-L22">Purcell's way to add downloaded repos to load-path</a>.</li>
 <li> <a href="http://justinhj.github.io/2018/10/24/radix-trees-dash-and-company-mode.html">Radix trees, Dash and Company mode</a>.</li>
 <li> <a href="https://github.com/syl20bnr/spacemacs/blob/master/layers/%2Bframeworks/react/README.org">React contribution layer for Spacemacs</a>.</li>
 <li> <a href="http://emacslife.com/how-to-read-emacs-lisp.html">Read Lisp, Tweak Emacs: How to read Emacs Lisp so that you can customize Emacs</a>.</li>
 <li> <a href="http://draketo.de/light/english/free-software/read-your-python-module-documentation-emacs">Read your python module documentation from Emacs</a>.</li>
 <li> <a href="http://pragmaticemacs.com/category/elfeed/">Read your RSS feeds in emacs with elfeed</a>.</li>
 <li> <a href="https://github.com/purcell/reformatter.el/blob/master/README.md">reformatter.el: Define commands which run reformatters on the current Emacs buffer</a>.</li>
 <li> <a href="https://emacsredux.com/blog/2013/09/25/removing-key-bindings-from-minor-mode-keymaps/">Removing/Altering Key Bindings from Minor Mode Keymaps · Emacs Redux</a>.</li>
 <li> <a href="https://github.com/brown/bazel-mode">Robert Brown's bazel-mode: GNU Emacs mode for editing Bazel BUILD files</a>.</li>
 <li> <a href="https://github.com/rougier/svg-lib">rougier/svg-lib: Emacs SVG libraries for creatings tags, icons and bars</a>.</li>
 <li> <a href="https://github.com/Andersbakken/rtags/commit/ad3026cdd1d6c1e0a2728fb4992addcb76605487">rtags: Implement 'rename with multiple cursors'</a>.</li>
 <li> <a href="http://rubikitch.com/">Rubikitch</a>.</li>
 <li> <a href="http://sachachua.com">Sachua Chua</a>.</li>
 <li> <a href="http://sakito.jp/emacs/emacsobjectivec.html">Sakito's Emacs Objective-C</a>.</li>
 <li> <a href="http://lahtela.me/blog/2020/05/21/setting-up-emacs-for-qt-development.html">Setting up Emacs for Qt (C++) development - LSP</a>.</li>
 <li> <a href="https://lars.ingebrigtsen.no/2019/08/26/setting-up-gpg-for-emacs/">Setting up GPG for Emacs (Random Thoughts)</a>.</li>
 <li> <a href="https://superuser.com/questions/432160/slow-tramp-mode-in-emacs">Slow TRAMP mode in Emacs (Super User)</a>.</li>
 <li> <a href="https://ebzzry.io/en/emacs-pairs/">Smartparens: Emacs and Pairs article</a>.</li>
 <li> <a href="http://stackoverflow.com/questions/673554/how-can-i-refactor-c-source-code-using-emacs">SO: How can I refactor C++ source code using emacs?</a>.</li>
 <li> <a href="http://psung.blogspot.co.uk/2010/03/some-emacs-macro-tricks.html">Some Emacs macro tricks</a>.</li>
 <li> <a href="https://www.baty.net/2019/spaceline-for-emacs/">Spaceline for Emacs (Jack Baty's weblog)</a>.</li>
 <li> <a href="https://www.draketo.de/english/emacs/staying-sane-drudge-work">Staying sane with Emacs (when facing drudge work) (Zwillingssterns Weltenwald)</a>.</li>
 <li> <a href="https://vxlabs.com/2016/04/11/step-by-step-guide-to-c-navigation-and-completion-with-emacs-and-the-clang-based-rtags/">Step-by-step guide to C++ navigation and completion with Emacs and the Clang-based rtags</a>.</li>
 <li> <a href="https://www.reddit.com/r/emacs/comments/370k9p/stock_emacs_tips/">Stock Emacs tips (Reddit)</a>.</li>
 <li> <a href="http://pragmaticemacs.com/emacs/super-spotlight-search-with-counsel/">Super spotlight search with ivy/counsel (Pragmatic Emacs)</a>.</li>
 <li> <a href="https://github.com/danielmartin/swift-helpful">swift-helpful: A Self-Documenting Emacs Programming Environment for Swift</a>.</li>
 <li> <a href="https://www.wisdomandwonder.com/article/10474/techne-emacs-friendly-keyboard-operations-keys">Techne (Emacs Friendly Keyboard): Operations Keys | Wisdom and Wonder</a>.</li>
 <li> <a href="http://www.wilfred.me.uk/blog/2018/01/06/the-emacs-guru-guide-to-key-bindings/">The Emacs Guru Guide to Key Bindings – Wilfred Hughes::Blog</a>.</li>
 <li> <a href="https://github.com/alphapapa/emacs-package-dev-handbook">The Emacs Package Developer's Handbook</a>.</li>
 <li> <a href="http://batsov.com/articles/2011/11/30/the-ultimate-collection-of-emacs-resources/">The Ultimate Collection of Emacs Resources</a>.</li>
 <li> <a href="https://github.com/thierryvolpiatto/emacs-tv-config/blob/master/mu4e-config.el">thierryvolpiatto's mu4e config </a>.</li>
 <li> <a href="https://github.com/ananthakumaran/tide">Tide: TypeScript Interactive Development Environment for Emacs</a>.</li>
 <li> <a href="https://www.reddit.com/r/emacs/comments/audffp/tip_how_to_use_a_stable_and_fast_environment_to/">TIP: How to use a stable and fast environment to develop in C++ : emacs</a>.</li>
 <li> <a href="https://emacs.stackexchange.com/questions/16489/tramp-is-unbearably-slow-osx-ssh">TRAMP is unbearably slow (OSX, ssh) - Emacs Stack Exchange</a>.</li>
 <li> <a href="https://stackoverflow.com/a/16408592">Tramp: Open file via SSH and Sudo with Emacs - Stack Overflow</a>.</li>
 <li> <a href="http://truongtx.me/categories.html#emacs-ref">Trần Xuân Trường's Emacs posts</a>.</li>
 <li> <a href="https://github.com/MetroWind/dotfiles-mac/blob/6c5af32349edb2764876ed6c1392fe5fc5a6f6ca/emacs/files/.emacs-pkgs/tsmanip.el">tsmanip.el manipulate timestamps/dates anywhere like org shift up/down</a>.</li>
 <li> <a href="http://tuhdo.github.io/c-ide.html">Tuhdo's C/C++ dev on Emacs</a>.</li>
 <li> <a href="https://tuhdo.github.io/emacs-tutor3.html">Tuhdo's Emacs Mini Manual (PART 3) - CUSTOMIZING AND EXTENDING EMACS</a>.</li>
 <li> <a href="https://www.reddit.com/r/emacs/comments/hztv4a/tutorial_for_building_gccemacs_on_macos_catalina/">Tutorial for building gccemacs on MacOS catalina</a>.</li>
 <li> <a href="http://tv.uvigo.es/gl/serial/513.html">Universidad de Vigo's Emacs course</a>.</li>
 <li> <a href="https://karl-voit.at/2018/07/08/emacs-key-bindings/">UOMF: My Emacs Key Binding Strategy</a>.</li>
 <li> <a href="https://www.johndcook.com/blog/2018/01/27/emacs-features-that-use-regular-expressions/">Uses of regular expressions in Emacs (John D. Cook)</a>.</li>
 <li> <a href="https://www.johndcook.com/blog/2018/01/27/emacs-features-that-use-regular-expressions/">Uses of regular expressions in Emacs</a>.</li>
 <li> <a href="http://dance.computer.dance/posts/2015/04/using-ctags-on-modern-javascript.html">Using ctags on modern Javascript (handy for Emacs)</a>.</li>
 <li> <a href="http://www.pygopar.com/using-emacs-and-eclim-for-android-development/">Using Emacs and Eclim for Android Development</a>.</li>
 <li> <a href="https://lispcookbook.github.io/cl-cookbook/emacs-ide.html">Using Emacs as an IDE (The Common Lisp Cookbook)</a>.</li>
 <li> <a href="https://www.reddit.com/r/emacs/comments/fojc1y/using_viewmode_for_modal_navigation/">Using view-mode for modal navigation : emacs</a>.</li>
 <li> <a href="https://github.com/DamienCassou/vdirel">vdirel vdir (calendars and contacts) for Emacs</a>.</li>
 <li> <a href="https://vedang.me/tinylog/emacs-28-native-comp-ubuntu-20-04/">Vedang Manerikar | Compiling and Running Emacs 28 from the native-comp</a>.</li>
 <li> <a href="http://pragmaticemacs.com/emacs/view-and-annotate-pdfs-in-emacs-with-pdf-tools/">View and annotate PDFs in Emacs with PDF-tools (Pragmatic Emacs)</a>.</li>
 <li> <a href="https://www.reddit.com/r/emacs/comments/eeyhdz/weekly_tipstricketc_thread/">Weekly tips/trick/etc/ thread : multiple-cursors-mode using helm/counsel</a>.</li>
 <li> <a href="http://emacs.stackexchange.com/questions/2571/what-emacs-communities-exist">What Emacs communities exist?</a></li>
 <li> <a href="http://whattheemacsd.com/">What the Emacsd</a>.</li>
 <li> <a href="https://github.com/yanghaoxie/which-key-posframe">which-key-posframe: Let emacs-which-key use posframe to show its popup.</a>.</li>
 <li> <a href="http://wikemacs.org/wiki/TRAMP">WikEmacs - TRAMP</a>.</li>
 <li> <a href="http://www.wisdomandwonder.com/">Wisdom and Wonder</a>.</li>
 <li> <a href="https://emacs.stackexchange.com/questions/22306/working-with-tramp-mode-on-slow-connection-emacs-does-network-trip-when-i-start/22307">Working with tramp mode on slow connection</a>.</li>
 <li> <a href="https://github.com/company-mode/company-mode/wiki/Writing-backends">Writing company backends</a>.</li>
 <li> <a href="https://joaotavora.github.io/yasnippet/snippet-development.html">Writing yasnippets</a>.</li>
 <li> <a href="http://ergoemacs.org/emacs/emacs_list_and_set_font.html">Xah Lee's Emacs: Set Font</a>.</li>
 <li> <a href="http://www.xref.sk/xrefactory/main.html">Xrefactory: A C/C++ Refactoring Browser for Emacs and XEmacs</a>.</li>
 <li> <a href="https://github.com/Kungsgeten/yankpad">yankpad: Paste yasnippets from an org-mode file</a>.</li>
 <li> <a href="https://github.com/zegal/yasobjc">Yasnippet generator for Cocoa iphone SDK</a>.</li>
 <li> <a href="https://github.com/zk-phi/git-complete">Yet another completion engine powered by git grep</a>.</li>
 <li> <a href="https://plomlompom.com/guides/emacs.html">Yet another introduction to Emacs</a>.</li>
 <li> <a href="http://emacs.readthedocs.io/en/latest/">Yi Tang's road to emacs documentation on readthedocs.io</a>.</li>
 <li> <a href="https://github.com/yurikhan/yk-color">yk-color: Elisp library for linear RGB color manipulation</a>.</li>
 <li> <a href="https://yoo2080.wordpress.com/category/emacs/">Yoo Box's Emacs category</a>.</li>
 <li> <a href="http://ericscrosson.wordpress.com">Zen in the Art of Emacs</a>.</li>
 <li> <a href="http://akrl.sdf.org/">‎The Emacs Garbage Collection Magic Hack</a>.</li>
</ul></div>
</div>
</div>]]></description>
  <link>http://xenodium.com/emacs-bookmarks</link>
  <guid isPermaLink="false">http://xenodium.com/emacs-bookmarks</guid>
  <pubDate>Fri, 19 Sep 2014 00:00:00 +0100</pubDate>
</item>
<item>
  <title>Resetting gnome-terminal preferences</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-resetting-gnome-terminal-preferences" class="outline-2">
 <h2 id="resetting-gnome-terminal-preferences"> <span class="timestamp-wrapper"> <span class="timestamp">11 September 2014</span></span> Resetting gnome-terminal preferences</h2>
 <div class="outline-text-2" id="text-resetting-gnome-terminal-preferences">
</div>
 <div id="outline-container-org2ba009e" class="outline-3">
 <h3 id="org2ba009e">Resetting preferences</h3>
 <div class="outline-text-3" id="text-org2ba009e">
 <div class="org-src-container">
 <pre class="src src-sh">gconftool --recursive-unset /apps/gnome-terminal
</pre>
</div>
</div>
</div>
 <div id="outline-container-orge2291b3" class="outline-3">
 <h3 id="orge2291b3">Want 256 colors?</h3>
 <div class="outline-text-3" id="text-orge2291b3">
 <p>
Edit .bash_profile
</p>
 <div class="org-src-container">
 <pre class="src src-sh"> <span style="color: #a71d5d;">export</span>  <span style="color: #333333;">TERM</span>= <span style="color: #183691;">"screen-256color"</span>
</pre>
</div>
</div>
</div>
 <div id="outline-container-orge44a493" class="outline-3">
 <h3 id="orge44a493">Ensure .bash_profile is loaded</h3>
 <div class="outline-text-3" id="text-orge44a493">
 <p>
From gnome-terminal window:
</p>
 <blockquote>
 <p>
gnome-terminal
  Edit
    Profiles…
      Edit
        Title and Command
          X Run command as login shell
</p>
</blockquote>
</div>
</div>
 <div id="outline-container-orga5afcef" class="outline-3">
 <h3 id="orga5afcef">Solarized</h3>
 <div class="outline-text-3" id="text-orga5afcef">
 <p>
Bonus: See  <a href="http://codefork.com/blog/index.php/2011/11/27/getting-the-solarized-theme-to-work-in-emacs">post</a> to get solarized on gnome-terminal.
</p>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/resetting-gnome-terminal-preferences</link>
  <guid isPermaLink="false">http://xenodium.com/resetting-gnome-terminal-preferences</guid>
  <pubDate>Thu, 11 Sep 2014 00:00:00 +0100</pubDate>
</item>
<item>
  <title>Python bookmarks</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-python-bookmarks" class="outline-2">
 <h2 id="python-bookmarks"> <span class="timestamp-wrapper"> <span class="timestamp">13 July 2014</span></span> Python bookmarks</h2>
 <div class="outline-text-2" id="text-python-bookmarks">
 <span class="modified-timestamp">   <em>updated: 12 August 2019  </em></span>
 <ul class="org-ul"> <li> <a href="https://docs.python.org/3/tutorial/venv.html">12. Virtual Environments and Packages — Python 3.7.4 documentation (pipenv)</a>.</li>
 <li> <a href="https://github.com/mkaz/termgraph">A python command-line tool which draws basic graphs/charts in the terminal</a>.</li>
 <li> <a href="http://mkaz.com/2014/07/26/python-argparse-cookbook/">Argparse cookbook</a>: For simple python scripts.</li>
 <li> <a href="https://linuxhint.com/best_50_python_books/">Best 50 Python Books for Programmers with All Skill Sets</a>.</li>
 <li> <a href="http://python.net/~goodger/projects/pycon/2007/idiomatic/handout.html">Code Like a Pythonista: Idiomatic Python</a>.</li>
 <li> <a href="https://github.com/pudo/dataset">Dataset: databases for lazy people</a>.</li>
 <li> <a href="http://www.diveintopython3.net/">Dive Into Python 3 book</a>.</li>
 <li> <a href="http://www.diveintopython.net/">Dive Into Python book</a>.</li>
 <li> <a href="https://github.com/asciimoo/drawille/">Drawille</a>: Python drawing in ascii/unicode braille characters.</li>
 <li> <a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html">Pandas visualization</a>.</li>
 <li> <a href="https://www.python.org/dev/peps/pep-0020/">PEP 20 – The Zen of Python</a>.</li>
 <li> <a href="https://pypi.python.org/pypi/pudb">Pudb</a>: A tui python debugger.</li>
 <li> <a href="http://pycoders.com/">Pycoders weekly mailing list</a>.</li>
 <li> <a href="https://books.google.co.uk/books?id=9_AXCmGDiz8C&hl=en&redir_esc=y">Python Algorithms book</a>.</li>
 <li> <a href="https://news.ycombinator.com/item?id=11240729">Python patterns, Take One (Hacker News)</a>.</li>
 <li> <a href="https://taoofmac.com/space/blog/2013/08/11/2300">Python patterns, Take One</a>.</li>
 <li> <a href="https://www.airpair.com/python/posts/python-tips-and-traps">Python Tips and Traps</a>.</li>
 <li> <a href="http://irreal.org/blog/?p=3860">Python tools for Emacs</a>.</li>
 <li> <a href="http://tech.blog.aknin.name/tag/internals/page/2/">Python’s Innards: Hello, ceval.c!</a>.</li>
 <li> <a href="https://twitter.com/python_tip/status/1111349676106833920">Read Excel sheet with Python/Pandas (Twitter)</a>.</li>
 <li> <a href="http://www.johndcook.com/blog/python_regex/">Regular expressions in Python and Perl</a>.</li>
 <li> <a href="https://www.johndcook.com/blog/2019/01/24/reversing-an-md5-hash/">Reversing an MD5 hash (python)</a>.</li>
 <li> <a href="https://github.com/deanmalmgren/textract">Textract</a>: Python util extracting text from a handful of document types.</li>
 <li> <a href="https://julien.danjou.info/blog/2013/guide-python-static-class-abstract-methods">The definitive guide on how to use static, class or abstract methods in Python</a>.</li>
 <li> <a href="https://julien.danjou.info/books/the-hacker-guide-to-python">The Hacker's guide to python</a>.</li>
 <li> <a href="http://docs.quantifiedcode.com/python-anti-patterns/">The Little Book of Python Anti-Patterns</a>.</li>
 <li> <a href="http://blog.instavest.com/three-useful-python-libraries-for-startups">Three Useful Python Libraries for Startups</a>.</li>
 <li> <a href="http://effbot.org/zone/python-with-statement.htm">Understanding Python's "with" statement</a>.</li>
 <li> <a href="https://github.com/gorakhargosh/watchdog">Watchdog</a> (monitor filesystem in python).</li>
</ul></div>
</div>
</div>]]></description>
  <link>http://xenodium.com/python-bookmarks</link>
  <guid isPermaLink="false">http://xenodium.com/python-bookmarks</guid>
  <pubDate>Sun, 13 Jul 2014 00:00:00 +0100</pubDate>
</item>
<item>
  <title>Installing Emacs 24.4 on Mac OS X</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-installing-emacs-24-4-on-mac-os-x" class="outline-2">
 <h2 id="installing-emacs-24-4-on-mac-os-x"> <span class="timestamp-wrapper"> <span class="timestamp">09 July 2014</span></span> Installing Emacs 24.4 on Mac OS X</h2>
 <div class="outline-text-2" id="text-installing-emacs-24-4-on-mac-os-x">
 <p>
See Yamamoto's Mac OS X  <a href="https://github.com/railwaycat/emacs-mac-port">port</a>. To install:
</p>
 <div class="org-src-container">
 <pre class="src src-sh">$ brew tap railwaycat/emacsmacport
$ brew install emacs-mac
</pre>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/installing-emacs-24-4-on-mac-os-x</link>
  <guid isPermaLink="false">http://xenodium.com/installing-emacs-24-4-on-mac-os-x</guid>
  <pubDate>Wed, 09 Jul 2014 00:00:00 +0100</pubDate>
</item>
<item>
  <title>Installing Emacs 24.4 on Linux</title>
  <description><![CDATA[<div id="content" class="content">

 <div id="outline-container-installing-emacs--on-linux" class="outline-2">
 <h2 id="installing-emacs--on-linux"> <span class="timestamp-wrapper"> <span class="timestamp">09 July 2014</span></span> Installing Emacs 24.4 on Linux</h2>
 <div class="outline-text-2" id="text-installing-emacs--on-linux">
 <div class="org-src-container">
 <pre class="src src-sh">sudo apt-get install texinfo build-essential xorg-dev libgtk-3-dev libjpeg-dev libncurses5-dev libgif-dev libtiff-dev libm17n-dev libpng12-dev librsvg2-dev libotf-dev
</pre>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/installing-emacs--on-linux</link>
  <guid isPermaLink="false">http://xenodium.com/installing-emacs--on-linux</guid>
  <pubDate>Wed, 09 Jul 2014 00:00:00 +0100</pubDate>
</item>
</channel>
</rss>
