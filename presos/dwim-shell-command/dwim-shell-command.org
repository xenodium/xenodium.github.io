#+TITLE: Intro a dwim-shell-command
#+AUTHOR: Álvaro Ramírez
#+STARTUP: noinlineimages
https://xenodium.com

iOS Software Development

* Executing shell commands

Emacs has plenty of wonderful ways of executing shell commands.

I'm a fan of =shell-command=, =async-shell-command=, and =dired-do-shell-command=.

I wanted to ~combine~ some of the ~strengths in each function~.

*** 👉 wish list

- Combine favourite strengths from:
   =shell-command=
   =async-shell-command=
   =dired-do-shell-command=

* Shell command

Via /M-x/ =shell-command= or /M-!/

** Get image EXIF metadata

Let's open [[file:demo1/burger.png][burger.png]] and get metadata using =exiftool= shell command.

=M-n= inserts buffer file name (neat!)
#+begin_src sh
  exiftool
#+end_src

***  👉 wish list

- No manual =M-n= to insert buffer file name.
- When done, display/focus output buffer.
- q quits/kills output buffer.


** Get image EXIF metadata (reuse command history)

Let's open [[file:demo2/wasabi.png][wasabi.png]] and reuse command from history.
#+begin_src sh
  exiftool
#+end_src
*** 👉 wish list

- Reusable history (no mods needed).


** Convert to jpg

Let's convert [[file:demo4/chilly.png][chilly.png]] to jpg.
#+begin_src sh
  convert chilly.png chilly.jpg
#+end_src

*** 👉 wish list

- Automatically show me the created file.
- Refresh buffer/dired by default.
- Automatically show me the created file.


** Run command with colour output

Let's run a shell command that may output some colours.
#+begin_src sh
  neofetch
#+end_src
*** 👉 wish list

- Render output colours.
* Async shell command

Via /M-x/ =async-shell-command= or /M-&/

** Long-lived commands

Let's run a command that takes a little time to execute.

#+begin_src sh
  ping -c 10 gnu.org
#+end_src
*** 👉 wish list

- Show me process is active while in background.
- Automatically focus output buffer when done.
- Keep output buffer nearby in stack.
- q quits/kills output buffer.


** Multiple long-lived commands

Let's run simultaneous shell commands

#+begin_src sh
  ping gnu.org
#+end_src

*** 👉 wish list

- Don't ask to start a new buffer (just do it).
- Don't ask to kill the buffer process (just do it).

* Dired shell command

Invoked via /M-x/ =dired-do-shell-command= or /M-!/

Similar to =shell-command=, but can operate on [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Dired.html][dired]] files.

** Convert marked files to jpg

Let's convert marked files in [[file:demo6][directory]] to jpg.
#+begin_src sh
  convert `?` `?`.jpg
#+end_src

*** 👉 wish list

- Refresh by default.
- Move point to generated file.
- Change file extension completely (not append).


** Convert region files to jpg

Let's convert multiple files in [[file:demo6][directory]] to jpg.
#+begin_src sh
  convert `?` `?`.jpg
#+end_src

*** 👉 wish list

- Operate on region files also.
* DWIM shell command

What is [[https://en.wikipedia.org/wiki/DWIM][DWIM]]? It stands for _do what I mean_.

I wanted a shell command function that does what ✨I✨ mean.

** My wish list -> =dwim-shell-command=

- Combine favourite strengths from:
   =shell-command=
   =async-shell-command=
   =dired-do-shell-command=
- No manual =M-n= to insert buffer file name.
- Always async and in background.
- When done, display/focus output buffer in foreground.
- q quits/kills output buffer.
- Reusable history (no mods needed).
- Refresh buffer/dired by default.
- Automatically show me the created file.
- Render output colours.
- Show me process is active while in background.
- Automatically focus output buffer when done.
- Keep output buffer nearby in stack.
- Don't ask to start a new buffer (just do it).
- Don't ask to kill the buffer process (just do it).
- There's more...


** Get image EXIF metadata

Let's open [[file:demo1/burger.png][burger.png]] and get metadata using /exiftool/ =dwim-shell-command=.
#+begin_src sh
  exiftool '<<f>>'
#+end_src
+ Adds ='<<f>>'= by default (file placeholder).
+ Async and background by default.
+ When done, comes back to foreground.
+ q quits/kills output buffer.


** Get image EXIF metadata (reuse command history)

Let's open [[file:demo2/wasabi.png][wasabi.png]] and reuse command from history.
#+begin_src sh
  exiftool '<<f>>'
#+end_src
+ Same command from history. No need to tweak.


** Convert to jpg

Let's convert [[file:demo4/chilly.png][chilly.png]] to jpg.
#+begin_src sh
  convert '<<f>>' '<<fne>>.jpg'
#+end_src
+ Automatically show me the created file.
+ Command also reusable from history. No need to tweak.


** Run command with colour output

Let's run a shell command that may output some colours.
#+begin_src sh
  neofetch
#+end_src

+ Always renders output colours.


** Long-lived commands

Let's run a command that takes a little time to execute.

#+begin_src sh
  ping -c 10 gnu.org
#+end_src
+ Shows activity while in background.
+ Bring to foreground when done.
+ Keep output buffer nearby in stack.


** Multiple long-lived commands

Let's run simultaneous shell commands

#+begin_src sh
  ping gnu.org
#+end_src

+ Don't ask to start a new buffer (just do it).
+ Don't ask to kill the buffer process ('q' does it).

** Emacs interactive commands for shell commands

Lots of one-liners or complex commands to remember.

Just wrap into Emacs interactive command:

#+begin_src elisp :lexical no
  (defun dwim-shell-commands-video-to-webp ()
    "Convert all marked videos to webp(s)."
    (interactive)
    (dwim-shell-command-on-marked-files
     "Convert to webp"
     "ffmpeg -i '<<f>>' -vcodec libwebp -filter:v fps=fps=10 -compression_level 3 -lossless 1 -loop 0 -preset default -an -vsync 0 '<<fne>>'.webp"
     :utils "ffmpeg"))
#+end_src

Let's convert [[file:demo8/welcome.mov][welcome.mov]] to webp in [[file:demo8][dir]].

** Multi-language support

You can use other languages (kinda).

Let's add some Swift code. Show me file size in Swift.

#+begin_src emacs-lisp :lexical no
  (defun dwim-shell-command-tell-file-size-from-swift ()
    "Tell me the file size (via Swift)."
    (interactive)
    (dwim-shell-command-on-marked-files
     "Tell me the file size (via Swift)."
     "import Foundation
      let url = URL(fileURLWithPath:\"<<f>>\")
      let attr = try FileManager.default.attributesOfItem(atPath:url.path)
      let size = attr[FileAttributeKey.size] as! UInt64
      print(\"This file size is \\(size) bytes\")"
     :shell-pipe "swift -"))
#+end_src


** Collection of own commands

Check out ~dwim-shell-commands.el~

=dwim-shell-commands-audio-to-mp3=
=dwim-shell-commands-clipboard-to-qr=
=dwim-shell-commands-docx-to-pdf=
=dwim-shell-commands-drop-video-audio=
=dwim-shell-commands-epub-to-org=
=dwim-shell-commands-git-clone-clipboard-url=
=dwim-shell-commands-image-exif-metadata=
=dwim-shell-commands-resize-image=
=dwim-shell-commands-svg-to-png=
=dwim-shell-commands-unzip=
=dwim-shell-commands-url-browse=
=dwim-shell-commands-video-to-gif=
=dwim-shell-commands-video-to-mp3=
=dwim-shell-commands-video-to-webp=
...

* Learn more about it

[[https://xenodium.com/emacs-dwim-shell-command/][Emacs DWIM shell-command]]
[[https://xenodium.com/emacs-password-protect-current-pdf-revisited/][Emacs: Password-protect current pdf (revisited)]]
[[https://xenodium.com/png-to-icns-emacs-dwim-style/][png to icns (Emacs DWIM style)]]
[[https://xenodium.com/emacs-dwim-shell-command-multi-language/][Emacs: DWIM shell command (multi-language)]]
[[https://xenodium.com/dwim-shell-command-on-melpa/][dwim-shell-command on Melpa]]
[[https://xenodium.com/dwim-shell-command-improvements/][dwim-shell-command improvements]]
[[https://xenodium.com/dwim-shell-command-video-streams/][dwim-shell-command video streams]]
[[https://xenodium.com/dwim-shell-command-with-template-prompts/][dwim-shell-command with template prompts]]
[[https://xenodium.com/dwim-shell-command-usages-pdftotext-and-scp/][dwim-shell-command usages: pdftotext and scp]]
[[https://xenodium.com/emacs-reveal-in-finder-dwim-style/][Emacs: Reveal in macOS Finder (DWIM style)]]
[[https://xenodium.com/emacs-macos-share-from-dired-dwim-style/][Emacs: macOS sharing (DWIM style)]]


* Credits

[[https://github.com/rlister/org-present][org-present]] config based on [[https://systemcrafters.net][System Crafters]]'s [[https://systemcrafters.net/emacs-tips/presentations-with-org-present/][post]].

Images from:

  - [[https://www.openclipart.org/detail/340312/fukubukuro][Fukubukuro]]
  - [[https://www.openclipart.org/detail/340307/hamburger-in-a-wraper][Hamburger in a Wraper]]
  - [[https://www.openclipart.org/detail/339958/reina-de-corazones-vectorizado][Reina de corazones (Vectorizado)]]
  - [[https://www.openclipart.org/detail/339338/a-pair-of-boots][A pair of boots]]
  - [[https://www.openclipart.org/detail/340256/wasabi][Wasabi]]
  - [[https://www.openclipart.org/detail/337526/one-taco][One Taco]]
  - [[https://www.openclipart.org/detail/320454/ramen-8][Ramen (#8)]]
  - [[https://www.openclipart.org/detail/281268/hot-sauce][Hot Sauce]]

https://github.com/xenodium/dotsies
