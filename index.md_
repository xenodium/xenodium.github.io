# \[2025-04-01 Tue\] Journelly vs Emacs: Why Not Both?
---
id: journelly-vs-emacs-why-not-both
---

[JTR](https://indieweb.social/@jtr@fosstodon.org) recently [posted](https://taonaw.com/2025/04/01/irreal-likes-ramrezs-journelly-irrealorg.html) an interesting question in response to Irreal's [post](https://irreal.org/blog/?p=12880) wondering [why he feels the need to use something that is not Emacs for quick notes?](https://taonaw.com/2025/04/01/irreal-likes-ramrezs-journelly-irrealorg.html) While I'm in no position to speak on behalf of Irreal, I am the Ramírez building this Journelly app he speaks of ;-)

From my perspective as the author, I'm building this app to fill a void I have, complementing my org-mode usage. In my opinion, it's not a question of whether to use Journelly over Emacs. I freakin' love Emacs org. I don't want to give it up. If the apps speak to each other, the question I prefer asking is: why not use both?

When I’m on my computer, nearly all my writing goes through org-mode. I’ve been an org fan for well over a decade. My blog is powered by a [single org file](https://raw.githubusercontent.com/xenodium/xenodium.github.io/refs/heads/master/index.org) (be warned, it's a chunky file).

It's no secret I'm also an Emacs fan. I love how this platform [moulds to my needs](a-platform-that-moulds-to-your-needs). But when I’m on the go and on my iPhone, I want a different experience — quick mobile access, minimal ceremony, optimized for smaller touch screens. I want to capture quick notes on the go, with as little friction as possible. Optionally, I want to include photos, lists, checklists, location, weather, timestamps… I also want this experience to feel like other well-integrated iOS apps. The way I like to put it is: Journelly sorta feels like tweeting, but for your eyes only.

![](https://xenodium.github.io/images/journelly-vs-emacs-why-not-both/journelly.gif)

At the same time, I don’t want my mobile, note-taking experience to live in a data island. After all, I'm still an org fan. So… why not both? My goal for Journelly is to provide a mobile-optimized experience that speaks org, so it can integrate with existing org workflows.

![](https://xenodium.github.io/images/journelly-vs-emacs-why-not-both/storage.jpg)

While Journelly is offline by default, you may choose a different location for your data, enabling you to access it from your beloved editor.

![](https://xenodium.github.io/images/journelly-vs-emacs-why-not-both/emacs.png)

Back to the original question: why use another tool for quick notes other than Emacs? Journelly isn't meant to replace Emacs, but rather complement it. In a way, Journelly isn't that different from Beorg, which was mentioned in JTR's post. Both apps speak org on iOS. It just so happens the apps offer slightly different targeted experiences. While Beorg is perhaps more geared toward task lists and calendars, Journelly focuses on short and quick notes.

Journelly is still in beta, though lucky for me, [Mac Observer showcased a thorough review](https://www.macobserver.com/tips/round-ups/journelly-journal-app-ios/). If keen to join the beta group, reach out at journelly/./invite/@/xenodium.com or [Mastodon](https://indieweb.social/@xenodium) / [Twitter](https://twitter.com/xenodium) / [Reddit](https://www.reddit.com/user/xenodium) / [Bluesky](https://bsky.app/profile/xenodium.bsky.social).

P.S. Emacs org continues to be, and likely always will be, my writing epicentre. I now have three revolving [org-based apps on the App Store](https://apps.apple.com/us/developer/xenodium-ltd/id304568690), with Journelly soon to become the fourth one. if interested, check out [my org bundle](the-org-bundle).

# \[2025-03-25 Tue\] The Mac Observer showcases Journelly
---
id: the-mac-observer-showcases-journelly
---

[The Mac Observer](https://www.macobserver.com) is showcasing [Monday App Finder: Journelly, a Twitter-Like Journal for iOS](https://www.macobserver.com/tips/round-ups/journelly-journal-app-ios/).

```{=org}
#+ATTR_HTML: :width 70%
```
[![](https://www.macobserver.com/wp-content/uploads/2025/03/iOS-18-default-wallpaper-with-app-list-and-the-Journaly-journal-app-icon-highlighted.png)](https://www.macobserver.com/wp-content/uploads/2025/03/iOS-18-default-wallpaper-with-app-list-and-the-Journaly-journal-app-icon-highlighted.png)

[Bemfica de Oliva](https://www.macobserver.com/author/bemfica_deoliva/) does a wonderful rundown of Journelly's features and capabilities, much better than anything else I've posted before. They even mentioned [Org](https://orgmode.org/) markup and [Emacs](https://www.gnu.org/software/emacs/) text editor, for those who want to drop down to its plain text storage. A nice treat, as these aren't typically showcased in the space.

If you're curious about what Journelly can do, check out Bemfica's [post](https://www.macobserver.com/tips/round-ups/journelly-journal-app-ios/). Alternatively, if you just want to play with it, [join the TestFlight beta group](journelly-open-for-beta).

# \[2025-03-14 Fri\] Journelly open for beta
---
id: journelly-open-for-beta
---

I've reignited Journelly, my note-taking/journaling project. The iOS app is coming along nicely.

I've been using Journelly daily. The best I can describe the experience is: "kinda like tweeting but for my eyes only".

![](https://xenodium.github.io/images/journelly-open-for-beta/journelly.jpeg)

Journelly automatically includes date and time in your entries. Optionally, it'll also include location and weather details.

For now, your entries can include text, images, checkboxes, bullets, and links.

While entering items orally isn't yet possible [as per Irreal's post](https://irreal.org/blog/?p=12842), you can use the standard keyboard button to dictate text.

![](https://xenodium.github.io/images/journelly-open-for-beta/add.jpeg)

## Powered by plain text (org markup)

If you're an Emacs org mode fan, you'll be happy to know that Journelly stores data as plain text, using org to structure its entries.

If you're unfamiliar with these things, you don't need to learn any of it to use the app. It's just what's under the hood.

``` org
* [2025-02-26 Wed 13:55] @ Distillery Lane
:PROPERTIES:
:LATITUDE: 51.488644146827866
:LONGITUDE: -0.22292387343051026
:WEATHER_TEMPERATURE: 8.69°C
:WEATHER_CONDITION: Rain
:WEATHER_SYMBOL: cloud.rain
:END:
- [X] Try out Pad Thai Story in Hammersmith

[[file:Journelly.org.assets/images/4F0F3923-675A-461E-9B02-63CEDE76C765.jpg]]

* [2025-02-17 Mon 23:08] @ Wyatt Drive
:PROPERTIES:
:LATITUDE: 52.48425107944395
:LONGITUDE: -0.74188963460061163
:WEATHER_TEMPERATURE: 1.46°C
:WEATHER_CONDITION: Cloudy
:WEATHER_SYMBOL: cloud
:END:
Table tennis / ping pong clubs in London

https://www.experttabletennis.com/how-to-find-a-good-table-tennis-club-in-london

https://thatsup.co.uk/london/guide/where-to-play-table-tennis-in-london

https://thatsup.co.uk/london/guides

```

## Join the beta group

Want to give Journelly a try? Join the TestFlight beta group. Send me an email address (any would do) for the TestFlight invite.

You can reach out at journelly/./invite/@/xenodium.com or [Mastodon](https://indieweb.social/@xenodium) / [Twitter](https://twitter.com/xenodium) / [Reddit](https://www.reddit.com/user/xenodium) / [Bluesky](https://bsky.app/profile/xenodium.bsky.social).

# \[2025-03-06 Thu\] DeepSeek, Open Router, Kagi, and Perplexity join the chat
---
id: deepseek-open-router-kagi-and-perplexity-join-the-chat
---

Back in November, [I announced the chatgpt-shell Emacs package going offline](deepseek-open-router-kagi-and-perplexity-join-the-chat). In real terms, it meant adding [Ollama](https://ollama.com/) support after [chatgpt-shell went multi-model](chatgpt-shell-goes-multi-model). Since then, support for a handful of providers and models has been added.

While [DeepSeek](https://www.deepseek.com/) is the latest joinee, [Open Router](https://openrouter.ai/) (thank you [djr7C4](https://github.com/xenodium/chatgpt-shell/pull/276)), [Kagi summarizer](https://kagi.com/summarizer/index.html), and [Perplexity](https://perplexity.ai/) are also a model-swap away.

[chatgpt-shell](https://github.com/xenodium/chatgpt-shell) is [nearing 30K MELPA downloads](https://melpa.org/#/chatgpt-shell). Are you a happy user? Consider making this project sustainable by ✨[sponsoring](https://github.com/sponsors/xenodium)✨.

![](https://xenodium.github.io/images/deepseek-open-router-kagi-and-perplexity-join-the-chat/models.png)

# \[2025-02-20 Thu\] Keychron K3 Pro: F1-F12 as default macOS keys
---
id: keychron-k3-pro-f1-f12-as-default-macos-keys
---

![](https://xenodium.github.io/images/keychron-k3-pro-f1-f12-as-default-macos-keys/keyboard.jpg)

After resetting my [Keychron K3 Pro](https://www.keychron.uk/products/keychron-k3-pro-qmk-via-wireless-custom-mechanical-keyboard), my F1 to F12 keys were no longer my default macOS keys. The entire row was defaulting to macOS's special keys (i.e. Mission Control, Launch Pad, Volume, etc). At first, I thought I may just need to revisit the macOS setting "Use F1, F2, etc keys as standard function keys", yet toggling the setting made no difference.

![](https://xenodium.github.io/images/keychron-k3-pro-f1-f12-as-default-macos-keys/settings.png)

Turns out, I had remapped those keys long ago and simply forgot about it. Factory resetting my keyboard got rid of this customization. This post is a reminder for my future self, and anyone else looking to remap their F1-F12 keys.

## Save your current layout

Via <https://usevia.app>, I saved my current keyboard layout (the out-of-box layout) and named it `k3_pro_ansi_white(before).json`.

![](https://xenodium.github.io/images/keychron-k3-pro-f1-f12-as-default-macos-keys/save.png)

## Apply your changes

I made a second copy of the layout and named it `k3_pro_ansi_white(after).json`. In this new file, I located the two layers (first and second) and simply swapped the two row chunks using a text editor.

The diff looks a little something like this:

    --- k3_pro_ansi_white(before).json    2025-02-20 09:44:03
    +++ k3_pro_ansi_white(after).json 2025-02-20 09:43:59
    @@ -5,18 +5,18 @@
       "layers": [
         [
           "KC_ESC",
    -      "KC_BRID",
    -      "KC_BRIU",
    -      "CUSTOM(4)",
    -      "CUSTOM(5)",
    -      "BL_DEC",
    -      "BL_INC",
    -      "KC_MPRV",
    -      "KC_MPLY",
    -      "KC_MNXT",
    -      "KC_MUTE",
    -      "KC_VOLD",
    -      "KC_VOLU",
    +      "KC_F1",
    +      "KC_F2",
    +      "KC_F3",
    +      "KC_F4",
    +      "KC_F5",
    +      "KC_F6",
    +      "KC_F7",
    +      "KC_F8",
    +      "KC_F9",
    +      "KC_F10",
    +      "KC_F11",
    +      "KC_F12",
           "CUSTOM(8)",
           "KC_DEL",
           "BL_STEP",
    @@ -103,18 +103,18 @@
         ],
         [
           "KC_TRNS",
    -      "KC_F1",
    -      "KC_F2",
    -      "KC_F3",
    -      "KC_F4",
    -      "KC_F5",
    -      "KC_F6",
    -      "KC_F7",
    -      "KC_F8",
    -      "KC_F9",
    -      "KC_F10",
    -      "KC_F11",
    -      "KC_F12",
    +      "KC_BRID",
    +      "KC_BRIU",
    +      "CUSTOM(4)",
    +      "CUSTOM(5)",
    +      "BL_DEC",
    +      "BL_INC",
    +      "KC_MPRV",
    +      "KC_MPLY",
    +      "KC_MNXT",
    +      "KC_MUTE",
    +      "KC_VOLD",
    +      "KC_VOLU",
           "KC_TRNS",
           "KC_TRNS",
           "BL_TOGG",

Similarly, here's side-by-side look via Emacs ediff:

![](https://xenodium.github.io/images/keychron-k3-pro-f1-f12-as-default-macos-keys/after-1.png)

![](https://xenodium.github.io/images/keychron-k3-pro-f1-f12-as-default-macos-keys/after-2.png)

## Load your modified layout

Now that we have `k3_pro_ansi_white(after).json` with our changes, all that's left is loading through <https://usevia.app>. You are now done.

![](https://xenodium.github.io/images/keychron-k3-pro-f1-f12-as-default-macos-keys/load.png)

While F1-F12 keys should now be available by default. To access your macOS special keys use the `fn` key.

Enjoy your F1-F12 default keys!

## Final `k3_pro_ansi_white(after).json`

In case you'd like to see the entire content of `k3_pro_ansi_white(after).json`, here it is:

``` json
{
  "name": "Keychron K3 Pro ANSI White",
  "vendorProductId": 875823667,
  "macros": ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""],
  "layers": [
    [
      "KC_ESC",
      "KC_F1",
      "KC_F2",
      "KC_F3",
      "KC_F4",
      "KC_F5",
      "KC_F6",
      "KC_F7",
      "KC_F8",
      "KC_F9",
      "KC_F10",
      "KC_F11",
      "KC_F12",
      "CUSTOM(8)",
      "KC_DEL",
      "BL_STEP",
      "KC_GRV",
      "KC_1",
      "KC_2",
      "KC_3",
      "KC_4",
      "KC_5",
      "KC_6",
      "KC_7",
      "KC_8",
      "KC_9",
      "KC_0",
      "KC_MINS",
      "KC_EQL",
      "KC_BSPC",
      "KC_NO",
      "KC_PGUP",
      "KC_TAB",
      "KC_Q",
      "KC_W",
      "KC_E",
      "KC_R",
      "KC_T",
      "KC_Y",
      "KC_U",
      "KC_I",
      "KC_O",
      "KC_P",
      "KC_LBRC",
      "KC_RBRC",
      "KC_BSLS",
      "KC_NO",
      "KC_PGDN",
      "KC_CAPS",
      "KC_A",
      "KC_S",
      "KC_D",
      "KC_F",
      "KC_G",
      "KC_H",
      "KC_J",
      "KC_K",
      "KC_L",
      "KC_SCLN",
      "KC_QUOT",
      "KC_NO",
      "KC_ENT",
      "KC_NO",
      "KC_HOME",
      "KC_LSFT",
      "KC_NO",
      "KC_Z",
      "KC_X",
      "KC_C",
      "KC_V",
      "KC_B",
      "KC_N",
      "KC_M",
      "KC_COMM",
      "KC_DOT",
      "KC_SLSH",
      "KC_NO",
      "KC_RSFT",
      "KC_UP",
      "KC_END",
      "KC_LCTL",
      "CUSTOM(0)",
      "CUSTOM(2)",
      "KC_NO",
      "KC_NO",
      "KC_NO",
      "KC_SPC",
      "KC_NO",
      "KC_NO",
      "KC_NO",
      "CUSTOM(3)",
      "MO(1)",
      "KC_RCTL",
      "KC_LEFT",
      "KC_DOWN",
      "KC_RGHT"
    ],
    [
      "KC_TRNS",
      "KC_BRID",
      "KC_BRIU",
      "CUSTOM(4)",
      "CUSTOM(5)",
      "BL_DEC",
      "BL_INC",
      "KC_MPRV",
      "KC_MPLY",
      "KC_MNXT",
      "KC_MUTE",
      "KC_VOLD",
      "KC_VOLU",
      "KC_TRNS",
      "KC_TRNS",
      "BL_TOGG",
      "KC_TRNS",
      "CUSTOM(11)",
      "CUSTOM(12)",
      "CUSTOM(13)",
      "KC_TRNS",
      "KC_TRNS",
      "KC_TRNS",
      "KC_TRNS",
      "KC_TRNS",
      "KC_TRNS",
      "KC_TRNS",
      "KC_TRNS",
      "KC_TRNS",
      "KC_TRNS",
      "KC_NO",
      "KC_TRNS",
      "BL_TOGG",
      "BL_STEP",
      "BL_INC",
      "KC_TRNS",
      "KC_TRNS",
      "KC_TRNS",
      "KC_TRNS",
      "KC_TRNS",
      "KC_TRNS",
      "KC_TRNS",
      "KC_TRNS",
      "KC_TRNS",
      "KC_TRNS",
      "KC_TRNS",
      "KC_NO",
      "KC_TRNS",
      "KC_TRNS",
      "KC_TRNS",
      "BL_DEC",
      "KC_TRNS",
      "KC_TRNS",
      "KC_TRNS",
      "KC_TRNS",
      "KC_TRNS",
      "KC_TRNS",
      "KC_TRNS",
      "KC_TRNS",
      "KC_TRNS",
      "KC_NO",
      "KC_TRNS",
      "KC_NO",
      "KC_TRNS",
      "KC_TRNS",
      "KC_NO",
      "KC_TRNS",
      "KC_TRNS",
      "KC_TRNS",
      "KC_TRNS",
      "CUSTOM(14)",
      "MAGIC_TOGGLE_NKRO",
      "KC_TRNS",
      "KC_TRNS",
      "KC_TRNS",
      "KC_TRNS",
      "KC_NO",
      "KC_TRNS",
      "KC_TRNS",
      "KC_TRNS",
      "KC_TRNS",
      "KC_TRNS",
      "KC_TRNS",
      "KC_NO",
      "KC_NO",
      "KC_NO",
      "KC_TRNS",
      "KC_NO",
      "KC_NO",
      "KC_NO",
      "KC_TRNS",
      "KC_TRNS",
      "KC_TRNS",
      "KC_TRNS",
      "KC_TRNS",
      "KC_TRNS"
    ],
    [
      "KC_ESC",
      "KC_F1",
      "KC_F2",
      "KC_F3",
      "KC_F4",
      "KC_F5",
      "KC_F6",
      "KC_F7",
      "KC_F8",
      "KC_F9",
      "KC_F10",
      "KC_F11",
      "KC_F12",
      "KC_PSCR",
      "KC_DEL",
      "BL_STEP",
      "KC_GRV",
      "KC_1",
      "KC_2",
      "KC_3",
      "KC_4",
      "KC_5",
      "KC_6",
      "KC_7",
      "KC_8",
      "KC_9",
      "KC_0",
      "KC_MINS",
      "KC_EQL",
      "KC_BSPC",
      "KC_NO",
      "KC_PGUP",
      "KC_TAB",
      "KC_Q",
      "KC_W",
      "KC_E",
      "KC_R",
      "KC_T",
      "KC_Y",
      "KC_U",
      "KC_I",
      "KC_O",
      "KC_P",
      "KC_LBRC",
      "KC_RBRC",
      "KC_BSLS",
      "KC_NO",
      "KC_PGDN",
      "KC_CAPS",
      "KC_A",
      "KC_S",
      "KC_D",
      "KC_F",
      "KC_G",
      "KC_H",
      "KC_J",
      "KC_K",
      "KC_L",
      "KC_SCLN",
      "KC_QUOT",
      "KC_NO",
      "KC_ENT",
      "KC_NO",
      "KC_HOME",
      "KC_LSFT",
      "KC_NO",
      "KC_Z",
      "KC_X",
      "KC_C",
      "KC_V",
      "KC_B",
      "KC_N",
      "KC_M",
      "KC_COMM",
      "KC_DOT",
      "KC_SLSH",
      "KC_NO",
      "KC_RSFT",
      "KC_UP",
      "KC_END",
      "KC_LCTL",
      "KC_LGUI",
      "KC_LALT",
      "KC_NO",
      "KC_NO",
      "KC_NO",
      "KC_SPC",
      "KC_NO",
      "KC_NO",
      "KC_NO",
      "KC_RALT",
      "MO(3)",
      "KC_RCTL",
      "KC_LEFT",
      "KC_DOWN",
      "KC_RGHT"
    ],
    [
      "KC_TRNS",
      "KC_BRID",
      "KC_BRIU",
      "CUSTOM(6)",
      "CUSTOM(7)",
      "BL_DEC",
      "BL_INC",
      "KC_MPRV",
      "KC_MPLY",
      "KC_MNXT",
      "KC_MUTE",
      "KC_VOLD",
      "KC_VOLU",
      "KC_TRNS",
      "KC_TRNS",
      "BL_TOGG",
      "KC_TRNS",
      "CUSTOM(11)",
      "CUSTOM(12)",
      "CUSTOM(13)",
      "KC_TRNS",
      "KC_TRNS",
      "KC_TRNS",
      "KC_TRNS",
      "KC_TRNS",
      "KC_TRNS",
      "KC_TRNS",
      "KC_TRNS",
      "KC_TRNS",
      "KC_TRNS",
      "KC_NO",
      "KC_TRNS",
      "BL_TOGG",
      "BL_STEP",
      "BL_INC",
      "KC_TRNS",
      "KC_TRNS",
      "KC_TRNS",
      "KC_TRNS",
      "KC_TRNS",
      "KC_TRNS",
      "KC_TRNS",
      "KC_TRNS",
      "KC_TRNS",
      "KC_TRNS",
      "KC_TRNS",
      "KC_NO",
      "KC_TRNS",
      "KC_TRNS",
      "KC_TRNS",
      "BL_DEC",
      "KC_TRNS",
      "KC_TRNS",
      "KC_TRNS",
      "KC_TRNS",
      "KC_TRNS",
      "KC_TRNS",
      "KC_TRNS",
      "KC_TRNS",
      "KC_TRNS",
      "KC_NO",
      "KC_TRNS",
      "KC_NO",
      "KC_TRNS",
      "KC_TRNS",
      "KC_NO",
      "KC_TRNS",
      "KC_TRNS",
      "KC_TRNS",
      "KC_TRNS",
      "CUSTOM(14)",
      "MAGIC_TOGGLE_NKRO",
      "KC_TRNS",
      "KC_TRNS",
      "KC_TRNS",
      "KC_TRNS",
      "KC_NO",
      "KC_TRNS",
      "KC_TRNS",
      "KC_TRNS",
      "KC_TRNS",
      "KC_TRNS",
      "KC_TRNS",
      "KC_NO",
      "KC_NO",
      "KC_NO",
      "KC_TRNS",
      "KC_NO",
      "KC_NO",
      "KC_NO",
      "KC_TRNS",
      "KC_TRNS",
      "KC_TRNS",
      "KC_TRNS",
      "KC_TRNS",
      "KC_TRNS"
    ]
  ],
  "encoders": []
}

```

# \[2025-02-03 Mon\] E-ink bookmarks
---
id: e-ink-bookmarks
---



-   [cPiArtFrame](https://giuliomagnifico.blog/post/2024-09-13-cpiartframe/).
-   [DIY E-Ink clock update with more faces, github repo & full youtube tutorial](https://www.reddit.com/r/eink/s/g6IMhIzWO9).
-   [Show HN: E-Paper 7-color display showing the current weather \| Hacker News](https://news.ycombinator.com/item?id=40607889).

# \[2025-02-03 Mon\] Sourdough bookmarks
---
id: sourdough-bookmarks
---



-   [Reading crumbs structure: fermentation](https://www.reddit.com/r/Sourdough/comments/1ig9nnu/handy_little_guide).
-   [Todays loaf and some advice after making 100+ loaves over 6 years](https://www.reddit.com/r/Sourdough/comments/1i9uhyr/todays_loaf_and_some_advice_after_making_100/).

# \[2025-01-30 Thu\] Cardamom Buns recipe
---
id: cardamom-buns-a-yak-shaving-story-plus-recipe
---

## Buns

-   150 ml milk
-   2 tsp instant yeast (2.25 tsp active-dry yeast, 17.5g fresh yeast)
-   1 large egg
-   1 egg yolk
-   50 grams sugar
-   1/2 tsp vanilla extract
-   1/2 tsp ground cardamom
-   1/2 tsp salt
-   375 grams all-purpose or bread flour
-   57 grams unsalted butter, softened

## Filling

-   71 grams unsalted butter, softened
-   65 grams brown sugar
-   1.5 tsp ground cardamom
-   Pinch of salt

# \[2025-01-30 Thu\] A tour of Ready Player Mode
---
id: a-tour-of-ready-player-mode
---

[Ready Player Mode](https://github.com/xenodium/ready-player), which began as a [tiny media-viewing experiment](https://www.reddit.com/r/emacs/comments/1dtnjy7/is_there_imageview_but_for_audio/), has now become my daily music player.

Along the way, I moved from regular daily streaming to buying and playing music offline, relying on the odd streaming service exclusively for discovery. This setup's been working great so far. I get unrestricted playback (for life) with the occasional discovery session whenever I see fit.

## Setup

`Ready Player Mode` runs in Emacs. You install it, enable its minor mode (for media recognition), and you're ready to go.

``` {.commonlisp org-language="emacs-lisp" lexical="no"}
(use-package ready-player
  :ensure t
  :config
  (ready-player-mode +1))
```

`Ready Player Mode` will try to use either [mpv](https://mpv.io/), [vlc](https://www.videolan.org/vlc/), [ffplay](https://ffmpeg.org/ffplay.html), or [mplayer](https://en.wikipedia.org/wiki/MPlayer) (in that order) to play media, but mpv works best.

## Ready to go

Post setup, you can open media files like any other text file and Emacs will just play it for you. Say, open a [dired](https://www.gnu.org/software/emacs/manual/html_node/emacs/Dired.html) buffer, navigate to a file, and open as usual.

![](https://xenodium.github.io/images/a-tour-of-ready-player-mode/open-file.gif)

## Buttons vs key bindings

If buttons are your cup of tea, use `tab` or `backtab` to navigate around.

![](https://xenodium.github.io/images/a-tour-of-ready-player-mode/buttons.gif)

Alternatively, single-key bindings are available. You can find them all in the transient help menu, via the `?` binding.

![](https://xenodium.github.io/images/a-tour-of-ready-player-mode/transient.png)

## Global key bindings

Global key bindings are available, so you can interact with the player without switching buffers.

![](https://xenodium.github.io/images/a-tour-of-ready-player-mode/global.png)

Global bindings are under the `C-c m` prefix.

  ----------- -------------------------------------------------------------
  C-c m SPC   Toggle play/stop of media.
  C-c m r     Cycle through repeat settings: file, directory, off.
  C-c m m     Toggle switching between player buffer and previous buffer.
  C-c m s     Toggle shuffle setting.
  C-c m a     Toggle autoplay setting.
  C-c m n     Open the next media file in the same directory.
  C-c m c     Open my media collection.
  C-c m i     Show playback info in the echo area.
  C-c m p     Open the previous media file in the same directory.
  C-c m /     Search the \`dired' playlist for playback (experimental).
  ----------- -------------------------------------------------------------

If you prefer to use other bindings, disable default ones with:

``` {.commonlisp org-language="emacs-lisp" lexical="no"}
(setq ready-player-set-global-bindings nil)
```

## Open externally

You can always open the currently played file externally, using your system default player. This is bound to the `e` key.

![](https://xenodium.github.io/images/a-tour-of-ready-player-mode/external.png)

## Repeat, shuffle, and autoplay

Repeat, shuffle, and autoplay should do what you'd expect and can be toggled via `r` `s` and `a` keys.

![](https://xenodium.github.io/images/a-tour-of-ready-player-mode/repeat-shuffle-autoplay.gif)

## Play current directory

By default, `Ready Player` will continue playing other media found in the current directory. Use `n` and `p` bindings to move through different tracks.

![](https://xenodium.github.io/images/a-tour-of-ready-player-mode/next.gif)

## Seek

`Ready Player` works best with [mpv](https://mpv.io/) player. If you have it installed, you can seek through tracks.

![](https://xenodium.github.io/images/a-tour-of-ready-player-mode/seek.gif)

## Play your collection

`Ready Player` can remember your music collection, but needs a tiny addition to the existing setup via the `ready-player-my-media-collection-location` variable.

``` {.commonlisp org-language="emacs-lisp" lexical="no"}
(use-package ready-player
  :custom
  (ready-player-my-media-collection-location "~/path/to/your/music/collection")
  :config
  (ready-player-mode +1))
```

Your music collection is now available via the home button.

![](https://xenodium.github.io/images/a-tour-of-ready-player-mode/home.png)

## Index + search

Your music collection is automatically indexed. Same for the currently played directory, so you can search for tracks.

![](https://xenodium.github.io/images/a-tour-of-ready-player-mode/magnifying.png)

![](https://xenodium.github.io/images/a-tour-of-ready-player-mode/search.png)

## Bookmarking

This is a new feature inspired by [tristanC's use](https://functional.cafe/@tristanC/113896948267754737) of [Emacs bookmarks](https://www.gnu.org/software/emacs/manual/html_node/emacs/Bookmarks.html) with `Ready Player.` Bookmarks are now displayed and toggled from the player interface.

![](https://xenodium.github.io/images/a-tour-of-ready-player-mode/bookmark.gif)

Bookmarks are searchable too.

![](https://xenodium.github.io/images/a-tour-of-ready-player-mode/search-bookmark.png)

## Download album cover

Missing album cover? Download it via `M-x ready-player-download-album-artwork`.

![](https://xenodium.github.io/images/a-tour-of-ready-player-mode/artwork.gif)

## Embracing `dired`

I mentioned playing media from current directory or your music collection, but `Ready Player` is really just playing media from a `dired` buffer. If you can craft a `dired` buffer, `Ready Player` [should be able to play it](https://lmno.lol/alvaro/the-dired-abstraction). Think [find-dired](https://www.gnu.org/software/emacs/manual/html_node/emacs/Dired-and-Find.html).

## Advanced features

`Ready Player` should be umm… ready to play with little configuration. If you want further customizations, check out its [documentation](https://github.com/xenodium/ready-player?tab=readme-ov-file#all-customizations).

Enjoy your unrestricted music offline, now and forever!

✨[sponsor](https://github.com/sponsors/xenodium)✨ this project.

# \[2025-01-21 Tue\] A platform that moulds to your needs
---
id: a-platform-that-moulds-to-your-needs
---

Emacs users may be known for bringing in all sorts of diverse workflows into their beloved text editor. From the outside, I get how odd this may seem. We often treat our text editor as a platform of sorts to do our email, web browsing, calendars, project management, chat… the list goes on.

Take email, as an example. Back in 2018 I thought "[managing email from Emacs… surely that's crazy-talk](https://lmno.lol/alvaro/trying-out-mu4e-and-offlineimap)", yet I gave it a try just in case. 7 years later and I never looked back. I still use the excellent [mu4e](https://djcbsoftware.nl/code/mu/mu4e.html) client.

As you become more accustomed to Emacs, you may find yourself wishing you could navigate other tasks just as efficiently. But this doesn't happen right away. The editor starts moulding to your needs, initially as you copy others's code/configurations, but this can only take you so far. Emacs truly does mould to your own needs, once you start learning a little [elisp](https://www.gnu.org/software/emacs/manual/elisp.html).

When comparing `elisp` to modern languages, one may be tempted to dismiss it as a niche language from another era. While both of those things may be true, its moulding and glueing capabilities remain just as relevant and powerful today, even in the [LLM](https://en.wikipedia.org/wiki/Large_language_model) era.

Take a random workflow like extracting vocabulary from a Japanese class paper handout. While it may seem far-fetched for Emacs to handle this, it's actually fairly straightforward with a little elisp glue. Often, this consists of finding some crucial utilities and glueing them up.

![](https://xenodium.github.io/images/a-platform-that-moulds-to-your-needs/lookup.gif)

## Take a screenshot

I'm mostly on macOS, so I can use the built-in [screencapture](https://support.apple.com/en-us/102646) utility to capture the screen and save to a file.

``` {.commonlisp org-language="emacs-lisp" lexical="no"}
(call-process "/usr/sbin/screencapture" nil nil nil "-i" "path/to/screenshot.png")
```

## Get an LLM to OCR things for ya

These days, there are no shortages of neither large language models nor Emacs clients. I built one: [chatgpt-shell](https://github.com/xenodium/chatgpt-shell), so I feed the screenshot to `chatgpt-shell-lookup`, giving it a prompt like:

``` org
1. Fill out an org mode table using this format as an example:

|----------+----------+-------+--------+---------+------|
| Hiragana | Katakana | Kanji | Romaji | English | Tags |
|----------+----------+-------+--------+---------+------|
|          |          |       |        |         |      |
|----------+----------+-------+--------+---------+------|

2. Fill out Hiragana or Katakana when appropriate. Never both.
3. Fill out Kanji when appropriate.
4. Show long romaji vowels (i.e. ō).
5. DO NOT use Markdown source blocks.
6. DO NOT add any text or explanations outside the org table.
```

Be sure to always check LLM output ;)

## Let org do its thing

Since I requested [org](https://orgmode.org/) markup from the LLM, I can use `org-mode` to navigate cells and tweak data as needed. The output I get looks a little something like this:

``` org
| Hiragana               | Katakana   | Kanji                | Romaji               | English               | #Tags              |
|------------------------+------------+----------------------+----------------------+-----------------------+--------------------|
| べんきょう を します   |            | 勉強 を します       | benkyō o shimasu     | study                 | #study             |
...
| かいもの を します     |            | 買い物 を します     | kaimono o shimasu    | shop                  | #shopping          |
...
```

## Sarasa Gothic (detour)

More of a side-note than anything… As a beginner Japanese learner, I quickly discovered I needed a font supporting my new rendering needs. I found [Sarasa Gothic Mono](https://picaq.github.io/sarasa/), a lovely font (thanks to this [Reddit post](https://www.reddit.com/r/emacs/comments/1hgi7cj/recommendation_for_a_font_for_japanesechinese/)).

## More elisp glue

Now that I got my Japanese vocabulary in org format, I can continue leveraging elisp to glue other things from my target workflow, like iterating over the table and generating a [tsv](https://en.wikipedia.org/wiki/Tab-separated_values) with my new vocabulary:

``` {.commonlisp org-language="emacs-lisp" lexical="no"}
(while (org-at-table-p)
  (let* ((front ...)
         (hiragana (org-table-get-field 1))
         (katakana (org-table-get-field 2))
         (kanji (org-table-get-field 3))
         (romaji (org-table-get-field 4))
         (meaning (org-table-get-field 5))
         (tags (org-table-get-field 6)))
    (with-current-buffer output-buffer
      (insert (format "%s\t%s\t%s\t%s\t%s\t%s\t%s\n"
                      front
                      hiragana
                      katakana
                      kanji
                      romaji
                      meaning
                      (replace-regexp-in-string "#" "" tags)))))
  (forward-line 1))
```

``` example
べんきょう を します   べんきょう を します     勉強 を します    benkyō o shimasu    study   study
...
かいもの を します    かいもの を します      買い物 を します   kaimono o shimasu   shop    shopping
...
```

## Anki

So where is all this elisp glueing going? Now that I have my new vocabulary in a .tsv table, I can feed it to [Anki](https://apps.ankiweb.net/), the popular spaced repetition app. While there are a handful of existing [Anki Emacs packages](https://lmno.lol/alvaro/anki-bookmarks), converting with an elisp loop was simple enough and gave me lots of freedom on how to structure my cards.

## iPhone

Once I got the new vocabulary imported into Anki, I can subsequently sync it over to the iPhone. In some way, you can say that a bit of elisp glue here and there facilitated the entire workflow.

By the way, now you know why there's a random [chatgpt-shell-japanese-lookup](https://github.com/xenodium/chatgpt-shell/blob/9c896feda89a2a879de807a5bd652beec7d6a3f6/chatgpt-shell.el#L1896) function included in [chatgpt-shell](https://github.com/xenodium/chatgpt-shell).

![](https://xenodium.github.io/images/a-platform-that-moulds-to-your-needs/anki.jpeg)

## Learn elisp

While Emacs and elisp may not be the most fashionable pair, they sure fill a huge void for me. They provide a platform that can easily mould to my specific needs.

If you're an Emacser and have been shying away from learning elisp, do yourself a favour and get your toes dipped. You'll be glad to.

Soon enough, you'll enable workflows that mould exactly to the way you like things to work. In other words, they simply [do what ✨you✨ mean](https://lmno.lol/alvaro/emacs-dwim-do-what-i-mean) ;)

# \[2025-01-01 Wed\] Blogging minus the yucky bits of the modern web
---
id: blogging-minus-the-yucky-bits-of-modern-web
---

Happy New Year! If you follow [my blog](https://lmno.lol/alvaro), you may have noticed that I've been hosting it on [lmno.lol](https://lmno.lol) for a while now, a blogging service I built (invitation-only until now).

```{=org}
#+ATTR_HTML: :width 90%
```
[![](https://xenodium.github.io/images/blogging-minus-the-yucky-bits-of-modern-web/lmno.png)](https://lmno.lol)

## Why build a blogging platform

There's been a resurgence in blogging of sorts. Wonderful in itself, but the popular platforms are fairly erm unfriendly to their readers.

These days, search results might lead you to an interesting blog post, but you're greeted with messages like:

> “The author made this story available to \^\^\^\^\^\^ members only. If you’re new to \^\^\^\^\^\^, create a new account to read this story on us.”

Kinda strange for a platform to offload blame onto its users.

In one instance, I bit the bullet. Created an account, logged in, only to find out the specific post was reserved to paying members. “Alright,” I thought, “let’s do this.” Sadly, when I finally arrived, the content was a bit of a letdown. After all those hoops…

Meanwhile, both [Privacy Badger](https://privacybadger.org/) and [uBlock Origin](https://ublockorigin.com/) were going haywire. Great, this thing is tracking me too. At least the site is lean… I kid, of course not.

So that's that. Off I went to build a blogging platform to exclude the yucky bits the modern web has brought to our blogs.

## My blogging journey

I'm what you may call an accidental blogger. Sometime ago, I started jotting notes using plain text file sprinkled with [org markup](https://orgmode.org/). I'd use my [text editor](https://www.gnu.org/software/emacs/) for both writing and recall. It worked well when in front of my computer, not so much when on the move or sharing things with anyone. By that point, I decided to export my notes to HTML and post online. Over time, folks started reaching out about something read in my notes, errrm blog posts, and so by then I suppose I had become a blogger.

In 11 years of blogging, my approach hasn't changed much. I still write to the very same plain text file I used to write my notes to. I found this approach fairly accessible, with little ceremony. When I want to write, I open the usual text file and just write. HTML exporting consisted of hacky [elisp](https://en.wikipedia.org/wiki/Emacs_Lisp) cobbled together over time. While the code was nothing to rave about, it did the job just fine over the years. Having said that, it was more of a "it works on my machine" sorta thing.

## Enter lmno.lol

[lmno.lol](https://lmno.lol) is heavily inspired by the same workflow. You write your notes or blog posts to a single plain text file, sprinkling [Markdown](https://en.wikipedia.org/wiki/Markdown) this time around, and just drag and drop it to the web.

`lmno.lol` takes care of the rest.

![](https://xenodium.github.io/images/blogging-minus-the-yucky-bits-of-modern-web/demo.gif)

## A Little blast from the past

Remember [ASCII art](https://www.asciiart.eu/)? [Figlet](http://www.figlet.org/)? You can bring back some of that nostalgic web by adding a banner to your blog.

`lmno.lol` enables that via text art banners. What would you add?

``` markdown
# blog-text-art-banner

 /$$$$$$$                            /$$
| $$__  $$                          | $$
| $$  \ $$  /$$$$$$  /$$$$$$$   /$$$$$$$  /$$$$$$   /$$$$$$
| $$$$$$$/ /$$__  $$| $$__  $$ /$$__  $$ /$$__  $$ /$$__  $$
| $$__  $$| $$$$$$$$| $$  \ $$| $$  | $$| $$$$$$$$| $$  \__/
| $$  \ $$| $$_____/| $$  | $$| $$  | $$| $$_____/| $$
| $$  | $$|  $$$$$$$| $$  | $$|  $$$$$$$|  $$$$$$$| $$
|__/  |__/ \_______/|__/  |__/ \_______/ \_______/|__/
```

## Read anywhere

Needless to say, this platform has no tracking, ads, or paywalls. It also tries to stay away from bloat and uses JavaScript for optional features only. If you're wondering, all blogs include [RSS FEEDS](https://en.wikipedia.org/wiki/RSS) with full content.

Blogs render wonderfully pretty much anywhere.

![](https://xenodium.github.io/images/blogging-minus-the-yucky-bits-of-modern-web/anywhere.gif)

## Help sustain a better web

We have plenty of [features we’d like to add](https://lmno.lol/blog/feature-requests). We host blogs for a small fee (\$1.50 per month). This fee helps us cover hosting expenses, maintain and develop features, and keep the platform running smoothly. That’s the entirety of our transaction—no ads, no tracking, no selling of user data.

There are no paywalls here. You can read fully and freely. However, please consider becoming a paying customer, even if you don’t plan to blog yourself. Your support ensures the platform remains sustainable and independent.

As a paying customer, you’ll also get to reserve your own blog handle. By doing so, you not only support the platform but also promote an inclusive internet experience that is fast, smooth, and free of constant tracking, intrusive advertising, paywalls, and data collection.

By supporting services like `lmno.lol`, you prove like-minded services are not only possible but fully sustainable without deceitful tech.

I hope you like [lmno.lol](https://lmno.lol). Happy blogging!

# \[2024-12-28 Sat\] symbol-overlay-mc now on MELPA
---
id: symbol-overlay-mc-now-on-melpa
---

Some time ago, I wrote about [adding multiple cursor support to symbol-overlay](its-all-up-for-grabs-and-it-compounds/) by gluing the two packages together. If you're keen to learn how to bend Emacs to your way, have a look at that post.

![](https://xenodium.github.io/images/its-all-up-for-grabs-and-it-compounds/symbol-overlay-meets-multiple-cursors.gif)

Later on, in a "Multiple cursors - how and why?" [Reddit post](https://www.reddit.com/r/emacs/comments/1h321x2/multiple_cursors_how_and_why), I showcased the overlay usage. [Peter Oliver](https://www.mavit.org.uk) asked [if the package could be submitted to MELPA](https://www.reddit.com/r/emacs/comments/1h321x2/comment/m06x676/?utm_source=share&utm_medium=web3x&utm_name=web3xcss&utm_term=1&utm_content=share_button). To my delight, he also volunteered to [take on the submission](https://github.com/melpa/melpa/pull/9267).

Unfortunately, I had failed to check back on the MELPA submission until today. I'm happy to report that, thanks to Peter, `symbol-overlay-mc` [is now on MELPA](https://melpa.org/#/symbol-overlay-mc).

Happy symbol-overlay-multiple-cursors editing! ;)

# \[2024-12-23 Mon\] Hello emacs.tv
---
id: hello-emacstv
---

A few days ago, [Sacha Chua](https://sachachua.com/blog/) mentioned how [cool it would be to have an Emacs video index](https://social.sachachua.com/@sacha/statuses/01JF94JQQNNRXMTKN3Y1774TFP) like [Ruby Video](https://www.rubyvideo.dev/topics). I mentioned how I had similarly considered a low-tech solution, maybe powered by plain text (bonus points for [org mode](https://orgmode.org/) of course).

A little later, Sacha [shared a preliminary video feed dump](https://social.sachachua.com/@sacha/statuses/01JFG5T3C6E88362DRDZN9ANA6), in org! With that, I wrote the [first experiment to render the org feed](https://indieweb.social/@xenodium/113682069315989397) and [emacs.tv](https://emacs.tv/) was born.

![](https://xenodium.github.io/images/hello-emacstv/screenshot.png)

[emacs.tv](https://emacs.tv/) is merely a few days old. Powered by an org feed (rendered client-side), but we can fetch and render in all sorts of ways. [emacs.tv](https://emacs.tv/) brings it to the web, though I'm sure we can come up with all sorts of Emacs integrations. A new major mode? Or maybe convert the org feed to rss and plug into [elfeed](https://github.com/skeeto/elfeed)?

This is what a feed entry looks like:

``` org
* EmacsConf.org: How we use Org Mode and TRAMP to organize and run a multi-track conference :emacsconf:emacsconf2023:org:tramp:
:PROPERTIES:
:DATE: 2023-12-03
:URL: https://emacsconf.org/2023/talks/emacsconf
:MEDIA_URL: https://media.emacsconf.org/2023/emacsconf-2023-emacsconf--emacsconforg-how-we-use-org-mode-and-tramp-to-organize-and-run-a-multitrack-conference--sacha-chua--main.webm
:YOUTUBE_URL: https://www.youtube.com/watch?v=uTregv3rNl0
:TOOBNIX_URL: https://toobnix.org/w/eX2dXG3xMtUHuuBz4fssGT
:TRANSCRIPT_URL: https://media.emacsconf.org/2023/emacsconf-2023-emacsconf--emacsconforg-how-we-use-org-mode-and-tramp-to-organize-and-run-a-multitrack-conference--sacha-chua--main.vtt
:SPEAKERS: Sacha Chua
:SERIES: EmacsConf 2023
:END:
```

## We need your help

As mentioned, this is a new project. It's a good start, but it can only get better with your help.

### Submit more content

Sacha kickstarted a [wonderful video feed,](https://raw.githubusercontent.com/emacstv/emacstv.github.io/refs/heads/main/videos.org) a collection of 1715 videos as of today. We need more. Are your published videos missing? Reckon other videos should be listed? Please help by [submitting](https://github.com/emacstv/emacstv.github.io#add-videos) new entries.

### Improve our tagging

Many of the listed videos could use more tags. Please help us by tagging content in [video.org](https://raw.githubusercontent.com/emacstv/emacstv.github.io/refs/heads/main/videos.org) and submit a [pull request](https://github.com/emacstv/emacstv.github.io/pulls).

### Take it for a spin

Or maybe just take [emacs.tv](https://emacs.tv/) for a spin and [give us some feedback](https://github.com/emacstv/emacstv.github.io/issues).

Happy holidays! 🎄☃️

# \[2024-12-09 Mon\] An experimental (e)shell pager
---
id: an-experimental-e-shell-pager
---

These days, my LLM interactions primarily take place via [chatgpt-shell](https://github.com/xenodium/chatgpt-shell)'s compose UX. I've grown fond of this hybrid style of interaction. On sharing the [latest incarnation](https://bsky.app/profile/xenodium.bsky.social/post/3lco3ggkk4c2r), [jllw](https://bsky.app/profile/jllw.bsky.social) asked about the possibility to [port to comint shells](https://bsky.app/profile/jllw.bsky.social/post/3lcpb6ygkws2v).

With [jllw](https://bsky.app/profile/jllw.bsky.social)'s great idea in mind, I set out to prototype an [eshell](https://www.gnu.org/software/emacs/manual/html_mono/eshell.html) pager, my preferred shell.

The initial results ain't too shabby:

![](https://xenodium.github.io/images/an-experimental-e-shell-pager/shell-pager.gif)

While you can easily flip through all `eshell` commands and outputs (via single-character n/p bindings), you can also compose and fire off new commands using a magit-style approach. That is, craft your desired command and C-c C-c to send it off.

The prototype is currently focused on `eshell`, but it can be easily ported to [comint](https://www.gnu.org/software/emacs/manual/html_node/emacs/Shell-Mode.html) and other shells by writing new `shell-maker` configs:

``` {.commonlisp org-language="emacs-lisp" lexical="no"}
(shell-pager--make-config
 :shell-buffer buffer
 :page-buffer (shell-pager--buffer)
 :next #'shell-pager--eshell-next
 :previous #'shell-pager--eshell-previous
 :current #'shell-pager--eshell-current-item
 :subscribe #'shell-pager--eshell-subscribe
 :unsubscribe #'shell-pager--eshell-unsubscribe
 :submit #'shell-pager--eshell-submit
 :interrupt #'shell-pager--eshell-interrupt)
```

`shell-pager`'s super [rough/experimental code is now on GitHub](https://github.com/xenodium/shell-pager).

It's been a fun experiment so far. Time will tell, whether or not `shell-pager` can replace most of my `eshell` interactions. The good news is that this isn't an all or nothing sorta thing. `shell-pager` complements `eshell`, so I can always jump back to eshell itself and continue with the very same shell history.

# \[2024-12-05 Thu\] LLM chat navigation
---
id: llm-chat-navigation
---

LLM chats are often handy for refining answers to a question or task, part of a bigger goal. Navigating the chat transcript, copying and pasting, can be a frequent operation in the bigger goal. If we can do it more efficiently, the better.

While [chatgpt-shell](https://github.com/xenodium/chatgpt-shell/issues) offered `chatgpt-shell-next-item` and `chatgpt-shell-previous-item` commands, it had a few rough edges which prevented me from fully adopting. The default bindings `C-c C-n` and `C-c C-p` didn't exactly help either, making repeated navigation fairly clunky. [repeat-mode](https://karthinks.com/software/it-bears-repeating/) would have helped a little, yet I was yearning for a familiar experience… more like `tab` and `Shift-tab` in web browsers.

While shells often `tab`-complete commands and/or arguments, I'm not super convinced `tab` completion is a good candidate for an LLM Emacs shell. Having said that, searching for previous prompts a la `Ctr-r` is indeed a handy feature and already supported in [chatgpt-shell](https://github.com/xenodium/chatgpt-shell/issues) (via `M-r`).

This is all to say that the with the latest `chatgpt-shell` navigation changes (using `<tab>` and `<backtab>` bindings), the `chatgpt-shell` experience feels way more natural. You can see it in action…

![](https://xenodium.github.io/images/llm-chat-navigation/shell.gif)

Tab navigation jumps between prompts, links, and code blocks. You may have noticed code blocks are automatically selected, in case you want to quickly copy and paste elsewhere.

This mode of navigation is also present in the [compose UX](https://lmno.lol/alvaro/chatgpt-shell-goes-multi-model#a-shell-hybrid) (via M-x `chatgpt-shell-prompt-compose`). In addition to `<tab>` and `<backtab>`, you can use `n` and `p` bindings (post prompt submission).

![](https://xenodium.github.io/images/llm-chat-navigation/compose-tab.gif)

Give the new navigation a try. See how it feels. Some of it is fairly fresh, so [please file bugs if needed](https://github.com/xenodium/chatgpt-shell/issues/new).

# \[2024-12-04 Wed\] Awesome elisp
---
id: awesome-elisp
---

A few days ago, redditor [gollyned](https://www.reddit.com/user/gollyned) asked about [best practices: developing on top of modern elisp packages](https://www.reddit.com/r/emacs/comments/1h4eos1/best_practices_developing_on_top_of_modern_elisp/). It reminded of my [modern Emacs lisp libraries](https://lmno.lol/alvaro/modern-elisp-libraries) post, which I shared with them.

While my post is roughly 4.5 years old, these days I continue to reach out to the likes of [seq.el](https://nicolas.petton.fr/ressources/emacsconf2015/), [map.el](https://nicolas.petton.fr/ressources/emacsconf2015/), [subr-x.el](https://github.com/emacs-mirror/emacs/blob/master/lisp/emacs-lisp/subr-x.el) and [let-alist.el](https://endlessparentheses.com/new-on-elpa-and-in-emacs-25-1-let-alist.html) on a regular basis. My post also [shared some great third party options](https://lmno.lol/alvaro/modern-elisp-libraries). Maybe my post could use an update? Happy to take suggestions.

A few days later, I ran into [awesome-elisp](https://github.com/p3r7/awesome-elisp), which aggregates a ton of resources to check out. Funnily enough, [I had bookmarked it a long while ago](https://lmno.lol/alvaro/emacs-lisp-bookmarks) and simply forgot about it. On a somewhat related note, when I reviewed my old list of bookmarks, I didn't have Yoo Box's [it is not hard to read Lisp code](https://yoo2080.wordpress.com/2014/07/04/it-is-not-hard-to-read-lisp-code/) bookmarked, which changed the way I viewed and read elisp code (spoiler alert, as a tree). I remember how well this approach also translated to languages like Objective-C, enabling me to inline more things without worrying too much.

In any case, the [reddit post](https://www.reddit.com/r/emacs/comments/1h4eos1/best_practices_developing_on_top_of_modern_elisp/) was another reminder for me to go and check out some of those bookmarks I never got to read, including the [awesome-elisp](https://github.com/p3r7/awesome-elisp) one.

# \[2024-11-27 Wed\] ob-chatgpt-shell goes multi-model too
---
id: ob-chatgpt-shell-goes-multi-model-too
---

A week ago, I announced [chatgpt-shell going multi-model](https://lmno.lol/alvaro/chatgpt-shell-goes-multi-model). What I failed to mention is that because [ob-chatgpt-shell](https://github.com/xenodium/ob-chatgpt-shell) (its [org babel](https://orgmode.org/worg/org-contrib/babel/intro.html) Emacs cousin) relies on `chatgpt-shell`, this `babel` package has now gone multi-model also.

![](https://xenodium.github.io/images/ob-chatgpt-shell-goes-multi-model-too/babel-multi-model.gif)

`ob-chatgpt-shell` follows the familiar babel form. To swap models, use the existing `:version` param as follows.

``` org
#+begin_src chatgpt-shell :results output :version gpt-4o
  Who built you?
#+end_src

#+RESULTS:
: I was developed by OpenAI, a research organization focused on creating and promoting friendly AI for the benefit of all humanity.

#+begin_src chatgpt-shell :results output :version claude-3-5-sonnet-20240620
  Who built you?
#+end_src

#+RESULTS:
: I was created by Anthropic.

#+begin_src chatgpt-shell :results output :version qwen2.5-coder
  Who built you?
#+end_src

#+RESULTS:
: I was built by Alibaba Cloud. How can I assist you today?

#+begin_src chatgpt-shell :results output :version gemini-1.5-pro-latest
  Who built you?
#+end_src

#+RESULTS:
: I was built by Google.  More specifically, I'm a large language model, trained by Google.
```

Keep in mind that `:version` depends on `chatgpt-shell-models` to resolve its models. You may need to add other models. If you add new ones, consider contributing a [pull request](https://github.com/xenodium/chatgpt-shell/pulls), so we all benefit from the addition.

## Should [ob-chatgpt-shell](https://lmno.lol/alvaro/chatgpt-shell-goes-multi-model#should-chatgpt-shell-rename%3F) rename?

See [this](https://lmno.lol/alvaro/chatgpt-shell-goes-multi-model#should-chatgpt-shell-rename%3F).

## Please report issues

In addition to being a fairly new feature, `chatgpt-shell` multi-model support required quite a few structural changes. We may still need additional polishing follow-ups. If you encounter any issues [please report them](https://github.com/xenodium/ob-chatgpt-shell/issues/new).

## Make this project sustainable

Maintaining, experimenting, implementing feature requests, and supporting open-source packages takes work. Today, chatgpt-shell has roughly [21.5K downloads on MELPA](https://melpa.org/#/chatgpt-shell) and many untracked elsewhere. If you're one of the happy users, [consider sponsoring the project](https://github.com/sponsors/xenodium). If you see potential, help [fuel development by sponsoring](https://github.com/sponsors/xenodium) too.

Perhaps you enjoy some of the content I write about? Find my Emacs posts/tips useful?

-   [Blog (xenodium.com)]() (Web)
-   [Blog (lmno.lol/alvaro)](https://lmno.lol/alvaro) (Web)

Alternatively, you want a blogging platform that skips the yucky side effects of the modern web?

-   I'm building [lmno.lol](https://lmno.lol) (my blog is [there](https://lmno.lol/alvaro)).

Maybe you enjoy one of my other projects?

-   [Plain Org](https://plainorg.com) (org mode / iOS)
-   [Flat Habits](https://flathabits.com) (org mode / iOS)
-   [Scratch](https://apps.apple.com/us/app/scratch/id1671420139) (org mode / iOS)
-   [macosrec](https://github.com/xenodium/macosrec) (macOS)
-   [Fresh Eyes](https://apps.apple.com/us/app/fresh-eyes/id6480411697?mt=12) (macOS)
-   [dwim-shell-command](https://github.com/xenodium/dwim-shell-command) (Emacs)
-   [company-org-block](https://github.com/xenodium/company-org-block) (Emacs)
-   [org-block-capf](https://github.com/xenodium/org-block-capf) (Emacs)
-   [ob-swiftui](https://github.com/xenodium/ob-swiftui) (Emacs)
-   [chatgpt-shell](https://github.com/xenodium/chatgpt-shell) (Emacs)
-   [ready-player](https://github.com/xenodium/ready-player) (Emacs)
-   [sqlite-mode-extras](https://github.com/xenodium/sqlite-mode-extras)
-   [ob-chatgpt-shell](https://github.com/xenodium/ob-chatgpt-shell) (Emacs)
-   [dall-e-shell](https://github.com/xenodium/dall-e-shell) (Emacs)
-   [ob-dall-e-shell](https://github.com/xenodium/ob-dall-e-shell) (Emacs)
-   [shell-maker](https://github.com/xenodium/shell-maker) (Emacs)

So, umm… I'll just leave my GitHub sponsor page [here](https://github.com/sponsors/xenodium).

# \[2024-11-25 Mon\] LLM iterate and insert
---
id: llm-iterate-and-insert
---

[chatgpt-shell](https://github.com/xenodium/chatgpt-shell) includes a couple of mechanisms to operate on an Emacs buffer region. That is, select a region and ask the [LLM robots](https://lmno.lol/alvaro/chatgpt-shell-goes-multi-model) to modify it for us. Until now, both of these mechanisms didn't quite close the loop. They could either modify current region or iterate on a separate solution, but never both.

## M-x chatgpt-shell-quick-insert

While `chatgpt-shell`'s quick insert mechanism already enabled selecting a region and requesting changes, it was more of a "I'm feeling lucky" situation. If the changes didn't pan out, you'd have to discard the suggestion and start over.

With the latest changes, in addition to accepting or discarding (y/n bindings) suggestions, we can now iterate using the `i` binding.

```{=org}
#+ATTR_HTML: :width 100%
```
![](http://localhost:8787/alvaro/llm-iterate-and-insert/quick-insert-iterate.gif "1")

## M-x chatgpt-shell-prompt-compose

While quick insertions rely on minibuffer input, `chatgpt-shell-prompt-compose` opens a dedicated buffer for a more thorough interactions. Select a region, invoke `chatgpt-shell-prompt-compose` (my preferred binding being `C-c C-e`), and a new compose buffer is created with the region text. Add your instructions and submit with `C-c C-c`. Post submission, the compose buffer becomes read-only and single-character key-bindings take over. For example: `r` replies (for further iteration) and `n/p` (or `TAB/shift-TAB`) navigation. There are [more bindings](https://github.com/xenodium/chatgpt-shell?tab=readme-ov-file#a-shell-hybrid).

Until now, we could easily craft more involved queries and continue iterating from the compose buffer, but integrating suggested changes was a manual process. That is, navigate to a code block, select, copy it and then paste it elsewhere.

With the latest changes, pressing `i` (insert) while on a code block will attempt to insert it wherever the initial interaction took place.

```{=org}
#+ATTR_HTML: :width 100%
```
![](http://localhost:8787/alvaro/llm-iterate-and-insert/compose-insert-iterate.gif "1")

Both of these changes show now be available on MELPA. While I demoed ChatGPT, the two mechanism should now work with any of the supported models (ChatGPT, Claude, Gemini, and Ollama).

# \[2024-11-22 Fri\] Toggle macOS menu bar from you know where
---
id: toggle-macos-menu-bar-from-you-know-where
---

I'm a fan of macOS's auto-hide menu bar setting. Unless I'm reaching out to a menu item, I don't typically need to have a visible menu bar, so I set auto-hide to "Always".

![](https://xenodium.github.io/images/toggle-macos-menu-bar-from-you-know-where/control-center.png)

On rare occasions, I turn this setting off (say [for a screen grab](https://lmno.lol/alvaro/chatgpt-shell-goes-offline)). While reaching out to macOS Control Center is OK, I wanted to quickly toggle it from the comfort of Emacs via `M-x` fuzzy search.

We can leverage AppleScript to toggle the setting on and off. In the past, I would write shell scripts for this kinda thing and invoke from the command line. These days, I dump them into a [dwim-shell-command](https://github.com/xenodium/dwim-shell-command) and quickly forget about its implementation. From then on, I just M-x and fuzzy search for some magical incantation (I'm looking at you ffmpeg). I got [a bunch of these things](https://github.com/xenodium/dwim-shell-command?tab=readme-ov-file#my-toolbox)…

``` {.commonlisp org-language="emacs-lisp" lexical="no"}
(defun dwim-shell-commands-macos-toggle-menu-bar-autohide ()
  "Toggle macOS menu bar auto-hide."
  (interactive)
  (dwim-shell-command-on-marked-files
   "Toggle menu bar auto-hide."
   "current_status=$(osascript -e 'tell application \"System Events\" to get autohide menu bar of dock preferences')

if [ \"$current_status\" = \"true\" ]; then
    osascript -e 'tell application \"System Events\" to set autohide menu bar of dock preferences to false'
    echo \"Auto-hide disabled.\"
else
    osascript -e 'tell application \"System Events\" to set autohide menu bar of dock preferences to true'
    echo \"Auto-hide enabled.\"
fi"
   :utils "osascript"
   :silent-success t))
```

…and that's all there is to it.

![](https://xenodium.github.io/images/toggle-macos-menu-bar-from-you-know-where/autohide.webp)

# \[2024-11-21 Thu\] chatgpt-shell goes offline
---
id: chatgpt-shell-goes-offline
---

Since [chatgpt-shell going multi-model](https://lmno.lol/alvaro/chatgpt-shell-goes-multi-model), it was only a matter of time until we added support for local/offline models. As of version 2.0.6, [chatgpt-shell](https://github.com/xenodium/chatgpt-shell) has a basic [Ollama](https://ollama.com/) implementation (llama3.2 for now).

`chatgpt-shell` is more than a shell. Check out the [demos in the previous post](https://lmno.lol/alvaro/chatgpt-shell-goes-multi-model).

![](https://xenodium.github.io/images/chatgpt-shell-goes-offline/who-offline.gif)

For anyone keen on keeping all their LLM interactions offline, Ollama seems like a great option. I'm an Ollama noobie myself and already looking forward to getting acquainted. Having an offline LLM available at my Emacs fingertips will be super convenient.

For the more familiar with Ollama, please give the [chatgpt-shell](https://github.com/xenodium/chatgpt-shell) integration a try (it's on [MELPA](https://melpa.org/#/chatgpt-shell)).

v2.0.6 has a basic/inital Ollama implementation. Please give it a good run and [report bugs](https://github.com/xenodium/chatgpt-shell/issues/new).

You can swap models via:

    M-x chatgpt-shell-swap-model

Help make this project sustainable. [Sponsor the work](https://github.com/sponsors/xenodium).

# \[2024-11-20 Wed\] chatgpt-shell goes multi-model
---
id: chatgpt-shell-goes-multi-model
---

Over the last few months, I've been chipping at implementing [chatgpt-shell](https://github.com/xenodium/chatgpt-shell)'s most requested and biggest feature: multi-model support. Today, I get to unveil the first two implementations: [Anthropic's Claude](https://www.anthropic.com/claude) and [Google's Gemini](https://gemini.google.com/).

<img src="https://raw.githubusercontent.com/xenodium/chatgpt-shell/main/demos/multi-model-shell.gif" width="99%" />

## Changing course

In the past, I envisioned a different path for multi-model support. By isolating shell logic into a new package ([shell-maker](https://github.com/xenodium/shell-maker)), folks could use it as a [building block to create new shells](https://lmno.lol/alvaro/a-shell-maker) (adding support for their favourite LLM).

While each shell-maker-based shell currently shares a basic common experience, I did not foresee the minor differences affecting the general Emacs user experience. Learning the quirks of each new shell felt like unnecessary friction in developing muscle memory. I also became dependent on `chatgpt-shell` features, which I often missed when using other shells.

Along with slightly different shell experiences, we currently require multiple package installations (and setups). Depending on which camp you're on (batteries included vs fine-grained control) this may or may not be a downside.

With every new `chatgpt-shell` feature I showcased, I was often asked if they could be used with other LLM providers. I typically answered with "I've been meaning to work on this…" or "I heard you can do multi-model `chatgpt-shell` using a bridge like [liteLLM](https://docs.litellm.ai/docs/)". Neither of these where great answers, resulting in me just postponing the chunky work.

Eventually, I bit the bullet, changed course, and got to work on multi-model support. With my initial plan to spin multiple shells via `shell-maker`, `chatgpt-shell`'s implementation didn't exactly lend itself to support multiple clients. Long story short, `chatgpt-shell` multi-model support required quite a bit of work. This where I divert to ask you to [help make this project sustainable by sponsoring the work](https://github.com/sponsors/xenodium).

## Make this project sustainable

Maintaining, experimenting, implementing feature requests, and supporting open-source packages takes work. Today, chatgpt-shell has over [20.5K downloads on MELPA](https://melpa.org/#/chatgpt-shell) and many untracked others elsewhere. If you're one of the happy users, [consider sponsoring the project](https://github.com/sponsors/xenodium). If you see potential, help [fuel development by sponsoring](https://github.com/sponsors/xenodium) too.

Perhaps you enjoy some of the content I write about? Find my Emacs posts/tips useful?

-   [Blog (xenodium.com)]() (Web)
-   [Blog (lmno.lol/alvaro)](https://lmno.lol/alvaro) (Web)

Alternatively, you want a blogging platform that skips the yucky side effects of the modern web?

-   I'm building [lmno.lol](https://lmno.lol) (my blog is [there](https://lmno.lol/alvaro)).

Maybe you enjoy one of my other projects?

-   [Plain Org](https://plainorg.com) (org mode / iOS)
-   [Flat Habits](https://flathabits.com) (org mode / iOS)
-   [Scratch](https://apps.apple.com/us/app/scratch/id1671420139) (org mode / iOS)
-   [macosrec](https://github.com/xenodium/macosrec) (macOS)
-   [Fresh Eyes](https://apps.apple.com/us/app/fresh-eyes/id6480411697?mt=12) (macOS)
-   [dwim-shell-command](https://github.com/xenodium/dwim-shell-command) (Emacs)
-   [company-org-block](https://github.com/xenodium/company-org-block) (Emacs)
-   [org-block-capf](https://github.com/xenodium/org-block-capf) (Emacs)
-   [ob-swiftui](https://github.com/xenodium/ob-swiftui) (Emacs)
-   [chatgpt-shell](https://github.com/xenodium/chatgpt-shell) (Emacs)
-   [ready-player](https://github.com/xenodium/ready-player) (Emacs)
-   [sqlite-mode-extras](https://github.com/xenodium/sqlite-mode-extras)
-   [ob-chatgpt-shell](https://github.com/xenodium/ob-chatgpt-shell) (Emacs)
-   [dall-e-shell](https://github.com/xenodium/dall-e-shell) (Emacs)
-   [ob-dall-e-shell](https://github.com/xenodium/ob-dall-e-shell) (Emacs)
-   [shell-maker](https://github.com/xenodium/shell-maker) (Emacs)

So, umm… I'll just leave my GitHub sponsor page [here](https://github.com/sponsors/xenodium).

## chatgpt-shell, more than a shell

With chatgpt-shell being a [comint](https://www.gnu.org/software/emacs/manual/html_node/emacs/Shell-Prompts.html) shell, you can bring your favourite Emacs flows along.

<img src="https://raw.githubusercontent.com/xenodium/chatgpt-shell/main/demos/cyberpunk.gif" width="99%" />

As I used `chatgpt-shell` myself, I kept experimenting with different integrations and improvements. Read on for some of my favourites…

### A shell hybrid

`chatgpt-shell` includes a compose buffer experience. This is my favourite and most frequently used mechanism to interact with LLMs.

For example, select a region and invoke `M-x chatgpt-shell-prompt-compose` (`C-c C-e` is my preferred binding), and an editable buffer automatically copies the region and enables crafting a more thorough query. When ready, submit with the familiar `C-c C-c` binding. The buffer automatically becomes read-only and enables single-character bindings.

<img src="https://raw.githubusercontent.com/xenodium/chatgpt-shell/main/demos/compose.gif" width="99%" />

### Navigation: n/p (or TAB/shift-TAB)

Navigate through source blocks (including previous submissions in history). Source blocks are automatically selected.

### Reply: r

Reply with with follow-up requests using the `r` binding.

### Give me more: m

Want to ask for more of the same data? Press `m` to request more of it. This is handy to follow up on any kind of list (suggestion, candidates, results, etc).

### Request entire snippets: e

LLM being lazy and returning partial code? Press `e` to request entire snippet.

### Quick quick: q

I'm a big fan of quickly disposing of Emacs buffers with the `q` binding. chatgpt-shell compose buffers are no exception.

## Confirm inline mods (via diffs)

Request inline modifications, with explicit confirmation before accepting.

<img src="https://raw.githubusercontent.com/xenodium/chatgpt-shell/main/demos/quick-insert.gif" width="99%" />

## Execute snippets (a la [org babel](https://orgmode.org/worg/org-contrib/babel/intro.html))

Both the shell and the compose buffers enable users to execute source blocks via `C-c C-c`, leveraging [org babel](https://orgmode.org/worg/org-contrib/babel/intro.html).

<img src="https://raw.githubusercontent.com/xenodium/chatgpt-shell/main/demos/swiftui.gif" width="99%" />

## Vision experiments

I've been experimenting with image queries (currently ChatGPT only, please [sponsor](https://github.com/sponsors/xenodium) to help bring support for others).

Below is a handy integration to extract Japanese vocabulary. There's also a generic image descriptor available via `M-x chatgpt-shell-describe-image` that works on any Emacs image (via dired, image buffer, point on image, or selecting a desktop region).

<img src="https://raw.githubusercontent.com/xenodium/chatgpt-shell/main/demos/japanese-weekdays.gif" width="99%" />

## Supporting new models

Your favourite model not yet supported? File a [feature request](https://github.com/xenodium/chatgpt-shell/issues/new). You also know how to [fuel the project](https://github.com/sponsors/xenodium). Want to contribute new models? [Reach out](https://github.com/xenodium/chatgpt-shell/issues/new).

## Local models

While the two new implementations rely on cloud APIs, local services are now possible. I've yet to use a local LLM, but please [reach out](https://github.com/xenodium/chatgpt-shell/issues/new), so we can make these happen too. Want to contribute?

## Should chatgpt-shell rename?

With `chatgpt-shell` going multi-model, it's not unreasonable to ask if this package should be renamed. Maybe it should. But that's additional work we can likely postpone for the time being (and avoid pushing users to migrate). For now, I'd prefer focusing on polishing the multi-model experience and work on ironing out any issues. For that, I'll need your help.

## Take Gemini and Claude for a spin

Multi-model support required chunky structural changes. While I've been using it myself, I'll need wider usage to uncover issues. Please take it for a spin and [file bugs or give feedback](https://github.com/xenodium/chatgpt-shell/issues/new). Or if you just want to ping me, I'd love to hear about your experience ([Mastodon](https://indieweb.social/@xenodium) / [Twitter](https://twitter.com/xenodium) / [Reddit](https://www.reddit.com/user/xenodium) / [Email](mailto:me__AT__xenodium.com)).

-   Be sure to update to `chatgpt-shell` v2.0.1 and `shell-maker` v0.68.1 as a minimum.
-   Set `chatgpt-shell-anthropic-key` or `chatgpt-shell-google-key`.
-   Swap models with existing `M-x chatgpt-shell-swap-model-version` or set a default with `(setq chatgpt-shell-model-version "claude-3-5-sonnet-20240620")` or `(setq chatgpt-shell-model-version "claude-gemini-1.5-pro-latest")`.
-   Everything else should just work 🤞😅

Happy Emacsing!

# \[2024-11-13 Wed\] chatgpt-shell splits up
---
id: chatgpt-shell-repo-splits-up
---

The [chatgpt-shell](https://github.com/xenodium/chatgpt-shell) package started as an experiment [glueing the ChatGPT API to an Emacs comint buffer](https://lmno.lol/alvaro/a-chatgpt-emacs-shell). Over time, it grew into several packages within the same repository: shell-maker, ob-chatgpt-shell, dall-e-shell, ob-dall-e-shell, and of course chatgpt-shell itself.

I'm splitting the repository as a first step in reworking `chatgpt-shell` to enable multi-model support (i.e. Gemini, Claude, and others), a popular feature request.

## Want multi-model support?

Go 👍 the [feature request](https://github.com/xenodium/chatgpt-shell/issues/244) and ✨[sponsor](https://github.com/sponsors/xenodium)✨ the work.

If keen on having a multi-modal `chatgpt-shell` at your fingertips, please consider [sponsoring](https://github.com/sponsors/xenodium) to make the project sustainable. Improvements like this, integrations, and keeping up with the AI space takes quite a bit of work and effort.

## New package repositories

### chatgpt-shell

No repo location changes. Remains at <https://github.com/xenodium/chatgpt-shell>

`chatgpt-shell` carries the ChatGPT shell itself, but also convenience integrations.

My hope is to make this a multi-model package.

![](https://xenodium.github.io/images/chatgpt-shell-repo-splits-up/swiftui.webp)

![](https://xenodium.github.io/images/chatgpt-shell-repo-splits-up/japanese.webp)

![](https://xenodium.github.io/images/chatgpt-shell-repo-splits-up/fix.webp)

### ob-chatgpt-shell

Moves to <https://github.com/xenodium/ob-chatgpts-shell>

An extension of `chatgpt-shell` to execute org babel blocks as ChatGPT prompts.

![](https://xenodium.github.io/images/chatgpt-shell-repo-splits-up/ob-chatgpt-shell.png)

### dall-e-shell

Moves to <https://github.com/xenodium/dall-e-shell>

A dedicated shell for DALL-E image generation.

![](https://xenodium.github.io/images/chatgpt-shell-repo-splits-up/dall-e-shell.png)

### ob-dall-e-shell

Moves to <https://github.com/xenodium/ob-dall-e-shell>

An extension of `dall-e-shell` to execute org babel blocks as ChatGPT prompts.

![](https://xenodium.github.io/images/chatgpt-shell-repo-splits-up/ob-dall-e-shell.png)

### shell-maker

Moves to <https://github.com/xenodium/shell-maker>

`shell-maker` a convenience wrapper around [comint mode](https://www.gnu.org/software/emacs/manual/html_node/emacs/Shell-Prompts.html) to build shells. Both [chatgpt-shell](https://github.com/xenodium/chatgpt-shell) and [dall-e-shell](https://github.com/xenodium/dall-e-shell) are built on top of shell-maker.

![](https://xenodium.github.io/images/chatgpt-shell-repo-splits-up/sofia.gif)

## Enjoying this content? Using one of my Emacs packages?

Help make the work sustainable. Consider [sponsoring](https://github.com/sponsors/xenodium). I'm also building [lmno.lol](https://lmno.lol/). A platform to [drag and drop](https://indieweb.social/@xenodium/112265481282475542) your blog to the web.

# \[2024-10-21 Mon\] Hide another detail
---
id: hide-another-detail
---

It's been 5 years since I talked about [showing/hiding Emacs dired details in style](showhide-emacs-dired-details-in-style/), a short post showcasing [hide-details-mode](https://www.gnu.org/software/emacs/manual/html_node/emacs/Misc-Dired-Features.html) (built-in) and [diredfl](https://github.com/purcell/diredfl) (third-party).

While my dired usage increased over the years, my dired config remained largely unchanged. Today, I'll show a new dired tweak.

As you likely suspect by now, I'm a big fan of [hide-details-mode](https://www.gnu.org/software/emacs/manual/html_node/emacs/Misc-Dired-Features.html). It gives me super clean and minimalistic view of my files.

![](https://xenodium.github.io/images/hide-another-detail/before.png)

If I need more details, it's one toggle away using my trusty C-( binding.

![](https://xenodium.github.io/images/hide-another-detail/toggle-before.gif)

Now this is a super minor thing, but for a little while, I wished I could also hide the current directory's absolute path as part of `hide-details-mode`'s toggling. In the same spirit as other hidden dired details, I rarely need to see the absolute path. And if I did, it'd only be a toggle away.

With that in mind, I set out to bend dired my way. I looked at the `dired-hide-details-mode` built-in code (dired.el) and came across invisibility specs, which I hadn't used before. Dired uses `add-to-invisibility-spec` and `remove-from-invisibility-spec` to show and hide details using the `invisible` property set to `dired-hide-details-information`.

Now that we know what property to set, we need to find the text to apply it to. Dired offers that via `dired-subdir-regexp`. All we need to do is match the regular expression and apply our invisible property to the relevant bounds.

``` {.commonlisp org-language="emacs-lisp" lexical="no"}
(defun hide-dired-details-include-all-subdir-paths ()
  (save-excursion
    (goto-char (point-min))
    (while (re-search-forward dired-subdir-regexp nil t)
      (let* ((match-bounds (cons (match-beginning 1) (match-end 1)))
             (path (file-name-directory (buffer-substring (car match-bounds)
                                                          (cdr match-bounds))))
             (path-start (car match-bounds))
             (path-end (+ (car match-bounds) (length path)))
             (inhibit-read-only t))
        (put-text-property path-start path-end
                           'invisible 'dired-hide-details-information)))))
```

All that's left is for us to add our new function to a hook, and we're good to go.

``` {.commonlisp org-language="emacs-lisp" lexical="no"}
(use-package dired
  :hook ((dired-mode . dired-hide-details-mode)
         (dired-after-readin . hide-dired-details-include-all-subdir-paths)))
```

My Dired window is even cleaner now. The current directory's absolute path is now hidden.

![](https://xenodium.github.io/images/hide-another-detail/after.png)

There may be times we need to peek at the absolute path. We can now toggle hiding this detail just like the others.

![](https://xenodium.github.io/images/hide-another-detail/toggle-after.gif)

## My first Emacs patch

While this is a rather small change, I figured I could use it to get my toes dipped as a first Emacs contribution. I've since reworked the patch to fit into dired.el's code and submitted for review.

I'm happy to report the tiny feature's now merged to master as of [a couple of days ago](https://git.savannah.gnu.org/cgit/emacs.git/commit/?id=7cbca90569472af5643905fca5b7ab2dea67f876). Yay! 🎉

It'll be sometime until the feature makes it to a release, but if you're living on the Emacs master edge, it should be available there. While the feature is disabled by default, it can enabled with:

``` {.commonlisp org-language="emacs-lisp" lexical="no"}
(setq dired-hide-details-hide-absolute-location t)
```

Happy hiding!

## Enjoying this content? Using one of my Emacs packages?

Help make the work sustainable. Consider [sponsoring](https://github.com/sponsors/xenodium). I'm also building [lmno.lol](https://lmno.lol/). A platform to [drag and drop](https://indieweb.social/@xenodium/112265481282475542) your blog to the web.

# \[2024-09-21 Sat\] How I batch apply and save one-liners
---
id: how-i-batch-apply-and-save-one-liners
---

My significant other needed to share proof of address by providing a number of bank statements for a period of time. That's easy enough to download as pdfs from the bank, but statements typically provide more personal information than the recipient requires. For a proof of address, the first page is more than enough.

macOS's Preview app can easily delete pages from a pdf by selecting undesired pages and hitting the delete key. This is fine for one pdf but for a handful of them, I figured there's a command line incantation I could use out there, and indeed there is:

``` {.bash org-language="sh"}
qpdf my.pdf --pages . 1 -- my-one-page.pdf
```

With command in mind, I resorted to my now my typical approach of:

-   Convert to a generic [dwim-shell-command](https://github.com/xenodium/dwim-shell-command).
-   Batch apply.

I could be done at this point, but since I now have the command fresh in mind…

-   Save command for future usage.

So let's get on with it.

## Converting to dwim-shell-command

``` {.bash org-language="sh"}
qpdf '<<f>>' --pages . 1 -- '<<fne>>_1.<<e>>'
```

## Batch apply

Other than show it in action, it may be worth mentioning dwim-shell-command recognizes files in region (in addition to dired's mark of course), so you can just select and apply.

![](https://xenodium.github.io/images/how-i-batch-apply-and-save-one-liners/keep-1-page.gif)

## Save for future usage

Saving these commands for future usage typically consists of merely wrapping in an Emacs command so we can invoke via M-x (and your favorite narrowing framework for that fuzzy quick magic).

``` {.commonlisp org-language="emacs-lisp" lexical="no"}
(defun dwim-shell-commands-keep-pdf-page ()
  "Keep a page from pdf."
  (interactive)
  (let ((page-num (read-number "Keep page number: " 1)))
    (dwim-shell-command-on-marked-files
     "Keep pdf page"
     (format "qpdf '<<f>>' --pages . %d -- '<<fne>>_%d.<<e>>'" page-num page-num)
     :utils "qpdf")))
```

For this instance, there's a tiny bit of additional logic to ask the user which page they'd like to keep.

While there's no way I'll remember `qpdf my.pdf --pages . 1 -- my-one-page.pdf`, I can easily find it in the future by searching with something like `M-x keep page`.

![](https://xenodium.github.io/images/how-i-batch-apply-and-save-one-liners/keep-1-page-command.gif)

## My toolbox

I've saved a bunch of these commands and use many of them regularly. You can find in the [optional component of dwim-shell-command](https://github.com/xenodium/dwim-shell-command?tab=readme-ov-file#my-toolbox).

## Enjoying this content? Using one of my Emacs packages?

Help make the work sustainable. Consider [sponsoring](https://github.com/sponsors/xenodium). I'm also building [lmno.lol](https://lmno.lol/). A platform to [drag and drop](https://indieweb.social/@xenodium/112265481282475542) your blog to the web.

# \[2024-09-19 Thu\] Emacs bubble mode
---
id: emacs-bubble-mode
---

From time to time, I want to grab a source code viewport of sorts and feed to an LLM for questioning. From Emacs, I normally use [chatgpt-shell](https://github.com/xenodium/chatgpt-shell)'s `chatgpt-shell-prompt-compose`, which automatically grabs the active region. This led me to explore a few options to select a region, or maybe even roll my own. I should also mention, these regions don't typically require compilable/complete structures.

In most of these instances, I just reach out to one of my region favourites like [expand-region](https://github.com/magnars/expand-region.el), `mark-defun`, or `mark-whole-buffer`. Alternatively, I navigate to different points using sexp commands like `backward-sexp` and `forward-sexp` (or maybe something like `sp-backward-up-sexp` from [smartparens](https://github.com/Fuco1/smartparens)), using `set-mark-command` in-between to activate the region.

While these commands typically yield balanced expressions, it's often unnecessary for my LLM queries. This led me to [ask folks](https://indieweb.social/@xenodium/113158018599745252) for different ways of selecting regions, which highlighted great package suggestions like [avy](https://github.com/abo-abo/avy), [meow](https://github.com/meow-edit), and [easy-kill](https://github.com/leoliu/easy-kill).

While I've been intrigued by `meow`'s modal editing for some time, I'm not ready for that fair trial jump. Will have to postpone it for a little longer.

`Easy-kill` offers `easy-mark`, in some ways similar to the built-in `mark-sexp`, but with additional marking heuristics and possibly other goodies I missed. At present, I get similar benefits from the likes of `expand-region` and the other sexp helpers.

`Avy`'s `avy-kill-ring-save-region` could work for my purpose, though I wish it left the region active. Maybe that's already possible? I could look into extending `avy`, though [Christian's suggestions](https://mastodon.social/@ctietze/113154167264208507) led me to lean more on visual feedback in my own region-expanding experiments.

The goal was to enable extending regions in both vertical directions by simultaneously adding lines at both ends. Sure, this doesn't guarantee structural completeness, but it may just be enough for my LLM-feeding purpose. Maybe this already exists in the Emacs universe, but hey, it's an excuse to throw some elisp lines together…

Assuming there's an existing active region, expanding in both directions is pretty straightforward.

``` {.commonlisp org-language="emacs-lisp" lexical="no"}
(defun bubble-expand()
  "Expand region."
  (interactive)
  (when (> (point) (mark))
    (exchange-point-and-mark))
  (forward-line -1)
  (exchange-point-and-mark)
  (forward-line 1)
  (exchange-point-and-mark))

(defun bubble-shrink ()
  "Shrink region."
  (interactive)
  (when (< (point) (mark))
    (exchange-point-and-mark))
  (forward-line -1)
  (exchange-point-and-mark)
  (forward-line 1))
```

While I've yet to use this region-expanding approach long enough to validate its usefulness, it sure is fun to play with it.

![](https://xenodium.github.io/images/emacs-bubble-mode/bubble-expand-shrink.gif)

This got me thinking, what other funky things I could do with the region? Could I shift the region selection like a viewport of sorts? As you now expect, the answer in Emacs is almost always of course we can…

``` {.commonlisp org-language="emacs-lisp" lexical="no"}
(defun bubble-shift-up ()
  "Shift the region up by one line."
  (interactive)
  (when (> (point) (mark))
    (exchange-point-and-mark))
  (forward-line -1)
  (forward-line 0)
  (exchange-point-and-mark)
  (forward-line -1)
  (end-of-line)
  (activate-mark)
  (exchange-point-and-mark))

(defun bubble-shift-down ()
  "Shift the region down by one line."
  (interactive)
  (when (> (point) (mark))
    (exchange-point-and-mark))
  (forward-line)
  (forward-line 0)
  (exchange-point-and-mark)
  (forward-line)
  (end-of-line)
  (activate-mark)
  (exchange-point-and-mark))
```

![](https://xenodium.github.io/images/emacs-bubble-mode/bubble-shift.gif)

My friend Vaarnan also suggested looking into UX around providing line count, which is possible by providing a prefix into `bubble-expand-region`.

``` {.commonlisp org-language="emacs-lisp" lexical="no"}
C-5 M-x bubble-expand-region
```

![](https://xenodium.github.io/images/emacs-bubble-mode/bubble-number.gif)

These commands alone aren't as effective unless we have some key-bindings around them. I've tied things up into a minor mode, called… you guessed it: `bubble-mode`. Oooh, a mode, you may say it's now official ;) Well, no. It's still an experiment of sorts and currently lives in [my Emacs config repo](https://github.com/xenodium/dotsies/blob/main/emacs/ar/bubble.el).

The key bindings I've chosen are:

-   `C-c C-w`: Enter bubble-mode.
-   `C-p`: bubble-expand.
-   `C-n`: bubble-shrink.
-   `S-C-p`: bubble-move-up.
-   `S-C-n`: bubble-move-down.
-   `Numbers 1-0`: Expand 1 to 10 lines.
-   `RET`: Exit bubble-mode.

Note: Inspired by expand-region, any other key binding/command automatically exits `bubble-mode`.

`C-c C-w` kinda works for me as `C-c w` is already bound to `expand-region`. Let's see if that sticks, though I may have to give up the `org-refile` binding.

So does it work for my original LLM intent? We shall see, but it seems to so far. You can play with it if you'd like (it's on [github](https://github.com/xenodium/dotsies/blob/main/emacs/ar/bubble.el)). Here's what that flow now looks like:

![](https://xenodium.github.io/images/emacs-bubble-mode/bubble-whats-wrong.gif)

## Enjoying this content? Using one of my Emacs packages?

Help make the work sustainable. Consider [sponsoring](https://github.com/sponsors/xenodium). I'm also building [lmno.lol](https://lmno.lol/). A platform to [drag and drop](https://indieweb.social/@xenodium/112265481282475542) your blog to the web.

# \[2024-09-11 Wed\] Spiffing up those echo messages
---
id: spiffing-up-those-echo-messages
---

Well-ingrained into every Emacs user is the echo area, a one-stop shop to receive any kind of message from the editor, located at the bottom of the frame. Posting messages to this area from elisp couldn't be simpler:

``` {.commonlisp org-language="emacs-lisp" lexical="no"}
(message "Hello world")
```

![](https://xenodium.github.io/images/spiffing-up-those-echo-messages/svg-hello-world.gif)

If we want to get a little fancier, we can propertize the text to add some styling.

``` {.commonlisp org-language="emacs-lisp" lexical="no"}
(message (propertize "hello " 'face '(:foreground "#C3E88D"))
         (propertize "world" 'face '(:foreground "#FF5370")))
```

![](https://xenodium.github.io/images/spiffing-up-those-echo-messages/svg-hello-world-colors.gif)

With this in mind, I set out to add a tiny command to [ready-player](https://github.com/xenodium/ready-player).

I wanted the ability to ask what's on without switching to another buffer. The echo area is perfect for that. It should display track title, artist, and album.

``` {.commonlisp org-language="emacs-lisp" lexical="no"}
(message (concat "Ahead " ;; title
                 (propertize "Wire " 'face '(:foreground "#C3E88D")) ;; artist
                 (propertize "The Ideal Copy" 'face '(:foreground "#FF5370")))) ;; album
```

![](https://xenodium.github.io/images/spiffing-up-those-echo-messages/svg-ready-player-colors.gif)

This kinda works, but I wasn't convinced with the styling. Maybe I need multi-line?

``` {.commonlisp org-language="emacs-lisp" lexical="no"}
(message (concat "Ahead\n" ;; title
                 (propertize "Wire\n" 'face '(:foreground "#C3E88D")) ;; artist
                 (propertize "The Ideal Copy" 'face '(:foreground "#FF5370")))) ;; album
```

![](https://xenodium.github.io/images/spiffing-up-those-echo-messages/svg-ready-player-colors-multiline.gif)

I felt something was missing. If I could just add the album artwork as a thumbnail… The ideal layout would maybe look something like:

    +-------+
    |       | Ahead
    | image | Wire
    |       | The Ideal Copy
    +-------+

While the text-everywhere nature of Emacs buffers has many advantages, building more involved layouts can have its challenges. But hey, for that simple read-only message we're aiming at, we can certainly get creative without too much trouble. You see, Emacs has native svg support, so we can craft our fancy layout in elisp and tell Emacs to render it for us.

While I'm a noob at doing anything in svg from Emacs, adding an image and three labels, really isn't that difficult.

``` {.commonlisp org-language="emacs-lisp" lexical="no"}
(message
 (let* ((image-width 90)
        (image-height 90)
        (text-height 25)
        (svg (svg-create (frame-pixel-width) image-height)))
   (svg-embed svg "path/to/thumbnail.png"
              "image/png" nil
              :x 0 :y 0 :width image-width :height image-height)
   (svg-text svg "Ahead"
             :x (+ image-width 10) :y text-height
             :fill (face-attribute 'default :foreground))
   (svg-text svg "Wire"
             :x (+ image-width 10) :y (* 2 text-height)
             :fill "#C3E88D")
   (svg-text svg "The Ideal Copy" :x (+ image-width 10) :y (* 3 text-height)
             :fill "#FF5370")
   (with-temp-buffer
     (svg-insert-image svg)
     (buffer-string))))
```

The code is fairly self-explanatory. While there may be an even simpler way (please lemme know), I used a temporary buffer to embed the svg in the propertized text prior to feeding to the handy `message` function.

…and with that, we get a richer display of the current track.

![](https://xenodium.github.io/images/spiffing-up-those-echo-messages/svg-ready-player-colors-image.gif)

While I haven't experimented with other ways of creating multi-column layouts in Emacs (including images), [I'd love to know](https://indieweb.social/@xenodium) if there's anything else available besides svg.

## Enjoying these tips? Using one of my Emacs packages?

Help make them sustainable. Consider [supporting](https://github.com/sponsors/xenodium) this work.

# \[2024-09-07 Sat\] Seek and you shall find
---
id: seek-and-you-shall-find
---

A couple of months ago, I [introduced Ready Player Mode](ready-player-mode/), an Emacs major mode used to peek at media files from my beloved text editor. The goal was simple. Treat opening media files like any other file, that is, open and go.

The initial implementation served me well while reviewing lots of tiny audio files I used to practice learning a new language. At this point, I started thinking, could I use ready-player for regular music consumption? The thing is, long ago I had stopped buying music and relied on streamed music from online services. Could I go back to offline?

Dusting off my old media collection brought lots of memories as I rediscovered tunes. Having said that, the ready-player experience wasn't quite cutting it for an extended listening experience. I no longer wanted to occasionally peek at media to learn a language. I wanted to load a full music collection. I wanted random access to everything. I wanted Emacs to remember what I was listening to across sessions… While I did [add some pluggable flows](the-dired-abstraction/), I still needed additional changes to make the experience more pleasant.

While plugging away at my own ready-player's pet peeves, I also collected a handful of feature requests. Let's go over the latest features.

## Seek (f/b binding) - [feature request](https://github.com/xenodium/ready-player/issues/11)

While not a feature I initially thought ranked highly in priority, I now find myself seeking audio files from time to time. Ready Player delegates all playback to the likes of [mpv](https://mpv.io/), [vlc](https://www.videolan.org/vlc/), [mplayer](https://mplayerhq.hu/design7/news.html), and so on… Up until now, interacting with these utilities merely consisted of feeding a media file path on to the respective process.

Command line utilities like `mpv` offer socket communication via `--input-ipc-server` to enable further requests like seeking forward and back. Ready player now supports seeking via mpv. Maybe support for other utilities can be added in the future.

If you're on a recent version of ready-player, seeking is automatically enabled if you've got mpv installed and aren't explicitly customizing `ready-player-open-playback-commands`. The default value takes care of things:

``` {.commonlisp org-language="emacs-lisp" lexical="no"}
(defcustom ready-player-open-playback-commands
  '(("mpv" "--audio-display=no" "--input-ipc-server=<<socket>>")
    ("vlc")
    ("ffplay")
    ("mplayer"))
  "..."
  :type '(repeat (list string))
  :group 'ready-player)
```

![](https://xenodium.github.io/images/seek-and-you-shall-find/seek.webp)

## Pause/resume (SPC binding) - [feature request](https://github.com/xenodium/ready-player/issues/10)

Until now, ready-player could only play and stop, so you always had to start playing tracks from the beginning. With `mpv` ipc support now in place, adding pause/resume was a breeze. Like seek, it should just work for ya if `mpv` is on your system and no explicit customization of `ready-player-open-playback-commands`.

## Repeat current file (r binding) - [feature request](https://github.com/xenodium/ready-player/issues/16)

While repeating current playlist (or directory) was already supported, there was a feature request to enable repeating files. Toggling repeat now cycles through available modes.

![](https://xenodium.github.io/images/seek-and-you-shall-find/repeat.webp)

## Selective players - [feature request](https://github.com/xenodium/ready-player/issues/13)

With ready-player delegating to a single utility for either audio or video playback, folks may have a need to specify different utilities for either of these two. While I'm happy for `mpv` to handle both audio and video, we now have a couple of prepending options.

### Use a predicate function

Prepend each utility with either the built-in `ready-player-is-audio-p` or `ready-player-is-video-p` functions, or maybe create your own predicate helper.

``` {.commonlisp org-language="emacs-lisp" lexical="no"}
(setq ready-player-open-playback-commands
      '((ready-player-is-audio-p "ffplay")
        (ready-player-is-video-p "mpv")))
```

### Use an extension list

In this example, we delegate mp3 and ogg playback to ffplay and everything else to mpv.

``` {.commonlisp org-language="emacs-lisp" lexical="no"}
(setq ready-player-open-playback-commands
      '((("mp3" "ogg") "ffplay")
        ("mpv")))
```

## Autoplay (a binding) - [feature request](https://github.com/xenodium/ready-player/issues/9)

Automatically start playing once file opens. No need for user to explicitly request playback.

## Mark in dired (m binding) - [feature request](https://github.com/xenodium/ready-player/issues/8)

Open a dired buffer and mark the currently played file.

![](https://xenodium.github.io/images/seek-and-you-shall-find/mark.gif)

## M3u playlists - [feature request](https://github.com/xenodium/ready-player/issues/14)

While I talked about how [the dired abstraction](https://lmno.lol/alvaro/the-dired-abstraction) made basic m3u playlist support possible, it wasn't until recently that I included this experiment in the package itself. In addition, .m3u are now recognized by Emacs and automatically open like any other file: find-file, dired, projectile…

## Load recursive directory

With [the dired abstraction](https://lmno.lol/alvaro/the-dired-abstraction) at its core, ready player can load any dired buffer. You could do something like:

1.  `M-x find-dired RET`.
2.  Pick a directory. RET.
3.  Type `"-iname \*.mp3 -o -iname \*.ogg -o -iname \*.m4a"` RET.
4.  `M-x ready-player-load-dired-buffer` RET.

While uber flexible, there's no need to regularly do that, so you can now invoke `M-x ready-player-load-directory` and it will recursively find all media files in it.

## Toggle player view (C-c m m binding)

While we can always get back to the player buffer via our favourite buffer-switching mechanism (I like [ivy](https://github.com/abo-abo/swiper)'s ivy-switch-buffer), we now have `M-x ready-player-view-player` available for quicker toggle.

## Remember session

Playback is now remembered across Emacs sessions. Toggling player view (C-c m m binding) or playback (C-c m SPC binding) starts the last song you were playing on your previous Emacs session.

## Index + searching (/ or C-c m /)

We now have automatic indexing, which enables richer searching across your collection, not to mention that random access I was craving.

![](https://xenodium.github.io/images/seek-and-you-shall-find/search.webp)

## Global bindings

Last but not least, you may have noticed a handful of key bindings throughout the post. Single-character bindings all work within a ready-player buffer. Bindings prefixed `C-c m` are now globally available when `ready-player-mode` is turned on. This can be customized via `ready-player-set-global-bindings`.

## Please help make it all self-sustainable

If you find this package useful or got the features you wanted, please [consider sponsoring the work](https://github.com/sponsors/xenodium). I've left my tech job (maybe a post for another time) and looking to make projects like ready-player self-sustainable.

If you're an iOS/macOS user, you can also [buy my apps](https://apps.apple.com/us/developer/xenodium-ltd/id304568690). Here's another freebie ([macosrec](https://github.com/xenodium/macosrec)) I've put out there, which I [regularly use to capture Emacs demos](https://lmno.lol/alvaro/recordscreenshot-windows-the-lazy-way) for this blog.

You may also enjoy this blog and all the tips I share. Blog posts take time. Consider [sponsoring my blog](https://github.com/sponsors/xenodium).

I've built other Emacs packages you may already use or would like to. Maybe I already built a feature request? Consider [sponsoring](https://github.com/sponsors/xenodium):

-   [chatgpt-shell](https://github.com/xenodium/chatgpt-shell)
-   [dwim-shell-command](https://github.com/xenodium/dwim-shell-command)
-   [sqlite-mode-extras](https://github.com/xenodium/sqlite-mode-extras)
-   [org-block-capf](https://github.com/xenodium/org-block-capf)
-   [company-org-block](https://github.com/xenodium/company-org-block)
-   [ob-swiftui](https://github.com/xenodium/ob-swiftui)

I'm also building [lmno.lol](https://lmno.lol), a new blogging platform, with [drag and drop to the web](https://indieweb.social/@xenodium/112265481282475542). Maybe you want to try that too? [Get in touch](mailto:help/at/lmno.lol).

Thank you!

Álvaro

# \[2024-09-04 Wed\] Anki bookmarks
---
id: anki-bookmarks
---



-   [Adding flashcards to your digital garden (with org-roam and Anki) - doubleloop](https://doubleloop.net/2020/08/02/adding-flashcards-to-your-digital-garden-with-org-roam-and-anki/).
-   [Anki Decks with Orgmode](https://rgoswami.me/posts/anki-decks-orgmode/).
-   [anki-editor: Emacs minor mode for making Anki cards with Org](https://github.com/louietan/anki-editor).
-   [emacs-od2ae: Convert org-drill entries to anki-editor](https://github.com/telotortium/emacs-od2ae).
-   [GitHub - l3kn/org-fc: Spaced Repetition System for Emacs org-mode](https://github.com/l3kn/org-fc).
-   [org-anki: Sync org notes to Anki via AnkiConnect](https://github.com/eyeinsky/org-anki/).
-   [org-drill.el - flashcards and spaced repetition for org-mode](https://orgmode.org/worg/org-contrib/org-drill.html).
-   [org-fc: Spaced Repetition System for Emacs org-mode](https://github.com/l3kn/org-fc).
-   [Power up Anki with Emacs, Org mode, anki-editor and more](https://yiufung.net/post/anki-org/).

# \[2024-08-23 Fri\] `*scratch*` v1.3 released
---
id: scratch-v1-3-released
---

It's been some time since the last release of `*scratch*` for iOS. If you haven't heard about `*scratch*`, it's a tiny app I built (part of [the org bundle](https://lmno.lol/alvaro/the-org-bundle)).

`*scratch*` enables writing things on the go *as quickly as possible*.

-   No need to create a new note.
-   No need to bring keyboard up.
-   **Just open and write**.
-   Bonus: Basic Emacs org markup ;-)

v1.3 (and yesterday's v1.2) are now available on the App Store. They are minor releases bringing:

-   A monospaced font.
-   A layout fix for "Settings \> Display & Brightness \> Display Zoom \> Larger Text (often affecting iPhones with smaller screens).
-   A menu fix.

![](https://xenodium.github.io/images/scratch-v1-3-released/scratch.webp)

Are you a fan of this app? Want to [rate on the App Store](https://apps.apple.com/app/id1671420139?action=write-review)? Please help me spread the word. Tell your friends.

<br/>
<br/>
<center>
  <a href="https://apps.apple.com/app/id1671420139">
    <img src="https://xenodium.github.io/images/flat-habits-for-ios/download-on-app-store.png" alt="download-on-app-store.png" width="180px">
  </a>
</center>

# \[2024-08-16 Fri\] The dired abstraction
---
id: the-dired-abstraction
---

I recently [wrote about image-mode's next/previous item navigation](https://lmno.lol/alvaro/ready-player-mode), a feature I wanted to bring to [ready player mode](https://github.com/xenodium/ready-player).

I was curious to see how `image-mode` resolved next and previous files, so I checked the associated keybinding (n) via [helpful-key](https://github.com/Wilfred/helpful) (my preferred alternative to [describe-key](https://www.gnu.org/software/emacs/manual/html_node/emacs/Key-Help.html)), and landed on `image-next-file`. While this function only takes care of high-level routing, it led me to `image-mode--next-file`, which is where the actual next/previous file resolution happens:

``` {.commonlisp org-language="emacs-lisp" lexical="no"}
(defun image-mode--next-file (file n)
  "Go to the next image file in the parent buffer of FILE.
This is typically a Dired buffer, but may also be a tar/archive buffer.
Return the next image file from that buffer.
If N is negative, go to the previous file."
  ...)
```

While `image-mode--next-file`'s implementation details are worth [checking out](https://github.com/emacs-mirror/emacs/blob/e4d22abcab60ead179e7d114faa4c2def559cfbb/lisp/image-mode.el#L1264), its docstring already highlights the bit I found most interesting: [dired](https://www.gnu.org/software/emacs/manual/html_node/emacs/Dired.html)'s involvement in the mix. I'm not sure why I initially found `dired` usage surprising. Buffers are Emacs's backbone. They are the fundamental structures holding the content we work with, whether it’s editing text, reading logs, displaying information, and many others including file management… Dired specializes buffers for this last purpose. While `dired` itself is a powerhouse, at its core it's just an ordered list of files.

Given a location within a `dired` buffer, we can use its helpers to find next and previous files. Like `image-mode`, `ready-player` now mirrors this approach (minus tar/archive handling). This got me thinking more about the `dired` abstraction… If it quacks like a duck, and walks like a duck, then it's probably *errrm* a `dired` buffer. What I actually mean is that associating a `dired` buffer to a `ready-player` buffer effectively attaches a playlist of sorts. It doesn't quite matter how this `dired` buffer was constructed. What's important is that it's recognized as a `dired` buffer, so all relevant helpers remain useful.

With `dired` buffers acting as media playlists, we can easily create a directory playlist by merely pointing `dired` to the current directory. This is the default behaviour in `ready-player`. When you open a media file, we attach a `dired` buffer pointing to the current directory. Play next or previous item, and you're effectively moving up and down the associated `dired` buffer.

Things get more interesting when we craft `dired` buffers in more creative ways than just supplying a path to a directory. One of my favourite commands is [find-dired](https://www.gnu.org/software/emacs/manual/html_node/emacs/Dired-and-Find.html). It runs the [find](https://www.man7.org/linux/man-pages/man1/find.1.html) utility, crafting a `dired` buffer with its results.

![](https://xenodium.github.io/images/the-dired-abstraction/find.png)

For kicks, I added a `ready-player-load-dired-playback-buffer` command to `ready-player`, so we can just load any `dired` buffer, including our newly generated one, courtesy of `find-dired`.

With this generated buffer loaded and `ready-player` random playback enabled, we get to see our lucky jumps across find results.

![](https://xenodium.github.io/images/the-dired-abstraction/find-random.gif)

At this point I thought "this is prolly as far as I'll take things"… `ready-player` was born to address quick access to media, typically from `dired` itself. For deep playlist handling, there are many other Emacs media players.

The thing is, with my newly found reusable `dired` abstraction, a rough [m3u](https://en.wikipedia.org/wiki/M3U) playlist experiment didn't seem that far-fetched at all. I'd need to read an `m3u` file and generate a `dired` buffer. I knew nothing about m3u's, other than being text files including media paths, along with optional metadata. I figured *minimal* m3u reading support shouldn't be too difficult.

If we are to create a playlist including the first three album tracks from the artist above, it'd look something like this:

    #EXTM3U

    #EXTINF:-1,George Benson - Dance
    /absolute/path/to/Music/George Benson/Body Talk/01 Dance.mp3
    #EXTINF:-1,George Benson - When Love Has Grown
    /absolute/path/to/Music/George Benson/Body Talk/02 When Love Has Grown.mp3
    #EXTINF:-1,George Benson - Plum
    /absolute/path/to/Music/George Benson/Body Talk/03 Plum.mp3

    #EXTINF:-1,George Benson - So What
    /absolute/path/to/Music/George Benson/Original Album Classics/1-01 So What.mp3
    #EXTINF:-1,George Benson - The Gentle Rain
    /absolute/path/to/Music/George Benson/Original Album Classics/1-02 The Gentle Rain (From the Film, _The Gentle Rain_).mp3
    #EXTINF:-1,George Benson - All Clear
    /absolute/path/to/Music/George Benson/Original Album Classics/1-03 All Clear.mp3

    #EXTINF:-1,George Benson - Footin' It
    /absolute/path/to/Music/George Benson/The Shape Of Things To Come/01 Footin' It.mp3
    #EXTINF:-1,George Benson - Face It Boy It's Over
    /absolute/path/to/Music/George Benson/The Shape Of Things To Come/02 Face It Boy It's Over.mp3
    #EXTINF:-1,George Benson - Shape Of Things To Come
    /absolute/path/to/Music/George Benson/The Shape Of Things To Come/03 Shape Of Things To Come.mp3

A crude function to extract file paths into a list would look something like the following:

``` {.commonlisp org-language="emacs-lisp"}
(defun ready-player--media-at-m3u-file (m3u-path)
  "Read m3u playlist at M3U-PATH and return files."
  (with-temp-buffer
    (insert-file-contents m3u-path)
    (let ((files))
      (while (re-search-forward
              (rx bol (not (any "#" space))
                  (zero-or-more (not (any "\n")))
                  eol) nil t)
        (when (file-exists-p (match-string 0))
          (push (match-string 0) files)))
      (nreverse files))))
```

Feeding our m3u file to our new function conveniently returns a list of found files:

``` {.commonlisp org-language="emacs-lisp"}
("/absolute/path/to/Music/George Benson/Body Talk/01 Dance.mp3"
 "/absolute/path/to/Music/George Benson/Body Talk/02 When Love Has Grown.mp3"
 "/absolute/path/to/Music/George Benson/Body Talk/03 Plum.mp3"
 "/absolute/path/to/Music/George Benson/Original Album Classics/1-01 So What.mp3"
 "/absolute/path/to/Music/George Benson/Original Album Classics/1-02 The Gentle Rain (From the Film, _The Gentle Rain_).mp3"
 "/absolute/path/to/Music/George Benson/Original Album Classics/1-03 All Clear.mp3"
 "/absolute/path/to/Music/George Benson/The Shape Of Things To Come/01 Footin' It.mp3"
 "/absolute/path/to/Music/George Benson/The Shape Of Things To Come/02 Face It Boy It's Over.mp3"
 "/absolute/path/to/Music/George Benson/The Shape Of Things To Come/03 Shape Of Things To Come.mp3")
```

Next we need to create a dired buffer from a list of files. This is where I thought things would get trickier, but I was pleasantly surprised.

The `dired` docstring had the answer:

``` {.commonlisp org-language="emacs-lisp" lexical="no"}
(defun dired (dirname &optional switches)
  "...

If DIRNAME is a cons, its first element is taken as the directory name
and the rest as an explicit list of files to make directory entries for.
In this case, SWITCHES are applied to each of the files separately, and
therefore switches that control the order of the files in the produced
listing have no effect.

..."
  ...)
```

With that in mind, this is all it takes:

``` {.commonlisp org-language="emacs-lisp" lexical="no"}
(let ((default-directory "/absolute/path/to/Music/George Benson"))
  (dired '("*My fancy m3u list*"
           "Body Talk/01 Dance.mp3"
           "Body Talk/02 When Love Has Grown.mp3"
           "Body Talk/03 Plum.mp3"
           "Original Album Classics/1-01 So What.mp3"
           "Original Album Classics/1-02 The Gentle Rain (From the Film, _The Gentle Rain_).mp3"
           "Original Album Classics/1-03 All Clear.mp3"
           "The Shape Of Things To Come/01 Footin' It.mp3"
           "The Shape Of Things To Come/02 Face It Boy It's Over.mp3"
           "The Shape Of Things To Come/03 Shape Of Things To Come.mp3")))
```

Here's the `dired` buffer to prove it:

![](https://xenodium.github.io/images/the-dired-abstraction/playlist.png)

We now have all the pieces. We can wire them up in a `ready-player-load-m3u-playlist` function.

From the previous snippet, you'd notice all file paths are relative to default-directory. While in the following snippet I use `try-completion` to find the longest common substring amongst the paths, I wonder if there's a more appropriate built-in function for this? [I'd love to hear](https://indieweb.social/@xenodium).

``` {.commonlisp org-language="emacs-lisp"}
(defun ready-player-load-m3u-playlist ()
  "Load an .m3u playlist."
  (interactive)
  (let* ((m3u-path (read-file-name "find m3u: " nil nil t nil
                                   (lambda (name)
                                     (or (string-match "\\.m3u\\'" name)
                                         (file-directory-p name)))))
         (media-files (if (string-match "\\.m3u\\'" m3u-path)
                          (ready-player--media-at-m3u-file m3u-path)
                        (error "Not a .m3u file")))
         (default-directory (file-name-directory
                             (try-completion "" media-files)))
         (m3u-fname (file-name-nondirectory m3u-path))
         (dired-buffer-name (format "*%s*" m3u-fname))
         (dired-buffer (dired (append (list dired-buffer-name)
                                      (mapcar (lambda (path)
                                                (file-relative-name path default-directory))
                                              media-files)))))
    (ready-player-load-dired-playback-buffer dired-buffer)))
```

We're good to go now! Invoking `M-x ready-player-load-m3u-playlist` enables us to load our `m3u` playlist, automatically opening the first media file, and also navigate each song in the list one by one.

![](https://xenodium.github.io/images/the-dired-abstraction/benson.gif)

This was a really fun experiment. While `dired` is often used to manage files within a directory, its magic also extends to `dired` buffers crafted in more creative ways. `find-dired` and `find-grep-dired` are my two favourite built-ins. Are there other ones you like? [Do tell](https://indieweb.social/@xenodium).

Not long ago, I added `ready-player-load-dired-playback-buffer` to ready-player, but `ready-player-load-m3u-playlist` remains a local experiment (for now anyway). Let's see ;-)

## Unrelated - Want your own blog?

Like this blog? Want to start a blog? Run your blog off a single file. Write from the comfort of your favourite text editor and [drag and drop to the web](https://indieweb.social/@xenodium/112265481282475542). I'm launching a blogging service at [lmno.lol](https://lmno.lol). Looking for early adopters. [Get in touch](https://indieweb.social/@xenodium).

# \[2024-08-01 Thu\] Ctrl-n/p everywhere. Balance restored.
---
id: ctrl-np-everywhere-balance-restored
---

For some years now, I've enjoyed [macOS Ctrl-n/p movement everywhere](https://lmno.lol/alvaro/improved-ctrl-p-ctrl-n-macos-movement). I sometimes forget I need [Karabiner Elements](https://karabiner-elements.pqrs.org/) to reach certain macOS corners.

macOS supports many Emacs bindings (out of the box). Ctrl-n and Ctrl-p are some of my favourites. Not only can I use these to move the cursor up and down while editing text, but in many cases, for list selections too. Out of the box, list selection, in particular, is more miss than hit. [Spotlight](https://support.apple.com/en-gb/guide/mac-help/mchlp1008/mac) and web drop boxes are the biggest pet peeves. Without remapping, vertical movement can only be achieved via arrow keys.

I had a sudden reminder recently when Spotlight's Ctrl-p/n didn't just work. I wanted to launch Firefox Developer Edition, the second result. Ctrl-n did nothing! The horror!

Turns out, I had a tiny misconfiguration, possibly as I recently switched to using my keyboard via Bluetooth? I needed "Modify events" set for my keyboard.

![](https://xenodium.github.io/images/ctrl-np-everywhere-balance-restored/modify_events.png)

After setting "Modify events" for my external keyboard, my beloved key bindings started working again. Balance restored.

![](https://xenodium.github.io/images/ctrl-np-everywhere-balance-restored/spotlight-ctrl-n.webp)

## Unrelated - Want your own blog?

Like this blog? Want to start a blog? Run your blog off a single file. Write from the comfort of your favourite text editor and [drag and drop to the web](https://indieweb.social/@xenodium/112265481282475542). I'm launching a blogging service at [lmno.lol](https://lmno.lol). Looking for early adopters. [Get in touch](https://indieweb.social/@xenodium).

# \[2024-07-25 Thu\] Emacs macOS native emoji picker (revisited)
---
id: emacs-macos-native-emoji-picker-revisited
---

## Update: Doh! I was wrong. There's a better way.

So, I totally missed the macOS native emoji picker is actually supported out of the box 😭. Thanks to redditor [u/hrabannixlisp](https://www.reddit.com/user/hrabannixlisp/) who [pointed me in the right direction](https://www.reddit.com/r/emacs/comments/1ec5t4j/comment/ley1j59).

`ns-do-show-character-palette` is bound to `C-s-SPC` by default, which didn't work for me as I use `(setq mac-command-modifier 'meta)`, that is, ⌘ as meta modifier.

While I won't be giving up `(setq mac-command-modifier 'meta)`, I can certainly use `ns-do-show-character-palette` via `M-x` or a different binding. Thank you `u/hrabannixlisp`!

## Read on for how I went about it the long convoluted way 🤷‍♂️

A couple of years ago, I was delighted to discover [a macOS freebie for us Emacs users](https://lmno.lol/alvaro/emacs-freebie-macos-emoji-picker). Newer Macbook models started shipping with a globe/🌐 key, which summons the macOS native emoji picker. Pressing this key in Emacs works as you'd expect (no config required 🎉).

While I seldom use emojis, the globe key worked great for me until I started using an external keyboard, which didn't have this magical key. The potential solutions I came across suggest either reprogramming the keyboard or using the likes of [Karabiner-Elements](https://karabiner-elements.pqrs.org/) to map other keys to an alternate shortcut: `Ctrl-⌘-SPC`. As far as I can tell, this is the only other available shortcut (please reach out if otherwise). Not a great option (it conflicts with Emacs's `mark-sexp`). Not that I'd be super keen to lose this mark command, but even unbinding doesn't seem of much help.

While we have Emacs packages available for different emoji-picking experiences, I was keen on maintaining that native experience I enjoyed before. I nearly gave up on the matter until I remembered we have at least one more tool in the Emacs toolbox: [dynamic modules](https://www.gnu.org/software/emacs/manual/html_node/elisp/Dynamic-Modules.html). Thanks to Valeriy Savchenko's [emacs-swift-module](https://github.com/SavchenkoValeriy/emacs-swift-module), we can leverage Swift to integrate native macOS experiences.

With that in mind, I set out to find the relevant macOS API, which turned out to be a lovely one-liner:

``` swift
NSApp.orderFrontCharacterPalette(nil)
```

Let's bring it into Emacs via `emacs-swift-module`'s infrastructure:

``` swift
try env.defun(
  "macos-module--show-emoji-picker",
  with: "Show emoji picker (macOS module implementation)."
) { (env: Environment) in
  NSApp.orderFrontCharacterPalette(nil)
}
```

In theory, this is all we need. We can `M-x eval-expression` `(macos-module--show-emoji-picker)` and the picker simply pops up. I haven't worked out how define an interactive command from `emacs-swift-module` just yet, so for now I'll just wrap with a little elisp:

``` {.commonlisp org-language="emacs-lisp" lexical="no"}
(defun macos-show-emoji-picker ()
  "Show macOS emoji picker."
  (interactive)
  (macos-module--show-emoji-picker))
```

And with that, we got our native macoOS emoji picker back at our fingertips:

![](https://xenodium.github.io/images/emacs-macos-native-emoji-picker-revisited/hearts3.webp)

While the dedicated globe key *just worked* without configuration, it required newer hardware. This new approach works on older Macbooks too. Since it's an interactive command, you can optionally bind to your preferred keys.

Having said all that, you may have noticed a brief lag during insertion. I haven't worked out the source, but since I rarely use emojis, this will have to do for now. If you have a better macOS alternative working on external keyboards, [I'd love to hear about it](https://indieweb.social/@xenodium)!

I've added `macos-show-emoji-picker` to `EmacsMacOSModule`, a tiny repo I've used to experiment with [emacs-swift-module](https://github.com/SavchenkoValeriy/emacs-swift-module). You can find `EmacsMacOSModule` on [GitHub](https://github.com/xenodium/EmacsMacOSModule).

## Unrelated - Want your own blog?

Like this blog? Want to start a blog? Run your blog off a single file. Write from the comfort of your favourite text editor and [drag and drop to the web](https://indieweb.social/@xenodium/112265481282475542). I'm launching a blogging service at [lmno.lol](https://lmno.lol). Looking for early adopters. [Get in touch](https://indieweb.social/@xenodium).

# \[2024-07-24 Wed\] Fresh Eyes 1.7 released
---
id: fresh-eyes-17-released
---

Back in April, [I introduced Fresh Eyes](fresh-eyes-20-20-20-for-macos): a tiny macOS utility helping me take care of my eyes.

I spend a bunch of time in front of a computer screen and [Fresh Eyes](https://apps.apple.com/us/app/fresh-eyes/id6480411697) has been helping me stick with the often recommended [20-20-20 rule](https://en.wikipedia.org/wiki/Computer_vision_syndrome).

![](https://xenodium.github.io/images/fresh-eyes-17-released/1.7.webp)

`Fresh Eyes` 1.7 ships a handful of improvements suggested by users:

-   Postpone Fresh Eyes for 1 hour, 2 hours, 3 hours, or until the next day.
-   Revamped notification.
-   Revamped countdown screen.
-   Reorganized menu.
-   New keyboard shortcuts.
-   Fresh Eyes is now translated to German 🇩🇪🇩🇪🇩🇪.

One-time purchase; [no]{.underline} subscriptions, [no]{.underline} additional payments, [no]{.underline} ads.

## Want to support [my blogging](https://lmno.lol/alvaro) and other [open source work](https://github.com/xenodium/)?

Buy this app (or the [others](https://apps.apple.com/us/developer/xenodium-ltd/id304568690)) ;) Tell your friends!

There's always [GitHub sponsoring](https://github.com/sponsors/xenodium) if your prefer.

<center>
  <a href="https://apps.apple.com/app/id6480411697">
    <img src="https://xenodium.github.io/images/fresh-eyes-now-on-the-app-store/fresh_eyes_icon.png" alt="Fresh eyes icon" width="100px">
  </a>
  <br/>
  <br/>
  <a href="https://apps.apple.com/app/id6480411697">
    <img src="https://xenodium.github.io/images/flat-habits-for-ios/download-on-app-store.png" alt="download-on-app-store.png" width="180px">
  </a>
</center>

## Unrelated - Want your own blog?

Like this blog? Want to start a blog? Run your blog off a single file. Write from the comfort of your favourite text editor and [drag and drop to the web](https://indieweb.social/@xenodium/112265481282475542). I'm launching a blogging service at [lmno.lol](https://lmno.lol). Looking for early adopters. [Get in touch](https://indieweb.social/@xenodium).

# \[2024-07-21 Sun\] Ready Player Mode now on MELPA
---
id: ready-player-mode-now-on-melpa
---

A few weeks ago, I [announced Ready Player Mode](https://lmno.lol/alvaro/ready-player-mode)'s availability on [GitHub](https://github.com/xenodium/ready-player). As of today, you can [find it on MELPA](https://melpa.org/#/ready-player).

Ready Player Mode is a lightweight major mode to open media (audio/video) files in an Emacs buffer.

Install, enable via `M-x ready-player-mode` and you should be good to go.

Open and preview media files (audio + video) like other files. If in repeat mode, ready-player attempts to play other files in the current directory. Track playback from the corresponding `dired` buffer.

![](https://xenodium.github.io/images/ready-player-mode-now-on-melpa/ready-player.gif)

Playback is handled by your favourite command line utility. `ready-player-mode` will try to use either [mpv](https://mpv.io/), [vlc](https://www.videolan.org/vlc/), [ffplay](https://ffmpeg.org/ffplay.html), or [mplayer](https://mplayerhq.hu/design7/news.html) (in that order), but you can customize that. I'd love to hear of other defaults worth considering.

Bonus rendering includes media thumbnails and metadata, if either [ffmpegthumbnailer](https://github.com/dirkvdb/ffmpegthumbnailer) or [ffmpeg](https://ffmpeg.org/) are found.

## Unrelated - Want your own blog?

Like this blog? Want to start a blog? Run your blog off a single file. Write from the comfort of your favourite text editor and [drag and drop to the web](https://indieweb.social/@xenodium/112265481282475542). I'm launching a blogging service at [lmno.lol](https://lmno.lol). Looking for early adopters. [Get in touch](https://indieweb.social/@xenodium).

# \[2024-07-17 Wed\] OCR those buffers
---
id: ocr-those-buffers
---

I've written about [macosrec](https://github.com/xenodium/macosrec) before. A tiny macOS command line utility I built to [take screenshots or videos of my macOS windows](https://lmno.lol/alvaro/recordscreenshot-windows-the-lazy-way). Sure, there are a gazillion utilities out there, but I wanted my own, so I could bend and integrate with Emacs buffers as needed.

If you've seen me post a screenshot or gif after April 2023, it was likely taken with `macosrec`.

As of `macosrec` v0.7.3, [OCR](https://en.wikipedia.org/wiki/Optical_character_recognition) was added to the mix. I've also added a couple of [dwim-shell-commands](https://github.com/xenodium/dwim-shell-command) (`dwim-shell-commands-macos-ocr-text-from-desktop-region` and `dwim-shell-commands-macos-ocr-text-from-image`), so I can do things like:

## OCR region

Use the mouse to select a region to OCR.

![](https://xenodium.github.io/images/ocr-those-buffers/ocr-region.gif)

\*This gif area recording was captured via macOS's built-in `screencapture`.

## OCR dired files

Selecting any file (or files) in dired OCRs the whole lot.

![](https://xenodium.github.io/images/ocr-those-buffers/ocr-files.gif)

\*This gif window recording was captured via [macosrec](https://github.com/xenodium/macosrec).

Invoking `dwim-shell-commands-macos-ocr-text-from-image` from the current image buffer does the job also.

## What about non-macOS users?

The same approach can be used with any other OCR command line tool. `dwim-shell-command` includes `dwim-shell-commands-tesseract-ocr-text-from-image`, which uses [tesseract](https://github.com/tesseract-ocr/tessdoc).

While I've had more reliable results via `macosrec` (using macOS's Vision API), I'm sure there are other great alternatives on linux. If you know of one, [I'd love to hear](https://indieweb.social/@xenodium).

## Available on github

Both [macosrec](https://github.com/xenodium/macosrec) and [dwim-shell-command](https://github.com/xenodium/dwim-shell-command) are on GitHub and installable via `brew install xenodium/macosrec/macosrec` and [MELPA](https://melpa.org/#/dwim-shell-command) respectively.

## Unrelated - Want your own blog?

Like this blog? Want to start a blog? Run your blog off a single file. Write from the comfort of Emacs and [drag and drop to the web](https://indieweb.social/@xenodium/112265481282475542). I'm launching a blogging service at [lmno.lol](https://lmno.lol). Looking for early adopters. [Get in touch](https://indieweb.social/@xenodium).

# \[2024-07-14 Sun\] It's all up for grabs, compound with glue
---
id: its-all-up-for-grabs-and-it-compounds
---

I've written before, once you learn a little [elisp](https://en.wikipedia.org/wiki/Emacs_Lisp), [Emacs](https://www.gnu.org/software/emacs/) becomes this hyper malleable editor/platform. A live playground of sorts, where almost everything is up for grabs. You can inspect and tweak behaviour of just about anything to your liking.

While the compounding benefits of using your favourite Emacs utilities are evident over time, learning elisp takes the compounding effect to another level. It empowers you to have those aha moments like "if I could just wire this awesome utility with that other one, it'd be perfect for me" and enable you to act on it.

Take, for example, [symbol-overlay](https://github.com/wolray/symbol-overlay) and [multiple-cursors](https://github.com/magnars/multiple-cursors.el). Two Emacs packages I've been using for years. The first one is a feature you've likely experienced on your favourite IDE or editor without thinking too much about it. Placing your editor cursor on a variable automatically highlights its usages. It's one of those lovely features with zero learning demands.

![](https://xenodium.github.io/images/its-all-up-for-grabs-and-it-compounds/overlay-symbol.gif)

The second utility, [multiple-cursors](https://github.com/magnars/multiple-cursors.el), does demand some learning but can be so fun to use once you get the hang of it. Below is a little multiple cursor demo I used recently [in a reddit comment](https://www.reddit.com/r/emacs/comments/1dyn3zy/comment/lcbi10o/?utm_source=share&utm_medium=web3x&utm_name=web3xcss&utm_term=1&utm_content=share_button), but you really should check out [Emacs Rocks! Episode 13: multiple-cursors](https://emacsrocks.com/e13.html) (stick around for the ending).

![](https://xenodium.github.io/images/its-all-up-for-grabs-and-it-compounds/mc_x2.gif)

So where am I going with this? While [symbol-overlay](https://github.com/wolray/symbol-overlay) offers a mechanism to rename symbols via `symbol-overlay-rename`, I prefer [multiple-cursors](https://github.com/magnars/multiple-cursors.el) for this kind of thing… "if I could just get `symbol-overlay` to tell `multiple-cursors` where to place my cursors, it'd be just perfect for me".

I've been wanting this tweak for some time. Today's the day I finally act on it. I had no idea how to go about it, but opening `symbol-overlay.el` (via `M-x find-library symbol-overlay`) and browsing through all functions (via imenu) yields the first piece I needed: `symbol-overlay-get-list`.

![](https://xenodium.github.io/images/its-all-up-for-grabs-and-it-compounds/imenu.png)

``` {.commonlisp org-language="emacs-lisp" lexical="no"}
(defun symbol-overlay-get-list (dir &optional symbol exclude)
  "Get all highlighted overlays in the buffer.
If SYMBOL is non-nil, get the overlays that belong to it.
DIR is an integer.
If EXCLUDE is non-nil, get all overlays excluding those belong to SYMBOL."
  ...)
```

Let's take `symbol-overlay-get-list` for a spin, courtesy of `M-x eval-expression`, and see what we get out of it:

![](https://xenodium.github.io/images/its-all-up-for-grabs-and-it-compounds/eval.gif)

With a list of overlays, we now know where to tell `multiple-cursors` to do its thing. For the second piece, we needed to peek at any of the `multiple-cursors` commands I already use. I happen to pick `mc/mark-all-like-this` to examine what's under the hood.

``` {.commonlisp org-language="emacs-lisp" lexical="no"}
(defun mc/mark-all-like-this ()
  "Find and mark all the parts of the buffer matching the currently active region"
  (interactive)
  (unless (region-active-p)
    (error "Mark a region to match first."))
  (mc/remove-fake-cursors)
  (let ((master (point))
        (case-fold-search nil)
        (point-first (< (point) (mark)))
        (re (regexp-opt (mc/region-strings) mc/enclose-search-term)))
    (mc/save-excursion
     (goto-char 0)
     (while (search-forward-regexp re nil t)
       (push-mark (match-beginning 0))
       (when point-first (exchange-point-and-mark))
       (unless (= master (point))
         (mc/create-fake-cursor-at-point))
       (when point-first (exchange-point-and-mark)))))
  (if (> (mc/num-cursors) 1)
      (multiple-cursors-mode 1)
    (mc/disable-multiple-cursors-mode)))
```

The star of the `mc/mark-all-like-this` attraction is `mc/create-fake-cursor-at-point`, used to create each cursor. If we can just iterate over the overlays, we'd be able to create a fake cursor per overlay. There's some additional logic needed to ensure all fake cursors are placed in the same relative position within symbol (using an offset). Finally, we need to enable `multiple-cursors-mode`.

We put it all together in `ar/mc-mark-all-symbol-overlays`:

``` {.commonlisp org-language="emacs-lisp" lexical="no"}
(defun ar/mc-mark-all-symbol-overlays ()
  "Mark all symbol overlays using multiple cursors."
  (interactive)
  (mc/remove-fake-cursors)
  (when-let* ((overlays (symbol-overlay-get-list 0))
              (point (point))
              (point-overlay (seq-find
                              (lambda (overlay)
                                (and (<= (overlay-start overlay) point)
                                     (<= point (overlay-end overlay))))
                              overlays))
              (offset (- point (overlay-start point-overlay))))
    (setq deactivate-mark t)
    (mapc (lambda (overlay)
            (unless (eq overlay point-overlay)
              (mc/save-excursion
               (goto-char (+ (overlay-start overlay) offset))
               (mc/create-fake-cursor-at-point))))
          overlays)
    (mc/maybe-multiple-cursors-mode)))
```

and with that, you finally get to see it all in action…

![](https://xenodium.github.io/images/its-all-up-for-grabs-and-it-compounds/symbol-overlay-meets-multiple-cursors.gif)

## Unrelated - Want your own blog?

Like this blog? Want to start a blog? Run your blog off a single file. Write from the comfort of Emacs (or your favourite text editor) and [drag and drop to the web](https://indieweb.social/@xenodium/112265481282475542). I'm launching a blogging service at [lmno.lol](https://lmno.lol). Looking for early adopters. [Get in touch](https://indieweb.social/@xenodium).

# \[2024-07-03 Wed\] Ready Player Mode
---
id: ready-player-mode
---

![](https://xenodium.github.io/images/ready-player-mode/meme.gif)

As an Emacs user, I eventually made the leap over to [dired](https://www.gnu.org/software/emacs/manual/html_node/emacs/Dired.html) as my file manager of choice. Dired has [magical things like wdired](emacs-git-rename-courtesy-of-dired/). But this post isn't so much about dired and more about the occasional need to peek at media files (images, audio, and video) from Emacs (including dired).

To view images in Emacs, there's [image mode](https://www.gnu.org/software/emacs/manual/html_node/emacs/Image-Mode.html), a fantastic major mode for taking a quick look without leaving your editor. Image mode strikes a great balance. You can get in quickly and out. The `q` keyboard binding is fabulous for bailing out. While viewing an image, you may quickly open the previous/next one by using `n` and `p` keyboard binding. For me, this is just about all I need within my text editor. For anything else, I resort to my favorite image viewing app (macOS's Preview).

For audio and video, we aren't as lucky with Emacs built-in features (even for a quick peek). While Emacs faithfully opens the files, it's not realistically practical for my typical needs.

![](https://xenodium.github.io/images/ready-player-mode/no-handling.png)

There's a convenient package aptly named [openwith](https://github.com/jpkotta/openwith), which automatically opens specific files in an external app. This isn't just for media files, but anything really. It works well with office docs, for example. While I've used it for quite some time, I found always bouncing to an external app for peeking at audio/video somewhat suboptimal.

While a [reddit post](https://www.reddit.com/r/emacs/comments/1dtnjy7/is_there_imageview_but_for_audio) yielded some handy options, none were in the same spirit as image mode. Having said that, I did come across [mediainfo-mode](https://github.com/xFA25E/mediainfo-mode) on my search, which is pretty neat for viewing media metadata quickly. Bonus points for `q` keyboard binding to exit and `mediainfo-mode-open` command to open with an external app. There may be other packages out there (I'd love to hear about them), though most seemed to focus on listening to music (and playlist management), which is a different flow from what I'm after.

## Ready player mode enters the chat

With all that, I had no choice (I kid of course) but to go and throw some lines of elisp together and see if I could get to my ideal media experience, and so [ready player mode](https://github.com/xenodium/ready-player) was born…

![](https://xenodium.github.io/images/ready-player-mode/ready-player.png)

![](https://xenodium.github.io/images/ready-player-mode/video-player.png)

As core features, `ready-player-mode` has two buttons: one to play from within Emacs and one to open media in the preferred external app. You can `TAB` your way to the buttons. `RET` or `click` actions the buttons, in addition to the `SPC` keyboard binding to toggle playback.

Like image mode, `ready-player-mode` offers `n/p` navigation to open the next/previous media file in the current directory.

`ready-player-mode` attempts to display basic metadata if possible, courtesy of `ffprobe` and `ffmpeg`. You'll need these installed on your system if you want the optional metadata.

Playback is handled by your favourite command line utility. `ready-player-mode` will try to use either [mpv](https://mpv.io/), [vlc](https://www.videolan.org/vlc/), [ffplay](https://ffmpeg.org/ffplay.html), or [mplayer](https://mplayerhq.hu/design7/news.html) (in that order), but you can customize that.

`ready-player-mode` is available on [GitHub](https://github.com/xenodium/ready-player) if you're keen to check it out. Keep in mind this is a brand new package (a day old!), so it may need some improvements. If you do give it a try, [I'd love to hear](https://indieweb.social/@xenodium) how you got on. I've only tested on macOS so far.

## Unrelated - Want your own blog?

Like this blog? Want to start a blog? Run your blog off a single file. Write from the comfort of Emacs and [drag and drop to the web](https://indieweb.social/@xenodium/112265481282475542). I'm launching a blogging service at [lmno.lol](https://lmno.lol). Looking for early adopters. [Get in touch](https://indieweb.social/@xenodium).

# \[2024-06-07 Fri\] Hey mouse, don't mess with my Emacs font size
---
id: hey-mouse-dont-mess-with-my-emacs-font-size
---

While most of my Emacs workflows are typically keyboard-driven, I'm fairly pragmatic about mouse usage. My MacBook's trackpad is great for just kicking back to read and scroll through text.

There are brief times, however, when that keyboard-driven muscle memory overlaps my mouse usage, resulting in a buffer catastrophe. I joke of course. What I'm actually referring to is nothing more than a slight annoyance. There are times when I inadvertently trigger `<C-wheel-up>` or `<C-wheel-down>` events (because I happen to hold `Ctrl` down while triggering scrolling events). This results in buffer font size quickly changing to either really large or super small, depending on whether I was scrolling up or down at the time. The snafu is further exacerbated by inertial scrolling on trackpads. Go ahead and press the Ctrl key while your buffer is carrying some of that inertia. The font size is affected just the same, even though there was no explicit physical/touching activity on the trackpad at the time.

![](https://xenodium.github.io/images/hey-mouse-dont-mess-with-my-emacs-font-size/scroll-reduces-font-size.gif)

While this behaviour was a little annoying, I would typically just reopen the file via `C-x C-v RET` (aka `find-alternate-file`), which would reset the font size as a convenient side-effect. Now, you may wonder if reopening the file would also forget the point/cursor position, but that's not an issue if you've got the handy built-in [save-place-mode](https://www.emacswiki.org/emacs/SavePlace) turned on (highly recommended).

Ok and all, but this is a second-class workaround at best. What I really wanted is for the mouse/trackpad to stop messing with my font size.

Lucky for me, I bumped into a [simple solution](https://indieweb.social/@goldayan@clj.social/112195984778424216) shared by [Shane Celis](https://indieweb.social/@shanecelis@mastodon.gamedev.place) and [Thanga Ayyanar](https://indieweb.social/@goldayan@clj.social). It worked a treat, and it's only a few lines of elisp.

``` {.commonlisp org-language="emacs-lisp" lexical="no"}
(global-set-key (kbd "<pinch>") 'ignore)
(global-set-key (kbd "<C-wheel-up>") 'ignore)
(global-set-key (kbd "<C-wheel-down>") 'ignore)
```

Thank you folks. Balance restored.

## Update

While I was using `C-x C-v RET` (aka `find-alternate-file`) to reset font size, [Luke T. Shumaker](https://fosstodon.org/@lukeshu/112577135094007001) and [Matthew G.](https://social.lol/@starbreaker/112577354623711993) shared a better reset alternative:

``` {.commonlisp org-language="emacs-lisp" lexical="no"}
C-u 0 M-x text-scale-adjust
```

# \[2024-05-16 Thu\] Emacs: git rename, courtesy of dired
---
id: emacs-git-rename-courtesy-of-dired
---

Emacs [wdired](https://www.gnu.org/software/emacs/manual/html_node/emacs/Wdired.html) is a beautiful thing. You turn a directory representation into an editable buffer and you can do some magic. By magic, I mean you can apply your favourite text-editing commands to a directory and do some file management.

Take, for example, batch-renaming. Turn `wdired` on via `dired-toggle-read-only`, use something like Magnar's [multiple-cursors](https://github.com/magnars/multiple-cursors.el) (or built-in [keyboard macros](https://www.gnu.org/software/emacs/manual/html_node/emacs/Keyboard-Macros.html)) and commit via `wdired-finish-edit` (using the often-familar `C-c C-c` binding). You've now renamed multiple files as it if were any other text buffer. Pretty magical.

![](https://xenodium.github.io/images/emacs-git-rename-courtesy-of-dired/wdired.gif)

One downside (or so I thought) is that wdired didn't automagically also take care of git renames for me, you know [DWIM-style](emacs-dwim-do-what-i-mean/).

Every time I renamed anything via `wdired` and subsequently pulled up my trusty [magit](https://magit.vc/), I was a little sad it wasn't all just handled… The renamed files were seen as deleted, along with all the untracked counterparts.

![](https://xenodium.github.io/images/emacs-git-rename-courtesy-of-dired/rename-no-git.png)

So, I set out to change this unacceptable state of affairs 😀. I started off by setting a breakpoint on `wdired-finish-edit` via edebug (see [why this util is awesome](inline-previous-result-and-why-you-should-edebug/)).

I wanted to see what `wdired-finish-edit` did under the hood, which led me to `dired-rename-file`. As I stepped through the code, I spotted the `dired-vc-rename-file` variable, which does exactly what you think it does 🤦.

One `setq` later…

``` {.commonlisp org-language="emacs-lisp" lexical="no"}
(setq dired-vc-rename-file t)
```

…and boom! From now on, renaming from dired does exactly what you would expect. Here's `magit` to prove it:

![](https://xenodium.github.io/images/emacs-git-rename-courtesy-of-dired/rename-with-git.png)

lol. I was so fixated on "adding git rename support", that I forgot to first search the documentation.

While you can search for variables via the built-in `describe-variable`, I'm a fan of Wilfred's [helpful](https://github.com/Wilfred/helpful) equivalent: `helpful-variable`. Coupled with with your favourite completion framework (Abo Abo's [ivy](https://github.com/abo-abo/swiper) for me), it's as easy a fuzzy searching for anything you're after:

![](https://xenodium.github.io/images/emacs-git-rename-courtesy-of-dired/dired-vc-rename-file.png)

*This post is also at [lmno.lol](https://lmno.lol/alvaro/emacs-git-rename-courtesy-of-dired).*

# \[2024-04-05 Fri\] Fresh Eyes now on the App Store
---
id: fresh-eyes-now-on-the-app-store
---

A couple of days ago, [I introduced Fresh Eyes](fresh-eyes-20-20-20-for-macos), a little macOS utility to help me practice the [20-20-20 rule](https://en.wikipedia.org/wiki/Computer_vision_syndrome) and take better care of my vision while on the computer.

![](https://xenodium.github.io/images/fresh-eyes-now-on-the-app-store/big-sur-eyes.gif)

Today, [Fresh Eyes](https://apps.apple.com/app/id6480411697) was approved and is now available on the macOS App Store.

<center>
  <a href="https://apps.apple.com/app/id6480411697">
    <img src="https://xenodium.github.io/images/fresh-eyes-now-on-the-app-store/fresh_eyes_icon.png" alt="Fresh eyes icon" width="100px">
  </a>
  <br/>
  <br/>
  <a href="https://apps.apple.com/app/id6480411697">
    <img src="https://xenodium.github.io/images/flat-habits-for-ios/download-on-app-store.png" alt="download-on-app-store.png" width="180px">
  </a>
</center>

# \[2024-04-03 Wed\] Fresh Eyes: 20-20-20 for macOS
---
id: fresh-eyes-20-20-20-for-macos
---

I've been lucky to have enjoyed healthy vision throughout my life. That is, until recently. Nothing major, I'll need glasses for some activities. I also learned from the optometrist I should follow the [20-20-20 rule](https://www.sbs.nhs.uk/information/home-working-looking-after-eyes) to reduce eye strain.

The **20-20-20 rule** is simple:

Take a break from looking at your computer screen every **20 minutes** and look away at something roughly **20 feet away** (6 metres) for **20 seconds**.

While there are no shortages of macOS timer apps available, I figured it'd be fun to build a 20-20-20 one anyway.

Meet **Fresh Eyes**. I've been using it in the last few days. If you'd like to give it a try, send me an email at me@xenodium.com and I'll reply with a TestFlight invite.

![](https://xenodium.github.io/images/fresh-eyes-20-20-20-for-macos/fresh-eyes.gif)

If looking for alternatives, [Samuel W. Flint](https://samuelwflint.com/) [offers a couple of great options](https://emacs.ch/@swflint/112197147526251145):

-   On Emacs: [hammy.el](https://github.com/alphapapa/hammy.el/tree/master) by [Adam Porter (alphapapa)](https://github.com/alphapapa).
-   On Linux/Windows (GTK-based): [Workrave](https://workrave.org/) by Raymond Penners & Rob Caeler.

## Update

[Fresh Eyes](https://apps.apple.com/app/id1558358855) has now [been approved and is available on the macOS App Store](fresh-eyes-now-on-the-app-store).

<center>
  <a href="https://apps.apple.com/app/id6480411697">
    <img src="https://xenodium.github.io/images/fresh-eyes-now-on-the-app-store/fresh_eyes_icon.png" alt="Fresh eyes icon" width="100px">
  </a>
  <br/>
  <br/>
  <a href="https://apps.apple.com/app/id6480411697">
    <img src="https://xenodium.github.io/images/flat-habits-for-ios/download-on-app-store.png" alt="download-on-app-store.png" width="180px">
  </a>
</center>

# \[2024-03-25 Mon\] Emacs 29.3 emergency release
---
id: emacs-293-emergency-release
---

It was only last week when I upgraded to Emacs 29.2. Yup, I was late to the party. This week, we have a new release.

Emacs 29.3 is an [emergency bugfix release](https://lists.gnu.org/archive/html/emacs-devel/2024-03/msg00611.html), so this time I've upgraded promptly. I'm on macOS using the great [Emacs Plus](https://github.com/d12frosted/homebrew-emacs-plus) so upgraded via [Homebrew](https://brew.sh/) using:

``` {.bash org-language="sh"}
brew reinstall emacs-plus@29 --with-imagemagick --with-no-frame-refocus --with-native-comp --with-savchenkovaleriy-big-sur-3d-icon --with-poll
```

![](https://xenodium.github.io/images/emacs-293-emergency-release/29.3.png)

ps. Like this splash screen? Check out the [Emacs eye candy post](my-emacs-eye-candy/).

# \[2024-03-24 Sun\] Emacs: Toggling the continuation indicator
---
id: toggling-emacs-continuation-fringe-indicator
---

By default, Emacs typically displays curly arrows when wrapping lines. While likely a handy feature to some, I didn't really find much use for it. At the same time, I never looked into their removal until now.

Turns out, there's a `continuation` entry in `fringe-indicator-alist` variable that handles this. Removing this entry also removes the curly arrows.

``` {.commonlisp org-language="emacs-lisp" lexical="no"}
(setq-default fringe-indicator-alist
              (delq (assq 'continuation fringe-indicator-alist) fringe-indicator-alist))
```

Alternatively, one could write a simple function to toggle displaying the continuation indicator.

![](https://xenodium.github.io/images/toggling-emacs-continuation-fringe-indicator/curly.gif)

``` {.commonlisp org-language="emacs-lisp" lexical="no"}
(defun toggle-continuation-fringe-indicator ()
  (interactive)
  (setq-default
   fringe-indicator-alist
   (if (assq 'continuation fringe-indicator-alist)
       (delq (assq 'continuation fringe-indicator-alist) fringe-indicator-alist)
     (cons '(continuation right-curly-arrow left-curly-arrow) fringe-indicator-alist))))
```

That's it for this post. A tiny tip. Perhaps there's a better way to handle it. If you know, I'd love to know too ([Mastodon](https://indieweb.social/@xenodium) / [Twitter](https://twitter.com/xenodium) / [Reddit](https://www.reddit.com/user/xenodium) / [Email](mailto:me__AT__xenodium.com)).

# \[2024-03-22 Fri\] The Org bundle
---
id: the-org-bundle
---

I have [three apps on the App Store](https://apps.apple.com/us/developer/xenodium-ltd/id304568690): [Plain Org](https://plainorg.com), [Flat Habits](https://flathabits.com/), and [scratch](https://apps.apple.com/us/app/scratch/id1671420139).

## Plain Org / [plainorg.com](https://plainorg.com)

My more generic solution to access org files on the go and away from Emacs.

![](https://xenodium.github.io/images/the-org-bundle/plainorg-600x0w.png)

## Flat Habits / [flathabits.com](https://flathabits.com/)

My take on frictionless habit tracking truly respecting user privacy and their time (absolutely no distractions).

![](https://xenodium.github.io/images/the-org-bundle/flathabits-600x0w.png)

## `*scratch*` / [App Store](https://apps.apple.com/us/app/scratch/id1671420139)

Sure, we have tons of note-taking apps but most require more steps than desirable to write something down ASAP. Launch the app and you're good to write. No new note creation, bring keyboard up, etc.

![](https://xenodium.github.io/images/the-org-bundle/scratch-600x0w.webp)

## Common denominator

In addition to being offline-first, no cloud, no login, no ads, no tracking, no social… each app targets a specific purpose, sharing an important common denominator: they all use [org markup](https://orgmode.org/) as the underlying storage.

## The Org bundle / [App Store](https://apps.apple.com/us/app-bundle/the-org-bundle/id1717663541)

While you can still get each of my apps individually, you now have the option to get them all as a single bundle: [The Org bundle](https://apps.apple.com/us/app-bundle/the-org-bundle/id1717663541).

![](https://xenodium.github.io/images/the-org-bundle/bundle.png)

## Journelly joining the bundle soon…

Continuing on the org storage theme, I got another app in the works. Also joining [The Org bundle](https://apps.apple.com/us/app-bundle/the-org-bundle/id1717663541), maintaining its privacy-first approach: offline, no cloud, no login, no ads, no tracking, no social… this time in the journaling space.

Journelly is currently [in beta, want to join](an-ios-journaling-app-powered-by-org-plain-text)?

![](https://xenodium.github.io/images/the-org-bundle/journelly-demo.gif)

# \[2024-03-19 Tue\] sqlite-mode-extras on MELPA
---
id: sqlite-mode-extras-on-melpa
---

![](https://xenodium.github.io/images/sqlite-mode-goodies/sqlite-previous.gif)

Emacs 29 [introduced the handy sqlite-mode](emacs-29s-sqlite-mode). Soon after, I tried a couple of experiments [here](further-sqlite-mode-extensions/) and [there](sqlite-mode-goodies) to bring additional functionality.

Folks reached out. The additions seemed useful to them and were keen on upstreaming or pushing to MELPA. While I can't commit to upstreaming at this moment, I can happily meet halfway on MELPA.

As of a couple of days, you can find [sqlite-mode-extras](https://github.com/xenodium/sqlite-mode-extras) on [MELPA](https://melpa.org/#/sqlite-mode-extras) and [GitHub](https://github.com/xenodium/sqlite-mode-extras). Contributions [totally welcome](https://github.com/xenodium/sqlite-mode-extras/pulls?q=is%3Apr).

While I haven't heard of issues, please continue treating the package as experimental and exercise safety with your data. Please back up.

# \[2024-03-19 Tue\] Som tam salad dressing recipe (improvised)
---
id: som-tam-salad-dressing-recipe-improvised
---

Lately, I've been slightly obsessed with [Som Tam](https://cooking.nytimes.com/recipes/1012589-som-tum-green-papaya-salad), a magnificent salad packing both crunch and flavour.

I didn't have all the right ingredients for the full-blown salad at home, so I set out to experiment with the dressing's punchy flavours. While I've gone a little rogue here, I mean no disrespect to the faithful recipe and all its glory. Luckily, I did have fish sauce at home, which I considered the core ingredient, and made do with everything else I could find.

This is where I landed:

-   2 cloves of garlic
-   Thai chillies to taste (improvised with chilli flakes)
-   2 tablespoons of fish sauce
-   1 tablespoons of palm sugar (improvised with honey)
-   2 limes squeezed (improvised with lemon)
-   1 tablespoon of dried shrimp (didn't have any)
-   1 small plum tomato (I used 2 of those bite-size ones)

Using my trusty mortar and pestle, I ground and crushed the garlic, chilli flakes, and tomato, forming a paste of sorts. Then added the remaining liquids (fish sauce, honey and lemon) diluting the paste.

-   2 tablespoons of roasted peanuts (roasted some cashews)

Most recipes seem to suggest using peanuts, though my local Thai restaurant uses cashews. Luckily I had cashews at home, so I'm copied my local. Roasted them on pan for a few minutes.

As you can imagine, I didn't just have a green papaya laying around at home, so I experimented with other crunchy veggies. While I won't reveal what the other veggies were (oh man, I've gone way off script), both my other half and I were happy with the results.

Som Tam dressing packs an awesome punch. If your salads were feeling a little boring, give this a try!

# \[2024-03-14 Thu\] My first bread (pane dei Castelli recipe)
---
id: my-first-bread-pane-dei-castelli-recipe
---

![](https://xenodium.github.io/images/my-first-bread-pane-dei-castelli-recipe/my-bread.jpg)

I followed [The easiest no knead bread recipe](https://www.emmafontanella.com/the-easiest-no-knead-bread) ([video](https://www.youtube.com/watch?v=3xtj9X1jDc0)).

## No-knead method

### Dough

-   1 1/4 cups (300g) lukewarm water
-   2 teaspoons (8g) salt
-   1 teaspoon (3.5g) yeast
-   3 cups (420g) all purpose flour

Mix thoroughly (I like to use Ciro's spoon mixing method from [this video](https://www.bbc.com/travel/article/20200415-how-to-make-pizza-like-a-neapolitan-master)), cover and rest for 6 hours. Stretch and fold if the dough collapsed on itself to rescue.

### Bake

-   Preheat oven (and dutch oven) at 230°C.
-   Flour.

I didn't have a dutch oven, but my oven-proof saucepans (with lid) did just fine. Carefully take the pan out of the oven, sprinkle the bottom with some flour, and place the dough inside. Cover with lid (careful, also hot) and bake for 30-35 minutes.

### Crust

-   Reduce heat to 200°C.

Remove the lid and bake for another 10 minutes or until you get the crust darkness of your choice.

### Rest

Let the bread cool on a cooling rack for 45 mins before cutting. If no rack available, set upsidedown.

## Stretch and fold method

### Dough

-   1 1/4 cups (300g) lukewarm water
-   2 1/2 teaspoons (10g) salt
-   2 teaspoon (7g) yeast
-   3 cups (420g) all purpose flour

Mix thoroughly (I like to use Ciro's spoon mixing method from [this video](https://www.bbc.com/travel/article/20200415-how-to-make-pizza-like-a-neapolitan-master)), cover and rest for 6 hours. Stretch and fold if the dough collapsed on itself to rescue.

### Stretch and fold

See [Emma Fontanella](https://www.emmafontanella.com/the-easiest-no-knead-bread)'s stretch and fold technique and apply 4-5 times every 30 mins.

### Follow no-knead method

Remaining steps are the same as the no-knead method.

# \[2024-03-11 Mon\] Seafood stew recipe
---
id: seafood-stew-recipe
---

I've made this seafood stew a handful of times and it's always delivered.

![](https://xenodium.github.io/images/seafood-stew-recipe/IMG_7030.jpg)

## Garlic almond paste

-   1/8 cup of olive oil.
-   8 cloves of garlic chopped.
-   1/4 cup almond meal (flour).

Cook garlic in low-medium heat until softened. Add almond meal and cook 3-4 mins or until golden. Set aside to cool.

-   1 large handful of parsley.

Blend the almond mixture to make a paste. Set aside.

## Spices

-   1 large onion halved and sliced.

In a large pan, cook onion until softened.

-   1/8 cup of olive oil.
-   1 large red chilli finely chopped (on occasions, I use chilli flakes).
-   1 teaspoon of smoked paprika.
-   2 bay leaves.

Add chilli, paprika, and bay leaves and cook for 30 seconds (or fragrant).

## Liquids

-   1/3 cup dry white wine (I've used cooking sake on occasion).
-   1000g of passata (typically comes in 500g packs).
-   400g plum tomatoes tin (undrained).
-   1 teaspoon of saffron threads (soaked in 2 tablespoons of water).
-   1 tablespoon of tomato paste.
-   2 cups of fish stock (I've used 2 stock cubes + same amount of water).

Add the wine, passata, plum tomatoes, saffron, tomato pate, and fish stock. Simmer for 10 minutes.

## Fish

-   700g of firm white fish (cut into 5 cm chunks).
-   12 mussels.

Add the almond paste, fish, and mussels. Cook for 3-4 minutes.

-   12 prawns (shelled).

Add the prawns. Cook for 3 minutes (or pink).

## Finishing touches

Season with salt and pepper to taste. I've added roughly a teaspoon of salt.

Garnish generously with parsley and you're good to go.

# \[2024-01-13 Sat\] A Cloudflare Workers primer: hello world
---
id: a-cloudflare-workers-primer-hello-world
---

``` example
o______________o
| Hello world! |
o--------------o
        \   ^__^
         \  (oo)_______
            (__)\       )\/\
                ||----w |
                ||     ||

```

Keen to get started with your *Hello World* Cloudflare Worker? Skip to the [setup](id:cloudflare-worker-hello-world-setup) section.

## A little background

The vast majority of my software development experience has been centered around client-side software. The few times I've needed a server-side component for a hobby project, I've historically provisioned a linux [virtual machine](https://en.wikipedia.org/wiki/Virtual_machine) somewhere and ran whatever services I needed. I have to admit though, I don't enjoy the provisioning process, configuration, maintenance, upgrades, database admin, etc. which take time away from the part I enjoy more: building and experimenting with features.

While [containers](https://en.wikipedia.org/wiki/Containerization_(computing)) have made things somewhat simpler, much of the maintenance tradeoffs remain.

These days, the server-managing overhead has been greatly reduced by "[serverless](https://en.wikipedia.org/wiki/Serverless_computing)" solutions. Odd terminology for a server offering, but I digress. It more or less refers to removing most of that additional responsibility that comes with managing your own servers and enabling you to focus on building your business logic. Having said that, I've typically shied away from these services, with the possibly irrational fear of vendor lock-in.

The thing is, if most of my potential server-side needs merely require an entry point (where I could route/handle incoming requests) and possibly some persistence (maybe a database), I should be able to abstract these things away and build server-side logic against portable abstractions. With that in place, maybe there's little vendor lock-in to worry about? Who knows, the devil's in the detail. If I keep shying away from these services, I'll never know, so maybe I should try some and see.

## Let's try Cloudflare Workers

There are no shortages of serverless options offering [functions as a service](https://en.wikipedia.org/wiki/Function_as_a_service). Google Cloud, AWS Lambda, Azure Functions, Vercel Functions, Netlify Functions, Fastly, Cloudflare workers, I could go on…

While I haven't researched the different offerings, I had made a mental note to check out Cloudflare Workers as they had [announced D1](https://blog.cloudflare.com/introducing-d1), their database backed by SQLite …and who doesn't love SQLite? ;) OK, I'm no expert here, but I have had a pleasant experience whenever I've used it. These days, even [Emacs 29 got some SQLite love](emacs-29s-sqlite-mode/), which prompted me to add [cell navigation/navigation](sqlite-mode-goodies/) and [try other experiments](further-sqlite-mode-extensions/).

## D1 / SQLite in beta

Keep in mind that D1 is in public beta and not yet recommended for large production workloads. From the [Cloudflare site](https://developers.cloudflare.com/d1/):

> "While the D1 team expects breaking changes and issues to be minimal, they may still occur. The D1 team generally does not recommend running large production workloads on beta products."

## Workers cost

In terms of pricing (as of 2024-01-13), the [free tier](https://developers.cloudflare.com/workers/platform/pricing) enables workers to handle up 100,000 requests per day. Plenty for trying things out.

In any case, we're only checking out Cloudflare's offering, so let's move on…

## Settings up a new Cloudflare Worker (via web dash) {#settings-up-a-new-cloudflare-worker-via-web-dash id="cloudflare-worker-hello-world-setup"}

Cloudflare has a tiny snippet on their [Workers landing page](https://workers.cloudflare.com/) that sets things up rather quickly, but [I won't be using it]{.underline}.

``` {.bash org-language="sh"}
~/ $ npm create cloudflare -- my-app
~/ $ cd my-app
~/ $ npx wrangler deploy
Published https://my-app.world.workers.dev
```

⚠️ *Note: before you get copying and pasting, read on.*

Cloudflare's snippet is helpful, but it does quite a bit under the hood. I'm somewhat of a node and serverless noob, so I wanted to understand things a little more and figure out the bare minimum needed to start a minimal Cloudflare Worker project.

Instead, we'll first click here and there over at <https://dash.cloudflare.com> to spin off our new worker from the web and later continue from the command line.

![](https://xenodium.github.io/images/a-cloudflare-workers-primer-hello-world/cf-new-0.png)

![](https://xenodium.github.io/images/a-cloudflare-workers-primer-hello-world/cf-new-1.png)

Give the worker a name. We'll call it "todos" to give ya a little sneak peek at what the next post is possibly about… But you can call it whatever you'd like. Keep in mind you'll need to use this name to refer to your new worker.

![](https://xenodium.github.io/images/a-cloudflare-workers-primer-hello-world/cf-new-2.png)

Congrats, you've now deployed a new worker. You can access it via the URL that looks something like <https://todos.somewhere.workers.dev>

![](https://xenodium.github.io/images/a-cloudflare-workers-primer-hello-world/hello-dark.png)

This is great and all, but we want to build something with this new worker, so let's set up our local development environment…

## Prerequisites

You'll need [node.js](https://nodejs.org/) installed on your machine.

I happen to be on macOS, so I installed node via [Homebrew](https://brew.sh/).

``` {.bash org-language="sh"}
brew install node
```

## Create a new node project

We want to start with a bare bones node project, so let's do just that.

``` {.bash org-language="sh"}
mkdir HelloCloudflareWorker
cd HelloCloudflareWorker
npm init -y
```

## Install TypeScript (compiler)

I like some guardrails when targetting Javascript, so I'll use the [TypeScript](https://www.typescriptlang.org) compiler in this project. Let's install it.

``` {.bash org-language="sh"}
npm install --save-dev typescript
npx tsc --init
```

## Install Cloudflare Typescript types

To have Cloudflare types information accessible to the TypeScript compiler, we'll need to install that too.

``` {.bash org-language="sh"}
npm install --save-dev @cloudflare/workers-types
```

## Install Wrangler (Cloudflare tooling)

To manage your worker from the command-line, you'll need Cloudflare's [wrangler](https://developers.cloudflare.com/workers/wrangler/) tool. Let's install it.

``` {.bash org-language="sh"}
npm install --save-dev wrangler
```

## Point Wrangler to our worker

We're done installing things now. Let's point wrangler to our new worker by creating its config file.

`wrangler.toml`

``` {.bash org-language="sh"}
name = "todos"
main = "worker/worker.ts"
```

## Worker entry point

By default, the worker we created using Cloudflare's dash has the following entry point:

``` {.javascript org-language="js"}
export default {
  async fetch(request, env, ctx) {
    return new Response( 'Hello World!'):
  }
}
```

However, this isn't yet included in our development environment. We need to write our first bit of code. You may have noticed our `wrangler.toml` is pointing to the main entry point (`worker/worker.ts`) and this file doesn't exist yet. Let's create it, though be sure to also create its owning directory:

``` {.bash org-language="sh"}
mkdir worker
```

Now we can create our very own `worker/worker.ts`. Let's make the first change that shapes worker to our liking. Rather than just printing "Hello World", let's style things up using our [cow friend](https://en.wikipedia.org/wiki/Cowsay). We'll create `worker/worker.ts` and include the spiffed up message.

`worker/worker.ts`

``` {.javascript org-language="js"}
import { Env, ExecutionContext } from '@cloudflare/workers-types';

export default {
  async fetch(request: Request, env: Env, ctx: ExecutionContext): Promise<Response> {
    let defaultResponse = `
   o______________o
   | Hello World! |
   o--------------o
           \\   ^__^
            \\  (oo)\_______
               (__)\\       )\\/\\
                   ||----w |
                   ||     ||`
    return new Response(defaultResponse);
  }
};
```

It's worth mentioning the import statement, since it brings Cloudflare's type information for both `Env` and `ExecutionContext`.

## Running worker locally

Okay, we now have our `worker/worker.ts` code ready to go. Let's run it locally. For that we use the wrangler utility.

``` {.bash org-language="sh"}
npx wrangler dev
```

![](https://xenodium.github.io/images/a-cloudflare-workers-primer-hello-world/dev.png)

With that, you'll notice the worker is now running locally and waiting to be visited at <http://localhost:8787>.

![](https://xenodium.github.io/images/a-cloudflare-workers-primer-hello-world/moo.png)

## Deploying worker

When we first created the worker via <https://dash.cloudflare.com>, it automatically deployed to <https://todos.somewhere.workers.dev>. But our mods only ran locally. Let's deploy, again with the wrangler utility.

``` {.bash org-language="sh"}
npx wrangler deploy
```

![](https://xenodium.github.io/images/a-cloudflare-workers-primer-hello-world/deploying.png)

We're good to go. Let's point our browser to the worker's public location.

![](https://xenodium.github.io/images/a-cloudflare-workers-primer-hello-world/deployed.png)

…and with that, we have a functional Cloudflare Worker and a local development environment to shape things up however we'd like. What would you use the Worker for?

Gave this primer a try? I'd love to hear from ya ([Mastodon](https://indieweb.social/@xenodium) / [Twitter](https://twitter.com/xenodium) / [Reddit](https://www.reddit.com/user/xenodium) / [Email](mailto:me__AT__xenodium.com)).

*Enjoying this content? Find it useful?*

*Consider ✨[sponsoring me](https://github.com/sponsors/xenodium)✨ or buy ✨[my iOS apps](https://apps.apple.com/us/developer/xenodium-ltd/id304568690)✨.*

# \[2024-01-01 Mon\] A chatgpt-shell compose ux experiment
---
id: a-chatgpt-shell-compose-ux-experiment
---

It's been roughly 9 months since I [experimented](a-chatgpt-emacs-shell/) with wiring the [ChatGPT](https://openai.com/blog/chatgpt) API to an Emacs [comint](https://www.gnu.org/software/emacs/manual/html_node/emacs/Shell-Prompts.html) buffer in [chatgpt-shell](https://github.com/xenodium/chatgpt-shell). ChatGPT's request-response nature maps fairly well to a shell's mode of interaction.

In the past, I've also talked about [blurring the lines between shell and editor](yasnippet-in-emacs-eshell/). That is, using Emacs as your shell ([eshell](https://www.masteringemacs.org/article/complete-guide-mastering-eshell) being my favourite) enables compounding goodies from both shell and editor when both are used from the same app.

Keeping interactions within the same app also cuts down on some of that friction that comes with context switching between your text editor and the browser for [llm](https://en.wikipedia.org/wiki/Large_language_model) things.

Today, my interactions with llms typically consists of copying and pasting details from other Emacs buffers, crafting a query, and finally submitting by pressing enter (RET) from a shell like [chatgpt-shell](https://github.com/xenodium/chatgpt-shell).

![](https://xenodium.github.io/images/a-chatgpt-shell-compose-ux-experiment/shell-find-bug.gif)

With the entire interaction happening from Emacs, we're already cutting a fair amount of friction… But we can do better, specially when copying, pasting, and crafting those multi-line queries (you don't want to prematurely submit those shell queries by inadvertently pressing RET when you want a newline).

## chatgpt-shell-prompt-compose

This is where `chatgpt-shell-prompt-compose` comes in, an opinionated experiment bringing some of my favourite "compose" features over from the likes of [magit](https://github.com/magit) commit buffers, [org capture](https://www.gnu.org/software/emacs/manual/html_node/org/Using-capture.html), [mu4e](https://www.djcbsoftware.nl/code/mu/mu4e/) compose, and so on…

You can bring a compose buffer up by invoking `M-x chatgpt-shell-prompt-compose`. From there, you can both craft and send your queries. If you're a magit fan, the process should feel fairly familiar with crafting a git commit message by editing away and quickly committing (via `C-c C-c` binding). Similarly, you can also abort with the familiar `C-c C-k` binding.

![](https://xenodium.github.io/images/a-chatgpt-shell-compose-ux-experiment/10k.gif)

I use this compose utility often enough that I bound it to `C-c C-e`, though this may not be your cup of tea (needs overriding other mode maps).

``` {.commonlisp org-language="emacs-lisp"}
(use-package chatgpt-shell
  :commands
  (chatgpt-shell
   chatgpt-shell-prompt-compose)
  :bind (("C-c C-e" . chatgpt-shell-prompt-compose)
         :map org-mode-map
         ("C-c C-e" . chatgpt-shell-prompt-compose)
         :map eshell-mode-map
         ("C-c C-e" . chatgpt-shell-prompt-compose)
         :map mu4e-compose-mode-map
         ("C-c C-e" . chatgpt-shell-prompt-compose)
         :map emacs-lisp-mode-map
         ("C-c C-e" . chatgpt-shell-prompt-compose)))
```

While the compose buffer displays a single query/response at a time, it also follows on from previous requests. You can press `r` to reply and continue the conversation.

![](https://xenodium.github.io/images/a-chatgpt-shell-compose-ux-experiment/marathon.gif)

The compose buffer is fairly stateless and mostly serves as viewport over the last query in the shell itself. If you invoke `chatgpt-shell-prompt-compose` with a prefix (ie. C-u), it wipes the shell history. You can do it from the compose buffer itself, if you forgot to prior to launching.

You can also use the `o` binding to jump to the "other buffer" (the shell carrying the conversation history).

![](https://xenodium.github.io/images/a-chatgpt-shell-compose-ux-experiment/other.gif)

If using the `r` and `o` bindings in a compose buffer sounds a little strange, fear not. The compose buffer is writeable while crafting queries, thus you can safely insert any character. Once a query is submitted (via `C-c C-c`), the buffer automatically becomes read-only, and thus unlocking single-character bindings.

Another magit commit favorite of mine is using the `M-p` or `M-n` bindings to insert previous messages via `git-commit-prev-message` or `git-commit-next-message`.

With that in mind, I also brought `M-p` and `M-n` over to the editable compose buffer.

![](https://xenodium.github.io/images/a-chatgpt-shell-compose-ux-experiment/previous-next-history.gif)

If cycling isn't efficient enough, you can also use the typical `M-r` binding to search and insert from history.

![](https://xenodium.github.io/images/a-chatgpt-shell-compose-ux-experiment/search-history.png)

Now, getting back to removing some of that copy-pasting friction… Selecting text in any buffer and invoking `M-x chatgpt-shell-prompt-compose` (or `C-c C-e` in my case) automatically pastes the region into the compose buffer. You get to tweak your query before submitting (via that familiar `C-c C-c`), in a more flexible buffer (compared to a shell).

*Note: You can also invoke the compose command with a region as many times as you'd like. Each region is sent to the compose buffer, so you can craft more involved queries before submission.*

![](https://xenodium.github.io/images/a-chatgpt-shell-compose-ux-experiment/find-and-fix-bug.gif)

While I typically prefer short query responses (using diffs like the example above), I sometimes want full snippets as follow-ups. I found myself typing *"show entire snippet"* often enough, that I now use one of those single-character bindings (`e`) for this purpose.

![](https://xenodium.github.io/images/a-chatgpt-shell-compose-ux-experiment/show-entire-snippet.gif)

## Compose bindings

I've showcased most of the compose key bindings, here's the whole lot (so far anyway), which you can also view from `chatgpt-shell-prompt-compose`'s documentation.

### Editing

-   `C-c C-c` to send the buffer query.
-   `C-c C-k` to cancel compose buffer.
-   `M-r` search through history.
-   `M-p` cycle through previous item in history.
-   `M-n` cycle through next item in history.

### Read-only

-   `C-c C-c` After sending offers to abort query in-progress.
-   `q` Exits the read-only buffer.
-   `g` Refresh (re-send the query). Useful to retry on disconnects.
-   `n` Jump to next source block.
-   `p` Jump to next previous block.
-   `r` Reply to follow-up with additional questions.
-   `e` Send "Show entire snippet" query.
-   `o` Jump to other buffer (ie. the shell itself).
-   `C-M-h` Mark block at point.

## Buyer beware: it's all pretty experimental

When I started playing with the compose buffer idea, I wasn't too sure whether or not its usage would stick, so I basically hacked `chatgpt-shell-prompt-compose` to pieces. A cheap prototype of sorts to validate the idea before fully committing to a more involved solution.

I'll eventually rewrite `chatgpt-shell-prompt-compose` as either a major or minor mode if there's enough interest.

For now, I'll continue using as is to validate its usefulness.

If you give `chatgpt-shell-prompt-compose` a try, I'd love to hear your feedback ([Mastodon](https://indieweb.social/@xenodium) / [Twitter](https://twitter.com/xenodium) / [Reddit](https://www.reddit.com/user/xenodium) / [Email](mailto:me__AT__xenodium.com)).

*Enjoying this content? Find it useful? Consider [sponsoring](https://github.com/sponsors/xenodium).*

# \[2023-12-22 Fri\] A Murder at the End of the World: Are you Vi or Emacs?
---
id: are-you-vi-or-emacs
---

I've enjoyed watching [A Murder at the End of the World](https://www.imdb.com/title/tt15227418/). The show may resonate with folks following the tech world. Won't say much more than that…

What I can maybe say is, the shows features [Reddit](https://www.reddit.com/r/emacs/), [Brave browser](https://brave.com/), terminal usage (ifconfig, nmap, hydra, responder), and a reference to the good 'ol [Vi vs Emacs rivalry](https://en.wikipedia.org/wiki/Editor_war), which I hope folks these days don't take further than friendly teasing between dear cousins.

In any case, being an Emacs nut, the scene gave me a good tickle. It's a great show, with a lovely Emacs cherry on top! While the show title and description didn't immediately draw me in, I'm glad I gave it a chance.

![](https://xenodium.github.io/images/are-you-vi-or-emacs/vi-or-emacs.webp)

![](https://xenodium.github.io/images/are-you-vi-or-emacs/what-is-emacs.webp)

# \[2023-12-17 Sun\] An basic Mullvad WireGuard setup for macOS
---
id: a-quick-mullvad-macos-setup
---

Needed a VPN to test an API from a different location. Gave [Mullvad](https://mullvad.net/en) a try.

Pretty neat, you can generate an account number without providing an email address. You can also pre-pay with a ton of options, including cash, crypto, credit cards, PayPal, wire transfers…

After seeing your account credited, one can download a [generated WireGuard configuration](https://mullvad.net/en/account/wireguard-config). Also a WireGuard noob, so took this opportunity to give it a try.

The [WireGuard macOS app](https://apps.apple.com/us/app/wireguard/id1451685025?mt=12) has an "Import Tunnel(s) from File…" option where you can import the .conf file downloaded from [Mullvad's generated config](https://mullvad.net/en/account/wireguard-config). After that, all I had to do was click the "Activate" button and [Bob's your uncle](https://en.wikipedia.org/wiki/Bob%27s_your_uncle).

![](https://xenodium.github.io/images/a-quick-mullvad-macos-setup/wg-redact.png)

You can test your connection via:

``` bash
curl https://am.i.mullvad.net/connected
```

I had a brief stint at using the command-line alternative via homebrew `brew install wireguard-go wireguard-tools`, but that seems to fail silently:

``` {.bash org-language="sh"}
wg-quick up xxxxx
[#] wireguard-go utun
[+] Interface for xxxxx is utun7
[#] wg setconf utun7 /dev/fd/63
[#] ifconfig utun7 inet xxx.xxx.xxx.xxx/xx xxx.xxx.xxx.xxx alias
[#] ifconfig utun7 inet6 xxxx:xxxx:xxxx:xxxx::x:xxxx/xxx alias
[#] ifconfig utun7 up
[#] route -q -n add -inet6 ::/1 -interface utun7
[#] route -q -n add -inet6 8000::/1 -interface utun7
[#] route -q -n add -inet xxx.xxx.xxx.xxx/x -interface utun7
[#] route -q -n add -inet xxx.xxx.xxx.xxx/x -interface utun7
[#] route -q -n add -inet xxx.xxx.xxx.xxx -gateway xxx.xxx.xxx.xxx
[#] networksetup -getdnsservers Wi-Fi
[#] networksetup -getsearchdomains Wi-Fi
[#] networksetup -getdnsservers iPhone USB
[#] networksetup -getsearchdomains iPhone USB
[#] networksetup -getdnsservers Thunderbolt Bridge
[#] networksetup -getsearchdomains Thunderbolt Bridge
[#] networksetup -getdnsservers xxxxx
[#] networksetup -getsearchdomains xxxxx
[#] networksetup -setdnsservers iPhone USB xxx.xxx.xxx.xxx
[#] networksetup -setsearchdomains iPhone USB Empty
[#] networksetup -setdnsservers xxxxx xxx.xxx.xxx.xxx
[#] networksetup -setsearchdomains xxxxx Empty
[#] networksetup -setdnsservers Wi-Fi xxx.xxx.xxx.xxx
[#] networksetup -setsearchdomains Wi-Fi Empty
[#] networksetup -setdnsservers Thunderbolt Bridge xxx.xxx.xxx.xxx
[#] networksetup -setsearchdomains Thunderbolt Bridge Empty
[+] Backgrounding route monitor
```

``` bash
curl https://am.i.mullvad.net/connected
```

I'm on a Macbook M1 Pro, running macOS Sonoma. If you got `wg-quick` working on Sonoma, I'd love to hear from ya ([Mastodon](https://indieweb.social/@xenodium) / [Twitter](https://twitter.com/xenodium) / [Reddit](https://www.reddit.com/user/xenodium) / [Email](mailto:me__AT__xenodium.com)).

# \[2023-12-06 Wed\] An iOS journaling app powered by org plain text
---
id: an-ios-journaling-app-powered-by-org-plain-text
---

I've been experimenting with building a rich text editing component for iOS, powered by [org](https://orgmode.org/) markup. The idea is to offer a mobile-friendly editing experience, backed by our beloved plain text format.

![](https://xenodium.github.io/images/an-ios-journaling-app-powered-by-org-plain-text/rich-text-experiment.gif)

To make things a little more interesting, I'm introducing a new org-based app to help anyone with regular journaling.

<center>👉 Meet ✨Journelly✨</center>

![](https://xenodium.github.io/images/an-ios-journaling-app-powered-by-org-plain-text/journelly.jpg)

Plain text *is* the serialization format. No conversion/import/export needed.

![](https://xenodium.github.io/images/an-ios-journaling-app-powered-by-org-plain-text/journelly.gif)

Though it's early days, it's fairly functional. Been using it daily for some time. You can opt in to use an external org file and sync with your beloved Emacs.

Want to give it a try? Want a TestFlight invite? Send me an email address (any would do) at either of these: [Mastodon](https://indieweb.social/@xenodium) / [Twitter](https://twitter.com/xenodium) / [Reddit](https://www.reddit.com/user/xenodium) / [Email](mailto:me__AT__xenodium.com).

The topic of org being fairly Emacs-oriented, though a strength for someone far down the rabbit hole, it is [understandable to call it out for someone in a different position](https://indieweb.social/@ringtailringo@mastodon.social/111533733278287863). Lucky for us, org markup is plain text and can be implemented by apps other than Emacs, like Journelly itself for iOS and even more experimentally on macOS:

![](https://xenodium.github.io/images/an-ios-journaling-app-powered-by-org-plain-text/macos.png)

And like Journelly for iOS, I got other org things available on iOS:

<table>
  <tr>
    <td><a href='https://plainorg.com'><img width='40' src='https://plainorg.com/favicon.ico'/></a></td>
    <td>As an <a href="https://orgmode.org/">Org mode</a> fan, so I wrote <a href="https://plainorg.com/">Plain Org</a> for iOS. It's on the <a href="https://apps.apple.com/app/id1578965002">App Store</a>.</td>
  </tr>
  <tr>
    <td><a href='https://apps.apple.com/app/id1671420139'><img width='40' src='https://raw.githubusercontent.com/xenodium/xenodium.github.io/master/images/scratch-a-minimal-scratch-area/scratch_icon.png'/></a></td>
    <td>Inspired by <a href="https://jamesclear.com/atomic-habits">Atomic Habits</a>, I wrote <a href="https://flathabits.com/">Flat Habits</a> for iOS. Also on the <a href="https://apps.apple.com/app/id1558358855">App Store</a>.</td>
  </tr>
  <tr>
    <td><a href='https://flathabits.com'><img width='40' src='https://flathabits.com/favicon.ico'/></a></td>
    <td>I needed an Emacs-inspired <a href="scratch-a-minimal-scratch-area"><strong>scratch</strong></a> buffer on iOS (who doesn't?), so I <a href="scratch-a-minimal-scratch-area/">built one</a>.</td>
  </tr>
</table>

-   As an [Org mode](https://orgmode.org/) fan, so I wrote [Plain Org](https://plainorg.com/) for iOS. It's on the [App Store](https://apps.apple.com/app/id1578965002).
-   Inspired by [Atomic Habits](https://jamesclear.com/atomic-habits), I wrote [Flat Habits](https://flathabits.com/) for iOS. Also on the [App Store](https://apps.apple.com/app/id1558358855).
-   I needed an Emacs-inspired [**scratch**](scratch-a-minimal-scratch-area) buffer on iOS (who doesn't?), so I [built one](scratch-a-minimal-scratch-area/).

Just like the stuff I do or [write about](https://xenodium.com)? [Sponsor me](https://github.com/sponsors/xenodium).

# \[2023-11-29 Wed\] Building your own bookmark launcher
---
id: building-your-own-bookmark-launcher
---

```{=org}
#+ATTR_HTML: :style text-align:right;
```
*✨[sponsor](https://github.com/sponsors/xenodium)✨ this content*

I've been toying with the idea of managing browser bookmarks from [you know where](https://www.gnu.org/software/emacs/). Maybe dump a bunch of links into an org file and use that as a quick and dirty bookmark manager. We'll start with a flat list plus fuzzy searching and see how far that gets us.

The org file would look a little something like this:

::: captioned-content
::: caption
bookmarks.org
:::

``` org
My bookmarks
- [[https://lobste.rs/t/emacs][Emacs editor (Lobsters)]]
- [[https://emacs.stackexchange.com][Emacs Stack Exchange]]
- [[https://www.reddit.com/r/emacs][Emacs subreddit]]
- [[https://emacs.ch][Emacs.ch (Mastodon)]]
- [[https://www.emacswiki.org][EmacsWiki]]
- [[https://planet.emacslife.com/][Planet Emacslife]]
```
:::

Next we need fuzzy searching, but first let's write a little elisp to extract all links from the org file:

``` {.commonlisp org-language="emacs-lisp" lexical="no"}
(require 'org-element)
(require 'seq)

(defun browser-bookmarks (org-file)
  "Return all links from ORG-FILE."
  (with-temp-buffer
    (let (links)
      (insert-file-contents org-file)
      (org-mode)
      (org-element-map (org-element-parse-buffer) 'link
        (lambda (link)
          (let* ((raw-link (org-element-property :raw-link link))
                 (content (org-element-contents link))
                 (title (substring-no-properties (or (seq-first content) raw-link))))
            (push (concat title
                          "\n"
                          (propertize raw-link 'face 'whitespace-space)
                          "\n")
                  links)))
        nil nil 'link)
      (seq-sort 'string-greaterp links))))
```

The snippet uses `org-element` to iterate over links to collect/return them in a list. We join both the title and url, so searching can match either of these values. We also add a little formatting (new lines/face) to spiff things up.

``` {.commonlisp org-language="emacs-lisp" results="value code"}
(browser-bookmarks "/private/tmp/bookmarks.org")
```

We can now feed our list to our preferred narrowing framework (ivy, helm, ido, vertico) and use it to quickly select a bookmark. In the past, I've [used the likes of ivy-read](emacs-utilities-for-your-os/) directly, though have since adopted the humble but mighty `completing-read` which hooks up to any of the above frameworks.

With that in mind, let's use `completing-read` to make a selection and split the text to extract the corresponding URL. Feed it to `browse-url`, and you got your preferred browser opening your bookmark.

``` {.commonlisp org-language="emacs-lisp" lexical="no"}
(defun open-bookmark ()
  (interactive)
  (browse-url (seq-elt (split-string (completing-read "Open: " (browser-bookmarks "/private/tmp/bookmarks.org")) "\n") 1)))
```

I remain a happy ivy user, so we can see its fuzzy searching in action.

![](https://xenodium.github.io/images/building-your-own-bookmark-launcher/emacs-bookmark.gif)

At this point, we now have our bookmark-launching Emacs utility. It's only an `M-x open-bookmark` command away, but we want to make it accessible from anywhere in our operating system, in my case macOS.

Let's enable launching from the command line, though before we do that, let's craft a dedicated frame for this purpose.

``` {.commonlisp org-language="emacs-lisp" lexical="no"}
(defmacro present (&rest body)
  "Create a buffer with BUFFER-NAME and eval BODY in a basic frame."
  (declare (indent 1) (debug t))
  `(let* ((buffer (get-buffer-create (generate-new-buffer-name "*present*")))
          (frame (make-frame '((auto-raise . t)
                               (font . "Menlo 15")
                               (top . 200)
                               (height . 20)
                               (width . 110)
                               (internal-border-width . 20)
                               (left . 0.33)
                               (left-fringe . 0)
                               (line-spacing . 3)
                               (menu-bar-lines . 0)
                               (minibuffer . only)
                               (right-fringe . 0)
                               (tool-bar-lines . 0)
                               (undecorated . t)
                               (unsplittable . t)
                               (vertical-scroll-bars . nil)))))
     (set-face-attribute 'ivy-current-match frame
                         :background "#2a2a2a"
                         :foreground 'unspecified)
     (select-frame frame)
     (select-frame-set-input-focus frame)
     (with-current-buffer buffer
       (condition-case nil
           (unwind-protect
               ,@body
             (delete-frame frame)
             (kill-buffer buffer))
         (quit (delete-frame frame)
               (kill-buffer buffer))))))
```

Most of the snippet styles our new frame and invokes the body parameter. While I don't typically resort to macros, we get a little syntatic sugar here, so we can invoke like so:

``` {.commonlisp org-language="emacs-lisp" lexical="no"}
(defun present-open-bookmark-frame ()
  (present (browse-url (seq-elt (split-string (completing-read "Open: " (browser-bookmarks "/private/tmp/bookmarks.org")) "\n") 1))))
```

Wrapping our one-liner with the `present-open-bookmark-frame` function enables us to easily invoke from the command line, with something like

``` {.bash org-language="sh"}
emacsclient -ne "(present-open-bookmark-frame)"
```

![](https://xenodium.github.io/images/building-your-own-bookmark-launcher/command.gif)

Now that we can easily invoke from the command line, we have the flexibility to summon from anywhere. We can even bind to a key shortcut, available anywhere (not just Emacs). I typically do this via [Hammerspoon](http://www.hammerspoon.org/), with some helpers, though there are likely simpler options out there.

``` lua
function emacsExecute(activate, elisp)
   if activate then
      activateFirstOf({
            {
               bundleID="org.gnu.Emacs",
               name="Emacs"
            }
      })
   end

   local socket, found = emacsSocketPath()
   if not found then
      hs.alert.show("Could not get emacs socket path")
      return "", false
   end

   local output,success = hs.execute("/opt/homebrew/bin/emacsclient -ne \""..elisp.."\" -s "..socket)
   if not success then
      hs.alert.show("Emacs did not execute: "..elisp)
      return "", false
   end

   return output, success
end

function openBookmark()
   appRequestingEmacs = hs.application.frontmostApplication()
   emacsExecute(false, "(present-open-bookmark-frame)")
   activateFirstOf({
         {
            bundleID="org.gnu.Emacs",
            name="Emacs"
         }
   })
end

hs.hotkey.bind({"alt"}, "W", openBookmark)
```

With that, we have our Emacs-powered bookmark launcher, available from anywhere.

![](https://xenodium.github.io/images/building-your-own-bookmark-launcher/launcher.gif)

While we used our Emacs frame presenter to summon our universal bookmark launcher, we can likely the same mechanism for other purposes. Maybe a clipboard (kill ring) manager?

![](https://xenodium.github.io/images/building-your-own-bookmark-launcher/kill-ring.png)

What would you use it for? Get in touch ([Mastodon](https://indieweb.social/@xenodium) / [Twitter](https://twitter.com/xenodium) / [Reddit](https://www.reddit.com/user/xenodium) / [Email](mailto:me__AT__xenodium.com)).

*Enjoying this content? Find it useful? Consider ✨[sponsoring](https://github.com/sponsors/xenodium)✨.*

# \[2023-11-25 Sat\] Native Emacs/macOS UX integrations via Swift modules
---
id: native-emacsmacos-ux-integrations-via-swift-modules
---

Once you learn a little [elisp](https://en.wikipedia.org/wiki/Emacs_Lisp), [Emacs](https://www.gnu.org/software/emacs/) becomes this hyper malleable editor/platform. A live playground of sorts, where almost everything is up for grabs at runtime. Throw some elisp at it, and you can customize or extend almost anything to your heart's content. I say almost, as there's a comparatively small native core, that would typically require recompiling if you wanted to make further (native) mods. But that isn't entirely true. [Emacs 25](https://www.masteringemacs.org/article/whats-new-in-emacs-25-1) enabled us to further extend things by loading native [dynamic modules](https://www.gnu.org/software/emacs/manual/html_node/elisp/Dynamic-Modules.html), back in 2016.

Most of my Emacs-bending adventures have been powered by elisp, primarily on macOS. I also happen to have an iOS dev background, so when [Valeriy Savchenko](https://github.com/SavchenkoValeriy) [announced](https://www.reddit.com/r/emacs/comments/wemj1z/writing_emacs_dynamic_modules_in_swift/) his project bringing [Emacs dynamic modules powered by Swift](https://github.com/SavchenkoValeriy/emacs-swift-module), I added it to my never-ending list of things to try out.

Fast-forward to a year later, and [Roife](https://github.com/roife)'s [introduction](https://www.reddit.com/r/emacs/comments/17vrmrk/emt_emacs_macos_tokenizer_for_enhanced_cjk_word/) to [emt](https://github.com/roife/emt) finally gave me that much-needed nudge to give [emacs-swift-module](https://github.com/SavchenkoValeriy/emacs-swift-module) a try. While I wish I had done it earlier, I also wish [emacs-swift-module](https://github.com/SavchenkoValeriy/emacs-swift-module) had gotten more visibility. Native extensions written in Swift can open up some some neat integrations using native macOS UX/APIs.

While I'm new to Savchenko's [emacs-swift-module](https://github.com/SavchenkoValeriy/emacs-swift-module), the project has [wonderful documentation](https://savchenkovaleriy.github.io/emacs-swift-module/documentation/emacsswiftmodule/). It quickly got me on my way to build an experimental dynamic module introducing a native context menu for sharing files from my beloved editor.

![](https://xenodium.github.io/images/native-emacsmacos-ux-integrations-via-swift-modules/emacs-share.webp)

Most of the elisp/native bridging magic happens with fairly little Swift code:

``` swift
try env.defun(
  "macos-module--share",
  with: """
    Share files in ARG1.

    ARG1 must be a vector (not a list) of file paths.
    """
) { (env: Environment, files: [String]) in
  let urls = files.map { URL(fileURLWithPath: $0) }

  let picker = NSSharingServicePicker(items: urls)
  guard let view = NSApp.mainWindow?.contentView else {
    return
  }

  let x = try env.funcall("macos--emacs-point-x") as Int
  let y = try env.funcall("macos--emacs-point-y") as Int

  let rect = NSRect(
    x: x + 15, y: Int(view.bounds.height) - y + 15, width: 1, height: 1
  )
  picker.show(relativeTo: rect, of: view, preferredEdge: .maxY)
}
```

This produced an elisp `macos-module--share` function I could easily access from elisp like so:

``` {.commonlisp org-language="emacs-lisp" lexical="no"}
(defun macos-share ()
  "Share file(s) with other macOS apps.

If visiting a buffer with associated file, share it.

While in `dired', any selected files, share those.  If region is
active, share files in region.  Otherwise share file at point."
  (interactive)
  (macos-module--share (vconcat (macos--files-dwim))))
```

On a side note, `(macos--files-dwim)` chooses files depending on context. That is, [do what I mean (DWIM) style](emacs-dwim-do-what-i-mean/). If there's a file associated with current buffer, share it. When in [dired](https://www.gnu.org/software/emacs/manual/html_node/emacs/Dired.html) (the directory editor, aka file manager), look at region, selected files, or default to file at point.

``` {.commonlisp org-language="emacs-lisp" lexical="no"}
(defun macos--files-dwim ()
  "Return buffer file (if available) or marked/region files for a `dired' buffer."
  (if (buffer-file-name)
      (list (buffer-file-name))
    (or
     (macos--dired-paths-in-region)
     (dired-get-marked-files))))

(defun macos--dired-paths-in-region ()
  "If `dired' buffer, return region files.  nil otherwise."
  (when (and (equal major-mode 'dired-mode)
             (use-region-p))
    (let ((start (region-beginning))
          (end (region-end))
          (paths))
      (save-excursion
        (save-restriction
          (goto-char start)
          (while (< (point) end)
            ;; Skip non-file lines.
            (while (and (< (point) end) (dired-between-files))
              (forward-line 1))
            (when (dired-get-filename nil t)
              (setq paths (append paths (list (dired-get-filename nil t)))))
            (forward-line 1))))
      paths)))
```

I got one more example of a native macOS integration I added. Being an even simpler one, and in hindsight, I prolly should have introduced it first. In any case, this one reveals [dired](https://www.gnu.org/software/emacs/manual/html_node/emacs/Dired.html) files in macOS's Finder app (including the selection itself).

![](https://xenodium.github.io/images/native-emacsmacos-ux-integrations-via-swift-modules/reveal.webp)

``` swift
try env.defun(
  "macos-module--reveal-in-finder",
  with: """
    Reveal (and select) files in ARG1 in macOS Finder.

    ARG1 mus be a vector (not a list) of file paths.
    """
) { (env: Environment, files: [String]) in
  NSWorkspace.shared.activateFileViewerSelecting(files.map { URL(fileURLWithPath: $0) })
}
```

The corresponding elisp is nearly identical to its `macos-share` sibling:

``` {.commonlisp org-language="emacs-lisp" lexical="no"}
(defun macos-reveal-in-finder ()
  "Reveal file(s) in macOS Finder.

If visiting a buffer with associated file, reveal it.

While in `dired', any selected files, reveal those.  If region is
active, reveal files in region.  Otherwise reveal file at point."
  (interactive)
  (macos-module--reveal-in-finder (vconcat (macos--files-dwim))))
```

My Swift module experiment introduces two native macOS UX integrations, now available via `M-x macos-share` and `M-x macos-reveal-in-finder`. I've pushed all code to it's own [repo](https://github.com/xenodium/EmacsMacOSModule).

I hope this post brings visibility to the wonderful [emacs-swift-module](https://github.com/SavchenkoValeriy/emacs-swift-module) project and sparks new, native, and innovative integrations for those on macOS. Can't wait to see what others can do with it.

*Enjoying this content? Find it useful? Consider ✨[sponsoring](https://github.com/sponsors/xenodium)✨.*

# \[2023-11-16 Thu\] Migrating/re-encrypting pass's password store
---
id: migratingre-encrypting-passs-password-store
---

Note to self, I needed to migrate/re-encrypt someone's password store (aka pass). Straightforward:

Get the new key, probably already in gpg key chain. Try listing it:

``` {.bash org-language="sh"}
gpg --list-keys
```

To re-encrypt, `pass init` with new key is enough. It'll prompt for old pass key.

``` {.bash org-language="sh"}
cd path/to/.password-store
pass init NEW-GPG-KEY
```

# \[2023-10-30 Mon\] How I smash burgers
---
id: how-i-smash-burgers
---

I'm neither a burger expert nor a connoisseur of any kind, yet I sure have a lot of fun smashing burgers at home. Needless to say, I shamelessly enjoy gobbling them too!

<figure width="60%">
<img src="https://xenodium.github.io/images/how-i-smash-burgers/burger-cut.png" />
<figcaption>my smash burger</figcaption>
</figure>

I'll share details on how I smash my burgers, but here's a quick ingredient list, if that's all you need.

-   Mince beef (20%-30% fat).
-   Streaky bacon.
-   Brioche burger buns.
-   American cheese slices (cheddar individual slices work too).
-   Lettuce.
-   Tomatoes.
-   Onions.
-   Pickles.
-   Jalapeños.
-   Garlic.
-   Chipotle powder.
-   Mayonnaise.
-   Salt.
-   Pepper.
-   Oil.
-   Greaseproof paper.
-   Butter.

## The calling

My quest to smash burgers at home didn't start until earlier this year, while watching the [The Menu](https://www.imdb.com/title/tt9764362/). I just could't stop [craving the burger](https://indieweb.social/@xenodium/109734285674122246) from that scene, so I set out to start smashing my own.

![](https://xenodium.github.io/images/how-i-smash-burgers/the-menu.webp)

## The gear

Don't rush to buy anything fancy. Your existing gear will likely do the job just fine. I'd say try a few things out and only upgrade when needed. I'll share the gear I use and where I felt I needed tweaking.

## Skillet

While I didn't have a griddle at home, I did have a couple of trusty [Lodge](https://www.lodgecastiron.com/) **skillets** ([cast iron](https://www.lodgecastiron.com/product/round-cast-iron-classic-skillet?sku=L8SK3) and [carbon steel](https://www.lodgecastiron.com/product/carbon-steel-skillet?sku=CRS12)). Both work great for burgers, though I have a slight preference for the carbon steel one, as it's the bigger of the two and gives a little more room for manoeuvring, specially when smashing two burgers at a time.

![](https://xenodium.github.io/images/how-i-smash-burgers/cast-iron.png)

![](https://xenodium.github.io/images/how-i-smash-burgers/carbon.png)

Heat the skillet up and add a little oil. If the oil starts smoking, be quick to drop the patties and start smashing.

## Grill Spatula (too big/stiff for skillet)

Somewhat inspired by the film, I got myself a wide spatula so I could firmly press those patties against the skillet, and to flip of course.

While this kind of spatula may work well on a spacious griddle, I felt constrained on a relatively small cast iron. Specially when flipping. I went looking for an alternative.

![](https://xenodium.github.io/images/how-i-smash-burgers/spatula.png)

## Spatula + smasher (my winning combo)

Over at the [r/castiron](https://reddit.com/r/castiron/) subreddit, I discovered fish spatulas. They are fairly agile on cast irons but also work great for loosening burger patties before flipping.

![](https://xenodium.github.io/images/how-i-smash-burgers/ready.webp)

While effective for flipping, fish spatulas are obviously no good for smashing. So I got myself a burger smasher. This combo worked well for me.

![](https://xenodium.github.io/images/how-i-smash-burgers/smash.webp)

When smashing, use greaseproof paper to prevent the patties from sticking to the smasher.

## Ingredients

While I've drawn inspiration from others, I've landed on my own preferred ingredients. I'm sure that will continue changing over time. Pick and choose as your heart desires.

## Minced/ground beef

Minced beef with higher fat content (around 20-30%) is often recommended for a couple of reasons:

-   Flavour: Fat equals flavour in cooking. The higher fat content will melt during cooking and become 'self-basting', resulting in a juicier and more flavourful burger.

-   Texture: The fat in the beef melts under heat, helping the burger achieve a crispy, caramelized exterior known as the [Maillard reaction](https://en.wikipedia.org/wiki/Maillard_reaction), which contrasts nicely against the soft, juicy interior.

In the UK, I can typically find minced beef with 15%-20% fat content at the main supermarkets.

![](https://xenodium.github.io/images/how-i-smash-burgers/pattie.png)

Be sure to salt and pepper to taste (as in picture) on one side. Once flipped on pan, salt and pepper the other side.

## Bacon

I tend to prefer smoked streaky bacon, but hey these will be your burgers. Your burgers, your rules.

![](https://xenodium.github.io/images/how-i-smash-burgers/streaky.png)

## Buns (brioche)

I hear potato buns are great for burgers. I've yet to try them. So far, I've settled for brioche. I happen to find these near me, so I've gone with them.

![](https://xenodium.github.io/images/how-i-smash-burgers/brioche.png)

Butter the buns and brown on the skillet for a minute. Check the buns often. Brioche buns can burn quickly.

## American cheese

American cheese is often the burger cheese of choice.

![](https://xenodium.github.io/images/how-i-smash-burgers/american-cheese.webp)

While American cheese isn't widely available in the UK, the individually wrapped orange-looking cheddar cheese slices work just fine.

![](https://xenodium.github.io/images/how-i-smash-burgers/cheese.png)

## Toppings

I like my burgers with lettuce, tomatoes, onions, pickles, and occasionally jalapeños. For pickles, I typically just take cornichons and slice them up.

![](https://xenodium.github.io/images/how-i-smash-burgers/toppings_x0.30.png)

## Burger sauce (chipotle/garlic/mayo)

While classic burger sauce is often made with mayo, ketchup, pickles, and mustard, I've gone fairly rogue here.

You see, I love chipotle mayo. I'm also a fan of garlic mayo, so I figured why not both? Turns out these three ingredients work great together.

I like to draw out the flavours by first mixing the garlic and chipotle with a little hot water.

-   1 garlic clove.
-   2 teaspoons of chipotle powder.
-   1 tablespoon of hot water.
-   Pinch of salt.

![](https://xenodium.github.io/images/how-i-smash-burgers/sauce1.png)

![](https://xenodium.github.io/images/how-i-smash-burgers/sauce2.png)

![](https://xenodium.github.io/images/how-i-smash-burgers/sauce3.png)

…and then thicken with mayo.

-   1/4 cup of mayo.

![](https://xenodium.github.io/images/how-i-smash-burgers/sauce4.png)

![](https://xenodium.github.io/images/how-i-smash-burgers/sauce5.png)

These are very rough measurements, tweak to your preference. Make more garlicky, spicier, or soften things by adding garlic, chipotle, or mayo.

## Assembling

I like to assemble in the following order from the bottom bun up.

1.  Sauce on bottom bun.
2.  Lettuce.
3.  Tomatoes.
4.  Onions.
5.  2 patties (melted cheese on both).
6.  Bacon.
7.  Pickles.
8.  Jalapeños.
9.  Sauce on top bun (oops, I forgot in the picture).

![](https://xenodium.github.io/images/how-i-smash-burgers/open.png)

…and here's the final product.

![](https://xenodium.github.io/images/how-i-smash-burgers/burger-cut.png)

If you gave smashing burgers a go, I'd love to hear about it. Also any tips are very much welcome. Get in touch ([Mastodon](https://indieweb.social/@xenodium) / [Twitter](https://twitter.com/xenodium) / [Reddit](https://www.reddit.com/user/xenodium) / [Email](mailto:me__AT__xenodium.com)).

# \[2023-10-24 Tue\] Open in Xcode at line number
---
id: open-in-xcode-at-line-number
---

I live mostly in Emacs. I say mostly 'cause well, I'm fairly pragmatic about it. If there's a workflow elsewhere that's more appropriate for my needs, I'll happily use that instead. While I'd love to do my web browsing from my beloved editor, Firefox ticks the right boxes for me.

I do most of my iOS coding in Emacs. It's a hybrid of sorts between Emacs and Xcode. If I need to use the debugger, Xcode is a clear winner for me. If I happen to be visiting a Swift file in an Emacs buffer, I typically used the handy `crux-open-with` from [crux](https://github.com/bbatsov/crux) to open in Xcode, and continue from there. This worked OK, but I always wished opening in Xcode would also jump to the same line number as the Emacs point (cursor) location. This is particularly useful if I had just spotted where I'd like to set a breakpoint in an Emacs buffer and need to transition over to Xcode.

It turns out, there's a nifty command line utility for that. [xed](https://www.unix.com/man-page/osx/1/xed/), the Xcode text editor invocation tool. It enables telling Xcode what file to open and at what line number:

``` {.bash org-language="sh"}
xed -line 141 path/to/some/file.swift
```

With that in mind, I've added my own version of `crux-open-with`, using [dwim-shell-command](https://github.com/xenodium/dwim-shell-command).

When running on macOS, the function checks whether or not I'm visiting a buffer for a programming language, and opens the file in Xcode at the same line number.

``` {.commonlisp org-language="emacs-lisp" lexical="no"}
(defun dwim-shell-commands-open-externally ()
  "Open file(s) externally."
  (interactive)
  (dwim-shell-command-on-marked-files
   "Open externally"
   (if (eq system-type 'darwin)
       (if (derived-mode-p 'prog-mode)
           (format "xed --line %d '<<f>>'"
                   (line-number-at-pos (point)))
         "open '<<f>>'")
     "xdg-open '<<f>>'")
   :shell-args '("-x" "-c")
   :silent-success t
   :utils (if (eq system-type 'darwin)
              "open"
            "xdg-open")))
```

![](https://xenodium.github.io/images/open-in-xcode-at-line-number/xed_x0.8_x2.webp)

`dwim-shell-commands-open-externally` is now [added to dwim-shell-commands.el](https://github.com/xenodium/dwim-shell-command/commit/19be1c2f3792c95f04fd369cb931a52f7df9cfd5).

ps. If you find opening the same file in a different context handy, you may also like the package [browse-at-remote](https://github.com/rmuslimov/browse-at-remote) that opens the visited file at its corresponding remote location (for example, GitHub). I can never remember the name of the function ([browse-at-remote](https://github.com/rmuslimov/browse-at-remote)), so I aliased it to something I'd remember and moved on…

``` {.commonlisp org-language="emacs-lisp" lexical="no"}
(defalias 'ar/open-at-github #'browse-at-remote))
```

# \[2023-10-06 Fri\] Trimming video screenshots
---
id: trimming-video-screenshots
---

A quick one… I recently wanted to trim the black borders around a video screenshot. While I could use an image editor to manually select and trim, I wondered if there was an [imagemagick](https://imagemagick.org/) trick somewhere out there for such a thing… and of course there was:

``` {.bash org-language="sh"}
magick convert -fuzz 3% -define trim:percent-background=0% -trim +repage path/to/input.png path/to/output.png
```

Pretty neat. It does the job, but I won't remember it next time. May as well make another [dwim-shell-command](https://github.com/xenodium/dwim-shell-command) function out of it and conveniently invoke from Emacs via a memorable name plus fuzzy search.

![](https://xenodium.github.io/images/trimming-video-screenshots/trim.gif)

``` {.commonlisp org-language="emacs-lisp" lexical="no"}
(defun dwim-shell-commands-image-trim-borders ()
  "Trim image(s) border (useful for video screenshots)."
  (interactive)
  (dwim-shell-command-on-marked-files
   "Trim image border"
   "magick convert -fuzz 3% -define trim:percent-background=0% -trim +repage '<<f>>' '<<fne>>_trimmed.<<e>>'"
   :utils "magick"))
```

While the screenshot I've just used was a little blurry, it's from the movie [Tron Legacy](https://www.imdb.com/title/tt1104001/), and it features Emacs eshell. This is old news, though [well covered](https://irreal.org/blog/?p=9573).

![](https://xenodium.github.io/images/trimming-video-screenshots/eshell_trimmed.png)

`dwim-shell-commands-image-trim-borders` is now [added to dwim-shell-commands.el](https://github.com/xenodium/dwim-shell-command/commit/5bed2f6b40761db4913c8d8f58bb147c71a9ceb7)

# \[2023-10-06 Fri\] Displaying image details in mode line
---
id: displaying-image-details-in-mode-line
---

A benefit of running Emacs as a GUI app, is that you can view images from your beloved editor. This is super handy to take a quick peek at any image.

Sometimes, I'd like a little more than just viewing the image. I'd like to see basic image details like type, dimensions, and file size. The [imagemagick](https://imagemagick.org/) `identify` utility is pretty handy for that.

``` bash
identify -format "%m %wx%h %b" path/to/image.png
```

I could easily invoke `shell-command` for this or even create a [dwim-shell-command](https://github.com/xenodium/dwim-shell-command) function (maybe I will), but if this info was proactively displayed in the mode line, I wouldn't have to fetch it myself.

Since I know I can use the `identify` command for this, I may as well see if I can plug it into the mode line.

Turns out this wasn't too bad by setting `setting mode-line-format`. I added a little logic to only include image details while in `image-mode` and rely on `process-lines` to fetch the details. This function returns a list, which is a happy coincidence since `mode-line-format` also expects a list.

``` {.commonlisp org-language="emacs-lisp" lexical="no"}
(setq-default mode-line-format
              '(" "
                mode-line-front-space
                mode-line-client
                mode-line-frame-identification
                mode-line-buffer-identification
                (:eval
                 (when (eq major-mode 'image-mode)
                   ;; Needs imagemagick installed.
                   (process-lines "identify" "-format" "[%m %wx%h %b]" (buffer-file-name))))
                " "
                mode-line-position
                (vc-mode vc-mode)
                (multiple-cursors-mode mc/mode-line)
                " " mode-line-modes
                mode-line-end-spaces))
```

![](https://xenodium.github.io/images/displaying-image-details-in-mode-line/buddies.png)

I'd love to hear if there's a pure elisp alternative ([mastodon](https://indieweb.social/@xenodium)/[twitter](https://twitter.com/xenodium)). I gave `(image-size (image-get-display-property) :pixels)` a try, but that seemed to return the display size in buffer rather than actual file size.

# \[2023-10-06 Fri\] Creating an iCloud account (via tart VM)
---
id: creating-icloud-test-accounts
---

*UPDATE: This method no longer works for creating iCloud accounts. I'd love to know if you find an alternative. Please let me know.*

I wanted an additional \@icloud.com account for myself. My first thought was to head over to <https://developer.apple.com> and create a new account, but that requires an existing email address. I wanted an actual \@icloud.com email address.

![](https://xenodium.github.io/images/creating-icloud-test-accounts/web.png)

My next thought was to create a new account using the iOS simulator, but that complained about creating too many accounts already. Strange, as I hadn't created any.

![](https://xenodium.github.io/images/creating-icloud-test-accounts/iphone.png)

I could create an account from macOS settings itself, though that would require logging out my current account (and the syncing implications). To get around that, I could maybe create a temporary macOS user. Instead, I somewhat revisited the simulator route and looked for a VM option to run macOS. This gave me an excuse to play with VM options on macOS.

I had been meaning to check out [lima](https://github.com/lima-vm/lima) as per Hacker News's [Lima: A nice way to run Linux VMs on Mac](https://news.ycombinator.com/item?id=36668964). The Hacker News's [thread](https://news.ycombinator.com/item?id=36668964) has a handful of great recommendations. Amongst them, [tart](https://github.com/cirruslabs/tart/) (macOS and Linux VMs on Apple Silicon) stood out, as it also gave me the Mac on Mac option.

Installing `tart` via [Homebrew](https://brew.sh/) followed the typical `brew` command… a breeze via my trusty Emacs [eshell](https://www.masteringemacs.org/article/complete-guide-mastering-eshell):

``` {.bash org-language="sh"}
brew install cirruslabs/cli/tart
```

Cloning a VM image, while straightforward, it did take a little while for the chunky download:

``` {.bash org-language="sh"}
tart clone ghcr.io/cirruslabs/macos-sonoma-base:latest sonoma-base
```

Running the macOS Sonoma VM was a breeze:

``` {.bash org-language="sh"}
tart run sonoma-base
```

…and with that, I got a full (and disposable) macOS VM I can use to create another \@icloud.com account:

![](https://xenodium.github.io/images/creating-icloud-test-accounts/sonoma1.png)

![](https://xenodium.github.io/images/creating-icloud-test-accounts/sonoma2.png)

While there may be simpler options out there to create an \@icloud.com account (please do let me know [mastodon](https://indieweb.social/@xenodium)/[twitter](https://twitter.com/xenodium)), the VM did the job. I'd been meaning to find a low friction mechanism to run VMs for a different reason, but that's a post for another time.

# \[2023-10-04 Wed\] Virtual machine (VM) bookmarks
---
id: virtual-machine-vm-bookmarks
---



-   [colima: Container runtimes on macOS (and Linux) with minima…](https://github.com/abiosoft/colima).
-   [finch: The Finch CLI an open source client for container development](https://github.com/runfinch/finch).
-   [lima VM - Linux Virtual Machines On macOS - Earthly Blog](https://earthly.dev/blog/lima/).
-   [lima: A nice way to run Linux VMs on Mac \| Hacker News](https://news.ycombinator.com/item?id=36668964).
-   [lima: Linux virtual machines](https://github.com/lima-vm/lima).
-   [macpine: Lightweight Linux VMs on MacOS](https://github.com/beringresearch/macpine).
-   [OrbStack · Fast, light, simple Docker & Linux on macOS](https://orbstack.dev/).
-   [tart: macOS and Linux VMs on Apple Silicon to use in CI a…](https://github.com/cirruslabs/tart/).
-   [Virtualisation on Apple silicon – The Eclectic Light Company](https://eclecticlight.co/virtualisation-on-apple-silicon/).

# \[2023-09-16 Sat\] Emacs hangs saving .authinfo.gpg (workaround)
---
id: emacs-hangs-saving-authinfogpg-workaround
---

My Emacs (v29.1) was hanging when saving changes to .authinfo.gpg. Turns out, I ran into a [known issue](http://git.savannah.gnu.org/cgit/emacs.git/commit/etc/PROBLEMS?id=1b9812af80b6ceec8418636dbf84c0fbcd3ab694) with a workaround. Downgrading gnupgp to a version older than 2.4.1 sorts things out.

I'm on macOS. Downgraded by downloading the 2.4.0 Homebrew formula at <https://raw.githubusercontent.com/Homebrew/homebrew-core/59edfe598541186430d49cc34f42671e849e2fc9/Formula/gnupg.rb> and installing with:

``` {.bash org-language="sh"}
brew unlink gnupg
brew install ~/Downloads/gnupg.rb
```

# \[2023-09-15 Fri\] Redact that buffer
---
id: redact-that-buffer
---

As I was getting ready to take an Emacs screenshot in the [previous post](emacs-send-to-kindle/), I figured I may want to redact email addresses before moving forward. I had a quick look for existing options and found [redacted.el](https://github.com/bkaestner/redacted.el), built-in `toggle-rot13-mode`, and [unpackaged/lorem-ipsum-overlay](https://github.com/alphapapa/unpackaged.el#obfuscate-buffer-text-with-lorem-ipsum-words). All great options. I wanted a solution I could feed a single regular expression to obscure matches. I also wanted toggling capabilities, so I had a quick go at it…

![](https://xenodium.github.io/images/redact-that-buffer/redact-regexp.gif)

I also wanted the ability to redact the entire buffer content, so feeding a space to the regexp query also translates to `[[:graph:]]`, effectively redacting all visible characters.

![](https://xenodium.github.io/images/redact-that-buffer/redact-all.gif)

The solution is overlay-based, ensuring the buffer content remains unchanged. The function may have its own rough edges, yet it certainly scratched the itch for the current need. I'll leave ya with the snippet.

``` {.commonlisp org-language="emacs-lisp" lexical="no"}
(defun ar/toggle-redact-buffer ()
  "Redact buffer content matching regexp. A space redacts all."
  (interactive)
  (let* ((redacted)
         (regexp (string-trim (read-regexp "Redact regexp" 'regexp-history-last)))
         (matches (let ((results '()))
                    (when (string-empty-p regexp)
                      (setq regexp "[[:graph:]]")
                      (setq regexp-history-last regexp)
                      (add-to-history 'regexp-history regexp))
                    (save-excursion
                      (goto-char (point-min))
                      (while (re-search-forward regexp nil t)
                        (push (cons (match-beginning 0) (match-end 0)) results)))
                    (nreverse results))))
    (mapc (lambda (match)
            (dolist (overlay (overlays-in (car match) (cdr match)))
              (setq redacted t)
              (delete-overlay overlay))
            (unless redacted
              (overlay-put (make-overlay (car match) (cdr match))
                           'display (make-string (- (cdr match) (car match)) ?x))))
          matches)))
```

# \[2023-09-15 Fri\] Send note to Kindle
---
id: emacs-send-to-kindle
---

While on Mastodon, I spotted [\@summeremacs](https://indieweb.social/@summeremacs@fashionsocial.host) looking into [sending Emacs text selections to a Kindle via email](https://indieweb.social/@summeremacs@fashionsocial.host/111058226788825431). This sparked my interest as I previously looked into [sending pdfs to my Kindle](emailing-pdfs-to-kindle-from-mu4e/) via [mu4e](https://github.com/djcb/mu).

Kindle offers a neat service where you can email a file to your `@kindle.com` address and it automatically shows up in your Kindle library.

I already do email from my beloved editor, and like most Emacs things, it's powered by [elisp](https://en.wikipedia.org/wiki/Emacs_Lisp). In other words, it's basically up for grabs if you'd like to glue it to anything else, so I did…

I can now select a region and invoke `M-x send-to-kindle-as-txt` to send it over to my Kindle.

![](https://xenodium.github.io/images/emacs-send-to-kindle/send-to-my-kindle.gif)

Soon enough, the note shows up on my Kindle.

![](https://xenodium.github.io/images/emacs-send-to-kindle/listed.png)

Opening the note reveals the same content we had previously selected and sent from our malleable editor.

![](https://xenodium.github.io/images/emacs-send-to-kindle/repeated.png)

While it looks kinda magical, it's fairly simple under the hood. It takes the region content, writes it to a txt file, creates an email message buffer attaching the file, and finally sends via `message-send-and-exit`.

If `M-x send-to-kindle-as-txt` is invoked with a `C-u` prefix, you get to inspect the message buffer right before sending via `C-c C-c`.

![](https://xenodium.github.io/images/emacs-send-to-kindle/email.png)

Here's the full snippet.

``` {.commonlisp org-language="emacs-lisp" lexical="no"}
(defcustom send-to-kindle-from-email
  nil
  "Your own email address to send from via mu4e."
  :type 'string
  :group 'send-to-kindle)

(defcustom send-to-kindle-to-email
  nil
  "Your Kindle email address to send pdf to."
  :type 'string
  :group 'send-to-kindle)

(defun send-to-kindle-as-txt (review)
  (interactive "P")
  (unless send-to-kindle-from-email
    (setq send-to-kindle-from-email
          (read-string "From email address: ")))
  (unless send-to-kindle-to-email
    (setq send-to-kindle-to-email
          (read-string "To email address: ")))
  (let* ((content (string-trim (if (region-active-p)
                                   (buffer-substring (region-beginning) (region-end))
                                 (buffer-string))))
         (note-name (let ((name (string-trim (read-string "Note name: "))))
                      (if (string-empty-p name)
                          (nth
                           0 (string-split
                              (substring content 0 (min 40 (length content))) "\n"))
                        name)))
         (path (concat (temporary-file-directory) note-name))
         (txt (concat path ".txt"))
         (buffer (get-buffer-create (generate-new-buffer-name "*Email txt*"))))
    (with-temp-buffer
      (insert content)
      (write-file txt))
    (with-current-buffer buffer
      (erase-buffer)
      ;; Disable hooks
      (let ((message-mode-hook nil))
        (message-mode))
      (insert
       (format
        "From: %s
To: %s
Subject: %s
--text follows this line--
<#multipart type=mixed>
<#part type=\"text/plain\" filename=\"%s\" disposition=attachment>
<#/part>
<#/multipart>"
        send-to-kindle-from-email
        send-to-kindle-to-email
        note-name txt))
      (unless review
        (message-send-and-exit)))
    (when review
      (switch-to-buffer buffer))))
```

By the way, and I only just learned this today… To take a screenshot on a Kindle Paperwhite, tap on these opposite corners.

![](https://xenodium.github.io/images/emacs-send-to-kindle/tap-screenshot.png)

# \[2023-09-10 Sun\] SHA-256 hash from URL, the easy way
---
id: sha-256-hash-from-url-the-easy-way
---

From time to time, I need to generate a SHA-256 hash from a file hosted on some server. For me, this flow typically goes something along the lines of:

-   Copy the file URL from browser.
-   Drop to Emacs eshell.
-   Change current directory.
-   Type "curl -o file"
-   Paste the file URL.
-   Run curl command.
-   Type "shasum -a 256 file".
-   Run [shasum](https://linux.die.net/man/1/shasum) command.
-   Copy the generated hash.
-   Maybe delete the downloaded file?

We can maybe shave some steps off by downloading directly from the browser, though that may also bring additional clicks and navigating to a download location.

Amongst the steps, [shasum](https://linux.die.net/man/1/shasum) is the star player, and its output can be seen below.

``` bash
shasum -a 256 path/to/downloaded/file
```

Not a huge deal. One can copy the hash from the output, but why go through multiple small manual steps when I know I can get Emacs to simplify the lot? I've expedited a similar flow in the past when [cloning git repos](emacs-clone-git-repo-from-clipboard/). Let's simplify again so hashing a hosted file boils down to:

-   Copy the file URL from browser.
-   Run an Emacs interactive command.

This is where I pull out [dwim-shell-command](https://github.com/xenodium/dwim-shell-command) (a little package I wrote) and glue the lot to get an expedited experience.

![](https://xenodium.github.io/images/sha-256-hash-from-url-the-easy-way/hash.gif)

There isn't much to the function other than glueing a little elisp and a shell script via `dwim-shell-command` for some buffer/error handling.

``` {.commonlisp org-language="emacs-lisp" lexical="no"}
(defun dwim-shell-commands-sha-256-hash-file-at-clipboard-url ()
  "Download file at clipboard URL and generate SHA-256 hash."
  (interactive)
  (let ((url (current-kill 0)))
    (unless (string-match-p "^http[s]?://" url)
      (user-error "No URL in clipboard"))
    (dwim-shell-command-on-marked-files
     "Generate SHA-256 hash from clipboard URL."
     (format
      "temp_file=$(mktemp)
       function cleanup {
         rm -f $temp_file
       }
       trap cleanup EXIT
       curl --no-progress-meter --location --fail --output $temp_file %s || exit 1
       shasum -a 256 $temp_file | awk '{print $1}'"
      (shell-quote-argument url))
     :utils '("curl" "shasum")
     :on-completion
     (lambda (buffer process)
       (if-let ((success (= (process-exit-status process) 0))
                (hash (with-current-buffer buffer
                        (string-trim (buffer-string)))))
           (progn
             (kill-buffer buffer)
             (kill-new hash)
             (message "Copied %s to clipboard"
                      (propertize hash 'face 'font-lock-string-face)))
         (switch-to-buffer buffer))))))
```

`dwim-shell-commands-sha-256-hash-file-at-clipboard-url` is now in [dwim-shell-commands.el](https://github.com/xenodium/dwim-shell-command/blob/main/dwim-shell-commands.el), the optional counterpart in [dwim-shell-command](https://github.com/xenodium/dwim-shell-command/).

## UPDATE

There's better way. Thanks to [Philip Kaludercic](https://emacs.ch/@pkal) for [suggesting](https://emacs.ch/@pkal/111041928308815477) `curl -s example.com | sha256sum - | cut -d " " -f1` and [Sacha Chua](https://emacs.ch/@sachac) who pinged me about it.

Also note I'm now relying on the `<<cb>>` template, since dwim-shell-command replaces it with the clipboard/kill ring.

``` {.commonlisp org-language="emacs-lisp" lexical="no"}
(defun dwim-shell-commands-sha-256-hash-file-at-clipboard-url ()
  "Download file at clipboard URL and generate SHA-256 hash."
  (interactive)
  (unless (string-match-p "^http[s]?://" (current-kill 0))
    (user-error "No URL in clipboard"))
  (dwim-shell-command-on-marked-files
   "Generate SHA-256 hash from clipboard URL."
   "curl -s '<<cb>>' | sha256sum - | cut -d ' ' -f1"
   :utils '("curl" "sha256sum")
   :on-completion
   (lambda (buffer process)
     (if-let ((success (= (process-exit-status process) 0))
              (hash (with-current-buffer buffer
                      (string-trim (buffer-string)))))
         (progn
           (kill-buffer buffer)
           (kill-new hash)
           (message "Copied %s to clipboard"
                    (propertize hash 'face 'font-lock-string-face)))
       (switch-to-buffer buffer)))))
```

# \[2023-09-05 Tue\] Inline previous result and why you should edebug
---
id: inline-previous-result-and-why-you-should-edebug
---

Artur Malabarba's [Debugging Elisp Part 1: Earn your independence](https://endlessparentheses.com/debugging-emacs-lisp-part-1-earn-your-independence.html) is nearly a decade old, yet it rings just as true today.

Learning to Edebug really *"is the right decision for anyone who doesn't know how to Edebug."* Why, you may ask? He best puts it as *"running into errors is not only a consequence of tinkering with your editor, it is the only road to graduating in Emacs."*

For me personally, it *earned me that independence* to bend Emacs my way. Don't like how something works? Pull up the debugger to help me understand how a package or function works. I've done this countless of times to bend things my way.

Speaking of edebug, I had been meaning to tweak edebug's result display behaviour for quite some time. As you step through code, edbug prints the result of previous expressions to the minibuffer. This works well, but I couldn't help but feel like my eyes were constantly jumping between the code and the minibuffer at the bottom of the window.

![](https://xenodium.github.io/images/inline-previous-result-and-why-you-should-edebug/edebug-minibuffer.gif)

I wanted to minimize the eye jumping experience, so I figured I could likely bend things my way and print the result at point. How did I go about it? The same way I often do. Figure out what function is called for a given key binding via [describe-key](https://www.gnu.org/software/emacs/manual/html_node/emacs/Key-Help.html) or my favourite replacement helpful-key from [helpful.el](https://github.com/Wilfred/helpful). This led me to `edebug-next-mode` in `edebug.el`. At that point, I could have set a breakpoint in `edebug-next-mode` and eventually step into the relevant code, but hey we had a better clue. We knew that all output started with "Result:", so we could just search for that string in `edebug.el` instead. Jackpot! `edebug-compute-previous-result` and its adjacent `edebug-previous-result` are just the right functions:

``` {.commonlisp org-language="emacs-lisp" lexical="no"}
(defun edebug-compute-previous-result (previous-value)
  (if edebug-unwrap-results
      (setq previous-value
            (edebug-unwrap* previous-value)))
  (setq edebug-previous-result
        (concat "Result: "
                (edebug-safe-prin1-to-string previous-value)
                (eval-expression-print-format previous-value))))

(defun edebug-previous-result ()
  "Print the previous result."
  (interactive)
  (message "%s" edebug-previous-result))
```

We can see that `edebug-previous-result` invokes `message` which is responsible for displaying the debugged expression's result in the minibuffer. Modifying this functions behaviour would be enough to achieve inline display, but I also want to remove "Result:" from the displayed message. Neither of these functions offer configurability, so we'll resort to advising both functions. That is, [monkey patch](https://en.wikipedia.org/wiki/Monkey_patch) them (errm I know… lovely).

``` {.commonlisp org-language="emacs-lisp" lexical="no"}
(defun adviced:edebug-compute-previous-result (_ &rest r)
  "Adviced `edebug-compute-previous-result'."
  (let ((previous-value (nth 0 r)))
    (if edebug-unwrap-results
        (setq previous-value
              (edebug-unwrap* previous-value)))
    (setq edebug-previous-result
          (edebug-safe-prin1-to-string previous-value))))

(advice-add #'edebug-compute-previous-result
            :around
            #'adviced:edebug-compute-previous-result)
```

`adviced:edebug-compute-previous-result` removes "Result:" in addition to dropping `(eval-expression-print-format previous-value)`, which I don't typically rely on.

``` {.commonlisp org-language="emacs-lisp" lexical="no"}
(require 'eros)

(defun adviced:edebug-previous-result (_ &rest r)
  "Adviced `edebug-previous-result'."
  (eros--make-result-overlay edebug-previous-result
    :where (point)
    :duration eros-eval-result-duration))

(advice-add #'edebug-previous-result
            :around
            #'adviced:edebug-previous-result)
```

`adviced:edebug-previous-result` is in charge of display via `message`, so all we need is some replacement. I initially played with [popup-tip](https://github.com/auto-complete/popup-el) and that [did the job just fine](https://indieweb.social/@xenodium/111008598580447299), but [Colin](https://emacs.ch/@fosskers) led me to a better path while [pointing to Clojure and Common Lisp](https://emacs.ch/@fosskers/111009811997698187). This reminded me of [eros: Evaluation Result OverlayS for Emacs Lisp](https://github.com/xiongtx/eros), which I already used. Swapping `message` for `eros--make-result-overlay` did the trick. Yes, this is a private function, but I can live with that. This code is only an `advice-remove` away from disabling, but hey look at those *inline results*!

![](https://xenodium.github.io/images/inline-previous-result-and-why-you-should-edebug/edebug-inline.gif)

# \[2023-08-27 Sun\] Further sqlite-mode extensions
---
id: further-sqlite-mode-extensions
---

I've continued poking at Emacs 29's sqlite-mode. Since [my last post on extensions](sqlite-mode-goodies/), I've experimented a little with adding a handful of interactive functions:

-   `sqlite-mode-extras-compose-and-execute`: Compose and execute a query.

![](https://xenodium.github.io/images/further-sqlite-mode-extensions/compose-execute.gif)

-   `sqlite-mode-extras-execute`: Execute a query.

![](https://xenodium.github.io/images/further-sqlite-mode-extensions/execute.gif)

-   `sqlite-mode-extras-add-row`: Add row to table at point.

![](https://xenodium.github.io/images/further-sqlite-mode-extensions/add-row.gif)

-   `sqlite-mode-extras-delete-row-dwim`: Similar to `sqlite-mode-delete` but also enables deleting range in region.

![](https://xenodium.github.io/images/further-sqlite-mode-extensions/delete-rows.gif)

-   `sqlite-mode-extras-refresh`: Refreshes the buffer re-querying the database.
-   `sqlite-mode-extras-ret-dwim`: If on table, toggle expansion. If on row, edit it.
-   `sqlite-mode-extras-execute-and-display-select-query`: Executes a query and displays results.

![](https://xenodium.github.io/images/further-sqlite-mode-extensions/select-earth.gif)

I've been playing with the following key bindings:

``` {.commonlisp org-language="emacs-lisp" lexical="no"}
(use-package sqlite-mode-extras
  :bind (:map
         sqlite-mode-map
         ("n" . next-line)
         ("p" . previous-line)
         ("b" . sqlite-mode-extras-backtab-dwim)
         ("f" . sqlite-mode-extras-tab-dwim)
         ("+" . sqlite-mode-extras-add-row)
         ("D" . sqlite-mode-extras-delete-row-dwim)
         ("C" . sqlite-mode-extras-compose-and-execute)
         ("E" . sqlite-mode-extras-execute)
         ("S" . sqlite-mode-extras-execute-and-display-select-query)
         ("DEL" . sqlite-mode-extras-delete-row-dwim)
         ("g" . sqlite-mode-extras-refresh)
         ("<backtab>" . sqlite-mode-extras-backtab-dwim)
         ("<tab>" . sqlite-mode-extras-tab-dwim)
         ("RET" . sqlite-mode-extras-ret-dwim)))
```

The code lives in [sqlite-mode-extras.el](https://github.com/xenodium/dotsies/blob/main/emacs/ar/sqlite-mode-extras.el) under my [Emacs config repo](https://github.com/xenodium/dotsies/tree/main). Beware, it's fairly experimental and hasn't been tested thoroughly.

# \[2023-08-22 Tue\] My custom Tesco Clubcard pkpass
---
id: my-custom-tesco-clubcard-pkpass
---

My significant other and I had two plastic Tesco Clubcards. I lost mine, so I took a picture of hers. I was fairly certain a barcode photo would scan just as well at self-checkout, and it did.

This got me thinking about Apple's Wallet [pkpasses](https://en.wikipedia.org/wiki/PKPASS). I don't really know much about them. Could I potentially create my own `.pkpass`? If I could just include the same barcode as in the photo, it should do the job just fine.

Now I should mention, [Tesco does have an app on the App Store](https://apps.apple.com/gb/app/tesco-grocery-clubcard/id389581236). If you just want the official Wallet pass on your iPhone, use that. But I was curious about whether or not I could create my own pass.

Turns out I *can*. I followed Apple's [building your first pass](https://developer.apple.com/library/archive/documentation/UserExperience/Conceptual/PassKit_PG/YourFirst.html) which runs you through [creating Wallet identifiers/certificates](https://developer.apple.com/help/account/configure-app-capabilities/create-wallet-identifiers-and-certificates), editing `pass.json`, and downloading/building [signpass](https://developer.apple.com/services-account/download?path=/iOS/Wallet_Support_Materials/WalletCompanionFiles.zip) (the utility used to sign `.pass` bundles).

The `signpass` utility is included in WalletCompanionFiles.zip, which comes with a handful of sample passes.

``` {.commonlisp org-language="emacs-lisp" lexical="no"}
WalletCompanionFiles
│
├── SamplePasses
│   │
│   ├── BoardingPass.pass
│   ├── Coupon.pass
│   ├── Event.pass
│   ├── Event.pkpass
│   ├── Generic.pass
│   └── StoreCard.pass
│       │
│       ├── pass.json
│       └── ...
└── signpass
```

Being a rewards card, I opted to look into `StoreCard.pass`, but like all other passes, the `barcode` itself is what makes each pass scannable. The barcode details are specified in the bundles's `pass.json` file. I needed to figure out the relevant values describing the Tesco barcode.

``` json
"barcode": {
  "format": "???",
  "message": "???",
  "messageEncoding": "???"
}
```

I had no clue what values I should use for a Tesco Clubcard. I did, however, have a photo of the barcode I needed. This is in fact what prompted looking into [scanning barcodes from Emacs](emacs-scan-this-qrcode), which worked just great. It gave me all the crucial bits for the Clubcard.

``` json
"barcode": {
  "format": "PKBarcodeFormatCode128",
  "message": "1234567890123456",  // not my actual Clubcard number of course.
  "messageEncoding": "iso-8859-1"
}
```

That's all that's needed for the barcode section, the most useful part of the pass. We're not done though. We also need our registered Wallet identifiers, so the `signpass` utility can sign.

``` json
"passTypeIdentifier": "my.com.identifier.passmaker", // also not my actual one.
"teamIdentifier": "AAABBBCCCD", // nor this one.
```

We should be able to sign the pass with the following:

``` {.bash org-language="sh"}
signpass -p StoreCard.pass
```

We're technically done. We now have a working card, but it looks just like the sample store card included in WalletCompanionFiles.

![](https://xenodium.github.io/images/my-custom-tesco-clubcard-pkpass/lemons.png)

What's the fun in that? Now that I can make my own Clubcard, let's customize it!

For imagery, I replaced a couple of images in the .pass bundle:

``` c
StoreCard.pass
│
├── pass.json
├── icon.png
├── logo.png // replaced
└── strip.png // replaced
```

I replaced `logo.png` using a [Tesco logo I found on Wikipedia](https://en.wikipedia.org/wiki/File:Tesco_Logo.svg). I had initially removed `strip.png`, but that made the card feel a little empty. I was thinking of using a Tesco carrier bag to bulk the space up. While I didn't find a suitable bag image, I did land on "[Very Little Helps, 2008](https://banksyexplained.com/very-little-helps-2008/)". Using my limited [GIMP](https://www.gimp.org/) skills, I cropped one of the images and also replaced `strip.png`.

The remaining customizations took place in `pass.json` and should be fairly self-explanatory. There's the text shown in all labels as well as three customizable colours (background, label, and foreground).

``` json
{
  "formatVersion": 1,
  "passTypeIdentifier": "my.com.identifier.passmaker", // also not my actual one.
  "teamIdentifier": "AAABBBCCCD", // nor this one.
  "serialNumber": "AnySerialNumberYouWant",
  "barcode": {
    "format": "PKBarcodeFormatCode128",
    "message": "1234567890123456",
    "messageEncoding": "iso-8859-1"
  },
  "organizationName": "Not Tesco of course",
  "description": "Not a Tesco reqards card",
  "logoText": "Clubcard",
  "foregroundColor": "rgb(255, 255, 255)",
  "labelColor": "rgb(255, 255, 255)",
  "backgroundColor": "rgb(2, 81, 158)", // Blue for that Tesco look
  "storeCard": {
    "auxiliaryFields": [
      {
        "key": "membership",
        "label": "Member since 2023",
        "value": ""
      },
      {
        "key": "membership2",
        "label": "Expires sometime",
        "value": ""
      }
    ]
  }
}
```

…and with all that, here's what my very own custom Tesco Clubcard pkpass looks like. As you can appreciate, my image-editing skills aren't all that great, but hey this will do for now.

![](https://xenodium.github.io/images/my-custom-tesco-clubcard-pkpass/bsy.png)

## Update

Redditor u/stupergenius [suggested using the image's original background color](https://www.reddit.com/r/programming/comments/15y4c65/comment/jxa1obg/?utm_source=share&utm_medium=web2x&context=3). Nice suggestion. Tweaked via pass.json:

``` json
"foregroundColor": "rgb(2, 81, 158)",
"labelColor": "rgb(15, 58, 105)",
"backgroundColor": "rgb(166, 202, 214)",
```

![](https://xenodium.github.io/images/my-custom-tesco-clubcard-pkpass/bsy-light.png)

# \[2023-08-07 Mon\] Extending sqlite-mode (cell navigation + edits)
---
id: sqlite-mode-goodies
---

I recently [wrote about Emacs 29's new sqlite-mode](emacs-29s-sqlite-mode/), which enables you to browse sqlite databases from your beloved editor.

Out of the box, it supports the following browsing features:

-   `sqlite-mode-list-data`: List the data from the table under point.
-   `sqlite-mode-list-column`: List the columns of the table under point.
-   `sqlite-mode-list-tables`: Re-list the tables from the currently selected database.

On the editing side of things it supports row deletion:

-   `sqlite-mode-delete`: Delete the row under point.

While fairly spartan, it lays foundations for additional tools and features.

Two features I would like to have:

1.  TAB navigation across table rows and columns.
2.  Updating the row's field at point.

This would give me the familiar behaviour I'm used to in my org tables as well as other common spreadsheet tools.

Luckily, this is Emacs, so we can bend it our way… and I sure did!

Here's tab navigating forward:

![](https://xenodium.github.io/images/sqlite-mode-goodies/sqlite-forward.gif)

Here's tab navigating backward:

![](https://xenodium.github.io/images/sqlite-mode-goodies/sqlite-previous.gif)

And updating row fields:

![](https://xenodium.github.io/images/sqlite-mode-goodies/sqlite-edits.gif)

Most of the navigation is achieved by querying the current buffer to figure out column positions. Editing was in some ways easier, as I looked at `sqlite-mode-delete` to figure out how it handled the query.

To get the more familiar navigation behaviour, I've adjusted my key bindings as follows:

``` {.commonlisp org-language="emacs-lisp" lexical="no"}
(use-package sqlite-mode-extras
  :bind (:map
         sqlite-mode-map
         ("n" . next-line)
         ("p" . previous-line)
         ("<backtab>" . sqlite-mode-extras-backtab-dwim)
         ("<tab>" . sqlite-mode-extras-tab-dwim)
         ("RET" . sqlite-mode-extras-ret-dwim)))
```

The code for `sqlite-mode-extras-tab-dwim`, `sqlite-mode-extras-backtab-dwim`, and `sqlite-mode-extras-ret-dwim` is little rough still (hacky even), but hey still fun.

For now, the code lives in [sqlite-mode-extras.el](https://github.com/xenodium/dotsies/blob/main/emacs/ar/sqlite-mode-extras.el) under my [Emacs config repo](https://github.com/xenodium/dotsies/tree/main). Improvements/fixes totally welcome!

# \[2023-08-06 Sun\] Emacs 29's sqlite-mode
---
id: emacs-29s-sqlite-mode
---

I've jumped on the Emacs 29 bandwagon! Mickey Petersen has a great rundown of [What's New in Emacs 29.1](https://www.masteringemacs.org/article/whats-new-in-emacs-29-1).

Now every so often, I need to take a quick peek at an [sqlite3](https://www.sqlite.org/index.html) table. Emacs 29.1 ships [sqlite-mode](https://www.gnu.org/software/emacs/manual/html_node/elisp/Database.html), which can help with that. Use `sqlite-mode-open-file` to open a database.

Pressing `RET` on a table shows its content via `sqlite-mode-list-data`. `DEL` does as you'd expect and delete a row via `sqlite-mode-delete`.

![](https://xenodium.github.io/images/emacs-29s-sqlite-mode/sqlite-mode.gif)

# \[2023-07-30 Sun\] Emacs: scan this QR/bar code
---
id: emacs-scan-this-qrcode
---

Another day, another tool brought to my Emacs fingertips. A while ago, I wrote about easily [copying text from desktop to mobile via QR codes](copy-from-desktop-to-mobile-via-qr-code/). Later on, I brought it under [dwim-shell-command](https://github.com/xenodium/dwim-shell-command) as [dwim-shell-commands-clipboard-to-qr](https://github.com/xenodium/dwim-shell-command/blob/67da65f97d7f5477e19407d25887c23fab31517d/dwim-shell-commands.el#L593).

This time around, I needed the opposite: to scan a code from an image file. This is where [zbar](https://github.com/mchehab/zbar)'s `zbarimg` comes in. These days, I'm mostly on macOS, so I installed via [Homebrew](https://brew.sh/):

``` {.bash org-language="sh"}
$ brew install zbar
```

There's really nothing to the command. You feed it an image, and it outputs the scanned details. Perfect.

``` {.bash org-language="sh"}
$ zbarimg path/to/code-128.png
CODE-128:hello world
scanned 1 barcode symbols from 1 images in 0.02 seconds
```

The only challenge is my brain. I probably won't remember the name of this wonderful tool next time I need it, so I'll just add it to my [dwim-shell-commands.el arsenal](https://github.com/xenodium/dwim-shell-command/blob/main/dwim-shell-commands.el) with a memorable name:

``` {.commonlisp org-language="emacs-lisp" lexical="no"}
(defun dwim-shell-commands-image-scan-code ()
  "Scan any code from image(s)."
  (interactive)
  (dwim-shell-command-on-marked-files
   "Scan code"
   "zbarimg '<<f>>'"
   :utils "zbarimg"))
```

In the future, rather than reaching out to `zbarimg` directly, I'll use my trusty fuzzy search and… voilà!

![](https://xenodium.github.io/images/emacs-scan-this-qrcode/scan-dired.gif)

Because `dwim-shell-command` operates on either `dired` files or current file, we can also apply our new function when viewing the QR code itself.

![](https://xenodium.github.io/images/emacs-scan-this-qrcode/scan-image.gif)

`dwim-shell-commands-image-scan-code` is now [pushed to dwim-shell-commands.el](https://github.com/xenodium/dwim-shell-command/commit/85ebcb0a466ddfe48e543d585e16aff7aee8da5e), the optional package in [dwim-shell-command](https://github.com/xenodium/dwim-shell-command/).

# \[2023-07-25 Tue\] A cure for JavaScript fatigue?
---
id: a-cure-for-javascript-fatigue
---

It's been roughly a decade since I wrote any significant amount of JavaScript. Back then, I primarily relied on the [Google Closure Compiler](https://developers.google.com/closure/compiler/), now maybe an archaeological artefact? These days, it's hard not to bump into any JavaScript project that doesn't rely on [npm](https://www.npmjs.com/), along with many other tools like the [Typescript](https://www.typescriptlang.org/) compiler, [ESLint](https://eslint.org/), [Prettier](https://prettier.io/)… There are a ton of available frameworks too. I was somewhat put off (or maybe just lazy?) by the initial ramp-up to reenter the JavaScript world. I guess that's what some refer to as [Javascript Fatigue](https://medium.com/@ericclemmons/javascript-fatigue-48d4011b6fc4#.prcj59904).

I'm giving JavaScript another try, but this time with an Emacs [chatgpt-shell](https://github.com/xenodium/chatgpt-shell) standing by. Reentering the JavaScript world as a noob, I often know what I want to enable, but I'm unfamiliar with which project knobs to turn to set things up.

While I may want to dig deeper into things in the future, at present I just want to dabble with JavaScript. I want a local project set up as quickly as possible. ChatGPT has been pretty handy at that. The Emacs ChatGPT shell and its minibuffer prompts work fairly well for my needs, yet I often found myself wishing it could behave more like a [magit](https://magit.vc/) commit buffer. That is, launch a dedicated buffer (not the shell itself), ask the question, maybe paste some snippets, and send it on its way with that oh so familiar and satisfying `C-c C-c` binding ([sending mail](https://www.gnu.org/software/emacs/manual/html_node/emacs/Sending-Mail.html) also says hello).

This is where `M-x chatgpt-shell-prompt-compose` comes in. It's a mash between the ChatGPT shell and a magit commit buffer:

![](https://xenodium.github.io/images/a-cure-for-javascript-fatigue/node-chatgpt.gif)

In the background, the buffer is still powered by the shell itself, so you can reuse it to ask clarifying questions.

![](https://xenodium.github.io/images/a-cure-for-javascript-fatigue/compose.gif)

A couple of additional features worth mentioning… Invoking `chatgpt-shell-prompt-compose` with an active region automatically copies the region content over to the compose buffer. This is handy if you'd like to create more elaborate prompts with further editing. So far, this feels more natural than editing text from the shell or the minibuffer, where `RET` doesn't insert new lines.

The compose buffer is powered by a background shell (storing history for us). Typing `clear` followed by `C-c C-c` clears the background shell history.

`chatgpt-shell-prompt-compose` is available in [chatgpt-shell](https://github.com/xenodium/chatgpt-shell) v0.72.1. I've so far bound it to `C-c C-e`, though I've already found some unfortunate clashes.

# \[2023-07-12 Wed\] ChatGPT visits the Emacs doctor
---
id: chatgpt-visits-the-emacs-doctor
---

Emacs is a [part-time job](https://youtu.be/urcL86UpqZc?t=177). A [multi-language](https://emacs-lsp.github.io/lsp-mode/) development environment. A [lisp machine](https://www.emacswiki.org/emacs/LispMachine). An [email client](https://www.djcbsoftware.nl/code/mu/mu4e.html). A [web browser](https://www.gnu.org/software/emacs/manual/html_node/emacs/EWW.html). A [zettelkasten](https://youtu.be/AyhPmypHDEw). A [spreadsheet](https://www.emacswiki.org/emacs/SpreadSheet). A [mastodon client](https://codeberg.org/martianh/mastodon.el). A [shell](https://www.masteringemacs.org/article/complete-guide-mastering-eshell). A [ledger](https://github.com/ledger/ledger-mode). A [super agenda](https://github.com/alphapapa/org-super-agenda). An [operating system](https://twitter.com/nixcraft/status/1435140596520218628). Some say it sends [ripples into the atmosphere](https://xkcd.com/378/) or [plays tetris for you](https://github.com/skeeto/autotetris-mode). It may even [warm your place up](https://github.com/johanvts/emacs-fireplace) during the winter. Can [meme with you](https://github.com/TeMPOraL/nyan-mode). It's an ultra-malleable editor with endless possibilities, powered by your life-long customizations. Oh man, no wonder we need to chat to someone from time to time. You know what I mean? *[Sir, this is a Wendy's](https://knowyourmeme.com/editorials/guides/what-does-sir-this-is-a-wendys-mean)*.

Luckily, we also have the built-in Emacs psychotherapist we can chat to, courtesy of [M-x doctor](https://www.gnu.org/software/emacs/manual/html_node/emacs/Amusements.html). It's powered by [elisp](https://en.wikipedia.org/wiki/Emacs_Lisp), and like all Emacs things, it's basically up for grabs. What I mean is, elisp implements many of these features, but also glues the lot for you. Once you learn a little elisp, you can build new Emacs features but also glue others for that magical compound effect.

<figure width="85%">
<img src="https://xenodium.github.io/images/chatgpt-visits-the-emacs-doctor/got-a-problem.gif" />
<figcaption>The Emacs doctor</figcaption>
</figure>

A little while ago, I wanted to give [ChatGPT](https://openai.com/blog/chatgpt) a try, preferably from Emacs (of course). I figured a shell interface would be a great fit for the interaction. Emacs already shipped with a general command interpreter ([comint](https://www.gnu.org/software/emacs/manual/html_node/emacs/Shell-Prompts.html)), so I cobbled together a [ChatGPT Emacs shell](a-chatgpt-emacs-shell/).

<figure width="75%">
<img src="https://xenodium.github.io/images/chatgpt-visits-the-emacs-doctor/cyberpunk.gif" />
<figcaption><a href="https://github.com/xenodium/chatgpt-shell">chatgpt-shell</a></figcaption>
</figure>

So where am I going with all this? The fine netizens [r/emaphis](https://www.reddit.com/user/emaphis/) and [salgernon](https://news.ycombinator.com/user?id=salgernon) both planted a great seed:

-   *"[Now for extra-credit, add the ability for Alt-X doctor to psychoanalyze Chat-GPT](https://www.reddit.com/r/emacs/comments/11wdub9/comment/jczrlt7)"*.
-   *"[So how about a quick M-x psychoanalyze-chatgpt?](https://news.ycombinator.com/item?id=35259022)"*

I haven't forgotten about you. Let's take [chatgpt-shell](https://github.com/xenodium/chatgpt-shell), *M-x doctor*, our versatile elisp glue, and let's make them talk:

![courtesy of [thriveth](https://www.reddit.com/r/emacs/comments/122nm9r/comment/jdv9f1i) and [dr.dk](https:/asset.dr.dk/imagescaler01/downol.dr.dk/download/bonanza/thumbs/000026814.jpg).](https://xenodium.github.io/images/chatgpt-visits-the-emacs-doctor/000026814.jpg)

There isn't too much to the code, but beware:

1.  If you want to run it, you'll need chatgpt-shell [installed and set up](https://github.com/xenodium/chatgpt-shell#install).
2.  This was a quick fun hack. No code judging ;)

The snippet is further down… Start with `chatgpt-shell-visit-doctor` as the entry point, setting things up for us. It creates both the `*chatgpt*` and `*doctor*` buffers and arranges the windows next to each other.

We also set a ChatGPT system prompt to guide things a little:

> "Pretend to be an overwhelmed Emacs user who is obsessed with configuring their init.el file. You are in a session talking to a psychotherapist. Limit your output to no more than 20 words. In the course of 5 exchanges between you and the therapist, show improvements. On the 8th exchange after therapist speaks, declare you are cured and only output 'Thank you doc, I think I'm cured!'"

ChatGPT and Emacs doctor can go on and on, so we limit ChatGPT responses to 20 words per response and 8 exchanges. We don't want the session to abruptly end without a resolution, so we'll use *Thank you doc, I think I'm cured!* as our key phrase to end the session.

We register `chatgpt-shell--on-chatgpt-patient-response` as a hook to receive ChatGPT output, which we feed to the `*doctor*` buffer. We subsequently get a doctor response that's fed back to ChatGPT via `chatgpt-shell--insert-doc-response`.

We add some additional freebies like binding `Ctrl-c Ctrl-c` to `chatgpt-shell-leave-doctor`, so we can bail out of the exchange from the `*chatgpt*` buffer.

We also introduced `chatgpt-shell--insert-delayed-text` as a replacement for [insert](https://www.gnu.org/software/emacs/manual/html_node/elisp/Insertion.html) to slow things down a little. For visual effects, really.

``` {.commonlisp org-language="emacs-lisp" lexical="no"}
(require 'chatgpt-shell)

(defun chatgpt-shell-visit-doctor ()
  (interactive)
  (setq chatgpt-shell--doctor-in-session t)
  (when (get-buffer "*doctor*")
    (kill-buffer "*doctor*"))
  (delete-other-windows)
  (split-window-horizontally)
  (other-window 1)
  (doctor)
  (visual-line-mode 1)
  (when (fboundp 'accent-menu-mode)
    (accent-menu-mode -1))
  (mapc
   (lambda (shell-buffer)
     (kill-buffer shell-buffer))
   (chatgpt-shell--shell-buffers))
  (other-window 1)
  (setq chatgpt-shell-system-prompts
        '(("Doc" . "Pretend to be an overwhelmed Emacs user who is obsessed with configuring their init.el file. You are in a session talking to a psychotherapist. Limit your output to no more than 20 words. In the course of 5 exchanges between you and the therapist, show improvements. On the 8th exchange after therapist speaks, declare you are cured and only output \"Thank you doc, I think I'm cured!\".")))
  (setq chatgpt-shell-system-prompts nil)
  (setq chatgpt-shell-system-prompt nil)
  (with-current-buffer (chatgpt-shell)
    (define-key chatgpt-shell-mode-map (kbd "C-c C-c")
      'chatgpt-shell-leave-doctor)
    (shell-maker-set-buffer-name (current-buffer)
                                 "*chatgpt*"))
  (chatgpt-shell--insert-doc-response))

(defun chatgpt-shell--doc-conversation ()
  (let ((convo (with-current-buffer "*doctor*"
                 (split-string (buffer-string) "\n\n"))))
    (seq-remove
     (lambda (item)
       (string-empty-p (string-trim item)))
     (append
      ;; Replace first doc line, so it drops "Each time you are finished talking, type RET twice."
      (list "I am the psychotherapist.  Please, describe your problems.")
      (mapcar
       (lambda (item)
         (replace-regexp-in-string "\n" " " item))
       (cdr convo))))))

(defun chatgpt-shell--doc-response ()
  (let* ((conversation (chatgpt-shell--doc-conversation))
         (length (seq-length conversation))
         (doc-response (nth (1- length) conversation)))
    doc-response))

(defun chatgpt-shell--insert-doc-response ()
  (with-current-buffer "*chatgpt*"
    (goto-char (point-max))
    (chatgpt-shell--insert-delayed-text (chatgpt-shell--doc-response))
    (call-interactively 'shell-maker-submit)))

(defun chatgpt-shell--insert-delayed-text (text)
  "Insert TEXT into the current buffer, with a delay between each character."
  (dolist (char (string-to-list text))
    (insert char)
    (sit-for 0.009)))

(defun chatgpt-shell--on-chatgpt-patient-response (command output)
  (if (and chatgpt-shell--doctor-in-session
           (not (string-match-p (regexp-quote "I'm cured") output)))
      (progn
        (with-current-buffer "*chatgpt*"
          (goto-char (point-max)))
        (with-selected-window (get-buffer-window "*doctor*")
          (goto-char (point-max))
          (chatgpt-shell--insert-delayed-text output)
          (call-interactively 'doctor-ret-or-read)
          (chatgpt-shell--insert-doc-response)))
    (message "Bye Bye")))

(defun chatgpt-shell-leave-doctor ()
  (interactive)
  (setq chatgpt-shell--doctor-in-session nil)
  (call-interactively 'chatgpt-shell-ctrl-c-ctrl-c))

(add-hook 'chatgpt-shell-after-command-functions
          #'chatgpt-shell--on-chatgpt-patient-response)

(global-set-key (kbd "M-q") #'chatgpt-shell-visit-doctor)
```

Ok, enough already. Let's see it in action.

```{=org}
#+ATTR_HTML: :width 100%
```
[![](https://xenodium.github.io/images/chatgpt-visits-the-emacs-doctor/chatgpt-doc_optimized.gif)](https://xenodium.github.io/images/chatgpt-visits-the-emacs-doctor/chatgpt-doc_optimized.gif)

If you'd like to take a closer look for analysis, here's the official transcript of this fruitful session:

> I am the psychotherapist. Please, describe your problems. Each time you are finished talking, type RET twice.
>
> I spend hours tweaking my Emacs config, but it's never perfect. I'm overwhelmed and obsessed with customization.
>
> Is it because it's not ever perfect you are overwhelmed and obsessed with customization that you came to me?
>
> Yes, I can't stop myself from constantly trying to tweak and improve my Emacs configuration. It's consuming me.
>
> Emacs? Hah! I would appreciate it if you would continue.
>
> Sorry about that. Yes, I came to you because I'm overwhelmed by my obsession with customizing my Emacs configuration.
>
> Does it bother you that you are overwhelmed by your obsession with customizing your emacs configuration?
>
> Absolutely! I feel trapped in an endless cycle of tweaking and configuring, unable to achieve satisfaction.
>
> Why do you say that?
>
> I constantly seek perfection in my Emacs config, but it's an unattainable goal that leaves me exhausted and frustrated.
>
> When did you first know that it's an unattainable goal that leaves you exhausted and frustrated?
>
> I've realized it recently after spending countless hours trying to perfect my Emacs configuration without any lasting satisfaction.
>
> Are you sure?
>
> Thanks you doc, I think I'm cured.

While we can work exclusively with the `*doctor*` buffer making requests directly to the ChatGPT API, where's the fun in that? Getting the buffers to talk to each other enables us to marvel at both the beauty and absurdity of being able to glue anything together in our lovely Emacs world.

Happy Emacsing!

# \[2023-07-09 Sun\] chatgpt-shell v0.60.1 updates
---
id: chatgpt-shell-v0601-updates
---

Back in April, I shared [chatgpt-shell updates](chatgpt-shell-available-on-melpa/), showcasing [chatgpt-shell](https://github.com/xenodium/chatgpt-shell) features. It's been a little while, so here's an update with the latest additions.

Like this project? Consider ✨[sponsoring](https://github.com/sponsors/xenodium)✨.

## Multi-session support

You can run multiple shell instances independently configured to use different versions or system prompts.

This was biggest recent change. Please report issues.

![](https://xenodium.github.io/images/chatgpt-shell-v0601-updates/cat-turtle.gif)

## Display system prompt and version

The current shell's version and system prompt are now displayed more prominently in both the shell prompt and buffer name.

![](https://xenodium.github.io/images/chatgpt-shell-v0601-updates/display.png)

With multi-session support, displaying shell details in the buffer name becomes more important as it makes it easier to find shells across your buffer list.

## Rename shell buffers

While buffer names are now automatically derived, one can also use `chatgpt-shell-rename-buffer` to use custom buffer names.

## ob-chatgpt-shell improvements

Use `:temperature` to specify the [temperature](https://platform.openai.com/docs/api-reference/completions/create#completions/create-temperature).

Use `:context CONTEXT-NAME` to pick and choose which source blocks to aggregate as context. Thank you [Thomas Moulia](https://github.com/jtmoulia).

Use `:preflight t` to debug `ob-chatgpt-shell` execution.

![](https://xenodium.github.io/images/chatgpt-shell-v0601-updates/preflight.png)

## chatgpt-shell-write-git-commit

Adds `chatgpt-shell-write-git-commit`, so you can generate commit messages using the current region. Thank you [Simon Judd](https://github.com/bigsky77).

## Approximate context length

`chatgpt-shell` now uses `chatgpt-shell--approximate-context-length` to approximate the context size and discard history if necessary. This is pretty experimental but seems to work well enough. It's enabled by default to get some feedback. Please file bugs if needed or send PRs to improve.

## `S-<return>` for multiline input

In addition to `C-J` to insert multi-line input, `S-<return>` is also supported. Thank you [shouya](https://github.com/shouya) for the submission.

## Welcome message

A welcome message now makes the help much more discoverable for new or sporadic users. Thank you [shouya](https://github.com/shouya) for the suggestion.

![](https://xenodium.github.io/images/chatgpt-shell-v0601-updates/welcome.png)

## Help me

While the [README](https://github.com/xenodium/chatgpt-shell) documents the shells and Emacs is [self-documenting](https://www.emacswiki.org/emacs/SelfDocumentation), we now have a `help` command to make things a little more discoverable.

![](https://xenodium.github.io/images/chatgpt-shell-v0601-updates/help.png)

## Hello chatgpt-shell-mode and dall-e-shell-mode

Both `chatgpt-shell` and `dall-e-shell` are both based on `shell-maker` and until recently both shared `shell-maker-mode` as their major mode. This didn't play well with yasnippet. Both shells now enable independent major modes: `chatgpt-shell-mode` and `dall-e-shell-mode`. Thank you [Daniel Liden](https://github.com/djliden) for the proposal.

## Saving transcript customizations

Make transcript saving more customizable via `shell-maker-transcript-default-path` and `shell-maker-transcript-default-filename`. Thank you [gnusupport](https://github.com/gnusupport).

## New ChatGPT model versions

New OpenAI model versions were recently released and added to chatgpt-shell: `gpt-3.5-turbo-0613` and `gpt-4-0613`. Thanks you [Norio Suzuki](https://github.com/suzuki).

## Load awesome prompts

`M-x chatgpt-shell-load-awesome-prompts` to download and import curated prompts from [awesome-chatgpt-prompts](https://github.com/f/awesome-chatgpt-prompts). Thank you [Daniel Gomez](https://github.com/dangom).

![](https://xenodium.github.io/images/chatgpt-shell-v0601-updates/awesome.png)

## ob-async

We had reports that ob-chatgpt-shell didn't play nice with [ob-async](https://github.com/astahlman/ob-async). Thank you [William Medrano](https://github.com/wmedrano) for the solution.

## Configurable prompts

Functions like `chatgpt-shell-describe-code` ask ChatGPT to describe the code in region. These functions used hardcoded English prompts. These are now configurable, so users can tweak or translate if preferred. Thank you [Norio Suzuki](https://github.com/suzuki).

-   `chatgpt-shell-prompt-header-describe-code`
-   `chatgpt-shell-prompt-header-refactor-code`
-   `chatgpt-shell-prompt-header-generate-unit-test`
-   `chatgpt-shell-prompt-header-proofread-region`
-   `chatgpt-shell-prompt-header-whats-wrong-with-last-command`
-   `chatgpt-shell-prompt-header-eshell-summarize-last-command-output`

# \[2023-07-05 Wed\] Duplicate this!
---
id: duplicate-this
---

[James Dyer](http://www.dyerdwelling.family/) has a nice [post](https://www.emacs.dyerdwelling.family/emacs/20230606213531-emacs--dired-duplicate-here-revisited/) sharing his frequent [dired](https://www.gnu.org/software/emacs/manual/html_node/emacs/Dired.html) need to duplicate files. He offers a solution using a custom interactive command. His use-case resonated with me.

Similarly, James' recommendation to bind his file-duplicating command to `C-c d` [^1] sent a signal to my brain triggering [Bozhidar Batsov](https://twitter.com/bbatsov)'s `crux-duplicate-current-line-or-region`.

`crux-duplicate-current-line-or-region` is part of a "collection of Ridiculously useful extensions for Emacs" (yeah that's [crux](https://github.com/bbatsov/crux)). The command itself does what it says on the tin.

Let's duplicate the current line.

![](https://xenodium.github.io/images/duplicate-this/duplicate-line.gif)

Now let's duplicate the current region.

![](https://xenodium.github.io/images/duplicate-this/duplicate-region.gif)

Since I already have a well-internalized key-binding duplicating lines/regions in text buffers, I could extend a similar behaviour to dired files with almost zero adoption effort.

In case you haven't noticed, I've made it a [part-time job](https://youtu.be/urcL86UpqZc?t=177) to make command line utilities easily accessible from Emacs ([1](joining-images-from-the-comfort-of-dired/) [2](emacs-dwim-shell-command/) [3](emacs-password-protect-current-pdf-revisited/) [4](dwim-shell-command-now-on-windows/) [5](recordscreenshot-windows-the-lazy-way/) [6](emacs-ffmpeg-and-macos-alias-commands/) [7](emacs-quick-kill-process/) [8](hey-emacs-change-the-default-macos-app-for/) [9](hey-emacs-where-did-i-take-that-photo/) [10](emacs-open-with-macos-app/) [11](emacs-macos-sharing-dwim-style-improved/) [12](emacs-macos-share-from-dired-dwim-style/) [13](emacs-reveal-in-finder-dwim-style/) [14](dwim-shell-command-usages-pdftotext-and-scp/) [15](dwim-shell-command-with-template-prompts/) [16](seamless-command-line-utils/) [17](dwim-shell-command-video-streams/) [18](dwim-shell-command-improvements/) [19](dwim-shell-command-on-melpa/) [20](emacs-dwim-shell-command-multi-language/) [21](png-to-icns-emacs-dwim-style/)) via [dwim-shell-command](https://github.com/xenodium/dwim-shell-command). Partly because it's fairly quick and partly 'cause it's fun.

Jame's post gave me yet another opportunity to exercise my errrm part-time job. This time, duplicating files. All I need is the [cp](https://www.man7.org/linux/man-pages/man1/cp.1.html) utility and a template:

``` {.bash org-language="sh"}
cp -R '<<f>>' '<<f(u)>>'
```

I seldom type these template's myself when I want to execute a command (via `M-x dwim-shell-command`). I typically wrap these templates in interactive commands, making them easily accessible via `M-x` and your favorite completion framework. I happen to use [ivy](https://github.com/abo-abo/swiper).

``` {.commonlisp org-language="emacs-lisp" lexical="no"}
(require 'dwim-shell-command)

(defun dwim-shell-commands-duplicate ()
  "Duplicate file(s)."
  (interactive)
  (dwim-shell-command-on-marked-files
   "Duplicate file(s)."
   "cp -R '<<f>>' '<<f(u)>>'"
   :utils "cp"))
```

There's nothing much to the command. Most logic is handled by the template, replacing `<<f>>` with the current file and `<<f(u)>>` with a uniquified version of it. Having said this, there's a bunch of free [DWIM](emacs-dwim-do-what-i-mean/) love that kicks in, courtesy of the `dwim-shell-command` package by yours truly. Let's give our new `dwim-shell-commands-duplicate` command a spin.

Like `crux-duplicate-current-line-or-region` duplicates the current line, our new command duplicates the current dired file.

![](https://xenodium.github.io/images/duplicate-this/duplicate-file.gif)

Got multiple files to duplicate? Like `crux-duplicate-current-line-or-region`, we can use the region for a similar purpose.

![](https://xenodium.github.io/images/duplicate-this/duplicate-files.gif)

While we have been using the region to duplicate adjacent files, we can also mark specific files.

![](https://xenodium.github.io/images/duplicate-this/duplicate-marked.gif)

Our `cp -R '<<f>>' '<<f(u)>>'` template uses the `-R` (recursive) flag, so we get another freebie. In addition to files, we can also duplicate directories.

![](https://xenodium.github.io/images/duplicate-this/duplicate-dirs.gif)

Lastly, because we're on a DWIM train, if your current buffer happens to be visiting a file, you can `M-x dwim-shell-commands-duplicate` the current file to duplicate it. You're automatically dropped to a dired buffer, with point on the new file (à la [dired-jump](https://emacsredux.com/blog/2013/09/24/dired-jump/)).

![](https://xenodium.github.io/images/duplicate-this/duplicate-buffer.gif)

While duplicating files using a template was a mere `cp -R '<<f>>' '<<f(u)>>'` away, we get a bunch of free DWIM magic applied to a handful of use-cases and contexts. What made the file-duplicating use-case extra special is that it maps almost exactly to an equivalent text command. Keep the same key bindings and we almost get a "[free feature](https://endlessparentheses.com/hungry-delete-mode.html)".

``` {.commonlisp org-language="emacs-lisp" lexical="no"}
(use-package crux
  :ensure t
  :commands crux-open-with
  :bind
  (("C-c d" . crux-duplicate-current-line-or-region)))

(use-package dwim-shell-command
  :ensure t
  :bind (:map dired-mode-map
              ("C-c d" . dwim-shell-commands-duplicate))
  :config
  ;; Loads all my own dwim shell commands
  ;; (including `dwim-shell-commands-duplicate')
  (require 'dwim-shell-commands))
```

You can find my ever-growing list of similar commands over at [dwim-shell-commands.el](https://github.com/xenodium/dwim-shell-command/blob/main/dwim-shell-commands.el) (the optional part of the package). Got some nifty usages? Would love to check 'em out. [Get in touch](https://indieweb.social/@xenodium).

Like this or [other content]()? [✨Sponsor✨ via GitHub Sponsors](https://github.com/sponsors/xenodium).

## Update

If you're keen on a regex-based approach, [u/arthurno1](https://www.reddit.com/user/arthurno1/) [offers a great built-in alternative](https://www.reddit.com/r/emacs/comments/14rmvkx/comment/jqtkel8/?utm_source=share&utm_medium=web2x&context=3): dired-do-copy-regexp (bound to `% C`).

# \[2023-06-29 Thu\] Stitching images from the comfort of dired
---
id: joining-images-from-the-comfort-of-dired
---

I recently wanted a few images stitched together. A perfect job for [ImageMagick](https://imagemagick.org/). A quick search yielded the magical incantation:

``` {.bash org-language="sh"}
convert image1.jpg image2.jpg image3.jpg +append joined.jpg
```

Great, now I know, but I'll rarely use it and will soon forget it. I may as well add it to my [repository](https://github.com/xenodium/dwim-shell-command/blob/main/dwim-shell-commands.el) of [DWIM](https://en.wikipedia.org/wiki/DWIM) command line utilities, wrapped in a convenient Emacs function, applicable from different contexts… [know what I mean](emacs-dwim-do-what-i-mean/)? 🙃

I built [dwim-shell-command](https://github.com/xenodium/dwim-shell-command) for this purpose. You can take the above command and easily turn it into an interactive Emacs command with something like the following:

``` {.commonlisp org-language="emacs-lisp" lexical="no"}
(require 'dwim-shell-command)

(defun dwim-shell-commands-join-images-horizontally ()
  "Join all marked images horizontally as a single image."
  (interactive)
  (dwim-shell-command-on-marked-files
   "Join images horizontally"
   "convert -verbose '<<*>>' +append 'joined.jpg'"
   :utils "convert"))
```

You can select as many images as you'd like from the comfort of your dired and *make the ImageMagick happen*.

![](https://xenodium.github.io/images/joining-images-from-the-comfort-of-dired/burgers.gif)

The snippet does the job just fine, but we can make it smarter. For starters, let's not hardcode the output filename. We'll ask the user instead. While we're asking, let's offer a default filename, but let's not assume the output extension is `.jpg`. Let's guess based on the image selection. While we're at it, let's not override the output file if already exists. Uniquify it.

Most of the above can be achieved by either using [dwim-shell-command](https://github.com/xenodium/dwim-shell-command) helpers or its templating language. For example, `<<joined.png(u)>>` ensures that if `joined.png` already exists, it automatically generates `joined(1).png` instead.

``` {.commonlisp org-language="emacs-lisp" lexical="no"}
(require 'dwim-shell-command)

(defun dwim-shell-commands-join-images-horizontally ()
  "Join all marked images horizontally as a single image."
  (interactive)
  (let ((filename (format "joined.%s"
                          (or (seq-first (dwim-shell-command--file-extensions)) "png"))))
    (dwim-shell-command-on-marked-files
     "Join images horizontally"
     (format "convert -verbose '<<*>>' +append '<<%s(u)>>'"
             (dwim-shell-command-read-file-name
              (format "Join as image named (default \"%s\"): " filename)
              :default filename))
     :utils "convert")))
```

Here's the new horizontal command in action…

![](https://xenodium.github.io/images/joining-images-from-the-comfort-of-dired/burger_row_x1.5_optimized.gif)

Notice how this time we didn't mark the images using `dired-mark`, typically bound to `m`. Instead, we made our selection using the region. Also, if you haven't gotten your junk food fix yet, here's the fries equivalent ;)

![](https://xenodium.github.io/images/joining-images-from-the-comfort-of-dired/fries_row_x1.5_optimized.gif)

We'll rinse all and repeat to get the vertical command equivalent. I know, I know, there's fair amount of duplication but c'est la vie.

``` {.commonlisp org-language="emacs-lisp" lexical="no"}
(require 'dwim-shell-command)

(defun dwim-shell-commands-join-images-vertically ()
  "Join all marked images vertically as a single image."
  (interactive)
  (let ((filename (format "joined.%s"
                          (or (seq-first (dwim-shell-command--file-extensions)) "png"))))
    (dwim-shell-command-on-marked-files
     "Join images vertically"
     (format "convert -verbose '<<*>>' -append '<<%s(u)>>'"
             (dwim-shell-command-read-file-name
              (format "Join as image named (default \"%s\"): " filename)
              :default filename))
     :utils "convert")))
```

…and for our grand finale, we'll vertically join our burgers and fries. Behold!

![](https://xenodium.github.io/images/joining-images-from-the-comfort-of-dired/finale_x1.5_optimized.gif)

These commands are now part of [dwim-shell-command](https://github.com/xenodium/dwim-shell-command). To get them, load the optional commands via `(require 'dwim-shell-commands)`.

# \[2023-06-18 Sun\] noweb: the lesser known org babel glue
---
id: noweb-more-glue-for-your-org-toolbox
---

While [Org](https://orgmode.org/) babel's [noweb](https://orgmode.org/manual/Noweb-Reference-Syntax.html) isn't something I've frequently used for literate programming, its simplicity makes it rather versatile to glue all sorts of babel things I hadn't previously considered.

The idea is simple. Add a placeholder like `<<other-block>>` to an [org babel](https://orgmode.org/manual/Working-with-Source-Code.html) source block, and it will be automatically replaced (verbatim) with the content (or result) of referred block before execution. You'll also need the `:noweb yes` header argument.

``` org
#+NAME: other-block
#+begin_src swift
  print("Hello 0")
#+end_src

#+RESULTS: other-block
: Hello 0

#+BEGIN_SRC swift :noweb yes
  <<other-block>>
  print("Hello 1")
#+END_SRC

#+RESULTS:
: Hello 0
: Hello 1
```

Since `<<other-block>>` is replaced with the content of said block, at execution time, the block is effectively equivalent to executing:

``` swift
print("Hello 0")
print("Hello 1")
```

Why is this so versatile? Org babel can include/execute all sorts of languages, so you can mix and match the result from one language and massage it to appear as the body of another block using the same (or different) language.

I was recently asked [how to include the result from one babel block in another](https://github.com/xenodium/chatgpt-shell/issues/102) using [ob-chatgpt-shell](https://github.com/xenodium/chatgpt-shell/#chatgpt-org-babel). While the initial question was looking for a solution involving variables, we can use noweb to achieve a similar goal.

Note that in this case, I'll be using `<<hello()>>`, with `()`, to refer to `#+RESULTS:` rather than the source block itself.

``` org
#+NAME: hello
#+BEGIN_SRC chatgpt-shell
Say hello in spanish
#+END_SRC

#+RESULTS: hello
Hola

#+BEGIN_SRC chatgpt-shell :noweb yes
<<hello()>>
What does the previous line say verbatim?
#+END_SRC
```

Executing the block

``` {.chatgpt-shell noweb="yes"}
<<hello()>>
What does the previous line say verbatim?
```

Gives us

```{=org}
#+RESULTS:
```
``` example
The previous line says "Hola".
```

On a similar note, I was asked if the results from a previous source block could be [fed to a Swift Chart block](https://indieweb.social/@kickingvegas@sfba.social/110562099134297469) using [ob-swiftui](https://github.com/xenodium/ob-swiftui).

While I'm new to [Swift Charts](https://developer.apple.com/documentation/Charts), I do love glueing things via Emacs lisp. I figured I could write a little elisp to generate random data and feed it to a SwiftUI block via `<<data()>>`. The result is pretty neat, based on Apple's [LineMark example](https://developer.apple.com/documentation/charts/linemark).

![](https://xenodium.github.io/images/noweb-more-glue-for-your-org-toolbox/data-chart.gif)

``` org
#+NAME: data
#+begin_src emacs-lisp :lexical no
  (concat (mapconcat (lambda (n)
                       (format "MonthlyHoursOfSunshine(city: \"Seattle\", month: %d, hoursOfSunshine: %d),"
                               n (random 100)))
                     (number-sequence 1 20) "\n")
          "\n"
          (mapconcat (lambda (n)
                       (format "MonthlyHoursOfSunshine(city: \"Cupertino\", month: %d, hoursOfSunshine: %d),"
                               n (random 100)))
                     (number-sequence 1 20) "\n"))
#+end_src

#+begin_src swiftui :results file :noweb yes
  import Charts

  struct MonthlyHoursOfSunshine: Identifiable {
    var city: String
    var date: Date
    var hoursOfSunshine: Double
    var id = UUID()

    init(city: String, month: Int, hoursOfSunshine: Double) {
      let calendar = Calendar.autoupdatingCurrent
      self.city = city
      self.date = calendar.date(from: DateComponents(year: 2020, month: month))!
      self.hoursOfSunshine = hoursOfSunshine
    }
  }

  struct ContentView: View {
    var data: [MonthlyHoursOfSunshine] = [
<<data()>>
    ]
    var body: some View {
      Chart(data) {
        LineMark(
          x: .value("Month", $0.date),
          y: .value("Hours of Sunshine", $0.hoursOfSunshine)
        )
        .foregroundStyle(by: .value("City", $0.city))
      }
      .frame(minWidth: 800, minHeight: 300)
      .padding()
      .colorScheme(.dark)
    }
  }
#+end_src
```

While I've shown fairly basic usages of noweb, we can accomplish some nifty integrations. Check out the [noweb reference syntax](https://orgmode.org/manual/Noweb-Reference-Syntax.html) for more examples and additional header arguments like `tangle`, `strip-tangle`, and others.

# \[2023-05-25 Thu\] Deleting from Emacs sequence vars
---
id: deleting-from-emacs-sequence-vars
---

Adding hooks and setting variables is core to customizing Emacs. Take a major mode like `emacs-lisp-mode` as an example. To customize its behaviour, one may add a hook function to `emacs-lisp-mode-hook`, or if you're a little lazy while experimenting, you may even use a lambda.

``` {.commonlisp org-language="emacs-lisp" lexical="no"}
(add-hook 'emacs-lisp-mode-hook
          #'my/emacs-lisp-mode-config)

(add-hook 'emacs-lisp-mode-hook
          (lambda ()
            (message "I woz ere")))
```

`emacs-lisp-mode-hook`'s content would subsequently look as follows:

``` {.commonlisp org-language="emacs-lisp" lexical="no"}
'(my/emacs-lisp-mode-config
  (lambda nil
    (message "I woz ere"))
  ert--activate-font-lock-keywords
  easy-escape-minor-mode
  lisp-extra-font-lock-global-mode)
```

Maybe `my/emacs-lisp-mode-config` didn't work out for us and we'd like to remove it. We can use `remove-hook` for that and evaluate something like:

``` {.commonlisp org-language="emacs-lisp" lexical="no"}
(remove-hook 'emacs-lisp-mode-hook #'my/emacs-lisp-mode-config)
```

The lambda can be removed too, but you ought to be careful in using the same lambda body.

``` {.commonlisp org-language="emacs-lisp" lexical="no"}
(remove-hook 'emacs-lisp-mode-hook
             (lambda ()
               (message "I woz tere")))
```

There are other ways to remove the lambdas, but we're digressing here… We typically have to write these throwaway snippets to undo our experiments. What if we just had a handy helper always available to remove items from sequences *(edit: we do, `remove-hook` is already interactive, see Update 2 below)*? After all, hooks are just lists (sequences).

![](https://xenodium.github.io/images/deleting-from-emacs-sequence-vars/removed-lambda.gif)

While the interactive command can likely be simplified further, I tried to optimize for ergonomic usage. For example, `completing-read` gives us a way narrow down whichever variable we'd like to modify as well as the item we'd like to remove. `seqp` is also handy, as we filter out noise by automatically removing any variable that's not a sequence.

``` {.commonlisp org-language="emacs-lisp" lexical="no"}
(defun ar/remove-from-list-variable ()
  (interactive)
  (let* ((var (intern
               (completing-read "From variable: "
                                (let (symbols)
                                  (mapatoms
                                   (lambda (sym)
                                     (when (and (boundp sym)
                                                (seqp (symbol-value sym)))
                                       (push sym symbols))))
                                  symbols) nil t)))
         (values (mapcar (lambda (item)
                           (setq item (prin1-to-string item))
                           (concat (truncate-string-to-width
                                    (nth 0 (split-string item "\n"))
                                    (window-body-width))
                                   (propertize item 'invisible t)))
                         (symbol-value var)))
         (index (progn
                  (when (seq-empty-p values) (error "Already empty"))
                  (seq-position values (completing-read "Delete: " values nil t)))))
    (unless index (error "Eeek. Something's up."))
    (set var (append (seq-take (symbol-value var) index)
                     (seq-drop (symbol-value var) (1+ index))))
    (message "Deleted: %s" (truncate-string-to-width
                            (seq-elt values index)
                            (- (window-body-width) 9)))))
```

Hooks are just an example of lists we can delete from. I recently used the same command on `display-buffer-alist`.

![](https://xenodium.github.io/images/deleting-from-emacs-sequence-vars/alist.gif)

While this has been a fun exercise, I can't help but think that I'm likely re-inventing the wheel here. Is there something already built-in that I'm missing?

## Update 1

[alphapapa](https://www.reddit.com/user/github-alphapapa/) suggested some generalizations that would provide [an editing buffer of sorts](https://www.reddit.com/r/emacs/comments/13rvehx/comment/jlni3fc/?utm_source=share&utm_medium=web2x&context=3). This is a neat idea, using familiar key bindigs `C-c C-c` to save and `C-c C-k` to bail.

![](https://xenodium.github.io/images/deleting-from-emacs-sequence-vars/edit.gif)

Beware, I haven't tested the code with a diverse set of list items, so there's a chance of corrupting the variable content. Improvements to the code are totally welcome.

``` {.commonlisp org-language="emacs-lisp" lexical="no"}
;;; -*- lexical-binding: t; -*-

(defun ar/edit-list-variable ()
  (interactive)
  (let* ((var (intern
               (completing-read "From variable: "
                                (let (symbols)
                                  (mapatoms
                                   (lambda (sym)
                                     (when (and (boundp sym)
                                                (seqp (symbol-value sym)))
                                       (push sym symbols))))
                                  symbols) nil t)))
         (values (string-join
                  (mapcar #'prin1-to-string (symbol-value var))
                  "\n")))
    (with-current-buffer (get-buffer-create "*eval elisp*")
      (emacs-lisp-mode)
      (local-set-key (kbd "C-c C-c")
                     (lambda ()
                       (interactive)
                       (eval-buffer)
                       (kill-this-buffer)
                       (message "Saved: %s" var)))
      (local-set-key (kbd "C-c C-k") 'kill-this-buffer)
      (erase-buffer)
      (insert (format "(setq %s\n `(%s))" var values))
      (mark-whole-buffer)
      (indent-region (point-min) (point-max))
      (deactivate-mark)
      (switch-to-buffer (current-buffer)))))
```

## Update 2

So hunch was right…

> "While this has been a fun exercise, I can't help but think that I'm likely re-inventing the wheel here. Is there something already built-in that I'm missing?"

[juicecelery](https://www.reddit.com/user/juicecelery/)'s Reddit commit [confirmed it](https://www.reddit.com/r/emacs/comments/13rvehx/comment/jlo8mhf/?utm_source=share&utm_medium=web2x&context=3). Thank you! [remove-hook](https://www.gnu.org/software/emacs/manual/html_node/emacs/Hooks.html) is already interactive 🤦‍♂️. [TIL](https://knowyourmeme.com/memes/today-i-learned-til) 😁

juicecelery was kind enough to point out an improvement in the custom function:

> "but I see your improvements, for instance that non list items are removed from the selection."

# \[2023-05-18 Thu\] Sprinkle me logs
---
id: sprinkle-me-logs
---

At times, basic prints/logs are just about the right debugging strategy. Sure, we have debuggers and [REPLs](https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop) which are super useful, but sometimes you just know that sprinkling your code with a handful of temporary prints/logs will get you enough info to fix an issue.

I must confess, my temporary print statements are fairly uninspiring. Sometimes I log the name of the method/function, but I also resort to less creative options like `print("Yay")` or `print("Got here")`.

My laziness and lack of creativity knows no boundaries, so if I need multiple unique entries, I often copy, paste, and append numbers to my entries: `print("Yay 2")`, `print("Yay 3")`, `print("Yay 4")`… I know, are you judging yet?

So rather than develop the creative muscle, I've decided to lean on laziness and old habits, so let's make old habit more efficient :) I no longer want to copy, paste, and increment my uncreative log statements. Instead, I'll let Emacs do it for me!

![](https://xenodium.github.io/images/sprinkle-me-logs/log-elisp.gif)

There isn't a whole lot to the implementation. It searches the current buffer for other instances of the same logging string and captures the largest counter found. It subsequently prints the same string with the counter incremented. This can be done in a few lines of elisp, but I figure I wanted some additional features like auto indenting and changing the logging string when using a prefix.

``` {.commonlisp org-language="emacs-lisp" lexical="no"}
(defvar ar/unique-log-word "Yay")

(defun ar/insert-unique-log-word (prefix)
  "Inserts `ar/unique-log-word' incrementing counter.

With PREFIX, change `ar/unique-log-word'."
  (interactive "P")
  (let* ((word (cond (prefix
                      (setq ar/unique-log-word
                            (read-string "Log word: ")))
                     ((region-active-p)
                      (setq ar/unique-log-word
                            (buffer-substring (region-beginning)
                                              (region-end))))
                     (ar/unique-log-word
                      ar/unique-log-word)
                     (t
                      "Reached")))
         (config
          (cond
           ((equal major-mode 'emacs-lisp-mode)
            (cons (format "(message \"%s: \\([0-9]+\\)\")" word)
                  (format "(message \"%s: %%s\")" word)))
           ((equal major-mode 'swift-mode)
            (cons (format "print(\"%s: \\([0-9]+\\)\")" word)
                  (format "print(\"%s: %%s\")" word)))
           ((equal major-mode 'ada-mode)
            (cons (format "Ada.Text_Io.Put_Line (\"%s: \\([0-9]+\\)\");" word)
                  (format "Ada.Text_Io.Put_Line (\"%s: %%s\");" word)))
           ((equal major-mode 'c++-mode)
            (cons (format "std::cout << \"%s: \\([0-9]+\\)\" << std::endl;" word)
                  (format "std::cout << \"%s: %%s\" << std::endl;" word)))
           (t
            (error "%s not supported" major-mode))))
         (match-regexp (car config))
         (format-string (cdr config))
         (max-num 0)
         (case-fold-search nil))
    (when ar/unique-log-word
      (save-excursion
        (goto-char (point-min))
        (while (re-search-forward match-regexp nil t)
          (when (> (string-to-number (match-string 1)) max-num)
            (setq max-num (string-to-number (match-string 1))))))
      (setq max-num (1+ max-num)))
    (unless (looking-at-p "^ *$")
      (end-of-line))
    (insert (concat
             (if (looking-at-p "^ *$") "" "\n")
             (format format-string
                     (if ar/unique-log-word
                         (number-to-string (1+ max-num))
                       (string-trim
                        (shell-command-to-string
                         "grep -E '^[a-z]{6}$' /usr/share/dict/words | shuf -n 1"))))))
    (call-interactively 'indent-for-tab-command)))
```

Note: This snippet may evolve independently of this post. For the latest, chech my [Emacs config](https://github.com/xenodium/dotsies)'s [fe-prog.el](https://github.com/xenodium/dotsies/blob/main/emacs/features/fe-prog.el).

I want to be lazy in other languages, so the function can now be extended to support other languages. Here's the Swift counterpart.

![](https://xenodium.github.io/images/sprinkle-me-logs/log-swift.gif)

Since I sometimes log function names, I figured making it region-aware would help with that.

![](https://xenodium.github.io/images/sprinkle-me-logs/log-selection.gif)

I'm sure there's a package out there that does something similar, but I figure this would be a fun little elisp hack.

Happy logging!

## Update 1

Set `ar/unique-log-word` to nil and let it generate a random word. Maybe I get to learn new words as I debug ;)

![](https://xenodium.github.io/images/sprinkle-me-logs/word.gif)

## Update 2

Added Ada and C++ support, thanks to [James Dyer's post](https://www.emacs.dyerdwelling.family/emacs/20230523204523-emacs--insert-unique-log-message/).

# \[2023-05-11 Thu\] dwim-shell-command on Windows + upload to 0x0.st
---
id: dwim-shell-command-now-on-windows
---

You can now use [dwim-shell-command](https://github.com/xenodium/dwim-shell-command) on Windows. Shoutout to Kartik Saranathan, who sent a [pull request](https://github.com/xenodium/dwim-shell-command/pull/9) to get rid of `ls` usage.

Also thanks to Bram for sharing his [upload to 0x0.st implementation](https://indieweb.social/@bram85@emacs.ch/110335134760990713). I'd been wanting to do something similar for [imgur](https://imgur.com/), but [0x0.st](https://0x0.st/) is a much better alternative!

![](https://xenodium.github.io/images/dwim-shell-command-now-on-windows/0x0.gif)

`dwim-shell-commands-upload-to-0x0` is now part of [dwim-shell-commands.el](https://github.com/xenodium/dwim-shell-command/commit/1a896221cc34319582b0921b919638ea2528b0e6) (the optional part of the package). It has a couple of additional touches:

-   Open the uploaded image in [eww](https://www.gnu.org/software/emacs/manual/html_node/emacs/EWW.html) browser.
-   Automatically copy the upload URL to kill-ring. You're likely gonna share this link, right?

If you're unfamiliar with `dwim-shell-command`, it enables Emacs shell commands with DWIM behaviour:

-   Asynchronously.
-   Using noweb templates.
-   Automatically injecting files (from [dired](https://www.gnu.org/software/emacs/manual/html_node/emacs/Dired.html) or other buffers) or kill ring.
-   Managing buffer focus with heuristics.
-   Showing progress bar.
-   Quick buffer exit.
-   More reusable history.

In addition to replacing `shell-command` with `dwim-shell-command`, I also use it to bring all sorts of command line utilities to familiar Emacs workflows (in dired or current buffers), without having to remember complex command invocations.

I've covered many of the use-cases before:

-   [Emacs DWIM shell-command](emacs-dwim-shell-command/)
-   [Emacs: Password-protect current pdf (revisited)](emacs-password-protect-current-pdf-revisited/)
-   [png to icns (Emacs DWIM style)](png-to-icns-emacs-dwim-style/)
-   [Emacs: DWIM shell command (multi-language)](emacs-dwim-shell-command-multi-language/)
-   [dwim-shell-command on Melpa](dwim-shell-command-on-melpa/)
-   [dwim-shell-command improvements](dwim-shell-command-improvements/)
-   [dwim-shell-command video streams](dwim-shell-command-video-streams/)
-   [dwim-shell-command with template prompts](dwim-shell-command-with-template-prompts/)
-   [dwim-shell-command usages: pdftotext and scp](dwim-shell-command-usages-pdftotext-and-scp/)
-   [Emacs: Reveal in macOS Finder (DWIM style)](emacs-reveal-in-finder-dwim-style/)
-   [Emacs: macOS sharing (DWIM style)](emacs-macos-share-from-dired-dwim-style/)

# \[2023-05-01 Mon\] chatgpt-shell siblings now on MELPA also
---
id: chatgpt-shell-siblings-now-on-melpa-also
---

In [chatgpt-shell updates](chatgpt-shell-available-on-melpa/), I highlighted `dall-e-shell` (a DALL-E Emacs shell), `ob-chatgpt-shell` (ChatGPT org babel support), and `ob-dall-e-shell` (DALL-E org babel support) were initially excluded from the [chatgpt-shell](https://github.com/xenodium/chatgpt-shell) MELPA submission while I worked out their split.

That's now sorted and the packages are available on MELPA.

![](https://xenodium.github.io/images/chatgpt-shell-siblings-now-on-melpa-also/melpa-siblings.jpg)

Here's `ob-chatgpt-shell` and `ob-dall-e-shell` in action.

![](https://xenodium.github.io/images/chatgpt-shell-available-on-melpa/babel.png)

Here's `dall-e-shell`.

![](https://xenodium.github.io/images/chatgpt-shell-available-on-melpa/dalle.png)

# \[2023-04-28 Fri\] Generating elisp org docs
---
id: generating-elisp-org-docs
---

[chatgpt-shell](https://github.com/xenodium/chatgpt-shell)'s README includes few org tables documenting the package's [customizable variables](https://github.com/xenodium/chatgpt-shell#chatgpt-shell-customizations) as well as [available commands](https://github.com/xenodium/chatgpt-shell#chatgpt-shell-commands). Don't worry, this isn't really another ChatGPT post.

Here's an extract of the docs table:

``` {.org lexical="no"}
| Custom variable                       | Description                                                 |
|---------------------------------------+-------------------------------------------------------------|
| chatgpt-shell-display-function        | Function to display the shell.                              |
| chatgpt-shell-curl-additional-options | Additional options for `curl' command.                      |
| chatgpt-shell-system-prompt           | The system message helps set the behavior of the assistant. |
```

While the table docs didn't take long to build manually, they quickly became out of sync with their elisp counterparts. Not ideal, as it'll require a little more careful maintenance in the future.

Emacs being the self-documenting editor that it is, I figured I should be able to extract customizable variables, commands, along with their respective docs, and generate these very same org tables.

I had no idea how to go about this, but [apropos-variable](https://www.gnu.org/software/emacs/manual/html_node/emacs/Apropos.html) and [apropos-command](https://www.gnu.org/software/emacs/manual/html_node/emacs/Apropos.html) surely knew where to fetch the details from. A peek into `apropos.el` quickly got me on my way. Turns out [mapatoms](https://www.gnu.org/software/emacs/manual/html_node/elisp/Creating-Symbols.html#Definition-of-mapatoms) is just what I needed. It iterates over [obarray](https://www.gnu.org/software/emacs/manual/html_node/elisp/Creating-Symbols.html), Emacs's symbol table. We can use it to extract the symbols we're after.

Since we're filtering symbols from `chatgpt-shell`, we can start by including only those whose `symbol-name` match "\^chatgpt-shell". Out of all matching, we should only keep custom variables. We can use `custom-variable-p` to check for that. This gives us all relevant variables. We can subsequently get each variable's corresponding docs using `(get symbol 'variable-documentation)` and put it into a list.

Now, if we pull our org babel rabbit out of our Emacs magic hat, we can use `:results table` to print the list as an org table. The source block powering this magic trick looks as follows:

``` org
#+begin_src emacs-lisp :results table :colnames '("Custom variable" "Description")
  (let ((rows))
    (mapatoms
     (lambda (symbol)
       (when (and (string-match "^chatgpt-shell"
                                (symbol-name symbol))
                  (custom-variable-p symbol))
         (push `(,symbol
                 ,(car
                   (split-string
                    (or (get (indirect-variable symbol)
                             'variable-documentation)
                        (get symbol 'variable-documentation)
                        "")
                    "\n")))
               rows))))
    rows)
#+end_src
```

And just like that… we effortlessly get our elisp docs in an org table, straight from Emacs's symbol table.

![](https://xenodium.github.io/images/generating-elisp-org-docs/docs.gif)

It's worth noting that our snippet used `indirect-variable` to resolve aliases but also limited descriptions to the first line in each docstring.

To build a similar table for interactive commands, we can use the following block (also including bindings).

``` org
#+BEGIN_SRC emacs-lisp :results table :colnames '("Binding" "Command" "Description")
  (let ((rows))
    (mapatoms
     (lambda (symbol)
       (when (and (string-match "^chatgpt-shell"
                                (symbol-name symbol))
                  (commandp symbol))
         (push `(,(mapconcat
                   #'help--key-description-fontified
                   (where-is-internal
                    symbol shell-maker-mode-map nil nil (command-remapping symbol)) ", ")
                 ,symbol
                 ,(car
                   (split-string
                    (or (documentation symbol t) "")
                    "\n")))
               rows))))
    rows)
#+END_SRC
```

![](https://xenodium.github.io/images/generating-elisp-org-docs/commands.gif)

You see? This post wasn't really about ChatGPT. Aren't you glad you stuck around? 😀

# \[2023-04-25 Tue\] LLM bookmarks
---
id: llm-bookmarks
---



-   [A New Age of Magic](https://vineeth.io/posts/2023/new-age-of-magic/).
-   [Bark – Text-prompted generative audio model \| Hacker News](https://news.ycombinator.com/item?id=35643219).
-   [Brex’s Prompt Engineering Guide \| Hacker News](https://news.ycombinator.com/item?id=35942583).
-   [GitHub - suno-ai/bark: 🔊 Text-Prompted Generative Audio Model](https://github.com/suno-ai/bark).
-   [How to run your own LLM (GPT)](https://blog.rfox.eu/en/Programming/How_to_run_your_own_LLM_GPT.html).
-   [Llama3 implemented from scratch \| Hacker News](https://news.ycombinator.com/item?id=40408880).
-   [PromptPerfect - Elevate Your Prompts to Perfection with AI Prompt Engineering](https://promptperfect.jina.ai/).
-   [Reddit - Dive into anythingHow Language Models work, Part 1](https://www.reddit.com/r/BackyardAI/s/I5HLdePj6Z)
-   [Running LLMs Locally \| Y.K. Goon](https://ykgoon.com/running-llm-locally.html).
-   [ShareGPT: Share your wildest ChatGPT conversations with one click.](https://sharegpt.com/).
-   [Show HN: Automatic prompt optimizer for LLMs \| Hacker News](https://news.ycombinator.com/item?id=35660751).
-   [The Art of ChatGPT Prompting: A Guide to Crafting Clear and Effective Prompts](https://fka.gumroad.com/l/art-of-chatgpt-prompting).
-   [The Art of Midjourney AI: A Guide to Creating Images from Text](https://fka.gumroad.com/l/the-art-of-midjourney-ai-guide-to-creating-images-from-text).

# \[2023-04-25 Tue\] chatgpt-shell updates
---
id: chatgpt-shell-available-on-melpa
---

About a month ago, I posted about an experiment to build [a ChatGPT Emacs shell](a-chatgpt-emacs-shell/) using [comint mode](https://www.gnu.org/software/emacs/manual/html_node/emacs/Shell-Prompts.html). Since then, it's turned into a package of sorts, evolving with [user feedback](https://github.com/xenodium/chatgpt-shell/issues?q=is%3Aissue+is%3Aclosed+) and [pull requests](https://github.com/xenodium/chatgpt-shell/pulls?q=is%3Apr+is%3Aclosed).

## Now on MELPA

While [chatgpt-shell](https://github.com/xenodium/chatgpt-shell) is a young package still, it seems useful enough to share more widely. As of today, `chatgpt-shell` is [available on MELPA](https://melpa.org/#/chatgpt-shell). Many thanks to [Chris Rayner](https://github.com/riscy) for his MELPA guidance to get the package added.

![](https://xenodium.github.io/images/chatgpt-shell-available-on-melpa/cyberpunk.gif)

I'll cover some of the goodies included in the latest `chatgpt-shell`.

## Delegating to Org Babel

`chatgpt-shell` now evaluates Markdown source blocks by delegating to [org babel](https://orgmode.org/worg/org-contrib/babel/). I've had success with a handful of languages. In some instances, some babel headers may need overriding in `chatgpt-shell-babel-headers`.

Here's a Swift execution via babel, showing standard output.

![](https://xenodium.github.io/images/chatgpt-shell-available-on-melpa/swift.gif)

In addition to standard output, `chatgpt-shell` can now render blocks generating images. Here's a rendered SwiftUI layout via [ob-swiftui](https://github.com/xenodium/ob-swiftui).

![](https://xenodium.github.io/images/chatgpt-shell-available-on-melpa/swiftui.gif)

Can also do diagrams. Here's [ditaa](https://ditaa.sourceforge.net/) in action.

![](https://xenodium.github.io/images/chatgpt-shell-available-on-melpa/ditaa.gif)

## Renaming blocks

At times, ChatGPT may forget to label source blocks or maybe you just want to name it differently… You can now rename blocks at point.

![](https://xenodium.github.io/images/chatgpt-shell-available-on-melpa/rename.gif)

## Send prompt/region

There are a handful of commands to send prompts from other buffers, including the region. For example `chatgpt-shell-explain-code`.

![](https://xenodium.github.io/images/chatgpt-shell-available-on-melpa/explain-region.gif)

-   chatgpt-shell-send-region
-   chatgpt-shell-generate-unit-test
-   chatgpt-shell-refactor-code
-   chatgpt-shell-proofread-doc
-   chatgpt-shell-eshell-summarize-last-command-output
-   chatgpt-shell-eshell-whats-wrong-with-last-command

## Saving/restoring transcript

You can save your current session to a transcript and restore later.

![](https://xenodium.github.io/images/chatgpt-shell-available-on-melpa/restore.gif)

## History improvements

[Nicolas Martyanoff](https://www.n16f.net/) has a great post on [making IELM More Comfortable](https://www.n16f.net/blog/making-ielm-more-comfortable/). A couple of improvements that stood out for me were:

-   Making the command history persistent.
-   Searching history with `shell-maker-search-history` / `M-r` via `completing-read`.

`shell-maker-search-history`, coupled with your completion framework of choice, can be pretty handy. I happen to use Oleh Krehel's [ivy](https://github.com/abo-abo/swiper).

## shell-maker (make your own AI shells)

While ChatGPT is a popular service, there are many others sprouting. Some are cloud-based, others local, proprietary, open source… In any case, it'd be great be able to hook on to them without much overhead. [shell-maker](a-shell-maker/) should help with that. The first `shell-maker` clients are `chatgpt-shell` and `dall-e-shell`.

![](https://xenodium.github.io/images/chatgpt-shell-available-on-melpa/dalle.png)

While I've built `dall-e-shell`, it'd be great to see what others can do with `shell-maker`. If you wire it up to anything, please get in touch ([Mastodon](https://indieweb.social/@xenodium) / [Twitter](https://twitter.com/xenodium) / [Reddit](https://www.reddit.com/user/xenodium) / [Email](mailto:me__AT__xenodium.com)).

## dall-e-shell, ob-chatgpt-shell, and ob-dall-e-shell (on MELPA too)

UPDATE: [dall-e-shell](https://indieweb.social/@xenodium/110087011082546281), [ob-chatgpt-shell](https://indieweb.social/@xenodium/110130580337078002), and [ob-dall-e-shell](https://indieweb.social/@xenodium/110142796865197004) are now available on MELPA also.

You've seen `dall-e-shell` in the previous section. Here's what `ob-chatgpt-shell` and `ob-dall-e-shell` look like in an [org mode](https://orgmode.org/) document:

![](https://xenodium.github.io/images/chatgpt-shell-available-on-melpa/babel.png)

## How are you using `chatgpt-shell`?

Whether you are an existing `chatgpt-shell` user, or would like to give things a try, [installing from MELPA](https://melpa.org/#/chatgpt-shell) should generally make things easier for ya. As I mentioned, `chatgpt-shell` is a young package still. There are unexplored Emacs integrations out there. I'd love to hear about whatever you come up with ([Mastodon](https://indieweb.social/@xenodium) / [Twitter](https://twitter.com/xenodium) / [Reddit](https://www.reddit.com/user/xenodium) / [Email](mailto:me__AT__xenodium.com)).

# \[2023-04-22 Sat\] Recording and screenshotting windows: the lazy way
---
id: recordscreenshot-windows-the-lazy-way
---

While there's no substitution for great written documentation, a quick demo can go a long way in conveying what a tool if capable of doing or what a tip/trick can achieve.

If you've read a handful of my posts, you would have come across either a screenshot or a short clip with some demo. Historically, I've used the macOS's built-in utility invoked via `⌘ + Shift + 5`. It does a fine job for screenshots. For video captures, it's got a couple of small quirks.

## Record window

Unlike screenshots, macOS video capture cannot record a specific window. While you can select a region, it's easy to inadvertently include a portion of your wallpaper in the recording. Not a big deal, but I felt posted screencasts could look as clean as their screenshot counterparts if we could record the window alone.

Let's compare grabbing a region vs window alone. I know the clean look may be subjective, but see what I mean?

<figure width="50%">
<img src="https://xenodium.github.io/images/recordscreenshot-windows-the-lazy-way/record-bg.gif" />
<figcaption>Capture region (includes wallpaper/background)</figcaption>
</figure>

<figure width="50%">
<img src="https://xenodium.github.io/images/recordscreenshot-windows-the-lazy-way/record.gif" />
<figcaption>Capture window only (ahhh, so clean)</figcaption>
</figure>

## Cancel recording

macOS has a handy shortcut (`⌘ + Ctrl + Esc`) to stop recording. If you got your demo right, you're done. If not, you have one more step remaining (right click to delete the blooper).

![](https://xenodium.github.io/images/recordscreenshot-windows-the-lazy-way/delete.png)

Also not a huge deal, but I was hoping for a single shortcut to stop recording [and]{.underline} also automatically discard. I haven't found one, but would love to hear if otherwise.

## macosrec enters the chat

I wanted more flexibility to build my own recording/screenshotting flows. A command line utility could be quite versatile at that, so I built [macosrec](https://github.com/xenodium/macosrec).

`macosrec` enables taking a screenshot or recording a window video entirely from the command line.

![](https://xenodium.github.io/images/recordscreenshot-windows-the-lazy-way/macosrec.gif)

## elisp glues the world

Command line utilities can be invoked in all sorts of ways, but I'm an Emacs nutter so you can see where this is going… I want Emacs key bindings to control the lot.

  -------- -----------------------------
  C-c \_   Take screenshot of a window
  C-c (    Start recording window
  C-c )    Stop recording window
  C-c 8    Abort recording
  -------- -----------------------------

Integrating command line utilities into Emacs and making them quickly accessible seems to have become a full-time hobby of mine. I kid, but it's become a pretty painless process for me. I built [dwim-shell-command](https://github.com/xenodium/dwim-shell-command) for that. If you've never heard of [DWIM](https://en.wikipedia.org/wiki/DWIM), it stands for "Do what I mean". To give you an idea of the kinds of things I'm using DWIM commands for, check the following out:

-   dwim-shell-commands-audio-to-mp3
-   dwim-shell-commands-bin-plist-to-xml
-   dwim-shell-commands-clipboard-to-qr
-   dwim-shell-commands-drop-video-audio
-   dwim-shell-commands-files-combined-size
-   dwim-shell-commands-git-clone-clipboard-url
-   dwim-shell-commands-git-clone-clipboard-url-to-downloads
-   dwim-shell-commands-image-to-grayscale
-   dwim-shell-commands-image-to-icns
-   dwim-shell-commands-image-to-jpg
-   dwim-shell-commands-image-to-png
-   dwim-shell-commands-pdf-password-protect
-   dwim-shell-commands-reorient-image
-   dwim-shell-commands-resize-gif
-   dwim-shell-commands-resize-image
-   dwim-shell-commands-resize-video
-   dwim-shell-commands-speed-up-gif
-   dwim-shell-commands-speed-up-video
-   dwim-shell-commands-unzip
-   dwim-shell-commands-video-to-gif
-   dwim-shell-commands-video-to-optimized-gif
-   dwim-shell-commands-video-to-webp

If it ever took you a little while to find the right command incantation to get things right, only to forget all about it next time you need it ([I'm looking at you ffmpeg](emacs-ffmpeg-and-macos-alias-commands)), `dwim-shell-command` can help you easily save things for posterity and make them easily accessible in the future.

Since we're talking ffmpeg, here's all it takes to have gif conversion handy:

``` {.commonlisp org-language="emacs-lisp" lexical="no"}
(defun dwim-shell-commands-video-to-gif ()
  "Convert all marked videos to gif(s)."
  (interactive)
  (dwim-shell-command-on-marked-files
   "Convert to gif"
   "ffmpeg -loglevel quiet -stats -y -i '<<f>>' -pix_fmt rgb24 -r 15 '<<fne>>.gif'"
   :utils "ffmpeg"))
```

There's no way I'll remember the ffmpeg command, but I can always fuzzy search my trusty commands with something like `"to gif"` and apply to either the current buffer file or any selected [dired](https://www.gnu.org/software/emacs/manual/html_node/emacs/Dired.html) files.

![](https://xenodium.github.io/images/recordscreenshot-windows-the-lazy-way/to-gif.png)

So where am I going with this? I wrote DWIM shell commands for the bindings I previously described:

  -------- ----------------------------------------------------
  C-c \_   `dwim-shell-commands-macos-screenshot-window`
  C-c (    `dwim-shell-commands-macos-start-recording-window`
  C-c )    `dwim-shell-commands-macos-end-recording-window`
  C-c 8    `dwim-shell-commands-macos-abort-recording-window`
  -------- ----------------------------------------------------

Out of all of commands, `dwim-shell-commands-macos-start-recording-window` is likely the most interesting one.

``` {.commonlisp org-language="emacs-lisp" lexical="no"}
(defun dwim-shell-commands-macos-start-recording-window ()
  "Select and start recording a macOS window."
  (interactive)
  (let* ((window (dwim-shell-commands--macos-select-window))
         (path (dwim-shell-commands--generate-path "~/Desktop" (car window) ".mov"))
         (buffer-file-name path) ;; override so <<f>> picks it up
         (inhibit-message t))
    (dwim-shell-command-on-marked-files
       "Start recording a macOS window."
       (format
        "# record .mov
         macosrec --record '%s' --mov --output '<<f>>'
         # speed .mov up x1.5
         ffmpeg -i '<<f>>' -an -filter:v 'setpts=1.5*PTS' '<<fne>>_x1.5.<<e>>'
         # convert to gif x1.5
         ffmpeg -loglevel quiet -stats -y -i '<<fne>>_x1.5.<<e>>' -pix_fmt rgb24 -r 15 '<<fne>>_x1.5.gif'
         # speed .mov up x2
         ffmpeg -i '<<f>>' -an -filter:v 'setpts=2*PTS' '<<fne>>_x2.<<e>>'
         # convert to gif x2
         ffmpeg -loglevel quiet -stats -y -i '<<fne>>_x2.<<e>>' -pix_fmt rgb24 -r 15 '<<fne>>_x2.gif'"
        (cdr window))
       :silent-success t
       :monitor-directory "~/Desktop"
       :no-progress t
       :utils '("ffmpeg" "macosrec"))))
```

As you likely expect, this command invokes `macosrec` to start recording a window. The nifty part is that when it's done recording (and saving the .mov file), it automatically creates multiple variants. For starters, it creates x1.5 and x2 .mov videos, but it also generates their .gif counterparts.

![](https://xenodium.github.io/images/recordscreenshot-windows-the-lazy-way/bunch.png)

Let's recap here for a sec. You start recording a window video with `C-c (`, end with `C-c )`, and automagically have all these generated files waiting for you.

You can subsequently inspect any of the video candidates and pick the most appropriate variant. Discard whatever else you don't need.

The output bundle is tailored to my needs. Maybe you want to invoke [gifsycle](https://www.lcdf.org/gifsicle/) for more optimized versions? Or maybe you want automatic webp generation via `ffmpeg`? DWIM does that I mean, so you likely have other plans…

`dwim-shell-commands-macos-start-recording-window` and all other DWIM commands are now included in [dwim-shell-commands.el](https://github.com/xenodium/dwim-shell-command/blob/main/dwim-shell-commands.el), which ships optionally as part of [dwim-shell-command](https://github.com/xenodium/dwim-shell-command).

[macosrec](https://github.com/xenodium/macosrec) is also on GitHub, but if you want to be on your way, you can install via:

``` {.bash org-language="sh"}
brew tap xenodium/macosrec
brew install macosrec
```

This is my way to record and screenshot windows the lazy way. How would you tweak to make it yours?

# \[2023-04-20 Thu\] ob-swiftui updates
---
id: ob-swiftui-updates
---

While [experimenting with delegating Markdown](https://indieweb.social/@xenodium/110227186721704189) blocks to [Org babel](https://orgmode.org/worg/org-contrib/babel/) in Emacs [chatgpt-shell](https://github.com/xenodium/chatgpt-shell), I resurrected [ob-swiftui](https://github.com/xenodium/ob-swiftui). A package I had written to execute and render SwiftUI blocks in org babel.

[ob-swiftui](https://github.com/xenodium/ob-swiftui) has two modes of rendering SwiftUI blocks: `:results window`, which runs outside of Emacs in a native window and `:results file`, which renders and saves to a file. The latter can be viewed directly from Emacs.

`:results file` was a little clunky. That is, it hardcoded dimensions I had to manually modify if the canvas wasn't big enough. It was also a little slow.

The clunkyness really came through with my chatgpt-shell experiments, so I took a closer look and made a few changes to remove hardcoding and speeds things up.

The results ain't too shabby.

![](https://xenodium.github.io/images/ob-swiftui-updates/file-render.gif)

Another tiny improvement is that if you'd like to compose a more complex layout made of multiple custom views, `ob-swiftui` now looks for a `ContentView` as that root view by default. Specifying another root view was already possible but it had to be explicitly requested via `:view` param.

You can now omit the `:view` param if you name the root view `ContentView`:

``` org
#+begin_src swiftui
  struct ContentView: View {
    var body: some View {
        TopView()
        BottomView()
    }
  }

  struct TopView: View {
    var body: some View {
      Text("Top text")
    }
  }

  struct BottomView: View {
    var body: some View {
      Text("Bottom text")
    }
  }
#+end_src
```

The improvements have been pushed to [ob-swiftui](https://github.com/xenodium/ob-swiftui) and will soon be picked up on [melpa](https://melpa.org/#/ob-swiftui).

Edit: Added ContentView details.

# \[2023-04-15 Sat\] My Emacs eye candy
---
id: my-emacs-eye-candy
---

I get the occasional question about my Emacs theme, font, and other eye candy. I'm always tickled and happy to share.

![](https://xenodium.github.io/images/my-emacs-eye-candy/Emacs.png)

It's been a while since I've made visually significant changes to my Emacs config. May as well briefly document for posterity…

## Nyan Mode

First things first. The adorable and colorful little fella in my mode line is a [Nyan Cat](https://en.wikipedia.org/wiki/Nyan_Cat) (if you dare, check the [meme video](https://www.youtube.com/watch?v=QH2-TGUlwu4)). Yes, I know it's sooo 2011, but it's 2023 and I still love the little guy hanging out in my Emacs mode line. I still get asked about it.

![](https://xenodium.github.io/images/my-emacs-eye-candy/Nyan.png)

This fabulous feature comes to us via the great [Nyan Mode](https://github.com/TeMPOraL/nyan-mode/) package. If looks haven't convinced you, Nyan also packs scrolling functionality. Click anywhere in it.

Oh, and if you can't get enough of Nyan, there's also [zone-nyan](https://depp.brause.cc/zone-nyan/) for Emacs.

## Emacs Plus (macOS)

I should mention I'm running Emacs 28 on macOS via the excellent [Emacs Plus](https://github.com/d12frosted/homebrew-emacs-plus) [homebrew](https://brew.sh/) recipe. These are all the options I enable.

``` {.bash org-language="sh"}
brew install  emacs-plus@28 --with-imagemagick --with-no-frame-refocus --with-native-comp --with-savchenkovaleriy-big-sur-icon
```

### Icon

Since we're talking eye candy, let's chat about `--with-savchenkovaleriy-big-sur-icon`. This Emacs Plus option enables Valeriy Savchenko's [wonderful icon](https://github.com/SavchenkoValeriy/emacs-icons).

![](https://xenodium.github.io/images/my-emacs-eye-candy/swap.png)

### Titlebar

I've enabled both transparent title bar as well as dark appearance, giving a minimal window decoration.

![](https://xenodium.github.io/images/my-emacs-eye-candy/decoration.jpg)

``` {.commonlisp org-language="emacs-lisp" lexical="no"}
(add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
(add-to-list 'default-frame-alist '(ns-appearance . dark))
```

Note: both of these variables are prefixed `ns-` (macOS-only settings).

## Font (JetBrains Mono)

I've been on [JetBrains Mono](https://www.jetbrains.com/lp/mono/) font for quite some time now. In the past, I've also been a fan of [Mononoki](https://madmalik.github.io/mononoki/) and [Menlo](https://en.wikipedia.org/wiki/Menlo_(typeface)) (on macOS) or [Meslo](https://github.com/andreberg/Meslo-Font) (similar elsewhere).

## Theme (Material)

I'm using the great [Material Theme for Emacs](https://github.com/cpaulik/emacs-material-theme), with a [bunch of tweaks of my own](https://github.com/xenodium/dotsies/blob/790465b1824481b81bf5c6e08949128c13d76f95/emacs/features/fe-ui.el#L42).

## Modeline tabs/ribbons (Moody)

The [moody](https://github.com/tarsius/moody) package adds a nice touch displaying mode line elements as tabs and ribbons.

## Modeline menus (Minions)

The [minions](https://github.com/tarsius/minions) package removes lots of minor mode clutter from the mode line and stashes it away in menus.

## Hiding modeline (hide mode line mode)

Hiding the mode line isn't something I use in most major modes. However, I found it complements my shell ([eshell](https://www.masteringemacs.org/article/complete-guide-mastering-eshell)) quite well. While I was sceptical at first, once I hid the mode line in my shell I never looked back. I just didn't miss it. I also love the uncluttered clean vibe. [hide-mode-line-mode](https://github.com/hlissner/emacs-hide-mode-line) can help with that.

![](https://xenodium.github.io/images/my-emacs-eye-candy/eshell.gif)

## Welcome screen

Back in October 2022, I experimented with [adding a minimal welcome screen](emacs-a-welcoming-experiment/). I was initially hesitant, as I was already a fan of the welcome scratch buffer. In any case, I figured I'd eventually get tired of it and remove it. Well, it's enabled in my config still ;) My initial attachment to a landing scratch quickly faded. I'm only a `C-x b` binding away from invoking ivy-switch-buffer to get me anywhere.

![](https://xenodium.github.io/images/my-emacs-eye-candy/welcome.png)

The great Emacs logo originally [shared by u/pearcidar43](https://www.reddit.com/r/unixporn/comments/yamj5f/exwm_emacs_is_kinda_comfy_as_a_wm/).

## Zones

I've been meaning to re-enable [zones](https://github.com/emacs-mirror/emacs/blob/master/lisp/play/zone.el) in my config. They always gave me a good tickle. I've already mentioned [zone-nyan](https://depp.brause.cc/zone-nyan/), but if you're new to zones, they kick off after a period of inactivity (similar to a screensaver).

Here's `zone-pgm-rotate` in all its glory. Oh and it's built-in!

![](https://xenodium.github.io/images/my-emacs-eye-candy/rotate.webp)

Coincidentally, I had a go at writing [a basic zone a little while ago](emacs-zones-to-lift-you-up/).

![](https://xenodium.github.io/images/my-emacs-eye-candy/zone.gif)

## Config

Most of the items mentioned I pulled from my [Emacs config](https://github.com/xenodium/dotsies)'s [fe-ui.el](https://github.com/xenodium/dotsies/blob/main/emacs/features/fe-ui.el). There's more there if you're interested.

What is some of your favorite Emacs eye candy? [reddit](https://www.reddit.com/r/emacs/comments/12nbb9x/my_emacs_eye_candy/) / [mastodon](https://indieweb.social/@xenodium/110204024063552954) / [twitter](https://twitter.com/xenodium/status/1647293089394900993).

# \[2023-04-08 Sat\] shell-maker, a maker of Emacs shells
---
id: a-shell-maker
---

A few weeks ago, I wrote about an experiment to bring [ChatGPT to Emacs as a shell](a-chatgpt-emacs-shell/). I was fairly new to both [ChatGPT](https://openai.com/blog/chatgpt) and building anything on top of [comint](https://www.gnu.org/software/emacs/manual/html_node/emacs/Shell-Prompts.html). It was a fun exercise, which also generated some interest.

As mentioned in the previous post, I took inspiration in other Emacs packages (primarily [ielm](https://www.gnu.org/software/emacs/manual/html_node/emacs/Lisp-Interaction.html)) to figure out what I needed from comint. Soon, I got ChatGPT working.

![](https://xenodium.github.io/images/a-shell-maker/streamer.gif)

As I was looking at [OpenAI](https://openai.com) API docs, I learned about DALL-E: "an AI system that can create realistic images and art from a description in natural language."

Like ChatGPT, they also offered an API to DALL-E, so I figured I may as well try to write a shell for that too… and I did.

![](https://xenodium.github.io/images/a-shell-maker/dalle.gif)

There was quite a bit of code duplication between the two Emacs shells I had just written. At the same time, I started hearing from folks about integrating other tools, some cloud-based, some local, proprietary, open source.. There's [Cody](https://about.sourcegraph.com/cody), [invoke-ai](https://github.com/invoke-ai/InvokeAI), [llama.cpp](https://github.com/ggerganov/llama.cpp), [alpaca.cpp](https://github.com/antimatter15/alpaca.cpp), and the list continues to grow.

With that in mind, I set out to reduce the code duplication and consolidate into a reusable package. And so `shell-maker` was born, a maker of Emacs shells.

`shell-maker`'s internals aren't too different from the code I had before. It's still powered by comint, but instead offers a reusable convenience wrapper.

It takes little code to implement a shell, like the sophisticated new `greeter-shell` ;)

![](https://xenodium.github.io/images/a-shell-maker/maria.gif)

``` {.commonlisp org-language="emacs-lisp"}
(require 'shell-maker)

(defvar greeter-shell--config
  (make-shell-maker-config
   :name "Greeter"
   :execute-command
   (lambda (command _history callback error-callback)
     (funcall callback
              (format "Hello \"%s\"" command)
              nil))))

(defun greeter-shell ()
  "Start a Greeter shell."
  (interactive)
  (shell-maker-start greeter-shell--config))
```

[shell-maker](https://github.com/xenodium/chatgpt-shell#shell-maker) is available on GitHub and currently bundled with [chatgpt-shell](https://github.com/xenodium/chatgpt-shell). If there's enough interest and usage, I may just break it out into its own package. For now, it's convenient to keep with `chatgpt-shell` and `dall-e-shell`.

If you plug `shell-maker` into other tools, I'd love to hear about it.

Happy shell making!

# \[2023-04-06 Thu\] Flat Habits 1.1.4 released
---
id: flat-habits-114-released
---

[Flat Habits](https://flathabits.com/) 1.1.4 is now available on the [App Store](https://apps.apple.com/app/id1558358855).

Flat Habits is a habit tracker that’s mindful of your time, data, and privacy. It's a simple but effective iOS app.

<center>
  <img src="https://flathabits.com/intro_thumbnail.jpg" alt="today_no_filter.png" width="90%">
  <br/>
  <br/>
  <a href="https://apps.apple.com/app/id1558358855">
    <img src="https://xenodium.github.io/images/flat-habits-for-ios/download-on-app-store.png" alt="download-on-app-store.png" width="180px">
  </a>
</center>

If you care about how your data is stored, Flat Habits is powered by [org](https://orgmode.org) plain text markup without any cloud component. You can use your [favorite editor](frictionless-org-habits-on-ios/) (Emacs, Vim, VSCode, etc.) to poke at habit data, if that's your cup of tea.

## What's new?

-   Quicker toggling, now exposing Done/Skip.
    -   Double tap marks Done.
-   Also display in 12 hour time format.
-   Overdue habits are now labelled "past" and coloured orange.
-   Don't dismiss creation dialog if tapping outside.
-   Set #+STARTUP: nologdrawer in new files.

## Are you a fan?

Is Flat Habits helping you keep up with your habits? Please [rate/review](https://apps.apple.com/app/id1558358855?action=write-review) 😊

# \[2023-03-21 Tue\] A ChatGPT Emacs shell
---
id: a-chatgpt-emacs-shell
---

UPDATE: `chatgpt-shell` [has evolved a bit](chatgpt-shell-available-on-melpa/) and is now [on MELPA](https://melpa.org/#/chatgpt-shell).

I had been meaning to give [ChatGPT](https://openai.com/blog/chatgpt) a good try, preferably from Emacs. As an [eshell](https://www.gnu.org/software/emacs/manual/html_mono/eshell.html) fan, ChatGPT seemed like the perfect fit for a shell interface of sorts. With that in mind, I set out to wire ChatGPT with Emacs's general command interpreter ([comint](https://www.gnu.org/software/emacs/manual/html_node/emacs/Shell-Prompts.html)).

I had no previous experience building anything comint-related, so I figured I could just take a peek at an existing comint-derived mode to achieve a similar purpose. `inferior-emacs-lisp-mode` ([ielm](https://www.gnu.org/software/emacs/manual/html_node/emacs/Lisp-Interaction.html)) seemed to fit the bill just fine, so I borrowed quite a bit to assemble a basic shell experience.

From then on, it was mostly about sending each request over to the ChatGPT API to get a response. For now, I'm relying on [curl](https://curl.se/docs/manpage.html) to make each request. The invocation is fairly straightforward:

``` {.bash org-language="sh"}
curl "https://api.openai.com/v1/chat/completions" \
     -H "Authorization: Bearer YOUR_OPENAI_KEY" \
     -H "Content-Type: application/json" \
     -d "{
     \"model\": \"gpt-3.5-turbo\",
     \"messages\": [{\"role\": \"user\", \"content\": \"YOUR PROMPT\"}]
     }"
```

There are two bits of information needed in each request. The API key, which you must get from [OpenAI](https://openai.com/), and the prompt text itself (i.e. whatever you want ChatGPT to help you with). The results are not too shabby.

![](https://xenodium.github.io/images/a-chatgpt-emacs-shell/chatgpt.gif)

I've uploaded the code to GitHub as a tiny [chatgpt-shell](https://github.com/xenodium/chatgpt-shell) package. It's a little experimental and rough still, but hey, it does the job for now. Head over to [github](https://github.com/xenodium/chatgpt-shell) to take a look. The latest iteration handles multiline prompts (use C-j for newlines) and basic code highlighting.

Let's see where it all goes. Pull requests for improvements totally welcome ;-)

# \[2023-03-04 Sat\] `*scratch*` a new minimal org mode scratch area for iOS
---
id: scratch-a-minimal-scratch-area
---

While we already have lots of note-taking apps on iOS, I wanted a minimal `*scratch*` area (à la Emacs), so I built one.

<br/>
<center>
  <a href="https://apps.apple.com/app/id1671420139">
    <img src="https://xenodium.github.io/images/scratch-a-minimal-scratch-area/icon.png" alt="*scratch* icon" width="150px">
  </a>
</center>

What's the use-case? You're on the go. Someone's telling you directions, or a phone number, name of a restaurant, anything really… you just need to write it down *right now, quickly*!

No time to create a new contact, a note, a file, or spend time on additional taps, bring up keyboard… You just want to write it somewhere with the least amount of friction.

![](https://xenodium.github.io/images/scratch-a-minimal-scratch-area/scratch-download_no_audio_x2.6.webp)

Being an Emacs and org user, I had to sprinkle the app with basic markup support for headings, lists and checkboxes. Also, having a `*scratch*` "buffer" on my iPhone gives me that warm emacsy fuzzy feeling :)

You can download `*scratch*` from the [App Store](https://apps.apple.com/gb/app/scratch/id1671420139).

Find it useful? Please help me spread the word. Tell your friends.

<br/>
<br/>
<center>
  <a href="https://apps.apple.com/app/id1671420139">
    <img src="https://xenodium.github.io/images/flat-habits-for-ios/download-on-app-store.png" alt="download-on-app-store.png" width="180px">
  </a>
</center>

# \[2023-01-29 Sun\] Chicken Karaage recipe
---
id: chicken-karaage-recipe
---

Huge fan of Chicken Karaage, but never really made it at home until recently.

![](https://xenodium.github.io/images/chicken-karaage-recipe/frying.jpg)

![](https://xenodium.github.io/images/chicken-karaage-recipe/fried.jpg)

![](https://xenodium.github.io/images/chicken-karaage-recipe/dipping.jpg)

![](https://xenodium.github.io/images/chicken-karaage-recipe/sauces.jpg)

## Dice the chicken

-   350 grams boneless chicken thighs

Dice the chicken up.

## Marinade for 30 mins

-   1 tablespoon soy sauce (Kikkoman or similar)
-   1 tablespoon cooking Sake
-   2 tablespoons of grated ginger (include liquids)
-   1/2 teaspoon Mirin

Mix all ingredients into a ziploc bag. Add the diced chicken and let it marinade for 30 minutes in the fridge.

## Pat dry

-   Paper towels

After marinating, pat the chicken dry with paper towels and set aside.

## Breading

-   Potato starch

Ok, not quite breading since we're using potato starch but same goal. Sprinkle the chicken pieces and make sure they are fully coated with the starch.

## Frying (1st round)

-   Vegetable oil
-   Paper towels

Heat up (roughly at 160°C) enough oil in a pan to cover the chicken pieces. Cook for about 3 minutes. The pieces don't have to be super golden at this point. There will be another round of frying for that.

## Rest for 4 minutes

-   Paper towels

Let the chicken rest on paper towels for about 4 minutes before frying again.

## Frying (2nd round)

-   Vegetable oil
-   Paper towels

This time heat up the oil at roughly 200°C. This is a quick in-and-out action to make the chicken crispy. Cook for 30 seconds. Take out and set aside on some paper towels. Let it cool and it's ready to eat.

## Dipping

-   Kewpie mayo
-   Sriracha sauce

This is totally optional, but I'm a fan of both Kewpie mayo and Sriracha sauce. You can dip your chicken in either or both!

# \[2023-01-10 Tue\] Emacs: org-present in style
---
id: emacs-org-present-in-style
---

I had been meaning to check out David Wilson's [System Crafters](https://systemcrafters.cc) post detailing [his presentations style](https://systemcrafters.net/emacs-tips/presentations-with-org-present/) achieved with the help of [org-present](https://github.com/rlister/org-present) and his own customizations. If you're looking for ways to present from Emacs itself, David's post is well worth a look.

org-present's spartan but effective approach resonated with me. David's touches bring the wonderfully stylish icing to the cake. I personally liked his practice of collapsing slide subheadings by default. This lead me to think about slide navigation in general…

There were two things I wanted to achieve:

1.  Easily jump between areas of interest. Subheadings, links, and code blocks would be a good start.
2.  Collapse all but the current top-level heading within the slide, as navigation focus changes.

A quick search for existing functions led me to `org-next-visible-heading`, `org-next-link`, and `org-next-block`. While these make it easy to jump through jump between headings, links, org block on their own, I wanted to jump to whichever one of these is next (similar a web browser's tab behaviour). In a way, [DWIM](https://en.wikipedia.org/wiki/DWIM) style.

I wrapped the existing functions to enable returning positions. This gave me `ar/rg-next-visible-heading-pos`, `ar/rg-next-link-pos`, and `ar/rg-next-block-pos` respectively. Now that I can find out the next location of either of these items, I can subsequently glue the navigation logic in a function like `ar/org-present-next-item`. To restore balance to the galaxy, I also added `ar/org-present-previous-item`.

``` {.commonlisp org-language="emacs-lisp" lexical="no"}
(defun ar/org-present-next-item (&optional backward)
  "Present and reveal next item."
  (interactive "P")
  ;; Beginning of slide, go to previous slide.
  (if (and backward (eq (point) (point-min)))
      (org-present-prev)
    (let* ((heading-pos (ar/org-next-visible-heading-pos backward))
           (link-pos (ar/org-next-link-pos backward))
           (block-pos (ar/org-next-block-pos backward))
           (closest-pos (when (or heading-pos link-pos block-pos)
                          (apply (if backward #'max #'min)
                                 (seq-filter #'identity
                                             (list heading-pos
                                                   link-pos
                                                   block-pos))))))
      (if closest-pos
          (progn
            (cond ((eq heading-pos closest-pos)
                   (goto-char heading-pos))
                  ((eq link-pos closest-pos)
                   (goto-char link-pos))
                  ((eq block-pos closest-pos)
                   (goto-char block-pos)))
            ;; Reveal relevant content.
            (cond ((> (org-current-level) 1)
                   (ar/org-present-reveal-level2))
                  ((eq (org-current-level) 1)
                   ;; At level 1. Collapse children.
                   (org-overview)
                   (org-show-entry)
                   (org-show-children)
                   (run-hook-with-args 'org-cycle-hook 'children))))
        ;; End of slide, go to next slide.
        (org-present-next)))))

(defun ar/org-present-previous-item ()
  (interactive)
  (ar/org-present-next-item t))

(defun ar/org-next-visible-heading-pos (&optional backward)
  "Similar to `org-next-visible-heading' but for returning position.

Set BACKWARD to search backwards."
  (save-excursion
    (let ((pos-before (point))
          (pos-after (progn
                       (org-next-visible-heading (if backward -1 1))
                       (point))))
      (when (and pos-after (not (equal pos-before pos-after)))
        pos-after))))

(defun ar/org-next-link-pos (&optional backward)
  "Similar to `org-next-visible-heading' but for returning position.

Set BACKWARD to search backwards."
  (save-excursion
    (let* ((inhibit-message t)
           (pos-before (point))
           (pos-after (progn
                        (org-next-link backward)
                        (point))))
      (when (and pos-after (or (and backward (> pos-before pos-after))
                               (and (not backward) (> pos-after pos-before))))
        pos-after))))

(defun ar/org-next-block-pos (&optional backward)
  "Similar to `org-next-block' but for returning position.

Set BACKWARD to search backwards."
  (save-excursion
    (when (and backward (org-babel-where-is-src-block-head))
      (org-babel-goto-src-block-head))
    (let ((pos-before (point))
          (pos-after (ignore-errors
                       (org-next-block 1 backward)
                       (point))))
      (when (and pos-after (not (equal pos-before pos-after)))
        ;; Place point inside block body.
        (goto-char (line-beginning-position 2))
        (point)))))

(defun ar/org-present-reveal-level2 ()
  (interactive)
  (let ((loc (point))
        (level (org-current-level))
        (heading))
    (ignore-errors (org-back-to-heading t))
    (while (or (not level) (> level 2))
      (setq level (org-up-heading-safe)))
    (setq heading (point))
    (goto-char (point-min))
    (org-overview)
    (org-show-entry)
    (org-show-children)
    (run-hook-with-args 'org-cycle-hook 'children)
    (goto-char heading)
    (org-show-subtree)
    (goto-char loc)))
```

Beware, this was a minimal effort (with redundant code, duplication, etc) and should likely be considered a proof of concept of sorts, but the results look promising. You can see a demo in action.

![](https://xenodium.github.io/images/emacs-org-present-in-style/org-navigate_x1.6.webp)

While this was a fun exercise, I can't help but think there must be a cleaner way of doing it or there are existing packages that already do this for you. If you do know, I'd love to know.

Future versions of this code will likely be updated in [my Emacs org config](https://github.com/xenodium/dotsies/blob/main/emacs/features/fe-org.el).

## Update

Removed a bunch of duplication and now rely primarily on existing `org-next-visible-heading`, `org-next-link`, and `org-next-block`.

# \[2023-01-08 Sun\] Emacs: insert and render SF symbols
---
id: emacs-insert-and-render-sf-symbols
---

About a week ago, I added an Emacs [function to insert SF symbol names](emacs-macro-me-some-sf-symbols/). This is specially useful for SwiftUI. I didn't bother too much with inserting symbols themselves since I hadn't figured out a way to render them for all buffers. That's now changed.

Christian Tietze and Alan Third both have useful posts in this space:

-   [Emacs, fonts and fontsets](http://idiocy.org/emacs-fonts-and-fontsets.html)
-   [Use San Francisco Font for SF Symbols Everywhere in Emacs](https://christiantietze.de/posts/2023/01/use-sf-pro-for-sf-symbols-everywhere-in-emacs/)

I'm currently using the following to render SF symbols in all buffers (macOS only):

``` {.commonlisp org-language="emacs-lisp" lexical="no"}
;; Enable rendering SF symbols on macOS.
(when (memq system-type '(darwin))
  (set-fontset-font t nil "SF Pro Display" nil 'append))
```

Now that I can render SF symbols everywhere, I *may* be more included to use them to spif things up.

I've added `sf-symbol-insert` to [sf.el](https://github.com/xenodium/dotsies/blob/main/emacs/ar/sf.el), let's see if usage sticks.

![](https://xenodium.github.io/images/emacs-insert-and-render-sf-symbols/sf-insert-trimmed_x1.8.webp)

# \[2022-12-31 Sat\] Emacs: Macro me some SF Symbols
---
id: emacs-macro-me-some-sf-symbols
---

For inserting SF Symbols in SwiftUI, I typically rely on Apple's [SF Symbols app](https://developer.apple.com/sf-symbols/) to browse the symbols's catalog. Once I find a symbol I'm happy with, I copy its name and paste it into my Swift source. This works fairly well.

With Christian Tietze recently posting [how he rendered SF Symbols in Emacs](https://christiantietze.de/posts/2022/12/sf-symbols-emacs-tab-numbers/), I figured there may be a way to shift the above workflow to rely on Emacs completion instead. While I initially went down a rabbit hole to programmatically extract SF symbols (via something like [SFSafeSymbols](https://github.com/SFSafeSymbols/SFSafeSymbols)), I took a step back to rethink the strategy.

From the [SF Symbols app](https://developer.apple.com/sf-symbols/), one can select multiple symbols and copy/paste either the symbols themselves or their respective names. The catch is you can only copy disjointed data. That is, you can copy the symbols or their names, but not both in one go. Let's take a look at what the disjointed data looks like. I've pasted both under separate sections in an Emacs buffer.

![](https://xenodium.github.io/images/emacs-macro-me-some-sf-symbols/disjointed.png)

If I could rejoin these two sets, I would have a lookup table I could easily invoke from Emacs.

There are roughly 4500 symbols, so copying, pasting, along with text manipulation isn't manually feasible. Lucky for us, an Emacs [keyboard macro](https://www.gnu.org/software/emacs/manual/html_node/emacs/Keyboard-Macros.html) is the perfect hammer for this nail. You can see the macro in action below.

![](https://xenodium.github.io/images/emacs-macro-me-some-sf-symbols/mini-macro_x1.6.webp)

This looks fairly magical (and it is), but when you break it down into its building blocks, it's nothing more than recording your keystrokes and replaying them. Starting with the cursor at the beginning of `square.and.arrow.up`, these are the keystrokes we'd need to record:

C-s
:   [iseach-forward](https://www.gnu.org/software/emacs/manual/html_node/emacs/Basic-Isearch.html) to search for a character and jump to it

=
:   insert `=` so we jump to == Symbols ==

\<return\>
:   runs [isearch-exit](https://www.gnu.org/software/emacs/manual/html_node/emacs/Basic-Isearch.html) since we're done jumping.

C-n
:   `next-line`.

C-a
:   `beginning-of-line`.

C-SPC
:   `set-mark-command` to activate the region.

C-f
:   `forward-char` to select symbol.

C-w
:   `kill-ring-save` to cut/kill the symbol.

C-u C-\<space\>
:   `set-mark-command` (with prefix) to jump back to where we started before searching.

C-y
:   `yank` to yank/paste the symbol.

C-\<space\>
:   `set-mark-command` to activate the region.

C-e
:   `end-of-line` to select the entire line.

"
:   As a [smartparens](https://github.com/Fuco1/smartparens) user, inserting quote with region places quotes around selection.

C-n
:   `next-line`.

C-a
:   `beginning-of-line`. We are now at a strategic location where we can replay the above commands.

To start/end recording and executing keyboard macros, use:

C-x (
:   [kmacro-start-macro](https://www.gnu.org/software/emacs/manual/html_node/emacs/Basic-Keyboard-Macro.html)

C-x )
:   [kmacro-end-macro](https://www.gnu.org/software/emacs/manual/html_node/emacs/Basic-Keyboard-Macro.html)

C-x e
:   [kmacro-end-and-call-macro](https://www.gnu.org/software/emacs/manual/html_node/emacs/Basic-Keyboard-Macro.html) runs your macro. Press `e` immediately after to execute again.

C-u 0 C-x e
:   [kmacro-end-and-call-macro](https://www.gnu.org/software/emacs/manual/html_node/emacs/Basic-Keyboard-Macro.html) (with zero prefix) repeat until there is an error.

Our previous example ran on a handful of SF symbols. Let's bring out the big guns and run on the entire dataset. This time, we'll run the entire flow, including macro creation and executing until there is an error (i.e. process the whole lot).

![](https://xenodium.github.io/images/emacs-macro-me-some-sf-symbols/sf-symbol-no-mouse-short_x1.4.webp)

Now that we have our data joined, we can feed it to the humble [completing-read](https://www.gnu.org/software/emacs/manual/html_node/elisp/Completion.html).

![](https://xenodium.github.io/images/emacs-macro-me-some-sf-symbols/sf-symbols-insert-name.png)

It's worth highlighting that to render SF Symbols in Emacs, we must [propertize our text with one of the macOS SF fonts](https://christiantietze.de/posts/2022/12/sf-symbols-emacs-tab-numbers/), for example "SF Pro".

With all the pieces in place, let's use our new function to insert SF symbol names in a SwiftUI snippet. Since we're using `completing-read` we can fuzzy search our lookups with our favorite completion frameworks (in my case via [ivy](https://github.com/abo-abo/swiper)).

![](https://xenodium.github.io/images/emacs-macro-me-some-sf-symbols/sf-search_x1.2.webp)

While this post is macOS-specific, it gives a taste of how powerful Emacs [keyboard macros](https://www.gnu.org/software/emacs/manual/html_node/emacs/Keyboard-Macros.html) can be. Be sure to check out [Emacs Rocks! Episode 05: Macros in style](https://emacsrocks.com/e05.html) and [Keyboard Macros are Misunderstood - Mastering Emacs](https://www.masteringemacs.org/article/keyboard-macros-are-misunderstood). For those that dabble in elisp, you can appreciate how handy [completing-read](https://www.gnu.org/software/emacs/manual/html_node/elisp/Completion.html) is with very little code.

The full source to [sf-symbol-insert-name](https://github.com/xenodium/dotsies/blob/main/emacs/ar/sf.el) is available in my [Emacs config repo](https://github.com/xenodium/dotsies/). The function is fairly bare bones and has had fairly little testing. Patches totally welcome.

## Update

There is some redundancy in the snippet I had forgotten to remove. Either way, latest version at [sf.el](https://github.com/xenodium/dotsies/blob/main/emacs/ar/sf.el).

# \[2022-12-18 Sun\] Emacs: ffmpeg and macOS aliasing commands
---
id: emacs-ffmpeg-and-macos-alias-commands
---

On a recent mastodon [post](https://twit.social/@chris_spackman/109531700714365786), Chris Spackman mentioned he uses Emacs to save [ffmpeg](https://ffmpeg.org/) commands he's figured out for later usage. Emacs is great for this kind of thing. I've tried different approaches over time and eventually landed on [dwim-shell-command](https://github.com/xenodium/dwim-shell-command), a small package I wrote. Like Chris, I also wanted a way to invoke magical incantations of known shell commands without having to remember all the details.

Chris's post reminded me of a few use-cases I'd been meaning to add DWIM shell commands for.

### ffmpeg

1.  Trimming seconds from videos
    -   `dwim-shell-commands-video-trim-beginning` using:

        ``` {.bash org-language="sh"}
        ffmpeg -i '<<f>>' -y -ss <<Seconds:5>> -c:v copy -c:a copy '<<fne>>_trimmed.<<e>>'
        ```

    -   `dwim-shell-commands-video-trim-end` using:

        ``` {.bash org-language="sh"}
        ffmpeg -sseof -<<Seconds:5>> -i '<<f>>' -y -c:v copy -c:a copy '<<fne>>_trimmed.<<e>>'
        ```

        Side-node: The `<<Seconds:5>>` placeholder is recognized as a query, so Emacs will prompt you for a numeric value.
2.  Extracting audio from videos
    -   `dwim-shell-commands-video-to-mp3` using:

        ``` {.bash org-language="sh"}
        ffmpeg -i '<<f>>' -vn -ab 128k -ar 44100 -y '<<fne>>.mp3'
        ```

With these new dwim shell commands added, I can easily apply them one after the other. No need to remember command details.

![](https://xenodium.github.io/images/emacs-ffmpeg-and-macos-alias-commands/trim_convert_mp3_x1.4.webp)

### macOS aliases

After rebuilding Emacs via the wonderful [emacs-plus](https://github.com/d12frosted/homebrew-emacs-plus), I recently broke my existing `/Applications/Emacs.app` alias. No biggie, one can easily add a [new one alias from macOS Finder](https://support.apple.com/en-gb/guide/mac-help/mchlp1046/mac), but I've been wanting to do it from Emacs. Turns out there's a bit of AppleScript we can turn into a more memorale command like `dwim-shell-commands-macos-make-finder-alias`:

``` {.bash org-language="sh"}
osascript -e 'tell application \"Finder\" to make alias file to POSIX file \"<<f>>\" at POSIX file \"%s\"'
```

It's highly unlikely I'll remember the AppleScript snippet (are there better ways?), but I'll easily find and invoke my new command with fuzzy searching:

![](https://xenodium.github.io/images/emacs-ffmpeg-and-macos-alias-commands/make-emacs-alias_x1.4.webp)

### Included in dwim-shell-command

All of these are now included in [dwim-shell-commands.el](https://github.com/xenodium/dwim-shell-command/blob/main/dwim-shell-commands.el), which you can optionally load after installing [dwim-shell-command](https://github.com/xenodium/dwim-shell-command) from [MELPA](https://melpa.org/#/dwim-shell-command).

# \[2022-12-12 Mon\] Emacs: Context-aware yasnippets
---
id: emacs-generate-a-swift-initializer
---

Back in 2020, I wrote a semi-automatic [yasnippet](https://github.com/joaotavora/yasnippet) to [generate Swift initializers](smarter-snippets/). I say semi-automatic because it could have been a little smarter. While it helped generate some of the code, what I really wanted was full context-aware generation. The Swift struct already had a few properties defined, so a smarter yasnippet should have been able to use this info for code generation.

![](https://xenodium.github.io/images/smarter-snippets/snippet.gif)

With an extra push, we could have written a smarter yasnippet, but it may require a fair bit of parsing logic. Fast forward to today, and bringing context-awareness seems like the right match for [Tree-sitter](https://tree-sitter.github.io/tree-sitter/). While Tree-sitter can enable faster and more reliable syntax-highlighting in our beloved text editor, it can also power smarter tools. It does so by exposing a semantic snapshot of our source code using a syntax tree.

Let's see how we can use Tree-sitter to realise our original yasnippet vision. We'll start with the same struct snippet we used back in 2020. The goal is to generate an initializer using the existing definitions.

``` swift
struct Coordinate {
  public let x: Int
  public let y: Int
  public let z: Int
}
```

While Emacs will [will soon ship its own Tree-sitter integration](https://lists.gnu.org/archive/html/emacs-devel/2022-11/msg01443.html), I've opted to try out the [emacs-tree-sitter](https://github.com/emacs-tree-sitter/elisp-tree-sitter) package as Swift support is currently included in [tree-sitter-langs](https://github.com/emacs-tree-sitter/tree-sitter-langs).

I have much to learn much about Tree-sitter syntax trees, but the package ships with a handy tool to dump the tree via `tree-sitter-debug-mode`.

![](https://xenodium.github.io/images/emacs-generate-a-swift-initializer/syntax-tree.png)

With a syntax tree in mind, one can craft a query to semantically extract parts of the code. In our case, we want property names and types. I've yet to get acquainted with Tree-sitter's [query syntax](https://tree-sitter.github.io/tree-sitter/using-parsers#query-syntax), but the package also ships with another handy tool that helps view query results via `tree-sitter-query-builder`.

![](https://xenodium.github.io/images/emacs-generate-a-swift-initializer/query-builder.png)

The following query extracts all the `let properties` in file. You can see the builder in action above, highlighting our query results.

    (struct_declaration (constant_declaration (identifier) @name (type) @value))

If we want to be more thorough, we should likely cater for classes, vars, int/string literals, etc. so the query needs to be extended as follows. I'm sure it can be written differently, but for now, it does the job.

    (struct_declaration (variable_declaration (identifier) @name (type) @type))
    (struct_declaration (variable_declaration (identifier) @name (string) @value))
    (struct_declaration (variable_declaration (identifier) @name (number) @value))
    (struct_declaration (constant_declaration (identifier) @name (type) @value))
    (struct_declaration (constant_declaration (identifier) @name (string) @value))
    (struct_declaration (constant_declaration (identifier) @name (number) @value))
    (class_declaration (variable_declaration (identifier) @name (type) @type))
    (class_declaration (variable_declaration (identifier) @name (string) @value))
    (class_declaration (variable_declaration (identifier) @name (number) @value))
    (class_declaration (constant_declaration (identifier) @name (type) @type))
    (class_declaration (constant_declaration (identifier) @name (string) @value))
    (class_declaration (constant_declaration (identifier) @name (number) @value))

Now that we got our Tree-sitter query sorted, let's write a little elisp to extract the info we need from the generated tree. We'll write a `swift-class-or-struct-vars-at-point` function to extract the struct (or class) at point and subsequently filter its property names/types using our query. To simplify the result, we'll return a list of alists.

``` {.commonlisp org-language="emacs-lisp" lexical="no"}
(defun swift-class-or-struct-vars-at-point ()
  "Return a list of class or struct vars in the form '(((name . \"foo\") (type . \"Foo\")))."
  (cl-assert (seq-contains local-minor-modes 'tree-sitter-mode) "tree-sitter-mode not enabled")
  (let* ((node (or (tree-sitter-node-at-point 'struct_declaration)
                   (tree-sitter-node-at-point 'class_declaration)))
         (vars)
         (var))
    (unless node
      (error "Neither in class nor struct"))
    (mapc
     (lambda (item)
       (cond ((eq 'identifier
                  (tsc-node-type (cdr item)))
              (when var
                (setq vars (append vars (list var))))
              (setq var (list (cons 'name (tsc-node-text
                                           (cdr item))))))
             ((eq 'type
                  (tsc-node-type (cdr item)))
              (setq var (map-insert var 'type (tsc-node-text
                                               (cdr item)))))
             ((eq 'string
                  (tsc-node-type (cdr item)))
              (setq var (map-insert var 'type "String")))
             ((eq 'number
                  (tsc-node-type (cdr item)))
              (setq var (map-insert var 'type "Int")))
             (t (message "%s" (tsc-node-type (cdr item))))))
     (tsc-query-captures
      (tsc-make-query tree-sitter-language
                      "(struct_declaration (variable_declaration (identifier) @name (type) @type))
                       (struct_declaration (variable_declaration (identifier) @name (string) @value))
                       (struct_declaration (variable_declaration (identifier) @name (number) @value))
                       (struct_declaration (constant_declaration (identifier) @name (type) @value))
                       (struct_declaration (constant_declaration (identifier) @name (string) @value))
                       (struct_declaration (constant_declaration (identifier) @name (number) @value))
                       (class_declaration (variable_declaration (identifier) @name (type) @type))
                       (class_declaration (variable_declaration (identifier) @name (string) @value))
                       (class_declaration (variable_declaration (identifier) @name (number) @value))
                       (class_declaration (constant_declaration (identifier) @name (type) @type))
                       (class_declaration (constant_declaration (identifier) @name (string) @value))
                       (class_declaration (constant_declaration (identifier) @name (number) @value))")
      node nil))
    (when var
      (setq vars (append vars (list var))))
    vars))
```

Finally, we write a function to generate a Swift initializer from our property list.

``` {.commonlisp org-language="emacs-lisp" lexical="no"}
(defun swift-class-or-struct-initializer-text (vars)
  "Generate a Swift initializer from property VARS."
  (cl-assert (seq-contains local-minor-modes 'tree-sitter-mode) "tree-sitter-mode not enabled")
  (format
   (string-trim
    "
init(%s) {
  %s
}")
   (seq-reduce (lambda (reduced var)
                 (format "%s%s%s: %s"
                         reduced
                         (if (string-empty-p reduced)
                             "" ", ")
                         (map-elt var 'name)
                         (map-elt var 'type)))
               vars "")
   (string-join
    (mapcar (lambda (var)
              (format "self.%s = %s"
                      (map-elt var 'name)
                      (map-elt var 'name)))
            vars)
    "\n  ")))
```

We're so close now. All we need is a simple way invoke our code generator. We can use yasnippet for that, making `init` our expandable keyword.

    # -*- mode: snippet -*-
    # name: init all
    # key: init
    # --
    `(swift-class-or-struct-initializer-text (swift-class-or-struct-vars-at-point))`

And with all that, we've got our yasnippet vision accomplished!

![](https://xenodium.github.io/images/emacs-generate-a-swift-initializer/init-sitter_x2.webp)

Be sure to check out this year's relevant [EmacsConf](https://emacsconf.org/) talk: [Tree-sitter beyond syntax highlighting](https://emacsconf.org/2022/talks/treesitter/).

All code is now pushed to my [config repo](https://github.com/xenodium/dotsies/commit/9a44606935e8d57d7b3bde2d8d051defbf254a9e). By the way, I'm not super knowledgable of neither yasnippet nor Tree-sitter. Improvements are totally welcome. Please reach out on the [Fediverse](https://indieweb.social/@xenodium) if you have suggestions!

## Update

[Josh Caswell](https://gitlab.com/woolsweater) kindly pointed out a couple of interesting items:

1.  tree-sitter-langs's [Swift grammar is fairly outdated/incomplete](https://www.reddit.com/r/emacs/comments/zkb7aq/comment/izzjx3l/).
2.  There are more up-to-date Swift grammar implementations currently available:
    -   [tree-sitter-swifter](https://gitlab.com/woolsweater/tree-sitter-swifter) (by Josh Caswell himself)
    -   [tree-sitter-swift](https://github.com/alex-pinkus/tree-sitter-swift) (by [Alex Pinkus](https://twitter.com/alexpinkus))

# \[2022-11-13 Sun\] Emacs: quickly killing processes
---
id: emacs-quick-kill-process
---

Every so often, I need to kill the odd unresponsive process. While I really like `proced` (check out Mickey Petersen's [article](https://www.masteringemacs.org/article/displaying-interacting-processes-proced)), I somehow find myself using macOS's [Activity Monitor](https://support.apple.com/en-bw/guide/activity-monitor/actmaea30277/mac) to this purpose. Kinda odd, considering I prefer to do these kinds of things from Emacs.

What I'd really like is a way to quickly fuzzy search a list of active processes and choose the unresponsive culprid, using my preferred completion frontend (in my case [ivy](https://github.com/abo-abo/swiper)).

![](https://xenodium.github.io/images/emacs-quick-kill-process/kill_x1.8.webp)

The function below gives us a fuzzy-searchable process utility. While we could use `ivy-read` directly in our implementation, we're better of using [completing-read](https://www.gnu.org/software/emacs/manual/html_node/elisp/Completion.html) to remain compatible with other completion frameworks. I'm a big fan of the humble `completing-read`. You feed it a list of candidates and it prompts users to pick one.

To build our process list, we can lean on `proced`'s own source: `proced-process-attributes`. We transform its output to an [alist](https://www.gnu.org/software/emacs/manual/html_node/elisp/Association-Lists.html), formatting the visible keys to contain the process id, owner, command name, and the command line which invoked the process. Once a process is chosen, we can send a kill signal using ~~signal-process~~ [dwim-shell-command](https://github.com/xenodium/dwim-shell-command) and our *job is done*.

``` {.commonlisp org-language="emacs-lisp" lexical="no"}
(require 'dwim-shell-command)
(require 'map)
(require 'proced)
(require 'seq)

(defun dwim-shell-commands-kill-process ()
  "Select and kill process."
  (interactive)
  (let* ((pid-width 5)
         (comm-width 25)
         (user-width 10)
         (processes (proced-process-attributes))
         (candidates
          (mapcar (lambda (attributes)
                    (let* ((process (cdr attributes))
                           (pid (format (format "%%%ds" pid-width) (map-elt process 'pid)))
                           (user (format (format "%%-%ds" user-width)
                                         (truncate-string-to-width
                                          (map-elt process 'user) user-width nil nil t)))
                           (comm (format (format "%%-%ds" comm-width)
                                         (truncate-string-to-width
                                          (map-elt process 'comm) comm-width nil nil t)))
                           (args-width (- (window-width) (+ pid-width user-width comm-width 3)))
                           (args (map-elt process 'args)))
                      (cons (if args
                                (format "%s %s %s %s" pid user comm (truncate-string-to-width args args-width nil nil t))
                              (format "%s %s %s" pid user comm))
                            process)))
                  processes))
         (selection (map-elt candidates
                             (completing-read "kill process: "
                                              (seq-sort
                                               (lambda (p1 p2)
                                                 (string-lessp (nth 2 (split-string (string-trim (car p1))))
                                                               (nth 2 (split-string (string-trim (car p2))))))
                                               candidates) nil t)))
         (prompt-title (format "%s %s %s"
                               (map-elt selection 'pid)
                               (map-elt selection 'user)
                               (map-elt selection 'comm))))
    (when (y-or-n-p (format "Kill? %s" prompt-title))
      (dwim-shell-command-on-marked-files
       (format "Kill %s" prompt-title)
       (format "kill -9 %d" (map-elt selection 'pid))
       :utils "kill"
       :error-autofocus t
       :silent-success t))))
```

I've pushed `dwim-shell-commands-kill-process` to my ~~[config](https://github.com/xenodium/dotsies/)~~ [dwim-shell-commands.el](https://github.com/xenodium/dwim-shell-command/commit/b98f45c7901446cf1ab60be2ab648c623e774427). Got suggestions? Alternatives? Lemme know.

## Update

I've moved `dwim-shell-commands-kill-process` from my Emacs [config](https://github.com/xenodium/dotsies) to [dwim-shell-commands.el](https://github.com/xenodium/dwim-shell-command/blob/main/dwim-shell-commands.el). A few advantages:

-   Killing processes is now async.
-   Should anything go wrong, an error message is now accessible.
-   You can easily install via [MELPA](https://melpa.org/#/dwim-shell-command).

If you prefer the previous version (without a dependency on [dwim-shell-command](https://github.com/xenodium/dwim-shell-command)), have a look at the [initial commit](https://github.com/xenodium/dotsies/commit/eac4f892eab7a80740ee8ce0c727381886442fb6).

# \[2022-11-06 Sun\] Hey Emacs, change the default macOS app for…
---
id: hey-emacs-change-the-default-macos-app-for
---

A few weeks ago, I [added an "open with"](emacs-open-with-macos-app/) command to [dwim-shell-commands.el](https://github.com/xenodium/dwim-shell-command/blob/main/dwim-shell-commands.el). It's pretty handy for opening files using an external app (ie. not Emacs) other than the default macOS one.

`dwim-shell-commands-macos-open-with` and `dwim-shell-commands-open-externally` are typically enough for me to handle opening files outside of Emacs. But every now and then I'd like to change the default macOS app associated with specific file types. Now this isn't particularly challenging in macOS, but it does require a little navigating to get to the right place to change this default setting.

Back in March 2020, I [tweeted](https://twitter.com/xenodium/status/1242879439932923909) about [duti](https://github.com/moretension/duti): a command-line utility capable of setting default applications for various document types on macOS. While I liked the ability to change default apps from the command-line, the habit never quite stuck.

Fast forward to 2022. I've been revisiting lots of my command-line usages (specially those that never stuck) and making them more accessible from Emacs via [dwim-shell-command](https://github.com/xenodium/dwim-shell-command). I seldom change default apps on macOS, so my brain forgets about `duti` itself, let alone its arguments, order, etc. But with a dwim shell command like `dwim-shell-commands-macos-set-default-app`, I can easily invoke the command via [swiper](https://github.com/abo-abo/swiper)'s `counsel-M-x` fuzzy terms: *"dwim set"*.

![](https://xenodium.github.io/images/hey-emacs-change-the-default-macos-app-for/set-default_x1.3.webp)

As an added bonus, I get to reuse `dwim-shell-commands--macos-apps` from "open with" to quickly pick the new default app, making the whole experience pretty snappy.

``` {.commonlisp org-language="emacs-lisp" lexical="no"}
(defun dwim-shell-commands-macos-set-default-app ()
  "Set default app for file(s)."
  (interactive)
  (let* ((apps (dwim-shell-commands-macos-apps))
         (selection (progn
                      (cl-assert apps nil "No apps found")
                      (completing-read "Set default app: " apps nil t))))
    (dwim-shell-command-on-marked-files
     "Set default app"
     (format "duti -s \"%s\" '<<e>>' all"
             (string-trim
              (shell-command-to-string (format "defaults read '%s/Contents/Info.plist' CFBundleIdentifier"
                                               (map-elt apps selection)))))
     :silent-success t
     :no-progress t
     :utils "duti")))

(defun dwim-shell-commands--macos-apps ()
  "Return alist of macOS apps (\"Emacs\" . \"/Applications/Emacs.app\")."
  (mapcar (lambda (path)
            (cons (file-name-base path) path))
          (seq-sort
           #'string-lessp
           (seq-mapcat (lambda (paths)
                         (directory-files-recursively
                          paths "\\.app$" t (lambda (path)
                                             (not (string-suffix-p ".app" path)))))
                       '("/Applications" "~/Applications" "/System/Applications")))))
```

As usual, I've added `dwim-shell-commands-macos-set-default-app` to [dwim-shell-commands.el](https://github.com/xenodium/dwim-shell-command/blob/main/dwim-shell-commands.el), which you can install via [MELPA](https://melpa.org/#/dwim-shell-command).

Did you find this tiny integration useful? Check out [Hey Emacs, where did I take that photo?](hey-emacs-where-did-i-take-that-photo/)

# \[2022-11-02 Wed\] Hey Emacs, where did I take that photo?
---
id: hey-emacs-where-did-i-take-that-photo
---

I was recently browsing through an old archive of holiday photos (from [dired](https://www.gnu.org/software/emacs/manual/html_node/emacs/Dired.html) of course). I wanted to know where the photo was taken, which got me interested in extracting [Exif](https://en.wikipedia.org/wiki/Exif) metadata.

Luckily the [exiftool](https://exiftool.org/) command line utility does the heavy lifting when it comes to extracting metadata. Since I want it quickly accessible from Emacs (in either dired or current buffer), a tiny elisp snippet would give me just that (via [dwim-shell-command](https://github.com/xenodium/dwim-shell-command)).

![](https://xenodium.github.io/images/hey-emacs-where-did-i-take-that-photo/dwim-exif_x1.3.webp)

``` {.commonlisp org-language="emacs-lisp" lexical="no"}
(defun dwim-shell-commands-image-exif-metadata ()
  "View EXIF metadata in image(s)."
  (interactive)
  (dwim-shell-command-on-marked-files
   "View EXIF"
   "exiftool '<<f>>'"
   :utils "exiftool"))
```

The above makes all Exif metadata easily accessible, including the photo's GPS coordinates. But I haven’t quite answered the original question. Where did I take the photo? I now know the coordinates, but I can’t realistically deduce neither the country nor city unless I *manually* feed these values to a reverse geocoding service like [OpenStreetMap](https://www.openstreetmap.org/). *Manually* you say? This is Emacs, so we can throw more elisp glue at the problem, mixed in with a little shell script, and presto! We've now automated the process of extracting metadata, reverse geocoding, and displaying the photo's address in the minibuffer. Pretty nifty.

![](https://xenodium.github.io/images/hey-emacs-where-did-i-take-that-photo/minibuffer-address_x1.3.webp)

``` {.commonlisp org-language="emacs-lisp" lexical="no"}
(defun dwim-shell-commands-image-reverse-geocode-location ()
  "Reverse geocode image(s) location."
  (interactive)
  (dwim-shell-command-on-marked-files
   "Reverse geocode"
   "lat=\"$(exiftool -csv -n -gpslatitude -gpslongitude '<<f>>' | tail -n 1 | cut -s -d',' -f2-2)\"
    if [ -z \"$lat\" ]; then
      echo \"no latitude\"
      exit 1
    fi
    lon=\"$(exiftool -csv -n -gpslatitude -gpslongitude '<<f>>' | tail -n 1 | cut -s -d',' -f3-3)\"
    if [ -z \"$lon\" ]; then
      echo \"no longitude\"
      exit 1
    fi
    json=$(curl \"https://nominatim.openstreetmap.org/reverse?format=json&accept-language=en&lat=${lat}&lon=${lon}&zoom=18&addressdetails=1\")
    echo \"json_start $json json_end\""
   :utils '("exiftool" "curl")
   :silent-success t
   :error-autofocus t
   :on-completion
   (lambda (buffer)
     (with-current-buffer buffer
       (goto-char (point-min))
       (let ((matches '()))
         (while (re-search-forward "^json_start\\(.*?\\)json_end" nil t)
           (push (match-string 1) matches))
         (message "%s" (string-join (seq-map (lambda (json)
                                               (map-elt (json-parse-string json :object-type 'alist) 'display_name))
                                             matches)
                                    "\n")))
       (kill-buffer buffer)))))
```

Displaying the photo's address in the minibuffer is indeed pretty nifty, but what if I’d like to drop a pin in a map for further exploration? This is actually simpler, as there's no need for reverse geocoding. Following a similar recipe, we merely construct an [OpenStreetMap](https://www.openstreetmap.org/) URL and open it in our favourite browser.

![](https://xenodium.github.io/images/hey-emacs-where-did-i-take-that-photo/photo-map_x1.4.webp)

``` {.commonlisp org-language="emacs-lisp" lexical="no"}
(defun dwim-shell-commands-image-browse-location ()
  "Open image(s) location in browser."
  (interactive)
  (dwim-shell-command-on-marked-files
   "Browse location"
   "lat=\"$(exiftool -csv -n -gpslatitude -gpslongitude '<<f>>' | tail -n 1 | cut -s -d',' -f2-2)\"
    if [ -z \"$lat\" ]; then
      echo \"no latitude\"
      exit 1
    fi
    lon=\"$(exiftool -csv -n -gpslatitude -gpslongitude '<<f>>' | tail -n 1 | cut -s -d',' -f3-3)\"
    if [ -z \"$lon\" ]; then
      echo \"no longitude\"
      exit 1
    fi
    if [[ $OSTYPE == darwin* ]]; then
      open \"http://www.openstreetmap.org/?mlat=${lat}&mlon=${lon}&layers=C\"
    else
      xdg-open \"http://www.openstreetmap.org/?mlat=${lat}&mlon=${lon}&layers=C\"
    fi"
   :utils "exiftool"
   :error-autofocus t
   :silent-success t))
```

Got suggestions? Improvements? All three functions are now included in [dwim-shell-commands.el](https://github.com/xenodium/dwim-shell-command/blob/main/dwim-shell-commands.el) as part of [dwim-shell-command](https://github.com/xenodium/dwim-shell-command). Pull requests totally welcome ;)

# \[2022-10-24 Mon\] Emacs: A welcoming experiment
---
id: emacs-a-welcoming-experiment
---

The `*scratch*` buffer is the first thing I see when I launch an Emacs session. Coupled with [persistent-scratch](https://github.com/Fanael/persistent-scratch), it's served me well over the years. I gotta say though, my scratch buffer accumulates random bits and often becomes a little messy. It's not the most visually appealing landing buffer when launching Emacs. But who cares, I'm only a `C-x b` binding away from invoking `ivy-switch-buffer` to get me wherever I need to be. It's powered by `ivy-use-virtual-buffers`, which remembers recent files across sessions.

Having said all of this, I recently ran into u/pearcidar43's [post](https://www.reddit.com/r/unixporn/comments/yamj5f/exwm_emacs_is_kinda_comfy_as_a_wm/) showcasing a wonderful Emacs banner. Lucky for us, they [shared](https://www.reddit.com/r/unixporn/comments/yamj5f/comment/itfusm0/?utm_source=share&utm_medium=web2x&context=3) the [image](https://github.com/TanbinIslam43/mydotfiles/blob/main/.doom.d/emacs.png), so I got curious about building a minimal welcome buffer of sorts. Nothing fancy, the only requirements being to load quickly and enable me to get on with my `C-x b` ritual. Throw in a little bonus to exit quickly by pressing just `q` if I so desire.

![](https://xenodium.github.io/images/emacs-a-welcoming-experiment/welcome-minimal_x0.5.webp)

I didn't know a whole lot on how to go about it, so I took a peek at [emacs-dashboard](https://github.com/emacs-dashboard/emacs-dashboard) for inspiration. Turns out, I needed little code to get the desired effect in my `early-init.el`:

``` {.commonlisp org-language="emacs-lisp" lexical="no"}
(defun ar/show-welcome-buffer ()
  "Show *Welcome* buffer."
  (with-current-buffer (get-buffer-create "*Welcome*")
    (setq truncate-lines t)
    (let* ((buffer-read-only)
           (image-path "~/.emacs.d/emacs.png")
           (image (create-image image-path))
           (size (image-size image))
           (height (cdr size))
           (width (car size))
           (top-margin (floor (/ (- (window-height) height) 2)))
           (left-margin (floor (/ (- (window-width) width) 2)))
           (prompt-title "Welcome to Emacs!"))
      (erase-buffer)
      (setq mode-line-format nil)
      (goto-char (point-min))
      (insert (make-string top-margin ?\n ))
      (insert (make-string left-margin ?\ ))
      (insert-image image)
      (insert "\n\n\n")
      (insert (make-string (floor (/ (- (window-width) (string-width prompt-title)) 2)) ?\ ))
      (insert prompt-title))
    (setq cursor-type nil)
    (read-only-mode +1)
    (switch-to-buffer (current-buffer))
    (local-set-key (kbd "q") 'kill-this-buffer)))

(setq initial-scratch-message nil)
(setq inhibit-startup-screen t)

(when (< (length command-line-args) 2)
  (add-hook 'emacs-startup-hook (lambda ()
                                  (when (display-graphic-p)
                                    (ar/show-welcome-buffer)))))
```

This being Emacs, I can bend it as far as needed. In my case, I didn't need much, so I can probably stop here. It was a fun experiment. I'll even [try using it](https://github.com/xenodium/dotsies/commit/90c689def913a9bccdd408ef609c7f99a5cce1fb) for a little while and see if it sticks. I'm sure there's plenty more that could be handled (edge cases, resizes, etc.), but if you want something more established, consider something like [emacs-dashboard](https://github.com/emacs-dashboard/emacs-dashboard) instead. I haven't used it myself, but is [pretty popular](https://melpa.org/#/dashboard).

# \[2022-10-14 Fri\] Emacs: Open with macOS app
---
id: emacs-open-with-macos-app
---

On a recent Reddit [comment](https://www.reddit.com/r/emacs/comments/y2dfma/comment/is4ygl8/?utm_source=share&utm_medium=web2x&context=3), tdstoff7 asked if I had considered writing an "Open with" DWIM shell command for those times one would like to open a file externally using an app other than the default. I hadn't, but nice idea.

Take images as an example. Though Emacs can display them quickly, I also open images externally using the default app ([Preview](https://en.wikipedia.org/wiki/Preview_(macOS)) in my case). But then there are those times when I'd like to open with a different app for editing (maybe something like GIMP). It'd be nice to quickly choose which app to open with.

![](https://xenodium.github.io/images/emacs-open-with-macos-app/open-with_x2.webp)

There isn't much to the code. Get a list of apps, ask user to pick one (via [completing-read](https://www.gnu.org/software/emacs/manual/html_node/elisp/Programmed-Completion.html)), and launch the external app via `dwim-shell-command-on-marked-files`.

There's likely a better way of getting a list of available apps (happy to take suggestions), but searching in "/Applications" "\~/Applications" and "/System/Applications" does the job for now.

``` {.commonlisp org-language="emacs-lisp" lexical="no"}
(defun dwim-shell-commands-macos-open-with ()
  "Convert all marked images to jpg(s)."
  (interactive)
  (let* ((apps (seq-sort
                #'string-lessp
                (seq-mapcat (lambda (paths)
                              (directory-files-recursively
                               paths "\\.app$" t (lambda (path)
                                                  (not (string-suffix-p ".app" path)))))
                            '("/Applications" "~/Applications" "/System/Applications"))))
         (selection (progn
                      (cl-assert apps nil "No apps found")
                      (completing-read "Open with: "
                                       (mapcar (lambda (path)
                                                 (propertize (file-name-base path) 'path path))
                                               apps)))))
    (dwim-shell-command-on-marked-files
     "Open with"
     (format "open -a '%s' '<<*>>'" (get-text-property 0 'path selection))
     :silent-success t
     :no-progress t
     :utils "open")))
```

`dwim-shell-commands-macos-open-with` is now included in [dwim-shell-command](https://github.com/xenodium/dwim-shell-command), available on [melpa](https://melpa.org/#/dwim-shell-command). What other uses can you find for it?

# \[2022-10-12 Wed\] Improving on Emacs macOS sharing
---
id: emacs-macos-sharing-dwim-style-improved
---

A quick follow-up to [Emacs: macOS sharing (DWIM style)](emacs-macos-share-from-dired-dwim-style/)… Though functional, the implementation had a couple of drawbacks.

Tohiko [noticed fullscreen wasn't working at all](https://www.reddit.com/r/emacs/comments/y1tneh/comment/is0pgkf) while Calvin [proposed enumeration for tighter Emacs integration](https://lobste.rs/s/qga1px/emacs_macos_sharing_dwim_style#c_safiuw).

Calvin's suggestion enables using [completing-read](https://www.gnu.org/software/emacs/manual/html_node/elisp/Completion.html) to pick the sharing service. This makes the integration feel more at home. As a bonus, it also enables sharing from fullscreen Emacs.

As an [ivy](https://github.com/abo-abo/swiper) user, you can see a vertical list of sharing services.

![](https://xenodium.github.io/images/emacs-macos-sharing-dwim-style-improved/share-completing_x1.4.webp)

Here's the new snippet, now [pushed to dwim-shell-commands.el](https://github.com/xenodium/dwim-shell-command/commit/20e782b4bf1ea01fecfce3cc8ac4c5a74518cd80):

``` {.commonlisp org-language="emacs-lisp" lexical="no"}
(defun dwim-shell-commands--macos-sharing-services ()
  "Return a list of sharing services."
  (let* ((source (format "import AppKit
                         NSSharingService.sharingServices(forItems: [
                           %s
                         ]).forEach {
                           print(\"\\($0.prompt-title)\")
                         }"
                         (string-join (mapcar (lambda (file)
                                                (format "URL(fileURLWithPath: \"%s\")" file))
                                              (dwim-shell-command--files))
                                      ", ")))
         (services (split-string (string-trim (shell-command-to-string (format "echo '%s' | swift -" source)))
                                 "\n")))
    (when (seq-empty-p services)
      (error "No sharing services available"))
    services))

(defun dwim-shell-commands-macos-share ()
  "Share selected files from macOS."
  (interactive)
  (let* ((services (dwim-shell-commands--macos-sharing-services))
         (service-name (completing-read "Share via: " services))
         (selection (seq-position services service-name #'string-equal)))
    (dwim-shell-command-on-marked-files
     "Share"
     (format
      "import AppKit

       _ = NSApplication.shared

       NSApp.setActivationPolicy(.regular)

       class MyWindow: NSWindow, NSSharingServiceDelegate {
         func sharingService(
           _ sharingService: NSSharingService,
           didShareItems items: [Any]
         ) {
           NSApplication.shared.terminate(nil)
         }

         func sharingService(
           _ sharingService: NSSharingService, didFailToShareItems items: [Any], error: Error
         ) {
           let error = error as NSError
           if error.domain == NSCocoaErrorDomain && error.code == NSUserCancelledError {
             NSApplication.shared.terminate(nil)
           }
           exit(1)
         }
       }

       let window = MyWindow(
         contentRect: NSRect(x: 0, y: 0, width: 0, height: 0),
         styleMask: [],
         backing: .buffered,
         defer: false)

       let services = NSSharingService.sharingServices(forItems: [\"<<*>>\"].map{URL(fileURLWithPath:$0)})
       let service = services[%s]
       service.delegate = window
       service.perform(withItems: [\"<<*>>\"].map{URL(fileURLWithPath:$0)})

       NSApp.run()" selection)
     :silent-success t
     :shell-pipe "swift -"
     :join-separator ", "
     :no-progress t
     :utils "swift")))
```

[dwim-shell-command](https://github.com/xenodium/dwim-shell-command) is available on [melpa](https://melpa.org/#/dwim-shell-command). What other uses can you find for it?

# \[2022-10-12 Wed\] Emacs: macOS sharing (DWIM style)
---
id: emacs-macos-share-from-dired-dwim-style
---

UPDATE: See an improved implementation [here](emacs-macos-sharing-dwim-style-improved).

A few days ago, [I wrote dwim-shell-commands-macos-reveal-in-finder](emacs-reveal-in-finder-dwim-style/). While I've written a bunch of other [dwim-shell-commands](https://github.com/xenodium/dwim-shell-command/blob/main/dwim-shell-commands.el), what set this case apart was the use of [Swift](https://www.swift.org/) to glue an Emacs workflow.

``` {.commonlisp org-language="emacs-lisp"}
(defun dwim-shell-commands-macos-reveal-in-finder ()
  "Reveal selected files in macOS Finder."
  (interactive)
  (dwim-shell-command-on-marked-files
   "Reveal in Finder"
   "import AppKit
    NSWorkspace.shared.activateFileViewerSelecting([\"<<*>>\"].map{URL(fileURLWithPath:$0)})"
   :join-separator ", "
   :silent-success t
   :shell-pipe "swift -"))
```

There is hardly any Swift involved, yet it scratched a real itch I couldn't otherwise reach (reveal multiple dired files in macOS's [Finder](https://en.wikipedia.org/wiki/Finder_(software))).

divinedominion's [reddit comment](https://www.reddit.com/r/emacs/comments/xzt3gx/comment/irrwoya/?utm_source=share&utm_medium=web2x&context=3) got me thinking of other use-cases, so I figured why not push this Swift-elisp beeswax a little further… Let's add macOS's sharing ability via [dwim-shell-command](https://github.com/xenodium/dwim-shell-command), so I could invoke it from the comfort of my beloved [dired](https://www.gnu.org/software/emacs/manual/html_node/emacs/Dired.html) or any 'ol Emacs buffer visiting a file.

``` {.commonlisp org-language="emacs-lisp" lexical="no"}
(defun dwim-shell-commands-macos-share ()
  "Share selected files from macOS."
  (interactive)
  (let* ((position (window-absolute-pixel-position))
         (x (car position))
         (y (- (x-display-pixel-height)
               (cdr position))))
    (dwim-shell-command-on-marked-files
     "Share"
     (format
      "import AppKit

       _ = NSApplication.shared

       NSApp.setActivationPolicy(.regular)

       let window = InvisibleWindow(
         contentRect: NSRect(x: %d, y: %s, width: 0, height: 0),
         styleMask: [],
         backing: .buffered,
         defer: false)

       NSApp.activate(ignoringOtherApps: true)

       DispatchQueue.main.async {
         let picker = NSSharingServicePicker(items: [\"<<*>>\"].map{URL(fileURLWithPath:$0)})
         picker.delegate = window
         picker.show(
           relativeTo: .zero, of: window.contentView!, preferredEdge: .minY)
       }

       NSApp.run()

       class InvisibleWindow: NSWindow, NSSharingServicePickerDelegate, NSSharingServiceDelegate {
         func sharingServicePicker(
           _ sharingServicePicker: NSSharingServicePicker, didChoose service: NSSharingService?
         ) {
           if service == nil {
             print(\"Cancelled\")

             // Delay so \"More...\" menu can launch System Preferences
             DispatchQueue.main.asyncAfter(deadline: .now() + 0.1) {
               NSApplication.shared.terminate(nil)
             }
           }
         }

         func sharingServicePicker(
           _ sharingServicePicker: NSSharingServicePicker,
           delegateFor sharingService: NSSharingService
         ) -> NSSharingServiceDelegate? {
           return self
         }

         func sharingService(
           _ sharingService: NSSharingService,
           didShareItems items: [Any]
         ) {
           NSApplication.shared.terminate(nil)
         }

         func sharingService(
           _ sharingService: NSSharingService, didFailToShareItems items: [Any], error: Error
         ) {
           let error = error as NSError
           if error.domain == NSCocoaErrorDomain && error.code == NSUserCancelledError {
             NSApplication.shared.terminate(nil)
           }
           exit(1)
         }
       }" x y)
     :silent-success t
     :shell-pipe "swift -"
     :join-separator ", "
     :no-progress t
     :utils "swift")))
```

Sure there is some trickery involved here (like creating an invisible macOS window to anchor the menu), but hey the results are surprisingly usable. Take a look…

![](https://xenodium.github.io/images/emacs-macos-share-from-dired-dwim-style/share-done_x1.4.webp)

I've pushed `dwim-shell-commands-macos-share` to [dwim-shell-commands.el](https://github.com/xenodium/dwim-shell-command/blob/919817520fa507dd3c7e6859eb982976e28b2575/dwim-shell-commands.el#L370) in case you'd like to give it a try. It's very much an experiment of sorts, so please treat it as such. For now, I'm looking forward to AirDropping more files and seeing if the flow sticks. Oh, and I just realised I can use this to send files to iOS Simulators. Win.

[dwim-shell-command](https://github.com/xenodium/dwim-shell-command) is available on [melpa](https://melpa.org/#/dwim-shell-command). What other uses can you find for it?

# \[2022-10-09 Sun\] Emacs: Reveal in macOS Finder (DWIM style)
---
id: emacs-reveal-in-finder-dwim-style
---

Just the other day, [Graham Voysey](https://github.com/gvoysey) filed an [escaping bug](https://github.com/xenodium/dwim-shell-command/issues/3) against [dwim-shell-command](https://github.com/xenodium/dwim-shell-command). Once he verified the the fix, he also posted [two uses](https://github.com/xenodium/dwim-shell-command/issues/3#issuecomment-1272413459) of `dwim-shell-command-on-marked-files`. I've made some small tweaks, but here's the gist of it:

``` {.commonlisp org-language="emacs-lisp" lexical="no"}
(defun dwim-shell-commands-feh-marked-files ()
  "View all marked files with feh."
  (interactive)
  (dwim-shell-command-on-marked-files
   "View with feh"
   "feh --auto-zoom --scale-down '<<*>>'"
   :silent-success t
   :utils "feh"))

(defun dwim-shell-commands-dragon-marked-files ()
  "Share all marked files with dragon."
  (interactive)
  (dwim-shell-command-on-marked-files
   "View with dragon"
   "dragon --on-top '<<*>>'"
   :silent-success t
   :utils "dragon"))
```

I love seeing what others get up to by using `dwim-shell-command`. Are there new magical command-line utilities out there I don't know about? In this instance, I got to learn about [feh](https://feh.finalrewind.org/) and [dragon](https://github.com/mwh/dragon).

[feh](https://feh.finalrewind.org/) is a no-frills image viewer for console users while [dragon](https://github.com/mwh/dragon) is a simple drag-and-drop source/sink for X or Wayland. Both utilities are great uses of `dwim-shell-command`, enabling a seamless transition from Emacs to the *outside world*. These days I'm rarely on a linux box, so I was keen to ensure macOS had these cases covered.

[Preview](https://en.wikipedia.org/wiki/Preview_(macOS)) is a solid macOS equivalent to [feh](https://feh.finalrewind.org/). `Preview` is already macOS's default image viewer. A simple `open '<<f>>'` would do the job, but if we'd like to make this command more portable, we can accomodate as follows:

``` {.commonlisp org-language="emacs-lisp"}
(defun dwim-shell-commands-open-externally ()
  "Open file(s) externally."
  (interactive)
  (dwim-shell-command-on-marked-files
   "Open externally"
   (if (eq system-type 'darwin)
       "open '<<f>>'"
     "xdg-open '<<f>>'")
   :silent-success t
   :utils "open"))
```

Special mention goes to Bozhidar Batsov's [crux](https://github.com/bbatsov/crux) which achieves similar functionality via `crux-open-with`. [crux](https://github.com/bbatsov/crux) provides a bunch of other useful functions. Some of my favourites being `crux-duplicate-current-line-or-region`, `crux-transpose-windows`, `crux-delete-file-and-buffer`, and `crux-rename-buffer-and-file`, but I digress.

Moving on to a [dragon](https://github.com/mwh/dragon) equivalent on macOS, I thought I had it covered via [reveal-in-osx-finder](https://github.com/kaz-yos/reveal-in-osx-finder) or [reveal-in-folder](https://github.com/jcs-elpa/reveal-in-folder). Turns out, neither of these reveal multiple [dired](https://www.gnu.org/software/emacs/manual/html_node/emacs/Dired.html)-selected files within [Finder](https://en.wikipedia.org/wiki/Finder_(software)). At first, I thought this could be easily achieved by passing additional flags/params to macOS's `open` command, but it doesn't seem to be the case. Having said that, this [Stack Overflow post](https://stackoverflow.com/questions/7652928/launch-finder-window-with-specific-files-selected), has a solution in Objective-C, which is where things got a little more interesting. You see, back in July I [added multi-language support](emacs-dwim-shell-command-multi-language/) to [dwim-shell-command](emacs-dwim-shell-command-multi-language/) and while it highlighted language flexibility, I hadn't yet taken advantage of this feature myself. That is, until today.

The Objective-C snippet from the Stack Overflow post can be written as a Swift one-liner. Ok I lie. It's actually two lines, counting the import, but you can see that this multi-language Emacs transition/integration is pretty easy to add.

``` {.commonlisp org-language="emacs-lisp" lexical="no"}
(defun dwim-shell-commands-macos-reveal-in-finder ()
  "Reveal selected files in macOS Finder."
  (interactive)
  (dwim-shell-command-on-marked-files
   "Reveal in Finder"
   "import AppKit
    NSWorkspace.shared.activateFileViewerSelecting([\"<<*>>\"].map{URL(fileURLWithPath:$0)})"
   :join-separator ", "
   :silent-success t
   :shell-pipe "swift -"))
```

`<<*>>` is the centrepiece of the snippet above. It gets instantiated with a list of files joined using the `", "` separator.

``` swift
NSWorkspace.shared.activateFileViewerSelecting(["/path/to/file1", "/path/to/file2"].map { URL(fileURLWithPath: $0) })
```

The proof of the pudding is of course in the eating, so ummm let's show it in action:

![](https://xenodium.github.io/images/emacs-reveal-in-finder-dwim-style/dwim-reveal.webp)

I should mention the webp animation above was also created using my trusty `dwim-shell-commands-video-to-webp` also backed by [dwim-shell-command](https://github.com/xenodium/dwim-shell-command).

``` {.commonlisp org-language="emacs-lisp" lexical="no"}
(defun dwim-shell-commands-video-to-webp ()
  "Convert all marked videos to webp(s)."
  (interactive)
  (dwim-shell-command-on-marked-files
   "Convert to webp"
   "ffmpeg -i '<<f>>' -vcodec libwebp -filter:v fps=fps=10 -compression_level 3 -lossless 1 -loop 0 -preset default -an -vsync 0 '<<fne>>'.webp"
   :utils "ffmpeg"))
```

[dwim-shell-command](https://github.com/xenodium/dwim-shell-command) is available on [melpa](https://melpa.org/#/dwim-shell-command). What other uses can you find for it?

UPDATE: Most DWIM shell commands I use are available as part of [dwim-shell-commands.el](https://github.com/xenodium/dwim-shell-command/blob/main/dwim-shell-commands.el). See `dwim-shell-command`'s [install command line utilities](https://github.com/xenodium/dwim-shell-command#install-command-line-utilities).

# \[2022-10-01 Sat\] Plain Org v1.5 released
---
id: plain-org-v15-released
---

If you haven't heard of [Plain Org](https://plainorg.com), it gives you access to [org](https://orgmode.org) files on iOS while away from your beloved [Emacs](https://www.gnu.org/software/emacs/).

Hadn't had time to post, but v1.5 has been available on the [App Store](https://apps.apple.com/app/id1578965002) for a couple of weeks now. The update is mostly a bugfix release, primarily addressing inline editing issues that appeared on iOS 16, along with a few other changes:

-   Render form feeds at end of headings at all times.
-   Fixes new files not recognized by org-roam.
-   Fixes share sheet saving from cold launch.
-   Fixes inline editing on iOS 16.

![](https://xenodium.github.io/images/plain-org-v15-released/po.png)

I love org markup, but we (iPhone + org users) are a fairly niche bunch. If you're finding Plain Org useful, **please help support this effort** by getting the word out. Tell your friends, [tweet](https://twitter.com/intent/tweet?text=Plain%20Org%20https%3A%2F%2Fapps.apple.com%2Fapp%2Fid1578965002%20), or blog about it. Or just support via the [App Store](https://apps.apple.com/app/id1578965002) :)

# \[2022-10-01 Sat\] dwim-shell-command usages: pdftotext and scp
---
id: dwim-shell-command-usages-pdftotext-and-scp
---

[dwim-shell-command](https://github.com/xenodium/dwim-shell-command) is a little Emacs package I wrote to enable crafting more reusable shell commands. I intended to use it as an [async-shell-command](https://www.gnu.org/software/emacs/manual/html_node/emacs/Shell.html) alternative (and I do these days). The more surprising win was bringing lots of command-line utilities (sometimes with complicated invocations) and making them quickly accessible. I no longer need to remember their respective parameters, order, flags, etc.

I've migrated most [one-liners](emacs-password-protect-current-pdf-revisited/) and [scripts](png-to-icns-emacs-dwim-style/) I had to [dwim-shell-command](https://github.com/xenodium/dwim-shell-command) equivalents. They are available at [dwim-shell-commands.el](https://github.com/xenodium/dwim-shell-command/blob/main/dwim-shell-commands.el). Having said that, it's great to discover new usages from `dwim-shell-command` users.

Take [u/TiMueller](https://www.reddit.com/user/TiMueller/)'s Reddit comment, [showcasing pdftotext](https://www.reddit.com/r/emacs/comments/w8s2ov/comment/iq7idav/?utm_source=share&utm_medium=web2x&context=3). Neat utility I was unaware of. It does as it says on the tin and converts a pdf to text. Can be easily saved to your accessible repertoire with:

``` {.commonlisp org-language="emacs-lisp" lexical="no"}
(defun dwim-shell-commands-pdf-to-txt ()
  "Convert pdf to txt."
  (interactive)
  (dwim-shell-command-on-marked-files
   "pdf to txt"
   "pdftotext -layout '<<f>>' '<<fne>>.txt'"
   :utils "pdftotext"))
```

![](https://xenodium.github.io/images/dwim-shell-command-usages-pdftotext-and-scp/pdf-to-txt_x2.webp)

[tareefdev](https://github.com/tareefdev) wanted a quick command to [secure copy](https://linux.die.net/man/1/scp) remote files to a local directory. Though this use-case is already covered by Tramp, I suspect a DWIM command would make it a little more convenient (async by default). However, Tramp paths aren't usable from the shell unless we massage them a little. We can use `dwim-shell-command-on-marked-files`'s `:post-process-template` to drop the "/ssh:" prefix.

``` {.commonlisp org-language="emacs-lisp" lexical="no"}
(defun dwim-shell-commands-copy-remote-to-downloads ()
  (interactive)
  (dwim-shell-command-on-marked-files
   "Copy remote to local Downloads"
   "scp '<<f>>' ~/Downloads/"
   :utils "scp"
   :post-process-template
   (lambda (script file)
     ;; Tramp file path start with "/ssh:". Drop it.
     (string-replace file
                     (string-remove-prefix "/ssh:" file)
                     script))))
```

[dwim-shell-command](https://github.com/xenodium/dwim-shell-command) is available on [MELPA](https://melpa.org/#/dwim-shell-command) (531 downloads as of 2022-10-01).

# \[2022-09-17 Sat\] \$ rm Important.txt (uh oh!)
---
id: rm-important-txt-oh-sht
---

Setting Emacs up to use your system trash can potentially save your bacon if you mistakenly delete a file, say from [dired](https://www.gnu.org/software/emacs/manual/html_node/emacs/Dired.html).

Unsurprisingly, the trash safety net also extends to other Emacs areas. For example, discarding files from [Magit](https://magit.vc/) (via `magit-discard`) becomes a recoverable operation. As an [eshell](https://www.gnu.org/software/emacs/manual/html_mono/eshell.html) user, the trash can also help you recover from `rm` blunders.

![](https://xenodium.github.io/images/rm-important-txt-oh-sht/recovered_x1.6.webp)

You can enable macOS system trash in Emacs by setting `trash-directory` along with defining `system-move-file-to-trash`:

``` {.commonlisp org-language="emacs-lisp" lexical="no"}
(setq trash-directory "~/.Trash")

;; See `trash-directory' as it requires defining `system-move-file-to-trash'.
(defun system-move-file-to-trash (file)
  "Use \"trash\" to move FILE to the system trash."
  (cl-assert (executable-find "trash") nil "'trash' must be installed. Needs \"brew install trash\"")
  (call-process "trash" nil 0 nil "-F"  file))
```

# \[2022-09-11 Sun\] Cycling through window layouts (revisited)
---
id: cycling-through-window-layout-revisited
---

Last year, I wrote a little script to [cycle through window layouts via Hammerspoon](cycling-window-layouts-via-hammerspoon). The cycling set I chose didn't stick, so here's another go.

![](https://xenodium.github.io/images/cycling-through-window-layout-revisited/cycle_layout.webp)

``` lua
function reframeFocusedWindow()
   local win = hs.window.focusedWindow()
   local maximizedFrame = win:screen():frame()
   maximizedFrame.x = maximizedFrame.x + 15
   maximizedFrame.y = maximizedFrame.y + 15
   maximizedFrame.w = maximizedFrame.w - 30
   maximizedFrame.h = maximizedFrame.h - 30

   local leftFrame = win:screen():frame()
   leftFrame.x = leftFrame.x + 15
   leftFrame.y = leftFrame.y + 15
   leftFrame.w = leftFrame.w / 2 - 15
   leftFrame.h = leftFrame.h - 30

   local rightFrame = win:screen():frame()
   rightFrame.x = rightFrame.w / 2
   rightFrame.y = rightFrame.y + 15
   rightFrame.w = rightFrame.w / 2 - 15
   rightFrame.h = rightFrame.h - 30

   if win:frame() == maximizedFrame then
     win:setFrame(leftFrame)
     return
   end

   if win:frame() == leftFrame then
     win:setFrame(rightFrame)
     return
   end

   win:setFrame(maximizedFrame)
end

hs.hotkey.bind({"alt"}, "F", reframeFocusedWindow)
```

Looping through layouts is done with a global key-binding of `option f` or, if familiar with a macOS keyboard, `⌥ f`.

For those unfamiliar with [Hammerspoon](http://hammerspoon.org/)… If you're a tinkerer and a macOS user, you'd love [Hammerspoon](http://hammerspoon.org/). Like elisp gluing all things Emacs, Hammerspoon uses Lua to glue all things macOS. For example, here's a stint at [writing a narrowing utility for macOS](emacs-utilities-for-your-os/) using [chooser](http://www.hammerspoon.org/docs/hs.chooser.html).

# \[2022-08-18 Thu\] dwim-shell-command with template prompts
---
id: dwim-shell-command-with-template-prompts
---

Somewhat recently, I wanted to quickly create an empty/transparent png file. [ImageMagick](https://imagemagick.org/)'s convert has you covered here. Say you want a transparent 200x400 image, you can get it with:

``` {.bash org-language="sh"}
convert -verbose -size 200x400 xc:none empty200x400.png
```

Great, I now know the one-liner for it. But because I'm in the mood of saving these as [seamless command-line utils](seamless-command-line-utils/), I figured I should save the [dwim-shell-command](https://github.com/xenodium/dwim-shell-command) equivalent.

I wanted configurable image dimensions, so I used [read-number](https://www.gnu.org/software/emacs/manual/html_node/calc/Formatting-Lisp-Functions.html) together with [format](https://www.gnu.org/software/emacs/manual/html_node/elisp/Formatting-Strings.html) to create the templated command and fed it to `dwim-shell-command-on-marked-files`. Job done:

``` {.commonlisp org-language="emacs-lisp" lexical="no"}
(defun dwim-shell-commands-make-transparent-png ()
  "Create a transparent png."
  (interactive)
  (let ((width (read-number "Width: " 200))
        (height (read-number "Height: " 200)))
    (dwim-shell-command-on-marked-files
     "Create transparent png"
     (format "convert -verbose -size %dx%d xc:none '<<empty%dx%d.png(u)>>'"
             width height width height)
     :utils "convert")))
```

The resulting `dwim-shell-commands-make-transparent-png` is fairly simple, but [dwim-shell-command](https://github.com/xenodium/dwim-shell-command) aims to remove friction so you're more inclined to save reusable commands. In this case, we can shift querying and formatting into the template.

`<<Width:200>>` can be interpreted as "ask the user for a value using the suggested prompt and default value."

![](https://xenodium.github.io/images/dwim-shell-command-with-template-prompts/query.png)

With template queries in mind, `dwim-shell-commands-make-transparent-png` can be further reduced to essentially the interactive command boilerplate and the template itself:

``` {.commonlisp org-language="emacs-lisp" lexical="no"}
(defun dwim-shell-commands-make-transparent-png ()
  "Create a transparent png."
  (interactive)
  (dwim-shell-command-on-marked-files
   "Create transparent png"
   "convert -verbose -size <<Width:200>>x<<Height:200>> xc:none '<<empty<<Width:200>>x<<Height:200>>.png(u)>>'"
   :utils "convert"))
```

![](https://xenodium.github.io/images/dwim-shell-command-with-template-prompts/empty.webp)

Note: Any repeated queries (same prompt and default) are treated as equal. That is, ask the user once and replace everywhere. If you'd like to request separate values, change either prompt or the default value.

# \[2022-08-14 Sun\] Seamless command-line utils
---
id: seamless-command-line-utils
---

Just the other day, I received a restaurant menu split into a handful of image files. I wanted to forward the menu to others but figured I should probably send it as a single file.

ImageMagick's [convert](https://imagemagick.org/script/convert.php) command-line utility works great for this purpose. Feed it some images and it creates a pdf for you:

``` {.bash org-language="sh"}
convert image1.png image2.png image3.png combined.pdf
```

Using `convert` for this purpose was pretty straightforward. I'm sure I'll use it again in a similar context, but what if I can make future usage more seamless? In the past, I would just make a note of usage and revisit when needed. Though this works well enough, it often requires some amount of manual work (looking things up, tweaking command, etc) if you happen to forget the command syntax.

I wanted common one-liners (or [longer shell scripts](png-to-icns-emacs-dwim-style/)) to be easily reusable and accessible from Emacs. Turns out, the [dwim-shell-command](https://github.com/xenodium/dwim-shell-command) experiment is working fairly well for this purpose. In addition to providing template expansion, it generally [tries to do what I mean](emacs-dwim-shell-command/) (focus when needed, reveal new files, rename buffers, etc).

Here's how I saved the `convert` command instance for future usage:

``` {.commonlisp org-language="emacs-lisp" lexical="no"}
(defun dwim-shell-commands-join-as-pdf ()
  "Join all marked images as a single pdf."
  (interactive)
  (dwim-shell-command-on-marked-files
   "Join as pdf"
   "convert -verbose '<<*>>' '<<joined.pdf(u)>>'"
   :utils "convert"))
```

From now on, any time I'd like to join multiple files into a pdf, I can now select them all and invoke `dwim-shell-commands-join-as-pdf`.

![](https://xenodium.github.io/images/seamless-command-line-utils/joined_minimal_x1.2.webp)

In the saved command, `'<<*>>'` expands to either [dired](https://www.gnu.org/software/emacs/manual/html_node/emacs/Dired.html) selected files or whatever file happens to be open in the current buffer. The buffer file isn't of much help for joining multiple items, but can be handy for other instances (say I want to convert current image to jpeg).

Moving on to `'<<joined.pdf(u)>>'`, we could have just written as `joined.pdf`, but wrapping it ensures the resulting file name is unique. That is, if `joined.pdf` already exists, write `joined(1).pdf` instead.

These kinds of command-line integrations are working well for me. Take the webp animation above, it was created by invoking `dwim-shell-commands-video-to-webp` on a `.mov` file. Easy peasy. While I can easily memorize the `convert` command for the pdf instance, I'm hopeless in the webp scenario:

``` {.bash org-language="sh"}
ffmpeg -i '<<f>>' -vcodec libwebp -filter:v fps=fps=10 -compression_level 3 -lossless 1 -loop 0 -preset default -an -vsync 0 '<<fne>>'.webp
```

While searching through command line history helps to quickly re-spin previous commands, it requires remembering the actual utility used for any particular action. On the other hand, wrapping with Emacs functions enables me to remember the action itself, using more memorable names. Also, fuzzy searching works a treat.

![](https://xenodium.github.io/images/seamless-command-line-utils/fuzzy.png)

It's been roughly a month since I started playing around with this idea of wrapping command-line utilities more seamlessly. Since then, I've brought in a bunch of use-cases that are now quickly accessible (all in [dwim-shell-commands.el](https://github.com/xenodium/dwim-shell-command/blob/main/dwim-shell-commands.el)):

-   dwim-shell-commands-audio-to-mp3
-   dwim-shell-commands-clipboard-to-qr
-   dwim-shell-commands-copy-to-desktop
-   dwim-shell-commands-copy-to-downloads
-   dwim-shell-commands-docx-to-pdf
-   dwim-shell-commands-download-clipboard-stream-url
-   dwim-shell-commands-drop-video-audio
-   dwim-shell-commands-epub-to-org
-   dwim-shell-commands-external-ip
-   dwim-shell-commands-files-combined-size
-   dwim-shell-commands-git-clone-clipboard-url
-   dwim-shell-commands-git-clone-clipboard-url-to-downloads
-   dwim-shell-commands-http-serve-dir
-   dwim-shell-commands-image-browse-location
-   dwim-shell-commands-image-exif-metadata
-   dwim-shell-commands-image-reverse-geocode-location
-   dwim-shell-commands-image-to-grayscale
-   dwim-shell-commands-image-to-icns
-   dwim-shell-commands-image-to-jpg
-   dwim-shell-commands-image-to-png
-   dwim-shell-commands-install-iphone-device-ipa
-   dwim-shell-commands-join-as-pdf
-   dwim-shell-commands-kill-gpg-agent
-   dwim-shell-commands-kill-process
-   dwim-shell-commands-macos-bin-plist-to-xml
-   dwim-shell-commands-macos-caffeinate
-   dwim-shell-commands-macos-hardware-overview
-   dwim-shell-commands-macos-open-with
-   dwim-shell-commands-macos-reveal-in-finder
-   dwim-shell-commands-macos-set-default-app
-   dwim-shell-commands-macos-share
-   dwim-shell-commands-macos-toggle-dark-mode
-   dwim-shell-commands-macos-toggle-display-rotation
-   dwim-shell-commands-make-transparent-png
-   dwim-shell-commands-move-to-desktop
-   dwim-shell-commands-move-to-downloads
-   dwim-shell-commands-open-clipboard-url
-   dwim-shell-commands-open-externally
-   dwim-shell-commands-pdf-password-protect
-   dwim-shell-commands-pdf-to-txt
-   dwim-shell-commands-ping-google
-   dwim-shell-commands-rename-all
-   dwim-shell-commands-reorient-image
-   dwim-shell-commands-resize-gif
-   dwim-shell-commands-resize-image
-   dwim-shell-commands-resize-video
-   dwim-shell-commands-speed-up-gif
-   dwim-shell-commands-speed-up-video
-   dwim-shell-commands-stream-clipboard-url
-   dwim-shell-commands-svg-to-png
-   dwim-shell-commands-unzip
-   dwim-shell-commands-url-browse
-   dwim-shell-commands-video-to-gif
-   dwim-shell-commands-video-to-optimized-gif
-   dwim-shell-commands-video-to-webp

What other use-cases would you consider? `dwim-shell-command` is [available on melpa](https://melpa.org/#/dwim-shell-command).

## Update

2022-11-14 dwim-shell-commands.el list updated.

# \[2022-08-03 Wed\] Emacs freebie: macOS emoji picker
---
id: emacs-freebie-macos-emoji-picker
---

I recently ran a little experiment to bring macOS's [long-press-accents-like behavior](an-accentuated-emacs-experiment/) to Emacs. What I forgot to mention is that macOS's character viewer *just works* from our beloved editor.

If you have a newer MacBook model, you can press the 🌐 key to summon the emoji picker (character viewer). You may need to set this key binding [from macOS keyboard preferences](https://support.apple.com/en-gb/guide/mac-help/mchlp1560/mac).

I'm happy to take this Emacs freebie, kthxbye.

![](https://xenodium.github.io/images/emacs-freebie-macos-emoji-picker/hearts_x1.5.webp)

Edits:

-   Like other macOS apps, this dialog can be invoked via control-command-space (thanks [mtndewforbreakfast](https://www.reddit.com/r/emacs/comments/wfja3n/comment/iiv7ptb/?utm_source=share&utm_medium=web2x&context=3)). Note: you'd lose this ability if you `(setq mac-command-modifier 'meta)` in your config.
-   The 🌐 key is a feature on newer MacBook hardware and likely needs configuration (thanks [Fabbi-](https://www.reddit.com/r/emacs/comments/wfja3n/comment/iivnwxt/?utm_source=share&utm_medium=web2x&context=3)).

# \[2022-08-01 Mon\] dwim-shell-command video streams
---
id: dwim-shell-command-video-streams
---

I continue hunting for use-cases I can migrate to [dwim-shell-command](https://github.com/xenodium/dwim-shell-command)… After adding [clipboard support](dwim-shell-command-improvements/) (via []
---
id: cb
---) I found one more.

1.  Copy URL from browser.
2.  Invoke `dwim-shell-commands-mpv-stream-clipboard-url`.
3.  Enjoy picture in picture from Emacs ;)

![](https://xenodium.github.io/images/dwim-shell-command-video-streams/mpv.webp)

What's the secret sauce? Very little. Invoke the awesome [mpv](https://mpv.io/) with a wrapping function using `dwim-shell-command-on-marked-files`.

``` {.commonlisp org-language="emacs-lisp" lexical="no"}
(defun dwim-shell-commands-mpv-stream-clipboard-url ()
  "Stream clipboard URL using mpv."
  (interactive)
  (dwim-shell-command-on-marked-files
   "Streaming"
   "mpv --geometry=30%x30%+100%+0% \"<<cb>>\""
   :utils "mpv"
   :no-progress t
   :error-autofocus t
   :silent-success t))
```

The typical progress bar kinda got in the way, so I added a new option `:no-progress` to `dwim-shell-command-on-marked-files`, so it can be used for cases like this one.

# \[2022-07-30 Sat\] An accentuated Emacs experiment (à la macOS)
---
id: an-accentuated-emacs-experiment
---

macOS has a wonderful input mechanism where you press and hold a key on your keyboard to display the accent menu. It's easy to internalize: *long press "a" if you want to input "á"*.

![](https://xenodium.github.io/images/an-accentuated-emacs-experiment/macosaccent.webp)

On Emacs, *C-x 8 ' a* would be the equivalent, but it just didn't stick for me. Fortunately, there's an alternative, using dead keys. Mickey Petersen gives a [wonderful introduction](https://www.masteringemacs.org/article/diacritics-in-emacs). Having said all this, I still longed for macOS's input mechanism.

Thanks to Christian Tietze's [post](https://twitter.com/ctietze/status/1552446492559958017), I discovered the [accent](https://github.com/elias94/accent) package. While it doesn't handle *press-and-hold*, it does the heavy lifting of offering a menu with character options. If I could just bring that *press-and-hold*…

My initial attempt was to use [key chords](https://github.com/emacsorphanage/key-chord) (via [use-package](https://github.com/jwiegley/use-package)):

``` {.commonlisp org-language="emacs-lisp" lexical="no"}
(use-package accent
  :ensure t
  :chords (("aa" . ar/spanish-accent-menu)
           ("ee" . ar/spanish-accent-menu)
           ("ii" . ar/spanish-accent-menu)
           ("oo" . ar/spanish-accent-menu)
           ("uu" . ar/spanish-accent-menu)
           ("AA" . ar/spanish-accent-menu)
           ("EE" . ar/spanish-accent-menu)
           ("II" . ar/spanish-accent-menu)
           ("OO" . ar/spanish-accent-menu)
           ("UU" . ar/spanish-accent-menu)
           ("nn" . ar/spanish-accent-menu)
           ("NN" . ar/spanish-accent-menu)
           ("??" . ar/spanish-accent-menu)
           ("!!" . ar/spanish-accent-menu))
  :config
  (defun ar/spanish-accent-menu ()
    (interactive)
    (let ((accent-diacritics
           '((a (á))
             (e (é))
             (i (í))
             (o (ó))
             (u (ú ü))
             (A (Á))
             (E (É))
             (I (Í))
             (O (Ó))
             (U (Ú Ü))
             (n (ñ))
             (N (Ñ))
             (\? (¿))
             (! (¡)))))
      (ignore-error quit
        (accent-menu)))))
```

While it kinda works, "nn" quickly got in the way of my n/p [magit](https://magit.vc/) navigation. Perhaps key chords are still an option for someone who doesn't need the "nn" chord, but being a Spanish speaker, I need that "ñ" from long "n" presses!

I'm now trying a little experiment using an `after-change-functions` hook to monitor text input and present the accent menu. I'm sure there's a better way (anyone with ideas?). For now, it gives me something akin to *press-and-hold.*

![](https://xenodium.github.io/images/an-accentuated-emacs-experiment/accentuated.webp)

I'm wrapping the hook with a minor mode to easily enable/disable whenever needed. I'm also overriding `accent-diacritics` to only include the characters I typically need.

``` {.commonlisp org-language="emacs-lisp" lexical="no"}
(use-package accent
  :ensure t
  :hook ((text-mode . accent-menu-mode)
         (org-mode . accent-menu-mode)
         (message-mode . accent-menu-mode))
  :config
  (setq accent-diacritics '((a (á))
                            (e (é))
                            (i (í))
                            (o (ó))
                            (u (ú ü))
                            (A (Á))
                            (E (É))
                            (I (Í))
                            (O (Ó))
                            (U (Ú Ü))
                            (n (ñ))
                            (N (Ñ))
                            (\? (¿))
                            (! (¡))))
  (defvar accent-menu-monitor--last-edit-time nil)

  (define-minor-mode accent-menu-mode
    "Toggle `accent-menu' if repeated keys are detected."
    :lighter " accent-menu mode"
    (if accent-menu-mode
        (progn
          (remove-hook 'after-change-functions #'accent-menu-monitor--text-change t)
          (add-hook 'after-change-functions #'accent-menu-monitor--text-change 0 t))
      (remove-hook 'after-change-functions #'accent-menu-monitor--text-change t)))

  (defun accent-menu-monitor--text-change (beginning end length)
    "Monitors text change BEGINNING, END, and LENGTH."
    (let ((last-edit-time accent-menu-monitor--last-edit-time)
          (edit-time (float-time)))
      (when (and (> end beginning)
                 (eq length 0)
                 last-edit-time
                 (not undo-in-progress)
                 ;; 0.27 seems to work for my macOS keyboard settings.
                 ;; Key Repeat: Fast | Delay Until Repeat: Short.
                 (< (- edit-time last-edit-time) 0.27)
                 (float-time (time-subtract (current-time) edit-time))
                 (accent-menu-monitor--buffer-char-string (1- beginning))
                 (seq-contains-p (mapcar (lambda (item)
                                           (symbol-name (car item)))
                                         accent-diacritics)
                                 (accent-menu-monitor--buffer-char-string beginning))
                 (string-equal (accent-menu-monitor--buffer-char-string (1- beginning))
                               (accent-menu-monitor--buffer-char-string beginning)))
        (delete-backward-char 1)
        (ignore-error quit
          (accent-menu)))
      (setq accent-menu-monitor--last-edit-time edit-time)))

  (defun accent-menu-monitor--buffer-char-string (at)
    (when (and (>= at (point-min))
               (< at (point-max)))
      (buffer-substring-no-properties at (+ at 1)))))
```

As a bonus, it ocurred to me that I could use the same *press-and-hold* to handle question marks in Spanish (from my UK keyboard).

![](https://xenodium.github.io/images/an-accentuated-emacs-experiment/porque.webp)

# \[2022-07-28 Thu\] dwim-shell-command improvements
---
id: dwim-shell-command-improvements
---

Added a few improvements to [dwim-shell-command](https://github.com/xenodium/dwim-shell-command).

## Dired region

In DWIM style, if you happen to have a [dired](https://www.gnu.org/software/emacs/manual/html_node/emacs/Dired.html) region selected, use region files instead. There's no need to explicitly mark them.

![](https://xenodium.github.io/images/dwim-shell-command-improvements/backup_x2.webp)

## Clipboard (kill-ring) replacement

Use `<<cb>>` to substitute with clipboard content. This is handy for cloning git repos, using a URL copied from your browser.

``` {.bash org-language="sh"}
git clone <<cb>>
```

![](https://xenodium.github.io/images/dwim-shell-command-improvements/clone.webp)

This illustrates `<<cb>>` usage, but you may want to use `dwim-shell-commands-git-clone-clipboard-url` from [dwim-shell-commands.el](https://github.com/xenodium/dwim-shell-command/blob/main/dwim-shell-commands.el) instead. It does the same thing internally, but makes the command more accessible.

``` {.commonlisp org-language="emacs-lisp" lexical="no"}
(defun dwim-shell-commands-git-clone-clipboard-url ()
  "Clone git URL in clipboard to `default-directory'."
  (interactive)
  (dwim-shell-command-on-marked-files
   (format "Clone %s" (file-name-base (current-kill 0)))
   "git clone <<cb>>"
   :utils "git"))
```

## Counter replacement

Use `<<n>>` to substitute with a counter. You can also use `<<3n>>` to start the counter at 3.

Handy if you'd like to consistently rename or copy files.

``` {.bash org-language="sh"}
mv '<<f>>' 'image(<<n>>).png'
```

![](https://xenodium.github.io/images/dwim-shell-command-improvements/numberedsorted_x2.2.webp)

Can also use an alphabetic counter with `<<an>>`. Like the numeric version, can use any letter to start the counter with.

``` {.bash org-language="sh"}
mv '<<f>>' 'image(<<an>>).png'
```

![](https://xenodium.github.io/images/dwim-shell-command-improvements/alphacount_x2.2.webp)

## Prefix counter

Use a [prefix command argument](https://www.gnu.org/software/emacs/manual/html_node/elisp/Prefix-Command-Arguments.html) on `dwim-shell-commands` to repeat the command a number of times. Combined with a counter, you can make multiple copies of a single file.

![](https://xenodium.github.io/images/dwim-shell-command-improvements/repeat.webp)

## Optional error prompt

Set `dwim-shell-command-prompt-on-error` to nil to skip error prompts. Focus process buffers automatically instead.

![](https://xenodium.github.io/images/dwim-shell-command-improvements/couldnt.png)

## Configurable prompt

By default, `dwim-shell-command` shows all supported placeholders. You can change that prompt to something shorter using `dwim-shell-command-prompt`.

![](https://xenodium.github.io/images/dwim-shell-command-improvements/prompt.jpg)

## ⚠️ Use with care ⚠️

The changes are pretty fresh. Please use with caution (specially the counter support).

# \[2022-07-24 Sun\] dwim-shell-command on Melpa
---
id: dwim-shell-command-on-melpa
---

<figure width="70%" height="70%">
<img src="https://xenodium.github.io/images/dwim-shell-command-on-melpa/clone.webp" />
<figcaption><code>&lt;&lt;cb&gt;&gt;</code> gets replaced by a clipboard (kill ring) URL</figcaption>
</figure>

My pull request to add [dwim-shell-command](https://github.com/xenodium/dwim-shell-command) to [melpa](https://melpa.org/) has been [merged](https://github.com/melpa/melpa/pull/8129). Soon, you'll be able to install [directly](https://melpa.org/#/dwim-shell-command) from Milkypostman’s Emacs Lisp Package Archive.

`dwim-shell-command` is another way to invoke shell commands from our beloved editor. Why a different way? It does lots of little things for you, removing friction you didn't realise you had. You can check out the [README](https://github.com/xenodium/dwim-shell-command), but you'll appreciate it much more once you try it out.

In addition, it's enabled me to bring lots of command-line tools into my Emacs config and make them highly accessible. You can see my usages over at [dwim-shell-command-commands.el](https://github.com/xenodium/dotsies/blob/main/emacs/ar/dwim-shell-command-commands.el).

What kind of command-line tools? ffmpeg, convert, gifsycle, atool, qdpf, plutil, qrencode, du, sips, iconutil, and git (so far anyway). Below is a simple example, but would love to [hear](https://twitter.com/xenodium) how you get to use it.

``` {.commonlisp org-language="emacs-lisp" lexical="no"}
(defun dwim-shell-command-audio-to-mp3 ()
  "Convert all marked audio to mp3(s)."
  (interactive)
  (dwim-shell-command-on-marked-files
   "Convert to mp3"
   "ffmpeg -stats -n -i '<<f>>' -acodec libmp3lame '<<fne>>.mp3'"
   :utils "ffmpeg"))
```

I've written about `dwim-shell-command` before:

-   [Emacs: DWIM shell command (multi-language)](emacs-dwim-shell-command-multi-language/)
-   [png to icns (Emacs DWIM style)](png-to-icns-emacs-dwim-style/)
-   [Emacs: Password-protect current pdf (revisited)](emacs-password-protect-current-pdf-revisited/)
-   [Emacs DWIM shell-command](emacs-dwim-shell-command/)

[Irreal](https://irreal.org/blog/)'s also covered it:

-   [DWIM Shell Now Supports Multiple Languages](https://irreal.org/blog/?p=10674)
-   [DWIM Shell Commands](https://irreal.org/blog/?p=10653)
-   [More Examples of DWIM Shell Commands](https://irreal.org/blog/?p=10660  )

# \[2022-07-16 Sat\] A lifehack for your shell
---
id: a-lifehack-for-your-shell
---

![](https://xenodium.github.io/images/a-lifehack-for-your-shell/unzip_x2.gif)

I'm a fan of the [unzip](http://infozip.sourceforge.net/mans/unzip.html) command line utility that ships with macOS. I give it a .zip file and it unzips it for me. No flags or arguments to remember (for my typical usages anyway). Most importantly, I've fully internalized the `unzip` command into muscle memory, probably because of its *perfect mnemonic*.

But then there's .tar, .tar.gz, .tar.xz, .rar, and a whole world of compression archives, often requiring different tools, flags, etc. and I need to remember those too.

Can't remember where I got this "life hack" from, but it suggests something along the lines of…

::: center
*Once you find a lost item at home, place it in the first spot you looked.*
:::

Great, I'll find things quickly. Win.

Now, I still remember a couple of unarchiving commands from memory (looking at you `tar xvzf`), but I've noticed the first word that pops into mind when extracting is always `unzip`.

There's the great [atool](https://www.nongnu.org/atool/) wrapper out there to extract all kinds of archives (would love to hear of others), but unlucky for me, its name never comes to mind as quickly as `unzip` does.

With "life hack" in mind, let's just create an `unzip` [eshell](https://www.gnu.org/software/emacs/manual/html_mono/eshell.html) alias to `atool`. Next time I need to unarchive anything, the first word that comes to mind (unzip!) will quickly get me on my way…

``` {.bash org-language="sh"}
alias unzip 'atool --extract --explain $1'
```

Or if you prefer to add to your Emacs config:

``` {.commonlisp org-language="emacs-lisp" lexical="no"}
(eshell/alias "unzip" "atool --extract --explain $1")
```

While [I'm fan of Emacs eshell](yasnippet-in-emacs-eshell/), it's not everyone's cup of tea. Lucky for us all, aliases are a popular feature across shells. Happy unzipping!

## Bonus

Since I'm a keen on using "unzip" mnemonic everywhere in Emacs (not just my shell), I now have a [DWIM shell-command](emacs-dwim-shell-command/) for it:

``` {.commonlisp org-language="emacs-lisp" lexical="no"}
(defun dwim-shell-command-unzip ()
  "Unzip all marked archives (of any kind) using `atool'."
  (interactive)
  (dwim-shell-command-on-marked-files
   "Unzip" "atool --extract --explain '<<f>>'"
   :utils "atool"))
```

![](https://xenodium.github.io/images/a-lifehack-for-your-shell/unzip-dired_x1.5.gif)

## UPDATE:

[Lobste.rs](https://lobste.rs/) has great [comments](https://lobste.rs/s/qaimmg/lifehack_for_your_shell). Thanks all:

### Aliases missing on remote machines

Concerns about aliases [not available on remote machines](https://lobste.rs/s/qaimmg/lifehack_for_your_shell#c_mqxo73). Valid. Certainly brings challenges if you can't modify the environment on the remote machine. The severity would depend on how frequently you have to do this. Fortunately for me, it's infrequent.

Additionally, if accessing remote machine via [eshell](https://www.gnu.org/software/emacs/manual/html_mono/eshell.html), this is a non-issue. You get to transparently bring most of your environment with you anyway.

### Unzip keyword is overloaded

The alias is [overloading the unzip command](https://lobste.rs/s/qaimmg/lifehack_for_your_shell#c_78nnwt). I know. It's a little naughty. Going with it for now. I used to use "extract" (also in comments), which I still like but somehow "unzip" still wins my memory race. [There's also "x"](https://lobste.rs/s/qaimmg/lifehack_for_your_shell#c_73bzze) (nice option), which seems to originate from [prezto](https://github.com/sorin-ionescu/prezto). I could consider unzipp, unzip1, or some other variation.

Not sure how I missed this, but there's also an [existing alias for atool](https://lobste.rs/s/qaimmg/lifehack_for_your_shell#c_ra6sbf): aunpack. Could be a great alternative.

### Pause before extracting archives

Valid [point](https://lobste.rs/s/qaimmg/lifehack_for_your_shell#c_73bzze). In my case, the pause typically happens *before* I invoke the alias.

### Littering

If the archive didn't have a root dir, it can [litter your current directory](https://lobste.rs/s/qaimmg/lifehack_for_your_shell#c_7fsart). Indeed a pain to clean up. For this, we can atool's `--subdir` param to *always create subdirectory when extracting*.

### Alias to retrain

[Neat trick](https://lobste.rs/s/qaimmg/lifehack_for_your_shell#c_yr1jby): `alias unzip = “echo ‘use atool’”` to help retrain yourself. Reminds me of Emacs [guru-mode](https://github.com/bbatsov/guru-mode).

### atool alternatives

Nice to see other options suggested [dtrx](https://github.com/moonpyk/dtrx) ([comment](https://lobste.rs/s/qaimmg/lifehack_for_your_shell#c_mutdjl)), [archiver](https://github.com/mholt/archiver) ([comment](https://lobste.rs/s/qaimmg/lifehack_for_your_shell#c_nlsk7w)), [unar](https://github.com/ashang/unar) ([comment](https://lobste.rs/s/qaimmg/lifehack_for_your_shell#c_90dk1l)), bsdtar from [libarchive](https://github.com/libarchive/libarchive) ([comment](https://lobste.rs/s/qaimmg/lifehack_for_your_shell#c_ojy6ah)), [unp](https://packages.debian.org/stable/unp), [patool](https://wummel.github.io/patool/), and the tangentially related [zgrep](https://www.nongnu.org/zutils/zutils.html) ([comment](https://lobste.rs/s/qaimmg/lifehack_for_your_shell#c_vp8fdw)).

# \[2022-07-13 Wed\] Emacs zones to lift you up
---
id: emacs-zones-to-lift-you-up
---

![](https://xenodium.github.io/images/emacs-zoneb-tob-lift-you-up/zone.gif)

As I prune my [Emacs config](https://github.com/xenodium/dotsies/) off, I came across a forgotten bit of elisp I wrote about 6 years ago. While it's not going to power up your Emacs fu, it may lift your spirits, or maybe just aid discovery of new words.

You see, I had forgotten about [zone.el](https://github.com/emacs-mirror/emacs/blob/master/lisp/play/zone.el) altogether: a fabulous package to tickle your heart. You can think of it as screensaver built into Emacs.

If the built-in zones don't do it for ya, check out the few on melpa ([nyan](https://depp.brause.cc/zone-nyan/), [sl](https://github.com/kawabata/zone-sl), and [rainbow](added-emacs-zone-rainbow/)).

So, my nostalgic bit of elisp dates `Jun 17 2016`: a basic but functional zone ([zone-words](https://github.com/xenodium/dotsies/blob/main/emacs/ar/zone-words.el)), displaying words from [WordNet](http://wordnet.princeton.edu/). Surely the package can use plenty of improvements ([here's one](https://github.com/xenodium/dotsies/commit/00215e215be1413ea9d0085dd2de5123c635b8c0)), but hey this is Emacs and pretty much all existing code will run, no matter how old. In Emacs time, 2016 is practically yesterday!

# \[2022-07-10 Sun\] Emacs: DWIM shell command (multi-language)
---
id: emacs-dwim-shell-command-multi-language
---

UPDATE: [dwim-shell-command](https://github.com/xenodium/dwim-shell-command) is now available on [melpa](https://melpa.org/#/dwim-shell-command).

![](https://xenodium.github.io/images/emacs-dwim-shell-command-multi-language/csv.gif)

I keep on [goofying around](png-to-icns-emacs-dwim-style/) with [dwim-shell-command](https://github.com/xenodium/dwim-shell-command) and it's sibling `dwim-shell-command-on-marked-files` from [dwim-shell-command.el](https://github.com/xenodium/dwim-shell-command/blob/main/dwim-shell-command.el).

In addition to defaulting to [zsh](https://en.wikipedia.org/wiki/Z_shell), `dwim-shell-command-on-marked-files` now support other shells and languages. This comes in handy if you have snippets in different languages and would like to easily invoke them from Emacs. Multi-language support enables "using the best tool for the job" kinda thing. Or maybe you just happen to know how to solve a particular problem in a specific language.

Let's assume you have an existing Python snippet to convert files from csv to json. With `dwim-shell-command-on-marked-files`, you can invoke the Python snippet to operate on either [dired](https://www.gnu.org/software/emacs/manual/html_node/emacs/Dired.html) or buffer files.

``` {.commonlisp org-language="emacs-lisp" lexical="no"}
(defun dwim-shell-command-csv-to-json-via-python ()
  "Convert csv file to json (via Python)."
  (interactive)
  (dwim-shell-command-on-marked-files
   "Convert csv file to json (via Python)."
   "
import csv
import json
text = json.dumps({ \"values\": list(csv.reader(open('<<f>>')))})
fpath = '<<fne>>.json'
with open(fpath , 'w') as f:
  f.write(text)"
   :shell-util "python"
   :shell-args "-c"))
```

Or, maybe you prefer Swift and already had a snippet for the same thing?

``` {.commonlisp org-language="emacs-lisp" lexical="no"}
(defun dwim-shell-command-csv-to-json-via-swift ()
  "Convert csv file to json (via Swift)."
  (interactive)
  (dwim-shell-command-on-marked-files
   "Convert csv file to json (via Swift)."
   "
    import Foundation
    import TabularData
    let filePath = \"<<f>>\"
    print(\"reading \\(filePath)\")
    let content = try String(contentsOfFile: filePath).trimmingCharacters(in: .whitespacesAndNewlines)
    let parsedCSV = content.components(separatedBy: CSVWritingOptions().newline).map{
      $0.components(separatedBy: \",\")
    }
    let jsonEncoder = JSONEncoder()
    let jsonData = try jsonEncoder.encode([\"value\": parsedCSV])
    let json = String(data: jsonData, encoding: String.Encoding.utf8)
    let outURL = URL(fileURLWithPath:\"<<fne>>.json\")
    try json!.write(to: outURL, atomically: true, encoding: String.Encoding.utf8)
    print(\"wrote \\(outURL)\")"
   :shell-pipe "swift -"))
```

You can surely solve the same problem in elisp, but hey it's nice to have options and flexibility.

# \[2022-07-09 Sat\] png to icns (Emacs DWIM style)
---
id: png-to-icns-emacs-dwim-style
---

UPDATE: [dwim-shell-command](https://github.com/xenodium/dwim-shell-command) is now available on [melpa](https://melpa.org/#/dwim-shell-command).

![](https://xenodium.github.io/images/png-to-icns-emacs-dwim-style/icns.gif)

Since [writing a DWIM version of the shell-command](emacs-dwim-shell-command/), I've been having a little fun [revisiting command line utilities](emacs-password-protect-current-pdf-revisited/) I sometimes invoke from my beloved editor. In this instance, converting a png file to an icns icon. What's more interesting about this case is that it's not just a one-liner, but a short script in itself. Either way, it's just as easy to invoke from Emacs using `dwim-shell-command--on-marked-files`.

``` {.commonlisp org-language="emacs-lisp" lexical="no"}
(defun dwim-shell-command-convert-image-to-icns ()
  "Convert png to icns icon."
  (interactive)
  (dwim-shell-command-on-marked-files
   "Convert png to icns icon"
   "
    # Based on http://stackoverflow.com/questions/12306223/how-to-manually-create-icns-files-using-iconutil
    # Note: png must be 1024x1024
    mkdir <<fne>>.iconset
    sips -z 16 16 '<<f>>' --out '<<fne>>.iconset/icon_16x16.png'
    sips -z 32 32 '<<f>>' --out '<<fne>>.iconset/icon_16x16@2x.png'
    sips -z 32 32 '<<f>>' --out '<<fne>>.iconset/icon_32x32.png'
    sips -z 64 64 '<<f>>' --out '<<fne>>.iconset/icon_32x32@2x.png'
    sips -z 128 128 '<<f>>' --out '<<fne>>.iconset/icon_128x128.png'
    sips -z 256 256 '<<f>>' --out '<<fne>>.iconset/icon_128x128@2x.png'
    sips -z 256 256 '<<f>>' --out '<<fne>>.iconset/icon_256x256@2x.png'
    sips -z 512 512 '<<f>>' --out '<<fne>>.iconset/icon_512x512.png'
    sips -z 512 512 '<<f>>' --out '<<fne>>.iconset/icon_256x256@2x.png'
    sips -z 1024 1024 '<<f>>' --out '<<fne>>.iconset/icon_512x512@2x.png'
    iconutil -c icns '<<fne>>.iconset'"
   :utils '("sips" "iconutil")
   :extensions "png"))
```

# \[2022-07-09 Sat\] Emacs: Password-protect current pdf (revisited)
---
id: emacs-password-protect-current-pdf-revisited
---

UPDATE: [dwim-shell-command](https://github.com/xenodium/dwim-shell-command) is now available on [melpa](https://melpa.org/#/dwim-shell-command).

![](https://xenodium.github.io/images/emacs-password-protect-current-pdf-revisited/passprotect.gif)

With a recent look at writing [DWIM shell commands](emacs-dwim-shell-command/), I've been revisiting my custom Emacs functions invoking command line utilities.

Take this [post](emacs-password-protect-current-pdf/), for example, where I invoke [qpdf](https://github.com/qpdf/qpdf) via a elisp. Using the new `dwim-shell-command--on-marked-files` in [dwim-shell-command.el](https://github.com/xenodium/dwim-shell-command/blob/main/dwim-shell-command.el), the code is stripped down to a bare minimum:

``` {.commonlisp org-language="emacs-lisp" lexical="no"}
(defun dwim-shell-commands-pdf-password-protect ()
  "Password protect pdf."
  (interactive)
  (dwim-shell-command-on-marked-files
   "Password protect pdf"
   (format "qpdf --verbose --encrypt '%s' '%s' 256 -- '<<f>>' '<<fne>>_enc.<<e>>'"
           (read-passwd "user-password: ")
           (read-passwd "owner-password: "))
   :utils "qpdf"
   :extensions "pdf"))
```

Compare the above `dwim-shell-command--on-marked-files` usage to my [previous implementation](emacs-password-protect-current-pdf/):

``` {.commonlisp org-language="emacs-lisp" lexical="no"}
(defun pdf-password-protect ()
  "Password protect current pdf in buffer or `dired' file."
  (interactive)
  (unless (executable-find "qpdf")
    (user-error "qpdf not installed"))
  (unless (equal "pdf"
                 (or (when (buffer-file-name)
                       (downcase (file-name-extension (buffer-file-name))))
                     (when (dired-get-filename nil t)
                       (downcase (file-name-extension (dired-get-filename nil t))))))
    (user-error "no pdf to act on"))
  (let* ((user-password (read-passwd "user-password: "))
         (owner-password (read-passwd "owner-password: "))
         (input (or (buffer-file-name)
                    (dired-get-filename nil t)))
         (output (concat (file-name-sans-extension input)
                         "_enc.pdf")))
    (message
     (string-trim
      (shell-command-to-string
       (format "qpdf --verbose --encrypt '%s' '%s' 256 -- '%s' '%s'"
               user-password owner-password input output))))))
```

This really changes things for me. I'll be more inclined to add more of these tiny integrations to lots of great command line utilities. Take this recent [Hacker News post](https://news.ycombinator.com/item?id=32028752) on [ocrmypdf](https://github.com/ocrmypdf/OCRmyPDF) as an example. Their [cookbook](https://ocrmypdf.readthedocs.io/en/latest/cookbook.html) has lots of examples that can be easily used via `dwim-shell-command--on-marked-files`.

What command line utils would you use?

# \[2022-07-07 Thu\] Emacs DWIM shell-command
---
id: emacs-dwim-shell-command
---

UPDATE: [dwim-shell-command](https://github.com/xenodium/dwim-shell-command) is now available on [melpa](https://melpa.org/#/dwim-shell-command).

I've [talked about DWIM before](emacs-dwim-do-what-i-mean/), where I bend Emacs to help me do what I mean. Emacs is also great for [wrapping command-line one-liners with elisp](emacs-password-protect-current-pdf/), so I can quickly invoke commands without thinking too much about flags, arguments, etc.

I keep thinking the [shell-command](https://www.gnu.org/software/emacs/manual/html_node/emacs/Shell.html) is ripe for plenty of enhancements using our DWIM fairydust.

## Do what I mean how?

### Smart template instantiation

I've drawn inspiration from [dired-do-shell-command](https://www.gnu.org/software/emacs/manual/html_node/emacs/Shell-Commands-in-Dired.html), which substitutes special characters like \* and ? with marked files. I'm also drawing inspiration from [org babel](https://orgmode.org/worg/org-contrib/babel/)'s [noweb](https://orgmode.org/manual/Noweb-Reference-Syntax.html) syntax to substitute `<<f>>` (file path), `<<fne>>` (file path without extension), and `<<e>>` (extension). My initial preference was to use something like `$f`, `$fne`, and `$e`, but felt they clashed with shell variables.

![](https://xenodium.github.io/images/emacs-dwim-shell-command/template.png)

### Operate on dired marked files

This is DWIM, so if we're visiting a [dired](https://www.gnu.org/software/emacs/manual/html_node/emacs/Dired.html) buffer, the shell command should operate on all the marked files.

![](https://xenodium.github.io/images/emacs-dwim-shell-command/diredmark.gif)

### Operate on current buffer file

Similarly, if visiting a buffer with an associated file, operate on that file instead.

![](https://xenodium.github.io/images/emacs-dwim-shell-command/blur.png)

### Automatically take me to created files

Did the command create a new file in the current directory? Take me to it, right away.

![](https://xenodium.github.io/images/emacs-dwim-shell-command/showme.png)

### Show me output on error

I'm not usually interested in the command output when generating new files, unless there was an error of course. Offer to show it.

![](https://xenodium.github.io/images/emacs-dwim-shell-command/couldnt.png)

### Show me output if no new files

Not all commands generate new files, so automatically show me the output for these instances.

![](https://xenodium.github.io/images/emacs-dwim-shell-command/apple.gif)

### Make it easy to create utilities

[ffmpeg](https://ffmpeg.org/) is awesome, but man I can never remember all the flags and arguments. I may as well wrap commands like these in a convenient elisp function and invoke via [execute-extended-command](https://www.gnu.org/software/emacs/manual/html_node/efaq/Extended-commands.html), or my favorite [counsel-M-x](http://oremacs.com/swiper/#minibuffer-key-bindings) (with completion), bound to the vital `M-x`.

All those gifs you see in this post were created with `dwim-shell-command-convert-to-gif`, powered by the same elisp magic.

``` {.commonlisp org-language="emacs-lisp" lexical="no"}
(defun dwim-shell-command-convert-to-gif ()
  "Convert all marked videos to optimized gif(s)."
  (interactive)
  (dwim-shell-command--on-marked-files
   "Convert to gif"
   "ffmpeg -loglevel quiet -stats -y -i <<f>> -pix_fmt rgb24 -r 15 <<fne>>.gif"
   :utils "ffmpeg"))
```

![](https://xenodium.github.io/images/emacs-dwim-shell-command/togif_x1.5.gif)

This makes wrapping one-liners a breeze, so let's do some more…

``` {.commonlisp org-language="emacs-lisp" lexical="no"}
(defun dwim-shell-command-convert-audio-to-mp3 ()
  "Convert all marked audio to mp3(s)."
  (interactive)
  (dwim-shell-command-on-marked-files
   "Convert to mp3"
   "ffmpeg -stats -n -i '<<f>>' -acodec libmp3lame '<<fne>>.mp3'"
   :utils "ffmpeg"))

(defun dwim-shell-command-convert-image-to-jpg ()
  "Convert all marked images to jpg(s)."
  (interactive)
  (dwim-shell-command-on-marked-files
   "Convert to jpg"
   "convert -verbose '<<f>>' '<<fne>>.jpg'"
   :utils "convert"))

(defun dwim-shell-command-drop-video-audio ()
  "Drop audio from all marked videos."
  (interactive)
  (dwim-shell-command-on-marked-files
   "Drop audio" "ffmpeg -i '<<f>>' -c copy -an '<<fne>>_no_audio.<<e>>'"
   :utils "ffmpeg"))
```

### Make it spin ;)

Ok, not quite, but use Emacs's [progress-reporter](https://www.gnu.org/software/emacs/manual/html_node/elisp/Progress.html) just for kicks.

![](https://xenodium.github.io/images/emacs-dwim-shell-command/progress.gif)

## Use it everywhere

`dwim-shell-command` covers my needs (so far anyway), so I'm binding it to existing bindings.

``` {.commonlisp org-language="emacs-lisp" lexical="no"}
(use-package dwim-shell-command
  :bind
  ("M-!" . dwim-shell-command))

(use-package dired
  :bind (:map dired-mode-map
              ([remap dired-do-async-shell-command] . dwim-shell-command)
              ([remap dired-do-shell-command] . dwim-shell-command)
              ([remap dired-smart-shell-command] . dwim-shell-command)))
```

## Bring those command line utilities

On the whole, this really changes things for me. I'll be more inclined to bring command line utilities to seamless Emacs usage. Take this recent [Hacker News post](https://news.ycombinator.com/item?id=32028752) on [ocrmypdf](https://github.com/ocrmypdf/OCRmyPDF) as an example. Their [cookbook](https://ocrmypdf.readthedocs.io/en/latest/cookbook.html) has lots of examples that can be easily used via `dwim-shell-command--on-marked-files`. What command line utilities would you bring?

## Where's the code?

UPDATE: [dwim-shell-command](https://github.com/xenodium/dwim-shell-command) is now available on [melpa](https://melpa.org/#/dwim-shell-command).

The code for [dwim-shell-command.el](https://github.com/xenodium/dotsies/blob/main/emacs/ar/dwim-shell-command.el) is likely a bit rough still, but you can take a peek if interested. Keep in mind this is DWIM, tailored for what ✨I✨ mean. Some of the current behavior may not be your cup of tea, but this is Emacs. You can bend it to do what ✨you✨ mean. Happy Emacsing.

# \[2022-06-02 Thu\] Emacs: Password-protect current pdf
---
id: emacs-password-protect-current-pdf
---

UPDATE: Check out [Password-protect current pdf (revisted)](emacs-password-protect-current-pdf-revisited) for a simpler version.

Every so often, I need to password-protect a pdf. On macOS, [Preview has a simple solution](https://support.apple.com/en-gb/guide/preview/prvw587dd90f/mac), but I figured there must be a command line utility to make this happen. There are options, but [qdf](https://github.com/qpdf/qpdf) did the job just fine.

``` {.bash org-language="sh"}
qpdf --verbose --encrypt USER-PASSWORD OWNER-PASSWORD KEY-LENGTH -- input.pdf output.pdf
```

So what does `qpdf` have to do with Emacs? Command-line utilities are easy to invoke from Emacs via `shell-command` (M-!), but I don't want to remember the command nor the parameters. I may as well add a function that [does what I mean](emacs-dwim-do-what-i-mean/) and password-protect either buffers or [dired](https://www.gnu.org/software/emacs/manual/html_node/emacs/Dired.html) files.

``` {.commonlisp org-language="emacs-lisp" lexical="no"}
(defun pdf-password-protect ()
    "Password protect current pdf in buffer or `dired' file."
    (interactive)
    (unless (executable-find "qpdf")
      (user-error "qpdf not installed"))
    (unless (equal "pdf"
                   (or (when (buffer-file-name)
                         (downcase (file-name-extension (buffer-file-name))))
                       (when (dired-get-filename nil t)
                         (downcase (file-name-extension (dired-get-filename nil t))))))
      (user-error "no pdf to act on"))
    (let* ((user-password (read-passwd "user-password: "))
           (owner-password (read-passwd "owner-password: "))
           (input (or (buffer-file-name)
                      (dired-get-filename nil t)))
           (output (concat (file-name-sans-extension input)
                           "_enc.pdf")))
      (message
       (string-trim
        (shell-command-to-string
         (format "qpdf --verbose --encrypt '%s' '%s' 256 -- '%s' '%s'"
                 user-password owner-password input output))))))
```

# \[2022-04-24 Sun\] Plain Org v1.4 released
---
id: plain-org-v14-released
---

[Plain Org](https://plainorg.com) v1.4 is now available on the [App Store](https://apps.apple.com/app/id1578965002).

I was on a long flight recently 🦘, so I gave list and checkbox editing a little love. There's a couple of other minor improvements included.

If you haven't heard of [Plain Org](https://plainorg.com), it gives you access to [org](https://orgmode.org) files on iPhone while away from your beloved [Emacs](https://www.gnu.org/software/emacs/).

I love org markup, but we (iPhone + org users) are a fairly niche bunch. If you're finding Plain Org useful, **please help support this effort** by getting the word out. Tell your friends, [tweet](https://twitter.com/intent/tweet?text=Plain%20Org%20https%3A%2F%2Fapps.apple.com%2Fapp%2Fid1578965002%20), or blog about it.

On to v1.4 release notes…

## Improved list/checkbox editing

Adding list or checkbox items is traditionally cumbersome via the iPhone's keyboard. This release adds new toolbar actions and smart return to simplify things.

![](https://xenodium.github.io/images/plain-org-v14-released/list_this.gif)

## Render form feed characters

Form feed characters are now rendered within expanded headings.

![](https://xenodium.github.io/images/plain-org-v14-released/form_feed.jpg)

Note: There's a limitation. Form feed characters at the end of a heading aren't currently displayed.

## Other

Increased all button tap areas in edit toolbar. This should hopefully improve interaction.

# \[2022-04-15 Fri\] Plain Org v1.3 released
---
id: plain-org-v130-released
---

[Plain Org](https://plainorg.com) v1.3 is now available on the [App Store](https://apps.apple.com/app/id1578965002). The update receives a few features, bug fixes, and improvements.

If you haven't heard of [Plain Org](https://plainorg.com), it gives you access to [org](https://orgmode.org) files on iPhone while away from your beloved [Emacs](https://www.gnu.org/software/emacs/).

I love org markup, but we (iPhone + org users) are a fairly niche bunch. If you're finding Plain Org useful, **please help support this effort** by getting the word out. Tell your friends, [tweet](https://twitter.com/intent/tweet?text=Plain%20Org%20https%3A%2F%2Fapps.apple.com%2Fapp%2Fid1578965002%20), or blog about it.

On to v1.3 release notes…

## Toggle recurring tasks

You can now toggle recurring tasks with either catchup `<2022-04-15 Fri ++1d>`, restart `<2022-04-15 Fri .+1d>`, or cumulate `<2022-04-15 Fri +1d>` repeaters.

![](https://xenodium.github.io/images/plain-org-v130-released/recurring.gif)

## Log state transitions

![](https://xenodium.github.io/images/plain-org-v130-released/logging.gif)

## Fullscreen view

The navigation bar now hides on scroll. This can be enabled/disabled via `View > Full Screen` menu.

![](https://xenodium.github.io/images/plain-org-v130-released/fullscreen.gif)

The previous screenshot text comes from [Org Mode - Organize Your Life In Plain Text](http://doc.norang.ca/org-mode.html), a magnificent org resource.

## Deadline and scheduled date rendered

In the past, `SCHEDULED` and `DEADLINE` were rendered (but only one of them at a time). Now both are rendered alongside each other (deadline has an orange tint).

![](https://xenodium.github.io/images/plain-org-v130-released/deadline_scheduled.png)

## Roundtripping fidelity

Many roundtripping fidelity improvements included in 1.3. Shoutout to [u/Oerm](https://www.reddit.com/user/Oerm/) who reported [unnecessary formatting changes](https://www.reddit.com/r/plainorg/comments/ty7onh/changing_todo_status_of_one_item_triggers/) in unmodified areas and helped test all fixes.

## Other bug fixes improvements

-   Disable raw text edit menu when file is not accessible.
-   Minor improvements to inline editing layouts (vertical height and drawers).
-   ABRT and HABIT now recognized as a popular keywords.
-   Improve state transition alignment to match org mode behaviour.
-   Fixes roundtripping state transition notes (leading to data loss).
-   Log creation from share sheet.
-   Increment DEADLINE **and** SCHEDULED, not just first found.
-   Roundtrip more whitespace in untouched areas.
-   Fixes org syntax inadvertently parsed within begin_src blocks (leading to data loss).

# \[2022-03-27 Sun\] Plain Org v1.2.1 released
---
id: plain-org-v121-released
---

[Plain Org](https://plainorg.com) v1.2.1 is now available on the [App Store](https://apps.apple.com/app/id1578965002). The update receives minor features, bug fixes, and improvements.

If you haven't heard of [Plain Org](https://plainorg.com), it gives you access to [org](https://orgmode.org) files on iPhone while away from your beloved [Emacs](https://www.gnu.org/software/emacs/).

I love org markup, but we (iPhone + org users) are a fairly niche userbase. If you're finding Plain Org useful, **please help support this effort** by getting the word out. Tell your friends, [tweet](https://twitter.com/intent/tweet?text=Plain%20Org%20https%3A%2F%2Fapps.apple.com%2Fapp%2Fid1578965002%20), or blog about it.

On to v1.2.1 release notes…

## Render LOGBOOK

State transitions and LOGBOOK drawers are now recognized and rendered as such.

Either of the following snippets are rendered as togglable LOGBOOK drawers.

``` org
* TODO Feed the fish
- State "DONE"       from "TODO"       [2022-03-11 Fri 12:23]
```

``` org
* TODO Feed the cat
:LOGBOOK:
- State "DONE"       from "TODO"       [2022-03-11 Fri 12:23]
:END:
```

![](https://xenodium.github.io/images/plain-org-v121-released/logbook.jpg)

## Add task to top/bottom

Up until now, tasks were always appended to the bottom of things. This didn't work so well if you like seeing recent items bubbling up to the top.

This version adds a new setting: *Settings* \> *Add new tasks to* \> *Top/Bottom*, giving you the choice.

Note: Top is the new default value, please change this setting if you'd like to keep the previous behaviour.

![](https://xenodium.github.io/images/plain-org-v121-released/top_bottom.png)

## Checking for changes

Local file changes aren't always detected via [state change notifications](https://developer.apple.com/documentation/uikit/uidocument/1619945-statechangednotification), so additional checks are now in place to offer reloading files.

![](https://xenodium.github.io/images/plain-org-v121-released/reload.jpg)

## Open inactive files

After adding new tasks via iOS's share sheet, if the item was added to a file other than the active one, offer to open that instead.

![](https://xenodium.github.io/images/plain-org-v121-released/load_other.jpg)

## Other improvements

-   Color keyword red/green depending on #+TODO: position.
-   Round-trip planning order (SCHEDULED, CLOSED, DEADLINE).
-   Improve tag alignment to match org mode behaviour (best effort, sorry).
-   Improve vertical spacing prior to lists.
-   Improve share sheet reliability.
-   Fix opening local links from list items.
-   Fix indent for list items without previous content.
-   Fix race condition in adding TITLE and ID to new files.
-   Fix incorrect keyword color selection in search toolbar.
-   Fix menu inadvertently closing.
-   Fix menu tapping for iPad.

# \[2022-03-26 Sat\] Emacs DWIM: swiper vs isearch vs phi-search
---
id: emacs-dwim-swiper-vs-isearch-vs-phi-search
---

![](https://xenodium.github.io/images/emacs-dwim-swiper-vs-isearch-vs-phi-search/search-dwim.gif)

I've [talked about DWIM](emacs-dwim-do-what-i-mean/) in the past, that wonderful Emacs ability to [do what ✨I✨ mean](https://en.wikipedia.org/wiki/DWIM).

Emacs being hyper-configurable, we can always teach it more things, so it can do exactly what we mean.

There are no shortages of buffer searching packages for Emacs. I'm a fan of Oleh Krehel's [swiper](https://github.com/abo-abo/swiper), but before that, I often relied on the built-in [isearch](https://www.gnu.org/software/emacs/manual/html_node/emacs/Basic-Isearch.html). Swiper is my default goto mechanism and have it bound to `C-s` (replacing the built-in [isearch-forward](https://www.gnu.org/software/emacs/manual/html_node/emacs/Basic-Isearch.html)).

Swiper services most needs until I start combining with other tools. Take [keyboard macros](https://www.gnu.org/software/emacs/manual/html_node/emacs/Keyboard-Macros.html) and [multiple cursors](https://github.com/magnars/multiple-cursors.el). Both wonderful, but neither can rely on swiper to do their thing. Ok, swiper does, but [in a different way](emacs-swiper-and-multiple-cursors/).

Rather than binding `C-s` to swiper, let's write a DWIM function that's aware of macros and multiple cursors. It must switch between swiper, isearch, and [phi-search](https://github.com/avkoval/phi-search) depending on what I want (search buffer, define macro, or search multiple cursors).

Let's also tweak swiper's behavior a little further and prepopulate its search term with the active region. Oh, and I also would like swiper to wrap around (see [ivy-wrap](http://oremacs.com/swiper/)). But only swiper, not other ivy utilities. I know, I'm picky, but that's the whole point of DWIM… so here's my function to search forward that does exactly what ✨I✨ mean:

``` {.commonlisp org-language="emacs-lisp" lexical="no"}
(defun ar/swiper-isearch-dwim ()
  (interactive)
  ;; Are we using multiple cursors?
  (cond ((and (boundp 'multiple-cursors-mode)
              multiple-cursors-mode
              (fboundp  'phi-search))
         (call-interactively 'phi-search))
        ;; Are we defining a macro?
        (defining-kbd-macro
          (call-interactively 'isearch-forward))
        ;; Fall back to swiper.
        (t
         ;; Wrap around swiper results.
         (let ((ivy-wrap t))
           ;; If region is active, prepopulate swiper's search term.
           (if (and transient-mark-mode mark-active (not (eq (mark) (point))))
               (let ((region (buffer-substring-no-properties (mark) (point))))
                 (deactivate-mark)
                 (swiper-isearch region))
             (swiper-isearch))))))
```

The above snippet searches forward, but I'm feeling a little off-balance. Let's write an equivalent to search backwards. We can then bind it to `C-r`, also overriding the built-in [isearch-backward](https://www.gnu.org/software/emacs/manual/html_node/emacs/Basic-Isearch.html).

``` {.commonlisp org-language="emacs-lisp" lexical="no"}
(defun ar/swiper-isearch-backward-dwim ()
  (interactive)
  ;; Are we using multiple cursors?
  (cond ((and (boundp 'multiple-cursors-mode)
              multiple-cursors-mode
              (fboundp  'phi-search-backward))
         (call-interactively 'phi-search-backward))
        ;; Are we defining a macro?
        (defining-kbd-macro
          (call-interactively 'isearch-backward))
        ;; Fall back to swiper.
        (t
         ;; Wrap around swiper results.
         (let ((ivy-wrap t))
           ;; If region is active, prepopulate swiper's search term.
           (if (and transient-mark-mode mark-active (not (eq (mark) (point))))
               (let ((region (buffer-substring-no-properties (mark) (point))))
                 (deactivate-mark)
                 (swiper-isearch-backward region))
             (swiper-isearch-backward))))))
```

These may be on the hacky side of things, but hey… they do the job. If there are better/supported ways of accomplishing a similar thing, I'd love to [hear about it](https://twitter.com/xenodium).

# \[2022-03-12 Sat\] Grandma's vanilla pound cake
---
id: grandmas-vanilla-pound-cake
---

![](https://xenodium.github.io/images/grandmas-vanilla-pound-cake/pound_cake.jpg)

My grandmother Hilda used to bake this for us grandkids. I don't know the origin of the recipe, but my parents, aunts, and cousins, they all bake it too. I'm a big fan, but only get to eat it when visiting. Yesterday, I changed that. Finally baked it myself ø/

## Ingredients

-   200g salted butter
-   2 cups (400 g) sugar
-   4 eggs
-   3 cups (375 g) plain flour
-   3 teaspoons baking powder
-   1 tablespoon (15 ml) vanilla extract
-   1 cup (250 ml) milk
-   2 tablespoons (30 ml) Málaga Virgen wine (port works too)

## Prep

-   Ensure all ingredients are at room temperature before you start.
-   Preheat oven at 175C.
-   Separate egg yolks and whites. Keep both.
-   Consolidate liquids into a bowl (milk + wine + vanilla).
-   Consolidate sifted powders into a bowl (flour + baking powder).

## Meringue

-   Beat egg whites into a snowy meringue. Set aside.

## Mixer

-   Beat butter in the mixer until creamy (important).
-   Add sugar and mix thoroughly ensuring creamy consistency remains (important).
-   Mix yolks in thoroughly one by one.
-   Mix in the meringue.
-   You're done with the mixer.

## Hand mixing

-   With a wooden spoon, alternate hand mixing the liquids and the powders. Start with liquids and end with powders.

## Pour into mould

-   Pour the mix into a non-stick baking mould.

## Bake

-   Bake in oven between 60 and 70 mins, but don’t be afraid to leave longer if needed. Mileage varies across ovens.
-   Use a cake tester after 60 minutes to decide how much longer to bake for (if needed).

# \[2022-03-05 Sat\] Emacs: viewing webp images
---
id: emacs-viewing-webp-images
---

There's a recent reddit post asking how to [view webp images in Emacs](https://www.reddit.com/r/emacs/comments/t76isx/viewing_webp_images_in_emacs/). I didn't know the answer, but it's something I had wanted for some time. This post was a nice reminder to go and check things out. Was happy to [contribute an answer](https://www.reddit.com/r/emacs/comments/t76isx/comment/hzft7ww/?utm_source=share&utm_medium=web2x&context=3).

Turns out, it's very simple. Just set `image-use-external-converter` and install relevant external tools.

``` {.commonlisp org-language="emacs-lisp" lexical="no"}
(setq image-use-external-converter t)
```

I'm a `use-package` user, so I prefer to set with:

``` {.commonlisp org-language="emacs-lisp" lexical="no"}
(use-package image
  :custom
  ;; Enable converting external formats (ie. webp) to internal ones.
  (image-use-external-converter t))
```

So what are the external tools needed? `C-h v` `image-use-external-converter` gives us the info we need:

> If non-nil, create-image will use external converters for exotic formats.
>
> Emacs handles most of the common image formats (SVG, JPEG, PNG, GIF and some others) internally, but images that don't have native support in Emacs can still be displayed if an external conversion program (like ImageMagick "convert", GraphicsMagick "gm" or "ffmpeg") is installed.
>
> This variable was added, or its default value changed, in Emacs 27.1.

I happen to be a macOS user, so I install ImageMagick with:

``` {.bash org-language="sh"}
brew install imagemagick
```

# \[2022-02-21 Mon\] Emacs: Fuzzy search Apple's online docs
---
id: emacs-fuzzy-search-apples-online-docs
---

![](https://xenodium.github.io/images/emacs-fuzzy-search-apples-online-docs/color_search.gif)

When building software for the Apple ecosystem, Xcode is often the editor of choice. With [Emacs](https://www.gnu.org/software/emacs/) being my personal preference, I rarely find other iOS devs with a similar mindset.

When I saw [Mikael Konradsson](https://twitter.com/konrad1977)'s post describing [his Emacs Swift development setup](https://www.reddit.com/r/emacs/comments/sndriv/i_finally_got_full_autocompetion_in_swift_with/), I reached out to say hello. While exchanging tips and tricks, the topic of searching Apple's docs came up. It had been a while since I looked into this, so it was a great reminder to revisit the space.

Back in June 2020, I wrote a snippet to [fuzzy search hackingwithswift.com](emacs-search-hackingwithswiftcom/), using Emacs's [ivy](https://github.com/abo-abo/swiper) completion framework. With a similar online API, we could also search Apple's docs. Turns out, there is and we can we can use it to search [developer.apple.com](https://developer.apple.com/search) from our beloved editor.

``` {.commonlisp org-language="emacs-lisp" lexical="no"}
;;; counsel-apple-search.el -*- lexical-binding: t; -*-

(defun ar/counsel-apple-search ()
  "Ivy interface for dynamically querying apple.com docs."
  (interactive)
  (require 'request)
  (require 'json)
  (require 'url-http)
  (ivy-read "apple docs: "
            (lambda (input)
              (let* ((url (url-encode-url (format "https://developer.apple.com/search/search_data.php?q=%s" input)))
                     (c1-width (round (* (- (window-width) 9) 0.3)))
                     (c2-width (round (* (- (window-width) 9) 0.5)))
                     (c3-width (- (window-width) 9 c1-width c2-width)))
                (or
                 (ivy-more-chars)
                 (let ((request-curl-options (list "-H" (string-trim (url-http-user-agent-string)))))
                   (request url
                     :type "GET"
                     :parser 'json-read
                     :success (cl-function
                               (lambda (&key data &allow-other-keys)
                                 (ivy-update-candidates
                                  (mapcar (lambda (item)
                                            (let-alist item
                                              (propertize
                                               (format "%s   %s   %s"
                                                       (truncate-string-to-width (propertize (or .title "")
                                                                                             'face '(:foreground "yellow")) c1-width nil ?\s "…")
                                                       (truncate-string-to-width (or .description "") c2-width nil ?\s "…")
                                                       (truncate-string-to-width (propertize (string-join (or .api_ref_data.languages "") "/")
                                                                                             'face '(:foreground "cyan1")) c3-width nil ?\s "…"))
                                               'url .url)))
                                          (cdr (car data)))))))
                   0))))
            :action (lambda (selection)
                      (browse-url (concat "https://developer.apple.com"
                                          (get-text-property 0 'url selection))))
            :dynamic-collection t
            :caller 'ar/counsel-apple-search))
```

# \[2022-02-13 Sun\] Plain Org v1.2 released
---
id: plain-org-v12-released
---

Although [Plain Org](https://plainorg.com) v1.2 has been in the [App Store](https://apps.apple.com/app/id1578965002) for a little while, the release write-up was overdue, sorry. The update receives some new features and bugfixes.

If you haven't heard of [Plain Org](https://plainorg.com), it gives ya access to your [org files](https://orgmode.org) on iOS while away from your beloved [Emacs](https://www.gnu.org/software/emacs/).

If you're finding Plain Org useful, **please help support this effort** by getting the word out. Tell your friends, [tweet](https://twitter.com/intent/tweet?text=Plain%20Org%20https%3A%2F%2Fapps.apple.com%2Fapp%2Fid1578965002%20), or blog about it.

Ok, now on to what's included in the v1.2 release…

## Edit heading sections inline

v1.0 introduced outline editing (for headings only). In v1.2, we can also edit section content. Press the `return` key multiple times to exit out section editing.

![](https://xenodium.github.io/images/plain-org-v12-released/inline.gif)

## Filter by keyword/priority/tag

From the search dialog, you can now filter by keyboard, priority, and tag.

![](https://xenodium.github.io/images/plain-org-v12-released/select_filter.png)

![](https://xenodium.github.io/images/plain-org-v12-released/filter_results.png)

## Render drawers and properties

Drawers are now rendered and can be expanded to view their content.

![](https://xenodium.github.io/images/plain-org-v12-released/drawer.gif)

## Open files via the Files app's "Share" sheet

From the Files app, you can now explicitly request launching files in Plain Org by using the "Share" menu.

![](https://xenodium.github.io/images/plain-org-v12-released/share.png)

## Render LaTeX src blocks (experimental)

This one has its rough edges at the moment, so have to mark it [experimental]{.underline}, but… you can can now render `#+begin_src latex` blocks.

![](https://xenodium.github.io/images/plain-org-v12-released/latex_src.png)

![](https://xenodium.github.io/images/plain-org-v12-released/latex_render.png)

## Insert title/id in new files

New files created via Plain Org automatically get `#+TITLE:` and `:ID:` inserted by default as follows:

``` org
#+TITLE: My favorite title
:PROPERTIES:
:ID:       7C845D38-8D80-41B5-BEB1-94F673807355
:END:
```

*UPDATE*: Sorry, this feature currently has a bug. You may not get these values inserted into your new document. Working on a fix.

## Adding new tags quicker

Add tags quicker via the new + button.

![](https://xenodium.github.io/images/plain-org-v12-released/new_tag.png)

## Enable/disable sticky tags

Keywords, indent, and tags are maintained when adding new headings via outline editing. If you prefer disabling sticky tags, this can now be disabled.

![](https://xenodium.github.io/images/plain-org-v12-released/sticky_tags_setting.png)

## Improved navigation bar

v1.2 makes the navigation bar feel more at home on your iPhone. It uses a large title which scrolls into the navigation bar.

![](https://xenodium.github.io/images/plain-org-v12-released/navbar.gif)

## Bugfixes

-   Fix table rendering for iPad width.
-   Fix image's horizontal padding.
-   Fix adding new tags on new headings.
-   Fix snapshotting bug resulting in Syncthing conflicts.
-   Fix tapping menu after presenting other dialogs.
-   Filter out parenthesis in file-local keywords like `TODO(t)`.
-   Commit pending inline changes if search is requested.
-   Fix opening local links inside tables.
-   Roundtrip whitespace in empty headings.
-   Roundtrip trailing whitespace when raw-editing heading content.
-   Tapping on body content should not toggle expansion.

<br/>
<center>
  <a href="https://apps.apple.com/app/id1578965002">
    <img src="https://xenodium.github.io/images/flat-habits-for-ios/download-on-app-store.png" alt="download-on-app-store.png" width="180px">
  </a>
</center>

# \[2022-01-03 Mon\] Happy New Year and forming new habits
---
id: happy-new-year-and-forming-new-habits
---

Hacker News has a [summary of Atomic Habits](https://news.ycombinator.com/item?id=29774859) (the [book](https://jamesclear.com/atomic-habits)). In my case, I really enjoyed reading the entire book. I liked its narrative, mixing [actionable]{.underline} and [concrete]{.underline} advice with personal stories and experiments.

After reading Atomic Habits during the first lockdown, I was excited to try out its actionables, specially tracking to keep me honest.

I tried a bunch of iOS apps, but wanted no friction, no tracking, no cloud, no social, no analytics, no account, etc. so eventually [built Flat Habits](frictionless-org-habits-on-ios/) ([flathabits.com](https://flathabits.com)). Also wanted to own my habit data (as plain text), so I made sure Flat Habits stored its data locally as an org file.

I'm an Emacs nutter and can say the strength in habit tracking lies in removing daily friction from the tracking process itself. A quickly accessible mobile app can really help with that. For me, Emacs plays a less important role here. The plain text part is cherry on top (bringing piece of mind around lock-in). In my case, it's been months since I looked at the plain text file itself from an Emacs org buffer. The iOS app, on the other hand, gets daily usage.

As for forming lasting habits (the actual goal here)… it's been well over a year since I started running as a regular form of exercise. While reading Atomic Habits really changed how I think of habits, a tracker played a crucial part in the daily grind. I happen to have built a tracker that [plays nice with Emacs](flat-habits-meets-org-agenda/).

It's a new year. If you're looking at forming new habits, you may want some inspiration and also practical and concrete guidance. The book Atomic Habits can help with that. You can decide on which apps and how to implement the tracking process later on. Pen and paper is also a viable option and there are plenty of templates you can download.

There's a surplus of habit-tracking apps on the app stores. I built yet another one for iOS, modeled after my needs.

<center>
  <img src="https://xenodium.github.io/images/flat-habits-for-ios/today_no_filter.png" alt="today_no_filter.png" width="300px">
  <img src="https://xenodium.github.io/images/flat-habits-for-ios/meditate.png" alt="today_no_filter.png" width="300px">
  <a href="https://apps.apple.com/app/id1558358855">
    <img src="https://xenodium.github.io/images/flat-habits-for-ios/download-on-app-store.png" alt="today_no_filter.png" width="180px">
  </a>
</center>

# \[2021-12-12 Wed\] Plain Org v1.1 released 🎄☃️
---
id: plain-org-v11-released
---

[Plain Org](https://plainorg.com) v1.1 is now available on the [App Store](https://apps.apple.com/app/id1578965002). The update receives new features and bugfixes.

If you're finding Plain Org useful, **please help support this effort** by getting the word out. Tell your friends, [tweet](https://twitter.com/intent/tweet?text=Plain%20Org%20https%3A%2F%2Fapps.apple.com%2Fapp%2Fid1578965002%20), or blog about it.

## What is Plain Org?

Ok, now on to what's included in the v1.1 release…

## Compact mode

By default, Plain Org layout uses generous padding. The new option `Menu -> View -> Compact mode` packs more content into your screen.

![](https://xenodium.github.io/images/plain-org-v11-released/compact.gif)

## Regroup active and inactive tasks

Regrouping tasks now bubbles active ones up. Similarly, inactive tasks drop to the bottom of their node. Changes are persisted to the org file.

![](https://xenodium.github.io/images/plain-org-v11-released/regroup.gif)

## Native table rendering

Tables are now rendered natively but also support displaying links and other formatting within cells.

![](https://xenodium.github.io/images/plain-org-v11-released/table.gif)

## Open local ID links

If your file provider supports granting access to folders, local ID links (ie. `id:eb155a82-92b2-4f25-a3c6-0304591af2f9`) can now be resolved and opened from Plain Org. Note that for ID links to resolve, other org files must live in either the same directory or a subdirectory.

![](https://xenodium.github.io/images/plain-org-v11-released/idlink.gif)

## Fill paragraphs

If your org paragraphs contain newlines optimizing for bigger screens, you can toggle `Menu -> View -> Fill paragraph` to optimize rendering for your iPhone. This rendering option makes no file modifications.

![](https://xenodium.github.io/images/plain-org-v11-released/fillparagraph.gif)

By the way, the previous screenshot text comes from [Org Mode - Organize Your Life In Plain Text](http://doc.norang.ca/org-mode.html), a magnificent org resource.

## Show/hide basic scheduling

Use the new `Menu -> View -> Scheduling` to toggle showing `SCHEDULED` or `DEADLINE` dates.

![](https://xenodium.github.io/images/plain-org-v11-released/scheduling.gif)

## Show/hide tags

Similarly, the new `Menu -> View -> Tags` option toggles displaying tags.

![](https://xenodium.github.io/images/plain-org-v11-released/hidetags.gif)

## Native list rendering

Lists are now rendered natively. With the exception of numbered cases, list items now share a common bullet icon. Description lists are also recognized and receive additional formatting when rendered.

``` org
- First list item
* Second list item
+ Third list item
1. Numbered list item
+ Term :: Description for term
```

![](https://xenodium.github.io/images/plain-org-v11-released/listitems.png)

Numbered checkboxes are now recognized and receive the same formatting and interaction as their non-numbered counterparts.

``` org
1. [ ] First checkbox
2. [X] Second checkbox
3. [X] Third checkbox
```

![](https://xenodium.github.io/images/plain-org-v11-released/numbered.png)

## Reload current file

Plain Org may not be able to automatically reload files for some syncing providers. In those instances, use `Menu -> Reload` to explicitly request a reload.

## Open .txt files

Although .org files are plain text files, they aren't always recognized by other text-editing apps. This release enables opening .txt files, so you can choose to render them in Plain Org, while giving you the option to edit elsewhere.

## Bugfixes

-   Improve vertical whitespace handling.
-   Fixes rendering edge cases.
-   Fail gracefully when creating new files on unsupported cloud providers.
-   Prevent creating new files with redundant extensions.
-   File access improvements.
-   Replicates property spacing behaviour using Emacs's `org-property-format` default value.
-   Fixes keyword picker border rendering.
-   Improves rendering performance for large nodes.

<br/>
<center>
  <a href="https://apps.apple.com/app/id1578965002">
    <img src="https://xenodium.github.io/images/flat-habits-for-ios/download-on-app-store.png" alt="download-on-app-store.png" width="180px">
  </a>
</center>

# \[2021-11-28 Sun\] Emacs bends again
---
id: emacs-bends-again
---

While adding more rendering capabilities to [Plain Org](https://plainorg.com), it soon became apparent some sort of screenshot/snapshot testing was necessary to prevent regressing existing features. That is, we first generate a rendered snapshot from a given org snippet, followed by some visual inspection, right before we go and save the blessed snapshot (often referred to as golden) to our project. Future changes are validated against the golden snapshot to ensure rendering is still behaving as expected.

Let's say we'd like to validate table rendering with links, we can write a test as follows:

``` swift
func testTableWithLinks() throws {
  assertSnapshot(
    matching: OrgMarkupText.make(
      """
      | URL                    | Org link    |
      |------------------------+-------------|
      | https://flathabits.com | [[https://flathabits.com][Flat Habits]] |
      | Regular text           | Here too    |
      |------------------------+-------------|
      """),
    as: .image(layout: .sizeThatFits))
}
```

The corresponding snapshot golden can be seen below.

![](https://xenodium.github.io/images/emacs-bends-again/testTableWithLinks.1.png)

This is all done rather effortlessly thanks to [Point Free](https://twitter.com/pointfreeco)'s wonderful [swift-snapshot-testing](https://github.com/pointfreeco/swift-snapshot-testing) utilities.

So what does any of this have to do with Emacs? You see, as I added more snapshot tests and made modifications to the rendering logic, I needed a quick way to visually inspect and override all goldens. All the main pieces were already there, I just needed some elisp glue to *bend Emacs my way™.*

First, I needed to run my Xcode builds from the command line. This is already [supported via xcodebuild](https://developer.apple.com/library/archive/technotes/tn2339/_index.html). Next, I needed a way to parse test execution data to extract failing tests. [David House](https://twitter.com/davidahouse)'s [xcodebuild-to-json](https://github.com/davidahouse/xcodebuild-to-json) handles this perfectly. What's left? Glue it all up with some elisp.

Beware, the following code snippet is packed with assumptions about my project, it's messy, surely has bugs, can be optimized, etc. But the important point here is that Emacs is such an amazing malleable power tool. Throw some elisp at it and you can to bend it to your liking. After all, it's [your]{.underline} editor.

And so here we are, I can now run snapshot tests from Emacs using my hacked up `plainorg-snapshot-test-all` function and quickly override (or ignore) all newly generated snapshots by merely pressing y/n keys. Oh, and our beloved web browser was also invited to the party. Press "d" to open two browser tabs if you'd like to take a closer look (not demoed below).

Success. *Emacs bends again*.

![](https://xenodium.github.io/images/emacs-bends-again/diff.gif)

``` {.commonlisp org-language="emacs-lisp" lexical="no"}
;;; -*- lexical-binding: t; -*-

(defun plainorg-snapshot-test-all ()
  "Invoke xcodebuild, compare failed tests screenshots side-to-side,
and offer to override them."
  (interactive)
  (let* ((project (cdr (project-current)))
         (json-tmp-file (make-temp-file "PlainOrg_Tests_" nil ".json"))
         (default-directory project))
    (unless (file-exists-p (concat project "PlainOrg.xcodeproj"))
      (user-error "Not in PlainOrg project"))
    (set-process-sentinel
     (start-process
      "xcodebuild"
      (with-current-buffer
          (get-buffer-create "*xcodebuild*")
        (let ((inhibit-read-only t))
          (erase-buffer))
        (current-buffer))
      "/usr/bin/xcodebuild"
      "-scheme" "PlainOrg" "-target" "PlainOrgTests" "-destination" "name=iPhone 13" "-quiet" "test")
     (lambda (p e)
       (with-current-buffer (get-buffer "*xcodebuild*")
         (let ((inhibit-read-only t))
           (insert (format "xcodebuild exit code: %d\n\n" (process-exit-status p)))))
       (when (not (eq 0 (process-exit-status p)))
         (set-process-sentinel
          (start-process
           "xcodebuild-to-json"
           "*xcodebuild*"
           "/opt/homebrew/bin/xcodebuild-to-json"
           "--derived-data-folder" (format "/Users/%s/Library/Developer/Xcode/DerivedData/"
                                           (user-login-name)) "--output" json-tmp-file)
          (lambda (p e)
            (with-current-buffer (get-buffer "*xcodebuild*")
              (let ((inhibit-read-only t))
                (insert (format "xcodebuild-to-json exit code: %d\n\n" (process-exit-status p)))))
            (when (= 0 (process-exit-status p))
              (with-current-buffer (get-buffer "*xcodebuild*")
                (let ((inhibit-read-only t))
                  (insert "Screenshot comparison started\n\n")))
              (plainorg--snapshot-process-json (get-buffer "*xcodebuild*") json-tmp-file)
              (with-current-buffer (get-buffer "*xcodebuild*")
                (let ((inhibit-read-only t))
                  (insert "\nScreenshot comparison finished\n"))
                (read-only-mode +1))))))))
    (switch-to-buffer-other-window "*xcodebuild*")))

(defun plainorg--snapshot-process-json (result-buffer json)
  "Find all failed snapshot tests in JSON and offer to override
 screenshots, comparing them side to side."
  (let ((hashtable (with-current-buffer (get-buffer-create "*build json*")
                     (erase-buffer)
                     (insert-file-contents json)
                     (json-parse-buffer))))
    (mapc
     (lambda (item)
       (when (equal (gethash "id" item)
                    "SnapshotTests")
         (mapc
          (lambda (testCase)
            (when (and (gethash "failureMessage" testCase)
                       (string-match-p "Snapshot does not match reference"
                                       (gethash "failureMessage" testCase)))
              (let* ((paths (plainorg--snapshot-screenshot-paths
                             (gethash "failureMessage" testCase)))
                     (override-result (plainorg--snapshot-override-image
                                       "Expected screenshot"
                                       (nth 0 paths) ;; old
                                       "Actual screenshot"
                                       (nth 1 paths) ;; new
                                       (nth 0 paths))))
                (when override-result
                  (with-current-buffer result-buffer
                    (let ((inhibit-read-only t))
                      (insert override-result)
                      (insert "\n")))))))
          (gethash "testCases" item))))
     (gethash "classes" (gethash "details" hashtable)))))

(defun plainorg--snapshot-screenshot-paths (failure-message)
  "Extract a paths list from FAILURE-MESSAGE of the form:

failed - Snapshot does not match reference.

@−
\"/path/to/expected/screenshot.1.png\"
@+
\"/path/to/actual/screenshot.1.png\"

Newly-taken snapshot does not match reference.
"
  (mapcar
   (lambda (line)
     (string-remove-suffix "\""
                           (string-remove-prefix "\"" line)))
   (seq-filter
    (lambda (line)
      (string-prefix-p "\"" line))
    (split-string failure-message "\n"))))

(defun plainorg--snapshot-override-image (old-buffer old new-buffer new destination)
  (let ((window-configuration (current-window-configuration))
        (action)
        (result))
    (unwind-protect
        (progn
          (delete-other-windows)
          (split-window-horizontally)
          (switch-to-buffer (with-current-buffer (get-buffer-create old-buffer)
                              (let ((inhibit-read-only t))
                                (erase-buffer))
                              (insert-file-contents old)
                              (image-mode)
                              (current-buffer)))
          (switch-to-buffer-other-window (with-current-buffer (get-buffer-create new-buffer)
                                           (let ((inhibit-read-only t))
                                             (erase-buffer))
                                           (insert-file-contents new)
                                           (image-mode)
                                           (current-buffer)))
          (while (null result)
            (setq action (read-char-choice (format "Override %s? (y)es (n)o (d)iff in browser? "
                                                   (file-name-base old))
                                           '(?y ?n ?d ?q)))
            (cond ((eq action ?n)
                   (setq result
                         (format "Keeping old %s" (file-name-base old))))
                  ((eq action ?y)
                   (copy-file new old t)
                   (setq result
                         (format "Overriding old %s" (file-name-base old))))
                  ((eq action ?d)
                   (shell-command (format "open -a Firefox %s --args --new-tab" old))
                   (shell-command (format "open -a Firefox %s --args --new-tab" new)))
                  ((eq action ?q)
                   (set-window-configuration window-configuration)
                   (setq result (format "Quit %s" (file-name-base old)))))))
      (set-window-configuration window-configuration)
      (kill-buffer old-buffer)
      (kill-buffer new-buffer))
    result))
```

# \[2021-11-10 Wed\] Plain Org has joined the chat (iOS)
---
id: plain-org-has-joined-the-chat
---

The App Store is a crowded space when it come to markdown apps. A quick search yields a wonderful wealth of choice. Kinda overwhelming, but a great problem to have nonetheless.

For those of us with org as our markup of choice, the App Store is far less crowded. I wish we could fill more than a screen's worth of search results, so you know… I could show you another pretty gif scrolling through org results. For now, we'll settle on a single frame showcasing our 4 org options.

![](https://xenodium.github.io/images/plain-org-has-joined-the-chat/store-side-comparison-mid.gif)

[Beorg](https://beorg.app/), [MobileOrg](http://mobileorg.github.io/), [Flat Habits](https://flathabits.com/), and [Orgro](https://orgro.org/) are all great options. Each with strengths of their own. [Organice](https://organice.200ok.ch/), while not on the App Store, is another option for those looking for a web alternative. Of these, I had already authored one of them. More on that in a sec… You see, about a year ago I wanted to play with Swift, SPM, and lsp itself. Also, having Swift code completion in Emacs via [lsp-sourcekit](https://github.com/emacs-lsp/lsp-sourcekit) sounded like a fun thing to try out, so I started using it while writing a Swift org parser.

![](https://xenodium.github.io/images/plain-org-has-joined-the-chat/magit.png)

While working on the parser, I happened to be reading [Atomic Habits](https://jamesclear.com/atomic-habits) (awesome book btw)… It was also a great time to play around with SwiftUI, which by the way, is pretty awesome too. With Atomic Habits fresh in mind, org parser in one hand, and SwiftUI in the other, I built [Flat Habits](https://flathabits.com): a lightweight habit tracker powered by org.

![](https://xenodium.github.io/images/frictionless-org-habits-on-ios/flat_habits.gif)

I love being able to save habit data to plain text and easily track on my iPhone (via Flat Habits) or laptop (via Emacs). I wanted to [extend similar convenience to org tasks](org-habits-on-ios-check-tasks-youre-next/), so I built [Plain Org](https://plainorg.com).

My previous [post](org-habits-on-ios-check-tasks-youre-next/) mentioned *quickly adding new tasks and searching existing ones* as Plain Org's driving goals. Of course, neither of those are as useful without automatic cloud syncing, so pluging into [iOS's third party cloud support](https://support.apple.com/en-gb/HT206481#thirdparty) was a must-have.

With these baseline features in place, I [started an alpha/beta group](https://www.reddit.com/r/orgmode/comments/p5bonn/ios_plain_org_alpha_builds_now_on_testflight_dm/) via [TestFlight](https://testflight.apple.com/). Early Plain Org adopters have been wonderfully supportive, given lots of great feedback, and helped shape the initial feature set you see below.

*There's plenty more that can be supported, but hey let's get v1 out the door. Gotta start somewhere.*

## Plain Org v1 features

-   View and edit your org mode tasks while on the go.
-   Beautifully rendered org markup.
-   Sync your org files using your favorite cloud provider.
-   Create new files.
-   Outline-style editing with toolbar
    -   Keywords
    -   Indent
    -   Priority
    -   Tags
    -   Formatting: bold, italic, underline, strikethrough, verbatim, and code.
-   Add links from Safari via share extension.
-   Add new tasks via Spotlight.
-   Reorder headings via drag/drop.
-   Checkboxes
    -   Interactive toggling.
    -   Quickly reset multiple checkboxes.
-   Follow local links.
-   Show inline images.
-   File-local keywords and visibility.
-   Filter open/closed tasks.
-   Show/hide stars.
-   Edit raw text.
-   Light/dark mode.

## Plain Org joins the chat

Today Plain Org joins the likes of [Beorg](https://beorg.app/), [MobileOrg](http://mobileorg.github.io/), [Flat Habits](https://flathabits.com/), and [Orgro](https://orgro.org/) on the App Store.

![](https://xenodium.github.io/images/plain-org-has-joined-the-chat/intro.png)

<br/>
<center>
  <a href="https://apps.apple.com/app/id1578965002">
    <img src="https://xenodium.github.io/images/flat-habits-for-ios/download-on-app-store.png" alt="download-on-app-store.png" width="180px">
  </a>
</center>

<center>
  This post was written in   <a href="https://orgmode.org">org mode</a>.
</center>

# \[2021-09-19 Sun\] Plain Org for iOS (a month later)
---
id: plain-org-for-ios-a-month-later
---

A month ago, I posted about my desire to [bring org tasks/TODOs to iOS](org-habits-on-ios-check-tasks-youre-next/) and make them quickly available from my iPhone.

Since then, I've received some great feedback, which I've been slowly chipping away at. My intent isn't so much to move my org workflow over to iOS, but to supplement Emacs while away from my laptop.

As of now, this is what the inline edit experience looks like:

![](https://xenodium.github.io/images/plain-org-for-ios-a-month-later/inline_keyword_toolbar.gif)

If, like me, you prefer dark mode. The app's got ya covered:

![](https://xenodium.github.io/images/plain-org-for-ios-a-month-later/dark.png)

*Plain Org* is not yet available on the App Store, but you can get a TestFlight invite if you send me an email address. Ping me on [reddit](https://www.reddit.com/user/xenodium), [twitter](https://twitter.com/xenodium), or email me at "plainorg" + "@" + "xenodium.com".

You can also check out progress over at the [r/plainorg](https://www.reddit.com/r/plainorg/) subreddit.

# \[2021-08-19 Thu\] Org habits on iOS? Check! Tasks, you're next
---
id: org-habits-on-ios-check-tasks-youre-next
---

I'm an [org mode](https://orgmode.org) fan. This blog is powered by org. It's more of an accidental blog that started as a [single org file](https://github.com/xenodium/xenodium.github.io/blob/master/index.org) keeping notes. I use [org babel](https://orgmode.org/worg/org-contrib/babel/intro.html) too. Oh and [org habits](https://orgmode.org/manual/Tracking-your-habits.html). My never-ending list of TODOs is also powered by org. I manage all of this from Emacs and peek at TODOs using [org agenda](https://orgmode.org/manual/Agenda-Views.html). This all works really well while I'm sitting in front of my laptop running Emacs.

But then I'm away from my laptop… and I need to quickly record habits on the go. I need it to be low-friction. Ssh'ing to an Emacs instance from a smartphone isn't an option. I'm an iPhone user, so whatever the solution, it should play nice with Emacs and org mode. I built [Flat Habits](https://flathabits.com) for habit tracking and I'm fairly happy with the result. As of today, my longest-tracked habit is on a 452-day streak.

![](https://xenodium.github.io/images/frictionless-org-habits-on-ios/flat_habits.gif)

Moving on to org tasks/TODOs… I want something fairly frictionless while on the go. With *Flat Habits* as a stepping stone, I can now reuse some parts to build [Plain Org](https://reddit.com/r/plainorg). This new app should give me quick access to my tasks. The two driving goals are: quickly add new tasks and search existing ones while away from my laptop. Ok, maybe basic editing helps too. Oh and it should sync over cloud, of course.

![](https://xenodium.github.io/images/org-habits-on-ios-check-tasks-youre-next/plainorgdemo.gif)

I now have an early implementation of sorts, [available on TestFlight](https://www.reddit.com/r/plainorg/comments/p5bnji/ios_more_improvements_alpha_builds_now_on/). If you'd like to give it a try, *send me an email address* to receive the the invite. Ping me on [reddit](https://reddit.com/u/xenodium), [twitter](https://twitter.com/xenodium), or email me at "plainorg" + "@" + "xenodium.com".

# \[2021-07-11 Sun\] Flat Habits 1.1 released
---
id: flat-habits-11-released
---

[Flat Habits](https://flathabits.com/) 1.1 is now available on the [App Store](https://apps.apple.com/app/id1558358855). Flat Habits is a habit tracker that’s mindful of your time, data, and privacy. It's powered by [org](https://orgmode.org) plain text markup, enabling you to use your [favorite editor](frictionless-org-habits-on-ios/) (Emacs, Vim, VSCode, etc.) to poke at your habit data.

## What's new?

This release implements a few of features requested by users.

## Multiday weekly habits

This is the chunkiest addition and most requested feature. You can now select multiple days when scheduling weekly habits.

![](https://xenodium.github.io/images/flat-habits-11-released/multi_day_creation.gif)

![](https://xenodium.github.io/images/flat-habits-11-released/multi_day_calendar.png)

## Historical management

Sometimes you forget to mark a habit done or make a mistake toggling one. Either way, you can now toggle any habit day from the calendar/streak view.

### Long tap

Long tap shows you the editing option available for that day.

![](https://xenodium.github.io/images/flat-habits-11-released/long_tap.gif)

### Short tap

Short tap typically toggles between "Done" and "Not done".

![](https://xenodium.github.io/images/flat-habits-11-released/short_tap.gif)

## Where's today?

A few folks rightfully asked for today's date to be highlighted in the calendar view, and so we now have a red circle.

![](https://xenodium.github.io/images/flat-habits-11-released/today.png)

## Improved error messages

Hopefully you don't run into issues, but if you do, I hope the app helps ya sort them out.

## Bugfixes

-   Tapping on blur now dismisses habit edit dialog.
-   Future habits now longer editable.
-   Skipped habits no longer have a default tap action.
-   Undoing from streak/calendar view now refreshes correctly.
-   Undoing habit addition on iPad removes streak/calendar view.

# \[2021-07-11 Sun\] macOS: Show in Finder / Show in Emacs
---
id: show-in-finder--show-in-emacs
---

From Christian Tietze's [Open macOS Finder Window in Emacs Dired](https://christiantietze.de/posts/2021/07/open-finder-window-in-dired/), I learned about [reveal-in-osx-finder](https://github.com/kaz-yos/reveal-in-osx-finder). This is handy for the few times I want to transition from Emacs to Finder for file management. I say few times since Emacs's directory editor, [dired](https://www.gnu.org/software/emacs/manual/html_node/emacs/Dired.html), is just awesome. I've written about dired customizations [here](showhide-emacs-dired-details-in-style/) and [here](showhide-emacs-dired-details-in-style/), but since dired is *just another buffer,* you can apply your Emacs magic like multiple cursors to [batch rename files in an editable dired buffer](batch-renaming-with-counsel-find-dired-and-wdired/).

To transition from macOS Finder to Emacs, Christian offers an Emacs interactive command that fetches Finder's location and opens a dired buffer via AppleScript. On a similar note, I learned from redditor [u/pndc](https://www.reddit.com/user/pndc/) that [Finder's proxy icons can be dragged over to Emacs](https://www.reddit.com/r/emacs/comments/ohgz0s/open_macos_finder_windows_path_in_dired/h4p8a8f?utm_source=share&utm_medium=web2x&context=3), which handily drops ya into a dired buffer.

With these two solutions in mind, I looked into a third one to offer a context menu option in Finder to show the file in Emacs. This turned out to be fairly easy using Automator, which I've rarely used.

![](https://xenodium.github.io/images/show-in-finder--show-in-emacs/show_in_emacs.gif)

I created a flow that runs a shell script to "Show in Emacs", revealing the selected file or folder in an dired buffer. This is similar to Christian's solution, but invoked from Finder itself. The flow also uses *dired-goto-file* which moves the point (cursor) to the file listed under dired.

![](https://xenodium.github.io/images/show-in-finder--show-in-emacs/show_in_emacs.png)

``` {.bash org-language="sh"}
current_dir=$(dirname "$1")
osascript -e 'tell application "Emacs" to activate'
path/to/emacsclient --eval "(progn (dired \"$current_dir\") (dired-goto-file \"$1\"))"
```

As a bonus, I added an "Open in Emacs" option, which does as it says on the tin. Rather than show the file listed in a dired buffer, it gets Emacs to open it in your favorite major mode. This option is not technically needed since Finder already provides an "Open With" context menu, but it does remove a few click here and there.

![](https://xenodium.github.io/images/show-in-finder--show-in-emacs/open_in_emacs.png)

``` {.bash org-language="sh"}
osascript -e 'tell application "Emacs" to activate'
/Users/alvaro/homebrew/bin/emacsclient --eval "(find-file \"$1\")"
```

On a side note, Emacs defaults to creating new frames when opening files via "Open With" menu (or "open -a Emacs foo.txt"). I prefer to use my existing Emacs frame, which can be accomplished by setting ns-pop-up-frames to nil.

``` {.commonlisp org-language="emacs-lisp" lexical="no"}
(setq ns-pop-up-frames nil)
```

# \[2021-06-27 Sun\] Emacs: smarter search and replace
---
id: emacs-smarter-search-and-replace
---

![](https://xenodium.github.io/images/emacs-smarter-search-and-replace/smarter_replace.gif)

Not long ago, I made a note to go back and read [Mac for Translators](https://mac4translators.blogspot.com)'s [Emacs regex with Emacs lisp](https://mac4translators.blogspot.com/2021/06/regex-with-elisp.html) post. The author highlights Emacs's ability to apply additional logic when replacing text during a search-and-replace session. It does so by leveraging elisp expressions.

Coincidentally, a redditor recently asked [What is the simplest way to apply a math formula to all numbers in a buffer/region?](https://www.reddit.com/r/emacs/comments/o878am/what_is_the_simplest_way_to_apply_a_math_formula/) Some of the answers also point to *search and replace* leveraging elisp expressions.

While I rarely need to apply additional logic when replacing matches, it's nice to know we have options available in our Emacs toolbox. This prompted me to check out [replace-regexp](https://github.com/emacs-mirror/emacs/blob/b8f9e58ef72402e69a1f0960816184d52e5d2d29/lisp/replace.el#L709)'s documentation (via M-x [describe-function](https://www.gnu.org/software/emacs/manual/html_node/emacs/Name-Help.html) or my favorite M-x [helpful-callable](https://github.com/Wilfred/helpful)). There's lots in there. Go check its docs out. You may be pleasantly surprised by all the features packed under this humble function.

For instance, \\& expands to the current match. Similarly, \\#& expands to the current match, fed through [string-to-number](https://www.gnu.org/software/emacs/manual/html_node/elisp/String-Conversion.html). But what if you'd like to feed the match to another function? You can use \\, to signal evaluation of an elisp expression. In other words, you could multiply by 3 using \\,(\* 3 \\#&) or inserting whether a number is odd or even with something like \\,(if (oddp \\#&) "(odd)" "(even)").

Take the following text:

``` example
1
2
3
4
5
6
```

We can label each value "(odd)" or "(even)" as well as multiply by 3, by invoking *replace-regexp* as follows:

> M-x replace-regexp

\[PCRE\] Replace regex:

> \[-0-9.\]+

Replace regex \[-0-9.\]+:

> \\& \\,(if (oddp \\#&) "(odd)" "(even)") x 3 = \\,(\* 3 \\#&)

``` example
1 (odd) x 3 = 3
2 (even) x 3 = 6
3 (odd) x 3 = 9
4 (even) x 3 = 12
5 (odd) x 3 = 15
6 (even) x 3 = 18
```

It's worth noting that *replace-regexp*'s cousin [query-replace-regexp](https://www.gnu.org/software/emacs/manual/html_node/emacs/Query-Replace.html) also handles all this wonderful magic.

Happy searching and replacing!

# \[2021-06-20 Sun\] Previewing SwiftUI layouts in Emacs (revisited)
---
id: previewing-swiftui-layouts-in-emacs-revisited
---

Back in May 2020, I shared a snippet to extend [ob-swift](https://github.com/zweifisch/ob-swift) to [preview SwiftUI layouts using Emacs org blocks](swiftui-layout-previews-using-emacs-org-blocks/).

![](https://xenodium.github.io/images/swiftui-layout-previews-using-emacs-org-blocks/ob-swiftui.gif)

When I say extend, I didn't quite modify ob-swift itself, but rather [advised](https://www.gnu.org/software/emacs/manual/html_node/elisp/Advising-Functions.html) [org-babel-execute:swift](https://github.com/zweifisch/ob-swift/blob/ed478ddbbe41ce5373efde06b4dd0c3663c9055f/ob-swift.el#L37) to modify its behavior at runtime.

Fast-forward to June 2021 and Scott Nicholes [reminded me there's still interest](https://github.com/zweifisch/ob-swift/issues/4#issuecomment-858196354) in org babel SwiftUI support. ob-swift [seems a little inactive](https://github.com/zweifisch/ob-swift/commits/master), but no worries there. The package offers great general-purpose Swift support. On the other hand, SwiftUI previews can likely live as a single-purpose package all on its own… and so I set off to bundle the rendering functionality into a new [ob-swiftui](https://github.com/xenodium/ob-swiftui) package.

Luckily, org babel's documentation has a straightforward section to help you [develop support for new babel languages](https://orgmode.org/worg/org-contrib/babel/languages/index.html). They simplified things by offering [template.el](https://code.orgmode.org/bzg/worg/raw/master/org-contrib/babel/ob-template.el), which serves as the foundation for your language implementation. For the most part, it's a matter of searching, replacing strings, and removing the bits you don't need.

The elisp core of ob-swiftui is fairly simple. It expands the org block body, inserts the expanded body into a temporary buffer, and finally feeds the code to the Swift toolchain for execution.

``` {.commonlisp org-language="emacs-lisp"}
(defun org-babel-execute:swiftui (body params)
  "Execute a block of SwiftUI code in BODY with org-babel header PARAMS.
This function is called by `org-babel-execute-src-block'"
  (message "executing SwiftUI source code block")
  (with-temp-buffer
    (insert (ob-swiftui--expand-body body params))
    (shell-command-on-region
     (point-min)
     (point-max)
     "swift -" nil 't)
    (buffer-string)))
```

The expansion in *ob-swiftui–expand-body* is a little more interesting. It decorates the block's body, so it can become a fully functional and stand-alone SwiftUI macOS app. If you're familiar with Swift and SwiftUI, the code should be fairly self-explanatory.

From an org babel's perspective, the expanded code is executed whenever we press *C-c C-c* (or M-x [org-ctrl-c-ctrl-c](https://orgmode.org/manual/The-Very-Busy-C_002dc-C_002dc-Key.html#The-Very-Busy-C_002dc-C_002dc-Key)) within the block itself.

It's worthing mentioning that our new implementation supports two babel [header arguments](https://www.orgmode.org/worg/org-contrib/babel/header-args.html) (results and view). Both extracted from params using [map-elt](https://github.com/emacs-mirror/emacs/blob/3af9e84ff59811734dcbb5d55e04e1fdb7051e77/lisp/emacs-lisp/map.el#L106) and replaced in the expanded Swift code to enable/disable snapshotting or explicitly setting a SwiftUI root view.

``` {.commonlisp org-language="emacs-lisp"}
(defun ob-swiftui--expand-body (body params)
  "Expand BODY according to PARAMS and PROCESSED-PARAMS, return the expanded body."
  (let ((write-to-file (member "file" (map-elt params :result-params)))
        (root-view (when (and (map-elt params :view)
                              (not (string-equal (map-elt params :view) "none")))
                     (map-elt params :view))))
    (format
     "
// Swift snippet heavily based on Chris Eidhof's code at:
// https://gist.github.com/chriseidhof/26768f0b63fa3cdf8b46821e099df5ff

import Cocoa
import SwiftUI
import Foundation

let screenshotURL = URL(fileURLWithPath: NSTemporaryDirectory(), isDirectory: true).appendingPathComponent(ProcessInfo.processInfo.globallyUniqueString + \".png\")
let preview = %s

// Body to run.
%s

extension NSApplication {
  public func run<V: View>(_ view: V) {
    let appDelegate = AppDelegate(view)
    NSApp.setActivationPolicy(.regular)
    mainMenu = customMenu
    delegate = appDelegate
    run()
  }

  public func run<V: View>(@ViewBuilder view: () -> V) {
    let appDelegate = AppDelegate(view())
    NSApp.setActivationPolicy(.regular)
    mainMenu = customMenu
    delegate = appDelegate
    run()
  }
}

extension NSApplication {
  var customMenu: NSMenu {
    let appMenu = NSMenuItem()
    appMenu.submenu = NSMenu()

    let quitItem = NSMenuItem(
      title: \"Quit \(ProcessInfo.processInfo.processName)\",
      action: #selector(NSApplication.terminate(_:)), keyEquivalent: \"q\")
    quitItem.keyEquivalentModifierMask = []
    appMenu.submenu?.addItem(quitItem)

    let mainMenu = NSMenu(title: \"Main Menu\")
    mainMenu.addItem(appMenu)
    return mainMenu
  }
}

class AppDelegate<V: View>: NSObject, NSApplicationDelegate, NSWindowDelegate {
  var window = NSWindow(
    contentRect: NSRect(x: 0, y: 0, width: 414 * 0.2, height: 896 * 0.2),
    styleMask: [.titled, .closable, .miniaturizable, .resizable, .fullSizeContentView],
    backing: .buffered, defer: false)

  var contentView: V

  init(_ contentView: V) {
    self.contentView = contentView
  }

  func applicationDidFinishLaunching(_ notification: Notification) {
    window.delegate = self
    window.center()
    window.contentView = NSHostingView(rootView: contentView)
    window.makeKeyAndOrderFront(nil)

    if preview {
      screenshot(view: window.contentView!, saveTo: screenshotURL)
      // Write path (without newline) so org babel can parse it.
      print(screenshotURL.path, terminator: \"\")
      NSApplication.shared.terminate(self)
      return
    }

    window.title = \"press q to exit\"
    window.setFrameAutosaveName(\"Main Window\")
    NSApp.activate(ignoringOtherApps: true)
  }
}

func screenshot(view: NSView, saveTo fileURL: URL) {
  let rep = view.bitmapImageRepForCachingDisplay(in: view.bounds)!
  view.cacheDisplay(in: view.bounds, to: rep)
  let pngData = rep.representation(using: .png, properties: [:])
  try! pngData?.write(to: fileURL)
}

// Additional view definitions.
%s
"
     (if write-to-file
         "true"
       "false")
     (if root-view
         (format "NSApplication.shared.run(%s())" root-view)
       (format "NSApplication.shared.run {%s}" body))
     (if root-view
         body
       ""))))
```

For rendering inline SwiftUI previews in Emacs, we rely on NSView's [bitmapImageRepForCachingDisplay](https://developer.apple.com/documentation/appkit/nsview/1483440-bitmapimagerepforcachingdisplay) to capture an image snapshot. We write its output to a temporary file and piggyback-ride off org babel's *:results file* header argument to automatically render the image inline.

Here's ob-swiftui inline rendering in action:

![](https://xenodium.github.io/images/previewing-swiftui-layouts-in-emacs-revisited/obswiftui50.gif)

When rendering SwiftUI externally, we're effectively running and interacting with the generated macOS app itself.

![](https://xenodium.github.io/images/previewing-swiftui-layouts-in-emacs-revisited/ob-swiftui-window.gif)

The two snippets give a general sense of what's needed to enable org babel to handle SwiftUI source blocks. Having said that, the full source and setup instructions are both available on [github](https://github.com/xenodium/ob-swiftui).

[ob-swiftui](https://github.com/xenodium/ob-swiftui) is now available on [melpa](https://melpa.org/#/ob-swiftui).

# \[2021-06-19 Sat\] Blurring the lines between shell and editor
---
id: yasnippet-in-emacs-eshell
---

![](https://xenodium.github.io/images/yasnippet-in-emacs-eshell/yas-eshell.gif)

I recently [tweeted](https://twitter.com/xenodium/status/1404746233860837378) that Vivek Haldar's [10-year old post](https://blog.vivekhaldar.com/post/3996068979/the-levels-of-emacs-proficiency) rings true today just the same. He writes about [the levels of Emacs proficiency](https://blog.vivekhaldar.com/post/3996068979/the-levels-of-emacs-proficiency). All 6 levels are insightful in their own right, but for the sake of this post, let's quote an extract from level *4. Shell inside Emacs*:

> "And then, you learned about it: M-x shell.
>
> It was all just text. Why did you need another application for it? Why should only the shell prompt be editable? Why can’t I move my cursor up a few lines to where the last command spewed out its results? All these problems simply disappear when your shell (or shells) simply becomes another Emacs buffer, upon which all of the text manipulation power of Emacs can be brought to bear."

In other words, we aren't merely removing shell restrictions, but opening up possibilities…

Take Emacs eshell looping, for example. I use it so infrequently, I could never remember eshell's syntax. I would refer back to EmacsWiki's [Eshell For Loop](https://www.emacswiki.org/emacs/EshellForLoop) or Mastering Emacs's [Mastering Eshell](https://masteringemacs.org/article/complete-guide-mastering-eshell) comments for a reminder. It finally dawned on me. I don't need to internalize this eshell syntax. I have [YASnippet](https://github.com/joaotavora/YASnippet) available like any other buffer. I could just type "for" and let YASnippet do the rest for me.

![](https://xenodium.github.io/images/yasnippet-in-emacs-eshell/yas-for.gif)

All I need is a tiny YASnippet:

``` YASnippet
#name : Eshell for loop
#key : for
# --
for f in ${1:*} { ${2:echo} "$f"; $3} $0
```

Want a gentle and succinct YASnippet intro? Check out Jake's [YASnippet introduction video](https://www.reddit.com/r/emacs/comments/o282fq/YASnippet_snippetstemplating_introductiontutorial/).

If you're a [shell-mode](https://www.gnu.org/software/emacs/manual/html_node/emacs/Shell-Mode.html) user, YASnippet would have you covered in your favorite shell. The expansion snippet can be modified to a Bash equivalent, giving us the same benefit. We type "for" and let YASnippet expand and hop over arguments. Here's a Bash equivalent emphasizing the hopping a little more:

![](https://xenodium.github.io/images/yasnippet-in-emacs-eshell/yasbash.gif)

``` YASnippet
#name : bash for loop
#key : for
# --
for f in ${1:*}; do ${2:echo} $f; done $0
```

ps. Looks like [vterm](https://github.com/akermu/emacs-libvterm), [term](https://www.gnu.org/software/emacs/manual/html_node/emacs/Term-Mode.html), or [ansi-term](https://www.emacswiki.org/emacs/AnsiTerm) work too. See Shane Mulligan's post: [Use YASnippets in term and vterm in emacs](https://mullikine.github.io/posts/use-yasnippets-in-term/).

# \[2021-06-16 Wed\] xcodebuild's SPM support (Xcode 11)
---
id: xcodebuilds-spm-support-xcode-11
---

Had been a while since I looked into generating Xcode projects from a Swift package. On my latest use of the *generate-xcodeproj* subcommand, I was greeted by a nice ~~warning~~ surprise…

``` {.bash results="output"}
swift package generate-xcodeproj
```

Xcode can handle Swift packages directly. Similarly, xcodebuild can handle them too. This isn't new. It's likely been available since Xcode 11. I just totally missed it.

*Note: I've yet to dig into Xcode 13 beta, as Swift packages may already support the build/test features I was after in xcodebuild (like [build/test on Catalyst](https://developer.apple.com/documentation/swift_packages/supportedplatform/3788290-maccatalyst)).*

In any case, on to xcodebuild… but let's first create a brand new Swift package.

## Creating a Swift package library

``` {.bash results="output"}
mkdir FooBar && cd FooBar
swift package init --type library
```

## List package schemes

We can use xcodebuild to list the available schemes.

``` {.bash results="output"}
xcodebuild -list
```

## Show supported platform, architecture, etc

Similarly, we can list destinations supported for the schemes.

``` {.bash results="output"}
xcodebuild -showdestinations -scheme FooBar
```

## macOS builds

Let's build for macOS, though let's first import UIKit into FooBar.swift. This ensures we get an expected failure when building for macOS.

``` swift
import UIKit

struct FooBar {
  var text = "Hello, World!"
}
```

Now let's attempt to build it…

``` {.bash results="verbatim"}
xcodebuild build -quiet -scheme FooBar -destination 'platform=macOS'
```

The failure expected as UIKit isn't available on your typical macOS builds.

## macOS Catalyst builds

We do, however, have Catalyst available, so we can use its variant to build for macOS with UIKit support, and.. voilà!

``` {.bash results="verbatim"}
xcodebuild build -quiet -scheme FooBar -destination 'platform=macOS,variant=Mac Catalyst' && echo \\o/
```

# \[2021-06-06 Sun\] Emacs org block completion on melpa
---
id: emacs-org-block-completion-on-melpa
---

When enabled, the character "\<" triggers company completion of org blocks.

![](https://xenodium.github.io/images/emacs-org-block-completion-on-melpa/hello-company-org-block.gif)

I get the occasional ping to package the [code from this post](emacs-org-block-company-completion) and publish it [on melpa](https://melpa.org/#/company-org-block). Finally gave it a go. Moved the code [here](https://github.com/xenodium/company-org-block).

This was my first time publishing on melpa. The process was very [smooth](https://github.com/melpa/melpa/pull/7593). Big thanks to melpa volunteers!

# \[2021-06-01 Tue\] Emacs DWIM: do what ✨I✨ mean
---
id: emacs-dwim-do-what-i-mean
---

Update: There's a DWIM [follow-up for searching](emacs-dwim-swiper-vs-isearch-vs-phi-search/).

![](https://xenodium.github.io/images/emacs-dwim-do-what-i-mean/do-what-i-mean.gif)

I was a rather puzzled the first time I spotted DWIM in an Emacs interactive command name. Don't think I remember what the command itself was, but what's important here is that [DWIM](https://en.wikipedia.org/wiki/DWIM) stands for [do what I mean](https://en.wikipedia.org/wiki/DWIM).

I love DWIM interactive commands. They enable commands to be smarter and thus pack more functionality, without incurring the typical cognitive overhead associated with remembering multiple commands (or key bindings). The Emacs manual does a great job describing DWIM for the [comment-dwim](https://www.gnu.org/software/emacs/manual/html_node/emacs/Comment-Commands.html) command:

    The word “dwim” is an acronym for “Do What I Mean”; it indicates that this command can be used for many different jobs relating to comments, depending on the situation where you use it.

It's really great to find built-in DWIM-powered Emacs commands. Third-party packages often include them too. I typically gravitate towards these commands and bind them in my Emacs config. Examples being upcase-dwim, downcase-dwim, or mc/mark-all-dwim.

But what if the DWIM command doesn't exist or the author has written a command for what *they* mean? This is your editor, so you can make it do what *you* mean.

Take for example, [org-insert-link](https://orgmode.org/manual/Handling-Links.html), bound to *C-c C-l* by default. It's handy for inserting [org mode links](https://orgmode.org/guide/Hyperlinks.html). I used it so frequently that I quickly internalized its key binding. Having said that, I often found myself doing some lightweight preprocessing prior to invoking *org-insert-link*. What if I can *make org-insert-link do what I mean*?

## What do I mean?

### Use URLs when in clipboard

If the URL is already in the clipboard, don't ask me for it. Just use it.

### Use the region too

If I have a region selected and there's a URL in the clipboard, just sort it out without user interaction.

![](https://xenodium.github.io/images/emacs-dwim-do-what-i-mean/link-this-text.gif)

### Automatically fetch titles

Automatically fetch URL titles from their HTML tag, but ask me for tweaks before insertion.

![](https://xenodium.github.io/images/emacs-dwim-do-what-i-mean/do-what-i-mean.gif)

### Fallback to org-insert-link

If my DWIM rules don't apply, fall back to using good ol' [org-insert-link](https://orgmode.org/manual/Handling-Links.html).

My most common use case here is when editing an existing link where I don't want neither its title nor URL automatically handled.

![](https://xenodium.github.io/images/emacs-dwim-do-what-i-mean/edit-link.gif)

## The code

This is your own DWIM command that does what *you* mean. Strive to write a clean implementation, but hey you can be forgiven for not handling all the cases that other folks *may* want or inlining more code than usual. The goal is to bend your editor a little, not write an Emacs package.

``` {.commonlisp org-language="emacs-lisp"}
(defun ar/org-insert-link-dwim ()
  "Like `org-insert-link' but with personal dwim preferences."
  (interactive)
  (let* ((point-in-link (org-in-regexp org-link-any-re 1))
         (clipboard-url (when (string-match-p "^http" (current-kill 0))
                          (current-kill 0)))
         (region-content (when (region-active-p)
                           (buffer-substring-no-properties (region-beginning)
                                                           (region-end)))))
    (cond ((and region-content clipboard-url (not point-in-link))
           (delete-region (region-beginning) (region-end))
           (insert (org-make-link-string clipboard-url region-content)))
          ((and clipboard-url (not point-in-link))
           (insert (org-make-link-string
                    clipboard-url
                    (read-string "title: "
                                 (with-current-buffer (url-retrieve-synchronously clipboard-url)
                                   (dom-text (car
                                              (dom-by-tag (libxml-parse-html-region
                                                           (point-min)
                                                           (point-max))
                                                          'title))))))))
          (t
           (call-interactively 'org-insert-link)))))
```

## Org web tools package

I showed how to write your own DWIM command, so you can make Emacs do what ✨you✨ mean. *ar/org-insert-link-dwim* was built for my particular needs.

Having said all of this, alphapapa has built a great package with helpers for the org web/link space. It doesn't do what I mean (for now anyway), but it may work for you: [org-web-tools: View, capture, and archive Web pages in Org-mode](https://github.com/alphapapa/org-web-tools)[^2].

# \[2021-05-28 Fri\] Emacs link scraping (2021 edition)
---
id: emacs-link-scraping-2021-edition
---

![](https://xenodium.github.io/images/emacs-link-scraping-2021-edition/scrape.png)

A recent Hacker News post, [Ask HN: Favorite Blogs by Individuals](https://news.ycombinator.com/item?id=27302195), led me to dust off my oldie but trusty [command to extract comment links](https://github.com/xenodium/dotsies/blob/92ef8259f016cdd4f67caf0e520096f6da4f7a18/emacs/ar/ar-url.el#L42). I use it to dissect these wonderful references more effectively.

You see, I wrote this command [back in 2015](get-emacs-to-gather-links-in-posts/). We can likely revisit and improve. The [enlive](https://github.com/zweifisch/enlive) package continues to do a fine job [fetching](https://github.com/zweifisch/enlive/blob/604a8ca272b6889f114e2b5a13adb5b1dc4bae86/enlive.el#L39), parsing, and [querying](https://github.com/zweifisch/enlive/blob/604a8ca272b6889f114e2b5a13adb5b1dc4bae86/enlive.el#L142) HTML. Let's improve my code instead… we can shed a few redundant bits and maybe use [newer libraries and features](modern-elisp-libraries/).

Most importantly, let's improve the user experience by sanitizing and filtering URLs a little better.

We start by writing a function that looks for a URL in the clipboard and subsequently fetches, parses, and extracts all links found in the target page.

``` {.commonlisp org-language="emacs-lisp"}
(require 'enlive)
(require 'seq)

(defun ar/scrape-links-from-clipboard-url ()
  "Scrape links from clipboard URL and return as a list. Fails if no URL in clipboard."
  (unless (string-prefix-p "http" (current-kill 0))
    (user-error "no URL in clipboard"))
  (thread-last (enlive-query-all (enlive-fetch (current-kill 0)) [a])
    (mapcar (lambda (element)
              (string-remove-suffix "/" (enlive-attr element 'href))))
    (seq-filter (lambda (link)
                  (string-prefix-p "http" link)))
    (seq-uniq)
    (seq-sort (lambda (l1 l2)
                (string-lessp (replace-regexp-in-string "^http\\(s\\)*://" "" l1)
                              (replace-regexp-in-string "^http\\(s\\)*://" "" l2))))))
```

Let's chat *(current-kill 0)* for a sec. No improvement from my previous usage, but let's just say building interactive commands that work with your current clipboard (or [kill ring](https://www.gnu.org/software/emacs/manual/html_node/emacs/Kill-Ring.html) in Emacs terminology) is super handy (see [clone git repo from clipboard](emacs-clone-git-repo-from-clipboard/)).

Moving on to sanitizing and filtering URLs… Links often have trailing slashes. Let's flush them. [string-remove-suffix](https://github.com/emacs-mirror/emacs/blob/3af9e84ff59811734dcbb5d55e04e1fdb7051e77/lisp/emacs-lisp/subr-x.el#L261) to the rescue. This and other handy string-manipulating functions are built into Emacs since 24.4 as part of [subr-x.el](https://github.com/emacs-mirror/emacs/blob/master/lisp/emacs-lisp/subr-x.el).

Next, we can keep http(s) links and ditch everything else. The end-goal is to extract links posted by users, so these are typically fully qualified external URLs. [seq-filter](https://github.com/emacs-mirror/emacs/blob/3af9e84ff59811734dcbb5d55e04e1fdb7051e77/lisp/emacs-lisp/seq.el) steps up to the task, included in Emacs since 25.1 as part of the [seq.el family](https://github.com/emacs-mirror/emacs/blob/master/lisp/emacs-lisp/seq.el). We remove duplicate links using [seq-uniq](https://github.com/emacs-mirror/emacs/blob/3af9e84ff59811734dcbb5d55e04e1fdb7051e77/lisp/emacs-lisp/seq.el#L431) and sort them via [seq-sort](https://github.com/emacs-mirror/emacs/blob/3af9e84ff59811734dcbb5d55e04e1fdb7051e77/lisp/emacs-lisp/seq.el#L255). All part of the same package.

When sorting, we could straight up use *seq-sort* and *string-lessp* and nothing else, but it would separate http and https links. Let's not do that, so we drop *http(s)* prior to comparing strings in *seq-sort*'s predicate. [replace-regexp-in-string](https://github.com/emacs-mirror/emacs/blob/3af9e84ff59811734dcbb5d55e04e1fdb7051e77/lisp/subr.el#L4468) does the job here, but if you'd like to skip regular expressions, [string-remove-prefix](https://github.com/emacs-mirror/emacs/blob/3af9e84ff59811734dcbb5d55e04e1fdb7051e77/lisp/emacs-lisp/subr-x.el#L255) works just as well.

Yay, sorting no longer cares about http vs https:

    https://andymatuschak.org
    http://antirez.com
    https://apenwarr.ca/log
    ...

With all that in mind, let's flatten list processing using [thread-last](https://github.com/emacs-mirror/emacs/blob/3af9e84ff59811734dcbb5d55e04e1fdb7051e77/lisp/emacs-lisp/subr-x.el#L69). This isn't strictly necessary, but since this is the 2021 edition, we'll throw in this macro added to Emacs in 2016 as part of 25.1. Arthur Malabarba has a [great post on thread-last](https://endlessparentheses.com/new-in-emacs-25-1-more-flow-control-macros.html).

Now that we've built out *ar/scrape-links-from-clipboard-url* function, let's make its content consumable!

## The completing frameworks way

This is the 2021 edition, so power up your completion framework du jour and feed the output of *ar/scrape-links-from-clipboard-url* to our completion robots…

![](https://xenodium.github.io/images/emacs-link-scraping-2021-edition/scrape_complete.gif)

I'm heavily vested in [ivy](https://github.com/abo-abo/swiper), but since we're using the built-in [completing-read](https://www.gnu.org/software/emacs/manual/html_node/elisp/Completion.html) function, any completion framework like [vertico](https://github.com/minad/vertico), [selectrum](https://github.com/raxod502/selectrum/), [helm](https://github.com/emacs-helm/helm), or [ido](https://www.gnu.org/software/emacs/manual/html_node/ido/index.html) should kick right in to give you extra powers.

``` {.commonlisp org-language="emacs-lisp"}
(defun ar/view-completing-links-at-clipboard-url ()
  "Scrape links from clipboard URL and open all in external browser."
  (interactive)
  (browse-url (completing-read "links: "
                               (ar/scrape-links-from-clipboard-url))))
```

## The auto-open way (use with caution)

Sometimes you just want to open every link posted in the comments and use your browser to discard, closing tabs as needed. The recent HN news instance wasn't one of these cases, with a whopping 398 links returned by our *ar/scrape-links-from-clipboard-url*.

![](https://xenodium.github.io/images/emacs-link-scraping-2021-edition/scrape_browse.gif)

*Note: I capped the results to 5 in this gif/demo to prevent a Firefox tragedy (see [seq-take](https://github.com/emacs-mirror/emacs/blob/3af9e84ff59811734dcbb5d55e04e1fdb7051e77/lisp/emacs-lisp/seq.el#L231)).*

In a case like Hacker News's, we don't want to surprise-attack the user and bomb their browser by opening a gazillion tabs, so let's give a little heads-up using [y-or-n-p](https://github.com/emacs-mirror/emacs/blob/3af9e84ff59811734dcbb5d55e04e1fdb7051e77/lisp/subr.el#L2869).

``` {.commonlisp org-language="emacs-lisp"}
(defun ar/browse-links-at-clipboard-url ()
  (interactive)
  (let ((links (ar/scrape-links-from-clipboard-url)))
    (when (y-or-n-p (format "Open all %d links? " (length links)))
      (mapc (lambda (link)
              (browse-url link))
            links))))
```

## The org way

My [2015 solution](get-emacs-to-gather-links-in-posts/) leveraged an [org mode](https://orgmode.org/) buffer to dump the fetched links. The org way is still my favorite. You can use whatever existing Emacs super powers you already have on top of the org buffer, including searching and filtering fueled by your favourite completion framework. I'm a fan of [Oleh](https://oremacs.com/)'s [swiper](https://github.com/abo-abo/swiper).

![](https://xenodium.github.io/images/emacs-link-scraping-2021-edition/scrape_org.gif)

The 2021 implementation is mostly a tidy-up, removing some cruft, but also uses our new *ar/scrape-links-from-clipboard-url* function to filter and sort accordingly.

``` {.commonlisp org-language="emacs-lisp"}
(require 'org)

(defun ar/view-links-at-clipboard-url ()
  "Scrape links from clipboard URL and dump to an org buffer."
  (interactive)
  (with-current-buffer (get-buffer-create "*links*")
    (org-mode)
    (erase-buffer)
    (mapc (lambda (link)
            (insert (org-make-link-string link) "\n"))
          (ar/scrape-links-from-clipboard-url))
    (goto-char (point-min))
    (switch-to-buffer (current-buffer))))
```

## Emacs + community + packages + your own glue = awesome

To power our 2021 link scraper, we've used newer libraries included in more recent versions of Emacs, leveraged an older but solid HTML-parsing package, pulled in org mode (the epicenter of Emacs note-taking), dragged in our favorite completion framework, and tickled our handy browser all by smothering the lot with some elisp glue to make Emacs do exactly what we want. [Emacs does rock](http://emacsrocks.com/).

# \[2021-05-23 Sun\] OCR bookmarks
---
id: ocr-bookmarks
---

-   [schappim/macOCR: Get any text on your screen into your clipboard.](https://github.com/schappim/macOCR).

# \[2021-05-19 Wed\] gpg: decryption failed: No secret key (macOS)
---
id: gpg-decryption-failed-no-secret-key-macos
---

    gpg: decryption failed: No secret key

OMG! Where's my secret key gone!?

But but but, *gpg –list-secret-keys* says they're there. Puzzled…

Ray Oei's Stack Overflow [answer](https://stackoverflow.com/a/66234166) solved the mystery for me: pinentry never got invoked, so likely something's up with the agent… Killing (and thus restaring) the gpg-agent did the trick:

``` {.bash org-language="sh"}
gpgconf --kill gpg-agent
```

Thank you internet stranger. Balance restored.

# \[2021-05-17 Mon\] Emacs plus –with-native-comp
---
id: emacs-plus-with-native-comp
---

![](https://xenodium.github.io/images/emacs-plus-with-native-comp/brew-native-comp.png)

I'm a big fan of [Boris Buliga](https://d12frosted.io/)'s [Emacs Plus](https://github.com/d12frosted/homebrew-emacs-plus) [homebrew](https://brew.sh/) recipe for customizing and installing Emacs builds on macOS.

For a little while, I took a detour and built Emacs myself, so I could enable [Andrea Corallo](https://twitter.com/Koral_001)'s fantastic [native compilation](http://akrl.sdf.org/gccemacs.html). I documented the steps [here](trying-out-gccemacs-on-macos/). Though it was fairly straightforward, I did miss Emacs Plus's convenience.

I had been meaning to check back on Emacs Plus for native compilation support. Turns out, it was merged back in [Dec 2020](https://github.com/d12frosted/homebrew-emacs-plus/pull/188), and it works great!

Enabling native compilation is simple (just use *–with-native-comp*). As a bonus, you get all the Emacs Plus goodies. I'm loving *–with-elrumo2-icon*, enabling a spiffy icon to go with macOS Big Sur. *–with-no-frame-refocus* is also handy to [avoid refocusing other frames](no-emacs-frame-refocus-on-macos/) when another one is closed.

In any case, here's the minimum needed to install Emacs Plus with native compilation support enabled:

``` {.bash org-language="sh"}
brew tap d12frosted/emacs-plus
brew install emacs-plus@28 --with-native-comp
```

Sit tight. Homebrew will build and install some chunky dependencies (including gcc and libgccjit).

Note: Your init.el needs tweaking to take advantage of native compilation. See my [previous post](trying-out-gccemacs-on-macos/) for how I set mine, or go straight to [my config](https://github.com/xenodium/dotsies/blob/main/emacs/features/fe-package-extensions.el#L19).

# \[2021-05-02 Sun\] Cycling window layouts with hammerspoon
---
id: cycling-window-layouts-via-hammerspoon
---

Back in January, Patrik Collison [tweeted](https://twitter.com/patrickc/status/1351650517869465601) about [Rectangle](https://rectangleapp.com/)'s [Todo mode](https://github.com/rxhanson/Rectangle/wiki/Todo-Mode). Rectangle looks great. Although I've not yet adopted it, Todo mode really resonates with me. I've been achieving similar functionality with [hammerspoon](https://www.hammerspoon.org/).

![](https://xenodium.github.io/images/cycling-window-layouts-via-hammerspoon/cycle.gif)

Here's a quick and dirty function to cycle through my window layouts:

``` python
function reframeFocusedWindow()
   local win = hs.window.focusedWindow()
   local maximizedFrame = win:screen():frame()
   maximizedFrame.x = maximizedFrame.x + 15
   maximizedFrame.y = maximizedFrame.y + 15
   maximizedFrame.w = maximizedFrame.w - 30
   maximizedFrame.h = maximizedFrame.h - 30

   local leftFrame = win:screen():frame()
   leftFrame.x = leftFrame.x + 15
   leftFrame.y = leftFrame.y + 15
   leftFrame.w = leftFrame.w - 250
   leftFrame.h = leftFrame.h - 30

   local rightFrame = win:screen():frame()
   rightFrame.x = rightFrame.w - 250 + 15
   rightFrame.y = rightFrame.y + 15
   rightFrame.w = 250 - 15 - 15
   rightFrame.h = rightFrame.h - 30

   -- Make space on right
   if win:frame() == maximizedFrame then
     win:setFrame(leftFrame)
     return
   end

   -- Make space on left
   if win:frame() == leftFrame then
     win:setFrame(rightFrame)
     return
   end

   win:setFrame(maximizedFrame)
end
```

A here's my **⌥-F** binding to **reframeFocusedWindow**:

``` python
hs.hotkey.bind({"alt"}, "F", reframeFocusedWindow)
```

# \[2021-04-10 Sat\] Flat Habits meets org agenda
---
id: flat-habits-meets-org-agenda
---

UPDATE: Flat Habits now has its own page at [flathabits.com](https://flathabits.com/).

Flat Habits v1.0.2 is [out today](https://apps.apple.com/app/id1558358855), with habit-toggling now supported from the streak view.

Flat Habits runs on org, making it a great complement to Emacs and org agenda ø/

![](https://xenodium.github.io/images/flat-habits-meets-org-agenda/flat_agenda.gif)

<center>
  <a href="https://apps.apple.com/app/id1558358855">
    <img src="https://xenodium.github.io/images/flat-habits-for-ios/download-on-app-store.png" alt="today_no_filter.png" width="180px">
  </a>
</center>

# \[2021-03-23 Tue\] Flat Habits v1.0.1 (org import menu)
---
id: flat-habits-v101-org-import-menu
---

UPDATE: Flat Habits now has its own page at [flathabits.com](https://flathabits.com/).

Flat Habits v1.0.1 is now released and [available](https://apps.apple.com/app/id1558358855) in the App Store.

## org import (import vs in-place)

We can now import org files from the menu. Importing gives ya the option to either import (copy into the app) or open in-place. The latter enables users to sync org files with other iOS apps or just open/edit from Emacs for the full org-mode/agenda experience.

<center>
  <img src="https://xenodium.github.io/images/flat-habits-v101-org-import-menu/menu.png" alt="today_no_filter.png" width="300px">
  <img src="https://xenodium.github.io/images/flat-habits-v101-org-import-menu/filebrowse.png" alt="today_no_filter.png" width="300px">
</center>

Syncing with your desktop can be achieved by either iCloud or by enabling other providers in the Files app (after installing the likes of Google Drive, Dropbox, etc).

*Please note that importing (copying into the app) is currently the recommended flow.* Opening in-place and syncing is still fairly experimental, so please back up your org files regularly. If you do run into syncing issues, please get in touch.

Good luck with your habits!

# \[2021-03-17 Wed\] Flat Habits for iOS (powered by org)
---
id: flat-habits-for-ios
---

UPDATE: Flat Habits now has its own page at [flathabits.com](https://flathabits.com/).

*No friction. No social. No analytics. No account. No cloud. No lock-in.*

## So what is it?

An iOS app to help you form and track lasting habits.

<center>
  <img src="https://xenodium.github.io/images/flat-habits-for-ios/today_no_filter.png" alt="today_no_filter.png" width="300px">
  <img src="https://xenodium.github.io/images/flat-habits-for-ios/meditate.png" alt="today_no_filter.png" width="300px">
  <a href="https://apps.apple.com/app/id1558358855">
    <img src="https://xenodium.github.io/images/flat-habits-for-ios/download-on-app-store.png" alt="today_no_filter.png" width="180px">
  </a>
</center>

## Why an app?

Tracking and accountability may help you develop positive habits. A simple habit-tracking app should make this easy. I'm not a habits expert, but got inspired by James Clear's [Atomic Habits](https://jamesclear.com/atomic-habits). Read that book if you're interested in the topic.

I wanted a frictionless habit tracker that gets out of the way, so I built one to my taste.

## Sounds like a lot of work?

You mean habit tracking? It's not. I tried to make the app simple and focused. Mark a habit done whenever you do it. It's really encouraging to see your daily streaks grow. I really don't want to break them.

## What kind of habits?

Any recurring habit you'd like to form like exercise, water the plants, read, make your bed, recycle, call grandma, yoga, cleaning, drink water, meditate, take a nap, make your lunch, journal, laundry, push-ups, sort out the dryer filter, floz, take your vitamins, take your meds, eat salad, eat fruit, practice a language, practice an instrument, go to bed early…

## So it's like a task/todo app?

Nope. This app focuses solely on habits. Unlike todos/tasks, habits must happen regularly. If you don't water the plants, they will die. If you don't exercise regularly, you won't get the health benefits. Keep your habits separate from that long list of todos. You know, that panic-inducing list you're too afraid to look at.

## Where is my data stored?

On your iPhone as a plain text file (in [org mode](https://orgmode.org/) format). You can view, edit, or migrate your data at any time (use export from the menu). You may also save it to a shared location, so you can access it from multiple devices/apps. Some of us like to [use our beloved text editors](http://xenodium.com/frictionless-org-habits-on-ios/) (Emacs, Vim, VSCode, etc.) to poke at [habits](https://orgmode.org/manual/Tracking-your-habits.html).

## Got more questions?

I may not have the answer, but I can try. Ping me at *flathabits\*at\*xenodium.com*.

## Privacy policy

No personal data is sent to any server, as there is no server component to this app. There are neither third party integrations, accounts, analytics, nor trackers in this app. All your data is kept on your iPhone, unless you choose a cloud provider to sync or store your data. See your cloud provider's privacy policy for details on how they may handle it.

If you choose to send feedback by email, you have the option to review and attach logs to help diagnose issues. If you'd like an email thread to be deleted, just ask.

To join TestFlight as a beta tester, you likely gave your email address. If you'd like your email removed, just ask. Note that TestFlight has its own [Terms Of Service](https://www.apple.com/legal/internet-services/itunes/testflight/sren/terms.html).

# \[2021-02-21 Sun\] Frictionless org habits on iOS
---
id: frictionless-org-habits-on-ios
---

UPDATE: Flat Habits now has its own page at [flathabits.com](https://flathabits.com/).

![](https://xenodium.github.io/images/frictionless-org-habits-on-ios/flat_habits.gif)

I've been wanting org to keep track of my daily habits for a little while. The catalyst: reading James Clear's wonderful [Atomic Habits](https://jamesclear.com/atomic-habits) (along with plenty of lock-down inspiration).

As much as I live in Emacs and org mode, it just wasn't practical enough to rely on my laptop for tracking habits. I wanted less friction, so I've been experimenting with building a toy app for my needs. Naturally, org support was a strict requirement, so I could always poke at it from my beloved editor.

I've been using the app every day with success. The habits seem to be sticking, but equally important, it's been really fun to join the fabulous world of Emacs/Org with iOS/SwiftUI.

This is all very experimental[^3] and as mentioned on [reddit](https://www.reddit.com/r/emacs/comments/ljurwx/org_habits_ios_app_want_to_try_it/) (follow-up [here](https://www.reddit.com/r/emacs/comments/lp62vn/org_habits_ios_app_followup_twoway_edit/)) and [twitter](https://twitter.com/xenodium/status/1361034010047176705), the app isn't available on the App Store. I may consider publishing if there's enough interest, but in the mean time, you can reach out and install via [TestFlight](https://testflight.apple.com/).

Send me an email address to *flathabits\*at\*xenodium.com* for a TestFlight invite.

## 2021-03-12 Update: Now with iOS Files app/sync integration

If you can sync your org file with your iPhone (ie. Drive/Dropbox/iCloud), and list it in the Files app, you should be able to open/edit[^4] with *Flat Habits* (that's the name now). With iOS Files integration, you should be able to sync your habits between your iPhone and your [funky editor](https://www.gnu.org/software/emacs/) powering org mode[^5].

![](https://xenodium.github.io/images/frictionless-org-habits-on-ios/filesapp_shorter.gif)

# \[2021-02-20 Sat\] Symbolicating iOS crashes
---
id: symbolicating-ios-crashes
---

``` {.bash org-language="sh"}
export DEVELOPER_DIR=$(xcode-select --print-path)
/Applications/Xcode.app/Contents/SharedFrameworks/DVTFoundation.framework/Versions/A/Resources/symbolicatecrash crashlog.crash MyFoo.app.dSYM
```

# \[2021-01-23 Sat\] Emacs: mu4e icons
---
id: mu4e-icons
---

Recently spotted [mu4e-marker-icons](https://github.com/stardiviner/mu4e-marker-icons), which adds mu4e icons using [all-the-icons](https://github.com/domtronn/all-the-icons.el).

Although I'm not currently using all-the-icons, it did remind me to take a look at mu4e's built-in variables to spiff up my email. It's pretty simple. Find the icons you like and set them as follows:

![](https://xenodium.github.io/images/mu4e-icons/mu4eicons.png)

``` {.commonlisp org-language="emacs-lisp"}
(setq mu4e-headers-unread-mark    '("u" . "📩 "))
(setq mu4e-headers-draft-mark     '("D" . "🚧 "))
(setq mu4e-headers-flagged-mark   '("F" . "🚩 "))
(setq mu4e-headers-new-mark       '("N" . "✨ "))
(setq mu4e-headers-passed-mark    '("P" . "↪ "))
(setq mu4e-headers-replied-mark   '("R" . "↩ "))
(setq mu4e-headers-seen-mark      '("S" . " "))
(setq mu4e-headers-trashed-mark   '("T" . "🗑️"))
(setq mu4e-headers-attach-mark    '("a" . "📎 "))
(setq mu4e-headers-encrypted-mark '("x" . "🔑 "))
(setq mu4e-headers-signed-mark    '("s" . "🖊 "))
```

# \[2021-01-02 Sat\] Luxembourg travel bookmarks
---
id: luxembourg-travel-bookmarks
---

-   [Hiking in Luxembourg - Mullerthal Trail](https://www.mullerthal-trail.lu/en).

# \[2021-01-02 Sat\] South Africa travel bookmarks
---
id: south-africa-travel-bookmarks
---

-   [Blyde River Canyon, South Africa: The Complete Guide](https://www.tripsavvy.com/blyde-river-canyon-south-africa-guide-4157668).

# \[2020-12-29 Tue\] Swift package code coverage (plus Emacs overlay)
---
id: swift-package-code-coverage
---

While playing around with Swift package manager, I had a quick look into code coverage options. Luckily, coverage reporting and exporting are supported out of the box (via [llvm-cov](https://llvm.org/docs/CommandGuide/llvm-cov.html)).

Ensure tests are invoked as follows:

``` {.bash org-language="sh"}
swift test --enable-code-coverage
```

A high level report can be generated with:

``` {.bash results="verbatim"}
xcrun llvm-cov report .build/x86_64-apple-macosx/debug/FooPackageTests.xctest/Contents/MacOS/FooPackageTests \
      -instr-profile=.build/x86_64-apple-macosx/debug/codecov/default.profdata -ignore-filename-regex=".build|Tests"
```

llvm-cov can export as lcov format:

``` {.bash org-language="sh"}
xcrun llvm-cov export -format="lcov" .build/x86_64-apple-macosx/debug/FooPackageTests.xctest/Contents/MacOS/FooPackageTests -instr-profile=.build/x86_64-apple-macosx/debug/codecov/default.profdata -ignore-filename-regex=".build|Tests" > coverage.lcov
```

With the report in lcov format, we can look for an Emacs package to visualize coverage in source files. Found [coverlay.el](https://github.com/twada/coverlay.el) to require minimal setup. I was interested in highlighting only untested areas, so I set *tested-line-background-color* to nil:

``` {.commonlisp org-language="emacs-lisp"}
(use-package coverlay
  :ensure t
  :config
  (setq coverlay:tested-line-background-color nil))
```

After installing coverlay, I enabled the minor mode via *M-x coverlay-minor-mode*, invoked *M-x coverlay-watch-file* to watch *coverage.lcov* for changes, and voilà!

![](https://xenodium.github.io/images/swift-package-code-coverage/coverage.png)

# \[2020-12-29 Tue\] Hiking bookmarks
---
id: hiking-bookmarks
---

-   [A growing list of long distance hikes around the world (Hacker News)](https://news.ycombinator.com/item?id=25568856).

# \[2020-12-28 Mon\] Patience
---
id: patience
---

Via [Orange Book](https://twitter.com/orangebook_/status/1291844997097099265?s=12), a reminder to myself:

-   In investing, patience is rewarded.
-   In growing a talent, patience is rewarded.
-   In building a business, patience is rewarded.
-   In love and friendships, patience is rewarded.
-   Patience = success

I feel like there's an Emacs lesson somewhere in there…

# \[2020-12-26 Sat\] Chess bookmarks
---
id: chess-bookmarks
---

-   [A Beginner's Garden of Chess Openings](https://dwheeler.com/chess-openings/).
-   [A Beginner's Garden of Chess Openings (2002) (Hacker News)](https://news.ycombinator.com/item?id=25446399).

# \[2020-12-20 Sun\] 40 Coolest neighbourhoods in the world
---
id: 40-coolest-neighborhoods-in-the-world
---

Via TimeOut's [40 Coolest Neighbourhoods in the World Right Now](https://www.timeout.com/coolest-neighbourhoods-in-the-world):

1.  Esquerra de l’Eixample, Barcelona
2.  Downtown, Los Angeles
3.  Sham Shui Po, Hong Kong
4.  Bedford-Stuyvesant, New York
5.  Yarraville, Melbourne
6.  Wedding, Berlin
7.  Shaanxi Bei Lu/Kangding Lu, Shanghai
8.  Dennistoun, Glasgow
9.  Haut-Marais, Paris
10. Marrickville, Sydney
11. Verdun, Montreal
12. Kalamaja, Tallinn
13. Hannam-dong, Seoul
14. Bonfim, Porto
15. Ghosttown, Oakland
16. Chula-Samyan, Bangkok
17. Alvalade, Lisbon
18. Noord, Amsterdam
19. Centro, São Paulo
20. Holešovice, Prague
21. Lavapiés, Madrid
22. Opebi, Lagos
23. Narvarte, Mexico City
24. Uptown, Chicago
25. Little Five Points, Atlanta
26. Wynwood, Miami
27. Phibsboro, Dublin
28. Nørrebro, Copenhagen
29. Bugis, Singapore
30. Gongguan, Taipei
31. Soho, London
32. Binh Thanh, Ho Chi Minh City
33. Melville, Johannesburg
34. Kabutocho, Tokyo
35. Porta Venezia, Milan
36. Taman Paramount, Kuala Lumpur
37. Allston, Boston
38. Bandra West, Mumbai
39. Arnavutköy, Istanbul
40. Banjar Nagi, Ubud

# \[2020-12-05 Sat\] Emacs: Rotate my macOS display
---
id: emacs-rotate-my-macos-display
---

Every so often, I rotate my monitor (vertical vs horizontal) for either work or to watch a movie. macOS enables changing the display rotation via a dropdown menu (under *Preferences \> Displays \> Rotation*) where you can pick between *Standard*, *90°*, *180°*, and *270°*. That's all fine, but what I'd really like is a quick way to toggle between my preferred two choices: *Standard* and *270°*.

Unsurprisingly, I'd also like to invoke it as an interactive command via Emacs's *M-x* (see [Emacs: connect my Bluetooth speaker](http://xenodium.com/emacs-connect-my-bluetooth-speaker/index.html)). With narrowing frameworks like [ivy](https://github.com/abo-abo/swiper), [helm](https://emacs-helm.github.io/helm/), and [ido](https://www.gnu.org/software/emacs/manual/html_mono/ido.html), invoking these commands is just a breeze.

Turns out, this was pretty simple to accomplish, thanks to Eric Nitardy's [fb-rotate](https://github.com/CdLbB/fb-rotate) command line utility. All that's left to do is wrap it in a tiny elisp ~~function~~ hack, add the toggling logic, and voilà!

![](https://xenodium.github.io/images/emacs-rotate-my-macos-display/rotate.gif)

*The screen capture goes a little funky when rotating the display, but you get the idea. It works better in person :)*

…and here's the snippet:

``` {.commonlisp org-language="emacs-lisp"}
(defun ar/display-toggle-rotation ()
  (interactive)
  (require 'cl-lib)
  (cl-assert (executable-find "fb-rotate") nil
             "Install fb-rotate from https://github.com/CdLbB/fb-rotate")
  ;; #  Display_ID    Resolution  ____Display_Bounds____  Rotation
  ;; 2  0x2b347692    1440x2560      0     0  1440  2560    270    [main]
  ;; From fb-rotate output, get the `current-rotation' from Column 7, row 1 zero-based.
  (let ((current-rotation (nth 7 (split-string (nth 1 (process-lines "fb-rotate" "-i"))))))
    (call-process-shell-command (format "fb-rotate -d 1 -r %s"
                                        (if (equal current-rotation "270")
                                            "0"
                                          "270")))))
```

# \[2020-11-29 Sun\] Emacs: Clone git repo from clipboard
---
id: emacs-clone-git-repo-from-clipboard
---

Cloning git repositories is a pretty common task. For me, it typically goes something like:

-   Copy git repo URL from browser.
-   Drop to Emacs eshell.
-   Change current directory.
-   Type "git clone ".
-   Paste git repo URL.
-   Run git command.
-   Change directory to cloned repo.
-   Open dired.

No biggie, but why go through the same steps every time? We can do better. We have a hyper malleable editor, so let's get it to grab the URL from clipboard and do its thing.

*shell-command* or *async-shell-command* can help in this space, but require additional work: change location, re-type command, what if directory already exists… This is Emacs, so we can craft the exact experience we want. I did take inspiration from *shell-command* to display the process buffer correctly (git progress, control codes, etc.) and landed on the following experience:

![](https://xenodium.github.io/images/emacs-clone-git-repo-from-clipboard/git_clone_dired.gif)

``` {.commonlisp org-language="emacs-lisp"}
;; -*- lexical-binding: t -*-

(defun ar/git-clone-clipboard-url ()
  "Clone git URL in clipboard asynchronously and open in dired when finished."
  (interactive)
  (cl-assert (string-match-p "^\\(http\\|https\\|ssh\\)://" (current-kill 0)) nil "No URL in clipboard")
  (let* ((url (current-kill 0))
         (download-dir (expand-file-name "~/Downloads/"))
         (project-dir (concat (file-name-as-directory download-dir)
                              (file-name-base url)))
         (default-directory download-dir)
         (command (format "git clone %s" url))
         (buffer (generate-new-buffer (format "*%s*" command)))
         (proc))
    (when (file-exists-p project-dir)
      (if (y-or-n-p (format "%s exists. delete?" (file-name-base url)))
          (delete-directory project-dir t)
        (user-error "Bailed")))
    (switch-to-buffer buffer)
    (setq proc (start-process-shell-command (nth 0 (split-string command)) buffer command))
    (with-current-buffer buffer
      (setq default-directory download-dir)
      (shell-command-save-pos-or-erase)
      (require 'shell)
      (shell-mode)
      (view-mode +1))
    (set-process-sentinel proc (lambda (process state)
                                 (let ((output (with-current-buffer (process-buffer process)
                                                 (buffer-string))))
                                   (kill-buffer (process-buffer process))
                                   (if (= (process-exit-status process) 0)
                                       (progn
                                         (message "finished: %s" command)
                                         (dired project-dir))
                                     (user-error (format "%s\n%s" command output))))))
    (set-process-filter proc #'comint-output-filter)))
```

Comment on [reddit](https://www.reddit.com/r/emacs/comments/k3iter/simplequick_git_repo_clone_from_browser_to_emacs/) or [twitter](https://twitter.com/xenodium/status/1333111043791458309).

## Updates

-   Added lexical binding.
-   Checks clipboard for ssh urls also.

# \[2020-11-23 Mon\] Pulled pork recipe
---
id: pulled-pork-recipe
---

Made pulled pork a couple of times. Freestyled a bit. No expert here, but result was yummie.

## Grind/blend spices

-   2 teaspoons smoked paprika
-   2 teaspoons cumin seeds
-   2 teaspoons whole pepper corn mix
-   2 teaspoons chilly flakes

If spices are whole, grind or blend them. Set aside.

Optionally: Substitute 1 teaspoon of paprika with chipotle pepper.

![](https://xenodium.github.io/images/pulled-pork-recipe/grind.jpg)

![](https://xenodium.github.io/images/pulled-pork-recipe/ground.jpg)

## Mix into a paste

-   2 tablespoons honey
-   1 teaspoon of dijon mustard

Mix the honey, mustard, and previous spices into a paste.

## Rub the mix in

Rub mix thoroughly into the pork shoulder.

## Bake (1 hour)

Place in a pot (lid off) and bake in the oven for 1 hour at 200 °C.

## Add liquids

-   1/2 cup of water.
-   4 tablespoons of apple cider vinegar.

Add liquids to pot.

![](https://xenodium.github.io/images/pulled-pork-recipe/almost.jpg)

## Bake (3-5 hours)

Bake between 3 to 5 hours 150 °C. Check every hour or two. Does the meat fall easily when spread with two forks? If so, you're done.

![](https://xenodium.github.io/images/pulled-pork-recipe/out.jpg)

## Pull apart

Use two forks to pull the meat apart.

![](https://xenodium.github.io/images/pulled-pork-recipe/final.jpg)

# \[2020-11-01 Sun\] Zettelkasten bookmarks
---
id: zettelkasten-bookmarks
---



-   [Introduction to the Zettelkasten Method](https://zettelkasten.de/introduction/).
-   [Zettelkasten note-taking in 10 minutes · Tomas Vik](https://blog.viktomas.com/posts/slip-box/#fnref:1).

# \[2020-10-28 Wed\] Battlestation bookmarks
---
id: battlestation-bookmarks
---



-   [Hacking with Swift's battlestation.](https://twitter.com/twostraws/status/1321064772276789248).
-   [/r/battlestations](https://www.reddit.com/r/battlestations/).

# \[2020-10-27 Tue\] Emacs: chaining org babel blocks
---
id: emacs-chaining-org-babel-blocks
---

Recently wanted to chain org babel blocks. That is, aggregate separate source blocks and execute as one combined block.

![](https://xenodium.github.io/images/emacs-chaining-org-babel-blocks/chain.gif)

I wanted the chaining primarily driven through header arguments as follows:

``` org
#+name: block-0
#+begin_src swift
  print("hello 0")
#+end_src

#+name: block-1
#+begin_src swift :include block-0
  print("hello 1")
#+end_src

#+RESULTS: block-1
: hello 0
: hello 1
```

I didn't find the above syntax and behaviour supported out of the box (or didn't search hard enough?). Fortunately, this is our beloved and malleable editor, so we can always bend it our way! Wasn't quite sure how to go about it, so I looked at other babel packages for inspiration. [ob-async](https://github.com/astahlman/ob-async) was great for that.

Turns out, advicing *org-babel-execute-src-block* did the job:

``` {.commonlisp org-language="emacs-lisp"}
(defun adviced:org-babel-execute-src-block (&optional orig-fun arg info params)
  (let ((body (nth 1 info))
        (include (assoc :include (nth 2 info)))
        (named-blocks (org-element-map (org-element-parse-buffer)
                          'src-block (lambda (item)
                                       (when (org-element-property :name item)
                                         (cons (org-element-property :name item)
                                               item))))))
    (while include
      (unless (cdr include)
        (user-error ":include without value" (cdr include)))
      (unless (assoc (cdr include) named-blocks)
        (user-error "source block \"%s\" not found" (cdr include)))
      (setq body (concat (org-element-property :value (cdr (assoc (cdr include) named-blocks)))
                         body))
      (setf (nth 1 info) body)
      (setq include (assoc :include
                           (org-babel-parse-header-arguments
                            (org-element-property :parameters (cdr (assoc (cdr include) named-blocks)))))))
    (funcall orig-fun arg info params)))

(advice-add 'org-babel-execute-src-block :around 'adviced:org-babel-execute-src-block)
```

Before I built my own support, I did find that [noweb](https://orgmode.org/manual/Noweb-Reference-Syntax.html) got me most of what I needed, but required sprinkling blocks with placeholder references.

![](https://xenodium.github.io/images/emacs-chaining-org-babel-blocks/noweb.gif)

Combining [:noweb](https://orgmode.org/manual/Noweb-Reference-Syntax.html) and [:prologue](https://org-babel.readthedocs.io/en/latest/header-args/#prologue) would have been a great match, if only prologue did expand the noweb reference. I'm sure there's an alternative I'm missing. Either way, it was fun to poke at babel blocks and build my own chaining support.

# \[2020-10-25 Sun\] Emacs: quote wrap all in region
---
id: emacs-quote-wrap-all-in-region
---

As I find myself moving more shell commands into Emacs interactive commands to [create a Swift package/project](http://xenodium.com/emacs-create-a-swift-packageproject/), [enrich dired's featureset](http://xenodium.com/enrich-your-dired-batching-toolbox/), or [search/play Music (macOS)](http://xenodium.com/emacs-searchplay-music-macos/), I often need to take a single space-separated string, make an elisp list of strings, and feed it to functions like *process-lines*. No biggie, but I thought it'd be a fun little function to write: take the region and wrap all items in quotes. As a bonus, made it toggable.

![](https://xenodium.github.io/images/emacs-quote-wrap-all-in-region/wrap-toggle-region.gif)

``` {.commonlisp org-language="emacs-lisp"}
(defun ar/toggle-quote-wrap-all-in-region (beg end)
  "Toggle wrapping all items in region with double quotes."
  (interactive (list (mark) (point)))
  (unless (region-active-p)
    (user-error "no region to wrap"))
  (let ((deactivate-mark nil)
        (replacement (string-join
                      (mapcar (lambda (item)
                                (if (string-match-p "^\".*\"$" item)
                                    (string-trim item "\"" "\"")
                                  (format "\"%s\"" item)))
                              (split-string (buffer-substring beg end)))
                      " ")))
    (delete-region beg end)
    (insert replacement)))
```

# \[2020-10-18 Sun\] Emacs: org block complete and edit
---
id: emacs-edit-after-org-block-completion
---

I quickly got used to [Emacs org block company completion](http://xenodium.com/emacs-org-block-company-completion/). I did, however, almost always found myself running *org-edit-special* immediately after inserting completion. I use **C-c '** for that. That's all fine, but it just felt redundant.

Why not automatically edit the source block in corresponding major mode after completion? I think I can also get used to that!

![](https://xenodium.github.io/images/emacs-edit-after-org-block-completion/automatic.gif)

Or maybe the automatic approach is too eager? There's also a middle ground: ask immediately after.

![](https://xenodium.github.io/images/emacs-edit-after-org-block-completion/prompted.gif)

Or maybe I don't want either in the end? Time will tell, but I now have all three options available:

``` {.commonlisp org-language="emacs-lisp"}
(defcustom company-org-block-edit-mode 'auto
  "Customize whether edit mode, post completion was inserted."
  :type '(choice
          (const :tag "nil: no edit after insertion" nil)
          (const :tag "prompt: ask before edit" prompt)
          (const :tag "auto edit, no prompt" auto)))
```

The new option is now in the [company-org-block snippet](https://github.com/xenodium/dotsies/blob/main/emacs/ar/company-org-block.el) with my latest config.

# \[2020-10-11 Sun\] Emacs: create a Swift package/project
---
id: emacs-create-a-swift-packageproject
---

Been playing around with [Swift Package Manager (SPM)](https://swift.org/package-manager/). Creating a new Swift package (ie. project) is pretty simple.

To create a library package, we can use the following:

``` {.bash org-language="sh"}
swift package init --type library
```

Alternatively, to create a command-line utility use:

``` {.bash org-language="sh"}
swift package init --type executable
```

Turns out, there are a few options: empty, library, executable, system-module, manifest.

With a little elisp, we can write a completing function to quickly generate a Swift package/project without the need to drop to the shell.

Bonus: I won't have to look up SPM options if I ever forget them.

![](https://xenodium.github.io/images/emacs-create-swift-package/swift-package.gif)

``` {.commonlisp org-language="emacs-lisp"}
(defun ar/swift-package-init ()
  "Execute `swift package init', with optional name and completing type."
  (interactive)
  (let* ((name (read-string "name (default): "))
         (type (completing-read
                "project type: "
                ;; Splits "--type empty|library|executable|system-module|manifest"
                (split-string
                 (nth 1 (split-string
                         (string-trim
                          (seq-find
                           (lambda (line)
                             (string-match "--type" line))
                           (process-lines "swift" "package" "init" "--help")))
                         "   "))
                 "|")))
         (command (format "swift package init --type %s" type)))
    (unless (string-empty-p name)
      (append command "--name " name))
    (shell-command command))
  (dired default-directory)
  (revert-buffer))
```

# \[2020-10-04 Sun\] Improved Ctrl-p/Ctrl-n macOS movement
---
id: improved-ctrl-p-ctrl-n-macos-movement
---

macOS supports many Emacs bindings (out of the box). You can, for example, press C-p and C-n to move the cursor up and down (whether editing text in Emacs or any other macOS app). Jacob Rus's [Customizing the Cocoa Text System](http://www.hcs.harvard.edu/~jrus/site/cocoa-text.html) offers a more in-depth picture and also shows how to customize global macOS keybindings (via DefaultKeyBinding.dict).

In addition to moving Emacs [point](https://www.gnu.org/software/emacs/manual/html_node/emacs/Point.html) (cursor) up/down using C-p/C-n, I've internalized the same bindings to select an option from a list. Good Emacs examples of these are [company mode](https://company-mode.github.io/) and [ivy](https://github.com/abo-abo/swiper).

Vertical cursor movement using Emacs bindings works well in most macOS apps, including forms and text boxes in web pages. However, selecting from a completion list doesn't quite work as expected. Although the binding is technically handled, it moves the cursor within the text widget, ignoring the suggested choices.

![](https://xenodium.github.io/images/improved-ctrl-p-ctrl-n-macos-movement/bindings-borked.gif)

Atif Afzal's [Use emacs key bindings everywhere](https://www.atfzl.com/use-emacs-key-bindings-everywhere) has a solution for the ignored case. He uses [Karabiner Elements](https://github.com/pqrs-org/Karabiner-Elements) to remap c-p and c-n to arrow-up and arrow-down.

It's been roughly a week since I started using the Karabiner remapping, and I've yet to find a case where a web page (or any other macOS app) did not respond to c-p and c-n to move selection from a list.

![](https://xenodium.github.io/images/improved-ctrl-p-ctrl-n-macos-movement/bindings-fixed.gif)

My \~/.config/karabiner/karabiner.json configuration is as follows:

``` json
{
    "global": {
        "check_for_updates_on_startup": true,
        "show_in_menu_bar": true,
        "show_profile_name_in_menu_bar": false
    },
    "profiles": [
        {
            "complex_modifications": {
                "parameters": {
                    "basic.simultaneous_threshold_milliseconds": 50,
                    "basic.to_delayed_action_delay_milliseconds": 500,
                    "basic.to_if_alone_timeout_milliseconds": 1000,
                    "basic.to_if_held_down_threshold_milliseconds": 500,
                    "mouse_motion_to_scroll.speed": 100
                },
                "rules": [
                    {
                        "description": "Ctrl+p/Ctrl+n to arrow up/down",
                        "manipulators": [
                            {
                                "from": {
                                    "key_code": "p",
                                    "modifiers": {
                                        "mandatory": [
                                            "control"
                                        ]
                                    }
                                },
                                "to": [
                                    {
                                        "key_code": "up_arrow"
                                    }
                                ],
                                "conditions": [
                                    {
                                        "type": "frontmost_application_unless",
                                        "bundle_identifiers": [
                                            "^org\\.gnu\\.Emacs"
                                        ]
                                    }
                                ],
                                "type": "basic"
                            },
                            {
                                "from": {
                                    "key_code": "n",
                                    "modifiers": {
                                        "mandatory": [
                                            "control"
                                        ]
                                    }
                                },
                                "to": [
                                    {
                                        "key_code": "down_arrow"
                                    }
                                ],
                                "conditions": [
                                    {
                                        "type": "frontmost_application_unless",
                                        "bundle_identifiers": [
                                            "^org\\.gnu\\.Emacs"
                                        ]
                                    }
                                ],
                                "type": "basic"
                            }
                        ]
                    }
                ]
            },
            "devices": [],
            "fn_function_keys": [],
            "name": "Default profile",
            "parameters": {
                "delay_milliseconds_before_open_device": 1000
            },
            "selected": true,
            "simple_modifications": [],
            "virtual_hid_keyboard": {
                "country_code": 0,
                "mouse_key_xy_scale": 100
            }
        }
    ]
}
```

## Bonus (C-g to exit)

Pressing Esc often dismisses or cancels macOS windows, menus, etc. This is also the case for web pages. As an Emacs user, I'm pretty used to pressing C-g to cancel, quit, or exit things. With that in mind, mapping C-g to Esc is surprisingly useful outside of Emacs. Here's the relevant Karabiner C-g binding for that:

``` json
{
    "description": "Ctrl+G to Escape",
    "manipulators": [
        {
            "description": "emacs like escape",
            "from": {
                "key_code": "g",
                "modifiers": {
                    "mandatory": [
                        "left_control"
                    ]
                }
            },
            "to": [
                {
                    "key_code": "escape"
                }
            ],
            "conditions": [
                {
                    "type": "frontmost_application_unless",
                    "bundle_identifiers": [
                        "^org\\.gnu\\.Emacs"
                    ]
                }
            ],
            "conditions": [
                {
                    "type": "frontmost_application_unless",
                    "bundle_identifiers": [
                        "^org\\.gnu\\.Emacs"
                    ]
                }
            ],
            "type": "basic"
        }
    ]
}
```

ps. Note to self: Lennart's blog has [notes on the topic but for linux](https://blog.karssen.org/2024/06/05/using-emacs-key-bindings-in-gnome-firefox-and-other-applications/).

UPDATE: Ensure bindings are only active when Emacs is [not]{.underline} active.

# \[2020-10-04 Sun\] Basmati rice pudding recipe
---
id: basmati-rice-pudding-recipe
---

![](https://xenodium.github.io/images/basmati-rice-pudding-recipe/rice_pudding.jpg)

## Combine in a pot

-   2/3 cup of basmati rice
-   400 ml of coconut milk
-   4 cups of milk [^6]
-   3 tablespoons of honey [^7]
-   1/4 teaspoon of crushed cardamom seeds [^8]
-   1/8 teaspoon of salt

Simple. Combine all ingredients in a pot.

## Boil and simmer

Bring ingredients to a boil and simmer at low heat for 45 minutes. Stir occasionally.

## Mix in butter

-   1 tablespoon of butter.

Turn stove off, add a tablespoon of butter, and mix in.

## Serve warm or cold

After mixing in the butter, the rice pudding is done. You can serve warm or cold.

## Garnish (optional)

-   Pistachios
-   Cinnamon

Optionally garnish with either pistachios or cinnamon (or both).

# \[2020-09-27 Sun\] Adding images to pdfs (macOS)
---
id: adding-images-to-pdfs-macos
---

The macOS Preview app does a great job inserting signatures to existing pdfs. I was hoping it could overlay images just as easily. Doesn't look like it's possible, without exporting/reimporting to image formats and losing pdf structure. Did I miss something?

In any case, I found [formulatepro](https://code.google.com/archive/p/formulatepro/). Dormant at Google Code Archive, but also [checked in to github](https://github.com/adlr/formulatepro). With a tiny [patch](https://github.com/xenodium/formulatepro/commit/cd43b1e73c2f180f4b4b7fb11fdec975b6960dc6), it builds and runs on Catalina. One can easily insert an image via "File \> Place Image…".

![](https://xenodium.github.io/images/adding-images-to-pdfs-macos/formulatepro.png)

# \[2020-09-27 Sun\] DIY bookmarks
---
id: diy-bookmarks
---



-   [Best electrical insulation tape](https://linuxhint.com/best_electrical_insulation_tape/).
-   [I’ve spent the last 3 months building the home office of my dreams](https://twitter.com/rosen/status/1317843289530376196).

# \[2020-09-24 Thu\] Skiing bookmarks
---
id: skiing-bookmarks
---

-   [7 far-flung European ski resorts - Lonely Planet](https://www.lonelyplanet.com/articles/remote-ski-resorts-europe).

# \[2020-09-19 Sat\] Emacs: search/play Music (macOS)
---
id: emacs-searchplay-music-macos
---

While trying out macOS's Music app to manage offline media, I wondered if I could easily search and control playback from Emacs. Spoiler alert: yes it can be done and fuzzy searching music is rather gratifying.

![](https://xenodium.github.io/images/emacs-searchplay-music-macos/music_search.gif)

Luckily, the hard work's already handled by [pytunes](https://github.com/hile/pytunes), a command line interface to macOS's iTunes/Music app. We add [ffprobe](https://ffmpeg.org/ffprobe.html) and some elisp glue to the mix, and we can generate an Emacs media index.

Indexing takes roughly a minute per 1000 files. Prolly suboptimal, but I don't intend to re-index frequently. For now, we can use a separate process to prevent Emacs from blocking, so we can get back to playing tetris from our beloved editor:

``` {.commonlisp org-language="emacs-lisp"}
(defun musica-index ()
  "Indexes Music's tracks in two stages:
1. Generates \"Tracks.sqlite\" using pytunes (needs https://github.com/hile/pytunes installed).
2. Caches an index at ~/.emacs.d/.musica.el."
  (interactive)
  (message "Indexing music... started")
  (let* ((now (current-time))
         (name "Music indexing")
         (buffer (get-buffer-create (format "*%s*" name))))
    (with-current-buffer buffer
      (delete-region (point-min)
                     (point-max)))
    (set-process-sentinel
     (start-process name
                    buffer
                    (file-truename (expand-file-name invocation-name
                                                     invocation-directory))
                    "--quick" "--batch" "--eval"
                    (prin1-to-string
                     `(progn
                        (interactive)
                        (require 'cl-lib)
                        (require 'seq)
                        (require 'map)

                        (message "Generating Tracks.sqlite...")
                        (process-lines "pytunes" "update-index") ;; Generates Tracks.sqlite
                        (message "Generating Tracks.sqlite... done")

                        (defun parse-tags (path)
                          (with-temp-buffer
                            (if (eq 0 (call-process "ffprobe" nil t nil "-v" "quiet"
                                                    "-print_format" "json" "-show_format" path))
                                (map-elt (json-parse-string (buffer-string)
                                                            :object-type 'alist)
                                         'format)
                              (message "Warning: Couldn't read track metadata for %s" path)
                              (message "%s" (buffer-string))
                              (list (cons 'filename path)))))

                        (let* ((paths (process-lines "sqlite3"
                                                     (concat (expand-file-name "~/")
                                                             "Music/Music/Music Library.musiclibrary/Tracks.sqlite")
                                                     "select path from tracks"))
                               (total (length paths))
                               (n 0)
                               (records (seq-map (lambda (path)
                                                   (let ((tags (parse-tags path)))
                                                     (message "%d/%d %s" (setq n (1+ n))
                                                              total (or (map-elt (map-elt tags 'tags) 'title) "No title"))
                                                     tags))
                                                 paths)))
                          (with-temp-buffer
                            (prin1 records (current-buffer))
                            (write-file "~/.emacs.d/.musica.el" nil))))))
     (lambda (process state)
       (if (= (process-exit-status process) 0)
           (message "Indexing music... finished (%.3fs)"
                    (float-time (time-subtract (current-time) now)))
         (message "Indexing music... failed, see %s" buffer))))))
```

Once media is indexed, we can feed it to [ivy](https://github.com/abo-abo/swiper) for that narrowing-down fuzzy-searching goodness! It's worth mentioning the [truncate-string-to-width](https://www.gnu.org/software/emacs/manual/html_node/elisp/Size-of-Displayed-Text.html) function. Super handy for truncating strings to a fixed width and visually organizing search results in columns.

``` {.commonlisp org-language="emacs-lisp"}
(defun musica-search ()
  (interactive)
  (cl-assert (executable-find "pytunes") nil "pytunes not installed")
  (let* ((c1-width (round (* (- (window-width) 9) 0.4)))
         (c2-width (round (* (- (window-width) 9) 0.3)))
         (c3-width (- (window-width) 9 c1-width c2-width)))
    (ivy-read "Play: " (mapcar
                        (lambda (track)
                          (let-alist track
                            (cons (format "%s   %s   %s"
                                          (truncate-string-to-width
                                           (or .tags.title
                                               (file-name-base .filename)
                                               "No title") c1-width nil ?\s "…")
                                          (truncate-string-to-width (propertize (or .tags.artist "")
                                                                                'face '(:foreground "yellow")) c2-width nil ?\s "…")
                                          (truncate-string-to-width
                                           (propertize (or .tags.album "")
                                                       'face '(:foreground "cyan1")) c3-width nil ?\s "…"))
                                  track)))
                        (musica--index))
              :action (lambda (selection)
                        (let-alist (cdr selection)
                          (process-lines "pytunes" "play" .filename)
                          (message "Playing: %s [%s] %s"
                                   (or .tags.title
                                       (file-name-base .filename)
                                       "No title")
                                   (or .tags.artist
                                       "No artist")
                                   (or .tags.album
                                       "No album")))))))

(defun musica--index ()
  (with-temp-buffer
    (insert-file-contents "~/.emacs.d/.musica.el")
    (read (current-buffer))))
```

The remaining bits are straigtforward. We add a few interactive functions to control playback:

``` {.commonlisp org-language="emacs-lisp"}
(defun musica-info ()
  (interactive)
  (let ((raw (process-lines "pytunes" "info")))
    (message "%s [%s] %s"
             (string-trim (string-remove-prefix "Title" (nth 3 raw)))
             (string-trim (string-remove-prefix "Artist" (nth 1 raw)))
             (string-trim (string-remove-prefix "Album" (nth 2 raw))))))

(defun musica-play-pause ()
  (interactive)
  (cl-assert (executable-find "pytunes") nil "pytunes not installed")
  (process-lines "pytunes" "play")
  (musica-info))

(defun musica-play-next ()
  (interactive)
  (cl-assert (executable-find "pytunes") nil "pytunes not installed")
  (process-lines "pytunes" "next"))

(defun musica-play-next-random ()
  (interactive)
  (cl-assert (executable-find "pytunes") nil "pytunes not installed")
  (process-lines "pytunes" "shuffle" "enable")
  (let-alist (seq-random-elt (musica--index))
    (process-lines "pytunes" "play" .filename))
  (musica-info))

(defun musica-play-previous ()
  (interactive)
  (cl-assert (executable-find "pytunes") nil "pytunes not installed")
  (process-lines "pytunes" "previous"))
```

Finally, if we want some convenient keybindings, we can add something like:

``` {.commonlisp org-language="emacs-lisp"}
(global-set-key (kbd "C-c m SPC") #'musica-play-pause)
(global-set-key (kbd "C-c m i") #'musica-info)
(global-set-key (kbd "C-c m n") #'musica-play-next)
(global-set-key (kbd "C-c m p") #'musica-play-previous)
(global-set-key (kbd "C-c m r") #'musica-play-next-random)
(global-set-key (kbd "C-c m s") #'musica-search)
```

Hooray! Controlling music is now an Emacs keybinding away: ø/

comments on [twitter](https://twitter.com/xenodium/status/1307294369326731264).

UPDATE1: Installing pytunes with *pip3 install pytunes* didn't just work for me. Instead, I cloned and installed as:

``` {.bash org-language="sh"}
git clone https://github.com/hile/pytunes
pip3 install file:///path/to/pytunes
pip3 install pytz
brew install libmagic
```

UPDATE2: Checked in to [dot files](https://github.com/xenodium/dotsies/blob/master/emacs/ar/musica.el).

# \[2020-09-12 Sat\] Cheese cake recipe (no crust)
---
id: cheese-cake-recipe-no-crust
---

![](https://xenodium.github.io/images/cheese-cake-recipe-no-crust/berried.jpg)

![](https://xenodium.github.io/images/cheese-cake-recipe-no-crust/inoven.jpg)

## Preheat oven

Preheat oven at 175°C.

## Ingredients at room temperature

Ensure the cream cheese, sour cream, and eggs are at room temperature before starting.

## Mix cream cheese

-   900g of cream cheese

Mix the cream cheese thoroughly.

## Mix sugar

-   240g of sugar

Add half the sugar. Mix in thoroughly. Add second half and mix.

## Mix sour cream, corn flour, and vanilla.

-   100g sour cream
-   40g corn flour
-   1tbsp vanilla bean paste

Add the three ingredients and mix well.

## Mix eggs

-   3 eggs
-   1 egg yolk

Add the eggs and mix for 30 seconds.

## Mix by hand

Finish mixing thoroughly by hand, using a wooden spoon.

## Prepare pan

-   Springform pan
-   Parchment paper

A springform pan works best here. Wrap its plate with parchment paper and lock it in place.

## Pour mix

-   Strainer

Pour the mix through a strainer and into the prepared pan.

## Rest mix

Let the mix rest in the pan for 10 minutes to let air bubbles out.

## Bake

Bake for an 1 hour 10 minutes. Maybe add another 10 minutes (or more) if surface is still pale. Turn the oven off, leave door half open, and let it sit for 20 minutes.

## Cool off

Take out and let it cool off to room temperature.

## Refrigerate

Refrigerate for 4 hours (or overnight) before removing the sides of the pan.

## Eat!

Nom nom. Yum yum.

## Bonus (topping)

I winged this one and it worked out well. Heated up frozen berries with some honey and used it as topping. The whole combo was pretty tasty.

# \[2020-08-28 Fri\] Faster macOS dock auto-hide
---
id: faster-macos-dock-auto-hide
---

![](https://xenodium.github.io/images/faster-macos-dock-auto-hide/dock.gif)

Via Marcin Swieczkowski's [Upgrading The OSX Dock](https://www.bytedude.com/upgrading-the-osx-dock/), change default to make macOS's dock auto-hide faster:

``` bash
defaults write com.apple.dock autohide-time-modifier -float 0.2; killall Dock
```

# \[2020-08-25 Tue\] Smarter Swift snippets
---
id: smarter-snippets
---

[Jari Safi](https://twitter.com/safijari) published a wonderful Emacs video [demoing python yasnippets in action](https://youtu.be/xmBovJvQ3KU). The constructor snippet, automatically setting ivars, is just magical. I wanted it for Swift!

I took a look at the [[[init]{.underline}]{.underline} snippet](https://github.com/jorgenschaefer/elpy/blob/060a4eb78ec8eba9c8fe3466c40a414d84b3dc81/snippets/python-mode/__init__) from [Jorgen Schäfer](https://github.com/jorgenschaefer)'s [elpy](https://github.com/jorgenschaefer/elpy). It uses [elpy-snippet-init-assignments](https://github.com/jorgenschaefer/elpy/blob/060a4eb78ec8eba9c8fe3466c40a414d84b3dc81/snippets/python-mode/.yas-setup.el#L33) to generate the assignments.

With small tweaks, we can get the same action going on for Swift ø/

![](https://xenodium.github.io/images/smarter-snippets/snippet.gif)

init.yasnippet:

``` snippet
# -*- mode: snippet -*-
# name: init with assignments
# key: init
# --
init(${1:, args}) {
  ${1:$(swift-snippet-init-assignments yas-text)}
}
$0
```

.yas-setup.el:

``` {.commonlisp org-language="emacs-lisp"}
(defun swift-snippet-init-assignments (arg-string)
  (let ((indentation (make-string (save-excursion
                                    (goto-char start-point)
                                    (current-indentation))
                                  ?\s)))
    (string-trim (mapconcat (lambda (arg)
                              (if (string-match "^\\*" arg)
                                  ""
                                (format "self.%s = %s\n%s"
                                        arg arg indentation)))
                            (swift-snippet-split-args arg-string)
                            ""))))

(defun swift-snippet-split-args (arg-string)
  (mapcar (lambda (x)
            (if (and x (string-match "\\([[:alnum:]]*\\):" x))
                (match-string-no-properties 1 x)
              x))
          (split-string arg-string "[[:blank:]]*,[[:blank:]]*" t)))
```

# \[2020-08-23 Sun\] Swift package manager build for iOS
---
id: swift-package-manager-build-for-ios
---

While playing around with Swift package manager, it wasn't immediately obvious how to build for iOS from the command line. The default behaviour of invoking *swift build* is to build for the host. In my case, macOS. In any case, this was it:

``` {.bash org-language="sh"}
swift build -Xswiftc "-sdk" -Xswiftc "/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator13.0.sdk" -Xswiftc "-target" -Xswiftc "x86_64-apple-ios13.0-simulator"
```

ps. Can get the SDK path with:

``` {.bash org-language="sh"}
xcrun --sdk iphonesimulator --show-sdk-path
```

# \[2020-08-23 Sun\] QR code bookmarks
---
id: qr-code-bookmarks
---



-   [divan/txqr: Transfer data via animated QR codes](https://github.com/divan/txqr).
-   [research!rsc: QArt Codes](https://research.swtch.com/qart).
-   [Show HN: Photo Realistic QR-Codes (Hacker News)](https://news.ycombinator.com/item?id=24158125).

# \[2020-08-16 Sun\] Trying out gccemacs on macOS
---
id: trying-out-gccemacs-on-macos
---

*UPDATE: I'm no longer using these steps. See [Emacs plus –with-native-comp](emacs-plus-with-native-comp/) for an easier alternative.*

Below are the instructions I use to build Andrea Corallo's [gccemacs](http://akrl.sdf.org/gccemacs.html) on macOS. It is based on [Allen Dang](https://github.com/AllenDang)'s handy [instructions](https://gist.github.com/AllenDang/f019593e65572a8e0aefc96058a2d23e) plus some changes of my own.

## Install gcc and libgccjit via homebrew

``` {.bash org-language="sh"}
brew install gcc libgccjit
```

## Save configure script

Create configure-gccemacs.sh

``` {.bash org-language="sh"}
#!/bin/bash

set -o nounset
set -o errexit

# Configures Emacs for building native comp support
# http://akrl.sdf.org/gccemacs.html

readonly GCC_DIR="$(realpath $(brew --prefix libgccjit))"
[[ -d $GCC_DIR ]] ||  { echo "${GCC_DIR} not found"; exit 1; }

readonly SED_DIR="$(realpath $(brew --prefix gnu-sed))"
[[ -d $SED_DIR ]] ||  { echo "${SED_DIR} not found"; exit 1; }

readonly GCC_INCLUDE_DIR=${GCC_DIR}/include
[[ -d $GCC_INCLUDE_DIR ]] ||  { echo "${GCC_INCLUDE_DIR} not found"; exit 1; }

readonly GCC_LIB_DIR=${GCC_DIR}/lib/gcc/10
[[ -d $GCC_LIB_DIR ]] ||  { echo "${GCC_LIB_DIR} not found"; exit 1; }

export PATH="${SED_DIR}/libexec/gnubin:${PATH}"
export CFLAGS="-O2 -I${GCC_INCLUDE_DIR}"
export LDFLAGS="-L${GCC_LIB_DIR} -I${GCC_INCLUDE_DIR}"
export LD_LIBRARY_PATH="${GCC_LIB_DIR}"
export DYLD_FALLBACK_LIBRARY_PATH="${GCC_LIB_DIR}"

echo "Environment"
echo "-----------"
echo PATH: $PATH
echo CFLAGS: $CFLAGS
echo LDFLAGS: $LDFLAGS
echo DYLD_FALLBACK_LIBRARY_PATH: $DYLD_FALLBACK_LIBRARY_PATH
echo "-----------"

./autogen.sh

./configure \
     --prefix="$PWD/nextstep/Emacs.app/Contents/MacOS" \
     --enable-locallisppath="${PWD}/nextstep/Emacs.app/Contents/MacOS" \
     --with-mailutils \
     --with-ns \
     --with-imagemagick \
     --with-cairo \
     --with-modules \
     --with-xml2 \
     --with-gnutls \
     --with-json \
     --with-rsvg \
     --with-native-compilation \
     --disable-silent-rules \
     --disable-ns-self-contained \
     --without-dbus
```

Make it executable

``` shell
chmod +x configure-gccemacs.sh
```

## Clone Emacs source

``` shell
git clone --branch master https://github.com/emacs-mirror/emacs gccemacs
```

## Configure build

``` {.bash org-language="sh"}
cd gccemacs
../configure-gccemacs.sh
```

## Native lisp compiler found?

Verify native lisp compiler is found:

``` fundamental
Does Emacs have native lisp compiler?                   yes
```

## Build

Put those cores to use. Find out how many you got with:

``` {.bash org-language="sh"}
sysctl hw.logicalcpu
```

Ok so build with:

``` {.bash org-language="sh"}
make -j4 NATIVE_FAST_BOOT=1
cp -r lisp nextstep/Emacs.app/Contents/Resources/
cp -r native-lisp nextstep/Emacs.app/Contents
make install
```

**Note:** Using *NATIVE_FAST_BOOT=1* significantly improves build time (totalling between 20-30 mins, depending on your specs). Without it, the build can take **hours**.

The macOS app build (under nextstep/Emacs.app) is ready, but read on before launching.

## Remove \~/emacs.d

You likely want to start with a clean install, byte-compiling all packages with the latest Emacs version. In any case, rename \~/emacs.d (for backup?) or remove \~/emacs.d.

## init.el config

Ensure *exec-path* includes the script's "–prefix=" value, *LIBRARY_PATH* points to gcc's lib dir, and finally set *comp-deferred-compilation*. I wrapped the snippet in my *exec-path-from-shell* config, but setting early in init.el should be enough.

``` {.commonlisp org-language="emacs-lisp"}
(use-package exec-path-from-shell
  :ensure t
  :config
  (exec-path-from-shell-initialize)
  (if (and (fboundp 'native-comp-available-p)
           (native-comp-available-p))
      (progn
        (message "Native comp is available")
        ;; Using Emacs.app/Contents/MacOS/bin since it was compiled with
        ;; ./configure --prefix="$PWD/nextstep/Emacs.app/Contents/MacOS"
        (add-to-list 'exec-path (concat invocation-directory "bin") t)
        (setenv "LIBRARY_PATH" (concat (getenv "LIBRARY_PATH")
                                       (when (getenv "LIBRARY_PATH")
                                         ":")
                                       ;; This is where Homebrew puts gcc libraries.
                                       (car (file-expand-wildcards
                                             (expand-file-name "~/homebrew/opt/gcc/lib/gcc/*")))))
        ;; Only set after LIBRARY_PATH can find gcc libraries.
        (setq comp-deferred-compilation t))
    (message "Native comp is *not* available")))
```

## Launch Emacs.app

You're good to go. Open Emacs.app via finder or shell:

``` {.bash org-language="sh"}
open nextstep/Emacs.app
```

## Deferred compilation logs

After setting *comp-deferred-compilation* (in init.el config section), .elc files should be asyncronously compiled. Function definition should be updated to native compiled equivalent.

Look out for an ****Async-native-compile-log**** buffer. Should have content like:

``` fundamental
Compiling .emacs.d/elpa/moody-20200514.1946/moody.el...
Compiling .emacs.d/elpa/minions-20200522.1052/minions.el...
Compiling .emacs.d/elpa/persistent-scratch-20190922.1046/persistent-scratch.el...
Compiling .emacs.d/elpa/which-key-20200721.1927/which-key.el...
...
```

Can also check for .eln files:

``` {.bash org-language="sh"}
find ~/.emacs.d -iname *.eln | wc -l
```

UPDATE1: Added *Symlink Emacs.app/Contents/eln-cache* section for [update 11](http://akrl.sdf.org/gccemacs.html#org4b11ea1).

UPDATE2: Noted using NATIVE_FAST_BOOT makes the build much faster.

UPDATE3: Removed symlinks and copied content instead. This simplifies things. Inspired by Ian Wahbe's [build-emacs.sh](https://github.com/iwahbe/doom-config/blob/master/build-emacs.sh).

UPDATE4: Removed homebrew recipe patching. Thanks to Dmitry Shishkin's [instructions](https://github.com/shshkn/emacs.d/blob/master/docs/nativecomp.md).

UPDATE5: Use new flag –with-native-compilation and master branch.

# \[2020-08-02 Sun\] SwiftUI macOS desk clock
---
id: swiftui-desk-clock
---

![](https://xenodium.github.io/images/swiftui-desk-clock/everclock.gif)

For time display, I've gone back and forth between an always-displayed macOS's menu bar to an auto-hide menu bar, and letting Emacs display the time. Neither felt great nor settled.

With some tweaks, Paul Hudson's [How to use a timer with SwiftUI](https://www.hackingwithswift.com/quick-start/swiftui/how-to-use-a-timer-with-swiftui), led me to build a simple desk clock. Ok, let's not get fancy. It's really just an always-on-top floating window, showing a swiftUI label, but hey I like the minimalist feel ;)

Let's see if it sticks around or it gets in the way… Either way, here's standalone snippet. Run with *swift deskclock.swift*.

``` swift
import Cocoa
import SwiftUI

let application = NSApplication.shared
let appDelegate = AppDelegate()
NSApp.setActivationPolicy(.regular)
application.delegate = appDelegate
application.mainMenu = NSMenu.makeMenu()
application.run()

struct ClockView: View {
  @State var time = "--:--"

  let timer = Timer.publish(every: 1, on: .main, in: .common).autoconnect()

  var body: some View {
    GeometryReader { geometry in

      VStack {
        Text(time)
          .onReceive(timer) { input in
            let formatter = DateFormatter()
            formatter.dateFormat = "HH:mm"
            time = formatter.string(from: input)
          }
          .font(.system(size: 40))
          .padding()
      }.frame(width: geometry.size.width, height: geometry.size.height)
        .background(Color.black)
        .cornerRadius(10)
        .frame(maxWidth: .infinity, maxHeight: .infinity)
    }
  }
}

extension NSWindow {
  static func makeWindow() -> NSWindow {
    let window = NSWindow(
      contentRect: NSRect.makeDefault(),
      styleMask: [.closable, .miniaturizable, .resizable, .fullSizeContentView],
      backing: .buffered, defer: false)
    window.level = .floating
    window.setFrameAutosaveName("everclock")
    window.collectionBehavior = [.canJoinAllSpaces, .stationary, .ignoresCycle, .fullScreenPrimary]
    window.makeKeyAndOrderFront(nil)
    window.isMovableByWindowBackground = true
    window.titleVisibility = .hidden
    window.backgroundColor = .clear
    return window
  }
}

class AppDelegate: NSObject, NSApplicationDelegate {
  var window = NSWindow.makeWindow()
  var hostingView: NSView?

  func applicationDidFinishLaunching(_ notification: Notification) {
    hostingView = NSHostingView(rootView: ClockView())
    window.contentView = hostingView
    NSApp.activate(ignoringOtherApps: true)
  }
}

extension NSRect {
  static func makeDefault() -> NSRect {
    let initialMargin = CGFloat(60)
    let fallback = NSRect(x: 0, y: 0, width: 100, height: 150)

    guard let screenFrame = NSScreen.main?.frame else {
      return fallback
    }

    return NSRect(
      x: screenFrame.maxX - fallback.width - initialMargin,
      y: screenFrame.maxY - fallback.height - initialMargin,
      width: fallback.width, height: fallback.height)
  }
}

extension NSMenu {
  static func makeMenu() -> NSMenu {
    let appMenu = NSMenuItem()
    appMenu.submenu = NSMenu()

    appMenu.submenu?.addItem(
      NSMenuItem(
        title: "Quit \(ProcessInfo.processInfo.processName)",
        action: #selector(NSApplication.terminate(_:)), keyEquivalent: "q"
      ))

    let mainMenu = NSMenu(title: "Main Menu")
    mainMenu.addItem(appMenu)
    return mainMenu
  }
}

```

# \[2020-07-30 Thu\] Mending bookmarks
---
id: mending-bookmarks
---

-   [12 Great Sewing Tips and Tricks ! Best great sewing tips and tricks #7 - YouTube](https://youtu.be/S6UfWgMDlkQ).

# \[2020-06-17 Wed\] ffmpeg bookmarks
---
id: ffmpeg-bookmarks
---



-   [FFmpeg 4.3 (Hacker News)](https://news.ycombinator.com/item?id=23540704).
-   [FFMPEG from Zero to Hero \| Hacker News](https://news.ycombinator.com/item?id=26370704).
-   [Ken Burns Effect Slideshows with FFMPeg (mko.re)](https://el-tramo.be/blog/ken-burns-ffmpeg/).
-   [Stack Videos Horizontally, Vertically, in a Grid With FFmpeg - OTTVerse](https://ottverse.com/stack-videos-horizontally-vertically-grid-with-ffmpeg/).

# \[2020-06-14 Sun\] Black lives matter (BLM) bookmarks
---
id: black-lives-matter-blm-bookmarks
---

-   [Do You Know How Divided White And Black Americans Are On Racism? (FiveThirtyEight)](https://projects.fivethirtyeight.com/racism-polls/).
-   [It’s Time We Dealt With White Supremacy in Tech](https://marker.medium.com/its-time-we-dealt-with-white-supremacy-in-tech-8f7816fe809).
-   [The Real Origins of the Religious Right - POLITICO Magazine](https://www.politico.com/magazine/story/2014/05/religious-right-real-origins-107133).

# \[2020-06-14 Sun\] Dogs bookmarks
---
id: dogs-bookmarks
---

-   [All You Need to Know About Romanian Rescue Dogs](https://thedogspov.com/need-know-romanian-rescue-dogs/).

# \[2020-06-06 Sat\] Emacs, search hackingwithswift.com
---
id: emacs-search-hackingwithswiftcom
---

![](https://xenodium.github.io/images/emacs-search-hackingwithswiftcom/hws.gif)

[Paul Hudson](https://twitter.com/twostraws) authors excellent Swift material at [hackingwithswift.com](https://www.hackingwithswift.com/). I regularly land on the site while searching for snippets from the browser. I was wondering if I could search for snippets directly from Emacs.

Turns out, hackingwithswift uses a JSON HTTP request for querying code examples. With this in mind, we can use *ivy-read* like Oleh Krehel's [counsel-search](https://github.com/abo-abo/swiper/blob/8d840b2e8680e2768edb794c9ccecf975f6ba4cf/counsel.el#L6680) and search for Swift snippets from our favorite editor:

``` {.commonlisp org-language="emacs-lisp"}
(require 'request)
(require 'json)

(defun ar/counsel-hacking-with-swift-search ()
  "Ivy interface to query hackingwithswift.com."
  (interactive)
  (ivy-read "hacking with swift: "
            (lambda (input)
              (or
               (ivy-more-chars)
               (let ((request-curl-options (list "-H" (string-trim (url-http-user-agent-string)))))
                 (request
                   "https://www.hackingwithswift.com/example-code/search"
                   :type "GET"
                   :params (list
                            (cons "search" input))
                   :parser 'json-read
                   :success (cl-function
                             (lambda (&key data &allow-other-keys)
                               (ivy-update-candidates
                                (mapcar (lambda (item)
                                          (let-alist item
                                            (propertize .title 'url .url)))
                                        data)))))
                 0)))
            :action (lambda (selection)
                      (browse-url (concat "https://www.hackingwithswift.com"
                                          (get-text-property 0 'url selection))))
            :dynamic-collection t
            :caller 'ar/counsel-hacking-with-swift-search))
```

# \[2020-05-23 Sat\] Preview SwiftUI layouts using Emacs org blocks
---
id: swiftui-layout-previews-using-emacs-org-blocks
---

![](https://xenodium.github.io/images/swiftui-layout-previews-using-emacs-org-blocks/ob-swiftui.gif)

✨ *UPDATE: The snippets in this post are outdated. See [ob-swiftui](https://github.com/xenodium/ob-swiftui) for better SwiftUI babel support*. ✨

Chris Eidhof [twitted](https://twitter.com/chriseidhof/status/1261360332594974721) a handy [snippet](https://gist.github.com/chriseidhof/26768f0b63fa3cdf8b46821e099df5ff) that enables quickly bootstrapping throwaway SwiftUI code. It can be easily integrated into other tools for rapid experimentation.

Being a SwiftUI noob, I could use some SwiftUI integration with my editor of choice. With some elisp glue and a small patch, Chris's snippet can be used to generate SwiftUI inline previews using Emacs org babel. This is particularly handy for playing around with SwiftUI layouts.

We can piggyback ride off zweifisch's [ob-swift](https://github.com/zweifisch/ob-swift) by advicing *org-babel-execute:swift* to inject the org source block into the bootstrapping snippet. We also add a hook to *org-babel-after-execute-hook* to automatically refresh the inline preview.

If you're a [use-package](https://github.com/jwiegley/use-package) user, the following snippet should make things fairly self-contained (if you have [melpa](https://melpa.org/) set up already).

``` {.commonlisp org-language="emacs-lisp"}
(use-package org
  :hook ((org-mode . org-display-inline-images))
  :config

  (use-package ob
    :config

    (use-package ob-swift
      :ensure t
      :config
      (org-babel-do-load-languages 'org-babel-load-languages
                                   (append org-babel-load-languages
                                           '((swift     . t))))

      (defun ar/org-refresh-inline-images ()
        (when org-inline-image-overlays
          (org-redisplay-inline-images)))

      ;; Automatically refresh inline images.
      (add-hook 'org-babel-after-execute-hook 'ar/org-refresh-inline-images)

      (defun adviced:org-babel-execute:swift (f &rest args)
        "Advice `adviced:org-babel-execute:swift' enabling swiftui header param."
        (let* ((body (nth 0 args))
               (params (nth 1 args))
               (swiftui (cdr (assoc :swiftui params)))
               (output))
          (when swiftui
            (assert (or (string-equal swiftui "preview")
                        (string-equal swiftui "interactive"))
                    nil ":swiftui must be either preview or interactive")
            (setq body (format
                        "
import Cocoa
import SwiftUI
import Foundation

let screenshotURL = URL(fileURLWithPath: NSTemporaryDirectory(), isDirectory: true).appendingPathComponent(ProcessInfo.processInfo.globallyUniqueString + \".png\")
let preview = %s

NSApplication.shared.run {
  %s
}

extension NSApplication {
  public func run<V: View>(@ViewBuilder view: () -> V) {
    let appDelegate = AppDelegate(view())
    NSApp.setActivationPolicy(.regular)
    mainMenu = customMenu
    delegate = appDelegate
    run()
  }
}

extension NSApplication {
  var customMenu: NSMenu {
    let appMenu = NSMenuItem()
    appMenu.submenu = NSMenu()

    let quitItem = NSMenuItem(
      title: \"Quit \(ProcessInfo.processInfo.processName)\",
      action: #selector(NSApplication.terminate(_:)), keyEquivalent: \"q\")
    quitItem.keyEquivalentModifierMask = []
    appMenu.submenu?.addItem(quitItem)

    let mainMenu = NSMenu(title: \"Main Menu\")
    mainMenu.addItem(appMenu)
    return mainMenu
  }
}

class AppDelegate<V: View>: NSObject, NSApplicationDelegate, NSWindowDelegate {
  var window = NSWindow(
    contentRect: NSRect(x: 0, y: 0, width: 414 * 0.2, height: 896 * 0.2),
    styleMask: [.titled, .closable, .miniaturizable, .resizable, .fullSizeContentView],
    backing: .buffered, defer: false)

  var contentView: V

  init(_ contentView: V) {
    self.contentView = contentView
  }

  func applicationDidFinishLaunching(_ notification: Notification) {
    window.delegate = self
    window.center()
    window.contentView = NSHostingView(rootView: contentView)
    window.makeKeyAndOrderFront(nil)

    if preview {
      screenshot(view: window.contentView!, saveTo: screenshotURL)
      // Write path (without newline) so org babel can parse it.
      print(screenshotURL.path, terminator: \"\")
      NSApplication.shared.terminate(self)
      return
    }

    window.setFrameAutosaveName(\"Main Window\")
    NSApp.activate(ignoringOtherApps: true)
  }
}

func screenshot(view: NSView, saveTo fileURL: URL) {
  let rep = view.bitmapImageRepForCachingDisplay(in: view.bounds)!
  view.cacheDisplay(in: view.bounds, to: rep)
  let pngData = rep.representation(using: .png, properties: [:])
  try! pngData?.write(to: fileURL)
}
"
                        (if (string-equal swiftui "preview")
                            "true"
                          "false")
                        body))
            (setq args (list body params)))
          (setq output (apply f args))
          (when org-inline-image-overlays
            (org-redisplay-inline-images))
          output))

      (advice-add #'org-babel-execute:swift
                  :around
                  #'adviced:org-babel-execute:swift))))
```

~~Snippet also at github [gist](https://gist.github.com/xenodium/79154033bc26e733b8c43af228cbce5b) and included in [my emacs config](https://github.com/xenodium/dotsies/blob/master/emacs/features/fe-org.el)~~.

*UPDATE: See [ob-swiftui](https://github.com/xenodium/ob-swiftui) for a better version of babel SwiftUI support.*

Once the snippet is evaluated, we're ready to use in an org babel block. We introduced the *:swiftui* header param to switch between inline static *preview* and *interactive* mode.

To try out an inline *preview*, create a new org file (eg. swiftui.org) and a source block like:

![](https://xenodium.github.io/images/swiftui-layout-previews-using-emacs-org-blocks/vstack.jpg)

Place the cursor anywhere inside the source block (#+begin_src/#+end_src) and press C-c C-c (or M-x org-ctrl-c-ctrl-c).

To run interactively, change the *:swiftui* param to *interactive* and press C-c C-c (or M-x org-ctrl-c-ctrl-c). When running interactively, press "q" (without ⌘) to quit the Swift app.

comments on [twitter](https://twitter.com/xenodium/status/1194224168709083137).

## Update

-   Tweaked the snippet to make it more self-contained and made the steps more reproducible. Need to work out how to package things to make them more accessible. May be best to contribute as a patch to [ob-swift](https://github.com/zweifisch/ob-swift) and we can avoid the icky *advice-add*.
-   Thanks to Chris Eidhof for PNG support (instead of TIFF). Also TIL Swift's *print* has got a terminator param.

# \[2020-05-22 Fri\] Open Emacs elfeed links in the background
---
id: open-emacs-elfeed-links-in-background
---

![](https://xenodium.github.io/images/open-emacs-elfeed-links-in-background/background-browse.gif)

Christopher Wellons's [elfeed](https://github.com/skeeto/elfeed) is a wonderful Emacs rss reader. In Mike Zamansky's [Using Emacs 72 - Customizing Elfeed](https://cestlaz.github.io/post/using-emacs-72-customizing-elfeed/) video, he highlights a desire to open elfeed entries in the background. That is, open the current rss entry (or selected entries) without shifting focus from Emacs to your browser. This behaviour is somewhat analogous to ⌘-clicking/ctrl-clicking on multiple links in the browser without losing focus.

I've been wanting elfeed to open links in the background for some time. Zamansky's post was a great nudge to look into it. He points to the relevant [elfeed-search-browse-url](https://github.com/skeeto/elfeed/blob/58ab1f8bcc3014206db42a7a26f3120ba5de4ca6/elfeed-search.el#L783) function, re-implemented to suit his needs. In a similar spirit, I wrote a function to open the current rss entry (or selected entries) in the background.

I'm running macOS, so I took a look at [browse-url-default-macosx-browser](https://github.com/emacs-mirror/emacs/blob/d714aa753b744c903d149a1f6c69262d958c313e/lisp/net/browse-url.el#L1018  I ) to get an idea of how URLs are opened. Simple. It let's macOS handle it via the "open" command, invoked through *start process*. Looking at open's command-line options, we find *–background* which "does not bring the application to the foreground."

``` {.commonlisp org-language="emacs-lisp"}
open --background http://xenodium.com
```

"b" is already bound to *elfeed-search-browse-url*, so in our snippet we'll bind "B" to our new background function, giving us some flexibility:

``` {.commonlisp org-language="emacs-lisp"}
(use-package elfeed
  :ensure t
  :bind (:map elfeed-search-mode-map
              ("B" . ar/elfeed-search-browse-background-url))
  :config
  (defun ar/elfeed-search-browse-background-url ()
    "Open current `elfeed' entry (or region entries) in browser without losing focus."
    (interactive)
    (let ((entries (elfeed-search-selected)))
      (mapc (lambda (entry)
              (assert (memq system-type '(darwin)) t "open command is macOS only")
              (start-process (concat "open " (elfeed-entry-link entry))
                             nil "open" "--background" (elfeed-entry-link entry))
              (elfeed-untag entry 'unread)
              (elfeed-search-update-entry entry))
            entries)
      (unless (or elfeed-search-remain-on-entry (use-region-p))
        (forward-line)))))
```

Maybe xdg-open does a similar thing on linux (I've not looked). Ping me if you have a linux solution and I can update the function.

Happy Emacsing.

ps. I noticed elfeed uses *browse-url-generic* if *elfeed-search-browse-url*'s is invoked with a prefix. Setting [browse-url-generic-program](https://github.com/emacs-mirror/emacs/blob/d0e2a341dd9a9a365fd311748df024ecb25b70ec/lisp/net/browse-url.el#L534) and [browse-url-generic-args](https://github.com/emacs-mirror/emacs/blob/d0e2a341dd9a9a365fd311748df024ecb25b70ec/lisp/net/browse-url.el#L539) to use background options may be a more generic solution. For now, a custom function does the job.

comments on [twitter](https://twitter.com/xenodium/status/1263839324023525376).

# \[2020-05-11 Mon\] Enrich Emacs dired's batching toolbox
---
id: enrich-your-dired-batching-toolbox
---

## Update

I now use [dwim-shell-command](https://github.com/xenodium/dwim-shell-command), which reduces the logic to:

``` {.commonlisp org-language="emacs-lisp" lexical="no"}
(defun dwim-shell-commands-image-to-jpg ()
  "Convert all marked images to jpg(s)."
  (interactive)
  (dwim-shell-command-on-marked-files
   "Convert to jpg"
   "convert -verbose '<<f>>' '<<fne>>.jpg'"
   :utils "convert"))
```

## Original post

Shell one-liners are super handy for batch-processing files. Say you'd like to convert a bunch of images from HEIC to jpg, you could use something like:

``` {.bash org-language="sh"}
for f in *.HEIC ; do convert "$f" "${f%.*}.jpg"; done
```

Save the one-liner (or memorize it) and pull it from your toolbox next time you need it. This is handy as it is, but [Emacs dired](https://www.gnu.org/software/emacs/manual/html_node/emacs/Dired.html) is just a file-management powerhouse. Its *dired-map-over-marks* function is just a few elisp lines away from enabling all sorts of batch processing within your dired buffers.

Dired already enables selecting and deselecting files using all sorts of built-in mechanisms ([dired-mark-files-regexp](https://www.gnu.org/software/emacs/manual/html_node/emacs/Marks-vs-Flags.html), [find-name-dired](https://www.gnu.org/software/emacs/manual/html_node/emacs/Dired-and-Find.html), etc) or wonderful third-party packages like Matus Goljer's [dired-filters](https://github.com/Fuco1/dired-hacks).

Regardless of how you selected your files, here's a snippet to run ImageMagick's [convert](https://imagemagick.org/script/convert.php) on a bunch of selected files:

``` {.commonlisp org-language="emacs-lisp"}
;;; -*- lexical-binding: t; -*-

(defun ar/dired-convert-image (&optional arg)
  "Convert image files to other formats."
  (interactive "P")
  (assert (or (executable-find "convert") (executable-find "magick.exe")) nil "Install imagemagick")
  (let* ((dst-fpath)
         (src-fpath)
         (src-ext)
         (last-ext)
         (dst-ext))
    (mapc
     (lambda (fpath)
       (setq src-fpath fpath)
       (setq src-ext (downcase (file-name-extension src-fpath)))
       (when (or (null dst-ext)
                 (not (string-equal dst-ext last-ext)))
         (setq dst-ext (completing-read "to format: "
                                        (seq-remove (lambda (format)
                                                      (string-equal format src-ext))
                                                    '("jpg" "png")))))
       (setq last-ext dst-ext)
       (setq dst-fpath (format "%s.%s" (file-name-sans-extension src-fpath) dst-ext))
       (message "convert %s to %s ..." (file-name-nondirectory dst-fpath) dst-ext)
       (set-process-sentinel
        (if (string-equal system-type "windows-nt")
            (start-process "convert"
                           (generate-new-buffer (format "*convert %s*" (file-name-nondirectory src-fpath)))
                           "magick.exe" "convert" src-fpath dst-fpath)
          (start-process "convert"
                         (generate-new-buffer (format "*convert %s*" (file-name-nondirectory src-fpath)))
                         "convert" src-fpath dst-fpath))
        (lambda (process state)
          (if (= (process-exit-status process) 0)
              (message "convert %s ✔" (file-name-nondirectory dst-fpath))
            (message "convert %s ❌" (file-name-nondirectory dst-fpath))
            (message (with-current-buffer (process-buffer process)
                       (buffer-string))))
          (kill-buffer (process-buffer process)))))
     (dired-map-over-marks (dired-get-filename) arg))))
```

The snippet can be shorter, but wouldn't be as friendly. We ask users to provide desired image format, spawn separate processes (avoids blocking Emacs), and generate a basic report. Also adds support for Windows.

![](https://xenodium.github.io/images/enrich-your-dired-batching-toolbox/batch-dired.gif)

## BEWARE

The snippet isn't currently capping the number of processes, but hey we can revise in the future…

## Update

Thanks to [Philippe Beliveau](https://github.com/pbeliveau) for pointing out a bug in snippet (now updated) and changes to make it Windows compatible.

# \[2020-05-09 Sat\] Banana oats pancakes recipe
---
id: banana-oats-pancakes-recipe
---

![](https://xenodium.github.io/images/banana-oats-pancakes-recipe/banpan.jpg)

## Blend

-   Ripe banana.
-   2 Eggs.
-   1/3 cup instant oats.
-   1/2 teaspoon baking powder.

Really is this easy. Add all ingredients and blend.

## Cook

Medium to low heat. Cook for 3 minutes. Flip. Cook for 1 minute. You're done.

# \[2020-05-06 Wed\] Emacs: connect my Bluetooth speaker
---
id: emacs-connect-my-bluetooth-speaker
---

Connecting and disconnecting bluetooth devices on macOS is fairly simple: use the menu bar utility.

![](https://xenodium.github.io/images/emacs-connect-my-bluetooth-speaker/macos-menu.png)

*But could we make it quicker from our beloved editor?*

Turns out with a little elisp glue, we can fuzzy search our Bluetooth devices and toggle connections. We can use [Oleh Krehel's](https://twitter.com/_abo_abo) [ivy-read](https://github.com/abo-abo/swiper) for fuzzy searching and [Felix Lapalme](https://twitter.com/lap_felix)'s nifty [BluetoothConnector](https://github.com/lapfelix/BluetoothConnector) to list devices and toggle Bluetooth connections.

As a bonus, we can make it remember the last selected device, so you can quickly toggle it again.

``` {.commonlisp org-language="emacs-lisp"}
(defun ar/ivy-bluetooth-connect ()
  "Connect to paired bluetooth device."
  (interactive)
  (assert (string-equal system-type "darwin")
          nil "macOS only. Sorry :/")
  (assert (executable-find "BluetoothConnector")
          nil "Install BluetoothConnector from https://github.com/lapfelix/BluetoothConnector")
  (ivy-read "(Dis)connect: "
            (seq-map
             (lambda (item)
               (let* ((device (split-string item " - "))
                      (mac (nth 0 device))
                      (name (nth 1 device)))
                 (propertize name
                             'mac mac)))
             (seq-filter
              (lambda (line)
                ;; Keep lines like: af-8c-3b-b1-99-af - Device name
                (string-match-p "^[0-9a-f]\\{2\\}" line))
              (with-current-buffer (get-buffer-create "*BluetoothConnector*")
                (erase-buffer)
                ;; BluetoothConnector exits with 64 if no param is given.
                ;; Invoke with no params to get a list of devices.
                (unless (eq 64 (call-process "BluetoothConnector" nil (current-buffer)))
                  (error (buffer-string)))
                (split-string (buffer-string) "\n"))))
            :require-match t
            :preselect (when (boundp 'ar/misc-bluetooth-connect--history)
                         (nth 0 ar/misc-bluetooth-connect--history))
            :history 'ar/misc-bluetooth-connect--history
            :caller 'ar/toggle-bluetooth-connection
            :action (lambda (device)
                      (start-process "BluetoothConnector"
                                     (get-buffer-create "*BluetoothConnector*")
                                     "BluetoothConnector" (get-text-property 0 'mac device) "--notify"))))
```

![](https://xenodium.github.io/images/emacs-connect-my-bluetooth-speaker/connect-disconnect.gif)

comments on [twitter](https://twitter.com/xenodium/status/1258148035319734273).

# \[2020-05-02 Sat\] Duti: changing default macOS apps
---
id: duti-changing-default-macos-apps
---

Future self example, setting [mpv.io](https://mpv.io/) to open all aiff files on macOS:

``` bash
duti -s io.mpv aiff
```

# \[2020-04-26 Sun\] Neapolitan pizza recipe
---
id: neapolitan-pizza-recipe
---

Full disclosure: I'm a complete noob at making pizza. It's my second pizza, but hey, it was tasty and fun to make! Making pizza at home is not as far-fetched as I initially thought.

## UPDATES:

I've made this recipe a couple of times. Made two improvements worth mentioning.

### Flan tin / quiche pan

![](https://xenodium.github.io/images/neapolitan-pizza-recipe/round_pie.jpg)

My first pizzas were rectangular, matching the baking tray shape, but I really wanted round pies. I found a quiche pan at home and gave that a try. Worked pretty well. The dish bottom comes up, which is pretty handy.

### Double baking

Bake in two stages:

1.  Bake the pizza for 6 minutes (without the mozarella) at bottom of oven.
2.  Add mozzarella and make for 4 minutes at top of the oven.

## Recipe

Ok, on to the recipe now…

### Dissolve the yeast

-   7g of yeast.
-   325ml of lukewarm water.

Dissolve the yeast in the lukewarm water.

### Mixing the dough

![](https://xenodium.github.io/images/neapolitan-pizza-recipe/mix1.jpg)

![](https://xenodium.github.io/images/neapolitan-pizza-recipe/mix2.jpg)

-   500g of flour.
-   1 teaspoon of salt.

Gradually add flour to the yeast and water mix, using the bottom of a spoon to work it until smooth (no lumps). The dough will be very sticky at first. Stay faithful to the spoon. It'll work. BBC's [How to make pizza like a Neapolitan master](http://www.bbc.com/travel/story/20200415-how-to-make-pizza-like-a-neapolitan-master) has a great demo. I followed the dough technique.

### Kneading the dough

![](https://xenodium.github.io/images/neapolitan-pizza-recipe/knead1.jpg)

![](https://xenodium.github.io/images/neapolitan-pizza-recipe/knead2.jpg)

Sprinkle some flour on the table and knead the dough (punch, stretch, and fold many times) from previous step. Eventually, the dough will hold its shape.

### Make 4 balls

![](https://xenodium.github.io/images/neapolitan-pizza-recipe/cut_in_four.jpg)

![](https://xenodium.github.io/images/neapolitan-pizza-recipe/four_balls.jpg)

Roll the dough into a cylinder and cut into 4 pieces. Make 4 balls.

### Make the tomato sauce

![](https://xenodium.github.io/images/neapolitan-pizza-recipe/garlic_slice.jpg)

![](https://xenodium.github.io/images/neapolitan-pizza-recipe/sauce_done.jpg)

-   500g of passata.
-   3 cloves of garlic.

I love garlic. Who doesn't? Slice the garlic finely and combine with the passata in a class jar. Shake it a little. Garlic and passata. That's your sauce.

### Cover for 2 hours

![](https://xenodium.github.io/images/neapolitan-pizza-recipe/put_away.jpg)

![](https://xenodium.github.io/images/neapolitan-pizza-recipe/after_hours.jpg)

Place the 4 dough balls into a container and cover with a damp cloth for 2 hours. You can make 4 pizzas.

*\*Rookie mistake: I should have used a bigger container. The balls grew and merged.*

### Preheat oven

Preheat the oven at 250°C.

### Stretch base

![](https://xenodium.github.io/images/neapolitan-pizza-recipe/stretch.jpg)

Sprinkle more flour on table prior to shaping the dough. Place ball on table, flatten. Flip over, flatten again. Gradually stretch until you have the shape and thickness desired.

### Place base on baking tray

-   Semolina
-   Aluminium foil

Line up the tray with some aluminium foil. Before transferring the base on to the baking tray, sprinkle semolina (or breadcrumbs) on the foil (it helps prevent the dough from sticking).

### Toppings

![](https://xenodium.github.io/images/neapolitan-pizza-recipe/oiled.jpg)

![](https://xenodium.github.io/images/neapolitan-pizza-recipe/parmesan.jpg)

![](https://xenodium.github.io/images/neapolitan-pizza-recipe/mozarella.jpg)

-   Tomato sauce.
-   Salt.
-   Olive oil.
-   Parmesan cheese.
-   125g of Mozzarella cheese.
-   Fresh basil.

Spread some of the tomato sauce with a spoon. Sprinkle salt, olive oil, and parmesan cheese. Break the mozzarella into pieces and spread throughout. Add some basil leaves. Your basic margherita pizza is now ready for the oven.

### Bake pizza

Place the tray in the oven for 10 minutes. This worked for my oven, which goes up to 250°C. Either way, keep an eye on it.

### Post baking toppings

![](https://xenodium.github.io/images/neapolitan-pizza-recipe/final.jpg)

-   Anchovies.

Controversial, but I really like anchovies. Add them post-baking and you're good to go. Enjoy your pizza.

### Helpful references

-   [How to make pizza like a Neapolitan master (BBC)](http://www.bbc.com/travel/story/20200415-how-to-make-pizza-like-a-neapolitan-master).
-   [How to Make Perfect Pizza (Gennaro Contaldo - YouTube)](https://www.youtube.com/watch?v=1-SJGQ2HLp8).

# \[2020-04-21 Tue\] Oatmeal cookie recipe
---
id: oatmeal-cookie-recipe
---

![](https://xenodium.github.io/images/oatmeal-cookie-recipe/oatcookies.jpg)

![](https://xenodium.github.io/images/oatmeal-cookie-recipe/ingredients.jpg)

I combined elements from two recipes: [3 Ingredient oatmeal cookies (The Food Medic)](https://thefoodmedic.co.uk/2020/01/3-ingredient-oatmeal-cookies/), Amy's [Healthy Banana Oatmeal Raisin Cookies (Amy's Healthy Baking)](https://amyshealthybaking.com/blog/2018/01/21/banana-oatmeal-raisin-cookies/) and added my own touches.

## Preheat oven

Preheat the oven at 180°C.

## Mash bananas

-   2 medium ripe bananas.

Mash until bananas have no significant lumps.

## Mix most ingredients (except oats)

-   4 tablespoons crunchy peanut butter.
-   1/2 teaspoon of ground cinnamon.
-   1/2 teaspoon of ground cardamom.
-   1/4 teaspoon of vanilla.
-   1/3 cup raisins.

Add the peanut butter, cinnamon, cardamom, and vanilla into the mashed bananas. Mix well. Add raisins and mix a little further to spread them out.

## Add oats

-   1 3/4 cups of oats.

Add the oats to the mix in a few rounds to ensure its evenly mixed.

## Flattened balls in tray

Make balls, place on baking tray, and gently flatten. They'll be on the chunky side.

*Note: They won't spread as much as traditional cookies.*

## Bake for 15 mins

Bake for about 15 minutes or until golden.

## Let cool off and enjoy

Wait a little and nom nom nom…

ps. Full recipe source in [org file](https://github.com/xenodium/xenodium.github.io/blob/master/index.org).

# \[2020-04-21 Tue\] TIL (today I learned) bookmarks
---
id: til-today-i-learned-bookmarks
---



-   [Hashrocket - Today I Learned](https://til.hashrocket.com/).
-   [jbranchaud/til: Today I Learned](https://github.com/jbranchaud/til).
-   [secretgeek: Today I Learned](https://til.secretgeek.net/).
-   [Simon Willison: TIL](https://til.simonwillison.net/).
-   [til - zerokspot.com](https://zerokspot.com/tags/til).
-   [Today I Learned — Sara Soueidan – Freelance-Front-End UI/UX Developer](https://www.sarasoueidan.com/today-i-learned/).

# \[2020-04-19 Sun\] mu/mu4e 1.4 released
---
id: mumu4e-14-released
---

![](https://xenodium.github.io/images/mumu4e-14-released/mu14.png)

[mu/mu4e 1.4 is out](https://www.reddit.com/r/emacs/comments/g3nsgg/mumu4e_14_has_been_released/). About a week ago, I built and installed its [pre-release version (1.3.10)](https://github.com/djcb/mu/releases/tag/1.3.10) and noted [build steps on macOS](http://xenodium.com/building-mumu4e-on-macos/). It's been working great for me. Today, I updated to 1.4.

I was keen to try the new release out. I had been experiencing a short delay immediately after syncing/indexing mail. An initial investigation pointed to contact syncing, but I didn't dig further. The 1.4 release notes had a promising entry:

> In many cases, \`mu4e' used to receive *all* contacts after each indexing operation; this was slow for some users, so we have updated this to *only* get the contacts that have changed since the last round.

After upgrading. The delay is gone for me ø/

**Note**: there are a few config tweaks needed for the 1.4 upgrade, but these are well-documented in the [release notes](https://github.com/djcb/mu/releases/tag/1.4). For me, it primarily consisted of:

-   Swapping elisp *mu4e-maildir* var for *mu init –maildir path/to/local/IMAP*.
-   Swapping elisp *mu4e-user-mail-address-list* for *mu init –my-address address1@domain.com –my-address address2@domain.com*.
-   Disabling *mu4e-maildirs-extension* (not yet compatible with mu 1.4). No issues here, since I hardly ever look at the *mu4e-main* buffer. I have global binding to my unread messages that looks a little something like this:

``` {.commonlisp org-language="emacs-lisp"}
(defun ar/mu4e-view-unread-messages ()
  (interactive)
  (mu4e-headers-search-bookmark (concat "flag:unread AND "
                                        "flag:unread AND "
                                        "NOT flag:trashed AND "
                                        "(maildir:/box1/INBOX OR "
                                        "maildir:/box2/INBOX)")))
```

comments on [twitter](https://twitter.com/xenodium/status/1251852526246379520).

# \[2020-04-14 Tue\] Libya travel bookmarks
---
id: libya-travel-bookmarks
---

-   [The city of Ghadames on the edge of the Saharan desert](https://twitter.com/wrathofgnon/status/1249544131715534849?s=12).

# \[2020-04-07 Tue\] Trimming videos with ffmpeg
---
id: trimming-videos-with-ffmpeg
---

Via Bernd Verst's [Trim Videos Instantly](https://bernd.dev/2020/04/trim-videos-instantly/):

Start time + duration

``` bash
ffmpeg -ss hh:mm:ss.msec -i in.mpeg -c copy -map 0 -t hh:mm:ss.msec out.mpeg
```

Start time + end time

``` bash
ffmpeg -ss hh:mm:ss.msec -i in.mpeg -c copy -map 0 -to hh:mm:ss.msec out.mpeg
```

# \[2020-04-06 Mon\] Emacs's counsel-M-x meets multiple cursors
---
id: emacss-counsel-m-x-meets-multiple-cursors
---

I'm a fan of Magnar Sveen's [multiple cursors](https://github.com/magnars/multiple-cursors.el) Emacs implementation. It's just so fun to use and works very well with commands bound to my favorite keys.

Every now and then I'd like to execute extended commands on all cursors, but they have no keys bound to them. If you're an [ivy/counsel](https://github.com/abo-abo/swiper) fan like me (and all packages by [Abo Abo](https://oremacs.com/about/)), you use *counsel-M-x* to invoke commands. However, *counsel-M-x* doesn't support multiple cursors out of the box. Luckily, this is Emacs and we can fix that…

Back in December 2019, I made a note to revisit [u/snippins1987](https://www.reddit.com/user/snippins1987/)'s weekly tip to pair [helm-M-x with multiple cursors](https://www.reddit.com/r/emacs/comments/eeyhdz/weekly_tipstricketc_thread/fch1bkv?utm_source=share&utm_medium=web2x). Finally got back to it. With a few changes, we can also make the snippet work with *counsel-M-x* ø/.

``` {.commonlisp org-language="emacs-lisp"}
(defun adviced:counsel-M-x-action (orig-fun &rest r)
  "Additional support for multiple cursors."
  (apply orig-fun r)
  (let ((cmd (intern (car r))))
    (when (and (boundp 'multiple-cursors-mode)
               multiple-cursors-mode
               cmd
               (not (memq cmd mc--default-cmds-to-run-once))
               (not (memq cmd mc/cmds-to-run-once))
               (or mc/always-run-for-all
                   (memq cmd mc--default-cmds-to-run-for-all)
                   (memq cmd mc/cmds-to-run-for-all)
                   (mc/prompt-for-inclusion-in-whitelist cmd)))
      (mc/execute-command-for-all-fake-cursors cmd))))

(advice-add #'counsel-M-x-action
            :around
            #'adviced:counsel-M-x-action)
```

![](https://xenodium.github.io/images/emacss-counsel-m-x-meets-multiple-cursors/counsel-mx-mc.gif)

# \[2020-04-05 Sun\] Portland travel bookmarks
---
id: portland-travel-bookmarks
---

-   [Powell’s Books \| The World’s Largest Independent Bookstore](https://www.powells.com/).

# \[2020-03-29 Sun\] String inflection Emacs package
---
id: string-inflection-emacs-package
---

[string-inflection](https://github.com/akicho8/string-inflection) (by [Akira Ikeda](https://github.com/akicho8)) is a nifty package to cycle through string case styles: [camel, snake, kebab…](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles) The package includes a handful of cycling functions for different languages (Ruby, Python and Java), but it's easy to mix and match to roll your own. For now, I'm binding *C-M-j* to *string-inflection-cycle*, which is an alias to *string-inflection-ruby-style-cycle*.

``` {.commonlisp org-language="emacs-lisp"}
(use-package string-inflection
  :ensure t
  :bind (:map prog-mode-map
              ("C-M-j" . string-inflection-cycle)))
```

![](https://xenodium.github.io/images/string-inflection-emacs-package/string_inflection.gif)

comments on [twitter](https://twitter.com/xenodium/status/1244355205698912261?s=20)

# \[2020-03-28 Sat\] Turkey travel bookmarks
---
id: turkey-travel-bookmarks
---

-   [Tomb of Amyntas - Wikipedia](https://en.wikipedia.org/wiki/Tomb_of_Amyntas).

# \[2020-03-25 Wed\] Dal Makhani (black lentils) recipe
---
id: dal-makhani-black-lentils-recipe
---

![](https://xenodium.github.io/images/dal-makhani-black-lentils-recipe/dal.jpg)

## Soak beans (overnight)

-   1 cup of rajmah (kidney beans).
-   2 cups of sabut urad (black lentils).

Place the beans in a bowl with plenty of water. The beans will soak it up so ensure there's enough.

## Cooking the beans

-   3 liters of water.
-   1 cinamon stick.
-   1 tablespoon of turmeric.
-   2 bay leaves.

Drain the beans and combine new ingredients into a pot. Bring to a boil and simer for 1.5 hours. Check beans aren't firm (give 'em a try'). If so extend another 15-30 mins.

## Prepare paste

-   1 4 cm piece of ginger.
-   1 large onion.
-   6 garlic cloves.
-   2 tomatoes.

Put through blender (with choppin pulse) or food processor until you get a paste.

## Golden paste

-   Paste.
-   3 tablespoons of butter.
-   1 tablespoon of cumin seeds.
-   1 tablespoon of coriander powder.
-   1 tablespoon of chilly powder (or less to make milder).
-   1 fresh red hot pepper (find one with medium heat level) chopped.
-   1 tablespoon of cumin powder.
-   1/4 cup of water.
-   3/4 tablespoon of salt.

Heat up the butter (medium heat) and brown the cumin seeds (maybe 30 seconds). Add the paste from previous step. Cook for about 4 minutes or until golden. Add the remaining ingredients in step (except water) and cook for another 30 seconds. Add the water and salt and mix to make more fluid and remove from heat.

## Tying it all together

-   1 tablespoon of panchpuram (cumin, fenugreek, mistard, and fennel seeds).
-   300 ml of double cream.

Combine the cooked beans, golden paste, and seeds. Simmer for about 15 minutes. Add the cream and cook for about 2 minutes. You are effectively done.

## Garnish (optional)

You can serve and optionally garnish with some chopped coriander. Recommended.

## Serve with

Basmati rice, rotis, buttered buns, or even corn tortillas (unorthodox, but hey).

# \[2020-03-21 Sat\] Modern Emacs lisp libraries
---
id: modern-elisp-libraries
---

Quickly finding related built-in elisp functions (without prefixes) can sometimes take a little poking around.

Some modern and predictable built-in exceptions I now reach out to are:

-   [map.el](https://nicolas.petton.fr/ressources/emacsconf2015/) for key/values, alists, hash-tables and arrays (built-in as of Emacs 25.1).
-   [seq.el](https://nicolas.petton.fr/ressources/emacsconf2015/) for sequence manipulation functions (built-in as of Emacs 25.1).
-   [subr-x.el](https://github.com/emacs-mirror/emacs/blob/master/lisp/emacs-lisp/subr-x.el) has a handful of string functions (built-in as of Emacs 24.4).
-   [let-alist.el](https://endlessparentheses.com/new-on-elpa-and-in-emacs-25-1-let-alist.html) wonderful syntax for alists, great for json (built-in as of Emacs 25.1).

If you don't mind reaching out to third-party libs (you likely have some of these already installed), here are some modern, predictable, and well-documented ones that always get me out of trouble:

-   [s.el](https://github.com/magnars/s.el#functions) string manipulation.
-   [f.el](https://github.com/rejeep/f.el) file/path handling.
-   [dash.el](https://github.com/magnars/dash.el#functions) for lists.
-   [ht.el](https://github.com/Wilfred/ht.el) for hashtables.
-   [ts.el](https://github.com/alphapapa/ts.el) for date and time.

I'm happy with built-ins like map.el, seq.el, and let-alist.el. subr-x.el is also pretty nice, although not as full-featured as third-party s.el.

Am I missing out on other modern built-ins or third-party libraries?

UPDATE: Added a handful of newly discovered libraries plus [suggestions by Daniel Martín](https://twitter.com/dmartincy/status/1241444701754085383?s=20) (thanks!). Not tried any of these myself.

-   [rtree.el](https://github.com/emacs-mirror/emacs/blob/master/lisp/rtree.el) binary tree that stores ranges (Built-in).
-   [ov.el](https://github.com/emacsorphanage/ov) simple way to manipulate overlay.
-   Toby Cubitt's [libraries](http://www.dr-qubit.org/tags/computing-code-emacs.html) (heap, overlays, queue, avl-tree, trie, dict-tree, etc).
-   [shadchen.el](https://github.com/VincentToups/shadchen-el) pattern-matching.
-   [m-buffer.el](https://phillord.github.io/m-buffer-el) buffers.
-   [esxml.el](https://github.com/tali713/esxml) xml and html.
-   [a.el](https://github.com/plexus/a.el) associative structures.
-   [asoc.el](https://github.com/troyp/asoc.el) association list library.
-   [yk-color.el](https://github.com/yurikhan/yk-color) linear RGB color manipulation.

comments on [twitter](https://twitter.com/xenodium/status/1241439306511720448)

# \[2020-03-20 Fri\] Emacs smartparens auto-indent
---
id: emacs-smartparens-auto-indent
---

While I do most editing in Emacs, I use Xcode every now and then. I like Xcode's pair matching (of brackets) combined with its auto-indent.

![](https://xenodium.github.io/images/emacs-smartparens-auto-indent/xcode_indent.gif)

While the wonderful [smartparens](https://github.com/Fuco1/smartparens) gives Emacs pair-matching powers, it doesn't automatically indent between pairs (out of the box anyway).

![](https://xenodium.github.io/images/emacs-smartparens-auto-indent/indent_bracket_before.gif)

Luckily, smartparens does provide *sp-local-pair,* which enables us to achieve a similar goal.

With a short snippet, we can autoindent between {}, \[\], and () when pressing return in-between.

``` {.commonlisp org-language="emacs-lisp"}
(defun indent-between-pair (&rest _ignored)
  (newline)
  (indent-according-to-mode)
  (forward-line -1)
  (indent-according-to-mode))

(sp-local-pair 'prog-mode "{" nil :post-handlers '((indent-between-pair "RET")))
(sp-local-pair 'prog-mode "[" nil :post-handlers '((indent-between-pair "RET")))
(sp-local-pair 'prog-mode "(" nil :post-handlers '((indent-between-pair "RET")))
```

![](https://xenodium.github.io/images/emacs-smartparens-auto-indent/indent_bracket_after.gif)

comments on [twitter](https://twitter.com/xenodium/status/1241104117264781312)

# \[2020-03-20 Fri\] Solarpunk bookmarks
---
id: solarpunk-bookmarks
---



-   [SOLARPUNK : A REFERENCE GUIDE - Solarpunks - Medium](https://medium.com/solarpunks/solarpunk-a-reference-guide-8bcf18871965#060e).
-   [Solarpunk: Notes toward a manifesto (Project Hieroglyph)](https://hieroglyph.asu.edu/2014/09/solarpunk-notes-toward-a-manifesto/).

# \[2020-03-10 Tue\] sqlite bookmarks
---
id: sqlite-bookmarks
---



-   [DuckDB: SQLite for Analytics \| Hacker News](https://news.ycombinator.com/item?id=23287278).
-   [Inserting 130M SQLite rows per minute from a scripting language \| Hacker News](https://news.ycombinator.com/item?id=27944065).
-   [Inserting One Billion Rows in SQLite Under A Minute - blag](https://avi.im/blag/2021/fast-sqlite-inserts/).
-   [LiteCLI – A user-friendly command-line client for SQLite database (Hacker News)](https://news.ycombinator.com/item?id=18831470).
-   [SQLite As An Application File Format](https://www.sqlite.org/appfileformat.html).
-   [Zumero: Efficient sync by using multiple SQLite files](http://ericsink.com/entries/rss_cat_3.html).

# \[2020-02-26 Wed\] covid-19 bookmarks
---
id: covid-19-bookmarks
---



-   [A Data-Centric Approach to Plan Appropriate COVID-19 Response in the United States](https://www.linkedin.com/pulse/data-centric-approach-plan-appropriate-covid-19-response-tee).
-   [Coronavirus action plan: a guide to what you can expect across the UK - GOV.UK](https://www.gov.uk/government/publications/coronavirus-action-plan/coronavirus-action-plan-a-guide-to-what-you-can-expect-across-the-uk).
-   [Coronavirus COVID-19 Global Cases by Johns Hopkins CSSE](https://gisanddata.maps.arcgis.com/apps/opsdashboard/index.html#/bda7594740fd40299423467b48e9ecf6).
-   [COVID-19 (r/COVID19)](https://www.reddit.com/r/COVID19).
-   [COVID-19 Discussion (r/China_Flu/)](https://www.reddit.com/r/China_Flu/).
-   [Covid-19 DocSearch free access](https://covid-search.doctorevidence.com).
-   [COVID19 - AMA with r/COVID19 mod u/Jennifer Cole at 10.00pm GMT 25 Feb](https://www.reddit.com/r/COVID19/comments/f9dbeq/covid19_what_do_we_have_to_fear_from_a_pandemic/).
-   [Handbook of Covid-19 Prevention and Treatment from Hospital with 0% fatality (HN)](https://news.ycombinator.com/item?id=22624091).
-   [microCOVID Project (calculate risk)](https://www.microcovid.org).
-   [New research suggests runners should be further than 2m apart](https://www.runnersworld.com/uk/news/a32094750/coronavirus-runner-slipstream/).
-   [Novel Coronavirus (2019-nCoV) (r/coronavirus)](https://www.reddit.com/r/Coronavirus/).
-   [Physics of COVID-19 Transmission \| MIT OpenCourseWare](https://ocw.mit.edu/resources/res-10-s95-physics-of-covid-19-transmission-fall-2020/).
-   [Self-care Tips if you become sick with COVID-19 from an activist nurse](https://docs.google.com/document/u/1/d/1DioVg-8nu25up0JMdd-w3AsJPy1tl0MsobfG6TzGOws/mobilebasic).
-   [WHO: When and how to use masks](https://www.who.int/emergencies/diseases/novel-coronavirus-2019/advice-for-public/when-and-how-to-use-masks).

# \[2020-02-15 Sat\] Security bookmarks
---
id: security-bookmarks
---



-   [A Graduate Course in Applied Cryptography \| Hacker News](https://news.ycombinator.com/item?id=22980003).
-   [Jeffrey Paul: Stupid Unix Tricks (ssh)](https://sneak.berlin/20191011/stupid-unix-tricks/).
-   [Jeffrey Paul: Stupid Unix Tricks (yubikey setup)](https://sneak.berlin/20191011/stupid-unix-tricks/).
-   [Stay paranoid and trust no one. Overview of common security vulnerabilities in web applications](https://lchsk.com/stay-paranoid-and-trust-no-one-overview-of-common-security-vulnerabilities-in-web-applications.html).

# \[2020-02-15 Sat\] Nix bookmarks
---
id: nix-bookmarks
---



-   [Daniel Bergey's dotfiles/emacs.nix](https://github.com/bergey/dotfiles/blob/4807ef9de187018a9cf7e1d571fc530e3ce07bfb/emacs/emacs.nix).
-   [I Was Wrong about Nix \| Hacker News](https://news.ycombinator.com/item?id=22295102).
-   [I was wrong about Nix](https://christine.website/blog/i-was-wrong-about-nix-2020-02-10).

# \[2020-01-10 Fri\] Plants bookmarks
---
id: plants-bookmarks
---



-   [Aechmea 'Blue Rain' Blue rain Bromeliad \| House of Plants](https://www.houseofplants.co.uk/plants/aechmea-blue-rain_blue-rain-bromeliad_63988.html).
-   [Air-purifying Plants – Bakker.com](https://en-gb.bakker.com/collections/air-purifying-plants).
-   [Citronella Mosquito Plant](https://twitter.com/Hydeez411/status/1409883023772901379).
-   [Elm plants](https://www.elmshop.co.uk/plants).
-   [Farm Hack](https://farmhack.org/tools).
-   [Guerilla Gardening (2015) \| Hacker News](https://news.ycombinator.com/item?id=21859303).
-   [The Gardening Club® - Crews Hill, Enfield](https://www.thegardeningclub.co.uk/).

# \[2019-12-29 Sun\] Fixing Honeywell CM927's dead screen
---
id: fixing-honeywell-cm927-dead-screens
---

My Honeywell CM927 thermostat's screen had been getting progressively worse over the last year. As of late, the screen was of little use.

![](https://xenodium.github.io/images/fixing-honeywell-cm927-dead-screens/before.png)

A random search yielded the [Honeywell CM927 LCD screen fail - common?](https://www.homeownershub.com/uk-diy/honeywell-cm927-lcd-screen-fail-common-1058940-.htm) thread, with a promising comment by Phil:

> "Strip the unit and remove the circuit board (just a few plastic clips, no screws). Remove the LCD assembly from the circuit board (more plastic clips and an eight pin push connection). Removed the LCD unit from the clear plastic housing (more plastic clips). Finally heat up the plastic ribbon where it is stuck to the circuit board (hair dryer will do trick) and then firmly press it onto the circuit board… probably worth doing this several times; in effect you are remating the ribbon to the circuit board by softening the adhesive. Put it all back together and it should be working again."

Phil's instructions were great. There's also a super handy [video](https://www.youtube.com/watch?v=W4LxHn5Y_l4) by [El Tucan](https://www.youtube.com/channel/UC3Dbv6X-_7fCfa4AvsxK_zw), also [linked by Stevie](https://www.homeownershub.com/uk-diy/honeywell-cm927-lcd-screen-fail-common-1058940-3.htm).

## Success ø/

Heating up the plastic ribbon and pressing it onto the circuit board did the trick for me. Took a few tries for all segments to appear, but the screen is looking great again.

Thank you Internet strangers! :)

![](https://xenodium.github.io/images/fixing-honeywell-cm927-dead-screens/after.png)

# \[2019-12-29 Sun\] SwiftUI bookmarks
---
id: swiftui-bookmarks
---



-   [ SwiftUI live-blur materials that you can use like a background color](https://twitter.com/clarko/status/1284940951031439361).
-   [8 Common SwiftUI Mistakes - and how to fix them – Hacking with Swift](https://www.hackingwithswift.com/articles/224/common-swiftui-mistakes-and-how-to-fix-them).
-   [\<SwiftUI for Absolute Beginners\>读书 - emacsist](https://emacsist.github.io/2020/01/07/swiftui-for-absolute-beginners%E8%AF%BB%E4%B9%A6/).
-   [\@Environment values](https://developer.apple.com/documentation/swiftui/environmentvalues).
-   [\`@State\` \`onChange\`](https://twitter.com/natpanferova/status/1275903292946567168).
-   [\`SwiftUI\` Framework Learning and Usage Guide](https://github.com/Jinxiansen/SwiftUI).
-   [A Companion for SwiftUI - The SwiftUI Lab](https://swiftui-lab.com/companion/).
-   [A deep dive into Swift’s function builders \| Swift by Sundell](https://swiftbysundell.com/articles/deep-dive-into-swift-function-builders/).
-   [A Fast Fuzzy Search Implementation · objc.io](https://www.objc.io/blog/2020/08/18/fuzzy-search/).
-   [A guide to SwiftUI’s state management system \| Swift by Sundell](https://swiftbysundell.com/articles/swiftui-state-management-guide/).
-   [A guide to the SwiftUI layout system - Part 1 \| Swift by Sundell](https://swiftbysundell.com/articles/swiftui-layout-system-guide-part-1/).
-   [A SwiftUI iOS system components and interactions demo app based on iOS 14](https://github.com/jordansinger/SwiftUI-Kit).
-   [ActionOver: A custom SwiftUI modifier to present an Action Sheet on iPhone and a Popover on iPad and Mac](https://github.com/AndreaMiotto/ActionOver).
-   [Advanced SwiftUI Animations - Part 1: Paths - The SwiftUI Lab](https://swiftui-lab.com/swiftui-animations-part1/).
-   [Advanced SwiftUI Transitions - The SwiftUI Lab](https://swiftui-lab.com/advanced-transitions/).
-   [AutomaticSettings: Data driven settings UI](https://github.com/krzysztofzablocki/AutomaticSettings).
-   [Building a MapView app with SwiftUI — Morning SwiftUI](https://www.morningswiftui.com/blog/build-mapview-app-with-swiftui).
-   [Building a Widget for iOS with SwiftUI and WidgetKit - SchwiftyUI](https://schwiftyui.com/swiftui/building-a-widget-for-ios-with-swiftui-and-widgetkit/).
-   [Building Pager view in SwiftUI \| Majid’s blog about Swift development](https://swiftwithmajid.com/2019/12/25/building-pager-view-in-swiftui/).
-   [Building ViewModels with Combine framework](https://swiftwithmajid.com/2020/02/05/building-viewmodels-with-combine-framework/).
-   [Category: Combine – Donny Wals](https://www.donnywals.com/category/combine/).
-   [Combine: Asynchronous Programming with Swift](https://store.raywenderlich.com/products/combine-asynchronous-programming-with-swift).
-   [Composable styling in SwiftUI \| Swift with Majid](https://swiftwithmajid.com/2019/08/28/composable-styling-in-swiftui/).
-   [Constructing Data with Swift Function Builders – Oliver Binns](https://www.oliverbinns.co.uk/2020/07/23/constructing-data-with-swift-function-builders/).
-   [Context Menu, Alert and ActionSheet in SwiftUI](https://medium.com/flawless-app-stories/context-menu-alert-and-actionsheet-in-swiftui-b6ff0d1f8493).
-   [Create an SPM Package for SwiftUI \| Daniel Saidi](https://danielsaidi.com/blog/2020/01/05/create-an-spm-package-for-swiftui).
-   [CwlFitting: A small SwiftUI package to aid with "shrink-to-fit" + "fill-aligned" VStack and HStack arrangements](https://github.com/mattgallagher/CwlFitting).
-   [debugPrint() SwiftUI modifier](https://twitter.com/twostraws/status/1280996740053827584).
-   [Deep dive into Swift frameworks - The.Swift.Dev.](https://theswiftdev.com/2018/01/25/deep-dive-into-swift-frameworks/).
-   [Default a View in NavigationView with SwiftUI - DEV Community](https://dev.to/maeganwilson_/default-a-view-in-navigationview-with-swiftui-183p).
-   [designcode's SwiftUI course](https://designcode.io/swiftui?promo=learnswiftui).
-   [Detecting changes to a folder in iOS using Swift](https://medium.com/over-engineering/monitoring-a-folder-for-changes-in-ios-dc3f8614f902).
-   [Dismiss Gesture for SwiftUI Modals - The SwiftUI Lab](https://swiftui-lab.com/modal-dismiss-gesture/).
-   [First learnings from adopting SwiftUI - Christos Karaiskos - Medium (card example)](https://medium.com/@karaiskc/first-learnings-from-adopting-swiftui-be2ee4289007).
-   [Function Builders in Swift and SwiftUI](https://www.vadimbulavin.com/swift-function-builders-swiftui-view-builder/).
-   [GeometryReader to the Rescue - The SwiftUI Lab](https://swiftui-lab.com/geometryreader-to-the-rescue/).
-   [Gestures in SwiftUI - Better Programming - Medium](https://medium.com/better-programming/gestures-in-swiftui-e94b784ecc7).
-   [GitHub - AppPear/ChartView: ChartView made in SwiftUI](https://github.com/AppPear/ChartView).
-   [GitHub - dasautoooo/Parma: A SwiftUI view for displaying Markdown with custom.](https://github.com/dasautoooo/Parma).
-   [GitHub - Dimillian/MovieSwiftUI: SwiftUI & Combine app using MovieDB API.](https://github.com/Dimillian/MovieSwiftUI).
-   [GitHub - Jinxiansen/SwiftUI: \`SwiftUI\` Framework Learning and Usage Guide.](https://github.com/Jinxiansen/SwiftUI).
-   [GitHub - mecid/SwiftUICharts: A simple line and bar charting library written for SwiftUI](https://github.com/mecid/SwiftUICharts).
-   [GitHub - nalexn/EnvironmentOverrides: QA assistant for a SwiftUI app](https://github.com/nalexn/EnvironmentOverrides).
-   [GitHub - nerdsupremacist/FancyScrollView (list with growing/snapping header)](https://github.com/nerdsupremacist/FancyScrollView).
-   [GitHub - paololeonardi/WaterfallGrid: A waterfall grid layout view for SwiftUI.](https://github.com/paololeonardi/WaterfallGrid).
-   [GitHub - SimpleBoilerplates/SwiftUI-Cheat-Sheet: SwiftUI Cheat Sheet](https://github.com/SimpleBoilerplates/SwiftUI-Cheat-Sheet).
-   [GitHub - siteline/SwiftUI-Introspect: Introspect underlying UIKit components](https://github.com/siteline/SwiftUI-Introspect).
-   [GitHub - SwiftUIX/SwiftUIX: An extension to the standard SwiftUI library.](https://github.com/SwiftUIX/SwiftUIX).
-   [Gradient in SwiftUI \| Majid’s blog about Swift development](https://swiftwithmajid.com/2019/11/13/gradient-in-swiftui/).
-   [How to add a toolbar above the keyboard using inputAccessoryView](https://www.hackingwithswift.com/example-code/uikit/how-to-add-a-toolbar-above-the-keyboard-using-inputaccessoryview).
-   [How to animate along zIndex in SwiftUI](https://twitter.com/myridiphis/status/1339840448689549312).
-   [How to create a side menu (hamburger menu) in SwiftUI \| BLCKBIRDS](https://blckbirds.com/post/side-menu-hamburger-menu-in-swiftui/).
-   [How to Create a Splash Screen With SwiftUI \| raywenderlich.com](https://www.raywenderlich.com/4503153-how-to-create-a-splash-screen-with-swiftui).
-   [how to display a search bar with SwiftUI - Stack Overflow](https://stackoverflow.com/questions/56490963/how-to-display-a-search-bar-with-swiftui).
-   [How to fix slow List updates in SwiftUI – Hacking with Swift](https://www.hackingwithswift.com/articles/210/how-to-fix-slow-list-updates-in-swiftui).
-   [How to Schedule Notifications and Add Badges in SwiftUI](https://medium.com/better-programming/scheduling-notifications-and-badges-in-swiftui-9edf8574b893).
-   [Image resizing techniques in Swift (smooth scroll)](https://twitter.com/icanzilb/status/1324685822063497217).
-   [Implement a Search Bar in SwiftUI - Better Programming - Medium](https://medium.com/better-programming/implement-searchbar-in-swiftui-556a204e1970).
-   Implementing Context Menus in iOS 13 Using SwiftUI or UIKit.
-   [In the new SwiftUI, is there any reason you would still use ObservedObject instead of StateObject?](https://twitter.com/chriseidhof/status/1280138752409636864).
-   [Inspecting the View Tree with PreferenceKey - Part 1 - The SwiftUI Lab](https://swiftui-lab.com/communicating-with-the-view-tree-part-1/).
-   [Integrate SwiftUI on UIKIT project its actually pretty easy](https://twitter.com/misaellandero/status/1285318302013837312).
-   [ios - How to make view the size of another view in SwiftUI - Stack Overflow](https://stackoverflow.com/questions/56505043/how-to-make-view-the-size-of-another-view-in-swiftui).
-   [Lessons learned with Swift + iOS development](https://elliehuxtable.com/lessons-learned-with-swift-ios-development/).
-   [Line-Wrapping Stacks - Swift You and I](https://swiftui.diegolavalle.com/posts/linewrapping-stacks/).
-   [LLDB "\_regexp-break \<file\>:\<line\>:\<column\>", breakpoint at a particular source code line and column](https://twitter.com/dmartincy/status/1275913911506780161).
-   [Mastering grids in SwiftUI \| Swift with Majid](https://swiftwithmajid.com/2020/07/08/mastering-grids-in-swiftui/).
-   [Mastering ScrollView in SwiftUI \| Swift with Majid](https://swiftwithmajid.com/2020/09/24/mastering-scrollview-in-swiftui/).
-   [Multiplatform Messages app for macOS, iOS, iPadOS in SwiftUI](https://github.com/jordansinger/messages-multiplatform-swiftui-sample).
-   [Must-have SwiftUI extensions \| Majid’s blog about Swift development](https://swiftwithmajid.com/2019/12/04/must-have-swiftui-extensions/).
-   [New property wrappers in SwiftUI (@ScaledMetric, \@SceneStorage, \@AppStorage, \@StateObject)](https://swiftwithmajid.com/2020/06/29/new-property-wrappers-in-swiftui/).
-   [On iOS 14, the keyboard is added to safe area](https://twitter.com/natpanferova/status/1296725502305034240).
-   [Our New Book: Thinking in SwiftUI · objc.io](https://www.objc.io/blog/2020/03/17/thinking-in-swiftui/).
-   [Performance Battle: AnyView vs Group - Alexey Naumov](https://nalexn.github.io/anyview-vs-group/).
-   [Practical Combine: An introduction to Combine with real examples](https://gumroad.com/l/practical-combine/wwdc2020).
-   [Programmatic navigation in SwiftUI project - Alexey Naumov](https://nalexn.github.io/swiftui-deep-linking/).
-   [Property Wrappers in Swift 5.1. An introduction to one of Swift 5.1’s](https://medium.com/get-chip/propert-wrappers-in-swift-5-1-14f610530710).
-   [Pull-to-Refresh in SwiftUI \| Swift with Majid](https://swiftwithmajid.com/2021/07/14/pull-to-refresh-in-swiftui/).
-   [Recreate iOS style Welcome Screen to any app in 3 minutes](https://twitter.com/navdeep_ua/status/1296591355485945856).
-   [Recreate this Control Center widget in SwiftUI](https://twitter.com/jsngr/status/1276700160643551232).
-   [Remote images in SwiftUI - DEV Community](https://dev.to/gualtierofr/remote-images-in-swiftui-49jp).
-   [Resizing Techniques and Image Quality That Every iOS Developer Should Know (Swift)](https://medium.com/ymedialabs-innovation/resizing-techniques-and-image-quality-that-every-ios-developer-should-know-e061f33f7aba).
-   [Reusable Image Cache in Swift - Flawless iOS - Medium](https://medium.com/flawless-app-stories/reusable-image-cache-in-swift-9b90eb338e8d).
-   [Search View in SwiftUI \| Ordinary Coding](https://ordinarycoding.com/articles/search-view-in-swiftui/).
-   [Selecting dates and times with DatePicker](https://www.hackingwithswift.com/books/ios-swiftui/selecting-dates-and-times-with-datepicker).
-   [Short video showing you how to debug, learn, or teach Combine operators with Timelane - the approach is always the same, add lanes - analyze the data](https://twitter.com/icanzilb/status/1235884754576322560).
-   [Sidebar navigation in SwiftUI \| Swift with Majid](https://swiftwithmajid.com/2020/07/21/sidebar-navigation-in-swiftui/).
-   [StaggeredList Sample App: A Staggered Pinterest Like Layout using SwiftUI](https://github.com/alfianlosari/SwiftUIStaggeredNote).
-   [State and Data Flow \| Apple Developer Documentation](https://developer.apple.com/documentation/swiftui/state_and_data_flow).
-   [Stretchable header](https://twitter.com/twostraws/status/1279487425581133831).
-   [swift - HStack with SF Symbols Image not aligned centered - Stack Overflow](https://stackoverflow.com/questions/56578072/hstack-with-sf-symbols-image-not-aligned-centered).
-   [swift - ImagePicker in SwiftUI - Stack Overflow](https://stackoverflow.com/questions/59227158/imagepicker-in-swiftui).
-   [Swift Property Wrappers - NSHipster](https://nshipster.com/propertywrapper/).
-   [Swift UI Property Wrappers (@State, \@StateObject, \@EnvironmentObject, \@ObservedObject, \@Binding)](https://swiftuipropertywrappers.com/).
-   [swiftui - Not Receiving scenePhase Changes (foreground/background)](https://stackoverflow.com/questions/62840571/not-receiving-scenephase-changes).
-   [SwiftUI and Redux — Clean Code and Small, Independent Components](https://medium.com/better-programming/swiftui-and-redux-clean-code-and-small-independent-components-6f46a5eb46b3).
-   [SwiftUI Animation (buttons, current-rotations, etc) \| Sarun](https://sarunw.com/posts/swiftui-animation/).
-   [SwiftUI Animation \| Sarun](https://sarunw.com/posts/swiftui-animation/).
-   [SwiftUI basic components (form example)](https://medium.com/swlh/learn-master-%EF%B8%8F-swiftui-basic-components-in-10-minutes-dc327e71d245).
-   [SwiftUI Buttons and images (using systemName)](https://www.hackingwithswift.com/books/ios-swiftui/buttons-and-images).
-   [SwiftUI courses](https://designcode.io/courses).
-   [SwiftUI Custom Styling - The SwiftUI Lab (scaleEffect and opacity on isPressed)](https://swiftui-lab.com/custom-styling/).
-   [SwiftUI DatePicker](https://www.swiftcompiled.com/swiftui-datepicker/).
-   [SwiftUI displaying customizable quick action card](https://github.com/Leon12345679/QuickActionCard).
-   [SwiftUI for Mac 2024 :: TrozWare — Mac books & articles](https://troz.net/post/2024/swiftui-mac-2024/).
-   [SwiftUI for Mac on Big Sur :: TrozWare](https://troz.net/post/2020/swiftui_mac_big_sur/).
-   [SwiftUI gives you .isPlaceholder in WidgetKit generate a placeholders](https://twitter.com/jsngr/status/1276931917628219398)
-   [SwiftUI Import/Export files \| Rizwan's Blog 👨‍💻](https://blog.rizwan.dev/blog/swiftui-import-export-files).
-   [SwiftUI Layout System \| Alexander Grebenyuk](https://kean.github.io/post/swiftui-layout-system).
-   [SwiftUI NavigationView tutorial with examples - Simple Swift Guide](https://www.simpleswiftguide.com/swiftui-navigationview-tutorial-with-examples/).
-   [SwiftUI notes - Tomasz Nazarenko Blog](https://www.tomasznazarenko.com/frameworks/SwiftUI-notes/).
-   [SwiftUI picker gotchas](https://twitter.com/jamesthomson/status/1293506487063584770).
-   [SwiftUI Search Bar in the Navigation Bar](https://twitter.com/Geri_Borbas/status/1262390699611369477).
-   [SwiftUI snippets by Jeroen Zonneveld](https://zonneveld.dev/).
-   [SwiftUI Tutorial: How to Build a Form UI for iOS Apps](https://www.appcoda.com/swiftui-form-ui/).
-   [SwiftUI Tutorials on SwiftUI Hub](https://swiftuihub.com/).
-   [swiftui.gallery \| A gallery of SwiftUI code example snippets](https://swiftui.gallery/).
-   [swiftui.gallery: sign up form sample](https://swiftui.gallery/uploads/code/SignUpForm).
-   [swiftui: A collaborative list of awesome SwiftUI resources](https://github.com/ygit/swiftui).
-   [SwiftUI: Equal widths view constraints — finestructure](https://finestructure.co/blog/2020/1/20/swiftui-equal-widths-view-constraints).
-   [SwiftUI: Shake Animation · objc.io](https://www.objc.io/blog/2019/10/01/swiftui-shake-animation/).
-   [SwiftUIStaggeredList: Staggered Layout List Using SwiftUI](https://github.com/alfianlosari/SwiftUIStaggeredList).
-   [SwiftUI’s New App Lifecycle and Replacements for AppDelegate](https://medium.com/better-programming/swiftuis-new-app-lifecycle-and-replacements-for-appdelegate-and-scenedelegate-in-ios-14-c9cf4a2367a9).
-   [Swipe gesture SwiftUI \| Daniel Saidi](https://danielsaidi.com/blog/2020/01/05/create-an-spm-package-for-swiftui).
-   [SwuiftUI books](https://www.reddit.com/r/swift/comments/elhakp/so_i_guess_my_journey_begins_now/).
-   [Tagged “SwiftUI” \| Sarun](https://sarunw.com/tags/swiftui/).
-   [TextField in SwiftUI \| Majid’s blog about Swift development](https://swiftwithmajid.com/2020/02/26/textfield-in-swiftui/).
-   [The Complete SwiftUI Documentation You’ve Been Waiting For](https://medium.com/better-programming/the-complete-swiftui-documentation-youve-been-waiting-for-fdfe7241add9).
-   [The difference between \@StateObject, \@EnvironmentObject, and \@ObservedObject](https://swiftwithmajid.com/2020/07/02/the-difference-between-stateobject-environmentobject-and-observedobject-in-swiftui/).
-   [The Power of the Hosting+Representable Combo (scroll SwiftUI list)](https://swiftui-lab.com/a-powerful-combo/).
-   [The SwiftUI Toolbar in iOS 14](https://betterprogramming.pub/the-swiftui-toolbar-in-ios-14-b4a0fe6a3034).
-   [The ultimate Combine framework tutorial in Swift - The.Swift.Dev.](https://theswiftdev.com/2019/10/31/the-ultimate-combine-framework-tutorial-in-swift/).
-   [Trailing Closure (SwiftUI tutotials)](https://trailingclosure.com/).
-   [Tweet on improving List SwiftUI performace (searching)](https://twitter.com/dbuchanandev/status/1236411023340511233).
-   [UICollectionView Custom Layout Tutorial: Pinterest \| raywenderlich.com](https://www.raywenderlich.com/4829472-uicollectionview-custom-layout-tutorial-pinterest).
-   [URL Image view in SwiftUI](https://medium.com/@dmytro.anokhin/url-image-view-in-swiftui-f08f85d942d8).
-   [URLSession: Common pitfalls with background download & upload tasks](https://www.avanderlee.com/swift/urlsession-common-pitfalls-with-background-download-upload-tasks/).
-   [Using Combine (extensive online book)](https://heckj.github.io/swiftui-notes/).
-   [Using iOS 14's Menu as a Picker in SwiftUI](https://medium.com/better-programming/using-ios-14s-menu-as-a-picker-in-swiftui-b036c772037).
-   [View composition in SwiftUI \| Majid’s blog about Swift development](https://swiftwithmajid.com/2019/10/30/view-composition-in-swiftui/).
-   [Views Choose Their Own Sizes – Netsplit.com](https://netsplit.com/swiftui/views-choose-their-own-sizes/).
-   [Visualize Combine Magic with SwiftUI Part 1 - Flawless iOS - Medium](https://medium.com/flawless-app-stories/visualize-combine-magic-with-swiftui-part-1-3a56e2a461b3).
-   [What’s the difference between \@StateObject and \@ObservedObject? – Donny Wals](https://www.donnywals.com/whats-the-difference-between-stateobject-and-observedobject/).
-   [Why I quit using the ObservableObject - Alexey Naumov](https://nalexn.github.io/swiftui-observableobject).
-   [Working with Focus on SwiftUI Views - The SwiftUI Lab](https://swiftui-lab.com/working-with-focus-on-swiftui-views/).

# \[2019-12-17 Tue\] Studying for Life in the UK test
---
id: studying-for-life-in-the-uk-test
---

Today, I passed the [Life in the UK test](https://www.gov.uk/life-in-the-uk-test). Wasn't quite sure how to study for it. During my commutes, I listened to the [Life in the UK 2019 Test audio book](https://www.audible.co.uk/pd/Life-in-the-UK-2019-Test-Contains-the-Official-Course-300-Practice-Questions-Audiobook/B07VD9SR3L).

A friend recommended [lifeintheuktestweb.co.uk](https://lifeintheuktestweb.co.uk). Overall, I found their practice tests very useful. Taking a bunch tests helped me internalize the material.

Took some notes along the way (mostly data with years attached) and dumped it into an [org table](https://orgmode.org/manual/Built_002din-Table-Editor.html#Built_002din-Table-Editor). This helped me form a mental timeline.

**NOTE:** *These tables alone are **not** comprehensive enough to prepare for the exam. You'll need to know additional information without dates attached.*

## Events

  Year             Event
  ---------------- --------------------------------------------------------------------------------
  2012             Diamond Jubilee
  1999             Scottish Parliament formed
  1973             UK joins the EU ø/
  1972             Mary Peters wins Gold medal (pentathlon)
  1957             Treaty of Rome signed (March 25)
  1950             UK signs European Convention of Human Rights
  1949             Ireland become a republic
  1947             Granted independence India, Pakistan and Ceylon (Sri Lanka)
  1945             Clement Attlee elected
  1945             Alexander Fleming discovers penicillin
  1945             WWII ends
  1944             Butler Act (free secondary education England/Wales)
  1940             Battle of Britain
  1939             Germany invades Poland
  1930s            Turing Machine
  1936             BBC first regular television service
  1932             First television broadcast
  1930             British Film Studios Fluorish
  1928             Women/men with same voting age
  1918             WWI ends (November 11, 11am)
  1903             Emmeline Pankhurst Women’s Social and Political Union (suffragettes)
  1902             Motor-car racing in UK
  1896             First film shown publicly
  1899-1902        The Boer War (South Africa)
  1870-1914        120000 Russian and Polish Jews fled to Britain to escape prosecution
  1853-1856        Crimean War
  1851             Great Exhibition (showcased Crystal Palance)
  1837             Queen Victoria becomes queen (at 18)
  1833             Emancipation Act (abolished slavery throughout British Emprire)
  1832             The Reform Act (increase number of people with voting rights)
  1776             North American colonies want out (don't tax us without representation)
  1745             Bonnie Prince Charlie gets support by clansmen from Scottish highlands
  1714             Queen Ann dies, George I becomes King
  1689             Bill of rights (limit rights of kings)
  1688             William of Orange invades England (proclaims king)
  1680-1720        Huguenots refugees came to England (from France)
  1695             Free press (newspapers) established
  1679             Habeas Corpus Act (right to trial)
  1649-1660        Cromwell rules republic for 11 years (Charles I executed)
  1642             English Civil war (Cavaliers vs Roundheads)
  1606             Union flag created
  1588             English beat Spanish Armada
  1348             Black death (third population die)
  1314             Battle of Bannockburn: Robert the Bruce (Scottish King) beats English invasion
  1284             Statute of Rhuddlan (Wales joins Crown, by King Edward I)
  1215             Magna Carta created
  1066             Norman Conquest (Saxon King Harold killed by William I)
  300-400 AD       Christians appear in Britain
  789 AD           Vikings first visit Britain and raid coastal towns
  6000 years ago   Farmers come to Britain

## Population

  Year   Population
  ------ ---------------
  2010   \> 62 million
  2005   \< 60 million
  1998   57 million
  1951   50 million
  1901   40 million
  1851   20 million
  1700   5 million
  1600   \> 4 million

# \[2019-12-01 Sun\] Georgia travel bookmarks
---
id: georgia-travel-bookmarks
---

-   [Abandoned Georgia](https://www.abandonedamerica.us/abandoned-georgia).

# \[2019-11-24 Sun\] Wizard zines comics in Emacs eshell
---
id: wizard-zines-comics-eshell-util
---

Over at [wizardzines.com](http://wizardzines.com), [Julia Evans](https://jvns.ca) authors wonderful zines on topics like git, networking, linux, command-line utilities, and others. Some zines are paid. Some are free. No affiliation here, just a fan.

A little while ago, Julia [tweeted](https://twitter.com/b0rk/status/1192304892435738624) about a utility she's building to view her original comics on similar topics. I instantly thought it'd be a fun tool to implement for Emacs [eshell](https://www.gnu.org/software/emacs/manual/html_mono/eshell.html).

Since then, I subscribed to [wizardzines.com/saturday-comics](https://wizardzines.com/saturday-comics/) and received a few comics (awk, tar, and bash tricks). I saved them locally (using topic name and dropping file extensions).

``` {.bash org-language="sh" exports="both"}
ls -1 ~/Downloads/wizardzines-comics/
```

  ------
  awk
  bash
  tar
  ------

By no means battle-tested, but here's an elisp snippet defining the *ecomic* command. It displays inlined comics in the handy eshell.

``` {.commonlisp org-language="emacs-lisp"}
(require 'eshell)
(require 'iimage)

(defvar wizardzines-comics-path "~/Downloads/wizardzines-comics")

(defun eshell/ecomic (&rest args)
  "Display command comic in ARGS.
Note: ensure comic images live in `wizardzines-comics-path', named with
command name and no extension."
  (eshell-eval-using-options
   "ecomic" args
   '((?h "help" nil nil "show this usage screen")
     :external "ecomic"
     :show-usage
     :usage "COMMAND

Show COMMAND comic from Julia Evans' https://wizardzines.com/saturday-comics")
   (let* ((command (nth 0 (eshell-stringify-list (eshell-flatten-list args))))
          (image-fpath (concat (file-name-as-directory
                                (expand-file-name wizardzines-comics-path))
                               command)))
     (unless (file-exists-p image-fpath)
       (error "comic: \"%s\" not found :-(" command))
     (eshell-buffered-print "\n")
     (add-text-properties 0 (length image-fpath)
                          `(display ,(create-image image-fpath)
                                    modification-hooks
                                    (iimage-modification-hook))
                          image-fpath)
     (eshell-buffered-print image-fpath)
     (eshell-flush))))
```

![](https://xenodium.github.io/images/wizard-zines-comics-eshell-util/ecomic.gif)

comments on [twitter](https://twitter.com/xenodium/status/1198542659704504321)

## Updates

-   Tweaked title.

# \[2019-11-21 Thu\] Emacs counsel default search switches
---
id: emacs-counsel-default-search-switches
---

Following up from [Enhanced Emacs searching with counsel switches](http://xenodium.com/enhanced-emacs-searching-with-counsel-switches), rather than remembering [silver searcher](https://github.com/ggreer/the_silver_searcher) and [ripgrep](https://github.com/BurntSushi/ripgrep) switches, we can use [counsel's](https://github.com/abo-abo/swiper) *ivy-initial-inputs-alist* to set these up as default visible switches.

``` {.commonlisp org-language="emacs-lisp"}
(push '(counsel-ag . "--file-search-regex '' -- ") ivy-initial-inputs-alist)
(push '(counsel-rg . "--glob '**' -- ") ivy-initial-inputs-alist)
```

The default switches stay out of the way in typical searches, but can be easily modified to include (or exclude) results matching specific file *names*.

![](https://xenodium.github.io/images/emacs-counsel-default-search-switches/default-switches.gif)

comments on [twitter](https://twitter.com/xenodium/status/1197673205688864768?s=20)

# \[2019-11-10 Sun\] Enhanced Emacs searching with counsel switches
---
id: enhanced-emacs-searching-with-counsel-switches
---

The [counsel](https://github.com/abo-abo/swiper) family of Emacs search commands are great for searching the filesystem. More specifically, *counsel-rg*, *counsel-ag*, and *counsel-pt*, which use the popular [ripgrep](https://github.com/BurntSushi/ripgrep), [silver searcher](https://github.com/ggreer/the_silver_searcher), and [platinum searcher](https://github.com/monochromegane/the_platinum_searcher) utilities.

counsel-rg is my default searcher. It returns results quickly, with live updates as I tweak the search query.

Up until recently, my queries typically matched text in files only. This works great, but every so often I wished I could amend the query to include (or exclude) results matching specific file *names*. Turns out, you can prepend the search query with additional switches using the "–" separator.

The switches are usually utility-specific, but if we wanted to keep results from file names matching a glob, we can prepend the ripgrep query with something like *"–glob Make\* –"* or the shorter version *"-g Make\* –"*.

rg: -g Make\* – install

![](https://xenodium.github.io/images/enhanced-emacs-searching-with-counsel-switches/counsel-rg-switch.gif)

# \[2019-11-10 Sun\] Emacs org block company completion
---
id: emacs-org-block-company-completion
---

UPDATE: This is now available [on melpa](https://melpa.org/#/company-org-block).

Back in 2015, I bound the "\<" key to a hydra for quickly inserting org blocks. The idea came from Oleg's post on [org-mode block templates in Hydra](https://oremacs.com/2015/03/07/hydra-org-templates/). The suggested binding settled in my muscle memory without much effort.

Fast forward to Febrary 2019. I replaced the hydra with *[org-insert-structure-template](https://orgmode.org/manual/Easy-templates.html)* when *org-try-structure-completion* was removed from org mode. No biggie, as I kept the same binding to "\<" and hardly noticed the change.

Since my primary use-case for easy templates is inserting [source blocks](https://orgmode.org/manual/Working-with-source-code.html), I was keen to expedite choosing the source language as well as inserting the source block itself.

Writing a small [company mode](https://company-mode.github.io/) completion backend fits my primary use-case pretty well.

![](https://xenodium.github.io/images/emacs-org-block-company-completion/company-org-block.gif)

The company backend looks as follow (**Warning:** [Snippet needs Org v9.2](https://twitter.com/tpanum/status/1197772426072997888)).

Note: This code is not up to date. Install via [melpa](https://melpa.org/#/company-org-block) or see [its repository](https://github.com/xenodium/company-org-block).

``` {.commonlisp org-language="emacs-lisp" results="value"}
(require 'map)
(require 'org)
(require 'seq)

(defvar company-org-block-bol-p t "If t, detect completion when at
begining of line, otherwise detect completion anywhere.")

(defvar company-org--regexp "<\\([^ ]*\\)")

(defun company-org-block (command &optional arg &rest ignored)
  "Complete org babel languages into source blocks."
  (interactive (list 'interactive))
  (cl-case command
    (interactive (company-begin-backend 'company-org-block))
    (prefix (when (derived-mode-p 'org-mode)
              (company-org-block--grab-symbol-cons)))
    (candidates (company-org-block--candidates arg))
    (post-completion
     (company-org-block--expand arg))))

(defun company-org-block--candidates (prefix)
  "Return a list of org babel languages matching PREFIX."
  (seq-filter (lambda (language)
                (string-prefix-p prefix language))
              ;; Flatten `org-babel-load-languages' and
              ;; `org-structure-template-alist', join, and sort.
              (seq-sort
               #'string-lessp
               (append
                (mapcar #'prin1-to-string
                        (map-keys org-babel-load-languages))
                (map-values org-structure-template-alist)))))

(defun company-org-block--template-p (template)
  (seq-contains (map-values org-structure-template-alist)
                template))

(defun company-org-block--expand (insertion)
  "Replace INSERTION with actual source block."
  (delete-region (point) (- (point) (1+ ;; Include "<" in length.
                                     (length insertion))))
  (if (company-org-block--template-p insertion)
      (company-org-block--wrap-point insertion
                                     ;; May be multiple words.
                                     ;; Take the first one.
                                     (nth 0 (split-string insertion)))
    (company-org-block--wrap-point (format "src %s" insertion)
                                   "src")))

(defun company-org-block--wrap-point (begin end)
  "Wrap point with block using BEGIN and END.  For example:
#+begin_BEGIN
  |
#+end_END"
  (insert (format "#+begin_%s\n" begin))
  (insert (make-string org-edit-src-content-indentation ?\s))
  ;; Saving excursion restores point to location inside code block.
  (save-excursion
    (insert (format "\n#+end_%s" end))))

(defun company-org-block--grab-symbol-cons ()
  "Return cons with symbol and t whenever prefix of < is found.
For example: \"<e\" -> (\"e\" . t)"
  (when (looking-back (if company-org-block-bol-p
                          (concat "^" company-org--regexp)
                        company-org--regexp)
                      (line-beginning-position))
    (cons (match-string-no-properties 1) t)))
```

To use, add the backend enable *company-mode* in *org-mode*:

``` {.commonlisp org-language="emacs-lisp" results="value"}
(add-to-list 'company-backends 'company-org-block)
(company-mode +1)
```

## Updates

-   Removed language-specific header logic (use *[org-babel-default-header-args](https://www.orgmode.org/worg/org-contrib/babel/header-args.html)* instead).
-   Also completes non-source block templates from [org-structure-template-alist](https://orgmode.org/manual/Easy-templates.html).
-   Source in my [dot files](https://github.com/xenodium/dotsies/blob/master/emacs/ar/company-org-block.el).
-   Removed unnecessary binding. Just add company backend as usual.
-   Thanks to [Takaaki Ishikawa](https://twitter.com/takaxp) for [suggesting \`org-edit-src-content-indentation'](https://twitter.com/takaxp/status/1195884481535561729?s=20).
-   Thanks to [Thomas Kobber](https://twitter.com/tpanum) for [highlighting incompatibility](https://twitter.com/xenodium/status/1194224168709083137) with older org versions.

# \[2019-11-08 Fri\] IRC bookmarks
---
id: irc-bookmarks
---

-   [Awesome IRC](https://github.com/davisonio/awesome-irc).

# \[2019-11-03 Sun\] A more reusable Emacs shell-command history
---
id: more-reusable-emacs-shell-command-history
---

[Cameron Desautel](https://twitter.com/camdez) has a great post on [Working Faster in Emacs by Reading the "Future"](https://engineering.collbox.co/post/working-faster-in-emacs-by-reading-the-future/), highlighting *M-n*'s usefulness for inserting minibuffer default values.

Invoking *M-n* in *shell-command*'s prompt is handy for quickly getting the current buffer's file name. This works great for one-off shell commands like *"chmod +x script.sh"* or *"tidy -xml -i -m data.xml"*. Unfortunately, these commands aren't easily reusable from *shell-command*'s minibuffer history, since it'll keep hardcoded file names.

There's likely existing built-in functionality or a more elaborate package for this, but advising *read-shell-command* enables us to write more reusable commands like *"chmod +x \$f"* or *"tidy -xml -i -m \$f".* We merely replace *\$f* with *(buffer-file-name)*, and let everything else continue as usual.

![](https://xenodium.github.io/images/more-reusable-emacs-shell-command-history/expanded-shell-command.png)

``` {.commonlisp org-language="emacs-lisp"}
(defun ar/adviced-read-shell-command (orig-fun &rest r)
  "Advice around `read-shell-command' to replace $f with buffer file name."
  (let ((command (apply orig-fun r)))
    (if (string-match-p "\\$f" command)
        (replace-regexp-in-string "\\$f"
                                  (or (buffer-file-name)
                                      (user-error "No file file visited to replace $f"))
                                  command)
      command)))

(advice-add 'read-shell-command
            :around
            'ar/adviced-read-shell-command)
```

It's worth mentioning that searching minibuffer history is pretty simple when leveraging [counsel](https://github.com/abo-abo/swiper) to fuzzy search (via *counsel-minibuffer-history*, bound to *C-r* by default).

![](https://xenodium.github.io/images/more-reusable-emacs-shell-command-history/richer-shell-command-history.gif)

On a final note, searching minibuffer history for cache hits is way more useful with richer history content. Be sure to save minibuffer history across Emacs sessions and increase *shell-command-history* using the built-in [savehist-mode](https://www.emacswiki.org/emacs/SaveHist).

``` {.commonlisp org-language="emacs-lisp"}
(use-package savehist
  :custom
  (savehist-file "~/.emacs.d/savehist")
  (savehist-save-minibuffer-history t)
  (history-length 10000)
  (savehist-additional-variables
   '(shell-command-history))
  :config
  (savehist-mode +1))
```

# \[2019-10-20 Sun\] Taiwan travel bookmarks
---
id: taiwan-travel-bookmarks
---



-   [Sun Moon Lake Tea: Why is it so good? (Spiritual Travels)](https://www.nickkembel.com/sun-moon-lake-tea/).
-   [Taipei, 2019](https://blog.calebjay.com/posts/taipei-in-2019/).
-   [Why You Should Remote Work in Taiwan](https://blog.calebjay.com/posts/why-taiwan/).

# \[2019-10-10 Thu\] Emacs swiper and multiple cursors
---
id: emacs-swiper-and-multiple-cursors
---

Emacs [swiper](https://github.com/abo-abo/swiper) is awesome. I bound *swiper-isearch* to *C-s*. Also a big fan of [multiple cursors](https://github.com/magnars/multiple-cursors.el). I use it regularly (it's fun).

I had totally missed Ole's post back in 2015: [A simple multiple-cursors extension to swiper](https://oremacs.com/2015/10/14/swiper-mc/). Turns out, swiper has multiple cursors support out of the box (bound to *C-7* by default). Yay!

UPDATE: Thanks to [irreal's post](https://irreal.org/blog/?p=8370), please remember to add *swiper-mc* to *mc/cmds-to-run-once* list (or things won't work as expected). This typically happens interactively when you invoke C-7 the first time around. Make sure you answer "n" when you see a prompt like:

![](https://xenodium.github.io/images/emacs-swiper-and-multiple-cursors/swiper-mc-no.png)

If you happen to choose "y" by mistake, take a look at **\~/.emacs.d/.mc-lists.el** to correct it. Remove *swiper-mc* from *mc/cmds-to-run-for-all* and add it to *mc/cmds-to-run-once*. Invoke *m-x eval-buffer* to reset the values and you're good to go.

![](https://xenodium.github.io/images/emacs-swiper-and-multiple-cursors/swipermc.gif)

# \[2019-10-08 Tue\] Speeding up gifs with gifsycle
---
id: speeding-up-gifs-with-gifsycle
---

Drop frames and speed gif up with [gifsycle](https://www.lcdf.org/gifsicle/) (via [How to remove every second frame from an animated gif?](https://graphicdesign.stackexchange.com/a/20937)):

``` bash
gifsicle -U in.gif `seq -f "#%g" 0 3 398` -O2 -o out.gif
```

ps. 398 is the total number of frames, which you can get with:

``` bash
identify in.gif
```

# \[2019-10-08 Tue\] Spam blacklisting with Emacs org babel
---
id: spam-blacklisting-with-emacs-org-babel
---

Some email provider accept regular expressions to blacklist additional spam. My blacklist is long and tedious to update, but hey… Emacs org babel can simplify things here.

It's way easier to maintain a blacklist (with no regex) using an org table.

## Blacklist

and subsequently use org babel (elisp snippet) to generate the regex.

## Regex gen

UPDATE: Tweaked elisp and regex (but not animation) also found John Bokma's post: [Blacklisting domains with Postfix](http://johnbokma.com/blog/2019/05/13/blacklisting-domains-with-postfix.html).

![](https://xenodium.github.io/images/spam-blacklisting-with-emacs-org-babel/blacklist.png)

# \[2019-10-06 Sun\] Rewriting dates with Emacs multiple cursors
---
id: rewriting-dates-with-emacs-multiple-cursors
---

Needed to rewrite the date format in a couple of csv columns. Emacs multiple cursors helps here, but needed a function to parse and reformat the dates themselves.

I can likely reformat dates using the built-in *parse-time-string* and *format-time-string* functions, but hey why not give the [ts.el](https://github.com/alphapapa/ts.el) library a try…

``` {.commonlisp org-language="emacs-lisp"}
(defun ar/region-to-timestamp ()
  "Convert date like \"29 Apr 2019\" to \"2019-04-29\"."
  (interactive)
  (let ((date (ts-parse (buffer-substring
                         (region-beginning)
                         (region-end)))))
    (delete-region (region-beginning)
                   (region-end))
    (insert (ts-format "%Y-%m-%d" date))))
```

Bound the new function to a temporary keybinding, so I can invoke from multiple cursors:

``` {.commonlisp org-language="emacs-lisp"}
(bind-key "M-q" #'ar/region-to-timestamp)
```

and voilà!

![](https://xenodium.github.io/images/rewriting-dates-with-emacs-multiple-cursors/ts.gif)

# \[2019-10-05 Sat\] Show/hide Emacs dired details in style
---
id: showhide-emacs-dired-details-in-style
---

Emacs [dired](https://www.gnu.org/software/emacs/manual/html_node/emacs/Dired.html) is a powerful directory browser/editor. By default, it shows lots of handy file and directory details.

![](https://xenodium.github.io/images/showhide-emacs-dired-details-in-style/dired.png)

I typically prefer hiding file and directory details until I need them. The built-in [dired-hide-details-mode](https://www.gnu.org/software/emacs/manual/html_node/emacs/Misc-Dired-Features.html) makes this easy with the "(" key toggle. Coupled with [Steve Purcell](https://twitter.com/sanityinc)'s [diredfl](https://github.com/purcell/diredfl) (for coloring), it strikes a great user experience.

![](https://xenodium.github.io/images/showhide-emacs-dired-details-in-style/diredfl.gif)

With a short snippet, you can also show/hide dired details in style:

``` {.commonlisp org-language="emacs-lisp"}
(use-package dired
  :hook (dired-mode . dired-hide-details-mode)
  :config
  ;; Colourful columns.
  (use-package diredfl
    :ensure t
    :config
    (diredfl-global-mode 1)))
```

**UPDATE:** Thanks to [Daniel Martín](https://twitter.com/dmartincy), who [pointed me](https://twitter.com/dmartincy/status/1180512330288975872) to [dired-git-info](https://github.com/clemera/dired-git-info). This package adds git logs to dired file and directory details.

![](https://xenodium.github.io/images/showhide-emacs-dired-details-in-style/dired-git-info.gif)

Binding *dired-git-info-mode* to ")" is a nice complement to *dired-hide-details-mode*'s "(" binding.

``` {.commonlisp org-language="emacs-lisp"}
(use-package dired-git-info
    :ensure t
    :bind (:map dired-mode-map
                (")" . dired-git-info-mode)))
```

# \[2019-09-29 Sun\] Bulk buying bookmarks
---
id: bulk-buying-bookmarks
---

-   [Real foods](https://www.realfoods.co.uk).

# \[2019-09-01 Sun\] Speeding up Emacs tramp via ControlMaster
---
id: speeding-up-emacs-tramp-via-controlmaster
---

Via [Florian Margaine's Eshell config](https://gist.github.com/ralt/a36288cd748ce185b26237e6b85b27bb), I discovered ssh's [ControlMaster](https://man.openbsd.org/ssh_config#ControlMaster). It enables sharing multiple sessions over a single network connection. This has the benefit of speeding up Emacs TRAMP.

In your \~/.ssh/config add:

``` fundamental
Host *
    ControlPath ~/.ssh/master-%h:%p
    ControlMaster auto
    ControlPersist 10m
```

# \[2019-09-01 Sun\] csv bookmarks
---
id: csv-bookmarks
---



-   [convert ofx to csv . Today I Learned (secretGeek)](https://til.secretgeek.net/banking/convert_ofx_to_csv.html).
-   [Exporting Excel files to CSV with in2csv from csvkit](https://www.johndcook.com/blog/2019/12/30/excel-to-csv/).
-   [TSV Utilities: Command line tools for large, tabular data files (Hacker News)](https://news.ycombinator.com/item?id=20848581).
-   [Why You Don't Want to Use CSV Files (Have a good data)](https://haveagooddata.net/posts/why-you-dont-want-to-use-csv-files/).

# \[2019-08-10 Sat\] Slovakia travel bookmarks
---
id: slovakia-travel-bookmarks
---

-   [High Tatras mountains (wonderful hikes)](https://en.wikipedia.org/wiki/High_Tatras).

# \[2019-07-14 Sun\] Thumbnailing pdf page
---
id: thumbnailing-pdf-page
---

If you ever need to thumbnail a pdf page, imagemagick has got you covered. For example, to thumbnail page 3, you can use:

``` {.bash org-language="sh" results="verbatim"}
convert path/to/input.pdf[2] path/to/output.png
```

``` example
convert -resize 10000x10000 path/to/input.pdf[2] path/to/output.png
convert: FailedToExecuteCommand `'gs' -sstdout=%stderr -dQUIET -dSAFER -dBATCH -dNOPAUSE -dNOPROMPT -dMaxBitmap=500000000 -dAlignToPixels=0 -dGridFitTT=2 '-sDEVICE=pngalpha' -dTextAlphaBits=4 -dGraphicsAlphaBits=4 '-r72x72' -dFirstPage=3 -dLastPage=3 '-sOutputFile=/var/folders/2y/nj_s07ms7l5gfsffh89_79zm0000gn/T/magick-30950xzlPsgqGUwtA%d' '-f/var/folders/2y/nj_s07ms7l5gfsffh89_79zm0000gn/T/magick-30950jpGyui82uGOQ' '-f/var/folders/2y/nj_s07ms7l5gfsffh89_79zm0000gn/T/magick-30950cuDVTNjArshs'' (1) @ error/pdf.c/InvokePDFDelegate/292.
```

However, I had the error above (missing gs), resolved by installing ghostscript.

``` {.bash org-language="sh"}
brew install ghostscript
```

# \[2019-07-12 Fri\] Outdoor bookmarks
---
id: outdoor-bookmarks
---

-   [The Seven Principles of Leave No Trace](https://lnt.org/why/7-principles/).

# \[2019-07-07 Sun\] gnuplot bookmarks
---
id: gnuplot-bookmarks
---



-   [GNUplot tips for nice looking charts from a CSV file](https://raymii.org/s/tutorials/GNUplot_tips_for_nice_looking_charts_from_a_CSV_file.html).
-   [Voxel plotting with gnuplot 5.4 {LWN.net}](https://lwn.net/SubscriberLink/828761/6d8c7ddc142a67a0/).

# \[2019-06-04 Tue\] gnu global, ctags, and Emacs setup
---
id: gnu-global-ctags-and-emacs-setup
---

## Universal ctags (newer)

I'm now using universal [ctags](https://ctags.io/), as recommended by [counsel-etags](https://github.com/redguardtoo/counsel-etags).

From universal ctag's [Building on Mac OS](https://docs.ctags.io/en/latest/osx.html):

``` {.bash org-language="sh"}
brew tap universal-ctags/universal-ctags
brew install --HEAD universal-ctags
```

.ctags

``` fundamental
--langdef=swift
--langmap=swift:+.swift

--kinddef-swift=v,variable,variables
--kinddef-swift=f,function,functions
--kinddef-swift=s,struct,structs
--kinddef-swift=c,class,classes
--kinddef-swift=p,protocol,protocols
--kinddef-swift=e,enum,enums
--kinddef-swift=t,typealias,typealiases

--regex-swift=/(var|let)[ \t]+([^:=]+).*$/\2/v/
--regex-swift=/func[ \t]+([^\(\)]+)\([^\(\)]*\)/\1/f/
--regex-swift=/struct[ \t]+([^:\{]+).*$/\1/s/
--regex-swift=/class[ \t]+([^:\{]+).*$/\1/c/
--regex-swift=/protocol[ \t]+([^:\{]+).*$/\1/p/
--regex-swift=/enum[ \t]+([^:\{]+).*$/\1/e/
--regex-swift=/(typealias)[ \t]+([^:=]+).*$/\2/v/
```

## Exuberant ctags (older/buggy?)

Install gnu global (ensure homebrew uses –with-exuberant-ctags flag).

``` {.bash org-language="sh"}
brew install global
brew install ctags
pip install pygments
```

.ctags

``` fundamental
--langdef=swift
--langmap=swift:.swift
--regex-swift=/[[:<:]]class[[:>:]][[:space:]]+([[:alnum:]_]+)/\1/c,class/
--regex-swift=/[[:<:]]enum[[:>:]][[:space:]]+([[:alnum:]_]+)/\1/e,enum/
--regex-swift=/[[:<:]]func[[:>:]][[:space:]]+([[:alnum:]_]+)/\1/f,function/
--regex-swift=/[[:<:]]protocol[[:>:]][[:space:]]+([[:alnum:]_]+)/\1/P,protocol/
--regex-swift=/[[:<:]]struct[[:>:]][[:space:]]+([[:alnum:]_]+)/\1/s,struct/
--regex-swift=/[[:<:]]typealias[[:>:]][[:space:]]+([[:alnum:]_]+)/\1/t,typealias/
```

.globalrc

``` fundamental
default:\
    :tc=pygments:

ctags:\
    :tc=exuberant-ctags:

exuberant-ctags|plugin-example|setting to use Exuberant Ctags plug-in parser:\
    :tc=common:\
    :ctagscom=ctags:\
    :ctagslib=$libdir/gtags/exuberant-ctags.la:\
    :langmap=Swift\:.swift:\
    :gtags_parser=Swift\:$ctagslib:

pygments:\
    :tc=pygments-parser:

pygments-parser|Pygments plug-in parser:\
    :langmap=Swift\:.swift:\
    :gtags_parser=Swift\:$pygmentslib:\
    :langmap=Common-Lisp\:.cl.lisp.el:\
    :gtags_parser=Common-Lisp\:$pygmentslib:\
    :langmap=Python\:.py.pyw.sc.tac.sage:\
    :gtags_parser=Python\:$pygmentslib:\
    :langmap=Ruby\:.rb.rbw.rake.gemspec.rbx.duby:\
    :gtags_parser=Ruby\:$pygmentslib:\
    :langmap=Objective-C++\:.mm.hh:\
    :gtags_parser=Objective-C++\:$pygmentslib:\
    :langmap=Objective-C\:.m.h:\
    :gtags_parser=Objective-C\:$pygmentslib:\
    :ctagscom=ctags:\
    :pygmentslib=$libdir/gtags/pygments-parser.la:\
    :tc=common:

common:\
    :skip=build/,HTML/,HTML.pub/,tags,TAGS,ID,y.tab.c,y.tab.h,gtags.files,cscope.files,cscope.out,cscope.po.out,cscope.in.out,SCCS/,RCS/,CVS/,CVSROOT/,{arch}/,autom4te.cache/,*.orig,*.rej,*.bak,*~,#*#,*.swp,*.tmp,*_flymake.*,*_flymake,*.o,*.a,*.so,*.lo,*.zip,*.gz,*.bz2,*.xz,*.lzh,*.Z,*.tgz,*.min.js,*min.css:
```

``` {.commonlisp org-language="emacs-lisp"}
(use-package counsel-gtags
  :ensure t
  :commands counsel-gtags-mode
  :bind (:map
         counsel-gtags-mode-map
         ("M-." . counsel-gtags-dwim)
         ("M-," . counsel-gtags-go-backward))
  :hook ((swift-mode . counsel-gtags-mode)
         (swift-mode . ggtags-mode)))

;; Needs .ctags and .globalrc in $HOME.
(use-package ggtags
  :ensure t
  :commands ggtags-mode)
```

Helpful references

<https://github.com/osdakira/dotfiles/blob/395640726d669674496a8035458840f0742e54a5/gtags.conf> <https://github.com/NicholasTD07/dotfiles/blob/e66eb05b408fbcb0d47994fc8a0a79bf438b9e03/.globalrc> <https://github.com/NicholasTD07/dotfiles/blob/master/.ctags> <https://github.com/sg2002/gtags.conf-tutorial/blob/master/gtags.conf> <https://aozsky.com/swift/swift_ide>

# \[2019-05-29 Wed\] mu4e as macOS mail composer
---
id: mu4e-as-macos-mail-composer
---

Via [Using Emacs as Default Mailer on macOS](https://www.reddit.com/r/emacs/comments/6lh2pp/using_emacs_as_default_mailer_on_macos), a tiny script to handle mailto: links.

From //Script Editor/, save following script as Application (MailOnEmacs.app). From Mail.app, *Preferences -\> Default email reader* and chosse MailOnEmacs.app.

    on open location myurl
            tell application "Emacs" to activate
            set text item delimiters to {":"}
            do shell script "/path/to/emacsclient --eval '(browse-url-mail \"" & myurl & "\")'"
    end open location

# \[2019-05-26 Sun\] New sudo user snippet
---
id: new-sudo-user-snippet
---

I don't add linux sudoers frequently enough. Always looking it up. Keeping snippet.

``` {.bash org-language="sh"}
adduser -m -d /home/<username> <username>
passwd <username>
usermod -aG sudo <username>
```

# \[2019-05-24 Fri\] Plotting ledger reports in org
---
id: plotting-ledger-reports-in-org
---

## My ledger file

Save path to [my.ledger](plotting-ledger-reports-in-org/my.ledger) in *ledger-file* block.

## gnuplot terminal (png or qt)

Select gnuplot terminal. Using png to output images, but qt is handy too for interactive chart inspection.

## Monthly Income and Expenses

Generate income report.

Generate expenses report.

Plot income vs expenses.

``` {.gnuplot noweb="yes" var="myterm=gnuplot-term income=income-data expenses=expenses-data" exports="both" file="monthly-income-and-expenses.png"}
set terminal myterm size 3500,1500
set style data histogram
set style histogram clustered gap 1
set style fill transparent solid 0.4 noborder
set xtics nomirror scale 0 center
set ytics add ('' 0) scale 0
set border 1
set grid ytics
set title "Monthly Income and Expenses"
set ylabel "Amount"
plot income using 2:xticlabels(strftime('%b', strptime('%Y-%m-%d', strcol(1)))) title "Income" linecolor rgb "light-salmon", '' using 0:2:2 with labels left font "Courier,8" rotate by 15 offset -4,0.5 textcolor linestyle 0 notitle, expenses using 2 title "Expenses" linecolor rgb "light-green", '' using 0:2:2 with labels left font "Courier,8" rotate by 15 offset 0,0.5 textcolor linestyle 0 notitle
```

# \[2019-05-21 Tue\] Changing MAC address in org
---
id: changing-mac-address-from-org-mode
---

Via Minko Gechev's [tweet](https://twitter.com/mgechev/status/1130441471105093632?s=12). Saving in an org block, just because…

``` {.bash dir="/sudo::"}
changeMAC() {
    local mac=$(openssl rand -hex 6 | sed 's/\(..\)/\1:/g; s/.$//')
    ifconfig en0 ether $mac
    ifconfig en0 down
    ifconfig en0 up
    echo "Your new physical address is $mac"
}

changeMAC
```

```{=org}
#+RESULTS:
```
``` example
Your new physical address is b4:b2:f8:77:bb:87
```

ps. Also see [Execute org blocks as root](http://xenodium.com/execute-org-blocks-as-root/).

# \[2019-05-17 Fri\] Charting bookmarks
---
id: charting-bookmarks
---

-   [asciichart: Nice-looking lightweight console ASCII line charts ╭┈╯ for NodeJS and browsers with no dependencies](https://github.com/kroitor/asciichart).
-   [asciigraph: Go package to make lightweight ASCII line graph](https://github.com/guptarohit/asciigraph).
-   [Termgraph: a python command-line tool which draws basic graphs in the terminal](https://github.com/mkaz/termgraph).

# \[2019-05-11 Sat\] Building swift-format
---
id: building-swift-format
---

Trying out [Google's swift-format](https://github.com/google/swift). Build with:

``` {.bash org-language="sh"}
git clone -b swift-5.2-branch https://github.com/apple/swift-format.git
cd swift-format
swift build
```

``` {.bash org-language="sh" results="verbatim" exports="both"}
.build/x86_64-apple-macosx/debug/swift-format --help
```

``` example
OVERVIEW: Format or lint Swift source code.

USAGE: swift-format [options] <filename or path> ...

OPTIONS:
  --configuration         The path to a JSON file containing the configuration of the linter/formatter.
  --in-place, -i          Overwrite the current file when formatting ('format' mode only).
  --mode, -m              The mode to run swift-format in. Either 'format', 'lint', or 'dump-configuration'.
  --recursive, -r         Recursively run on '.swift' files in any provided directories.
  --version, -v           Prints the version and exists
  --help                  Display available options

POSITIONAL ARGUMENTS:
  filenames or paths      One or more input filenames
```

UPDATE: Now uses swift-5.2-branch (for Xcode 11.4), according to [Matching swift-format to Your Swift Version](https://github.com/apple/swift-format#matching-swift-format-to-your-swift-version).

# \[2019-05-06 Mon\] Ledger query snippets
---
id: ledger-query-snippets
---

## Expenses paid in cash between two dates

``` {.bash org-language="sh"}
ledger -f my.ledger reg "^Expenses" and expr 'any(account=~/Assets:Cash:Wallet/)' -b 02/19 -e 04/09
```

## Bank account income between two dates

``` {.bash org-language="sh"}
ledger -f my.ledger reg "^Assets:Bank:Acme" and expr "amount > 0" -b 02/19 -e 04/09
```

## Formatting reg output

``` {.bash org-language="sh"}
ledger -f my.ledger reg "^Assets:Bank:Acme" --format="%(payee) %(amount)\n"
```

# \[2019-05-04 Sat\] Batch file renaming with counsel, find-dired, and wdired
---
id: batch-renaming-with-counsel-find-dired-and-wdired
---

The first time I saw [wdired](https://www.gnu.org/software/emacs/manual/html_node/emacs/Wdired.html) in action, it blew my mind. wdired makes [dired](https://www.gnu.org/software/emacs/manual/html_node/emacs/Dired.html#Dired) (directory editor) buffers writeable, so you can edit them like any other Emacs buffer. You can subsequently use all your favorite file-editing tricks to rename files (amongst other things). You can see it in action at the end of [Emacs Rocks episode 16](http://emacsrocks.com/e16.html).

When combining [find-dired](https://www.gnu.org/software/emacs/manual/html_node/emacs/Dired-and-Find.html) with wdired, one can easily find matching files and quickly batch rename them using something like [multiple cursors](https://github.com/magnars/multiple-cursors.el) or [keyboard macros](https://www.gnu.org/software/emacs/manual/html_node/emacs/Keyboard-Macros.html). I've been a fan of the *find-dired* -\> *dired-toggle-read-only* -\> *mc/mark-all-like-this* workflow for quite some time, but I always wished I could adjust *find-dired* queries a little quicker by getting immediate feedback.

Completion frontends like [ivy](https://github.com/abo-abo/swiper) and [helm](https://github.com/emacs-helm/helm) are perfect for getting this kind of immediate feedback. Peeking into ivy's [counsel source](https://github.com/abo-abo/swiper/blob/master/counsel.el), I borrowed some ideas to glue counsel-style narrowing on a find command, which I can easily translate to a writeable dired buffer for all that joyful-mutiple-cursor-editing experience.

![](https://xenodium.github.io/images/batch-renaming-with-counsel-find-dired-and-wdired/counsel-find.gif)

The code for *ar/counsel-find* is a little rough but can be found at [here](https://github.com/xenodium/dotsies/blob/master/emacs/ar/ar-counsel-find.el).

# \[2019-04-26 Fri\] VPS bookmarks
---
id: vps-bookmarks
---

-   [Scaleway: Scalable Cloud Platform Designed for Developers](https://www.scaleway.com).
-   [Vultr](https://www.vultr.com).

# \[2019-04-22 Mon\] Svelte bookmarks
---
id: svelte-bookmarks
---

-   [Svelte 3: Rethinking reactivity](https://svelte.dev/blog/svelte-3-rethinking-reactivity).
-   [Write less code (metric you're not paying attention to)](https://svelte.dev/blog/write-less-code).

# \[2019-04-16 Tue\] Mark region, indent, restore location
---
id: mark-region-indent-restore-location
---

When I'm not using an automatic code formatter (ie. clang-format, gofmt, etc.), I often find myself using Emacs region marking commands like *mark-defun*, *er/expand-region*, and *mark-whole-buffer* prior to pressing \<tab\>, which is bound to *indent-for-tab-command*.

This is all working as expected: the selection gets indented and the point is left in the current location.

Say we have the following snippet we'd like to indent.

![](https://xenodium.github.io/images/mark-region-indent-restore-location/before.png)

Mark region with C-M-h (mark-defun)

![](https://xenodium.github.io/images/mark-region-indent-restore-location/selection.png)

Indent with \<tab\> (indent-for-tab-command)

![](https://xenodium.github.io/images/mark-region-indent-restore-location/basic-indent.png)

We're done. The selected function is now indented as expected.

But… I always wished the point returned to the location prior to initiating the region-marking command, in this case *mark-defun*.

In short, I wish the point had ended in the following location.

![](https://xenodium.github.io/images/mark-region-indent-restore-location/smart-indent.png)

I'm not aware of an existing package that helps with this, so here's a tiny minor mode (divert-mode) to help with restoring point location after indenting a region. The *diverted-events* variable can be used to track specific region selecting commands and associate breadcrumb functions to replace the point location as needed.

``` {.commonlisp org-language="emacs-lisp"}
;;; diverted.el --- Identify temporary diversions and automatically
;;; move point back to original location.

;;; Commentary:
;; Automatically come back to a original location prior to diversion.


;;; Code:

(require 'cl)
(require 'seq)

(defstruct diverted-event
  from ;; Initial function (eg. 'mark-defun)
  to ;; Follow-up function (eg. 'indent-for-tab-command)
  breadcrumb)

(defvar diverted-events
  (list
   (make-diverted-event :from 'mark-defun
                        :to 'indent-for-tab-command
                        :breadcrumb (lambda ()
                                      (diverted--pop-to-mark-command 2)))
   (make-diverted-event :from 'er/expand-region
                        :to 'indent-for-tab-command
                        :breadcrumb (lambda ()
                                      (diverted--pop-to-mark-command 2)))
   (make-diverted-event :from 'mark-whole-buffer
                        :to 'indent-for-tab-command
                        :breadcrumb (lambda ()
                                      (diverted--pop-to-mark-command 2))))
  "Diversion events to look for.")

(defun diverted--resolve (symbol)
  "Resolve SYMBOL to event."
  (seq-find (lambda (event)
              (equal symbol
                     (diverted-event-from event)))
            diverted-events))

(defun diverted--pop-to-mark-command (n)
  "Invoke `pop-to-mark-command' N number of times."
  (dotimes (_ n)
    (pop-to-mark-command)))

(defun diverted--advice-fun (orig-fun &rest r)
  "Get back to location prior to diversion using advice around `diverted-events' (ORIG-FUN and R)."
  (let ((recognized-event (diverted--resolve last-command)))
    (when recognized-event
      (funcall (diverted-event-breadcrumb recognized-event))
      (message "Breadcrumbed prior to `%s'"
               (diverted-event-from recognized-event)))))

(defun diverted-mode-enable ()
  "Enable diverted-mode."
  (interactive)
  (diverted-mode-disable)
  (mapc (lambda (event)
          (advice-add (diverted-event-to event)
                      :after
                      'diverted--advice-fun)
          (message "Looking for `%s' after `%s' diversions."
                   (diverted-event-to event)
                   (diverted-event-from event)))
        diverted-events)
  (message "diverted-mode enabled"))

(defun diverted-mode-disable ()
  "Disable diverted-mode."
  (interactive)
  (mapc (lambda (event)
          (advice-remove (diverted-event-to event)
                         'diverted--advice-fun)
          (message "Ignoring `%s' after `%s' diversions."
                   (diverted-event-to event)
                   (diverted-event-from event)))
        diverted-events)
  (message "diverted-mode disabled"))

(define-minor-mode diverted-mode
  "Detect temporary diversions and restore point location."
  :init-value nil
  :lighter " diverted"
  :global t
  (if diverted-mode
      (diverted-mode-enable)
    (diverted-mode-disable)))

(provide 'diverted)

;;; diverted.el ends here
```

UPDATE(2019-04-20): Source [on github](https://github.com/xenodium/dotsies/blob/master/emacs/ar/diverted.el).

# \[2019-04-14 Sun\] Wider web bookmarks
---
id: wider-web-bookmarks
---



-   [Attic: Search Hundreds of Small and Local Stores and Boutiques](https://attic.city/).
-   [Awesome Search](https://awesomelists.top/).
-   [Indieseek.xyz Directory](https://indieseek.xyz/links/).
-   [Million Short - What haven't you found?](https://millionshort.com/).
-   [Pinboard: social bookmarking for introverts](https://pinboard.in/search/).
-   [Qwant Lite](https://lite.qwant.com/).
-   [Startpage (claims most private seatch engine)](https://www.startpage.com).
-   [UbuWeb](http://ubu.com/).
-   [wiby.me - the search engine for classic websites](https://wiby.me/).
-   [WikiArt.org - Visual Art Encyclopedia](https://www.wikiart.org/).

# \[2019-04-14 Sun\] Compound interest calculations
---
id: compound-interest-calculations
---

Saving [Tony Bedford's](https://twitter.com/tonytechwriter) python snippets for [calculating compound interest](https://coffeeandcode.neocities.org/financial-calculations-1.html). Really just an excuse to fire up Emacs and play with org babel.

``` {.python results="output" exports="both"}
t = 20 # years
r = 0.07 # rate
pv = 200000.00 # present value
fv = pv * (1+r)**t # future value
print("Pension of %.2f at %d%% will be worth %.2f in %d years" % (pv, 100 * r, fv, t))
```

```{=org}
#+RESULTS:
```
``` example
Pension of 200000.00 at 7% will be worth 773936.89 in 20 years
```

``` {.python results="output" exports="both"}
t = 20 # years
r = 0.07 # rate
pv = 200000.00 # present value
n = 1
fv = pv * (1 + r/n)**(n*t) # future value
print ("First formula calculates final value to: %.2f" % fv)

fv = pv * (1 + r/n)**(n*1) # year 1 only
print("Year %d: %.2f" % (1, fv))
for i in range (2, t+1):
    fv = fv * (1 + r/n)**(n*1) # Calculate one year at a time
    print("Year %d: %.2f" % (i, fv))
```

``` example
First formula calculates final value to: 773936.89
Year 1: 214000.00
Year 2: 228980.00
Year 3: 245008.60
Year 4: 262159.20
Year 5: 280510.35
Year 6: 300146.07
Year 7: 321156.30
Year 8: 343637.24
Year 9: 367691.84
Year 10: 393430.27
Year 11: 420970.39
Year 12: 450438.32
Year 13: 481969.00
Year 14: 515706.83
Year 15: 551806.31
Year 16: 590432.75
Year 17: 631763.04
Year 18: 675986.46
Year 19: 723305.51
Year 20: 773936.89
```

# \[2019-04-11 Thu\] Building mu/mu4e on macOS
---
id: building-mumu4e-on-macos
---

I've now built Emacs's [mu/mu4e](http://www.djcbsoftware.nl/code/mu/) releases a handful of times on macOS. These are the steps, so I don't forget.

## 1.4

Updated steps for building [mu/mu4e](http://www.djcbsoftware.nl/code/mu/) 1.4:

``` {.bash org-language="sh"}
brew install gmime
export CPPFLAGS="-I$(brew --prefix)/Cellar/gmime/3.2.3/include -I$(brew --prefix)/include"
export LDFLAGS=-L$(brew --prefix)/Cellar/gmime/3.2.3/lib
export PKG_CONFIG_PATH=$(brew --prefix)/Cellar/gmime/3.2.3/lib/pkgconfig:$(brew --prefix)/opt/libffi/lib/pkgconfig
export EMACS=/Applications/Emacs.app/Contents/MacOS/Emacs
./configure --prefix=$(~/local)
make install
```

## 1.2

Recently built Emacs's [mu/mu4e](http://www.djcbsoftware.nl/code/mu/) 1.2.0 from source on macOS. Steps:

``` {.bash org-language="sh"}
brew install gmime
export CPPFLAGS=-I$(brew --prefix)/Cellar/gmime/3.2.3/include
export LDFLAGS=-L$(brew --prefix)/Cellar/gmime/3.2.3/lib
export PKG_CONFIG_PATH=$(brew --prefix)/Cellar/gmime/3.2.3/lib/pkgconfig:$(brew --prefix)/opt/libffi/lib/pkgconfig
./configure --prefix=$(~/local) --disable-dependency-tracking
make install
```

UPDATE(2019-04-16): Another approach at Irreal's [Mu/mu4e 1.2 Available](https://irreal.org/blog/?p=7976).

# \[2019-03-30 Sat\] Reading spreadsheets with python/pandas
---
id: reading-spreadsheets-with-pythonpandas
---

Via [Daily python tip](https://twitter.com/python_tip/status/1111349676106833920), a snippet to read xls files in python. This will come in handy. Saving for future.

Get set up with:

``` {.bash org-language="sh"}
pip install pandas
pip install xlrd
```

Read with:

``` {.python results="output" exports="both"}
import pandas
xlf = pandas.ExcelFile("sheet.xlsx")
print xlf.sheet_names
```

``` example
[u'my sheet']
```

# \[2019-03-17 Sun\] Inserting numbers with Emacs multiple cursors
---
id: inserting-numbers-with-emacs-multiple-cursors
---

TIL that multiple cursor's *mc/insert-numbers* enables you to quickly enter increasing numbers for each cursor. I have *mc/insert-numbers* bound to \# in *region-bindings-mode-map.* By default, sequence starts at 0, but invoking *mc/insert-numbers* with prefix enables you to quickly change that.

Came in handy when numbering an org table:

![](https://xenodium.github.io/images/inserting-numbers-with-emacs-multiple-cursors/mc-number.gif)

# \[2019-03-17 Sun\] Brazil travel bookmarks
---
id: brazil-travel-bookmarks
---

-   [UXUA Casa Hotel and Spa in Trancoso, Brazil](http://www.uxua.com/).

# \[2019-03-17 Sun\] Bath travel bookmarks
---
id: bath-travel-bookmarks
---

-   [Beas Vintage Tea Rooms (Yelp)](https://www.yelp.com/biz/beas-vintage-tea-rooms-bath).

# \[2019-03-17 Sun\] Half marathon training
---
id: half-marathon-training
---

From <https://assets.bupa.co.uk/~/media/images/healthmanagement/pdfs/half-marathon-beginner.pdf>

Starting from week 4:

  Week   Monday     Tuesday            Wednesday           Thursday   Friday                   Saturday   Sunday
  ------ ---------- ------------------ ------------------- ---------- ------------------------ ---------- ---------------------
  4      **Rest**   **40 mins easy**   **30 mins tempo**   **Rest**   **40 mins cross**        **Rest**   **(03/24) 60 mins**
                    6.7 km             5.1 Km                         \-                                  \-
                    41:51 m            30:00 m
                    61.3 Kg            60.8 Kg
  5      **Rest**   **40 mins easy**   **30 mins tempo**   **Rest**   **40 mins interval**     **Rest**   **(03/31) 11 Km**
                    11.9 Km            \-                             5.99 Km                             11.0 Km
                    80:00 m                                           40 m                                60:08 m
  6      Rest       40 mins easy       30 mins tempo       Rest       40 mins interval/cross   Rest       (04/07) 13 Km
  7      Rest       40 mins easy       30 mins tempo       Rest       40 mins interval         Rest       (04/14) 60 mins
  8      Rest       40 mins easy       30 mins tempo       Rest       50 mins interval/cross   Rest       (04/21) 16 Km
  9      Rest       40 mins easy       30 mins tempo       Rest       50 mins interval         Rest       (04/28) 8 Km
  10     Rest       40 mins easy       30 mins tempo       Rest       40 mins interval/cross   Rest       (05/05) 19 Km
  11     Rest       40 mins easy       30 mins tempo       Rest       40 mins interval         Rest       (05/12) 10 Km
  12     Rest       40 mins easy       30 mins tempo       Rest       50 mins easy             Rest       (05/19) Race

# \[2019-03-16 Sat\] No Emacs frame refocus on macOS
---
id: no-emacs-frame-refocus-on-macos
---

This one's been bugging me for a while. On macOS, Emacs automatically focuses (raises) other frames when one is closed.

![](https://xenodium.github.io/images/no-emacs-frame-refocus-on-macos/before.gif)

This has the unfortunate side-effect that I could be moved from one macOS desktop/space to another when closing an Emacs frame.

Finally managed do something about it. Since I install Emacs on macOS via homebrew, a ~~[small patch on emacs-plus recipe](https://github.com/xenodium/homebrew-emacs-plus/commit/79a8e98b222fa262746f6db620ddd1fdb151ece9)~~ [small patch on emacs-plus recipe](https://github.com/d12frosted/homebrew-emacs-plus/pull/122/commits/71bf246930bfedb337bcc0e21587ccbbb917e5bf) did the job.

![](https://xenodium.github.io/images/no-emacs-frame-refocus-on-macos/after.gif)

UPDATE: Pull request [merged](https://github.com/d12frosted/homebrew-emacs-plus/pull/122) in d12frosted/emacs-plus.

The ~~[patch](https://github.com/xenodium/homebrew-emacs-plus/commit/79a8e98b222fa262746f6db620ddd1fdb151ece9)~~ [patch](https://github.com/d12frosted/homebrew-emacs-plus/pull/122/commits/71bf246930bfedb337bcc0e21587ccbbb917e5bf) has been merged into [d12frosted/homebrew-emacs-plus](https://github.com/d12frosted/homebrew-emacs-plus). To use:

``` {.bash org-language="sh"}
brew tap d12frosted/emacs-plus
brew install emacs-plus --without-spacemacs-icon --with-no-frame-refocus
```

Balance restored.

# \[2019-03-16 Sat\] Checksums on linux/macOS
---
id: checksums-on-linuxmacos
---

## MD5

``` {.bash org-language="sh"}
md5 file
```

## SHA-1

``` {.bash org-language="sh"}
shasum -a 1 file
```

## SHA-256

``` {.bash org-language="sh"}
shasum -a 256 file
```

# \[2019-03-12 Tue\] Language server protocol (LSP) bookmarks
---
id: language-server-protocol-lsp-bookmarks
---



-   [Eclipse JDT Language Server](https://github.com/eclipse/eclipse.jdt.ls).
-   [Emacs Java IDE using Eclipse JDT Language Server](https://github.com/emacs-lsp/lsp-java).
-   [vscode-html-languageserver extracted from VSCode](https://github.com/vscode-langservers/vscode-html-languageserver-bin).

# \[2019-02-24 Sun\] Copy from desktop to mobile via QR code
---
id: copy-from-desktop-to-mobile-via-qr-code
---

[Marcin Borkowski](https://twitter.com/marcin_mbork) has a nice [tip](http://mbork.pl/2019-02-24_Transferring_strings_to_a_phone_via_QR_codes) to quickly copy text or URLs between desktop and mobile using QR codes.

Wrote a little elisp to do a similar thing using the clipboard via Emacs:

``` {.commonlisp org-language="emacs-lisp"}
(defun ar/misc-clipboard-to-qr ()
  "Convert text in clipboard to qrcode and display within Emacs."
  (interactive)
  (let ((temp-file (concat (temporary-file-directory) "qr-code")))
    (if (eq 0 (shell-command (format "qrencode -s10 -o %s %s"
                                     temp-file
                                     (shell-quote-argument (current-kill 0)))
                             "*qrencode*"))
        (switch-to-buffer (find-file-noselect temp-file t))
      (error "Error: Could not create qrcode, check *qrencode* buffer"))))
```

![](https://xenodium.github.io/images/copy-from-desktop-to-mobile-via-qr-code/qrencode.gif)

ps. [Encoding your WiFi access point password into a QR code](https://feeding.cloud.geek.nz/posts/encoding-wifi-access-point-passwords-qr-code/) shows how to encode WiFi access point passwords:

``` {.bash org-language="sh"}
qrencode -o wifi.png "WIFI:T:WPA;S:<SSID>;P:<PASSWORD>;;"
```

More comprehensively:

``` {.bash org-language="sh"}
SSID=SSID_GOES_HERE
pwgen -s 63 > 00wifi.txt
qrencode -o 00wifi.png "WIFI:T:WPA;S:${SSID};P:$(cat 00wifi.txt);;"
```

# \[2019-02-19 Tue\] Parsing dates in Go
---
id: parsing-dates-in-go
---

Ensure the reference time ("Mon Jan 2 15:04:05 -0700 MST 2006") is used in layout string.

For example:

``` {.go results="verbatim" exports="both"}
package main

import (
        "fmt"
        "time"
)

func main() {
        goodLayout := "January 2 2006"
        if t, err := time.Parse(goodLayout, "March 10 2019"); err != nil {
                    fmt.Printf("%s\n", err)
        } else {
                    fmt.Printf("%v\n", t)
        }

        badLayout := "January 2 2009"
        if t, err := time.Parse(badLayout, "March 10 2019"); err != nil {
                    fmt.Printf("%s\n", err)
        } else {
                    fmt.Printf("%v\n", t)
        }
}
```

```{=org}
#+RESULTS:
```
``` example
2019-03-10 00:00:00 +0000 UTC
parsing time "March 10 2019" as "January 2 2009": cannot parse "19" as "009"
```

# \[2019-02-13 Wed\] Life in the UK bookmarks
---
id: life-in-the-uk-bookmarks
---



-   ['LitUK': notes by a Redditor (TextUploader.com)](https://textuploader.com/5yfk0).
-   [Life In The UK Test, Practice Tests 2017](https://lifeintheuktestweb.co.uk/).

# \[2019-02-10 Sun\] C language bookmarks
---
id: c-language-bookmarks
---

-   [LittlevGL - Open-source Embedded GUI Library](https://littlevgl.com/).

# \[2019-02-10 Sun\] Video editing bookmarks
---
id: video-editing-bookmarks
---



-   [Adding subtitles to your videos the easy way - Bernd Verst](https://bernd.dev/2020/04/adding-subtitles/).
-   [Adventures in Netflix (screenshotting HDMI)](https://lars.ingebrigtsen.no/2019/02/14/adventures-in-netflix/).
-   [Camera Stabilisation with FFmpeg - Adaptive Samples](https://blog.gregzaal.com/2014/05/30/camera-stabilisation-with-ffmpeg/).
-   [DaVinci Resolve 17 \| Blackmagic Design](https://www.blackmagicdesign.com/products/davinciresolve/).
-   [digiKam](https://www.digikam.org/news/2020-07-19-7.0.0_release_announcement/).
-   [Dragon Quest 64: Non-Rectangular Video Cropping](https://dragonquest64.blogspot.com/2019/11/non-rectangular-video-cropping.html).
-   [FFmpeg - How to achieve a circular video overlay..?](https://superuser.com/questions/1270950/ffmpeg-how-to-achieve-a-circular-video-overlay).
-   [GitHub - mifi/lossless-cut: The swiss army knife of lossless video/audio editing](https://github.com/mifi/lossless-cut).
-   [GitHub - moxuse/Kusabi: Coding environment 3D graphics with PureScript.](https://github.com/moxuse/kusabi).
-   [GitHub - whyboris/Video-Hub-App: Official repository for Video Hub App 2](https://github.com/whyboris/Video-Hub-App).
-   [HOW TO DATAMOSH: PART 1 - YouTube](https://www.youtube.com/watch?v=tYytVzbPky8).
-   [How to trim video clips instantly without reencoding \| Hacker News](https://news.ycombinator.com/item?id=22775502).
-   [Inserting a Watermark with FFmpeg (Linux Magazine)](http://www.linux-magazine.com/Issues/2018/206/Tutorials-FFmpeg).
-   [Learn FFmpeg the hard way (Hacker News)](https://news.ycombinator.com/item?id=16192813).
-   [Non-Rectangular Video Cropping with FFMpeg \| Hacker News](https://news.ycombinator.com/item?id=21897293).
-   [Trim Videos Instantly - Bernd Verst](https://bernd.dev/2020/04/trim-videos-instantly/).

# \[2019-02-10 Sun\] Icons bookmarks
---
id: icons-bookmarks
---



-   [Absurd Design – Free Surrealist Illustrations and Vector Art (Hacker News)](https://news.ycombinator.com/item?id=21039739).
-   [Find Similar Icons (using Noun Project)](http://compute.vision/nouns/index.html).
-   [Noun Project - Icons for Everything](https://thenounproject.com/).
-   [shape.so icons](https://t.co/ttqvpky3Te).
-   [Streamline 3.0 – The World's Largest Icon Library](https://streamlineicons.com/).

# \[2019-01-27 Sun\] Salt beef recipe
---
id: salt-beef-recipe
---

[How to make salt beef](https://www.theguardian.com/lifeandstyle/gallery/2010/nov/03/how-to-make-salt-beef) (use 1.8kg brisket instead) and [brining a brisket](https://www.theguardian.com/lifeandstyle/gallery/2010/nov/03/how-to-brine-a-brisket) (celery and peppercorns) both from The Guardian were recommended by a friend.

# \[2019-01-27 Sun\] Geneva travel bookmarks
---
id: geneva-travel-bookmarks
---

-   [La Buvette des Bains, Restaurants in Pâquis](https://www.timeout.com/switzerland/restaurants-and-cafes/la-buvette-des-bains).

# \[2019-01-13 Sun\] Swapping Emacs ivy collections/sources
---
id: swapping-emacs-ivy-collectionssources
---

[Ivy](https://github.com/abo-abo/swiper) is great. I've been meaning to figure out a way to swap sources while running ivy. This would enable me to cycle through different sources using the existing search parameters.

At first look, *'ivy-set-sources* seemed like the right choice, but it's used during setup to agregate sources. Subsequent *'ivy-set-sources* calls are ignored during an *'ivy-read* session.

There's an ivy [feature request](https://github.com/abo-abo/swiper/issues/606) over at github with a similar goal in mind. Although the feature is not yet supported, there's a handy suggestion to use *'ivy-quit-and-run* to quit the current command and run a different one.

With *'ivy-quit-and-run* in mind, we can write our *'ar/ivy-read* function to take a list of sources and add a little logic to cycle through them using a keybiding, in my case \<left\> and \<right\>.

``` {.commonlisp org-language="emacs-lisp"}
;;; -*- lexical-binding: t; -*-

(require 'cl)

(cl-defstruct
    ar/ivy-source
  prompt
  collection
  action)

(cl-defun ar/ivy-read (sources &key index initial-input)
  (let ((kmap (make-sparse-keymap))
        (source))
    (cl-assert (> (length sources) 0))
    (when (null index) (setq index 0))
    (setq source (nth index sources))
    (define-key kmap (kbd "<right>") (lambda ()
                                       (interactive)
                                       (ivy-quit-and-run (ar/ivy-read sources
                                                                      :index (if (>= (1+ index)
                                                                                     (length sources))
                                                                                 0
                                                                               (1+ index))
                                                                      :initial-input ivy-text))))
    (define-key kmap (kbd "<left>") (lambda ()
                                      (interactive)
                                      (ivy-quit-and-run (ar/ivy-read sources
                                                                     :index (if (< (1- index)
                                                                                   0)
                                                                                (1- (length sources))
                                                                              (1- index))
                                                                     :initial-input ivy-text))))
    (ivy-read (ar/ivy-source-prompt source)
              (ar/ivy-source-collection source)
              :action (ar/ivy-source-action source)
              :initial-input initial-input
              :keymap kmap)))

(defun ar/ivy-food-menu ()
  (interactive)
  (ar/ivy-read (list
                (make-ar/ivy-source :prompt "Pizza: "
                                    :action (lambda (selection)
                                              (message "Selected pizza: %s" selection))
                                    :collection (lambda (str pred v)
                                                  (list "Bianca Neve - Mozzarella, Ricotta, Sausage, Extra Virgin Olive Oil, Basil"
                                                        "Boscaiola - Mozzarella, Tomato Sauce, Sausage, Mushrooms, Extra Virgin Olive Oil, Basil"
                                                        "Calzone - Ricotta, Ham, Mushrooms, Artichokes. Topped with Tomato Sauce and Extra Virgin Olive Oil."
                                                        "Capricciosa - Mozzarella,Tomato Sauce, Prosciutto Cotto Ham, Mushrooms, Artichokes, Extra Virgin Olive Oil."
                                                        "Carciofi - Mozzarella, Tomato Sauce, Artichokes, Extra Virgin Olive Oil, Basil."
                                                        "Diavola - Mozzarella, Tomato Sauce, Spicy Salami, Extra Virgin Olive Oil, Basil."
                                                        "Funghi - Mozzarella, Tomato Sauce, Mushrooms, Extra Virgin Olive Oil, Basil.")))
                (make-ar/ivy-source :prompt "Tacos: "
                                    :action (lambda (selection)
                                              (message "Selected taco: %s" selection))
                                    :collection (lambda (str pred v)
                                                  (list "Pork pibil - Slow cooked in citrus & spices, with pink pickled onions."
                                                        "Grilled chicken & avocado - Ancho rub, guacamole & green tomatillo salsa."
                                                        "Plantain - Sweet & spicy chipotle & crumbled feta."
                                                        "Poblano pepper - Caramelised onions, corn & cashew nut mole."
                                                        "Buttermilk chicken - Served crispy fried with habanero & white onion relish & spiced mayo."
                                                        "Sustainable battered cod - mSC certified cod with shredded slaw, chipotle mayo & pickled cucumber."
                                                        "Chargrilled steak - Avocado & chipotle salsas.")))
                (make-ar/ivy-source :prompt "Burgers: "
                                    :action (lambda (selection)
                                              (message "Selected burger: %s" selection))
                                    :collection (lambda (str pred v)
                                                  (list "The cheese - Aged beef patty with american cheese, gherkins, ketchup & mustard."
                                                        "The yeah! - Aged beef patty with american cheese, gherkins, yeah! sauce & salad."
                                                        "The yfc or hot yfc - Crispy chicken with lime or chipotle crema, lettuce, pickled onion & slaw."
                                                        "The rancher - Grilled chicken with ranch dressing, bacon & salad."
                                                        "The bubbah - Aged beef patty with smokey aubergine, pickled red cabbage, lettuce, roast toms, onions & cheddar."
                                                        "The bulgogi - Sesame-spiced beef patty with miso mayo, pickled radish, onion, cucumber & spring onion."
                                                        "The summer - Aged beef patty with sriracha mayo, lettuce, onion, toms, avo, cheddar & bacon."))))))
```

![](https://xenodium.github.io/images/swapping-emacs-ivy-collectionssources/ivy-cycle-sources.gif)

ps. Menu data from [Star of Kings](https://starofkings.co.uk/food-and-drink/), [Wahaca](https://www.wahaca.co.uk/menu/food/), and [Pizzarino](https://pizzarino.us/menu).

# \[2019-01-12 Sat\] Podcast bookmarks
---
id: podcast-bookmarks
---



-   [Destination Linux. A conversational podcast by people who love running Linux.](https://destinationlinux.org/).
-   [EmacsCast](https://emacscast.org/).
-   [Free as in Freedom](http://faif.us/).
-   [Gnu World Order](http://gnuworldorder.info/).
-   [Late Night Linux](https://latenightlinux.com/).
-   [Libre Lounge](https://librelounge.org/).
-   [Linux Lads Podcast](https://linuxlads.com/).
-   [The Binary Times Podcast (Linux/free software/hardware/culture)](https://www.thebinarytimes.net/).
-   [Ubuntu Podcast](http://ubuntupodcast.org/).

# \[2019-01-12 Sat\] Emacs on macOS Mojave
---
id: emacs-on-macos-mojave
---

Had issues running Emacs on macOS Mojave (blank unresponsive screen). Bleeding edge emacs-plus did the job:

``` {.bash org-language="sh"}
brew tap d12frosted/emacs-plus
brew install emacs-plus --without-spacemacs-icon --HEAD
```

``` {.bash org-language="sh" results="verbatim" exports="both"}
brew info emacs-plus
```

``` example
d12frosted/emacs-plus/emacs-plus: stable 26.1, devel 26.1-rc1, HEAD
GNU Emacs text editor
https://www.gnu.org/software/emacs/
/Users/some-user/homebrew/Cellar/emacs-plus/HEAD-8fe21b0 (3,985 files, 123.0MB) *
  Built from source on 2019-01-12 at 09:26:09 with: --without-spacemacs-icon
From: https://github.com/d12frosted/homebrew-emacs-plus/blob/master/Formula/emacs-plus.rb
==> Dependencies
Build: pkg-config
Recommended: little-cms2, gnutls, librsvg, imagemagick@6
Optional: dbus, mailutils
==> Requirements
Optional: x11
==> Options
--with-ctags
    Don't remove the ctags executable that Emacs provides
--with-dbus
    Build with dbus support
--with-emacs-icons-project-EmacsIcon1
    Using Emacs icon project EmacsIcon1
--with-emacs-icons-project-EmacsIcon2
    Using Emacs icon project EmacsIcon2
--with-emacs-icons-project-EmacsIcon3
    Using Emacs icon project EmacsIcon3
--with-emacs-icons-project-EmacsIcon4
    Using Emacs icon project EmacsIcon4
--with-emacs-icons-project-EmacsIcon5
    Using Emacs icon project EmacsIcon5
--with-emacs-icons-project-EmacsIcon6
    Using Emacs icon project EmacsIcon6
--with-emacs-icons-project-EmacsIcon7
    Using Emacs icon project EmacsIcon7
--with-emacs-icons-project-EmacsIcon8
    Using Emacs icon project EmacsIcon8
--with-emacs-icons-project-EmacsIcon9
    Using Emacs icon project EmacsIcon9
--with-emacs-icons-project-emacs-card-blue-deep
    Using Emacs icon project emacs-card-blue-deep
--with-emacs-icons-project-emacs-card-british-racing-green
    Using Emacs icon project emacs-card-british-racing-green
--with-emacs-icons-project-emacs-card-carmine
    Using Emacs icon project emacs-card-carmine
--with-emacs-icons-project-emacs-card-green
    Using Emacs icon project emacs-card-green
--with-mailutils
    Build with mailutils support
--with-modern-icon
    Using a modern style Emacs icon by @tpanum
--with-no-titlebar
    Experimental: build without titlebar
--with-pdumper
    Experimental: build from pdumper branch and with
         increasedremembered_data size (--HEAD only)
--with-x11
    Experimental: build with x11 support
--with-xwidgets
    Experimental: build with xwidgets support (--HEAD only)
--without-cocoa
    Build a non-Cocoa version of Emacs
--without-gnutls
    Build without gnutls support
--without-imagemagick@6
    Build without imagemagick@6 support
--without-librsvg
    Build without librsvg support
--without-libxml2
    Build without libxml2 support
--without-little-cms2
    Build without little-cms2 support
--without-modules
    Build without dynamic modules support
--without-multicolor-fonts
    Build without a patch that enables multicolor font support
--without-spacemacs-icon
    Build without Spacemacs icon by Nasser Alshammari
--devel
    Install development version 26.1-rc1
--HEAD
    Install HEAD version
==> Caveats
Emacs.app was installed to:
  /Users/some-user/homebrew/Cellar/emacs-plus/26.1

To link the application to default Homebrew App location:
  brew linkapps
or:
  ln -s /Users/some-user/homebrew/Cellar/emacs-plus/26.1/Emacs.app /Applications

--natural-title-bar option was removed from this formula, in order to
  duplicate its effect add following line to your init.el file
  (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
  (add-to-list 'default-frame-alist '(ns-appearance . dark))
or:
  (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
  (add-to-list 'default-frame-alist '(ns-appearance . light))

If you are using macOS Mojave, please note that most of the experimental
options are forbidden on Mojave. This is temporary decision.


To have launchd start d12frosted/emacs-plus/emacs-plus now and restart at login:
  brew services start d12frosted/emacs-plus/emacs-plus
Or, if you don't want/need a background service you can just run:
  emacs
```

# \[2019-01-06 Sun\] Trying out Emacs pdf tools
---
id: trying-out-emacs-pdf-tools
---

Late to the party, giving [pdf-tools](https://github.com/politza/pdf-tools) a try.

The [macOS install instructions](https://github.com/politza/pdf-tools#compiling-on-os-x) have a prerequisite:

``` {.bash org-language="sh"}
brew install poppler automake
```

Installed with:

``` {.commonlisp org-language="emacs-lisp"}
(use-package pdf-tools
  :ensure t
  :mode ("\\.pdf\\'" . pdf-view-mode)
  :config
  (pdf-tools-install)
  (setq-default pdf-view-display-size 'fit-page)
  (setq pdf-annot-activate-created-annotations t))
```

![](https://xenodium.github.io/images/trying-out-emacs-pdf-tools/pdf-tools.png)

ps. (pdf-tools-install) may not find libffi on macOS. Try:

``` {.commonlisp org-language="emacs-lisp"}
(setenv "PKG_CONFIG_PATH"
        (f-join
         (file-name-as-directory
          (nth 0
               (split-string
                (shell-command-to-string "brew --prefix"))))
         "Cellar" "libffi" "3.2.1" "lib" "pkgconfig"))
```

# \[2018-12-27 Thu\] ASCII art generator bookmarks
---
id: ascii-art-generator-bookmarks
---

-   [𝓔𝓻𝓰𝓮𝓻𝓪𝓽𝓸𝓻/Ergerator (ascii generator)](http://antglove.com/erger/).

# \[2018-12-26 Wed\] Osaka travel bookmarks
---
id: osaka-travel-bookmarks
---

-   [Tsutenkaku (Osaka) - 2018 All You Need to Know BEFORE You Go (with Photos) - TripAdvisor](https://www.tripadvisor.com/Attraction_Review-g298566-d1195795-Reviews-Tsutenkaku-Osaka_Osaka_Prefecture_Kinki.html).

# \[2018-12-25 Tue\] Using OCR to create searchable pdfs from images
---
id: using-ocr-to-create-searchable-pdfs-from-images
---

Used my phone to take a handful of photos of an article from a magazine. Wanted to convert the images to a searchable pdf on macOS.

This was straightforward, having [already installed tesseract](http://xenodium.com/trying-out-tesseract).

``` {.bash org-language="sh"}
for i in IMG_3*.jpg; do echo $i; tesseract $i $(basename $i .tif) pdf; done
```

Should now have a handful of OCR'd pdfs:

``` {.bash org-language="sh" results="verbatim" exports="both"}
ls *.jpg.pdf
```

``` example
IMG_3104.jpg.pdf
IMG_3105.jpg.pdf
IMG_3106.jpg.pdf
IMG_3107.jpg.pdf
```

Finally, join all pdfs into one. Turns out macOS has a handy python script already installed. We can use it as:

``` {.bash org-language="sh"}
/usr/bin/python "/System/Library/Automator/Combine PDF Pages.action/Contents/Resources/join.py" -o joined.pdf IMG_*pdf
```

ps. [pdfgrep](https://pdfgrep.org) is great for searching pdfs.

## Useful references

-   [Ryan Baumann's: Command-Line OCR with Tesseract on Mac OS X](https://ryanfb.github.io/etc/2014/11/13/command_line_ocr_on_mac_os_x.html).

# \[2018-12-25 Tue\] Audiobook providers bookmarks
---
id: audiobook-providers-bookmarks
---



-   [1,000 Free Audio Books: Download Great Books for Free \| Open Culture](http://www.openculture.com/freeaudiobooks).
-   [BBC Sound Effects Archive Resource • Research & Education Space](http://bbcsfx.acropolis.org.uk/).
-   [Libro.fm (Libro.fm, Your Independent Bookstore for Digital Audiobooks)](https://libro.fm/).
-   [Online Courses & Lectures for Home Study and Lifelong Learning](https://www.thegreatcourses.co.uk/).
-   [The best free cultural and educational media on the web (Open Culture)](http://www.openculture.com/).

# \[2018-12-25 Tue\] Cookbook bookmarks
---
id: cookbook-bookmarks
---



-   [Japan: The Cookbook (Nancy Singleton Hachisu)](https://www.nancysingletonhachisu.com/the-attic-loft/).
-   [Japanese Farm Food (Nancy Singleton Hachisu)](https://www.nancysingletonhachisu.com/the-woodhouse/).
-   [Preserving the Japanese Way (Nancy Singleton Hachisu)](https://www.nancysingletonhachisu.com/the-country-annex/).

# \[2018-12-25 Tue\] Emailing pdfs to kindle from mu4e
---
id: emailing-pdfs-to-kindle-from-mu4e
---

Wanted to send a pdf to my kindle for some holiday reading. You can easily do this by emailing the pdf to your kindle-bound email address.

Now, I typically attach files when composing mu4e emails by using *mml-attach-file*, which attaches the file using *\<#part\>…\<#/part\>*. However, the Amazon service did not find the attached pdf, so no pdf was added to my Kindle.

Fortunately, I found a handy [Reddit thread, leding me to a working solution](https://www.reddit.com/r/emacs/comments/97abs7/anyone_uses_mu4e_to_send_mobi_files_to_kindle). Wrapping the part using *\<#multipart type=mixed\>…\<#/multipart\>* did the job, using *mml-insert-multipart*, followed by *mml-attach-file*.

Resulting attachment should look something like:

``` example
<#multipart type=mixed>
<#part type="application/pdf" filename="/path/to/file.pdf" disposition=attachment>
<#/part>
<#/multipart>
```

I should add a convenience elisp function for this, but that's for another time…

# \[2018-12-21 Fri\] org tip: convert csv to table
---
id: org-tip-convert-csv-to-table
---

Needed to import some csv data to an org table. Turns out org's got you covered out of the box with *M-x org-table-create-or-convert-from-region* bound to *C-c \|*.

![](https://xenodium.github.io/images/org-tip-convert-csv-to-table/csv-to-org-table.gif)

# \[2018-12-20 Thu\] Sponsoring platform bookmarks
---
id: sponsoring-platform-bookmarks
---



-   [Best way for artists and creators to get sustainable income and connect with fans (Patreon)](https://www.patreon.com/).
-   [Buy Me A Coffee — A free, fast and beautiful way for creators to monetise their content](https://www.buymeacoffee.com/).
-   [Tallycoin is a Bitcoin fundraising platform and a Patreon alternative.](https://tallyco.in/).

# \[2018-12-20 Thu\] Artistic/creative bookmarks
---
id: artisticcreative-bookmarks
---



-   [BoxTail fractals (DeviantArt Gallery)](https://www.deviantart.com/boxtail/gallery/).
-   [Fermat's spiral - Wikipedia](https://en.wikipedia.org/wiki/Fermat%27s_spiral).
-   [Lost Art Press (woodworking books)](https://lostartpress.com/).
-   [Tom Sachs (knolling exhibits)](https://www.tomsachs.org).

# \[2018-12-20 Thu\] Marketing bookmarks
---
id: marketing-bookmarks
---



-   [Product Marketing for Engineers \| Hacker News](https://news.ycombinator.com/item?id=23289185).
-   [Startup Website Builder - Launchaco](https://www.launchaco.com/).

# \[2018-12-19 Wed\] Bluetooth low energy (BLE) bookmarks
---
id: bluetooth-low-energy-ble-bookmarks
---



-   [blueutil » Command-Line Control of Bluetooth on the Mac](http://www.frederikseiffert.de/blueutil/).
-   [The Practical Guide to Hacking Bluetooth Low Energy (Hacker News)](https://news.ycombinator.com/item?id=18704182).
-   [The Practical Guide to Hacking Bluetooth Low Energy](https://blog.attify.com/the-practical-guide-to-hacking-bluetooth-low-energy/).

# \[2018-12-18 Tue\] Fun project bookmarks
---
id: fun-project-bookmarks
---

-   [echo yang programs everyday obsolete machines to create autonomous art (designboom)](https://www.designboom.com/art/echo-yang-programs-everyday-obsolete-machines-to-create-autonomous-art-02-28-2014/?mc_cid=31214c131d&mc_eid=add1859a90).

# \[2018-12-14 Fri\] Snowboarding bookmarks
---
id: snowboarding-bookmarks
---

-   [Snowboarding for Geeks (Hacker News)](https://news.ycombinator.com/item?id=18680617).

# \[2018-12-11 Tue\] Scam bookmarks
---
id: scam-bookmarks
---



-   [419 Eater - The largest scambaiting community on the planet!](https://www.419eater.com/).
-   [The little black book of scams (2016) (Hacker News)](https://news.ycombinator.com/item?id=18577734).
-   [The little black book of scams (ACCC)](https://www.accc.gov.au/publications/the-little-black-book-of-scams).

# \[2018-12-11 Tue\] Passive income bookmarks
---
id: passive-income-bookmarks
---



-   [Awesome products designed by independent artists (Redbubble)](https://www.redbubble.com).
-   [Kit (Paul Jarvi's recording gear)](https://kit.com/pjrvs/gear-for-recording-videos-and-doing-interviews).
-   [Merch By Amazon Discussion (Reddit)](https://www.reddit.com/r/AmazonMerch/).
-   [Teespring](https://teespring.com/).
-   [What is Merch By Amazon?](https://thesavingninja.com/what-is-merch-by-amazon/).

# \[2018-12-08 Sat\] DWIM ivy quit
---
id: dwim-ivy-quit
---

"Do-what-I-mean" (DWIM) functions enable us to introduce new Emacs powers to existing workflows without incurring the typical cost of remembering multiple related functions or introducing yet another key binding. DWIM functions invoke other functions, based on current context.

I wanted a small tweak in Ivy's *\`minibuffer-keyboard-quit'* invocation, commonly invoked via *C-g* key binding:

1.  If we have text selected in minibuffer, deselect it.
2.  If we have any text in minibuffer, clear it.
3.  If no text in minibuffer, quit.

Added *\`ar/ivy-keyboard-quit-dwim'* for this purpose. Binding it to C-g in *ivy-minibuffer-map*:

``` {.commonlisp org-language="emacs-lisp"}
(use-package ivy
  :ensure t
  :bind (:map ivy-minibuffer-map
              ("C-g" . ar/ivy-keyboard-quit-dwim))
  :config
  (defun ar/ivy-keyboard-quit-dwim ()
    "If region active, deactivate. If there's content, clear the minibuffer. Otherwise quit."
    (interactive)
    (cond ((and delete-selection-mode (region-active-p))
           (setq deactivate-mark t))
          ((> (length ivy-text) 0)
           (delete-minibuffer-contents))
          (t
           (minibuffer-keyboard-quit)))))
```

![](https://xenodium.github.io/images/dwim-ivy-quit/ivy-keybqoard-quit-dwim.gif)

# \[2018-12-05 Wed\] Diffing directories content size
---
id: diffing-directories-content-size
---

Needed to diff two directories, but only interested in file size changes. diff, find, sort, and stat seem to do the job:

``` {.bash org-language="sh" results="verbatim" exports="both"}
diff <(find dir1 -type f -exec stat -f '%N %z' '{}' \; | sort) <(find dir2 -type f -exec stat -f '%N %z' '{}' \; | sort)
```

``` example
1,3c1,2
< dir1/one.txt 14
< dir1/subdir/file.txt 5
< dir1/three.txt 7
---
> dir2/one.txt 19
> dir2/two.txt 0
```

*Note: Using diff, find, sort, and stat on macOS.*

## Update 1

I've since learned about mtree (thanks [Roman](https://twitter.com/romanzolotarev/status/1070249301815771137)!). A nice utility to add to the toolbox.

``` {.bash org-language="sh"}
mtree -p emacs-25.1 -c -k size -d
```

``` example
#    user: me
# machine: my-machine
#    tree: /path/to/emacs-25.1
#    date: Wed Dec  5 22:21:07 2018
# .
/set type=dir
.               size=1152
# ./admin
admin           size=960
# ./admin/charsets
charsets        size=544
# ./admin/charsets/glibc
glibc           size=3392
# ./admin/charsets/glibc
..
# ./admin/charsets/mapfiles
mapfiles        size=640
# ./admin/charsets/mapfiles
..
```

## Update 2

I've added Emacs ediff to the mix:

``` {.commonlisp org-language="emacs-lisp"}
(require 'f)

(defun ar/ediff-dir-content-size ()
    "Diff all subdirectories (sizes only) in two directories."
    (interactive)
    (let* ((dir1-path (read-directory-name "Dir 1: "))
           (dir2-path (read-directory-name "Dir 2: "))
           (buf1 (get-buffer-create (format "*Dir 1 (%s)*" (f-base dir1-path))))
           (buf2 (get-buffer-create (format "*Dir 2 (%s)*" (f-base dir2-path)))))
      (with-current-buffer buf1
        (erase-buffer))
      (with-current-buffer buf2
        (erase-buffer))
      (shell-command (format "cd %s; find . -type d | sort | du -h" dir1-path) buf1)
      (shell-command (format "cd %s; find . -type d | sort | du -h" dir2-path) buf2)
      (ediff-buffers buf1 buf2)))
```

![](https://xenodium.github.io/images/diffing-directories-content-size/ediff-dir-content-size.png)

# \[2018-12-02 Sun\] Swift nil-coalescing operator
---
id: swift-nil-coalescing-operator
---

[Paul Hudson](https://twitter.com/twostraws), over at [Hacking with Swift](https://www.hackingwithswift.com/), has written [The Complete Guide to Optionals in Swift](https://www.hackingwithswift.com/articles/136/the-complete-guide-to-optionals-in-swift). One of the many highlights is the [nil-coalescing operator](https://docs.swift.org/swift-book/LanguageGuide/BasicOperators.html#ID72). If you're a fan of the [C-like syntax in ternary operations](https://en.wikipedia.org/wiki/Ternary_operation), you'd enjoy chaining with Swift's nil-coalescing operator:

``` swift
let players = [ "goose": "run!" ]
let move = players["duck1"] ?? players["duck2"] ?? players["duck3"] ?? players["goose"]
print("\(String(describing: move))")
```

ps. Swift snippet run on Emacs [org babel's](https://orgmode.org/worg/org-contrib/babel/intro.html) [ob-swift](https://github.com/zweifisch/ob-swift). See [Multiline Swift strings](#multiline-swift-strings) for details.

# \[2018-12-01 Sat\] Ocado vs Asda (org table)
---
id: ocado-vs-asda-org-table
---

Someone handed me an [Ocado](https://www.ocado.com) shopping voucher for 30% off. Sounded promising, even for a one-off.

With my [Money or Your Life](https://www.amazon.co.uk/Transforming-Relationship-Achieving-Financial-Independence/dp/0143115766/) hat on, I took a closer look for potential savings. Results were disappointing, when compared to alternatives like Asda.

Here's a table comparing Ocado (30% off) and Asda (no discount):

                                                                                                                                                                         Ocado    Asda
  ---------------------------------------------------------------------------------------------------------------------------------------------------------------------- -------- --------
  [Coconut Merchant Organic Raw Extra Virgin Coconut Oil 500ml](https://www.ocado.com/webshop/product/Coconut-Merchant-Organic-Raw-Extra-Virgin-Coconut-Oil/372144011)   6.74
  [KTC 100% pure coconut oil](https://groceries.asda.com/product/oils/ktc-coconut-hair-oil/910000033621)                                                                          2.00
  [Waitrose Love Life Popcorn Maize 510g](https://www.ocado.com/webshop/product/Waitrose-Love-Life-Popcorn-Maize/25130011)                                               1.50
  [Cypressa Popping Corn 2x500g = 1000g](https://groceries.asda.com/promotion/2-for-pound-1.50/ls89129)                                                                           1.50
  [Whitworths Ground Almonds](https://www.ocado.com/webshop/product/Whitworths-Ground-Almonds/275684011)                                                                 2.00
  [Whitworths Ground Almonds](https://groceries.asda.com/product/baking-nuts-seeds-fruit/whitworths-ground-almonds/910000797981)                                                  1.60
  Total                                                                                                                                                                           £ 5.10
  -30%                                                                                                                                                                   £ 7.17

```{=org}
#+TBLFM: @8$3=vsum(@2$3..@7$3);£ %.2f::@9$2=vsum(@2$2..@7$2) * 0.7;£ %.2f
```
On the upside, Ocado has plenty of items I cannot find at Asda. May be a good opportunity to get these items at a discount.

## Emacs org tables

Small tables are the perfect use-case for Emacs [org-mode tables](https://orgmode.org/manual/Tables.html). Been a while since I used one, so great timing for a little refresh.

Here's the org source for the table above (prior to exporting to HTML):

# \[2018-11-24 Sat\] Execute org blocks as root
---
id: execute-org-blocks-as-root
---

Been saving admin code snippets in my own [org source blocks](https://orgmode.org/manual/Working-with-source-code.html), some requiring root access. Handy for keeping tiny self-documented scripts to easily bootstrap other machines. TIL org source block's *:dir* argument can be used to run block as root by using tramp syntax: /:dir *sudo::*

# \[2018-11-23 Fri\] Inline Swift computed properties
---
id: inline-swift-computed-properties
---

Via [objc.io](https://twitter.com/objcio) and [Max Howell's](https://twitter.com/mxcl) [retweet](https://twitter.com/mxcl/status/1065802821700857856), TIL about Swift's inline computed properties. Another one to try on Org [Babel](https://orgmode.org/worg/org-contrib/babel/intro.html). ‏

``` swift
func greetWorld() {
 var message = "hello"
 var betterMessage: String {
   return "\(message) world"
 }
 print(betterMessage)
}

greetWorld()
```

# \[2018-11-23 Fri\] Multiline Swift strings
---
id: multiline-swift-strings
---

[Paul Hudson's](https://twitter.com/twostraws) [tweet](https://twitter.com/twostraws) introduced me to Swift's multiline string indentation control using closing quotes. Neat!

Being an org-mode fan, I thought I'd give Swift multiline strings a try using Org [Babel's](https://orgmode.org/worg/org-contrib/babel/intro.html) [ob-swift](https://github.com/zweifisch/ob-swift). I get to verify it and document at the same time. Win.

Swift org mode source blocks (ie. BEGIN_SRC/END_SRC) can be added as follows:

By pressing *C-c C-c* anywhere in the code block, the snippet is executed and its output captured in the *RESULT* block. Super handy for quickly trying out snippets and keeping as future reference.

As a bonus, the above blocks can be exported to HTML ([amongst other formats](https://orgmode.org/manual/Exporting.html)). With some [styling](https://github.com/xenodium/dotsies/search?q=org-html-head-extra&unscoped_q=org-html-head-extra), it looks as follows:

``` {.swift exports="both"}
print("""
     Hello World
""")

print("""
     Hello World
     """)
```

``` example
     Hello World
Hello World
```

# \[2018-11-17 Sat\] Quickly swapping elfeed filters
---
id: quickly-swapping-elfeed-filters
---

I seem to be more efficient in getting through rss feeds by individually browsing through related content. That is, I can get through all Emacs entries a lot faster if I look at Emacs content exclusively, instead of mixing with say BBC news. [Elfeed](https://github.com/skeeto/elfeed) filters are great for filtering related content.

I wanted a way to easily switch through my typical categories of related content by quickly changing elfeed filters using a completion framework.

Emacs's [completing-read](https://www.gnu.org/software/emacs/manual/html_node/elisp/Minibuffer-Completion.html) plays nicely with your favorite completing framework (mine is [ivy](https://github.com/abo-abo/swiper)). With a couple of functions, we can get Emacs to ask us for the filtering category using human-readable options and quickly presenting related content. Binding the new functionality to \<tab\> is working well for me.

``` {.commonlisp org-language="emacs-lisp"}
(use-package elfeed :ensure t
  :commands elfeed
  :bind (:map elfeed-search-mode-map
              ("<tab>" . ar/elfeed-completing-filter))
  :config
  (defun ar/elfeed-filter-results-count (search-filter)
    "Count results for SEARCH-FILTER."
    (let* ((filter (elfeed-search-parse-filter search-filter))
           (head (list nil))
           (tail head)
           (count 0))
      (let ((lexical-binding t)
            (func (byte-compile (elfeed-search-compile-filter filter))))
        (with-elfeed-db-visit (entry feed)
          (when (funcall func entry feed count)
            (setf (cdr tail) (list entry)
                  tail (cdr tail)
                  count (1+ count)))))
      count))

  (defun ar/elfeed-completing-filter ()
    "Completing filter."
    (interactive)
    (let ((categories (-filter
                       (lambda (item)
                         (> (ar/elfeed-filter-results-count (cdr item))
                            0))
                       '(("All" . "@6-months-ago +unread")
                         ("BBC" . "@6-months-ago +unread +bbc")
                         ("Dev" . "@6-months-ago +unread +dev")
                         ("Emacs" . "@6-months-ago +unread +emacs")
                         ("Health" . "@6-months-ago +unread +health")
                         ("Hacker News" . "@6-months-ago +unread +hackernews")
                         ("iOS" . "@6-months-ago +unread +ios")
                         ("Money" . "@6-months-ago +unread +money")))))
      (if (> (length categories) 0)
          (progn
            (ar/elfeed-view-filtered (cdr (assoc (completing-read "Categories: " categories)
                                                 categories)))
            (goto-char (window-start)))
        (message "All caught up \\o/")))))
```

![](https://xenodium.github.io/images/quickly-swapping-elfeed-filters/completing-elfeed.gif)

We don't actually need two functions, but *ar/elfeed-filter-results-count* enables us to list only those feeds that actually have new content. The list will shrink as we get through our content. When no content is left, we get a little celebratory message.

![](https://xenodium.github.io/images/quickly-swapping-elfeed-filters/no-left.png)

# \[2018-11-14 Wed\] Converting docx to pdf on macOS
---
id: converting-docx-to-pdf-on-macos
---

Wanted to convert a docx document to pdf on macOS. Pandoc to the rescue, but first needed pdflatex installed:

``` {.bash org-language="sh" results="verbatim" exports="both"}
pandoc -t latex some.docx -o some.pdf
```

``` example
pdflatex not found. Please select a different --pdf-engine or install pdflatex
```

Installed pdflatex on macOS with:

``` {.bash org-language="sh"}
brew install mactex
```

Can also use HTML5. Install wkhtmltopdf with:

``` {.bash org-language="sh"}
brew install Caskroom/cask/wkhtmltopdf
```

Convert with:

``` {.bash org-language="sh"}
pandoc -t html5 some.docx -o some.pdf
```

# \[2018-11-13 Tue\] Faster elfeed browsing with paging
---
id: faster-elfeed-browsing-with-paging
---

Following up from [faster junk mail deletion with mu4e](http://xenodium.com/#faster-junk-mail-deletion-with-mu4e), elfeed is another candidate for enabling actions on pages. In this case, marking rss entries as read, page by Page.

If on [use-package](https://github.com/jwiegley/use-package), the function can defined and bound to the "v" key using:

``` {.commonlisp org-language="emacs-lisp"}
(use-package elfeed
  :ensure t
  :bind (:map elfeed-search-mode-map
              ("v" . ar/elfeed-mark-visible-as-read))
  :config
  (defun ar/elfeed-mark-visible-as-read ()
    (interactive)
    (require 'window-end-visible)
    (set-mark (window-start))
    (goto-char (window-end-visible))
    (activate-mark)
    (elfeed-search-untag-all-unread)
    (elfeed-search-update--force)
    (deactivate-mark)
    (goto-char (window-start))))
```

![](https://xenodium.github.io/images/faster-elfeed-browsing-with-paging/elfeed-read-by-page.gif)

# \[2018-11-10 Sat\] Faster junk mail deletion with mu4e
---
id: faster-junk-mail-deletion-with-mu4e
---

It's been roughly 5 months since [my mu4e email migration](http://xenodium.com/#trying-out-mu4e-and-offlineimap). Happy with my choice. [Mu4e](http://www.djcbsoftware.nl/code/mu/mu4e.html) is awesome.

I now have 4 email accounts managed by mu4e, and unfortunately receiving lots of junk mail.

I regularly peek at junk folders for false positives and delete junk email permanently. I've been wanting a quick way to glance at junk mail and easily delete page by page.

Deleting emails page by page is not supported in mu4e by default. *Fortunately, this is Emacs and we can change that™.*

There's a handy package by Roland Walker called [window-end-visible](http://github.com/rolandwalker/window-end-visible). We can use it to select mu4e emails by page and subsequently glue it all together to enable deleting emails by page.

``` {.commonlisp org-language="emacs-lisp"}
(require 'mu4e)
(require 'window-end-visible)

(defun ar/mu4e-delete-page ()
  (interactive)
  (set-mark (window-start))
  (goto-char (window-end-visible))
  (activate-mark)
  (mu4e-headers-mark-for-trash)
  (mu4e-mark-execute-all t)
  (deactivate-mark)
  (goto-char (window-start)))
```

I'm a [use-package](https://github.com/jwiegley/use-package) fan, so I use it to bind the "v" key to delete *visible emails (by page*).

``` {.commonlisp org-language="emacs-lisp"}
(use-package mu4e
  :bind (:map mu4e-headers-mode-map
         ("v" . ar/mu4e-delete-page))
```

![](https://xenodium.github.io/images/faster-junk-mail-deletion-with-mu4e/delete-junk.gif)

# \[2018-11-06 Tue\] Working with vultr's ipv6-only instances
---
id: working-with-vultrs-ipv6-only-instances
---

Having recently read [Your Money or Your Life](https://www.amazon.co.uk/Transforming-Relationship-Achieving-Financial-Independence/dp/0143115766/), I've been cutting down on personal expenses wherever possible. Specially recurring expenses which include monthly charges from VPS hosting. Let's reduce those charges…

My VPS needs are fairly small (mostly hobby and tinkering). [Vultr](https://www.vultr.com/?ref=7579034)† has a plan for \$2.50/month (not seen anything cheaper). The caveat for the price, you get ipv6 access only (ie. 0000:1111:2222:3333:4444:5555:6666:7777:8888).

So far so good, but my ISP doesn't yet support ipv6:

``` {.bash org-language="sh"}
$ ping6 0000:1111:2222:3333:4444:5555:6666:7777:8888
$ ping6: UDP connect: No route to host
```

Fortunately, we can still work with ipv6 by using a tunnel (TIL about [Hurricane Electric's tunnel broker](https://tunnelbroker.net)). After signing up and creating a tunnel, they conveniently show you "Example Configurations" from the "Tunnel Details" menu. In my case, macOS:

``` {.bash org-language="sh"}
ifconfig gif0 create
ifconfig gif0 tunnel <ipv4 client broker IP or DCHP internal IP> <ipv4 server IP>
ifconfig gif0 inet6 <ipv6 client broker IP> <ipv6 server IP> prefixlen 128
route -n add -inet6 default <ipv6 server IP>
```

Note: If behind router, use the DHCP internal IP.

After configuring with ifconfig, all is good. Yay!

``` {.bash org-language="sh"}
$ ping6 0000:1111:2222:3333:4444:5555:6666:7777:8888
PING6(56=40+8+8 bytes) 2001:111:22:aaa::2 --> 0000:1111:2222:3333:4444:5555:6666:7777:8888
16 bytes from 0000:1111:2222:3333:4444:5555:6666:7777:8888, icmp_seq=0 hlim=52 time=270.019 ms
16 bytes from 0000:1111:2222:3333:4444:5555:6666:7777:8888, icmp_seq=1 hlim=52 time=290.834 ms
16 bytes from 0000:1111:2222:3333:4444:5555:6666:7777:8888, icmp_seq=2 hlim=52 time=311.960 ms
16 bytes from 0000:1111:2222:3333:4444:5555:6666:7777:8888, icmp_seq=3 hlim=52 time=330.902 ms
```

I'm an ipv6 noob. I mostly need ssh access. My typical usages need small tweaks.

For ssh:

``` {.bash org-language="sh"}
ssh -6 username@0000:1111:2222:3333:4444:5555:6666:7777:8888
```

For scp:

``` {.bash org-language="sh"}
scp -6 file.txt username@\[0000:1111:2222:3333:4444:5555:6666:7777:8888\]:/remote/dir/
```

† I get \$10 credit if you use this affiliate link. Thank you.

# \[2018-11-04 Sun\] Shaving bookmarks
---
id: shaving-bookmarks
---

-   [8 best safety razors (The Independent)](https://www.independent.co.uk/extras/indybest/fashion-beauty/mens-grooming/best-safety-razors-for-beginners-sensitive-skin-10111508.html).

# \[2018-11-04 Sun\] Buy it for life bookmarks
---
id: buy-it-for-life-bookmarks
---

-   [Fjällräven jackets](https://www.fjallraven.com).
-   [Gillette slim (Etsy)](https://www.etsy.com/uk/market/gillette_slim).

# \[2018-10-29 Mon\] Rust bookmarks
---
id: rust-bookmarks
---



-   [Configuring Emacs for Rust development \| Robert Krahn](https://robert.kra.hn/posts/2021-02-07_rust-with-emacs/).
-   [Introducing the Rust crash course](https://www.snoyman.com/blog/2018/10/introducing-rust-crash-course).
-   [Rust Language Cheat Sheet (cheats.rs) ](https://news.ycombinator.com/item).

# \[2018-10-28 Sun\] Fonts bookmarks
---
id: fonts-bookmarks
---



-   [Get the Font](https://www.getthefont.com/).
-   [GitHub - rsms/inter: The Inter UI font family](https://github.com/rsms/inter).
-   [Input: Fonts for Code](https://input.fontbureau.com/).
-   [Need an industrial typeface like this, anyone?](https://x.com/Markbuschn/status/1866263306333229288).
-   [Programming Fonts - Test Drive](https://app.programmingfonts.org/).
-   [Sudo Coding Font \| Jens Kutílek](https://www.kutilek.de/sudo-font/).
-   [The package of IBM’s typeface, IBM Plex (font)](https://github.com/IBM/plex).

# \[2018-10-17 Wed\] imenu on Emacs eshell
---
id: imenu-on-emacs-eshell
---

[imenu](https://www.gnu.org/software/emacs/manual/html_node/emacs/Imenu.html) navigation is one of those Emacs gems I didn't discover until much later on. It does what you'd expect in all types of modes. In rare instances, I've found specific modes missing imenu support. Fortunately, this is Emacs and you can fix that.

[Eshell](https://www.gnu.org/software/emacs/manual/html_mono/eshell.html) has a handy feature to jump back and forth over previous prompts using *M-x eshell-previous-prompt (C-c C-p)* and *M-x eshell-next-prompt (C-c C-n)*. Upon learning about these two functions, my immediate reaction was to try imenu. Surprisingly, it didn't "just work", but a tiny bit of elisp brought balance back to the Emacs universe.

In an eshell mode hook function, one can set the [imenu-generic-expression](https://www.gnu.org/software/emacs/manual/html_node/elisp/Imenu.html#index-imenu_002dgeneric_002dexpression-2058) to help it find your favorite prompt:

``` {.commonlisp org-language="emacs-lisp"}
(setq-local imenu-generic-expression
                  '(("Prompt" " $ \\(.*\\)" 1)))
```

Ah it's the little things…

![](https://xenodium.github.io/images/imenu-on-emacs-eshell/eshell-imenu.gif)

ps. If wondering why my imenu experience looks a little different, that's because I'm using Abo Abo's wonderful [counsel](https://github.com/abo-abo/swiper) and *M-x counsel-semantic-or-imenu*.

# \[2018-10-14 Sun\] Encrypted disk image on macOS
---
id: encrypted-disk-image-on-macos
---

![](https://xenodium.github.io/images/encrypted-image-on-macos/1.png)

![](https://xenodium.github.io/images/encrypted-image-on-macos/2.png)

# \[2018-10-13 Sat\] Sheffield travel bookmarks
---
id: sheffield-travel-bookmarks
---



-   [Street Food Chef](http://streetfoodchef.co.uk/).
-   [Sakushi -Sushi, noodle and Japanese food restaurant in Sheffield](http://www.sakushi.co.uk/).

# \[2018-10-13 Sat\] Headsphones bookmarks
---
id: headsphones-bookmarks
---



-   [Bose QuietComfort 35 II Headphones (StevenTammen.com)](https://www.steventammen.com/posts/bose-qc35ii-headphones/).
    -   [Noise Isolation/Cancellation of Headphones (RTINGS.com)](https://www.rtings.com/headphones/tests/isolation/noise-isolation-cancellation-passive-active).
-   [Sony WH-1000XM3 Review - RTINGS.com](https://www.rtings.com/headphones/reviews/sony/wh-1000xm3).

# \[2018-10-05 Fri\] macOS app bookmarks
---
id: macos-app-bookmarks
---



-   [Applite - An App Store for Homebrew \| App Addict](https://apps.louplummer.lol/post/applite-an-app-store-for-homebrew).
-   [Cirrus & Bailiff (iCloud debugging tools)](https://eclecticlight.co/cirrus-bailiff/).
-   [Cork: The Homebrew GUI for macOS](https://corkmac.app/).
-   [Customizing the Cocoa Text System](http://www.hcs.harvard.edu/~jrus/site/cocoa-text.html).
-   [Dark Reader](https://darkreader.org/).
-   [dmgbuild - A command line tool to build .dmg files](https://dmgbuild.readthedocs.io/en/latest/).
-   [GetStream/Winds: macOS rss reader](https://github.com/GetStream/Winds/blob/master/README.md).
-   [GitHub - herrbischoff/awesome-macos-command-line](https://github.com/herrbischoff/awesome-macos-command-line#itunes).
-   [GitHub - koekeishiya/yabai: A tiling window manager for macOS based on binary](https://github.com/koekeishiya/yabai).
-   [GitHub - TermiT/Flycut: Clean and simple clipboard manager for developers](https://github.com/TermiT/Flycut).
-   [Hidden Bar: macOS utility to hide unused menu bar icons, written in Swift](https://news.ycombinator.com/item?id=21794858).
-   [LaunchBar 6 (can I implement flows in Emacs)?](https://www.obdev.at/products/launchbar/index.html).
-   [List of open source applications for macOS (Hacker News)](https://news.ycombinator.com/item?id=21179713).
-   [Mac Open Web, by Brian Warren](https://macopenweb.com/).
-   [Mac Troubleshooting Summary – The Eclectic Light Company](https://eclecticlight.co/mac-troubleshooting-summary/).
-   [MachObfuscator/README.md at master · kam800/MachObfuscator · GitHub](https://github.com/kam800/MachObfuscator/blob/master/README.md).
-   [macOS · Papers, Slides and Thesis Archive](https://papers.put.as/macosx/macosx/).
-   [Maverick Mac \| A curated list of awesome mac applications and utilities](https://maverickmac.github.io/2024-06-24/maverick-mac).
-   [My iPad Setup](https://www.gonsie.com/blorg/ipad-setup.html).
-   [My wonderful world of macOS](https://github.com/nikitavoloboev/my-mac-os).
-   [my-mac-os: My wonderful world of macOS](https://github.com/nikitavoloboev/my-mac-os).
-   [NetNewsWire 5.0 Relaunches as an Open-Source RSS Reader for the Mac – The Sweet Setup](https://thesweetsetup.com/netnewswire-5-0-relaunches-as-an-open-source-rss-reader-for-the-mac/).
-   [OnlySwitch: Toggle all sorts of things from menu bar](https://github.com/jacklandrin/OnlySwitch).
-   [PDF Editor - PDFpen - Edit PDF Files (Smile Software)](https://smilesoftware.com/pdfpen/?).
-   [PDF OCR X - Mac & Windows OCR Software to convert PDFs and Images to Text](http://solutions.weblite.ca/pdfocrx/).
-   [‎RESTed - Simple HTTP Requests on the Mac App Store](https://apps.apple.com/us/app/rested-simple-http-requests/id421879749).

# \[2018-09-30 Sun\] Gaming bookmarks
---
id: gaming-bookmarks
---



-   [OpenEmu - Multiple Video Game System for owned ROMs](http://openemu.org/).
-   [The Top 100 Android Video Games](https://twitter.com/SethAbramson/status/1412177674596986881).

# \[2018-09-29 Sat\] Lua bookmarks
---
id: lua-bookmarks
---



-   [Build and Run (Standalone) · sumneko/lua-language-server Wiki · GitHub](https://github.com/sumneko/lua-language-server/wiki/Build-and-Run-(Standalone)).
-   [how to lua and c - a short novel](https://sepisoad.com/blog/how%20to%20lua%20and%20c%20-%20a%20short%20novel.html).
-   [Lua Digest](https://luadigest.immortalin.com/).
-   [Lua tables (Hacker News)](https://news.ycombinator.com/item?id=17969795).

# \[2018-09-29 Sat\] Skin product bookmarks
---
id: skin-product-bookmarks
---



-   [DIY Deodorant Bars - Rebooted Mom](https://www.rebootedmom.com/diy-deodorant-bars/).
-   [How to Make Your Own All-Natural Deodorant Bars](https://blog.freepeople.com/2015/03/allnatural-deodorant-bars/).
-   [Sarah Frasca Makeup: The good, the bad and the ugly: Lush Cosmetics](http://sarahfrascamakeup.blogspot.com/2011/04/good-bad-and-ugly-lush-cosmetics.html).
-   [Skin Deep® Cosmetics Database (EWG)](https://www.ewg.org/skindeep/).

# \[2018-09-29 Sat\] Sustainability bookmarks
---
id: sustainability-bookmarks
---

-   [Source Fabric. Find a Manufacturer. Raise Money to Fund Production. (Factory45)](https://factory45.co/).

# \[2018-09-29 Sat\] Investment platform bookmarks
---
id: investment-platform-bookmarks
---



-   [Backtest Portfolio Asset Allocation](https://www.portfoliovisualizer.com/backtest-portfolio).
-   [Bravos](https://bravos.co/).
-   [CMLviz.com - BETA](http://www.cmlviz.com/).
-   [DEGIRO - Online Stock Trading - Stockbroking (cheaper?)](https://www.degiro.eu/).
-   [Free Stock API for Realtime and Historical Data (IEX)](https://iextrading.com/developer/).
-   [Freetrade - Free Stock Investing](https://freetrade.io/).
-   [Halifax UK \| Buying and selling (Sharedealing)](https://www.halifax.co.uk/sharedealing/).
-   [Hargreaves Lansdown (ISAs, pensions, funds and shares)](https://www.hl.co.uk/).
-   [How I have automated my #algotrading and spend less than ₹10](https://twitter.com/kanhaic/status/1411302254884261893).
-   [IWeb Share Dealing (cheaper?)](https://www.iweb-sharedealing.co.uk/share-dealing-home.asp).
-   [Lend to UK Businesses \| Investment (Funding Circle)](https://www.fundingcircle.com/uk/investors/).
-   [RateSetter Peer To Peer Lender (P2P Investing and Borrowing)](https://www.ratesetter.com/).
-   [Stock Portfolio Management Software (Stock Portfolio Organizer)](https://www.stockportfolioorganizer.com/).
-   [StockDaddy - Free, real-time, easy to use stock portfolio tracker](https://stockdaddy.io/).
-   [StockLight - Australia's premier investing app](https://stocklight.com/).
-   [Stocks and cryptocurrency portfolio tracker (wallmine)](https://wallmine.com/stocks-and-cryptocurrency-portfolio-tracker).

# \[2018-09-28 Fri\] Minimalist bookmarks
---
id: minimalist-bookmarks
---



-   [mnmll.ist: listing all things minimalist](https://mnmll.ist).
-   [Raising Simple \| Streamline your home. Simplify family life (minimalism)](https://www.raisingsimple.com).

# \[2018-09-23 Sun\] Recover from Time Machine's "backup already in use"
---
id: recover-from-time-machines-backup-already-in-use
---

Started seeing "backup already in use" error from my daily Time Machine backups, against my Synology. Disabling and re-enabling AFP did the job (via Synology -\> Control Panel -\> Files Services -\> Enable AFP service).

![](https://xenodium.github.io/images/recover-from-time-machines-backup-already-in-use/re-enable_afp_service.png)

# \[2018-09-03 Mon\] CMake bookmarks
---
id: cmake-bookmarks
---



-   [An Introduction to Modern CMake (Hacker News)](https://news.ycombinator.com/item?id=17897685).
-   [An Introduction to Modern CMake](https://cliutils.gitlab.io/modern-cmake/).
-   [Embracing Modern CMake (Steveire's Blog)](https://steveire.wordpress.com/2017/11/05/embracing-modern-cmake/).

# \[2018-08-28 Tue\] GTD/Get things done bookmarks
---
id: gtdget-things-done-bookmarks
---



-   [Daily Time Management with Todoist and Google Calendar \| JamesStuber.com](https://jamesstuber.com/plan-your-day/).
-   [Don’t drown in email! How to use Gmail more efficiently. - Startup Lessons Learned](https://klinger.io/post/71640845938/dont-drown-in-email-how-to-use-gmail-more).
-   [Getting Things Done + Personal Knowledge Management - Praxis](https://praxis.fortelabs.co/gtd-x-pkm-8ff720ef6939/).
-   [Orgmode for GTD/Get things done](https://emacs.cafe/emacs/orgmode/gtd/2017/06/30/orgmode-gtd.html).

# \[2018-08-28 Tue\] Pandoc bookmarks
---
id: pandoc-bookmarks
---



-   [How I wrote and published my novel using only open source tools](http://www.gabrielgambetta.com/tgl_open_source.html).
-   [Pandoc (Hacker News)](https://news.ycombinator.com/item?id=17855104).
-   [Pandoc - Demos](https://pandoc.org/demos.html).

# \[2018-08-27 Mon\] Mauritius travel bookmarks
---
id: mauritius-travel-bookmarks
---



-   [20 Amazing Things to Do in Mauritius (2020 Guide)](https://www.nomadasaurus.com/things-to-do-in-mauritius/).
-   [Corson vanilla tea](https://1886corsontea.com).
-   [Ile aux Cerfs (Mauritius) - Jonathan/Vanessa excursions](https://www.tripadvisor.co.uk/Attraction_Review-g293816-d477276-Reviews-Ile_aux_Cerfs-Mauritius.html#photos;aggregationId=101&albumid=101&filter=7&ff=447514694).
-   [Le Morne Brabant (Wikipedia)](https://en.wikipedia.org/wiki/Le_Morne_Brabant).
-   [Mauritius Beaches - the Best Beaches in Mauritius - Mauritius Attractions](https://mauritiusattractions.com/mauritius-beaches-i-80.html).
-   [Mauritius beaches: pictures, information, resorts, sights](https://www.bugbog.com/beaches/beach_pictures_mauritius/).
-   [Mauritius sights, large pictures, best things to see and do](https://www.bugbog.com/beaches/beach_pictures_mauritius/mauritius_sights/#ganga).
-   [Public Beaches :: Mauritius Island Online](https://www.maurinet.com/tourist_information/public_beaches).
-   [The 12 best beaches in Mauritius 2020 {with map and photos}](https://mel365.com/best-beaches-in-mauritius/).
-   [The Best Markets in Mauritius](https://theculturetrip.com/africa/mauritius/articles/the-best-markets-in-mauritius/).
-   [The Best Spots to Eat Roti in Port Louis, Mauritius](https://theculturetrip.com/africa/mauritius/articles/the-best-spots-to-eat-roti-in-port-louis-mauritius/).
-   [The Essential Guide to Port Louis' Central Market in Mauritius](https://theculturetrip.com/africa/mauritius/articles/the-essential-guide-to-port-louis-central-market-in-mauritius/).

# \[2018-08-27 Mon\] Scala bookmarks
---
id: scala-bookmarks
---

-   [Functional Programming for Mortals (Leanpub)](https://leanpub.com/fpmortals/read).

# \[2018-08-22 Wed\] Actionable URLs in Emacs buffers
---
id: actionable-urls-in-emacs-buffers
---

Should have enabled actionable URLs in my Emacs buffers long ago. Can now click or press return to follow links. It's great on eshell, compilation buffers, async shell commands, code, etc.

``` {.commonlisp org-language="emacs-lisp"}
(use-package goto-addr
  :hook ((compilation-mode . goto-address-mode)
         (prog-mode . goto-address-prog-mode)
         (eshell-mode . goto-address-mode)
         (shell-mode . goto-address-mode))
  :bind (:map goto-address-highlight-keymap
              ("<RET>" . goto-address-at-point)
              ("M-<RET>" . newline))
  :commands (goto-address-prog-mode
             goto-address-mode))
```

![](https://xenodium.github.io/images/actionable-urls-in-emacs-buffers/goto-address.png)

# \[2018-08-22 Wed\] Bazel bookmarks
---
id: bazel-bookmarks
---



-   [Bazel_with_GTest: C++ project skeleton with Bazel & GTest](https://github.com/vincent-picaud/Bazel_with_GTest).
-   [Build mobile apps with Bazel. Part 2: iOS](https://tulipemoutarde.be/posts/bazel-for-mobile-apps-part-2/).
-   [GitHub - bazelbuild/rules_docker: Rules for building and handling Docker images with Bazel](https://github.com/bazelbuild/rules_docker).
-   [GitHub - jin/awesome-bazel: A curated list of Bazel rules, tooling and resources](https://github.com/jin/awesome-bazel).
-   [Using Bazel to help fix flaky tests - Jake McCrary](https://jakemccrary.com/blog/2020/06/28/using-bazel-to-help-fix-flaky-tests/).

# \[2018-08-18 Sat\] Palestine travel bookmarks
---
id: palestine-travel-bookmarks
---

-   [Rukab's Ice Cream, Ramallah (Trip advisor)](https://www.tripadvisor.co.uk/Restaurant_Review-g667136-d7360437-Reviews-Rukab_s_Ice_Cream-Ramallah_Binyamin_Region_West_Bank.html).

# \[2018-08-18 Sat\] Enabling Control-Meta(⌘)-D on macOS
---
id: enabling-control-meta-d-on-macos
---

I use command (⌘) as my Emacs Meta key. Recently discovered C-M-d is not available to Emacs for binding keys on macOS. Stack Exchange had the [workaround](https://apple.stackexchange.com/questions/22785/how-do-i-disable-the-command-control-d-word-definition-keyboard-shortcut-in-os-x):

``` {.bash org-language="sh"}
defaults write com.apple.symbolichotkeys AppleSymbolicHotKeys -dict-add 70 '<dict><key>enabled</key><false/></dict>'
```

# \[2018-08-13 Mon\] Recycling bookmarks
---
id: recycling-bookmarks
---



-   [My Plastic-free Life](https://myplasticfreelife.com/).

# \[2018-08-12 Sun\] Comoro islands travel bookmarks
---
id: comoro-islands-travel-bookmarks
---

-   [Visiting The Comoros Islands (Quota)](https://www.quora.com/What-are-some-of-the-exotic-tourist-destinations-which-are-not-commonly-known/answer/Patrick-Crosset).

# \[2018-08-12 Sun\] France travel bookmarks
---
id: france-travel-bookmarks
---



-   [France's 10 top food experiences - Lonely Planet](https://www.lonelyplanet.com/articles/france-top-food-experiences).
-   [GR 20 : Best Mountain Hiking in France - The French Touch - Quora](https://thefrenchtouch.quora.com/GR-20-Best-Mountain-Hiking-in-France).
-   [Hmmm I want to take some August vacation time in a city I can go by train from paris and is nice to visit calm and not too expensive ](https://twitter.com/malk_zameth/status/1278288570021826563).
-   [Inside the walls of Mont Saint-Michel, France.](https://www.reddit.com/r/UtterlyInteresting/comments/1gfq75j/inside_the_walls_of_mont_saintmichel_france).

# \[2018-08-12 Sun\] Corsica travel bookmarks
---
id: corsica-travel-bookmarks
---

-   [National Geographic : Corsica is The Best Place… - The French Touch - Quora](https://thefrenchtouch.quora.com/National-Geographic-Corsica-is-The-Best-Place-in-the-World-to-go-in-2015).

# \[2018-08-12 Sun\] Mozambique travel bookmarks
---
id: mozambique-travel-bookmarks
---

-   [Mozambique's beaches - Africa is Back - Quora](https://africa.quora.com/Mozambiques-beaches).

# \[2018-08-12 Sun\] M-r history search in git-commit-mode
---
id: m-r-history-search-in-git-commit-mode
---

I've grown accustomed to M-r bindings to search Emacs history. Been wanting similar functionality to search commit message history. Turns out *log-edit-comment-ring* has some of my local commit message history. Feeding it to *completing-read* gives me an easily searchable history when using a completing framework like ivy or helm:

``` {.commonlisp org-language="emacs-lisp"}
(defun ar/git-commit-search-message-history ()
  "Search and insert commit message from history."
  (interactive)
  (insert (completing-read "History: "
                           ;; Remove unnecessary newlines from beginning and end.
                           (mapcar (lambda (text)
                                     (string-trim text))
                                   (ring-elements log-edit-comment-ring)))))
```

Now we bind it to *M-r* and we're good to go:

``` {.commonlisp org-language="emacs-lisp"}
(bind-key "M-r" #'ar/git-commit-search-message-history git-commit-mode-map)
```

May also want to persist *log-edit-comment-ring* across Emacs sessions by adding *log-edit-comment-ring* to savehist variables. Also ensure *savehist-mode* is enabled:

``` {.commonlisp org-language="emacs-lisp"}
(add-to-list 'savehist-additional-variables log-edit-comment-ring)
(savehist-mode +1)
```

![](https://xenodium.github.io/images/m-r-history-search-in-git-commit-mode/m-r-commit-history.png)

# \[2018-08-09 Thu\] Morning smoothie
---
id: morning-smoothie
---

Big fan of my morning power smoothie. Best deals I've found so far:

-   Almonds (BuyWholeFoodsOnline.co.uk, [£1.06/100g @ Amazon](https://www.amazon.co.uk/gp/product/B004XJ72HI)).
-   Banana.
-   Blueberries.
-   Chia seeds ([£4.99/Kg @ Real Food Source](https://www.realfoodsource.com/product/whole-natural-dark-chia-seeds/)).
-   Cocoa powder (Active foods, [£ 1.7/100g @ Bulk Powders](https://www.bulkpowders.co.uk/organic-cacao-powder.html)).
-   Coconut water (Innocent, [£0.37/100ml @ Tesco](https://www.tesco.com/groceries/en-GB/products/288178112)).
-   Crunchy peanut butter ([£ 4.99/Kg @ Real Food Source](https://www.realfoodsource.com/product/peanut-butter/)).
-   Matcha powder (Active [£6.8/100g @ Bulk Powders](https://www.bulkpowders.co.uk/matcha-green-tea-powder.html)).
-   Strawberries.

ps. I have no affiliation to either retailer. Prices may change.

# \[2018-08-08 Wed\] Installing ludget (ledger visualization
---
id: installing-ludget-ledger-visualization
---

Needed python3:

``` {.bash org-language="sh"}
brew install python3
```

Use pip3 to install ludget:

``` {.bash org-language="sh"}
pip3 install ludget
```

# \[2018-08-08 Wed\] Ledger bookmarks
---
id: ledger-bookmarks
---



-   ["Full-fledged Hledger" Tutorial (interesting approach with great traceability and regeneration)](https://github.com/adept/full-fledged-hledger).
-   ["Full-fledged Hledger" Tutorial](https://github.com/adept/full-fledged-hledger/wiki).
-   [Accounting and financial statements (Khan Academy)](https://www.khanacademy.org/economics-finance-domain/core-finance/accounting-and-financial-stateme).
-   [Accounting in Plain Text, Part 1 – cvilleFOSS](https://cvillefoss.blog/2019/02/12/accounting-in-plain-text-part-1/).
-   [Command Line Accounting - A look at the various ledger ports (mkauer)](http://matthiaskauer.com/2015/08/command-line-accounting-a-look-at-the-various-ledger-ports/).
-   [Conquering Your Finances with Emacs and Ledger : emacs](https://www.reddit.com/r/emacs/comments/46hs9q/conquering_your_finances_with_emacs_and_ledger/).
-   [Conquering your finances with Emacs and Ledger](https://github.com/awalker4/ledgerTalk2016).
-   [Convert a CSV file (comma separated values) from your bank into ledger format](https://github.com/ledger/ledger/wiki/CSV-Import).
-   [Envelope Budgeting with ledger](https://frdmtoplay.com/envelope-budgeting-with-ledger/).
-   [Examples of recent and older CSV rules files for ledger](https://github.com/simonmichael/hledger/tree/master/examples/csv).
-   [full-fledged-hledger: Tutorial on Hledger setup](https://github.com/adept/full-fledged-hledger).
-   [GitHub - barrucadu/finances: A small tool to visualise my hledger journal.](https://github.com/barrucadu/finances).
-   [GitHub - Clever/csvlint: library and command line tool that validates a CSV file](https://github.com/Clever/csvlint).
-   [Here's how you use ledger to account for Bitcoin transactions](https://www.reddit.com/r/Bitcoin/comments/155gw5/heres_how_you_use_ledger_to_account_for_bitcoin/).
-   [Hledger Flow: Step-By-Step](https://pauley.org.za/hledger-flow/).
-   [Importing transactions from bank. : plaintextaccounting (Reddit)](https://www.reddit.com/r/plaintextaccounting/comments/8b10o0/importing_trans=actions_from_bank/).
-   [Introduction to ledger and text-based accounting \| Patrick Skiba](https://patrickskiba.com/ledger-cli/2019/12/07/introduction-to-ledger-cli.html).
-   [Introduction to plain text accounting (sirodoht blog)](https://sirodoht.com/blog/introduction-to-plain-text-accounting/).
-   [Ledger CLI cheatsheet](https://devhints.io/ledger).
-   [Ledger CSV format cheatsheet](https://devhints.io/ledger-csv).
-   [Ledger examples cheatsheet](https://devhints.io/ledger-examples).
-   [Ledger periods cheatsheet](https://devhints.io/ledger-periods).
-   [Ledger Practices - Felix Crux](https://felixcrux.com/blog/ledger-practices).
-   [Ledger queries cheatsheet](https://devhints.io/ledger-query).
-   [Ledger Report Scripts (tested on macOS Mojave)](https://github.com/sheehamj13/ledger-reports).
-   [Ledger, a powerful CLI accounting tool (Hacker News)](https://news.ycombinator.com/item?id=7707262).
-   [ledger/ledger-mode tips and tricks? (Reddit)](https://www.reddit.com/r/emacs/comments/6a3oxv/ledgerledgermode_tips_and_tricks/).
-   [Ledger: Command-Line Accounting (convert csv command)](https://www.ledger-cli.org/3.0/doc/ledger3.html#The-convert-command).
-   [Ledger: Command-Line Accounting (documentation)](https://www.ledger-cli.org/3.0/doc/ledger3.html).
-   [ludget: ledger-cli data visualization](https://gitlab.com/rjurga/ludget).
-   [Memo's personal Finance post on plain-text accounting](https://memo.barrucadu.co.uk/personal-finance.html).
-   [Plain Text Accounting, a guide to Ledger and friends - plaintextaccounting.org (comparisons)](https://plaintextaccounting.org/#comparisons).
-   [Plain Text Accounting, a guide to Ledger and friends - plaintextaccounting.org (import)](https://plaintextaccounting.org/#data-importconversion).
-   [Program your Finances: Command-line Accounting (Pete Keen)](https://www.petekeen.net/keeping-finances-with-ledger).
-   [Report Scripts for Ledger CLI with Gnuplot (日光漫想)](https://www.sundialdreams.com/report-scripts-for-ledger-cli-with-gnuplot/).
-   [Show HN: Ledger-analytics – Analytics for ledger-cli (Hacker News)](https://news.ycombinator.com/item?id=17845565).
-   [Terencio's Ledger Emacs config](https://github.com/rememberYou/.emacs.d/blob/a095e0e3e88cd64e6ef5e8062d3215d67ad9e285/config.org#ledger).
-   [The Plain Text Project](https://plaintextproject.online).
-   [TIP: How I use ledger to track my money : emacs](https://www.reddit.com/r/emacs/comments/8x4xtt/tip_how_i_use_ledger_to_track_my_money).
-   [Tracking Investments in Lots with Hledger](http://rantsideasstuff.com/posts/2018/07/01-tracking-investments-in-lots-with-hledger/).
-   [Unrealized gains : plaintextaccounting](https://www.reddit.com/r/plaintextaccounting/comments/bhxdew/unrealized_gains/).
-   [Using Ledger for YNAB-like envelope budgeting](https://emacs.cafe/ledger/emacs/ynab/budgeting/2018/06/12/elbank-ynab.html).
-   [Visualise your finances with hledger, InfluxDB, and Grafana](https://memo.barrucadu.co.uk/hledger-influxdb-grafana.html).
-   [Ways to Categorize Your Spending (Mint)](https://www.mint.com/mint-categories).
-   [Who's using ledger? · ledger/ledger Wiki](https://github.com/ledger/ledger/wiki/Who's-using-ledger%3F).

# \[2018-08-07 Tue\] Tip: Convert .texi to .info
---
id: tip-convert-texi-to-info
---

Convert with:

``` {.bash org-language="sh"}
makeinfo doc.texi
```

View with:

Open in Emacs and render as info with:

``` {.commonlisp org-language="emacs-lisp"}
(defun ar/format-info-mode ()
  (interactive)
  (let ((file-name (buffer-file-name)))
    (kill-buffer (current-buffer))
    (info file-name)))
```

# \[2018-07-25 Wed\] Marking 20k emails as read
---
id: marking-20k-emails-as-read
---

[Mbsync](http://isync.sourceforge.net/) and [mu4e](https://www.djcbsoftware.nl/code/mu/mu4e.html) are great for syncing and handling IMAP email. I've now migrated 4 email addresses, including an old Yahoo account.

I wanted to mark all my Yahoo unread emails as read. Yahoo's webmail enables marking 500 emails at a time, making the process a little tedious.

[Mu-discuss](https://groups.google.com/forum/#!forum/mu-discuss) has a handy [thread](https://groups.google.com/d/msg/mu-discuss/zaA394sH1Ow/QSVPXS22BQAJ), highlighting that moving/renaming synced messages (in your local file system) would do the job. This worked well for me.

Let's do just that…

**WARNING:** Copy a small sample of your mails to a separate directory and run some trials until you feel comfortable.

Find your mail directory.

``` {.bash org-language="sh"}
cd path/to/mail
```

Peek at the messages you'd like to mark unread:

``` {.bash org-language="sh"}
ls -1 new/
```

Rename message files by appending "S" to their filename and moving from new/ to cur/ directory.

``` {.bash org-language="sh"}
for FILE in new/*; do mv "${FILE}" cur/$(basename "${FILE}")S; done;
```

We can verify the move.

``` {.bash org-language="sh"}
ls -1 cur/
```

Let's sync the local changes.

``` {.bash org-language="sh"}
mbsync -Va
```

…and we're done ;)

# \[2018-07-24 Tue\] Show iOS simulator touches
---
id: show-ios-simulator-touches
---

TIL from [this tweet](https://twitter.com/liamnichols_/status/1018812142693253120?s=12), that you can enable showing touches on iOS simulator. This is handy for making nicer screencasts.

``` {.bash org-language="sh"}
defaults write http://com.apple .iphonesimulator ShowSingleTouches 1
```

# \[2018-07-15 Sun\] Amsterdam travel bookmarks
---
id: amsterdam-travel-bookmarks
---

-   [Below the Surface: The archaeological finds of the North / Southline in Amsterdam](https://belowthesurface.amsterdam/en/).

# \[2018-07-14 Sat\] Hardware bookmarks
---
id: hardware-bookmarks
---



-   [Roman Zolotarev's OpenBSD on my fanless desktop computer (really sweet setup)](https://www.romanzolotarev.com/setup.html).
-   [stapelberg uses this: my 2020 desk setup](https://michael.stapelberg.ch/posts/2020-05-23-desk-setup/).

# \[2018-07-11 Wed\] fitbit API, org babel, and gnuplot
---
id: fitbit-api-org-babel-and-gnuplot
---

Retook running recently. Took the dust off my aria scale and used the opportunity to check out fitbit's API.

First register your app at [dev.fitbit.com/apps/new](https://dev.fitbit.com/apps/new) and get a client_id=AABBCC.

![](https://xenodium.github.io/images/fitbit-api-org-babel-and-gnuplot/fitbitapp.png)

You'll also need your USER_ID, from your Fitbitx user profile.

![](https://xenodium.github.io/images/fitbit-api-org-babel-and-gnuplot/fitbituser.png)

We'll also need a token. I used the [implicit grant flow](https://dev.fitbit.com/build/reference/web-api/oauth2/) URL in my browser and extracted access_token=TOKEN.

Now let's wire up two org source blocks to fetch the data and subsequently plot using gnuplot.

It's pretty neat. You can take the output from one source block and use it as input to another.

We use curl to fetch data from fitbit's API and pipe through [jq](https://stedolan.github.io/jq/) and sed to massage the output format into two columns.

**Note:** Before using gnuplot in org babel, you'll need to install the gnuplot package and add to babel languages.

``` {.commonlisp org-language="emacs-lisp"}
(use-package gnuplot :ensure t)

(use-package ob
  :config
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((gnuplot . t))))
```

``` {#weight-data .bash org-language="sh" results="table"}
curl -s -H "Authorization: Bearer TOKEN" https://api.fitbit.com/1/user/USER_ID/body/weight/date/2018-06-09/2018-07-11.json | jq '.[][] | "\(.dateTime) \(.value)"' | sed 's/"//g'
```

  ------------ --------
  2018-06-09   65.753
  2018-06-10   65.762
  2018-06-11   65.771
  2018-06-12   65.78
  2018-06-13   65.789
  2018-06-14   65.798
  2018-06-15   65.807
  2018-06-16   65.816
  2018-06-17   65.825
  2018-06-18   65.85
  2018-06-19   65.96
  2018-06-20   64.1
  2018-06-21   65.64
  2018-06-22   65.47
  2018-06-23   65.515
  2018-06-24   65.56
  2018-06-25   65.605
  2018-06-26   65.65
  2018-06-27   65.18
  2018-06-28   64.49
  2018-06-29   64.49
  2018-06-30   64.41
  2018-07-01   64.33
  2018-07-02   64.25
  2018-07-03   64.17
  2018-07-04   64.55
  2018-07-05   64.39
  2018-07-06   64.33
  2018-07-07   65.06
  2018-07-08   63.28
  2018-07-09   63.4
  2018-07-10   64.22
  2018-07-11   63.95
  ------------ --------

Now feed the two column data to gnuplot.

``` {.gnuplot var="data=weight-data" exports="code" file="images/fitbit-api-org-babel-and-gnuplot/weight.png"}
reset
set title "My recent weight"
set xdata time
set timefmt '%Y-%m-%d'
set format x "%d/%m/%y"
set term png
set xrange ['2018-06-09':'2018-07-11']
plot data u 1:2 with linespoints title 'Weight in Kg'
```

Fetching data and plotting through org babel and gnuplot is pretty sweet. I've barely scratched the surface. There's more at [Org-babel-gnuplot](https://orgmode.org/worg/org-contrib/babel/languages/ob-doc-gnuplot.html) and [Plotting tables in Org-Mode using org-plot](https://orgmode.org/worg/org-tutorials/org-plot.html). Either way, this is another Emacs super power to keep in the toolbox.

# \[2018-07-08 Sun\] PIPESTATUS for all return codes
---
id: pipestatus-for-all-return-codes
---

From [\@saruspete](https://twitter.com/saruspete)'s [tweet](https://twitter.com/saruspete/status/1014801074794979335?s=12), \${PIPESTATUS\[@\]} gives ya all piped commands' return codes:

``` {.bash org-language="sh" results="verbatim"}
echo foo | grep bar | tr z a | cat
echo ${PIPESTATUS[@]}
```

# \[2018-07-07 Sat\] Emacs utilities for your OS
---
id: emacs-utilities-for-your-os
---

Narrowing utilities are a wonderful way of increasing productivity. I have a few workflows using Emacs's [Helm](https://github.com/emacs-helm/helm) framework.

There are great productivity boosters like [Alfred](https://www.alfredapp.com/) and [Quicksilver](https://qsapp.com/) for macOS, with batteries included.

If you're a tinkerer, you'd enjoy the powerful [Hammerspoon](http://hammerspoon.org/). Like elisp gluing all things Emacs, Hammerspoon uses Lua to glue all things macOS. You can build your own narrowing utilities using [chooser](http://www.hammerspoon.org/docs/hs.chooser.html) and a little Lua.

    local chooser = hs.chooser.new(function(choice)
          hs.alert.show(choice['text'])
    end)

    chooser:choices({
          {
             ["text"] = "Alfred\n",
             ["subText"] = "macOS only\n",
          },
          {
             ["text"] = "Quicksilver\n",
             ["subText"] = "macOS only\n",
          },
          {
             ["text"] = "Hammerspoon\n",
             ["subText"] = "macOS only\n",
          },
          {
             ["text"] = "Emacs\n",
             ["subText"] = "is everywhere :)\n",
          },
    })
    chooser:show()

![](https://xenodium.github.io/images/emacs-utilities-for-your-os/chooser.png)

Howard Abrams's post on [Capturing Content for Emacs](http://howardism.org/Technical/Emacs/capturing-content.html) inspired me to look at gluing Emacs and macOS to launch my own cross-platform narrowing utilities.

I've also taken this opportunity to look at Oleh Krehel's wonderful completion package: [Ivy](https://github.com/abo-abo/swiper). We can use it to build a macOS narrowing utility.

Ivy is remarkably easy to use. Turns out, [ivy-read](http://oremacs.com/swiper/#api) is all you need. A simple Emacs completion can be accomplished with little elisp.

``` {.commonlisp org-language="emacs-lisp"}
(ivy-read "Hello ivy: "
          '("One "
            "Two "
            "Three "
            "Four "))
```

![](https://xenodium.github.io/images/emacs-utilities-for-your-os/simple_ivy.png)

Pretty nifty. Let's make this completion more accessible from the rest of the OS. To do so, we create a separate Emacs frame and make it pretty. We also want it to interact with the OS. We'll use *ivy-read*'s *:action* to invoke a tiny bit of AppleScript.

Oh and we'll also use some funny quotes to tease ourselves about our beloved editor.

``` {.commonlisp org-language="emacs-lisp"}
(with-current-buffer (get-buffer-create "*modal-ivy*")
  (let ((frame (make-frame '((auto-raise . t)
                             (background-color . "DeepSkyBlue3")
                             (cursor-color . "MediumPurple1")
                             (font . "Menlo 15")
                             (foreground-color . "#eeeeec")
                             (height . 20)
                             (internal-border-width . 20)
                             (left . 0.33)
                             (left-fringe . 0)
                             (line-spacing . 3)
                             (menu-bar-lines . 0)
                             (minibuffer . only)
                             (right-fringe . 0)
                             (tool-bar-lines . 0)
                             (top . 48)
                             (undecorated . t)
                             (unsplittable . t)
                             (vertical-scroll-bars . nil)
                             (width . 110)))))
    (set-face-attribute 'ivy-minibuffer-match-face-1 frame
                        :background nil
                        :foreground nil)
    (set-face-attribute 'ivy-minibuffer-match-face-2 frame
                        :background nil
                        :foreground "orange1")
    (set-face-attribute 'ivy-minibuffer-match-face-3 frame
                        :background nil
                        :foreground "orange1")
    (set-face-attribute 'ivy-minibuffer-match-face-4 frame
                        :background nil
                        :foreground "orange1")
    (set-face-attribute 'ivy-current-match frame
                        :background "#ffc911"
                        :foreground "red")
    (set-face-attribute 'minibuffer-prompt frame
                        :foreground "grey")
    (let ((ivy-height 20)
          (ivy-count-format ""))
      (ivy-read "Emacs acronyms: "
                '(" Emacs: Escape-Meta-Alt-Control-Shift "
                  " Emacs: Eight Megabytes And Constantly Swapping "
                  " Emacs: Even a Master of Arts Comes Simpler "
                  " Emacs: Each Manual's Audience is Completely Stupified "
                  " Emacs: Eventually Munches All Computer Storage "
                  " Emacs: Eradication of Memory Accomplished with Complete Simplicity "
                  " Emacs: Easily Maintained with the Assistance of Chemical Solutions "
                  " Emacs: Extended Macros Are Considered Superfluous "
                  " Emacs: Every Mode Accelerates Creation of Software "
                  " Emacs: Elsewhere Maybe All Commands are Simple "
                  " Emacs: Emacs Makes All Computing Simple "
                  " Emacs: Emacs Masquerades As Comfortable Shell "
                  " Emacs: Emacs My Alternative Computer Story "
                  " Emacs: Emacs Made Almost Completely Screwed "
                  " Emacs: Each Mail A Continued Surprise "
                  " Emacs: Eating Memory And Cycle-Sucking "
                  " Emacs: Elvis Masterminds All Computer Software "
                  " Emacs: Emacs Makes A Computer Slow" )
                :action (lambda (funny-quote)
                          (async-shell-command (format "osascript -e 'tell app \"System Events\" to display dialog \"%s\" buttons {\"OK\"}'" funny-quote)))
                :unwind (lambda ()
                          (shell-command "/Applications/Hammerspoon.app/Contents/Resources/extensions/hs/ipc/bin/hs -c 'backFromEmacs()'")
                          (delete-frame)
                          (other-window 1))))))
```

![](https://xenodium.github.io/images/emacs-utilities-for-your-os/ivy_frame.gif)

So where's all this going? I wrote a utility to extract all links from [this page's org file](https://raw.githubusercontent.com/xenodium/xenodium.github.io/master/index.org) and make them easily searchable from anywhere on macOS by invoking **⌥-W**.

The keys are bound using Lua, Hammerspoon, and emacsclient. This works well on macOS, but there are alternatives for other operating systems.

    hs.execute("emacsclient -ne \""..elisp.."\" -s /tmp/emacs*/server")

Here's the resulting utility in action:

![](https://xenodium.github.io/images/emacs-utilities-for-your-os/ivy_links.gif)

These integrations look promising. They enable me to bring cross-platform Emacs utilities into areas I hadn't considered.

# \[2018-07-01 Sun\] Web serving tools bookmarks
---
id: web-serving-tools-bookmarks
---



-   [Certbot: Automatically enable HTTPS on your website, deploying Let's Encrypt certificates](https://certbot.eff.org/).
-   [How to configure WireGuard to tunnel traffic from a macOS client through a Debian server with IPv4 and IPv6](https://www.timdoug.com/log/2018/08/04/#wireguard_macos).
-   [HTTPS Is Easy (Irreal)](http://irreal.org/blog/?p=7306).
-   [I made my own WireGuard VPN server (Hacker News)](https://news.ycombinator.com/item?id=17689188).
-   [JSON:API — A specification for building APIs in JSON](https://jsonapi.org/).
-   [MirageOS: high-performance network applications across a variety of cloud computing and mobile platforms](https://mirage.io/).
-   [nginxconfig.io](https://nginxconfig.io/).
-   [Nice nginx features for developers \| There is no magic here](https://alex.dzyoba.com/blog/nginx-features-for-developers/).
-   [Poor man's way of handling 1.3 million web request](https://idiallo.com/blog/handling-1-million-web-request).
-   [Postman (API Development Environment)](https://www.getpostman.com/).
-   [quark: an extremely small and simple HTTP GET/HEAD-only web server for static content (suckless.org tools)](https://tools.suckless.org/quark/).
-   [The Missing Wireguard Documentation](https://github.com/pirate/wireguard-docs).
-   [Web Authentication for Actual Humans, Part Two - DEV Community](https://dev.to/ghardin137/web-authentication-for-actual-humans-part-two-ea6).

# \[2018-06-24 Sun\] URL shortener bookmarks
---
id: url-shortener-bookmarks
---

-   [go: Another Google-like Go short link service](https://github.com/kellegous/go).
-   [zap: Blazing fast web shortcuts](https://github.com/issmirnov/zap).

# \[2018-06-17 Sun\] Trying out mu4e with mbsync
---
id: trying-out-mu4e-with-mbsync
---

The email fun in Emacs continues. After a few weeks since I [started using mu4e and offlineimap](#trying-out-mu4e-and-offlineimap), I'm sold. Both are awesome. [Mbsync](http://isync.sourceforge.net/mbsync.html) is an [offlineimap](http://www.offlineimap.org/) alternative. Despite resyncing all my mail, the transition was fairly smooth. Here's how…

## Install isync (for mbsync)

``` {.bash org-language="sh"}
brew install isync
```

## Configure mbsync

Mbsync uses `~/.mbsyncrc` for configuration. Migrating [\~/.offlineimaprc](#trying-out-mu4e-and-offlineimap) to `~/.mbsyncrc` looks like:

``` conf
IMAPAccount Personal
Host some.imap.host.com
User your_user_name
PassCmd "gpg --quiet --batch -d ~/.offlineimap_accountname.gpg"
Port 993
SSLType IMAPS
AuthMechs Login
CertificateFile  ~/.offlineimapcerts.pem
# My IMAP provider doesn't handle concurrent IMAP commands.
PipelineDepth 1

IMAPStore Personal-remote
Account Personal

MaildirStore Personal-local
Path ~/IMAP/Personal/
Inbox ~/IMAP/Personal/INBOX

Channel Personal
Master :Personal-remote:
Slave :Personal-local:
Patterns *
Create Slave
Sync All
Expunge Both
SyncState *
```

## No concurrent IMAP commands supported

My IMAP provider doesn't handle concurrent IMAP commands. [mbsync and Office 365](https://kdecherf.com/blog/2017/05/01/mbsync-and-office-365/) had the answer:

``` conf
PipelineDepth 1
```

## Initial sync

Run initial from the command line sync:

``` {.bash org-language="sh"}
mbsync -Va
```

While syncing my largest inbox, it sometimes received an unexpected EOF error:

    IMAP error: unexpected EOF from some.imap.host.com (1.2.3.4:993)

First few times, I restarted the syncing manually, but then used a loop to automatically restart it.

Bash loops:

``` {.bash org-language="sh"}
while true; do mbsync -V Personal; sleep 5; done
```

``` {.bash org-language="sh"}
for i in {1..5}; do mbsync -V Personal; sleep 5; done
```

Eshell loop:

``` {.bash org-language="sh"}
for i in (number-sequence 1 10) {mbsync -V Personal; sleep 5}
```

## Create mu index

Reindex using mu, but first remove existing index for offlineimap messages:

``` {.bash org-language="sh"}
rm -rf ~/.mu
```

Ok, do index now:

``` {.bash org-language="sh"}
mu index --maildir=~/IMAP
```

## Mu4e tweaks

The *get mail* command should now point to mbsync.

``` {.commonlisp org-language="emacs-lisp"}
(csetq mu4e-get-mail-command "mbsync -Va")
```

I had issues with duplicate IDs after moving and deleting messages from mu4e. [Migrating from offlineimap to mbsync for mu4e](http://pragmaticemacs.com/emacs/migrating-from-offlineimap-to-mbsync-for-mu4e/) had the answer:

``` {.commonlisp org-language="emacs-lisp"}
(csetq mu4e-change-filenames-when-moving t)
```

## Helpful references

-   [A modern mutt setup with neomutt, mbsync, msmtp and mu — part one \| webgefrickel](https://webgefrickel.de/blog/a-modern-mutt-setup).
-   [Migrating from offlineimap to mbsync for mu4e \| Pragmatic Emacs](http://pragmaticemacs.com/emacs/migrating-from-offlineimap-to-mbsync-for-mu4e/).
-   [My personal Email setup - Notmuch, mbsync, postfix and dovecot](https://copyninja.info/blog/email_setup.html).
-   [org-msg: Compose and reply to emails in a Outlook HTML friendly style](https://github.com/jeremy-compostella/org-msg/blob/master/README.org).
-   [Reading IMAP Mail in Emacs on OSX](http://www.ict4g.net/adolfo/notes/2014/12/27/EmacsIMAP.html).

# \[2018-06-15 Fri\] Sticky function keys on touch bar
---
id: sticky-function-keys-on-touch-bar
---

Visible (and sticky) function keys are not the touch bar default for Emacs. Let's change that:

![](https://xenodium.github.io/images/sticky-function-keys-on-touch-bar/touchbar_function_keys.png)

# \[2018-06-13 Wed\] GNU find on macOS
---
id: gnu-find-on-macos
---

At times, you may need GNU versions of command line utilities on macOS. For example, GNU find.

As usual, Homebrew saves the day. Install with:

``` {.bash org-language="sh"}
brew install findutils
```

Unless you install with –with-default-names (I don't), GNU utilities will be prefixed with a "g".

``` {.bash org-language="sh" results="verbatim"}
gfind --version
```

If you need more, there are others:

``` {.bash org-language="sh"}
brew install binutils
brew install diffutils
brew install ed
brew install findutils
brew install gawk
brew install gnu-indent
brew install gnu-sed
brew install gnu-tar
brew install gnu-which
brew install gnutls
brew install grep
brew install gzip
brew install screen
brew install watch
brew install wdiff --with-gettext
brew install wget
```

# \[2018-06-13 Wed\] PlantUML bookmarks
---
id: plantuml-bookmarks
---



-   [Collection of PlantUML snippets from Scripter.co](https://scripter.co/notes/plantuml).
-   [Real World PlantUML](https://real-world-plantuml.com/).
-   [Welcome to The Hitchhiker’s Guide to PlantUML!](https://crashedmind.github.io/PlantUMLHitchhikersGuide/).

# \[2018-05-29 Tue\] Adding mu4e maildirs extension
---
id: adding-mu4e-maildirs-extension
---

Continuing the mu4e fun, added mu4e-maildirs-extension to display a mail dirs summary.

![](https://xenodium.github.io/images/adding-mu4e-maildirs-extension/mu4e_maildirs_extension.png)

# \[2018-05-28 Mon\] Trying out mu4e and offlineimap
---
id: trying-out-mu4e-and-offlineimap
---

![](https://xenodium.github.io/images/trying-out-mu4e-and-offlineimap/mu4e.png)

Managing Email from Emacs. Surely that's crazy-talk, but hey… let's give it a try.

## Install offlineimap

Need to sync via imap. Use offlineimap. I'm on macOS, so homebrew is king for installing:

``` {.bash org-language="sh"}
brew install offlineimap
```

Before can configure offlineimap, we'll need to handle a few things first.

## Get a cert fingerprint

Use openssl for getting a certificate fingerprint. From offlineimap's [FAQ:](http://www.offlineimap.org/doc/FAQ.html#view-the-fingerprint)

``` {.bash org-language="sh"}
SSL_CERT_DIR="" openssl s_client -connect imap.migadu.com:993 < /dev/null 2>/dev/null | openssl x509 -fingerprint -noout -text -in /dev/stdin
```

Should give you something like:

> SHA1 Fingerprint=AA:BB:CC:DD:EE:DD:FF:AA:00:AA:2A:AA:AA:AA:A8:20:80:AA:A2:AA

## Encrypt password

Offlineimap can read passwords in plain text in its .offlineimaprc config file, but that's yuckie. Let's encrypt the password and use gnupg for that. Install it:

``` {.bash org-language="sh"}
brew install gnupg
```

If you haven't already, generate a key

``` {.bash org-language="sh"}
gpg --full-gen-key
```

Generate an offlineimap account password file.

``` {.bash org-language="sh"}
echo "YourPassword" | gpg --encrypt --recipient "Your Name" -o ~/.offlineimap_accountname.gpg
```

## Python password wrapper

Based on Fabian's [Encrypt OfflineIMAP and msmtp password with GnuPG](https://f-koehler.github.io/posts/2015-03-17-offlineimap-msmtp-gnupg.html), I created \~/.read_password.py with:

``` python
import os
import subprocess

def read_password(path):
  return subprocess.check_output(["gpg\n", "--quiet\n", "--batch\n", "-d\n", os.path.expanduser(path)]).strip()
```

ps. Alternatively, see [The homely Mutt](http://stevelosh.com/blog/2012/10/the-homely-mutt/#retrieving-passwords)'s section to store password in macOS's keychain.

## Configure offlineimap

Offlineimap uses \~/.offlineimaprc for configuration. We now have all we need to put the configuration together:

``` conf
[general]
accounts = Personal

# Load this python file.
pythonfile = ~/.read_password.py

[Account Personal]
localrepository = Personal-Local

remoterepository = Personal-Remote

# After syncing, let mu index it.
postsynchook = mu index --maildir ~/stuff/active/Mail

# Sync imap every 5 minutes.
autorefresh = 5

# Alternate between 10 quick syncs and full syncs.
quick = 10

[Repository Personal-Local]
type = Maildir
localfolders = ~/stuff/active/Mail/Personal

[Repository Personal-Remote]
type = IMAP
remotehost = some.imap.host.com
remoteuser = your_user_name

# Use function defined in .read_password.py to read the password.
remotepasseval = read_password("~/.offlineimap_personal_account_password.gpg")

# Use the SHA1 fingerprint retrieved with openssl.
cert_fingerprint = aabbccddeeddffaa00aa2aaaaaaaa82080aaa2aa
```

### Cert file

You can use macOS's certificates from Keychain Access -\> System Roots -\> Certificates, select all, and ⌘-⇧-e (for export items). Save to \~/certs.pem and use offlineimap configutation:

> sslcacertfile = /path/to/certs.pem

Another option is executing lib/mk-ca-bundle.pl from curl's tarball to generate ca-bundle.crt, using certdata.txt from Mozilla's source tree.

## Install mu4e

Manually modified mu4e recipe to pick up my Emacs binary. TIL about homebrew's edit command:

``` {.bash org-language="sh"}
brew edit mu
```

Changed the one line:

> -   ENV\["EMACS"\] = "no" if build.without? "emacs"
> -   ENV\["EMACS"\] = "/Users/alvaro/homebrew/Cellar/emacs-plus/26.1-rc1_2/bin/emacs"

Finally installed mu4e:

``` {.bash org-language="sh"}
brew install mu
```

## Configure mu4e

Lastly, configure mu4e:

``` {.commonlisp org-language="emacs-lisp"}
(add-to-list 'load-path
             (expand-file-name "~/homebrew/share/emacs/site-lisp/mu/mu4e"))
(use-package mu4e
  :config
  ;; Update mail using 'U' in main view:
  (setq mu4e-get-mail-command "offlineimap")
  (setq mu4e-view-show-addresses t)
  (setq mu4e-attachment-dir (expand-file-name "~/Downloads/"))
  (setq mu4e-maildir "path/to/Mail")
  (setq mu4e-html2text-command "w3m -T text/html") ;; alternatively "textutil -stdin -format html -convert txt -stdout"
  (setq mu4e-user-mail-address-list '("myself@domain1.com"
                                      "myself@domain2.com"))
  (setq mu4e-context-policy 'pick-first)
  (setq mu4e-compose-context-policy 'always-ask)
  (setq mu4e-contexts
        (list
         (make-mu4e-context
          :name "domain1"
          :enter-func (lambda () (mu4e-message "Entering context myself@domain1.com"))
          :leave-func (lambda () (mu4e-message "Leaving context myself@domain1.com"))
          :match-func (lambda (msg)
                        (when msg
                          (mu4e-message-contact-field-matches
                           msg '(:from :to :cc :bcc) "myself@domain1.com")))
          :vars '((user-mail-address . "myself@domain1.com")
                  (user-full-name . "My name")
                  (mu4e-sent-folder . "/Domain1/Sent")
                  (mu4e-drafts-folder . "/Domain1/Drafts")
                  (mu4e-trash-folder . "/Domain1/Trash")
                  (mu4e-compose-signature . nil)
                  (mu4e-compose-format-flowed . nil)
                  (smtpmail-smtp-user . "myself@domain1.com")
                  (smtpmail-smtp-server . "smtp.domain1.com")
                  (smtpmail-smtp-service . 587)))
         (make-mu4e-context
          :name "domain2"
          :enter-func (lambda () (mu4e-message "Entering context myself@domain2.com"))
          :leave-func (lambda () (mu4e-message "Leaving context myself@domain2.com"))
          :match-func (lambda (msg)
                        (when msg
                          (mu4e-message-contact-field-matches
                           msg '(:from :to :cc :bcc) "myself@domain2.com")))
          :vars '((user-mail-address . "myself@domain2.com")
                  (user-full-name . "My name")
                  (mu4e-sent-folder . "/Domain2/Sent")
                  (mu4e-drafts-folder . "/Domain2/Drafts")
                  (mu4e-trash-folder . "/Domain2/Trash")
                  (mu4e-compose-signature . nil)
                  (mu4e-compose-format-flowed . nil)
                  (smtpmail-smtp-user . "myself@domain2.com")
                  (smtpmail-smtp-server . "smtp.domain2.com")
                  (smtpmail-smtp-service . 587))))))

(use-package smtpmail
  :config
  (setq smtpmail-stream-type 'starttls)
  (setq smtpmail-debug-info t)
  (setq smtpmail-warn-about-unknown-extensions t)
  (setq smtpmail-queue-mail t)
  (setq smtpmail-default-smtp-server nil)
  ;; Created with mu mkdir path/to/Mail/queue
  ;; Also avoid indexing.
  ;; touch path/to/Mail/queue/.noindex
  (setq smtpmail-queue-dir "path/to/Mail/queue/cur"))

(use-package message
  :config
  (setq message-send-mail-function 'smtpmail-send-it))
```

## Authinfo

Create an \~/.authinfo file for sendmail authentication with:

    machine smtp.host1.com login account1@host1.com password somepassword1
    machine smtp.host2.com login account2@host2.com password somepassword2

Encrypt \~/.authinfo with M-x epa-encrypt-file. Keep \~/.authinfo.gpg and delete \~/.authinfo.

## Mu4e helpful references

-   [A Complete Guide to Email in Emacs using Mu and Mu4e](http://cachestocaches.com/2017/3/complete-guide-email-emacs-using-mu-and-).
-   [A year with Notmuch mail - a super-fast email client available on Emacs](https://www.reddit.com/r/emacs/comments/5fkq7r/a_year_with_notmuch_mail_a_superfast_email_client/).
-   [Archaic: text based email clients rock - DEV Community (lots of great links)](https://dev.to/shrysr/archaic-text-based-email-clients-rock-3flm).
-   [areina's Manage your email in emacs with mu4e](https://gist.github.com/areina/3879626).
-   [Better Email with mu4e (NaN)](https://notanumber.io/2016-10-03/better-email-with-mu4e/).
-   [Configuring Emacs mu4e with nullmailer, offlineimap and multiple identities](https://vxlabs.com/2014/06/06/configuring-emacs-mu4e-with-nullmailer-offlineimap-and-multiple-identities/).
-   [Drowning in Email; mu4e to the Rescue](http://www.macs.hw.ac.uk/~rs46/posts/2014-01-13-mu4e-email-client.html).
-   [Ebzzry: Setting up Mail in Emacs](https://ebzzry.io/en/emacs-mail/).
-   [Emacs as email client with offlineimap and mu4e on OS X](http://www.kirang.in/2014/11/13/emacs-as-email-client-with-offlineimap-and-mu4e-on-osx).
-   [Email done right (mu)](https://zmalltalker.com/linux/mu.html).
-   [Encrypt OfflineIMAP and msmtp password with GnuPG](https://f-koehler.github.io/posts/2015-03-17-offlineimap-msmtp-gnupg.html).
-   [Etienne's Mu4e customization](https://etienne.depar.is/emacs.d/mu4e.html).
-   [GitHub - OfflineIMAP/imapfw: imapfw (IMAP/mail framework)](https://github.com/OfflineIMAP/imapfw).
-   [Gmail Gnus GPG Guide (GGGG)](https://github.com/kensanata/ggg).
-   [Handling Email with Emacs](https://martinralbrecht.wordpress.com/2016/05/30/handling-email-with-emacs/) (helm included).
-   [I got mu4e working! (Reddit)](https://www.reddit.com/r/emacs/comments/5hfcid/i_got_mu4e_working/).
-   [Installing mu and mu4e with homebrew with emacs](https://blog.danielgempesaw.com/post/43467552978/installing-mu-and-mu4e-with-homebrew-with-emacs).
-   [Iqbal Ansari's mail config](https://github.com/iqbalansari/dotEmacs/blob/master/config/mail.org).
-   [iqbalansari/dotEmacs: calendar integration](https://github.com/iqbalansari/dotEmacs/blob/master/config/mail.org).
-   [Mail in Emacs with mu4e and mbsync (jherrlin)](https://jherrlin.github.io/posts/emacs-mu4e/).
-   [Master your inbox with mu4e and org-mode](http://pragmaticemacs.com/emacs/master-your-inbox-with-mu4e-and-org-mode/).
-   [Mu's github mirror](https://github.com/djcb/mu).
-   [Mu's page](http://www.djcbsoftware.nl/code/mu).
-   [mu4e: an E-mail Client for Emacs](http://wenshanren.org/?p=111).
-   [mu4easy: mu4e + mbsync configuration for multiple accounts.](https://github.com/danielfleischer/mu4easy).
-   [OfflineIMAP with SSL files on OSX - Sebastian Christ](http://rudolfochrist.github.io/blog/2015/03/21/offlineimap-with-ssl-files-on-osx/).
-   [OfflineIMAP: sync and backup tool for IMAP (Hacker News) and mbsync in comments](https://news.ycombinator.com/item?id=14221501).
-   [Practical guide to use Gnus with Gmail](https://github.com/redguardtoo/mastering-emacs-in-one-year-guide/blob/master/gnus-guide-en.org).
-   [Pragmatic Emacs's mu4e tutorials](http://pragmaticemacs.com/mu4e-tutorials/).
-   [Prodissues: Adding mu4e Support To Emacs](http://prodissues.com/2016/02/adding-mu4e-support-to-emacs.html).
-   [Prodissues: Emacs GPG For Dummies](http://prodissues.com/2016/02/emacs-gpg-for-dummies.html).
-   [Reading IMAP Mail in Emacs on OSX](http://ict4g.net/adolfo/notes/2014/12/27/emacs-imap.html).
-   [Sending queued mails in the background with mu4e](https://vxlabs.com/2019/07/03/send-queued-mails-in-background-with-mu4e/).
-   [Setting Up Mu4e 1.0 C - aliquot](https://aliquote.org/post/setting-up-mu4e-1-0-c/).
-   [Solene's post: Sending mail with mu4e](https://dataswamp.org/~solene/2018-05-22-mu4esmtp.html).
-   [The Emacs Network Security Manager](https://lars.ingebrigtsen.no/2014/12/01/the-emacs-network-security-manager).
-   [The Ultimate Emailing Agent with Mu4e and Emacs](http://tech.memoryimprintstudio.com/the-ultimate-emailing-agent-with-mu4e-and-emacs).
-   [TIP: How to easily manage your emails with mu4e (Reddit)](https://www.reddit.com/r/emacs/comments/8q84dl/tip_how_to_easily_manage_your_emails_with_mu4e/).
-   [Two custom headers for mu4e - Étienne Deparis](https://etienne.depar.is/a-ecrit/post/2016/09/23/Two-custom-headers-for-mu4e).
-   [Using Emacs to read gmail (Emacs subreddit)](https://www.reddit.com/r/emacs/comments/73a3gp/using_emacs_to_read_gmail/).
-   [Using mu4e (Brool blog)](http://www.brool.com/post/using-mu4e/).
-   [Zamansky mu4e's sample config](https://github.com/zamansky/using-emacs/blob/master/mu4econfig-sample.el).
-   [Zamansky's video on mu4e](https://www.youtube.com/watch?v=newRHXKm4H4).

# \[2018-05-24 Thu\] Transparent Emacs titlebars on macOS
---
id: transparent-emacs-titlebars-on-macos
---

Happy with [Emacs Plus](https://github.com/d12frosted/homebrew-emacs-plus) builds on Mac. You get some eye-candy bonuses like transparent titlebars.

To install:

``` {.bash org-language="sh"}
brew tap d12frosted/emacs-plus
brew install emacs-plus --without-spacemacs-icon
```

Config:

``` {.commonlisp org-language="emacs-lisp"}
(when (memq window-system '(mac ns))
  (add-to-list 'default-frame-alist '(ns-appearance . dark)) ; nil for dark text
  (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t)))
```

![](https://xenodium.github.io/images/transparent-emacs-titlebars-on-macos/transparent-emacs-titlebars-macos.png)

# \[2018-05-24 Thu\] Lunette: Like Spectacle but for Hammerspoon
---
id: lunette-like-spectacle-but-for-hammerspoon
---

Came across [Lunette](https://github.com/scottwhudson/Lunette). Gives ya Spectacle Keybindings for Hammerspoon.

# \[2018-05-23 Wed\] Train Emacs to open files externally
---
id: train-emacs-to-open-files-externally
---

TIL about the [openwith](https://bitbucket.org/jpkotta/openwith) package. It enables Emacs to defer to external programs for certain files. You choose which ones. Neat.

``` {.commonlisp org-language="emacs-lisp"}
(use-package openwith :ensure t
  :config
  (csetq openwith-associations
         '(("\\.\\(mp4\\|mp3\\|webm\\|avi\\|flv\\|mov\\)$" "open" (file))))
  (openwith-mode 1))
```

# \[2018-05-22 Tue\] Show hidden files in Finder
---
id: show-hidden-files-in-finder
---

``` {.bash org-language="sh"}
defaults write com.apple.finder AppleShowAllFiles TRUE
killall Finder
```

# \[2018-05-22 Tue\] Ejecting USB drives on Synology
---
id: ejecting-usb-drives-on-synology
---

For posterity:

> Control panel \> External devices \> USB Disk 1 \> Eject

# \[2018-05-21 Mon\] Remounting Synology encrypted share
---
id: remounting-synology-encrypted-share
---

Had been a while since I did this… for posterity:

> Control panel \> Shared Folder \> Encryption \> Mount

# \[2018-05-20 Sun\] Synology user had no home
---
id: synology-user-had-no-home
---

Upon ssh'ing to a Synology box, the user had no home.

> Could not chdir to home directory /var/services/homes/someone: No such file or directory

Fixed via:

> Control Panel \> User \> Advanced \> User Home \> \[x\] Enable user home service

# \[2018-04-30 Mon\] Pre-commit hooks to save you from yourself
---
id: pre-commit-hooks-to-save-you-from-yourself
---

Wanted to try out some code, but needed to ensure never checked in. Git pre-commit hooks are handy in this space. Add the following script to search for either \@COMMITFAIL or \@NOCOMMIT in the staged files. If found, attempts to commit will fail.

Based on <https://gist.github.com/rex/223b4be50285f6b8b3e06dea50d15887>:

``` {.bash org-language="sh"}
#!/bin/bash

set -o nounset
set -o errexit

echo "Arguments:"
echo "$@"
echo "---"

readonly FILES_PATTERN='(\..+)?$'
readonly FORBIDDEN='(@?NOCOMMIT|@?COMMITFAIL)'

if ( git diff --cached --name-only | grep -E "$FILES_PATTERN" | xargs grep -E --with-filename -n "$FORBIDDEN" ); then
  echo "ERROR: @COMMITFAIL or @NOCOMMIT found. Exiting to save you from yourself."
  exit 1
fi
```

Save to a file and create a symbolic link to your .git/hooks directory:

``` {.bash org-language="sh"}
ln -s ../../git/commit-fail-pre-hook.sh .git/hooks/pre-commit
```

# \[2018-04-19 Thu\] Azores travel bookmarks
---
id: azores-travel-bookmarks
---



-   [Azores islands](http://www.fodors.com/go-list/2013/azores-islands/).
-   [My configuration with init.lua and the require()ed modules](https://github.com/schilken/dot-hammerspoon).
-   [This other Eden: the Azores, Europe's secret islands of adventure](http://www.lonelyplanet.com/travel-tips-and-articles/this-other-eden-the-azores-europes-secret-islands-of-adventure).

# \[2018-04-19 Thu\] Debugging Emacs binary
---
id: debugging-emacs-binary
---

From [How do I debug an emacs crash? (Emacs Stack Exchange)](https://emacs.stackexchange.com/questions/14354/how-do-i-debug-an-emacs-crash), disable optimizations when configuring and build:

``` {.bash org-language="sh"}
CFLAGS="-O0 -g3" ./configure ...
make
```

And good 'ol gdb (lldb works too):

``` {.bash org-language="sh"}
gdb ../nextstep/Emacs.app/Contents/MacOS/Emacs
```

## Reference

-   [etc/DEBUG: Debugging GNU Emacs](https://git.savannah.gnu.org/cgit/emacs.git/tree/etc/DEBUG).

# \[2018-04-19 Thu\] Paper less bookmarks
---
id: paperless-bookmarks
---



-   [danielquinn/paperless: Scan, index, and archive all of your paper documents](https://github.com/danielquinn/paperless).
-   [Digitizing All Your Paper Stuff](http://www.karl-voit.at/2015/04/05/digitizing-paper/).
-   [Fujitsu ScanSnap iX500 Color Duplex Desk Scanner for Mac and PC](https://www.amazon.com/Fujitsu-ScanSnap-iX500-Duplex-Scanner/dp/B01G3JYVYM/ref=dp_ob_title_ce).
-   [Going Paperless: Scanning to Evernote, Revisited \| Jamie Todd Rubin](http://www.jamierubin.net/2013/04/30/going-paperless-scanning-to-evernote-revisited/).
-   [guess-filename.py: Derive a file name according to old file name cues and/or PDF file content](https://github.com/novoid/guess-filename.py).
-   [Hazel for document/download management](http://www.noodlesoft.com/).
-   [Installing Tesseract OCR on Mac OS X Lion](http://blog.matt-swain.com/post/26419042500/installing-tesseract-ocr-on-mac-os-x-lion).
-   [Paperless \| Irreal](http://irreal.org/blog/?p=5935).
-   [PDF OCR X - Mac & Windows OCR Software to convert PDFs and Images to Text](http://solutions.weblite.ca/pdfocrx/).
-   [Video: Batch OCR With The Mac Fujitsu ScanSnap](http://www.documentsnap.com/batch-ocr-mac-fujitsu-scansnap/).

# \[2018-04-18 Wed\] Bologna travel bookmarks
---
id: bologna-travel-bookmarks
---

-   Il Cannone restaurant.

# \[2018-04-17 Tue\] Grep through pdfs
---
id: grep-through-pdfs
---

Late to the party, but investing in going paperless. Got a scanner with OCR, which generates searchable pdfs. If I could only grep through them…

``` {.bash org-language="sh"}
brew install pdfgrep
```

Balance restored.

# \[2018-04-14 Sat\] Hammerspoon bookmarks
---
id: hammerspoon-bookmarks
---



-   [dotfiles/grid.lua at master](https://github.com/peterpme/dotfiles/blob/master/hammerspoon/grid.lua) for simple functions to resize windows.
-   [Emacs keys everywhere Hammerspoon Script](https://gist.github.com/justintanner/71d640be159c2a76e85d5196cf22e98a).
-   [Getting Started With Hammerspoon (by Diego Martín Zamboni)](http://zzamboni.org/post/getting-started-with-hammerspoon/).
-   [Hammerspoon config inspired by Spacemacs](https://github.com/agzam/spacehammer).
-   [Just Enough Lua to Be Productive in Hammerspoon, Part 1](http://zzamboni.org/post/just-enough-lua-to-be-productive-in-hammerspoon-part-1/).
-   [Just Enough Lua to Be Productive in Hammerspoon, Part 2](http://zzamboni.org/post/just-enough-lua-to-be-productive-in-hammerspoon-part-2/).
-   [launchOrFocusByBundleID](https://github.com/anandpiyer/.dotfiles/blob/fb7bdf5d6382515f36587f2ada83330d83983624/.hammerspoon/init.lua#L200) for global key bindings (there are Emacs goodies there too).
-   [My configuration with init.lua and the require()ed modules](https://github.com/schilken/dot-hammerspoon).
-   [Seal](http://www.hammerspoon.org/Spoons/Seal.html). Helm-like for hammerspoon.
-   [Set up a Hyper Key with Hammerspoon on macOS](https://blog.kalis.me/setup-hyper-key-hammerspoon-macos/).
-   [ZeroBrane completion](https://github.com/asmagill/hammerspoon-config/blob/07ec892ab1351d2a7659d802e4cbfa8e8a0d5702/_scratch/zerobrane.lua) and [here](https://github.com/cmsj/hammerspoon-config/blob/master/init.lua) also.

# \[2018-04-14 Sat\] Options to reduce Go binary size
---
id: options-to-reduce-go-binary-size
---

A Hacker News's thread [Go gets preliminary WebAssembly support](https://news.ycombinator.com/item?id=16834181) has a couple of tips to reduce binaries compiled with Go.

``` {.bash org-language="sh"}
go build -ldflags=-s
```

[UPX](https://upx.github.io/) (Ultimate Packer for eXecutables) packs the binary further.

``` {.bash org-language="sh"}
upx --ultra-brute
```

# \[2018-04-09 Mon\] Trying out tesseract
---
id: trying-out-tesseract
---

As part of going paperless, looking into OCR. Trying out tesseract.

Install

``` {.bash org-language="sh"}
$ brew install gs
$ brew install imagemagick
$ brew install tesseract
```

``` {.bash org-language="sh"}
$ convert -density 300 -depth 8 receipt.pdf receipt.png
$ tesseract receipt.png receipt.png.txt
```

# \[2018-04-08 Sun\] Sapporo travel bookmarks
---
id: sapporo-travel-bookmarks
---



-   [175 ° DENO Dandan Noodles, Sapporo](https://foodle.pro/restaurants/sapporo/175-0-deno-dandan-noodles).
-   [The Hill of the Buddha](https://www.vitra.com/en-gb/magazine/details/the-hill-of-the-buddha).

# \[2018-04-08 Sun\] Gif bookmarks
---
id: gif-bookmarks
---



-   [An idiot’s guide to animation compression \| Taking Initiative](https://takinginitiative.wordpress.com/2020/03/07/an-idiots-guide-to-animation-compression/).
-   [gif-progress: Attach progress bar to animated GIF](https://github.com/nwtgck/gif-progress/blob/develop/README.md).
-   [gifski — highest-quality GIF converter](https://gif.ski/).
-   [keycastr: an open-source keystroke visualizer](https://github.com/keycastr/keycastr).
-   [phw/peek: Simple animated GIF screen recorder for Linux](https://github.com/phw/peek).

# \[2018-04-08 Sun\] Trying out ShellCheck
---
id: trying-out-shellcheck
---

[ShellCheck](https://github.com/koalaman/shellcheck) gives you automatic warnings/suggestions in bash/sh shell scripts.

``` {.bash org-language="sh"}
$ brew install shellcheck
```

Bonus: If using Emacs's [flycheck](https://github.com/flycheck/flycheck), you get ShellCheck support out of the box.

# \[2018-04-08 Sun\] Image editing bookmarks
---
id: image-editing-bookmarks
---



-   [Exif.tools – A multimedia file metadata tool (Hacker News)](https://news.ycombinator.com/item?id=17748266).
-   [Fred's ImageMagick Scripts (Hacker News)](https://news.ycombinator.com/item?id=16668254).
-   [How to crop in GIMP (Linux Hint)](https://linuxhint.com/howto_crop_gimp/).
-   [ImageMagick to Sharpen an Image – Linux Hint](https://linuxhint.com/imagemagick_sharpen_image/).
-   [Jpeg2png: Silky smooth JPEG decoding – no more artifacts (2016) \| Hacker News](https://news.ycombinator.com/item?id=23789934).
-   [Make your own meme image using Imagemagick](https://twitter.com/pidybi/status/1278590835194564608).
-   [The Art of PNG Glitch (Hacker News)](https://news.ycombinator.com/item?id=10222524).
-   [The Art of PNG Glitch](http://ucnv.github.io/pnglitch/).

# \[2018-04-05 Thu\] Buying matcha powder online
---
id: buying-matcha-powder-online
---

From Reddit's [thread](https://www.reddit.com/r/tea/comments/6qbh4l/matcha/):

-   <https://yunomi.life>
-   <https://shop.ippodo-tea.co.jp/kyoto/shopf/index.html>
-   <https://www.o-cha.com>
-   <http://hojotea.com/categ_e/viewe.htm>
-   <http://yuuki-cha.com>
-   <http://www.hibiki-an.com/index.php>
-   <http://www.thes-du-japon.com/index.php?main_page=index>
-   <https://www.chadoteahouse.com>
-   <https://www.denstea.com>
-   <https://www.sazentea.com/en>
-   <http://www.ujicha-kanbayashi.co.jp>
-   <http://www.marukyu-koyamaen.co.jp/products.html>
-   <http://www.fukumotoen.co.jp/shop/>
-   <http://www.myokoen.com/shop/index.html>

# \[2018-04-04 Wed\] Getting macOS app bundle ID
---
id: getting-macos-app-bundle-id
---

From [stack overflow](https://stackoverflow.com/questions/39464668/how-to-get-bundle-id-of-mac-application#39464824):

Option 1

``` {.bash org-language="sh"}
osascript -e 'id of app "Emacs"'
```

Option 2

``` {.bash org-language="sh"}
mdls -name kMDItemCFBundleIdentifier -r SomeApp.app
```

# \[2018-03-31 Sat\] Trying out chunkwm
---
id: trying-out-chunkwm
---

![](https://xenodium.github.io/images/trying-out-chunkwm/chunkwm.png)

### Installing [Chunkwm](https://github.com/koekeishiya/chunkwm)

``` {.bash org-language="sh"}
$ brew tap crisidev/homebrew-chunkwm
$ brew install --HEAD --with-tmp-logging chunkwm
```

Add a configuration file. Started off from this [example](https://gist.github.com/shihanng/65b73712df2e51d4d78cc27c218bac35#file-chunkwmrc).

> \~*.chunkwmrc chmod +x \~*.chunkwmrc

**Note**: Ensure core::plugin_dir matches homebrew's plugin directory. Typically something like: //path/to/homebrew/opt/chunkwm/share/chunkwm/plugins/

Start chunkwmrc service.

``` {.bash org-language="sh"}
$ brew services start crisidev/chunkwm/chunkwm
```

### Installing [skhd](https://github.com/koekeishiya/skhd) (a hotkey daemon)

``` {.bash org-language="sh"}
$ brew install --HEAD --with-logging  koekeishiya/formulae/skhd
```

Start skhd service.

``` {.bash org-language="sh"}
$ brew services start koekeishiya/formulae/skhd
```

Skhd logs location.

``` {.bash org-language="sh"}
/Users/you/homebrew/var/log/skhd/skhd.[out|err].log
```

Add a configuration file. Started off from this [example](https://raw.githubusercontent.com/koekeishiya/chunkwm/master/src/plugins/tiling/examples/khdrc).

``` {.bash org-language="sh"}
~/.skhdrc
chmod +x ~/.skhdrc
```

### Installing [khd](https://github.com/koekeishiya/skhd) (easily invoke hotkeys from terminal)

``` {.bash org-language="sh"}
$ brew install khd
```

Some additional Mission Control and keyboard shortcut preferences:

![](https://xenodium.github.io/images/trying-out-chunkwm/mission_control.png)

![](https://xenodium.github.io/images/trying-out-chunkwm/keyboard_shortcuts.png)

# \[2018-02-06 Tue\] Building bazel on macOS
---
id: building-bazel-on-macos
---

## Bootstrap

``` {.bash org-language="sh"}
brew tap bazelbuild/tap
brew install bazelbuild/tap/bazel
```

## Build

``` {.bash org-language="sh"}
git clone https://github.com/bazelbuild/bazel.git
cd bazel
bazel build //src:bazel
```

## Get your bazel binary

    Self-contained binary in bazel-bin/src/bazel

## Known revisions

-   <https://github.com/bazelbuild/bazel.git> @ d81a46cebe07f73d3ea38206262cf7a1a9513b42
-   <https://github.com/bazelbuild/rules_apple.git> @ e921a9f727e039c8b5087d4f98c5d09f189658cd

# \[2018-01-07 Sun\] Extracting files from pkg
---
id: extracting-files-from-pkg
---

``` {.bash org-language="sh"}
mkdir tmp
cd tmp
xar -xf ../Some.pkg
cat Payload | gunzip -dc |cpio -i
```

# \[2018-01-07 Sun\] Installing Inkscape with homebrew
---
id: installing-inkscape-with-homebrew
---

``` {.bash org-language="sh"}
brew tap caskroom/cask
brew install caskformula/caskformula/inkscape
```

# \[2017-12-16 Sat\] Magit amend commit author
---
id: magit-amend-commit-author
---

Rarely use it, but handy. Use Magit to amend git commit author.

-   Rebase interactively (r, i).
-   Move point to commit to ammend.
-   Execute command (x).

``` {.bash org-language="sh"}
git commit --amend --author="name <email>"
```

-   Commit (c, c).

![](https://xenodium.github.io/images/amend-git-commit-author-on-magit/amending.gif)

# \[2017-12-13 Wed\] Homebrew install from cache
---
id: homebrew-install-from-cache
---

Came across a 404 while installing graphviz-2.40.1.tar.gz via homebrew. If you can find the package elsewhere, copy over to homebrew's cache directory.

``` {.bash org-language="sh"}
brew --cache
```

# \[2017-11-16 Thu\] org-babel Objective-C support
---
id: org-babel-objective-c-support
---

Wanted to quickly execute an Objective-C snippet. org-babel didn't support it out of the box, but adding it was straightforward (looked at ob-C.el and ob-java.el):

``` {.commonlisp org-language="emacs-lisp"}
(require 'ob)

(defcustom org-babel-objc-compile-command "clang -x objective-c -framework Foundation"
  "For example: \"clang -x objective-c -framework Foundation\"."
  :group 'org-babel
  :version "24.3"
  :type 'string)

(defun org-babel-execute:objc (body params)
  "Compile Objective-C BODY with org PARAMS and execute binary."
  (let* ((src-file (org-babel-temp-file "org-babel-objc-block-" ".m"))
         (cmpflag (or (cdr (assq :cmpflag params)) ""))
         (full-body (org-babel-expand-body:generic body params))
         (bin-file
          (org-babel-process-file-name
           (org-babel-temp-file "org-babel-objc-block" org-babel-exeext))))
    (with-temp-file src-file (insert full-body))
    (org-babel-eval
     (concat org-babel-objc-compile-command " " cmpflag " " src-file " " "-o" " " bin-file) "")

    ;; Using 2>&1 since org babel does not include stderr in output from NSLog.
    (let ((results (org-babel-eval (concat (org-babel-process-file-name bin-file) " 2>&1")  "")))
      (org-babel-reassemble-table
       (org-babel-result-cond (cdr (assq :result-params params))
         (org-babel-read results)
         (let ((tmp-file (org-babel-temp-file "c-")))
           (with-temp-file tmp-file (insert results))
           (org-babel-import-elisp-from-file tmp-file)))
       (org-babel-pick-name
        (cdr (assq :colname-names params)) (cdr (assq :colnames params)))
       (org-babel-pick-name
        (cdr (assq :rowname-names params)) (cdr (assq :rownames params)))))))

(provide 'ob-objc)
```

Add *objc* to *org-babel-load-languages*, and you can subsequently compile and run Objective-C blocks like:

``` {.objc results="verbatim"}
#import <Foundation/Foundation.h>

int main() {
  NSLog(@"Hello World");
  return 0;
}
```

# \[2017-11-12 Sun\] iOS dev command-line goodies
---
id: ios-dev-command-line-goodies
---

## Install ipa on device

Get utility with:

``` {.bash org-language="sh"}
npm install -g ipa-deploy
npm install -g ios-deploy
```

Install ipa on connected iPhone:

``` {.bash org-language="sh"}
ipa-deploy path/to/your/App.ipa
```

## Install app on booted simulator

Install ipa on connected iPhone:

``` {.bash org-language="sh"}
xcrun simctl install booted path/to/your/App.app
```

## Install ipa on booted simulator

``` {.bash org-language="sh"}
#!/bin/bash

# Unzip ipa, install app, and run on booted simulator.

set -o nounset
set -o errexit

readonly IPA_PATH=$1
readonly TEMP_DIR_PATH=$(mktemp -d)
readonly BASENAME=$(basename ${IPA_PATH})
readonly NAME=${BASENAME%.*}
readonly APP_DIR_PATH="${TEMP_DIR_PATH}/Payload/${NAME}.app"
readonly PLIST_FILE_PATH="${APP_DIR_PATH}/Info.plist"

trap "rm -rf ${TEMP_DIR_PATH}" EXIT

unzip -o "${IPA_PATH=}" -d "${TEMP_DIR_PATH}"

readonly BUNDLE_ID=$(/usr/libexec/PlistBuddy -c "Print CFBundleIdentifier" ${PLIST_FILE_PATH})

xcrun simctl install booted "${APP_DIR_PATH}"
xcrun simctl launch booted "${BUNDLE_ID}"
```

# \[2017-11-01 Wed\] Eshell pcomplete company completion
---
id: eshell-pcomplete-company-completion
---

Howard Abrams's [Introduction to eshell video](https://www.youtube.com/watch?v=RhYNu6i_uY4) prompted me to poke at eshell some more. This time, I got eshell context aware completion by glueing the excellent [company](https://company-mode.github.io) and [pcomplete](https://masteringemacs.org/article/pcomplete-context-sensitive-completion-emacs) packages.

![](https://xenodium.github.io/images/eshell-pcomplete-company-completion/company-pcomplete.png)

``` {.commonlisp org-language="emacs-lisp"}
(require 'cl-lib)
(require 'company)
(require 'dash)
(require 'pcomplete)
(require 's)

(defun company-pcomplete--overlap-tail (a b)
  "When A is \"SomeDev\" and B is \"Developer\", return \"eloper\"."
  (let ((prefix a)
        (remaining nil))
    (while (and (not remaining) (> (length prefix) 0))
      (when (s-starts-with? prefix b)
        (setq remaining (substring b (length prefix))))
      (setq prefix (substring prefix 1)))
    remaining))

(defun company-pcomplete--candidates (prefix)
  "Get candidates for PREFIX company completion using `pcomplete'."
  ;; When prefix is: "~/Down" and completion is "Downloads", need
  ;; to find common string and join into "~/Downloads/".
  (-map (lambda (item)
          (if (s-starts-with? prefix item)
              item
            (concat prefix (company-pcomplete--overlap-tail prefix item))))
        (all-completions prefix (pcomplete-completions))))

(defun company-pcomplete (command &optional arg &rest ignored)
  "Complete using pcomplete. See `company''s COMMAND ARG and IGNORED for details."
  (interactive (list 'interactive))
  (case command
    (interactive (company-begin-backend 'company-pcomplete))
    (prefix (company-grab-symbol))
    (candidates
     (company-pcomplete--candidates arg))))
```

Don't forget to add *company-pcomplete* to *company-backends,* and if you want an explicit binding, use something like:

``` {.commonlisp org-language="emacs-lisp"}
(bind-key "<backtab>" #'company-complete eshell-mode-map)
```

# \[2017-09-10 Sun\] Basic imenu in helpful-mode
---
id: basic-imenu-in-helpful-mode
---

I'm finding Wilfred Hughes's [helpful-mode](https://github.com/Wilfred/helpful), well… rather helpful. However, I'm missing imenu support. Here's a hacky way to get basic imenu.

![](https://xenodium.github.io/images/basic-imenu-for-helpful-mode/helpful-imenu.png)

``` {.commonlisp org-language="emacs-lisp"}
(defun helpful--create-imenu-index ()
  "Create an `imenu' index for helpful."
  (beginning-of-buffer)
  (let ((imenu-items '()))
    (while (progn
             (beginning-of-line)
             ;; Not great, but determine if looking at heading:
             ;; 1. if it has bold face.
             ;; 2. if it is capitalized.
             (when (and (eq 'bold (face-at-point))
                        (string-match-p
                         "[A-Z]"
                         (buffer-substring (line-beginning-position)
                                           (line-end-position))))
               (add-to-list 'imenu-items
                            (cons (buffer-substring (line-beginning-position)
                                                    (line-end-position))
                                  (line-beginning-position))))
             (= 0 (forward-line 1))))
    imenu-items))

(defun helpful-mode-hook-function ()
  "A hook function for `helpful-mode'."
  (setq imenu-create-index-function #'helpful--create-imenu-index))

(add-hook 'helpful-mode-hook
          #'helpful-mode-hook-function)
```

# \[2017-08-19 Sat\] Projectile shell dir company completion
---
id: projectile-shell-dir-company-completion
---

[Projectile](https://github.com/bbatsov/projectile) and [company](https://company-mode.github.io) are just amazing Emacs packages. Projectile gives random access to files, while company completes well… anything. For shells, Emacs has a handful of options.

Standing on the shoulders of package giants ([dash](https://github.com/magnars/dash.el) and [f](https://github.com/rejeep/f.el) included) and some elisp, we can bring random access to project directories from the shell.

![](https://xenodium.github.io/images/projectile-shell-dir-company-completion/company-projectile-cd.png)

``` {.commonlisp org-language="emacs-lisp"}
(require 'cl-lib)
(require 'company)
(require 'dash)
(require 'f)
(require 'projectile)

(defvar-local company-projectile-cd-prefix "cd ")

(defun company-projectile-cd (command &optional arg &rest ignored)
  "Company shell completion for any projectile path."
  (interactive (list 'interactive))
  (case command
    (interactive (company-begin-backend 'company-projectile-cd))
    (prefix
     (company-grab-symbol-cons company-projectile-cd-prefix
                               (length company-projectile-cd-prefix)))
    (candidates
     (company-projectile-cd--candidates
      (company-grab-symbol-cons company-projectile-cd-prefix
                                (length company-projectile-cd-prefix))))
    (post-completion
     (company-projectile-cd--expand-inserted-path arg))))

(defun company-projectile-cd--candidates (input)
  "Return candidates for given INPUT."
  (company-projectile-cd--reset-root)
  (when (consp input)
    (let ((search-term (substring-no-properties
                        (car input) 0 (length (car input))))
          (prefix-found (cdr input)))
      (when prefix-found
        (if (projectile-project-p)
            (company-projectile-cd--projectile search-term)
          (company-projectile-cd--find-fallback search-term))))))

(defun company-projectile-cd--projectile (search-term)
  (-filter (lambda (path)
             (string-match-p (regexp-quote
                              search-term)
                             path))
           (-snoc
            (projectile-current-project-dirs)
            ;; Throw project root in there also.
            (projectile-project-root))))

(defun company-projectile-cd--find-fallback (search-term)
  (ignore-errors
    (-map (lambda (path)
            (string-remove-prefix "./" path))
          (apply #'process-lines
                 (list "find" "." "-type" "d"  "-maxdepth" "2" "-iname"
                       (format "\*%s\*" search-term))))))

(defun company-projectile-cd--expand-inserted-path (path)
  "Replace relative PATH insertion with its absolute equivalent if needed."
  (unless (f-exists-p path)
    (delete-region (point) (- (point) (length path)))
    (insert (concat (projectile-project-root) path))))

(defun company-projectile-cd--reset-root ()
  "Reset project root. Useful when cd'ing in and out of projects."
  (projectile-reset-cached-project-root)
  (when (projectile-project-p)
    (projectile-project-root)))
```

# \[2017-08-09 Wed\] Creating icns icons
---
id: creating-icns-icons
---

Stack overflow yields [Where can i find Icon Composer on Mac?](https://stackoverflow.com/questions/12437433/where-can-i-find-icon-composer-on-mac) when I did a quick search to convert a png to icns. For future reference:

``` {.bash org-language="sh"}
#!/bin/bash -e

set -e
set -o pipefail

if [ "$#" -ne 1 ]; then
 echo "\nusage: to_icns.sh path/to/image.png\n"
 exit 1
fi

readonly IMAGE_FPATH=$1
readonly BASENAME=$(basename ${IMAGE_FPATH%.*})

mkdir ${BASENAME}.iconset

sips -z 16 16   $IMAGE_FPATH --out "${BASENAME}.iconset/icon_16x16.png"
sips -z 32 32   $IMAGE_FPATH --out "${BASENAME}.iconset/icon_16x16@2x.png"
sips -z 32 32   $IMAGE_FPATH --out "${BASENAME}.iconset/icon_32x32.png"
sips -z 64 64   $IMAGE_FPATH --out "${BASENAME}.iconset/icon_32x32@2x.png"
sips -z 128 128 $IMAGE_FPATH --out "${BASENAME}.iconset/icon_128x128.png"
sips -z 256 256 $IMAGE_FPATH --out "${BASENAME}.iconset/icon_128x128@2x.png"
sips -z 256 256 $IMAGE_FPATH --out "${BASENAME}.iconset/icon_256x256.png"
sips -z 512 512 $IMAGE_FPATH --out "${BASENAME}.iconset/icon_256x256@2x.png"
sips -z 512 512 $IMAGE_FPATH --out "${BASENAME}.iconset/icon_512x512.png"

cp $IMAGE_FPATH "${BASENAME}.iconset/icon_512x512@2x.png"

iconutil -c icns ${BASENAME}.iconset

rm -R ${BASENAME}.iconset

echo Wrote ${BASENAME}.icns
```

# \[2017-08-06 Sun\] Forcing aptX on MacOS bluetooth audio
---
id: forcing-aptx-on-macos-bluetooth-audio
---

Bought a pair of QuietComfort 35. Audio quality on MacOS was lagging compared to iOS. Googling led to different posts suggesting the use of Bluetooth Explorer to force aptX usage. Did the trick for me.

**Bluetooth Explorer** can be downloaded from <https://developer.apple.com/download/more>. Search for Hardware IO tools:

![](https://xenodium.github.io/images/forcing-aptx-on-macos-bluetooth-audio/download-bluetooth-explorer.png)

Open **Hardware_IO_Tools_for_Xcode_7.3.dmg** and launch **Bluetooth Explorer**:

![](https://xenodium.github.io/images/forcing-aptx-on-macos-bluetooth-audio/tools-image.png)

Select **Audio Options**:

![](https://xenodium.github.io/images/forcing-aptx-on-macos-bluetooth-audio/audio-options.png)

Check **Force use of aptX**:

![](https://xenodium.github.io/images/forcing-aptx-on-macos-bluetooth-audio/force-aptx.png)

Don't forget to disconnect and reconnect your Bluetooth device.

# \[2017-07-10 Mon\] Hungary travel bookmarks
---
id: hungary-travel-bookmarks
---

-   [My city: Budapest - Lonely Planet](https://www.lonelyplanet.com/hungary/budapest/travel-tips-and-articles/my-city-budapest/40625c8c-8a11-5710-a052-1479d276913c?).

# \[2017-07-08 Sat\] Faster cursor movement on macOS
---
id: faster-cursor-movement-on-macos
---

Faster cursor movement on macOS by increasing your keyboard's initial key repeat subsequent key repeat.

``` {.bash org-language="sh"}
defaults write -g KeyRepeat -int 1
defaults write -g InitialKeyRepeat -int 10
```

# \[2017-07-07 Fri\] Search/insert one-liners with Emacs helm-ag
---
id: search-insert-one-liners-with-emacs-helm-ag
---

Emacs [helm](https://github.com/emacs-helm/helm) is awesome. [helm-ag](https://github.com/syohex/emacs-helm-ag) is double awesome. Searching for one-liners in your codebase, narrowing down with helm, and easily inserting is triple awesome.

![](https://xenodium.github.io/images/search-and-insert-one-liners-with-helm-ag/helm-ag-insert.gif)

``` {.commonlisp org-language="emacs-lisp"}
(defun ar/helm-ag (arg)
  "Helm-ag search remembering last location.  With ARG, forget the last location."
  (interactive "P")
  (defvar ar/helm-ag--default-locaction nil)
  (setq ar/helm-ag--default-locaction
                 (read-directory-name "search in: " (if arg
                                                        default-directory
                                                      ar/helm-ag--default-locaction) nil t))
  (helm-do-ag ar/helm-ag--default-locaction))

(defun ar/helm-ag-insert (arg)
  ;; Helm-ag and insert match.
  (interactive "P")
  (let* ((actions (helm-make-actions
                   "Insert"
                   (lambda (candidate)
                     ;; Drop file:line:column. For example:
                     ;; arc_hostlink.c:13:2:#include <linux/fs.h>
                     ;; => #include <linux/fs.h>
                     (insert (replace-regexp-in-string "^[^ ]*:" "" candidate)))))
         (helm-source-do-ag (helm-build-async-source "The Silver Searcher"
                              :init 'helm-ag--do-ag-set-command
                              :candidates-process 'helm-ag--do-ag-candidate-process
                              :persistent-action  'helm-ag--persistent-action
                              :action actions
                              :nohighlight t
                              :requires-pattern 3
                              :candidate-number-limit 9999
                              :keymap helm-do-ag-map
                              :follow (and helm-follow-mode-persistent 1))))
    (call-interactively #'ar/helm-ag)))
```

# \[2017-05-29 Mon\] Sleep bookmarks
---
id: sleep-bookmarks
---



-   [Algorithmic Solution to My Insomnia (Hacker News)](https://news.ycombinator.com/item?id=15997016).
-   [Melatonin - Gwern.net](https://www.gwern.net/Melatonin).
-   [Melatonin: Much More Than You Wanted To Know \| Slate Star Codex](https://slatestarcodex.com/2018/07/10/melatonin-much-more-than-you-wanted-to-know).

# \[2017-05-28 Sun\] Tea bookmarks
---
id: tea-bookmarks
---



-   [Georgia's notes on tea](http://www.notesontea.com).
-   [Nine Green Teas To Try \| Video (Andrew Weil, M.D.)](https://www.drweil.com/videos-features/videos/9-green-teas-to-try/).

# \[2017-04-23 Sun\] Math bookmarks
---
id: math-bookmarks
---



-   [3Blue1Brown](https://www.3blue1brown.com/#lessons).
-   [Calculus Made Easy (1914) (Hacker News)](https://news.ycombinator.com/item?id=14161876).
-   [Visually stunning math concepts which are easy to explain](https://math.stackexchange.com/questions/733754/visually-stunning-math-concepts-which-are-easy-to-explain).

# \[2017-04-23 Sun\] GnuPG and macOS
---
id: gnupg-and-macos
---

Had problems installing and using GnuPG on macOS, primarily for Emacs use:

``` example
gpg: problem with the agent: Inappropriate ioctl for device
gpg: error creating passphrase: Operation cancelled
gpg: symmetric encryption of '[stdin]' failed: Operation cancelled
```

Basic installation required:

``` {.bash org-language="sh"}
brew install gnupg
```

But worked around the error above by using pinentry-mac (UI), instead of Emacs prompts.

``` {.bash org-language="sh"}
brew install pinentry-mac
```

Edited \~/.gnupg/gpg-agent.conf with:

``` example
pinentry-program path/to/homebrew/bin/pinentry-mac
```

May need to kill gpg-agent to reload config.

``` {.bash org-language="sh"}
gpgconf --kill gpg-agent
```

# \[2017-03-13 Mon\] Installing gnuplot on macOS
---
id: installing-gnuplot-on-macos
---

UPDATE(2019-05-19 Sun): Plan A and B use options no longer available since the recent changes to [remove all options from Homebrew/homebrew-core formulae](https://github.com/Homebrew/homebrew-core/issues/31510). See Plan C.

## ~~Plan A~~

### ~~Install gnuplot Qt~~

~~If you have the resources, you can try the Qt flavor. You need at least 15GB to download and a long build. Ran out of space on my Macbook Air. Aborted.~~

``` {.bash org-language="sh"}
brew install gnuplot --with-qt
```

## ~~Plan B~~

### ~~Install xquartz~~

``` {.bash org-language="sh"}
brew install Caskroom/cask/xquartz
```

### ~~Install gnuplot x11~~

``` {.bash org-language="sh"}
brew install gnuplot --with-x11
```

## Install feedgnuplot

Feedgnuplot is handy for plotting data streams realtime.

``` {.bash org-language="sh"}
brew install feedgnuplot
```

## Plan C

### Install with no options

``` {.bash org-language="sh"}
brew install gnuplot
```

So far so good, but default gnuplot formula uses Qt and the Cocoa plugin could not be loaded:

> qt.qpa.plugin: Could not find the Qt platform plugin "cocoa" in ""

### Debugging

1.  QT_DEBUG_PLUGINS

    Turns out you can get plugin logs using the QT_DEBUG_PLUGINS environment variable:

    ``` {.bash org-language="sh"}
    export QT_DEBUG_PLUGINS=1
    ```

    > QFactoryLoader::QFactoryLoader() checking directory path "/Users/myuser/homebrew/Cellar/gnuplot/5.2.6_1/libexec/gnuplot/5.2/platforms" …

    This led me to find out about the *gnuplot/5.2/gnuplot_qt* binary.

2.  qt_prfxpath

    Getting the Qt prefix can be done by inspecting QtCore's strings:

    ``` {.bash org-language="sh" results="output" exports="both"}
    strings /Users/myuser/homebrew/Cellar/qt/5.12.3/Frameworks/QtCore.framework/QtCore | grep qt_prfxpath
    ```

    ``` example
    qt_prfxpath=/usr/local/Cellar/qt/5.12.3
    ```

    Ok so qt_prfxpath is pointing to **usr/local/Cellar/qt*, while my installation's is at //Users/myuser/homebrew/Cellar/qt*. This is problematic and indeed my fault for installing homebrew in **Users/myuser/homebrew* instead of the recommended //usr/local*.

    Symlinking did the job:

    ``` {.bash org-language="sh"}
    sudo mkdir -p /usr/local/Cellar
    sudo ln -s ~/homebrew/Cellar/qt /usr/local/Cellar/qt
    ```

    ``` {.bash org-language="sh"}
    /Users/myuser/homebrew/Cellar/gnuplot/5.2.6_1/libexec/gnuplot/5.2/gnuplot_qt
    ```

    Success.

# \[2017-01-22 Sun\] Tel Aviv travel bookmarks
---
id: tel-aviv-travel-bookmarks
---



-   Breakfast club (dancing).
-   Claro/Sarona Market.
-   [Dizengoff Square - Wikipedia](https://en.wikipedia.org/wiki/Dizengoff_Square).
-   Drink Cafe hafuch at Rothschild 12.
-   Jaffa's Flea market.
-   Nightlife: Kuli Alma's hipster haven. Imperial craft cocktail bar (drink Gold fashioned).
-   Park HaYarkon.
-   Tel Aviv museum of art.

# \[2017-01-22 Sun\] Jerusalem travel bookmarks
---
id: jerusalem-travel-bookmarks
---

-   Jerusalem: Rooftop Mamilla restarurant.

# \[2017-01-22 Sun\] Nepal travel bookmarks
---
id: nepal-travel-bookmarks
---



-   [Annapurna Circuit Itinerary - Erika's Travelventures](https://www.erikastravelventures.com/annapurna-circuit-itinerary/).
-   [Nepal in Pictures: 19 Beautiful Places to Photograph](https://www.planetware.com/pictures/nepal-nep.htm).
-   [Patan Durbar square](https://en.wikipedia.org/wiki/Patan_Durbar_Square).
-   [The Truth Behind the Mysterious Magnetic Hill of Ladakh - Vargis Khan](https://vargiskhan.com/log/truth-behind-mysterious-magnetic-hill-of-ladakh/).

# \[2016-12-02 Fri\] Singapore notes
---
id: singapore-notes
---

-   Hotel Mono, 18 Mosque street #01-04.
-   Buddha tooth relic museum.
-   [Best Hawker centers](http://www.telegraph.co.uk/travel/picturegalleries/8308524/Singapores-best-hawker-centres.html).
-   Kong Meng San Phor Kark See Monastery.
-   [Go there (figure out fastest MRT route)](http://gothere.sg).
-   [What to eat at ABC Market (Hawker Centre) aka ABC Brickworks Food Centre?](http://2bearbear.com/what-to-eat-at-abc-market-hawker-centre-abc-brickworks-food-centre/).
-   Curry puffs (see [Taste test: Crisp curry puffs](http://www.hungrygowhere.com/gallery/taste-test-crisp-curry-puffs-*gid-39443101/)).
-   [Singapore’s 17 Michelin-rated Hawker Stalls in 2016](http://thepeakmagazine.com.sg/2016/07/its-official-here-are-singapores-17-michelin-rated-hawker-stalls-in-2016/).
-   Temples
    -   [Sasanaramsi Burmese temple (14, Tai Gin Road, Singapore 327873)](http://burmesebuddhisttemple.org.sg/index.htm).
    -   [Thian Hock Keng temple](https://en.wikipedia.org/wiki/Thian_Hock_Keng).
    -   [Sultan Mosque](http://sultanmosque.sg).
-   Hawkers
    -   Mr and Mrs Mohgan's Super Crispy Roti Prata ([source](http://www.hungrygowhere.com/gallery/hgw-s-best-hawker-food-for-2015-*gid-75813101/16560200)) on Crane Road. Dhal/fish/mutton curry side.
    -   Roast Paradise (maybe) Address: #01-122 Old Airport Road Food Centre. Hours: Tues-Sun: 11am to 4pm or till sold out, Wed and Sun: 11am to 2pm, Closed on Mondays.
    -   Fatty Cheong, 肥仔详, (#01-120, ABC Brickworks Food Centre, 6 Jalan Bukit Merah Singapore 150006): char siew and xio bak rice and char siew noodles.
    -   Hoo Kee Bak Chang (Amoy Street Food Centre): bak zhang (glutinous rice dumpling). Try Choose from three kinds: chestnut (\$2.80); chestnut with salted egg yolk (\$3.60); and chestnut with mushroom (\$3.60).
    -   Lim Kee (Orchard) Banana Fritters (Maxwell food centre, [source](http://www.hungrygowhere.com/gallery/hgw-s-best-hawker-food-for-2015-*gid-75813101/0e560200)).
    -   Mr Avocado Exotic Juice (Alexandra village food centre, [source](http://www.hungrygowhere.com/gallery/hgw-s-best-hawker-food-for-2015-*gid-75813101/19560200)).
    -   Tanglin Crispy Curry Puff (Hong Lim Food Centre or Maxwell, [source](http://www.hungrygowhere.com/gallery/hgw-s-best-hawker-food-for-2015-*gid-75813101/65560200)) (东陵酥皮咖喱角). Try sardine curry puff?
    -   Chuan Kee Satay ([source](http://www.hungrygowhere.com/gallery/hgw-s-best-hawker-food-for-2015-*gid-75813101/63560200)). Long queue for pork satay.
    -   Selera Rasa Nasi Lemak ([source](http://www.hungrygowhere.com/gallery/hgw-s-best-hawker-food-for-2015-*gid-75813101/6b560200)).
    -   Fu Shun Jin Ji Shao La Mian Jia (Maxwell food centre, [source](http://www.hungrygowhere.com/dining-guide/hawker/food-guide-maxwell-food-centre-*aid-10733101/)): Char siu + noodles.
    -   Shanghai La Mian Xiao Long Bao (Alexandra Village food centre, [source](http://www.hungrygowhere.com/gallery/food-guide-alexandra-village-food-centre-*gid-087b3101/584c0200)): xiao long bao or soup dumplings (\$4.50 for 7 pieces).
-   Timbre+ (hipster hawker centre? [source](http://www.straitstimes.com/lifestyle/food/10-dishes-to-try-at-hipster-hawker-centre-timbre)).
-   Supertree Grove (go at dusk, see lights turn on).
-   Singapore Botanic garden.
    -   Ginger Garden.
    -   Palms valley.
    -   Orchid garden.
-   Sri Mariamman Temple.
-   Kusu Island?
-   Chilly crab (“Jumbo” Chilli Crab Restaurant in Clarke Quay or Harvest Seafood Restaurant)?
-   Afternoon tea?
    -   www.tea-chapter.com.sg
-   Bumboats (£2.50 return) leave Changi Point between 6am and 9.30pm for the 10-minute crossing to Palau Ubin. Hire a bicycle in the village where the boats dock.
-   Haji Lane (colorful road).
-   Tiong Bahru 1930s public housing estate (\*\*)
    -   Chong Yu Wanton Mee (Tiong Bahru Market And Food Centre #02-30, 30 Seng Poh Road, [source](http://www.timeout.com/singapore/restaurants-and-cafes/chong-yu-wanton-mee#tab_panel_2)).
    -   old-fashioned treats at Tiong Bahru Galicier (55 Tiong Bahru Rd).
-   Chinatown
    -   Pek Sin Choon Tea: Oldest team merchants.
    -   Ang Mo Kio: Sri Mariamman Hindu temple.
    -   Strangelets: quirky stuff from around the world.
    -   40 Hands: Allegedly one of most popular coffee joints.
    -   BooksActually: Coolest book shop.
-   Keong Saik (next to Chinatown)
    -   1939 Hotel.
    -   The Library (49 Keong Saik Rd): night drinks, ask for key/password next door (the-study.sg) (\*\*)
    -   [Mariko's (Now Phat Cat laundry): Maybe food or drink at night?](http://marikos.com.sg) (\*\*)
    -   Rose Citron (23 Keong Said Rd): French and Asian articles.
-   Everton park (old housing estate), new meets old
    -   Coffee
        -   Nylon coffee roasters (<http://nyloncoffee.sg>).
        -   Just Want Coffee (justwant.com.sg).
        -   Cozy corner coffee.
    -   Sweets
        -   Grin Affair (grinaffair.com): natural ingredients into glass jar creations.
        -   Batterworks (batter-works.com): pastries.
        -   <http://cozycornercoffee.com>.
        -   Seriously ice scream (facebook.com/seriouslyicecream).
        -   Ji Xiang Confectionery (jixiangconfectionery.com): Traditional glutinous sweets. (\*\*)
    -   Food
        -   The Provision Shop (Blk 3 Everton Park): for a classic and affordable meal.
        -   Chew the Fat (Blk 6 Everton Park): comfort food.
        -   Eden's Kitchen (<http://edenskitchen.sg>): healthy, green tea, coconut oil, etc.
-   Jalan Besar
    -   Char: unconventional char siu ([source](http://www.nytimes.com/2015/01/25/travel/restaurant-report-char-in-singapore.html)).
    -   The Banana Leaf Apollo (Little India).
    -   Beach Road Scissors-Cut (220 Jln Besar): Curry Rice. (\*\*)
    -   Fu Zhou Poh Hwa Oyster Cake (166 Jln Besar): UFO-shaped snacks. (\*\*)
    -   [Swee Choon Tim Sum Restaurant: a dim sum institution!](http://www.sweechoon.com). (\*\*)
    -   [Papa Palheta coffee: best coffee in town?](http://papapalheta.com).
    -   [General Company: awesome design and workshops](http://thegeneralco.sg). (\*\*)
    -   [The Bravery: brunch, aka awesome pancakes](http://eat.thebravery.sg). (\*\*)
    -   [AEIOU: Retro shopping](http://aeiou.sg).
-   Geylang (preserved shophouses and rich in Malay history)
    -   Hajjah Mona Nasi Padang (Geylang Serai food centre): Order nasi padang (try dry one).
    -   Biryani Express (Geylang Serai food centre)
    -   Red light district. Still?
    -   [Brawn & Brains (Coffee)](http://brawnandbrains.sg/).
    -   [Old Geylang (crocodile, turtle soup, other oddities)](http://oldgeylang.com.sg).
    -   Hi-Thrift (1 Geylang Rd): Second hand treasures? (\*\*).

# \[2016-12-02 Fri\] Email provider bookmarks
---
id: email-provider-bookmarks
---



-   [Dropping G Suite - Robin Whittleton](https://www.robinwhittleton.com/2018/02/18/dropping-g-suite/).
-   [Heluna - Cloud-based antispam](https://heluna.com/).
-   [Mail-in-a-Box](https://mailinabox.email/).
-   [mailbox.org – Ihr sicherer E-Mail-Anbieter](https://mailbox.org/).
-   [Mailbox.org](https://mailbox.org/).
-   [Migadu](http://migadu.com).
-   [Posteo](http://Posteo.de).
-   [ProtonMail](https://protonmail.com/).
-   [Soverin - Home - Soverin](https://soverin.net/).
-   [Understanding SPF, DKIM, and DMARC: A Simple Guide \| Hacker News](https://news.ycombinator.com/item?id=40708476).

# \[2016-12-01 Thu\] Go snippets
---
id: go-snippets
---

## Command-line flags

``` go
import (
      "flag"
)

type args struct {
      flag1  string
      flag2  string
        arg    string
}

func parseArgs() args {
      args := args{}

      flag.StringVar(&args.flag1, "flag1\n", "\n", "some flag 1 with sample `value`")
      flag.StringVar(&args.flag2, "flag2\n", "\n", "some flag 2 with sample `value`")

      flag.CommandLine.Usage = func() {
          fmt.Fprintf(os.Stderr, "Usage of %s:\n\n", os.Args[0])
          fmt.Fprintf(os.Stderr, "\n  myarg\n\n")
          flag.PrintDefaults()
      }

      flag.Parse()

      args.arg = flag.Arg(0)

      if args.flag1 == "" || args.flag2 == "" || args.arg == "" {
          flag.CommandLine.Usage()
          os.Exit(1)
      }
      return args
}

func main() {
        args := parseArgs()
        fmt.Printf("Args: %#v\n", args)
}

```

``` {.bash org-language="sh"}
go run main.go -flag1 val1 -flag2 val2 arg
```

# \[2016-12-01 Thu\] Javascript snippets
---
id: javascript-snippets
---

# \[2016-11-27 Sun\] Sydney travel bookmarks
---
id: sydney-travel-bookmarks
---

-   [17 Stunning Sydney Pools That Will Make You Want To Jump Back In The Water](https://www.buzzfeed.com/mikeynicholson/thats-not-a-pool-this-is-a-pool).
-   [48 Hours in Sydney](http://apassionandapassport.com/2015/01/48-hours-sydney-australia/).
-   [Bourke Street Bakery](http://bourkestreetbakery.com.au/).
-   Collector Store (Surrey Hills).
-   [Coogee Pavilion](http://merivale.com.au/coogeepavilion).
-   [Four ate five](http://fouratefive.com/).
-   [Harry's Cafe de Wheels: Famous for Pies and Peas, Meat Pies, Hot Dogs](http://www.harryscafedewheels.com.au/).
-   [Hurricane’s grill & bar Bondi beach](https://www.hurricanesgrillandbar.com.au/bondi-beach/).
-   [Lox Stock & Barrel](http://loxstockandbarrel.com.au/).
-   [Marigold citymark (dim sum)](http://marigold.com.au).
-   [Reuben Hills](http://www.reubenhills.com.au/about).
-   [Seans](https://seanspanaroma.co/).
-   [Sydney's Best Markets - The Trusted Traveller](http://thetrustedtraveller.com/sydneys-best-markets/).
-   [The eight (dim sum)](http://theeightrestaurant.com.au).
-   [The Glenmore](http://theglenmore.com.au/).
-   [Three Blue Ducks](http://www.threeblueducks.com/).

# \[2016-10-16 Sun\] Laos travel bookmark
---
id: laos-travel-bookmark
---

-   [Best Way to Enjoy Luang Prabang](https://www.youtube.com/watch?v=uImN-P4xh1U).

# \[2016-10-08 Sat\] Singapore travel bookmarks
---
id: singapore-travel-bookmarks
---



-   [Any place to go thrift shopping in Singapore? (Reddit)](https://www.reddit.com/r/singapore/comments/4s5y70/any_place_to_go_thrift_shopping_in_singapore/).
-   East coast lagoon.
-   [Food post on SG](https://twitter.com/visakanv/status/1129373195901915136).
-   [Hillstreet Tai Hwa Pork Noodles: Everybody Queue up!](http://ieatishootipost.sg/tai-hua-bak-chor-mee-everybody-queue-up).
-   [Little India](https://en.wikipedia.org/wiki/Little_India,_Singapore).
-   [More SG spots](https://twitter.com/visakanv/status/1171034065354379264).
-   [Second hand shopping in Singapore](http://thehoneycombers.com/singapore/second-hand-shopping-in-singapoe-best-places-for-thrift-shopping-for-pre-loved-clothes-used-furniture-and-vintage-accessories/).
-   [SG spots](https://twitter.com/visakanv/status/1171037799673262083).
-   [Singapore's best hawker centres - Telegraph](http://www.telegraph.co.uk/travel/picturegalleries/8308524/Singapores-best-hawker-centres.html).
-   [The Insider's Guide to Singapore (SG Magazine Online)](http://sg.asia-city.com/).
-   [Treasure Hunt: 5 Places to thrift in Singapore](http://www.mariefranceasia.com/fashion/serial-shopper/shopping-guide/treasure-hunt-5-places-thrift-singapore-107735.html).
-   [Visakan Veerasamy on Twitter: "what do you know about Singapore?"](https://twitter.com/visakanv/status/1204136302230130688).
-   [What is the best hawker center in singapore? (Reddit)](https://www.reddit.com/r/singapore/comments/5gf0y5/what_is_the_best_hawker_center_in_singapore/).

# \[2016-10-01 Sat\] Cambodia travel bookmarks
---
id: cambodia-travel-bookmarks
---

-   Pub Street (Siem Reap, Cambodia).

# \[2016-10-01 Sat\] New York travel bookmarks
---
id: new-york-travel-bookmarks
---

-   [Best taco joints in New York City - Lonely Planet](https://www.lonelyplanet.com/usa/new-york-city/travel-tips-and-articles/best-taco-joints-in-new-york-city).
-   [Nice and/or fancy restaurant to eat at in brooklyn (Erica Joy's tweet)](https://twitter.com/EricaJoy/status/1079505326922174464).

# \[2016-09-18 Sun\] API design bookmarks
---
id: api-design-bookmarks
---



-   [A bird's eye view on API development](http://blog.madewithlove.be/post/birdseye-view-on-api/).
-   [A Guide to Designing and Building RESTful Web Services with WCF 3.5 (Microsoft)](https://msdn.microsoft.com/en-us/library/dd203052.aspx).
-   [Ask HN: Suggestions for books about API design? \| Hacker News](https://news.ycombinator.com/item?id=24383180).
-   [Best Practices for Designing a Pragmatic RESTful API](http://www.vinaysahni.com/best-practices-for-a-pragmatic-restful-api).
-   [Build APIs You Won't Hate](https://apisyouwonthate.com/).
-   [Designing and Evaluating Reusable Components](https://mollyrocket.com/casey/stream_0028.html).
-   [Harry Moreno \| API Design Link Roundup](http://harrymoreno.com/2016/03/31/API-design-link-roundup.html).
-   [How Do I Make This Hard to Misuse?](https://ozlabs.org/~rusty/index.cgi/tech/2008-03-30.html).
-   [How to Design a Good API and Why it Matters (Google)](http://static.googleusercontent.com/media/research.google.com/en//pubs/archive/32713.pdf).
-   [How To Design A Good API and Why it Matters - YouTube](https://www.youtube.com/watch?v=aAb7hSCtvGw).
-   [How to design API function creating objects](http://sheredom.wordpress.com/2014/08/10/how-to-design-api-function-that-creates-something/): By Neil Henning.
-   [HTTP API Design Guide](https://geemus.gitbooks.io/http-api-design/content/en/index.html).
-   [JSON API — A specification for building APIs in JSON](http://jsonapi.org/).
-   [Microsoft REST API Guidelines](https://github.com/Microsoft/api-guidelines/blob/master/Guidelines.md).
-   [Notes on RESTful APIs (Updated)](http://wooptoo.com/blog/notes-on-restful-apis/).
-   [REST API Documentation Best Practices](https://bocoup.com/weblog/documenting-your-api).
-   [REST API Tutorial](http://www.restapitutorial.com/).
-   [REST+JSON API Design - Best Practices for Developers - YouTube](https://www.youtube.com/watch?v=hdSrT4yjS1g).
-   [RESTful Service Design - UC Berkeley](https://drive.google.com/a/xenodium.com/file/d/0B8qU9uFznmLsUEZ3TEFMbDZQcUE/view).
-   [Rusty's API Design Manifesto](http://sweng.the-davies.net/Home/rustys-api-design-manifesto).
-   [Scott Meyers: The Most Important Design Guideline?](http://www.aristeia.com/Papers/IEEE_Software_JulAug_2004_revised.htm).
-   [Swift.org - API Design Guidelines](https://swift.org/documentation/api-design-guidelines/).
-   [Teach a Dog to REST](http://www.slideshare.net/landlessness/teach-a-dog-to-rest).
-   [The Best API Documentation](https://bradfults.com/the-best-api-documentation-b9e46400379a#.a7k8edhyc).
-   [The Little Manual of API Design (Jasmin Blanchette, Trolltech)](http://www4.in.tum.de/~blanchet/api-design.pdf).
-   [Web API Design - Crafting interfaces that developers love](https://drive.google.com/a/xenodium.com/file/d/0B8qU9uFznmLsdFBHS1I2c1ZLRkE/view).
-   [Write code that is easy to delete, not easy to extend](http://programmingisterrible.com/post/139222674273/write-code-that-is-easy-to-delete-not-easy-to).

# \[2016-09-18 Sun\] Handy pdf utilities
---
id: handy-pdf-utilities
---

Straight out of [How (and why) I made a zine](http://jvns.ca/blog/2016/08/29/how-i-made-a-zine), some handy utilities for generating pdfs…

## Convert pngs to pdfs

``` {.bash org-language="sh"}
# start with a bunch of PNG images of your zine pages
# convert them all to PDF
for i in *.png
   do
      # imagemagick is the best thing in the world
      convert $i $i.pdf
   done
```

## Combine pdfs

Combine pdfs using pdftk:

``` {.bash org-language="sh"}
pdftk *.pdf cat output zine.pdf
```

Combine pdfs using poppler:

``` {.bash org-language="sh"}
pdf unite PDF1.pdf PDF2.pdf PDF3.pdf
```

## Reorder pdf pages

``` {.bash org-language="sh"}
# pdfmod is a GUI that lets you reorder pages
pdfmod zine.pdf
```

## Add margins to pdf

``` {.bash org-language="sh"}
# pdfcrop lets you add margins to the pdf. this is good because otherwise the
# printer will cut off stuff at the edges
pdfcrop --margin '29 29 29 29' zine.pdf zine-intermediate.pdf
```

## Turn pdf into booklet

``` {.bash org-language="sh"}
# pdfjam is this wizard tool that lets you take a normal ordered pdf and turn
# it into something you can print as a booklet on a regular printer.
# no more worrying about photocopying machines
pdfjam --booklet true --landscape --suffix book --letterpaper --signature 12 --booklet true --landscape zine-intermediate.pdf -o zine-booklet.pdf
```

# \[2016-09-15 Thu\] Fuzzy search Emacs compile history
---
id: fuzzy-search-emacs-compile-history
---

I wrote about [searching bash history with Emacs Helm](#search-bash-history-with-emacs-helm) some time ago. Since then, I've learned about *completing-read* to generically handle simple Emacs completions (very handy for supporting Helm, Ivy, and Ido completions).

Here's a simple way to combine *completing-read* and the *compile* command to enable fuzzy searching your compile history:

![](https://xenodium.github.io/images/fuzzy-search-emacs-compile-history/fuzzy_compile.gif)

``` {.commonlisp org-language="emacs-lisp"}
(defun ar/compile-completing ()
  "Compile with completing options."
  (interactive)
  (let ((compile-command (completing-read "Compile command: " compile-history)))
    (compile compile-command)
    (add-to-list 'compile-history compile-command)))
```

# \[2016-09-05 Mon\] Jumping on the Emacs 25 bandwagon
---
id: jumping-on-emacs-25-bandwagon
---

Can't miss out on all the new fun. Emacs 25 RC2 is out and lots of people already using it. Since I'm mostly on MacOS these days, installing via homebrew with –devel, gets you RC2:

``` {.bash org-language="sh"}
brew install emacs --devel --with-cocoa --with-gnutls --with-librsvg --with-imagemagick
```

![](https://xenodium.github.io/images/jumping-on-emacs-25-bandwagon/emacs25.png)

The only hiccup so far's been org mode failing to export, which was fixed by re-installing it (follow [this thread](https://lists.gnu.org/archive/html/emacs-orgmode/2015-08/msg00320.html)).

# \[2016-07-31 Sun\] San Francisco's Mission District travel bookmarks
---
id: san-franciscos-mission-district-travel-bookmarks
---

-   Atlas Cafe.
-   Blue Bottle Coffee.
-   Cafe la Boheme.
-   [Clarion Alley](https://en.wikipedia.org/wiki/Clarion_Alley).
-   Coffee Bar.
-   Dynamo donut & coffee.
-   Four Barrel Coffee.
-   Grand Coffee.
-   Haus Coffee.
-   Kafe 99.
-   Linea cafe.
-   Mission skateboards.
-   pNakamoto's Bitcoin shop.
-   Philz Coffee.
-   Ritual Coffee roasters.
-   Rodger's coffee & tea.
-   Sightglass Coffee.
-   Stable Cafe.
-   Sugar lump coffee lounge.

# \[2016-07-25 Mon\] Moscow travel bookmarks
---
id: moscow-travel-bookmarks
---



-   [Drюzhivago (restaurant)](http://www.drzhivago.ru/en/).
-   [Gorky park](http://park-gorkogo.com/).
-   [Hotel Peking](https://twitter.com/archpng/status/1180991886674321408).
-   [Izmailovo](http://www.kremlin-izmailovo.com/o-kremle/kreml-segodnja).
-   [Kolomenskoe (park)](http://mgomz.com/).
-   [Kremlin](http://www.kreml.ru/en-Us/museums-moscow-kremlin).
-   [Kuskovo (park)](http://kuskovo.ru/en).
-   [Mariinsky (see ballet or opera)](https://www.mariinsky.ru/en/).
-   [Moskow times (check for events)](https://themoscowtimes.com/).
-   [Strelka (lectures, cocktails and dances)](http://strelka.com/en/bar).
-   [Tarasbulba (food)](https://www.tarasbulba.ru/main-menu.html).
-   [Tsaritsyno park](http://www.tsaritsyno-museum.ru/index.php?lang=en).

# \[2016-07-24 Sun\] Vietnam travel bookmarks
---
id: vietnam-travel-bookmarks
---



-   Can Ba Quan
    -   Nikki Tren.
    -   Vietnamese Cajun.
-   [Exploring Vietnam's remote Con Dao Islands](https://www.lonelyplanet.com/vietnam/con-son/travel-tips-and-articles/exploring-vietnams-remote-con-dao-islands).
-   [Hoi An, Vietnam- Travel guide](https://www.vietnamonline.com/destination/hoi-an.html).
-   [List of Locations: Somebody Feed Phil - Ho Chi Minh City, Vietnam](http://www.weloveeattravel.com/list-locations-somebody-feed-phil-saigon-vietnam/).
-   Pho Bo Phu Gia
    -   DC: 146K LY Chinh Thang.
    -   0908 208 866.
-   Simon Standly and Vin Dao (food journalists)
-   [Somebody Feed Phil, List of Locations: Ho Chi Minh City](http://www.weloveeattravel.com/list-locations-somebody-feed-phil-saigon-vietnam/).
-   Thuc Pham Duc Viet
    -   Bahn Mi
    -   Pate Bu Cha
    -   Nhan Dat Bi Cha
-   [Another favorite bookstore - Bookworm Hanoi \| The Saigon boy](https://saigonboy.me/another-favorite-bookstore-bookworm-hanoi)

# \[2016-07-19 Tue\] Pokémon Go bookmarks
---
id: pokemon-go-bookmarks
---



-   [Pokémon GO Lengthy Introduction Guide (Reddit)](https://www.reddit.com/r/pokemon/comments/4ruand/pok%25C3%25A9mon_go_lengthy_introduction_guide).
-   [Pokémon locations](https://rankedboost.com/pokemon-go/catching-locations/).
-   [Some tips from my last days playing (Reddit)](https://www.reddit.com/r/pokemongo/comments/4rlnmc/some_tips_from_my_last_days_playing).
-   [Yet another "Tips and Tricks" from a level 20+ (Reddit)](https://www.reddit.com/r/pokemongo/comments/4srsiu/yet_another_tips_and_tricks_from_a_level_20).

# \[2016-07-03 Sun\] Coffee bookmarks
---
id: coffee-bookmarks
---

-   [Changes properties of coffee brew during roasting](http://www.idosi.org/wasj/wasj2(5)/17.pdf).
-   [Aeropress Iced Coffee](http://www.coffeegeek.com/guides/aeropresscoldbrew).

# \[2016-07-03 Sun\] Machine learning bookmarks
---
id: machine-learning-bookmarks
---



-   [A Course in Machine Learning (Hacker News)](https://news.ycombinator.com/item?id=12083124).
-   [How to start learning deep learning (Hacker News)](https://news.ycombinator.com/item?id=11985709).
-   [How to start learning deep learning](http://ofir.io/How-to-Start-Learning-Deep-Learning).
-   [Machine Learning is Fun! The world’s easiest introduction to Machine Learning](https://medium.com/@ageitgey/machine-learning-is-fun-80ea3ec3c471#.tg3yzvbep).
-   [Practical Deep Learning for Coders 2019 (Hacker News)](https://news.ycombinator.com/item?id=19000027).
-   [What are the best ways to pick up Deep Learning skills as an engineer? (Quora)](https://www.quora.com/What-are-the-best-ways-to-pick-up-Deep-Learning-skills-as-an-engineer/answer/Greg-Brockman?srid=cgo&share=d1ac0da2).

# \[2016-06-17 Fri\] Emacs and emotional vocab
---
id: emacs-and-emotional-vocab
---

Having read [Are You in Despair? That’s Good](http://www.nytimes.com/2016/06/05/opinion/sunday/are-you-in-despair-thats-good.html), I was encouraged to expand my emotional vocabulary. As a [zone.el](https://github.com/emacs-mirror/emacs/blob/master/lisp/play/zone.el) fan (checkout [nyan](https://github.com/wasamasa/zone-nyan), [sl](https://github.com/kawabata/zone-sl), and [rainbow](https://github.com/kawabata/zone-rainbow)), I looked into writing a zone [program](https://github.com/emacs-mirror/emacs/blob/master/lisp/play/zone.el#L52). When *zone-when-idle* is set, zone acts as a screensaver of sorts. We can use this to display random emotional vocab whenever Emacs is idle for a period of time. Let's get to it…

Zone keeps a list of programs to choose from when kicked off. Below is a basic *zone-hello* program, along with an interactive command for previewing. Not much to these. The tiny program prepares the screen for zoning and inserts text while no input is pending.

``` {.commonlisp org-language="emacs-lisp"}
(defun zone-hello ()
  (delete-other-windows)
  (setq mode-line-format nil)
  (zone-fill-out-screen (window-width) (window-height))
  (delete-region (point-min) (point-max))
  (goto-char (point-min))
  (while (not (input-pending-p))
    (insert "hello zone\n")
    (zone-park/sit-for (point-min) 0.2)))

(defun zone-hello-preview ()
  (interactive)
  (let ((zone-programs [zone-hello]))
    (zone)))
```

Here's what *zone-hello* looks like:

![](https://xenodium.github.io/images/emacs-and-emotional-vocab/minimal-zone.gif)

Back to improving our emotional vocabulary, we'll need a dictionary for our goal. A quick search yields a potential list of [words](http://www.psychpage.com/learning/library/assess/feelings.html). We can use [WordNet](http://wordnet.princeton.edu/) to define them while offline. These two sources will do for now. We tie it all together in [zone-words.el](https://github.com/xenodium/dotfiles/blob/master/emacs/ar/zone-words.el) and the resulting zone program looks as follow:

![](https://xenodium.github.io/images/emacs-and-emotional-vocab/emotions.gif)

UPDATE: Just came across [Animations With Emacs](http://blog.josephwilk.net/art/emacs-animation.html). A post with awesome zone examples.

# \[2016-05-10 Tue\] Emacs: Find number of days between dates
---
id: emacs-find-number-of-days-between-dates
---

Needed to find the number of days between two dates. Emacs calendar must know this…

-   Fire up the manual (M-x info-emacs-manual or C-h r).
-   Info-goto-node (or g).
-   Type "counting days" and voilá:

> To determine the number of days in a range, set the mark on one date using \`C-\<SPC\>', move point to another date, and type \`M-=' (\`calendar-count-days-region'). The numbers of days shown is [inclusive]{.underline}; that is, it includes the days specified by mark and point.

![](https://xenodium.github.io/images/emacs-find-number-of-days-between-dates/emacs-days-between-dates.gif)

*Note: you can use the mouse to jump to another date, or "g d" (calendar-goto-date).*

# \[2016-05-08 Sun\] RoutingHTTPServer snippet
---
id: routinghttpserver-snippet
---

[RoutingHTTPServer](https://github.com/mattstevens/RoutingHTTPServer) snippet:

``` objc
RoutingHTTPServer *routingHTTPServer = [[RoutingHTTPServer alloc] init];
[routingHTTPServer setPort:8000];
[routingHTTPServer setDefaultHeader:@"Server" value:@"YourAwesomeApp/1.0"];
[routingHTTPServer handleMethod:@"GET"
                       withPath:@"/hello"
                          block:^(RouteRequest *request, RouteResponse *response) {
    [response setHeader:@"Content-Type" value:@"text/plain"];
    [response respondWithString:@"Hello!"];
  }];
NSError *error = nil;
if (![routingHTTPServer start:&error]) {
  NSLog(@"Error starting HTTP Server: %@\n", error);
 }
```

# \[2016-05-06 Fri\] Alaska travel bookmarks
---
id: alaska-travel-bookmarks
---

-   Anchorage.
-   Denali NP.
-   Exit Glacier / Kenai Fjord NP.
-   Ice Falls Hike.
-   Iditarod race husky camp.
-   Seward: Kenai Fjord Wildlife cruise (Major Marine cruises).
-   Talkeetna fishing.

# \[2016-05-06 Fri\] UIViewController bookmarks
---
id: uiviewcontroller-bookmarks
---

-   [What's your number one tip for avoiding massive view controllers?](https://twitter.com/twostraws/status/1035193619307618304).
-   [8 Patterns to Help You Destroy Massive View Controller](http://khanlou.com/2014/09/8-patterns-to-help-you-destroy-massive-view-controller/).
-   [Blending Cultures: The Best of Functional, Protocol-Oriented, and Object-Oriented Programming](https://realm.io/news/tryswift-daniel-steinberg-blending-cultures/).
-   [Dan Abramov - Live React: Hot Reloading with Time Travel](https://www.youtube.com/watch?v=xsSnOQynTHs&feature=youtu.be).
-   [Comparing Reactive and Traditional](http://inessential.com/2016/04/08/comparing_reactive_and_traditional).
-   [ReSwift: Getting Started](http://reswift.github.io/ReSwift/master/getting-started-guide.html).
-   [StateView is a UIView substitute that automatically updates itself when data changes](https://github.com/sahandnayebaziz/StateView/blob/master/readme.md).
-   [The Objective-C version to "Comparing Reactive and Traditional"](http://inessential.com/2016/04/11/the_objective-c_version).
-   [Let's Play: Refactor the Mega Controller!](https://realm.io/news/andy-matuschak-refactor-mega-controller).
-   [How to use Redux to manage navigation state in a React Native](https://github.com/jlyman/RN-NavigationExperimental-Redux-Example).
-   [StateView: UIView substitute automatically updating itself when data changes.](https://github.com/sahandnayebaziz/StateView)
-   [Mysteries of Auto Layout, Part 2](https://developer.apple.com/videos/play/wwdc2015/219/).
-   [Netflix JavaScript Talks - RxJS Version 5](https://www.youtube.com/watch?v=COviCoUtwx4).
-   [Reactive Streams](http://www.reactive-streams.org).

# \[2016-05-03 Tue\] When OOO impulse kicks in…
---
id: when-ooo-impulse-kicks-in
---

-   You start moving trivial bits of code into classes, with the anticipation that you might use it one day. Stop.
-   On naming, semantic clarity trumps brevity. Yup, the verbosity may be worth it.

# \[2016-05-02 Mon\] Pakistan travel bookmarks
---
id: pakistan-travel-bookmarks
---



-   [How Philly Cheesesteaks Became a Big Deal in Lahore, Pakistan](https://www.phillymag.com/news/2023/04/08/philly-cheesesteaks-lahore-pakistan/).
-   Karachi.
-   Lahore.
-   Rabelpindi.
-   Shinwari BBQ.

# \[2016-05-02 Mon\] Money bookmarks
---
id: money-bookmarks
---



-   [10 Countries Where That Social Security Check Will Let You Retire in Style (TheStreet)](https://www.thestreet.com/slideshow/13552416/1/10-countries-where-that-social-security-check-will-let-you-retire-in-style.html).
-   [20 items to consider for taxes: Income Tax, Council Tax, and Inheritance Tax (lovemoney.com)](https://www.lovemoney.com/guides/75277/tax-relief-return-cut-your-income-tax-capital-gains-tax-inheritance-tax).
-   [25 Bloggers Share The Worst Financial Advice They've Ever Received - Be Net Worthy](https://www.benetworthy.com/worst-financial-advice/).
-   [25 y/o. Potentially £2m. Bit overwhelmed. : UKPersonalFinance](https://www.reddit.com/r/UKPersonalFinance/comments/7o3o06/25_yo_potentially=_2m_bit_overwhelmed/).
-   [9 Best New Personal Finance Podcasts - Financial Panther](https://financialpanther.com/9-best-personal-finance-podcasts/).
-   [A guide to index funds : UKPersonalFinance](https://www.reddit.com/r/UKPersonalFinance/comments/cdjdui/a_guide_to_index_funds/).
-   [A guide to passive investing in the UK](http://monevator.com/category/investing/passive-investing-investing/).
-   [A Simple Example of Contributing Half Your Age as a Percentage of Salary to a Pension : UKPersonalFinance](https://www.reddit.com/r/UKPersonalFinance/comments/aq5ss6/a_simple_example_of_contributing_half_your_age_as/).
-   [AdviserBook \| Find a regulated financial adviser near you](https://adviserbook.co.uk/).
-   [Amazon.com: How to Interview a Financial Advisor eBook: Piaw Na: Kindle Store](https://www.amazon.com/How-Interview-Financial-Advisor-Piaw-ebook/dp/B00GXDT9LY).
-   [Any critique against the Vanguard FTSE global all cap index? : UKPersonalFinance](https://www.reddit.com/r/UKPersonalFinance/comments/9edd3m/any_critique_against_the_vanguard_ftse_global_all/).
-   [Authorised and recognised funds (FCA)](https://www.fca.org.uk/firms/authorised-recognised-funds).
-   [Bank Account Savings: Open up multiple accounts to maximise your savings](https://www.bankaccountsavings.co.uk/calculator).
-   [Benefit Calculator - About You - Turn2us](https://benefits-calculator.turn2us.org.uk/AboutYou).
-   [Best practices for portfolio rebalancing (Vanguard research July 2010)](https://www.vanguard.com/pdf/icrpr.pdf).
-   [Best practices for portfolio rebalancing (Vanguard)](https://www.vanguard.com/pdf/ISGPORE.pdf).
-   [Bogleheads® investment philosophy - Bogleheads](https://www.bogleheads.org/wiki/Bogleheads%C2%AE_investment_philosophy).
-   [Borderless account pricing: What are the fees? - TransferWise](https://transferwise.com/us/borderless/pricing).
-   [Buy-to-Let Rental Yield Map 2019 - TotallyMoney](https://www.totallymoney.com/buy-to-let-yield-map/).
-   [Bye Yahoo, and thanks for all the fish (The Financial Hacker) - See comments for alternatives](https://www.financial-hacker.com/bye-yahoo-and-thank-you-for-the-fish/).
-   [Calculating Your Portfolio’s Rate of Return](https://canadiancouchpotato.com/2015/07/13/calculating-your-portfolios-rate-of-return/).
-   [Can I open a LISA and a Private Pension (Vanguard LifeStrategy)?](https://www.reddit.com/r/UKPersonalFinance/comments/9exrhv/can_i_open_a_lisa_and_a_private_pension_vanguard/).
-   [Capital Gains Tax for Expats - Experts for Expats](https://www.expertsforexpats.com/expat-tax/capital-gains-tax-for-british-expats).
-   [cFIREsim](https://cfiresim.com/).
-   [Cheapest way to pay for a yearly USD subscription in the UK : UKPersonalFinance](https://www.reddit.com/r/UKPersonalFinance/comments/gsvt3r/cheapest_way_to_pay_for_a_yearly_usd_subscription/).
-   [Check if you need to send a Self Assessment tax return - GOV.UK](https://www.gov.uk/check-if-you-need-tax-return).
-   [Check the recognised overseas pension schemes notification list - GOV.UK](https://www.gov.uk/guidance/check-the-recognised-overseas-pension-schemes-notification-list).
-   [ChooseFI (Join the Financial Independence Movement)](https://www.choosefi.com).
-   [Citizens Advice](https://www.citizensadvice.org.uk/).
-   [Codementor (Get live 1:1 coding help, hire a developer, & more)](https://www.codementor.io/).
-   [Coursera (Online Courses From Top Universities. Join for Free)](https://www.coursera.org/learn/financial-markets-global/reviews).
-   [Crowdsourced Financial Independence and Early Retirement Simulator/Calculator](http://www.cfiresim.com/).
-   [Crystal's Quora answer to becoming a millionaire (full sensible/conservative advice) ](https://qr.ae/TUK1OD).
-   [Don't Steal Money from Day Traders Before They Lose It (Hacker News)](https://news.ycombinator.com/item?id=17930318).
-   [EricaJoy on Twitter: what is the process for finding a financial advisor/accountant/etc](https://twitter.com/ericajoy/status/1057774364181987328?s=12).
-   [ETF portfolios made simple (justETF)](https://www.justetf.com/de-en/).
-   [EU investing - Bogleheads](https://www.bogleheads.org/wiki/EU_investing).
-   [European active managers beaten by passives, 10-year study finds (Financial Times)](https://www.ft.com/content/c6183f2f-f58a-3569-a6ac-9d2b44adfe28).
-   [Fin-dee (FIRE calculator)](https://app.fin-dee.com/).
-   [Finance and capital markets \| Economics and finance \| Khan Academy](https://www.khanacademy.org/economics-finance-domain/core-finance).
-   [Financial education book for teenagers by Martin Lewis : UKPersonalFinance](https://www.reddit.com/r/UKPersonalFinance/comments/9viifz/financial_education_book_for_teenagers_by_martin/).
-   [Financial Independence Podcast](https://www.madfientist.com/podcast).
-   [Financial Independence Retiring Early UK (r/fireuk)](https://www.reddit.com/r/FIREUK/).
-   [Financial independence/retire early in Europe (reddit)](https://www.reddit.com/r/EuropeFIRE).
-   [Financial Samurai png (typical reasons to sell assets in short term = bad idea long term)](https://www.financialsamurai.com/wp-content/uploads/2018/08/reasons-to-sell.jpg).
-   [Find an Adviser](https://www.thepfs.org/yourmoney/find-an-adviser/).
-   [Find Top-Rated Financial Advisers, Mortgage Advisers, Solicitors and Accountants](https://www.vouchedfor.co.uk/).
-   [FIRECalc: A different kind of retirement calculator](https://firecalc.com/).
-   [Fund Charting – top-performing funds](https://www.moneymarketing.co.uk/fund-charting-2/).
-   [Fund managers rarely outperform the market for long - Buttonwood #passive-over-active](https://www.economist.com/finance-and-economics/2017/06/24/fund-managers-rarely-outperform-the-market-for-long).
-   [Global All Cap VS Small Cap - first time 24 Male : UKPersonalFinance](https://www.reddit.com/r/UKPersonalFinance/comments/9n0636/investing_global_=all_cap_vs_small_cap_first_time/).
-   [globaltracker - UKPersonalFinance](https://www.reddit.com/r/UKPersonalFinance/wiki/globaltracker).
-   [How do I take a wage from my vanguard lifestrategy fund](https://www.reddit.com/r/Bogleheads/comments/gvxawv/how_do_i_take_a_wage_from_my_vanguard/).
-   [How does AQR Capital compare with Two Sigma? - Quora](https://www.quora.com/How-does-AQR-Capital-compare-with-Two-Sigma).
-   [How I built a six figure passive income by age 47](https://smartersquirrel.com/how-i-built-a-six-figure-passive-income-by-age-47).
-   [How I paid off £5000 of consumer debt in 5 months – URBANPLANNED](https://urbanplanned.wordpress.com/2018/08/05/how-i-paid-off-5000-of-consumer-debt-in-5-months/).
-   [How much more expensive do kids get as they get older? : UKPersonalFinance](https://www.reddit.com/r/UKPersonalFinance/comments/elr5qp/how_much_more_expensive_do_kids_get_as_they_get/).
-   [How to become rich by investing: rational Investing Based on Evidence vs Speculation](https://adamfayed.com/2018/06/26/howtobecomerichbyinvesting/).
-   [How to buy your first house for dummies : UKPersonalFinance](https://www.reddit.com/r/UKPersonalFinance/comments/cvfkr3/how_to_buy_your_first_house_for_dummies/).
-   [How to work out what the tax will be on my bonus?](https://moneytothemasses.com/tax/income-tax-2/reader-question-whats-the-easiest-way-to-work-out-how-much-my-bonus-will-be-taxed).
-   [I have £x, what should I do with with it? - UKPersonalFinance Wiki](https://ukpersonal.finance/windfall/).
-   [IAMA 24yo selling my company for £500,000 - need serious advice. : UKPersonalFinance](https://www.reddit.com/r/UKPersonalFinance/comments/aickhc/iama_24yo_selling_my_company_for_500000_need/).
-   [Income tax calculator: Find out your take-home pay](https://www.moneysavingexpert.com/tax-calculator/).
-   [Index Funds - UKPersonalFinance Wiki](https://ukpersonal.finance/index-funds/).
-   [Index Trackers vs. Managed Funds \| The Motley Fool UK #passive-over-active](https://www.fool.co.uk/investing-basics/isas-and-investment-funds/index-trackers-vs-managed-funds/).
-   [Invaluable Books - Cashflow Cop](https://cashflowcop.com/invaluable-books/).
-   [Investing 101 - UKPersonalFinance Wiki](https://ukpersonal.finance/investing-101/).
-   [Investing in gold](https://www.youtube.com/watch).
-   [Investment for beginners](https://www.moneysavingexpert.com/savings/investment-beginners/).
-   [Investment Jargon Putting Me Off : UKPersonalFinance](https://www.reddit.com/r/UKPersonalFinance/comments/f377un/investment_jargon_putting_me_off/).
-   [Is BTL still worth it? : UKPersonalFinance](https://www.reddit.com/r/UKPersonalFinance/comments/9oz32t/is_btl_still_worth_it/).
-   [ISA allowance: ISA limits & rules - MoneySavingExpert](https://www.moneysavingexpert.com/savings/ISA-guide-savings-without-tax/).
-   [jlcollinsnh](https://jlcollinsnh.com/).
-   [Killik Explains: A short guide to personal pensions (SIPPs) - YouTube](https://www.youtube.com/watch?v=WsWLPhVvPaQ).
-   [Killik Explains: Retirement Saving - Lifetime ISAs vs Pensions - YouTube](https://www.youtube.com/watch?v=uUtSdTaiLCE).
-   [LifeStrategy® 100 vs FTSE Global All Cap Index Fund – What are the differences?](https://frugalfoxes.home.blog/2019/01/15/lifestrategy-100-vs-ftse-global-all-cap-index-fund-what-are-the-differences).
-   [Lifetime ISAs: free 1000 towards your first home or retirement](https://www.moneysavingexpert.com/savings/lifetime-ISAs/).
-   [Lifetime ISAs: free £33,000 towards your first home or retirement](https://www.moneysavingexpert.com/savings/lifetime-ISAs/).
-   [Low cost index trackers that will save you money (Monevator)](http://monevator.com/low-cost-index-trackers/).
-   [Mad Fientist: Financial Independence Podcast](https://www.madfientist.com/podcast).
-   [Managing a windfall - Bogleheads](https://www.bogleheads.org/wiki/Managing_a_windfall).
-   [Meet The FIREstarter! - theFIREstarter](http://thefirestarter.co.uk/meet-the-firestarter/).
-   [Millennial Money (Next Generation Personal Finance)](https://millennialmoney.com/).
-   [Mom's Rules of Finance (Workforce Millionaire - Investing in Your Future)](https://www.workforcemillionaire.com/moms-rules-of-finance/).
-   [Monevator — Make more money, invest profitably, retire early](http://monevator.com/).
-   [Monevator: Compare the UK’s cheapest online brokers](http://monevator.com/compare-uk-cheapest-online-brokers/).
-   [Money transfer: compare ways to send money online with Monito](https://www.monito.com/).
-   [Monolune (trading tools, articles)](https://www.monolune.com/).
-   [Monthly Savings Juggler](https://dstockhammer.github.io/monthly-savings-juggler/).
-   [Morningstar® Integrated Web Tools™ - Instant X-Ray](http://tools.morningstar.co.uk/uk/xray/editholdings.aspx?LanguageId=en-GB).
-   [Mortgages - UKPersonalFinance Wiki](https://ukpersonal.finance/mortgages/).
-   [Mr. Money Mustache — Early Retirement through Badassity](http://www.mrmoneymustache.com/).
-   [National Savings and Investments NS&I](https://www.nsandi.com).
-   [NDAQ Stock Quote - Nasdaq, Inc. Common Stock Price - Nasdaq](https://www.nasdaq.com/symbol/).
-   [Overseas mortgages: everything you need to know](https://www.telegraph.co.uk/money/transferwise/overseas-mortgages/).
-   [Parking Ticket Appeals: Fight unfair fines - Money Saving Expert](https://www.moneysavingexpert.com/reclaim/parking-ticket-appeals/).
-   [Paying missing UK national insurance contributions - good for FIRE?](https://www.reddit.com/r/FIREUK/comments/1d0w438/paying_missing_uk_national_insurance/).
-   [Personal Finance Flowchart (github)](https://marcusmichaels.github.io/personal-finance-flowchart).
-   [Personal Savings Allowance 2018/19 - up to £1,000 interest tax-free](https://www.moneysavingexpert.com/savings/personal-savings-allowance/).
-   [Plotted my income and outgoings](https://imgur.com/ZBaOGJj).
-   [Portfolio Performance (crossplatform app)](https://www.portfolio-performance.info/portfolio/).
-   [Post-Retirement Calculator: Will My Money Survive Early Retirement? Visualizing Longevity Risk - Engaging Data](http://engaging-data.com/will-money-last-retire-early/).
-   [Premium Bond Probability Calculator](https://www.moneysavingexpert.com/savings/premium-bonds-calculator/).
-   [Premium Bonds: are they worth it? - MoneySavingExpert](https://www.moneysavingexpert.com/savings/premium-bonds/).
-   [Purchasing a new property with a baby on the way..? : UKPersonalFinance](https://www.reddit.com/r/UKPersonalFinance/comments/aopvqe/purchasing_a_new_property_with_a_baby_on_the_way/).
-   [rebo - Portfolio management software for UK private investors](https://reboapp.co.uk/).
-   [Reddit Personal Finance Flowchart (interactive)](https://marcusmichaels.github.io/personal-finance-flowchart/).
-   [Remortgaging in 2019 - is now the right time to fix & for how long? - Money To The Masses](https://moneytothemasses.com/owning-a-home/mortgages/should-you-fix-your-mortgage-now).
-   [Rockstar Finance (Curating the best of money and personal finance)](https://rockstarfinance.com/).
-   [Rockstar Finance's Directory of Bloggers](https://directory.rockstarfinance.com/personal-finance-blogs).
-   [Safe withdrawal rate (morningstar)](http://media.morningstar.com/uk/MEDIA/Comprehensive_update_on_the_Safe_Withdrawal_Rate.pdf).
-   [Salary Negotiation: Make More Money, Be More Valued \| Kalzumeus Software](https://www.kalzumeus.com/2012/01/23/salary-negotiation/).
-   [SankeyMATIC (BETA): Build a diagram (redditor expenses/wages)](http://sankeymatic.com/build/).
-   [Saving Ninja: What Platform to Use Now? (iWeb vs Charles Stanley vs Halifax share dealing vs Aviva vs Vanguard Investor)](https://thesavingninja.com/sipp-and-isa-fee-comparison/).
-   [Savings accounts: 1.5% easy access or up to 2.7% fixed](https://www.moneysavingexpert.com/savings/savings-accounts-best-interest/).
-   [So, you want to be a landlord?? : financialindependence](https://www.reddit.com/r/financialindependence/comments/9bhg0j/so_you_want_to_be_a_landlord/).
-   [Started my dream job and now I am pregnant : UKPersonalFinance](https://www.reddit.com/r/UKPersonalFinance/comments/eki7yt/started_my_dream_job_and_now_i_am_pregnant/).
-   [Starting Late But Retiring Rich: The Story Of Stephen And Becky ChooseFI](https://www.choosefi.com/starting-late-but-retiring-rich/).
-   [Stocks & shares ISAs: find the best platform - MSE](https://www.moneysavingexpert.com/savings/stocks-shares-isas/).
-   [Stocks — Part XXI: Investing with Vanguard for Europeans](https://jlcollinsnh.com/2014/01/27/stocks-part-xxi-investing-with-vanguard-for-europeans/).
-   [Tax rates 2018/19: tax bands explained - MoneySavingExpert](https://www.moneysavingexpert.com/banking/tax-rates/#rate).
-   [Tax rates 2018/19: tax bands explained - MoneySavingExpert](https://www.moneysavingexpert.com/banking/tax-rates/).
-   [The 10 Pillars Of FI ChooseFI](https://www.choosefi.com/10-pillars-of-fi/).
-   [The Escape Artist (You can escape to financial freedom)](https://theescapeartist.me).
-   [The Financial Hacker &#8211; A new view on algorithmic trading](https://www.financial-hacker.com/).
-   [The Lemon Fool (Discussion forums for UK shares, Personal Finance and Investment)](https://www.lemonfool.co.uk/).
-   [The Rise Of Stealth Wealth](https://www.financialsamurai.com/the-rise-of-stealth-wealth-guide-to-staying-invisible-from-society-rage/).
-   [The world according to fleet-float equity market capitilization](https://i.imgur.com/Qi3rF3S.png).
-   [Tim Bennett Explains: Which is best - an ISA or a SIPP? - YouTube](https://www.youtube.com/watch?v=s75GcslrfOE).
-   [Top Cash ISAs: 1.35% easy access, 2.3% fixed - MSE](https://www.moneysavingexpert.com/savings/best-cash-isa/).
-   [UK Financial Planning Week](https://www.cisi.org/cisiweb2/cisi-website/about-us/press-release/2018/09/05/uk-consumers-offered-free-personal-financial-planning-sessions-worth-up-to-500-in-cisi-financial-planning-week-3--10-october-makedreamshappen).
-   [UK Funds FAQ](https://ukpersonal.finance/uk-funds-faq/).
-   UKPersonalFinance redditor quote: "Deprogrammed myself from the zeitgeist of brands/labels. I either buy cheap or I buy quality dependent on application, but in either event I ignore the label."
-   [Understanding your employees' tax codes: What the numbers mean - GOV.UK](https://www.gov.uk/employee-tax-codes/numbers).
-   [United Kingdom \| Countries (FIREhub.eu)](https://firehub.eu/blogs/country/united-kingdom).
-   [Use the Avios Rewards Flight Calculator to plan flights](http://www.avios.com/gb/en_gb/spend/zone-map?from=flightSearch).
-   [Vanguard FTSE Global All Cap Index A Acc GBP (trustnet)](https://www.trustnet.com/factsheets/o/ngly/vanguard-ftse-global-all-cap-index).
-   [Vanguard FTSE Global All Cap Index Fund Investor A GBP Accumulation (Morningstar)](http://www.morningstar.co.uk/uk/funds/snapshot/snapshot.aspx?id=F00000XXVV&tab=13).
-   [Vanguard FTSE Global All Cap Index Fund Investor A GBP Accumulation, GB00BD3RZ582:GBP summary - FT.com](https://markets.ft.com/data/funds/tearsheet/summary?s=GB00BD3RZ582:GBP).
-   [Vanguard LifeStrategy 100% Equity A Acc (Trustnet)](https://www.trustnet.com/factsheets/o/acdv/vanguard-lifestrategy-100-equity).
-   [Vanguard LifeStrategy 80% Equity A (Trustnet)](https://www.trustnet.com/factsheets/o/acdt/vanguard-lifestrategy-80-equity).
-   [Vanguard LifeStrategy® Funds](https://www.vanguardinvestor.co.uk/investing-explained/what-are-lifestrategy-funds).
-   [Vanguard: Helping you reach your investing goals \| Vanguard](https://www.vanguardinvestor.co.uk/need-help/answer/whats-a-bed-and-isa-and-how-do-i-do-it).
-   [Vanguard: LifeStrategy® 40% Equity Fund - Accumulation](https://www.vanguardinvestor.co.uk/investments/vanguard-lifestrategy-40-equity-fund-accumulation-shares/portfolio-data).
-   [Vanguard’s simple Pension Calculator](https://www.vanguardinvestor.co.uk/what-we-offer/personal-pension/pension-calculator).
-   [Way Of The Financial Samurai: Core Principles For Financial Independence](https://www.financialsamurai.com/the-way-of-the-financial-samurai-core-principles-for-achieving-financial-independence-and-living-your-best-life/).
-   [What are some good net worth tracking tools? (for the UK) : FIREUK](https://www.reddit.com/r/FIREUK/comments/99ys2d/what_are_some_good_net_worth_tracking_tools_for/).
-   [What Does a Declaration of Trust / Deed of Trust Do?](https://www.co-oplegalservices.co.uk/media-centre/articles-may-aug-2017/what-does-a-declaration-of-trust-do/).
-   [What if You Only Invested at Market Peaks?](https://awealthofcommonsense.com/2014/02/worlds-worst-market-timer/).
-   [What is the smartest financial habit that you have? - Quora](https://www.quora.com/What-is-the-smartest-financial-habit-that-you-have).
-   [Where does export to? (2018) \| OEC - The Observatory of Economic Complexity](https://oec.world/en/visualize/tree_map/hs92/export/gbr/show/all/2018/).
-   [Why a world equity index tracker?](http://monevator.com/why-a-total-world-equity-index-tracker-is-the-only-index-fund-you-need).
-   [Why are most people broke? - Quora](https://www.quora.com/Why-are-most-people-broke).
-   [Why Bond Prices and Yields Move in Opposite Directions](https://www.thebalance.com/why-do-bond-prices-and-yields-move-in-opposite-directions-417082).
-   [Why do we believe that the price of stocks will grow over the long term](https://www.reddit.com/r/UKPersonalFinance/comments/dschqz/why_do_we_believe_that_the_price_of_stocks_will/).
-   [Why Jack Bogle Doesn't Like ETFs (Forbes - YouTube)](https://www.youtube.com/watch?v=zrCo0m5gSfc).
-   [www.stonebanks.co.uk (capital gains calculator)](http://www.stonebanks.co.uk/).
-   [X-O.co.uk - Execution Only Share Dealing (broker)](http://www.x-o.co.uk/).

# \[2016-05-02 Mon\] Scotland travel bookmarks
---
id: scotland-travel-bookmarks
---

-   [The Open Book (AirBnB + a bookshop)](https://www.airbnb.co.uk/rooms/7908227).
-   [Where to eat in Edinburgh? (Twitter)](https://twitter.com/tehbus/status/884464692030308352)

# \[2016-05-02 Mon\] St. Petersburg travel bookmarks
---
id: st-petersburg-travel-bookmarks
---



-   [Faberge Muse](http://fabergemuseum.ru/).
-   [Find a place to eat Koryushka (fried fish)](https://duckduckgo.com/).
-   [Get "Pyshka" at Pyshechnaya in Saint Petersburg: local donut shop with 60 years of history](https://vovanovaque.com/russia/saintpetersburg/pyshechnaya.html).
-   [Hermitage Museum](http://www.hermitagemuseum.org/wps/portal/hermitage/?lng=en).
-   [Savior on the Spilled Blood Church](http://eng.cathedral.ru/spasa_na_krovi/).
-   [Stolle (pie shop)](http://www.stolle.ru/en/menu/saint-petersburg).

# \[2016-05-02 Mon\] 8 week half-marathon training
---
id: 8-week-half-marathon-training
---

An 8-week training schedule:

  WEEK   MON    TUE               WED        THU         FRI    SAT        SUN
  ------ ------ ----------------- ---------- ----------- ------ ---------- -----------------
  1      Rest   5 Km              5 Km       ~~Cycle~~   Rest   5 Km       ~~8 Km~~ 9 Km
                29:56             29:54                         29:45      1:00:55
  2      Rest   7 Km              5 Km       ~~Cycle~~   Rest   5 Km       10 Km
                41:36             27:52                         28:23      59:17
  3      Rest   ~~8 Km~~ 8.1 Km   5 Km       ~~Cycle~~   Rest   5 Km       12 Km
                49:29             29:33                         27:50      1:06
  4      Rest   8 Km              Rest       8 Km        Rest   5 Km       14 Km
                46:39                        49:28              29:40
  5      Rest   8 Km              Rest       ~~8 Km~~    Rest   ~~6 Km~~   ~~16 Km~~ 10 Km
                48:50                                                      53:38
  6      Rest   ~~8 Km~~          ~~8 Km~~   8 Km        Rest   8 Km       19 Km
                                             51:39              37:09      2:02
  7      Rest   8 Km              Rest       12 Km       Rest   8 Km       16 Km
                52:55
  8      Rest   8 Km              Rest       5 Km        5 K    Rest       Race


# \[2016-05-02 Mon\] Haskell bookmarks
---
id: haskell-bookmarks
---



-   [A gentle introduction to profunctors talk](https://twitter.com/argumatronic/status/1006583364265152513?s=12).
-   [A Haskell Reading List (Hacker News)](https://news.ycombinator.com/item?id=11606290).
-   [A Haskell Reading List](http://www.stephendiehl.com/posts/essential_haskell.html).
-   [Advice for Haskell beginners (2017) (Hacker News)](https://news.ycombinator.com/item?id=17818295).
-   [An opinionated guide to Haskell in 2018](https://lexi-lambda.github.io/blog/2018/02/10/an-opinionated-guide-to-haskell-in-2018/).
-   [Haskell Programming: From First Principles](https://www.goodreads.com/book/show/25587599-haskell-programming).
-   [Haskell's kind system - a primer](https://diogocastro.com/blog/2018/10/17/haskells-kind-system-a-primer/).
-   [Higher order functions](http://learnyouahaskell.com/higher-order-functions).
-   [Intero: Complete interactive development program for Haskell](https://github.com/commercialhaskell/intero).
-   [Introduction to higher-order functions](http://people.cs.aau.dk/~normark/prog3-03/html/notes/higher-order-fu_themes-intr-section.html).
-   [Pragmatic Haskell for Beginners, Lecture 1](https://begriffs.com/posts/2016-05-14-pragmatic-haskell-1.html).
-   [Renzo Carbonara (Hackage)](https://hackage.haskell.org/user/RenzoCarbonara).

# \[2016-04-17 Sun\] Haskell notes
---
id: haskell-notes
---

## Referential transparency

An expression consistently evaluating to the same result, regardless of context.

## References

-   [learnyouahaskell.com](http://learnyouahaskell.com/).
-   [wiki.haskell.org](https://wiki.haskell.org).

# \[2016-03-28 Mon\] Emacs Objective-C tagging with RTags
---
id: emacs-objective-c-tagging-with-rtags
---

## Install libclang on Mac

``` {.bash org-language="sh"}
brew install llvm --with-clang
```

## Install RTags

``` {.bash org-language="sh"}
git clone --recursive https://github.com/Andersbakken/rtags.git
cd rtags
cmake -DCMAKE_PREFIX_PATH=/Users/your-user-name/homebrew/opt/llvm -DCMAKE_EXPORT_COMPILE_COMMANDS=1 .
make
```

## Start RTags daemon

``` {.bash org-language="sh"}
path/to/rtags/bin/rdm 2> /tmp/rdm.log
```

## Compilation database

### Install xctool

``` {.bash org-language="sh"}
brew install xctool
```

### Generate a compilation database

``` {.bash org-language="sh"}
cd path/to/your/objc-project
xctool -sdk iphonesimulator -arch x86_64 -scheme SomeScheme -reporter pretty -reporter json-compilation-database:compile_commands.json clean build
```

## Load compilation database

``` {.bash org-language="sh"}
path/to/rtags/bin/rc -J path/to/your/objc-project/compile_commands.json
```

## Install RTags Emacs package

``` {.commonlisp org-language="emacs-lisp"}
(use-package rtags :ensure t
  :config
  (setq rtags-use-helm t) ;; Optional. Enable if helm fan (I am!).
  (setq rtags-path "path/to/rtags/bin/"))
```

## Ready to go

Use any of the rtags interactive commands. For example:

``` example
M-x rtags-find-symbol
```

## References

-   [RTags TLDR Quickstart](https://github.com/Andersbakken/rtags#tldr-quickstart).
-   [Emacs as C++ IDE](http://syamajala.github.io/c-ide.html).

# \[2016-03-10 Thu\] Database bookmarks
---
id: database-bookmarks
---



-   [Considering MySQL? Use something else](http://grimoire.ca/mysql/choose-something-else).
-   [Frank's compulsive guide to postal addresses](http://www.columbia.edu/~fdc/postal/).

# \[2016-03-06 Sun\] Python tips backlog
---
id: python-tips-backlog
---

[TODO]{.todo .TODO} [A Better Pip Workflow (Hacker News)](https://news.ycombinator.com/item?id=11210370).

# \[2016-03-05 Sat\] Bruges travel bookmarks
---
id: bruges-travel-bookmarks
---

-   [assietteblanche.be](http://www.assietteblanche.be/).
-   Beer flavored meals at Den Dyver.
-   [bistrozwarthuis.be](http://bistrozwarthuis.be).
-   Eat fries in front of the belfry and climb it.
-   [kok-au-vin.be](http://www.kok-au-vin.be).
-   [kurtspan.be](http://www.kurtspan.be/).
-   Minnewater and the old Beguinage.
-   Old Saint john's Hospital.
-   Relic of the Holy Blood and City hall.
-   [restomojo.tk](http://www.restomojo.tk).
-   [The Chocolate Line](http://www.thechocolateline.be/en).
-   The Garre, near the Burg and drink their house Tripel.
-   [tomsdiner.be](http://www.tomsdiner.be).
-   Try out Straffe Hendrik beer at brewery terrace.
-   Walk behind Gruuthuse over the little Saint Bonifaas bridge.

# \[2016-03-02 Wed\] Emacs lisp snippets
---
id: emacs-lisp-snippets
---

## cl-loop for in

``` {.commonlisp org-language="emacs-lisp" results="output"}
(cl-loop for day in '("mon" "tue" "wed" "thu" "fri" "sat" "sun")
         do (print day))
```

## cl-loop for from to

``` {.commonlisp org-language="emacs-lisp" results="output"}
(cl-loop for x from 1 to 5
         do (print x))
```

## pcase literal matching

``` {.commonlisp org-language="emacs-lisp"}
(pcase "word"
  ('word (message "Matched 'word symbol"))
  ("word" (message "Matched \"word\" string")))
```

## Avoid nesting with the help of thread-first and thread-last.

``` {.commonlisp org-language="emacs-lisp"}
(thread-last "12.....34"
  (string-remove-prefix "1")
  (string-remove-suffix "4"))
```

## Find file upwards, up parents, up hierarchy

``` {.commonlisp org-language="emacs-lisp"}
(locate-dominating-file FILE NAME)
```

## Find executable in PATH

``` {.commonlisp org-language="emacs-lisp"}
(executable-find COMMAND)
```

## Read string with completion (helm/ido/ivy friendly)

``` {.commonlisp org-language="emacs-lisp"}
(completing-read PROMPT COLLECTION &optional PREDICATE REQUIRE-MATCH INITIAL-INPUT HIST DEF INHERIT-INPUT-METHOD)
```

## Execute command/process and return list (similar to shell-command-to-string)

``` {.commonlisp org-language="emacs-lisp"}
(process-lines PROGRAM &rest ARGS)
```

## Iterating org buffer

``` {.commonlisp org-language="emacs-lisp"}
(org-element-map (org-element-parse-buffer) '(headline link)
  (lambda (element)
    (cond
     ((and (eq (org-element-type element) 'headline)
           (= (org-element-property :level element) 1))
      (print "headline"))
     ((eq (org-element-type element) 'link)
      (print "link")))
    nil))
```

# \[2016-02-18 Thu\] Some modern Objective-C idioms
---
id: some-modern-objective-c-idioms
---

## NSNumber literals

``` objc
NSNumber *number1 = @1024;
NSNumber *number2 = @1024.123f;
NSNumber *number3 = @'A';
NSNumber *number4 = @YES;
NSNumber *number5 = @24ul; // Unsigned long.
NSNumber *number6 = @123456ll; // Long Long.
NSNumber *number7 = @5050.50; // Float.
NSNumber *number8 = @1543; // Integer
NSNumber *number9 = @111.456; // Double
```

## Array literals

``` objc
NSArray *names = @[@"John\n", @"Peter\n", @"Jaye\n", @"George\n", @"Max"];
NSArray *mutableNames = [@[@"John\n", @"Peter\n", @"Jaye\n", @"George\n", @"Max"] mutableCopy];
```

# \[2016-02-16 Tue\] Cross-platform development bookmarks
---
id: cross-platform-development-bookmarks
---

-   [How to Distribute Binaries for OS X Using Homebrew (Hacker News)](https://news.ycombinator.com/item?id=11105027).

# \[2016-02-15 Mon\] Generating a random MAC address
---
id: generating-a-random-mac-address
---

As some point I had to generate a random MAC address. This is the snippet I used:

``` {.python results="output" exports="both"}
import random

def randomMAC():
  mac = [0x00, 0x16, 0x3e,
         random.randint(0x00, 0x7f),
         random.randint(0x00, 0xff),
         random.randint(0x00, 0xff),
  ]
  return ':'.join(map(lambda x: "%02x" % x, mac))

print 'MAC => %s' % randomMAC()
```

``` example
MAC => 00:16:3e:7e:f7:fa
```

# \[2016-02-14 Sun\] Defined elisp variables matching regexp
---
id: defined-elisp-variables-matching-regexp
---

You can use "M-x *apropos-variable*" to get documentation for variables matching a pattern. For more flexibility, some elisp can help with getting a list of all variables matching a regexp:

``` {.commonlisp org-language="emacs-lisp" exports="both"}
(defun ar/variables-matching-pattern (pattern)
  "Get a list of all variables matching PATTERN."
  (let ((matched-variables '()))
    (mapatoms
     (lambda (symbol)
       ;; Symbol is variable?
       (when (and (boundp symbol)
                  (string-match pattern (symbol-name symbol)))
         (add-to-list 'matched-variables symbol))))
    matched-variables))

(let ((variables ""))
  (mapc (lambda (variable-symbol)
          (setq variables
                (concat variables
                        (format "%s => %s\n"
                                (symbol-name variable-symbol)
                                (symbol-value variable-symbol)))))
        (ar/variables-matching-pattern "^tern-.*"))
  variables)
```

``` example
tern-mode-keymap => (keymap (3 keymap (4 . tern-get-docs) (3 . tern-get-type) (18 . tern-rename-variable)) (27 keymap (44 . tern-pop-find-definition) (67108910 . tern-find-definition-by-name) (46 . tern-find-definition)))
tern-update-argument-hints-async => nil
tern-known-port => nil
tern-mode => nil
tern-activity-since-command => -1
tern-project-dir => nil
tern-last-point-pos => nil
tern-last-completions => nil
tern-explicit-port => nil
tern-idle-time => 2.5
tern-find-definition-stack => nil
tern-last-argument-hints => nil
tern-idle-timer => nil
tern-server => nil
tern-last-docs-url => nil
tern-buffer-is-dirty => nil
tern-command-generation => 0
tern-flash-timeout => 0.5
tern-update-argument-hints-timer => 500
tern-mode-hook => nil
tern-command => (tern)
```

# \[2016-02-13 Sat\] Proselint via Emacs flycheck
---
id: proselint-via-emacs-flycheck
---

Based on [Linting Prose in Emacs](http://unconj.ca/blog/linting-prose-in-emacs.html)…

Needs proselint installed:

``` {.bash org-language="sh"}
pip install proselint
```

Also needs a flycheck checker defined:

``` {.commonlisp org-language="emacs-lisp"}
(flycheck-define-checker proselint
  "A linter for prose."
  :command ("proselint" source-inplace)
  :error-patterns
  ((warning line-start (file-name) ":" line ":" column ": "
            (id (one-or-more (not (any " "))))
            (message) line-end))
  :modes (gfm-mode
          markdown-mode
          org-mode
          text-mode))

(add-to-list 'flycheck-checkers 'proselint)
```

# \[2016-02-11 Thu\] Generate go struct definition from json file
---
id: generate-go-struct-definition-from-json-file
---

From [Generate go struct definition from json file](https://github.com/bittersweet/dotfiles/blob/master/notes/go.txt#L3), and before I forget:

``` go
curl http://url.tld/file.json | gojson -name=Repository
```

# \[2016-02-11 Thu\] Doh! undo last commit (Magit edition)
---
id: doh-undo-last-commit-magit-edition
---

I previously noted [how to undo your last git commit (ie. soft reset)](#doh-undo-last-git-commit). Using Magit:

1.  M-x *magit-log-current*.
2.  Move point to prior revision.
3.  M-x *magit-reset-soft* (defaults to revision at point).

Or if you want a single function:

``` {.commonlisp org-language="emacs-lisp"}
(require 'magit)

(defun ar/magit-soft-reset-head~1 ()
  "Soft reset current git repo to HEAD~1."
  (interactive)
  (magit-reset-soft "HEAD~1"))
```

# \[2016-02-06 Sat\] Redux bookmarks
---
id: redux-bookmarks
---



-   [A different way of supplying React-components with state](https://medium.com/@spitzwegerich/a-different-way-of-supplying-react-components-with-state-1093f8f79802#.n1ffge76m).
-   [A SoundCloud client in React and Redux (Hacker News)](https://news.ycombinator.com/item?id=11890229).
-   [Awesome redux](https://github.com/xgrommx/awesome-redux) (collection of libraries in ecosystem).
-   [Building React Applications with idiomatic redux (Hacker News)](https://news.ycombinator.com/item?id=11886662).
-   [Connecting Redux to your API](https://blog.boldlisting.com/connecting-redux-to-your-api-eac51ad9ff89#.nu7dpwklf).
-   [Curated awesome Redux tutorial and resource links](https://github.com/markerikson/react-redux-links).
-   [Flux Standard Action utilities for Redux](https://github.com/acdlite/redux-actions).
-   [How to integrate Redux with very large data-sets and IndexedDB? (Stack Overflow)](http://stackoverflow.com/questions/33992812/how-to-integrate-redux-with-very-large-data-sets-and-indexeddb).
-   [Introducing Redux operations](https://medium.com/@matt.krick/introducing-redux-operations-332ab56e468b#.buk8m7oug).
-   [Managing data flow on the client-side](https://blog.madewithlove.be/post/redux/).
-   [Motivation for flux](http://redux.js.org/docs/introduction/Motivation.html).
-   [NavigationExperimental notes](https://gist.github.com/brentvatne/52af349a6b6ef2ee1b06).
-   [Preethi Kasireddy - MobX vs Redux: Comparing the Opposing Paradigms](https://www.youtube.com/watch?v=76FRrbY18Bs).
-   [Presentational and Container Components](https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0#.plqwdhbyo).
-   [React-redux official bindings](https://github.com/rackt/react-redux).
-   [React: Flux Architecture (ES6) - Course by \@joemaddalone \@eggheadio](https://egghead.io/courses/react-flux-architecture-es6).
-   [Reactive Programming with RxJS](http://lucamezzalira.com/2016/03/08/reactive-programming-with-rxjs/).
-   [Redux async actions](http://redux.js.org/docs/advanced/AsyncActions.html).
-   [Redux best practices](https://medium.com/lexical-labs-engineering/redux-best-practices-64d59775802e#.7y43ask6a).
-   [Redux code examples](http://redux.js.org/docs/introduction/Examples.html#real-world).
-   [Redux ecosystem links](https://github.com/markerikson/redux-ecosystem-links).
-   [Redux promise](https://github.com/acdlite/redux-promise).
-   [Redux state persistence with a database (State Overflow)](http://stackoverflow.com/questions/33726644/redux-state-persistence-with-a-database).
-   [Redux thunk](https://github.com/gaearon/redux-thunk).
-   [Redux: Opinions/examples of how to do backend persistence? (Stack Overflow)](http://stackoverflow.com/questions/32949859/redux-opinions-examples-of-how-to-do-backend-persistence/33055146).
-   [RefluxCocoa: an implementation of Reflux in Objective-C](https://github.com/guangmingzizai/RefluxCocoa).
-   [Rules for structuring (redux) applications ](http://jaysoo.ca/2016/02/28/organizing-redux-application/).
-   [The case for flux](https://medium.com/swlh/the-case-for-flux-379b7d1982c6#.7tcw9qi01).
-   [Two weird tricks with redux](http://jlongster.com/Two-Weird-Tricks-with-Redux).
-   [TypeScript Redux](https://github.com/ServiceStackApps/typescript-redux).
-   [Understanding unidirectional data flow in React – Elizabeth Denhup – Medium](https://medium.com/@lizdenhup/understanding-unidirectional-data-flow-in-react-3e3524c09d8e).

# \[2016-02-06 Sat\] Javascript tips backlog
---
id: javascript-tips-backlog
---



[TODO]{.todo .TODO} [Tern.js with Atom](https://vinta.ws/code/tern-js-with-atom.html).

[TODO]{.todo .TODO} [Object spread syntax proposed for ES7](https://github.com/sebmarkbage/ecmascript-rest-spread).

[TODO]{.todo .TODO} if (typeof myvar `=` 'undefined') …

[TODO]{.todo .TODO} copy object and set with Object.assign({}, state, {property: newValue}).

[TODO]{.todo .TODO} Use ES6 computed property syntax.

[TODO]{.todo .TODO} ES6 syntax: import \* as reducers from './reducers'.

# \[2016-02-06 Sat\] Emacs lisp tips backlog
---
id: emacs-lisp-tips-backlog
---



[TODO]{.todo .TODO} [Signal: a library offering enriched hook-like features](https://github.com/mola-T/signal).

[TODO]{.todo .TODO} [Debugging tips](http://mbork.pl/2016-05-15_debug-on-whatever).

[TODO]{.todo .TODO} [Examples of Emacs modules](http://article.gmane.org/gmane.emacs.devel/202535).

[TODO]{.todo .TODO} [htop-like CPU and memory graphs for Emacs](https://gitlab.com/RobertCochran/neato-graph-bar).

[TODO]{.todo .TODO} [Timp: multithreading library](https://github.com/mola-T/timp).

[TODO]{.todo .TODO} [Effortless Major Mode Development](http://www.wilfred.me.uk/blog/2016/04/28/effortless-major-mode-development/).

[TODO]{.todo .TODO} [cl-spark implementation of Zach Holman's spark and Gil Gonçalves' vspark with little extension](https://github.com/tkych/cl-spark).

[TODO]{.todo .TODO} [map.el for map-like collections built-in as of 25.1](http://endlessparentheses.com/new-in-emacs-25-1-map-el-library.html).

[TODO]{.todo .TODO} [Standard library for key/value data structures](https://github.com/emacs-mirror/emacs/blob/master/lisp/emacs-lisp/map.el).

[TODO]{.todo .TODO} [Making Elisp regex look nicer](http://oremacs.com/2015/01/11/pretty-elisp-regex/).

[TODO]{.todo .TODO} [Adapting code using the old defadvice](https://www.gnu.org/software/emacs/manual/html_node/elisp/Porting-old-advices.html#Porting-old-advices).

[TODO]{.todo .TODO} [seq.el sequence library built-in as of 25.1](http://endlessparentheses.com/new-on-elpa-and-in-emacs-25-1-seq-el.html).

[TODO]{.todo .TODO} [Binding of parson JSON parser](https://github.com/syohex/emacs-parson).

[TODO]{.todo .TODO} [Helm-dash find-as-you-type](http://puntoblogspot.blogspot.co.uk/2016/02/with-this-little-trick-helm-dash-gets.html?m=1).

[TODO]{.todo .TODO} [Org mode - Parsing rich HTML directly when pasting? (Stack Overflow)](http://emacs.stackexchange.com/questions/12121/org-mode-parsing-rich-html-directly-when-pasting).

[TODO]{.todo .TODO} From [\@\_wilfredh](https://twitter.com/_wilfredh/status/694643167056916480), use (interactive "\*") for commands that edit the buffer, so they show a helpful error if the buffer is read only.

# \[2016-02-04 Thu\] Entering accents in Emacs
---
id: entering-accents-in-emacs
---

Via Irreal's [Entering Accented Characters in Emacs](http://irreal.org/blog/?p=4945), a reminder on how to enter accents using **C-x 8**. For example:

``` example
C-x 8 ' A -> Á
```

# \[2016-02-04 Thu\] Really delete iPhone photos
---
id: really-delete-iphone-photos
---

After deleting photos, go to:

> Albums -\> Recently Deleted -\> Select -\> Delete All

# \[2016-02-03 Wed\] Vancouver travel bookmarks
---
id: vancouver-travel-bookmarks
---



-   [17 Reasons To Visit Vancouver This Summer](http://www.myfiveacres.com/travel-inspiration/17-reasons-to-visit-vancouver-this-summer/).
-   [The 15 most incredible places to visit in Canada](https://www.lonelyplanet.com/amp/articles/best-places-to-visit-in-canada).

# \[2016-02-03 Wed\] Schnitzel recipe
---
id: schnitzel-recipe
---

Since [eating at Fischers's](#fischers-london-yes-but), I've been inclined to make Schnitzel. This is my attempt.

## Ingredients

-   Salt and ground black pepper.
-   All-purpose flour.
-   Eggs (beaten).
-   Bread crumbs (natural).
-   Oil.

## Preparation

-   Flatten the pork/chicken/veal.
-   Season (salt and pepper).
-   Heat pan with a generous amount of oil.
-   Dip into flour -\> egg -\> bread crumbs.

## Garnish

-   Anchovies.
-   Capers.

## Photo

![](https://xenodium.github.io/images/schnitzel-recipe/schnitzel.jpg)

# \[2016-02-03 Wed\] Hot reloading with react and redux
---
id: hot-reloading-with-react-and-redux
---

## By Robert Knight ([\@robknight\_](http://twitter.com/robknight_)).

## Checkout

-   [Browserify](http://browserify.org).
-   [Webpack](https://webpack.github.io) (more stable?).
-   [React-transform-hmr](https://github.com/gaearon/react-transform-hmr).
-   [Reselect](https://github.com/jchansen/reselect): A redux selector for redux.

## Slides

-   <https://github.com/robertknight/hot-reloading-talk>

# \[2016-02-03 Wed\] Converting Unix epoc time to human readable date
---
id: converting-unix-epoc-time-to-human-readable-date
---

Via [climagic](https://twitter.com/climagic)'s [Turn a Unix epoch time back into a human readable date](https://twitter.com/climagic/status/694780560221147136):

## GNU

``` {.bash org-language="sh" exports="both"}
date -d @192179700
```

``` example
Tue Feb  3 07:15:00 GMT 1976
```

## BSD/OS X

``` {.bash org-language="sh" exports="both"}
date -r 192179700
```

``` example
Tue Feb  3 07:15:00 GMT 1976
```

# \[2016-02-03 Wed\] Objective-C bookmarks
---
id: objective-c-bookmarks
---



-   [Adopting Nullability Annotation](http://www.miqu.me/blog/2015/04/17/adopting-nullability-annotations/).
-   [Adopting Objective-C generics](http://www.miqu.me/blog/2015/06/09/adopting-objectivec-generics/).
-   [Cocoa at Tumblr](https://cocoa.tumblr.com).
-   [Curated list of awesome Objective-C frameworks, libraries and software](https://github.com/uhub/awesome-objective-c).
-   [Documenting in Xcode with HeaderDoc Tutorial](https://www.raywenderlich.com/66395/documenting-in-xcode-with-headerdoc-tutorial).
-   [How Do I Declare A Block in Objective-C?](http://fuckingblocksyntax.com).
-   [Introduction to MVVM](https://www.objc.io/issues/13-architecture/mvvm).
-   [Nullability and Objective-C](https://developer.apple.com/swift/blog/?id=25).
-   [Ole Begemann's page](http://oleb.net/).
-   [ReactiveCocoa](https://github.com/ReactiveCocoa/ReactiveCocoa).
-   [The Xcode Build System](https://pewpewthespells.com/blog/xcode_build_system.html).
-   [Tip: Avoid retain cycles without doing the strong to weak dance](http://iosdevtips.co/post/118711491198/avoid-retain-cycles-weak-strong).
-   [Using Swift String enums in Objective-C](https://medium.com/@oscarcortes/using-swift-string-enums-in-objective-c-f6683da5b92e#.4526yy6s4).

# \[2016-02-02 Tue\] Timesinking bookmarks
---
id: timesinking-bookmarks
---



-   [In a Nutshell channel (YouTube)](https://www.youtube.com/channel/UCsXVk37bltHxD1rDPwtNM8Q).
-   [Oddly Satisfying (Subreddit)](https://www.reddit.com/r/oddlysatisfying).
-   [Related subreddits based on your comments](https://anvaka.github.io/sayit).
-   [To knoll me is to love me (Subreddit)](https://www.reddit.com/r/knolling).

# \[2016-02-02 Tue\] Suspend and reattach processes
---
id: suspend-and-reattach-processes
---

Via [climagic](https://twitter.com/climagic)'s [Suspend and reattach a process to screen](https://twitter.com/climagic/status/694242271286431744?refsrc=email&s=11):

``` {.bash org-language="sh"}
longcmd ; [Ctrl-Z] ; bg ; disown ; screen ; reptyr $( pidof longcmd )
```

# \[2016-02-02 Tue\] Czech Republic travel bookmarks
---
id: czech-republic-travel-bookmarks
---

-   [Strahov Monastery](https://en.wikipedia.org/wiki/Strahov_Monastery).

# \[2016-02-02 Tue\] Meditation tips backlog
---
id: meditation-tips-backlog
---

[TODO]{.todo .TODO} [Real Happiness Audio Files](http://www.workman.com/static/realhappinessebook/).

[DONE]{.done .DONE} [The science of craving](https://www.intelligentlifemagazine.com/content/features/wanting-versus-liking).

# \[2016-02-02 Tue\] Append jpegs in a video sequence
---
id: append-jpegs-in-a-video-sequence
---

Via [climagic](https://twitter.com/climagic)'s [make slideshow from \*.jpg](https://twitter.com/climagic/status/692821765110767616?refsrc=email&s=11):

``` {.bash org-language="sh"}
for p in *.jpg; do
    ffmpeg -loop_input -f image2 -i $p -t 3 -r 4 -s 1080x720 -f avi - >> slides.avi;
done
```

# \[2016-02-02 Tue\] Regular expressions bookmarks
---
id: regular-expressions-bookmarks
---



-   [Regex Cheat Sheet - DEV Community](https://dev.to/emmawedekind/regex-cheat-sheet-2j2a).
-   [Regex For Noobs (like me!) - An Illustrated Guide - Janmeppe.com](https://www.janmeppe.com/blog/regex-for-noobs/).
-   [regex101.com](https://regex101.com/).
-   [Regex101](https://regex101.com/): Online regex tool.
-   [Regular Expressions for Regular Folk](https://refrf.shreyasminocha.me/).
-   [Rubular: a Ruby regular expression editor](https://rubular.com/).

# \[2016-02-02 Tue\] Typescript bookmarks
---
id: typescript-bookmarks
---



-   [Building TypeScript Projects with Bazel (Minko Gechev's blog)](https://blog.mgechev.com/2018/11/19/introduction-bazel-typescript-tutorial/).
-   [DefinitelyTyped: The repository for high quality TypeScript type definitions](http://definitelytyped.org).
-   [gulp-typescript](https://github.com/ivogabe/gulp-typescript).
-   [Modern Emacs Typescript Web (React) Config with lsp-mode, treesitter, tailwind, TSX & more…](https://www.ovistoica.com/blog/2024-7-05-modern-emacs-typescript-web-tsx-config).
-   [React/JSX Typescript support](https://github.com/Microsoft/TypeScript/wiki/JSX).
-   [tslint](https://github.com/palantir/tslint).
-   [Typed-react](https://github.com/Asana/typed-react).
-   [TypeScript Tricks: Type Guards (Hacker News)](https://news.ycombinator.com/item?id=18975373).
-   [TypeStrong: TypeScript workflows](https://github.com/TypeStrong).
-   [Typings: The type definition manager for TypeScript](https://github.com/typings).
-   [Up and Running with React Native and TypeScript](https://medium.com/react-native-training/up-and-running-with-react-native-and-typescript-8d398e910a19).

# \[2016-02-02 Tue\] Hiding HTML elements
---
id: hiding-html-elements
---

Hide with [display:none](https://developer.mozilla.org/en-US/docs/Web/CSS/display) (exclude from layout) and [visibility:hidden](https://developer.mozilla.org/en-US/docs/Web/CSS/visibility) (include in layout).

# \[2016-02-01 Mon\] Echo Emacs keybiding from function name
---
id: echo-emacs-keybiding-from-function-name
---

Picked up via Emacs Redux's [Display the Keybinding for a Command With Substitute-command-keys](http://emacsredux.com/blog/2016/02/01/display-the-keybinding-for-a-command-with-substitute-command-keys/), with my own example:

``` {.commonlisp org-language="emacs-lisp" exports="both"}
(message (substitute-command-keys "Press \\[ar/ox-html-export] to export org file"))
```

``` example
Press <f6> to export org file
```

# \[2016-02-01 Mon\] Emacs dired for batch byte compilation
---
id: emacs-dired-for-batch-byte-compilation
---

Recently updated org-mode and started seeing an invalid function error:

> Error (use-package): ob :config: Invalid function: org-babel-header-args-safe-fn

Just learned dired enables you to mark files and byte compile via *M-x dired-do-byte-compile*.

# \[2016-01-29 Fri\] Serializing to JSON on iOS
---
id: serializing-to-json-on-ios
---

``` objc
NSDictionary *dictionary = @{
  @"key1" : @"val1\n",
  @"key2" : @"val2\n",
  @"key3" : @"val3\n",
  @"key4" : @"val4\n",
  @"key5" : @"val5\n",
  @"key6" : @"val6\n",
};
NSError *error;
NSData *jsonData =
    [NSJSONSerialization dataWithJSONObject:dictionary options:0 error:&error];
if (error) {
  // noooooooooo!
}
NSString *json =
    [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
```

# \[2016-01-25 Mon\] Fischer's London: yes, but…
---
id: fischers-london-yes-but
---

## Yes

Step into a Viennese blast from the past. Beautiful setting and pleasant vibe. Ordered a dirty martini on the rocks, a bottle of Merlot, Käsespätzle (with bacon), and Wiener Schnitzel (with anchovy/capers/egg). All very tasty.

## But…

Surprisingly, desserts (Topfenstrudel, Berggasse and coffee) were nothing spectacular. Also not a cheap eat (£50 per person).

## Photos

![](https://xenodium.github.io/images/fischers-london-yes-but/fischers-03.JPG) ![](https://xenodium.github.io/images/fischers-london-yes-but/fischers-04.JPG) ![](https://xenodium.github.io/images/fischers-london-yes-but/fischers-05.JPG) ![](https://xenodium.github.io/images/fischers-london-yes-but/fischers-06.JPG) ![](https://xenodium.github.io/images/fischers-london-yes-but/fischers-07.JPG) ![](https://xenodium.github.io/images/fischers-london-yes-but/fischers-08.JPG) ![](https://xenodium.github.io/images/fischers-london-yes-but/fischers-09.JPG) ![](https://xenodium.github.io/images/fischers-london-yes-but/fischers-10.JPG) ![](https://xenodium.github.io/images/fischers-london-yes-but/fischers-11.JPG) ![](https://xenodium.github.io/images/fischers-london-yes-but/fischers-12.JPG)

# \[2016-01-25 Mon\] Polar travel bookmarks
---
id: polar-travel-bookmarks
---

-   [Quark expeditions](http://www.quarkexpeditions.com/en).

# \[2016-01-24 Sun\] Sweden travel bookmarks
---
id: sweden-travel-bookmarks
---

-   [Fäviken restaurant (world's most isolated restaurant)](http://www.theworlds50best.com/list/1-50-winners/Faviken).
-   [Hangouts in Stockholm](https://theculturetrip.com/europe/sweden/articles/the-most-hipster-hangouts-in-stockholm).
-   Vasa Museum.

# \[2016-01-20 Wed\] Handwriting bookmarks
---
id: handwriting-bookmarks
---

-   [briem.net](http://briem.net).
-   [Handwriting that works](http://www.handwritingthatworks.com).

# \[2016-01-20 Wed\] Chocolate fondant recipe
---
id: chocolate-fondant-recipe
---

My girlfriend recently made a delicious chocolate fondant. Saving the [The Guardian's recipe](http://www.theguardian.com/lifeandstyle/wordofmouth/2011/feb/10/how-cook-perfect-chocolate-fondants):

## Ingredients (2 servings)

-   60g unsalted butter, cut into dice, plus extra to grease
-   1 tbsp cocoa powder
-   60g dark chocolate, broken into pieces
-   1 egg and 1 egg yolk
-   60g caster sugar
-   1 tbsp plain flour

## Preparation

1.  Pre-heat the oven to 200C if cooking immediately, and put a baking tray on the middle shelf. Butter the inside of 2 small ramekins or pudding moulds, and then put the cocoa in one and turn it to coat the inside, holding it over the second mould to catch any that escapes. Do the same with the other mould.
2.  Put the butter and chocolate into a heatproof bowl set over, but not touching, a pan of simmering water and stir occasionally until melted. Allow to cool slightly.
3.  Vigorously whisk together the egg, yolk, sugar and a pinch of salt until pale and fluffy. Gently fold in the melted chocolate and butter, and then the flour. Spoon into the prepared moulds, stopping just shy of the top – at this point the mixture can be refrigerated until needed, or even frozen, as the puddings will not wait around once cooked.
4.  Put on to a hot baking tray and cook for 12 minutes (14 if from cold, 16 if frozen) until the tops are set and coming away from the sides of the moulds. Leave to rest for 30 seconds and then serve in the ramekins or turn out on to plates if you're feeling confident – they're great with clotted cream or plain ice cream.

# \[2016-01-20 Wed\] Parenting bookmarks
---
id: parenting-bookmarks
---



-   [A Toddler's Do-It-Myself Attitude Ends In Tantrums - Janet Lansbury](http://www.janetlansbury.com/2018/07/a-toddlers-do-it-myself-attitude-ends-in-tantrums/).
-   [Ask HN: Any good collaboratively built documentation on good parenting? (Hacker News)](https://news.ycombinator.com/item?id=17023693).
-   [Ask HN: I need ideas to impress fifth graders with technology](https://news.ycombinator.com/item?id=20069714).
-   [Ask HN: Recommend a maths book for a teenager? \| Hacker News](https://news.ycombinator.com/item?id=23711942).
-   [CodeCombat - Learn how to code by playing a game](https://codecombat.com/).
-   [Everyone's a Aliebn When Ur a Aliebn Too by Jomny Sun](https://www.goodreads.com/book/show/32497573-everyone-s-a-aliebn-when-ur-a-aliebn-too).
-   [For parents out there, how much money did you have saved up when you had your first kid?](https://twitter.com/ankitshah/status/1305588478592217088).
-   [Growing With Science Blog](http://blog.growingwithscience.com/).
-   [Home - Mindful Parenting Online Conference](https://conference.michellegale.com/).
-   [How Inuit Parents Teach Kids To Control Their Anger (NPR)](https://www.npr.org/sections/goatsandsoda/2019/03/13/685533353/a-playful-way-to-teach-kids-to-control-their-anger).
-   [How to get kids to pay attention (Hacker News)](https://news.ycombinator.com/item?id=17435671).
-   [How to raise a child – 10 rules from young single mom](https://twitter.com/brainpicker/status/1173363871035383808).
-   [How to Raise a Child: 10 Rules from Young Susan Sontag – Brain Pickings](https://www.brainpickings.org/2012/09/13/susan-sontag-10-rules-for-raising-a-child/).
-   [How to Talk so Kids Will Listen and Listen so Kids Will Talk](https://www.amazon.co.uk/How-Talk-Kids-Will-Listen/dp/1848123094/ref=sr_1_1).
-   [I'm becoming a Dad for the first time in May. What are you top finacial tips when becoming a parent? : UKPersonalFinance](https://www.reddit.com/r/UKPersonalFinance/comments/af2z1b/im_becoming_a_dad_for_the_first_time_in_may_what/).
-   [Is it OK to have kids?](https://aeon.co/essays/do-people-have-a-moral-duty-to-have-children-if-they-can).
-   [Let Grow \| When Adults Step Back, Kids Step Up.](https://letgrow.org/).
-   [Let's Talk About Protecting Our Families (debunked gun defense arguments)](https://www.designmom.com/lets-talk-about-protecting-our-families/).
-   [On Parenthood](https://blog.codinghorror.com/on-parenthood/).
-   [Tech kits for bright sparks (from techwillsaveus)](https://www.techwillsaveus.com/).
-   [The disintegration of the parent-child bond](http://www.theglobeandmail.com/life/parenting/the-disintegration-of-the-parent-child-bond/article28191786/).
-   [The Intersection of Design & Motherhood \| Top Lifestyle Blog \| Design Mom](https://www.designmom.com/).
-   [The Monster at the End of This Book: Jon Stone, Michael Smollin](https://www.amazon.com/Monster-End-This-Book/dp/0307010856).
-   [Things people don't warn you about parenthood](https://twitter.com/biomickwatson/status/1138778734054510592).
-   [Visual Book Notes: No-Drama Discipline (2014)](http://sachachua.com/blog/2019/03/visual-book-notes-no-drama-discipline-2014/).
-   [Why It's Okay to Throw Your Children's Art Away - The Atlantic](https://www.theatlantic.com/family/archive/2018/09/throw-your-childrens-art-away/570379/).

# \[2016-01-19 Tue\] Ippudo London: yes, but…
---
id: ippudo-london-yes-but
---

## Yes

[Central St. Giles](http://www.ippudo.co.uk/find_us/) location. Ordered a Kirin Ichiban beer and a Spicy Tonkotsu with a seasoned boiled egg. Awesome medium-spice broth, tasty egg and firm noodles. Got additional noodles for £1.50.

## But…

The space feels soulless. Think generic, chain, Pizza Express…

## Photos

![](https://xenodium.github.io/images/ippudo-london-yes-but/ipuddo_00.JPG) ![](https://xenodium.github.io/images/ippudo-london-yes-but/ipuddo_01.JPG) ![](https://xenodium.github.io/images/ippudo-london-yes-but/ipuddo_02.JPG) ![](https://xenodium.github.io/images/ippudo-london-yes-but/ipuddo_03.JPG) ![](https://xenodium.github.io/images/ippudo-london-yes-but/ipuddo_04.JPG) ![](https://xenodium.github.io/images/ippudo-london-yes-but/ipuddo_05.JPG) ![](https://xenodium.github.io/images/ippudo-london-yes-but/ipuddo_06.JPG) ![](https://xenodium.github.io/images/ippudo-london-yes-but/ipuddo_07.JPG)

# \[2016-01-19 Tue\] Added Emacs zone-rainbow
---
id: added-emacs-zone-rainbow
---

[kawabata's](http://twitter.com/kawabata) [zone-rainbow](https://github.com/kawabata/zone-rainbow) popped up on melpa today. Added to zone-programs. Just because :)

``` {.commonlisp org-language="emacs-lisp"}
(use-package zone-rainbow :ensure t
  :after zone
  :config
  (setq zone-programs (vconcat [zone-rainbow] zone-programs)))
```

![](https://xenodium.github.io/images/added-emacs-zone-rainbow/zone-rainbow.gif)

# \[2016-01-19 Tue\] Safari's Web Inspector keyboard shortcuts
---
id: safaris-web-inspector-keyboard-shortcuts
---

Via WebKit's blog, [Web Inspector Keyboard Shortcuts](https://webkit.org/blog/4038/web-inspector-keyboard-shortcuts/):

-   ⌃⌘Y or ⌘\\ continue.
-   F8 or ⇧⌘; step out.
-   F7 or ⌘; step in.
-   F6 or ⌘’ step over.

# \[2016-01-14 Thu\] Copenhagen travel bookmarks
---
id: copenhagen-travel-bookmarks
---



-   Christiania.
-   [Hija de Sanchez](http://www.hijadesanchez.dk/) restaurant.
-   [Marv og Ben](http://cargocollective.com/marvogben) restaurant.
-   [Mikkeller Bar – Mikkeller](http://mikkeller.dk/location/mikkeller-bar-viktoriagade-copenhagen/).
-   Mikkeller Bar.
-   [Schonnemann](http://www.restaurantschonnemann.dk/) restaurant.
-   Tivoli.
-   Torvehallerne (food).

# \[2016-01-12 Tue\] Import UIKit for simpler debugging
---
id: import-uikit-for-simpler-debugging
---

I bookmarked [An \@import-ant Change in Xcode](http://furbo.org/2015/05/11/an-import-ant-change-in-xcode/) and immediately forgot about it. The gist is to import UIKit to simplify inspecting objects during an lldb session:

``` example
(lldb) expr @import UIKit
```

Shorten typing by creating aliases in \~/.lldbinit:

``` example
command alias uikit expr @import UIKit
command alias foundation expr @import Foundation
```

# \[2016-01-12 Tue\] iOS development tips backlog
---
id: ios-development-tips-backlog
---



[DONE]{.done .DONE} [Static Analysis on iOS - Part II](http://ruenzuo.github.io/static-analysis-on-ios-part-ii/).

[DONE]{.done .DONE} [Clang-based C/C++/Objective-C refactoring toolset (unmaintained)](https://github.com/lukhnos/refactorial/).

[DONE]{.done .DONE} [SimSim: access to application data folders](https://github.com/dsmelov/simsim).

[DONE]{.done .DONE} [xcpretty (fast and flexible formatter/prettifier for xcodebuild output)](https://github.com/supermarin/xcpretty).

[DONE]{.done .DONE} [xctool](https://github.com/facebook/xctool).

# \[2016-01-11 Mon\] Basic Emacs keybindings on Linux desktop
---
id: basic-emacs-keybindings-on-linux-desktop
---

Miss C-a, C-e in your browser and other Linux apps? You can enable the GTK Emacs key theme:

``` {.bash org-language="sh"}
$ gsettings set org.gnome.desktop.interface gtk-key-theme "Emacs"
```

or if on Cinnamon:

``` {.bash org-language="sh"}
$ gsettings set org.cinnamon.desktop.interface gtk-key-theme Emacs
```

If your desktop environment is not running gnome-settings-daemon, start it with:

``` {.bash org-language="sh"}
$ gnome-settings-daemon
```

More at [Emacs Keybindings in Chrome Without Gnome](http://www.jefftk.com/p/emacs-keybindings-in-chrome-without-gnome) and [How to get Emacs key bindings in Ubuntu](http://promberger.info/linux/2010/02/16/how-to-get-emacs-key-bindings-in-ubuntu/).

# \[2016-01-08 Fri\] Emacs Objective-C completion with Irony
---
id: emacs-objective-c-completion-with-irony
---

## Install libclang on Mac

``` {.bash org-language="sh"}
brew install llvm --with-clang
```

## Configure Emacs

``` {.commonlisp org-language="emacs-lisp"}
(use-package irony :ensure t
  :config
  (add-hook 'objc-mode-hook 'irony-mode)
  (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options))

(use-package company-irony :ensure t
  :config
  (add-hook  'objc-mode-hook (lambda ()
                               (setq-local company-backends '((company-irony)))))
  (add-hook 'irony-mode-hook 'company-irony-setup-begin-commands))
```

## install irony server

Run:

``` example
M-x irony-install-server
```

NOTE: Needs libclang: Install with "brew install llvm –with-clang" By default, irony-install-server did not find libclang on Mac OS. *irony-install-server* invokes cmake for you. Work around by adding:

``` example
-DCMAKE_PREFIX_PATH=/Users/your-user-name/homebrew/opt/llvm
```

For example:

``` example
cmake -DCMAKE_PREFIX_PATH=/Users/your-user-name/homebrew/opt/llvm -DCMAKE_INSTALL_PREFIX\=/Users/your-user-name/.emacs.d/irony/ /Users/your-user-name/.emacs.d/elpa/irony-20160106.1223/server && cmake --build . --use-stderr --config Release --target install
```

## Compilation database

### Install xctool

``` {.bash org-language="sh"}
brew install xctool
```

### Generate compilation database

``` {.bash org-language="sh"}
xctool -sdk iphonesimulator -arch x86_64 -scheme SomeScheme -reporter pretty -reporter json-compilation-database:compile_commands.json clean build
```

## Set Irony's database path

> M-x irony-cdb-json-add-compile-commands-path

# \[2016-01-07 Thu\] Finland travel bookmarks
---
id: finland-travel-bookmarks
---



-   [36 Hours in Helsinki](http://www.nytimes.com/interactive/2016/07/07/travel/what-to-do-36-hours-helsinki-finland.html?smid=tw-nytimestravel&smtyp=cur).
-   Boat to the Baltics; Tallinn (Estonia).
-   Helsinki - Suomenlinna (former maritime fortress).
-   Lapland (husky sledding, reindeer, Santa Claus village).
-   [Päivä no:23 Reitti no:23 no:12 \| Leipomo K.E.Avikainen (try munkkipossu: pig shaped donut)](https://www.flickr.com/photos/discounterintelligence/25360452443).
-   [Ragu Ravintola (try panfried fiesh, pulled pork, steak tartare, chocolate mouse)](https://www.ragu.fi/).
-   Rovaniemi for reindeer, dog sled, santaland, artic circle photos.

# \[2016-01-07 Thu\] Northern lights travel bookmarks
---
id: northern-lights-travel-bookmarks
---



-   Aim for a new moon (eg. 2016-01-10 or 2016-02-08).
-   Aim for [auroral zone](http://sci.esa.int/cluster/33272-plasma-regions/?fbodylongid%3D1173).
-   [Guide Gunnar](http://www.guide-gunnar.no/?ac_id%3D1&ac_parent%3D1&ao_name%3Dforside) will go distance to ensure you see the lights.
-   [Kiruna Sleddog Tours](http://www.sleddog.se/).
-   [Tromsø's reindeer racing](http://www.msm.no/sami-week-tromsoe-2015.287592-242995.html).
-   [Tromsø](http://www.visittromso.no/en).
-   [Hundekjøring](http://villmarkssenter.no/vinterprogram/hundekj%25C3%25B8ring/): drive your own sled.
-   Tromsø whale watching.

# \[2016-01-06 Wed\] Mexico travel bookmarks
---
id: mexico-travel-bookmarks
---



-   [15 best places to visit in Mexico](https://www.lonelyplanet.com/amp/articles/best-places-to-visit-in-mexico).
-   [San Francisco Acatepec](http://www.corazondepuebla.com.mx/acatepec.html).

# \[2016-01-03 Sun\] Emacs highlight-symbol-mode
---
id: emacs-highlight-symbol-mode
---

Been a fan of [highlight-thing-mode](https://github.com/fgeller/highlight-thing.el). It automatically highlights all instances of symbol at point. Today, I gave [highlight-symbol](https://github.com/nschum/highlight-symbol.el) a try. Similar concept, but also adds the ability to jump to next/previous instances of symbol at point.

``` {.commonlisp org-language="emacs-lisp"}
(use-package highlight-symbol :ensure t
  :config
  (set-face-attribute 'highlight-symbol-face nil
                      :background "default"
                      :foreground "#FA009A")
  (setq highlight-symbol-idle-delay 0)
  (setq highlight-symbol-on-navigation-p t)
  (add-hook 'prog-mode-hook #'highlight-symbol-mode)
  (add-hook 'prog-mode-hook #'highlight-symbol-nav-mode))
```

![](https://xenodium.github.io/images/emacs-highlight-symbol-mode/highlight-symbol.gif)

# \[2016-01-03 Sun\] Gandhi's ever-contemporary wisdom
---
id: gandhis-ever-contemporary-wisdom
---

From [Gandhi: Radical Wisdom for a Changing World](http://www.amazon.co.uk/Gandhi-Changing-Mohandas-Karamchand-published/dp/B015GRZTP2):

## Anger

"I do get angry, but I feel angry with myself for it. Full conquest of anger is possible only through self-realization. We should love even those who have the worst opinion of us. This is ahimsa, the rest is only ignorance."

## Bad handwriting

"I am now of opinion that children should first be taught the art of drawing before learning how to write. Let the child learn his letters by observation as he does different objectives, such as flowers, birds, etc., and let him learn handwriting only after he has learned to draw objects."

## Conduct of the Ashram

"Service without humility is selfishness and egotism."

## Eating

"There is a great deal of truth in the saying that man becomes what he eats. The grosser the food, the grosser the body."

## Heart

"There are chords in every human heart. If we only know how to strike the right chord, we bring out the music."

## Moral law

The law of truth and love.

## Renouncing or forgoing

Nishkulanand sings: "Renunciation of objects, without the renunciation of desires, is short-lived, however hard you may try."

## Silence

"Man spoils matters much more by speech than by silence."

## Time

"Every minute that runs to waste never returns. Yet, knowing this, how much time do we waste?"

## The palate

"Turn to the birds and beasts, and what do you find? They never eat merely to please the palate, they never go on eating till their inside is full to overflowing. And yet, we regard ourselves as superior to the animal creation!"

## Vow of Swadeshi

"The person who has taken the vow of swadeshi will never use articles which conceivably involve violation of truth in their manufature or on the part of their manufacturers."

# \[2016-01-02 Sat\] Functional programming bookmarks
---
id: functional-programming-bookmarks
---



-   [Functors, Applicatives, And Monads In Pictures](http://adit.io/posts/2013-04-17-functors,_applicatives,_and_monads_in_pictures.html).
-   [Functors, Applicatives, and Monads in Plain English](http://www.russbishop.net/monoids-monads-and-functors).
-   [Tom Ducalf's Programming Fundamentals Talk](http://blog.tomduncalf.com/posts/functional-programming-fundamentals-talk).
-   [What is functional programming?](http://blog.jenkster.com/2015/12/what-is-functional-programming.html)
-   [Which programming languages are functional?](http://blog.jenkster.com/2015/12/which-programming-languages-are-functional.html)
-   [Why Functional Programming Matters](https://blog.acolyer.org/2016/09/14/why-functional-programming-matters/).

# \[2016-01-02 Sat\] 9 Productivity tips
---
id: 9-productivity-tips
---

From HBR's [9 Productivity Tips from People Who Write About Productivity](https://hbr.org/2015/12/9-productivity-tips-from-people-who-write-about-productivity):

1.  Block time away from reactive tasks (email).
2.  Business = wasted energy.
3.  Exercise, sleep, and 90 minute work bursts.
4.  Incomplete tasks prompt healthy thinking out of context.
5.  Time off or stepping back is invaluable.
6.  Genuinely help were most successful/enjoyable.
7.  Plan for saying no while highlighting priority and seeking feedback.
8.  Measure important behavior change.
9.  Make time now (automate, simplify, etc.).

# \[2016-01-01 Fri\] First meal of 2016
---
id: first-meal-of-2016
---

## Pancakes

-   1 teaspoon of salt.
-   1.5 cups of milk.
-   2 cups of flour.
-   2 eggs.
-   2 tablespoons sugar.
-   4 tablespoons of melted butter.
-   6 teaspoons of baking powder.

Makes 10/11 pancakes.

![](https://xenodium.github.io/images/first-meal-of-2016/shortstack.jpg)

# \[2016-01-01 Fri\] Last meal of 2015
---
id: last-meal-of-2015
---

For our last meal of 2015, I contributed dal and rotis. This is my first attempt at making either one of these. Both recipes based on Anupy Singla's [Indian for Everyone](http://www.amazon.co.uk/Indian-Everyone-Anupy-Singla/dp/1572841621).

## Dal Makhani (Buttered black lentils)

![](https://xenodium.github.io/images/last-meal-of-2015/dal-grid.png) ![](https://xenodium.github.io/images/last-meal-of-2015/dal.jpg)

## Roti-Chapati-Phulka

![](https://xenodium.github.io/images/last-meal-of-2015/roti-grid.png) ![](https://xenodium.github.io/images/last-meal-of-2015/roti.jpg)

# \[2015-12-30 Wed\] Find in \$PATH with type and which
---
id: find-in-path-with-type-and-which
---

I typically use *which* to figure out the first binary found in \$PATH:

``` {.bash org-language="sh" results="output" exports="both"}
which -a emacsclient
```

``` example
/Users/user/homebrew/bin/emacsclient
/usr/bin/emacsclient
```

I always forget about *type* though:

``` {.bash org-language="sh" results="output" exports="both"}
type -a emacsclient
```

``` example
emacsclient is /Users/user/homebrew/bin/emacsclient
emacsclient is /usr/bin/emacsclient
```

# \[2015-12-30 Wed\] npm basics
---
id: npm-basics
---

## Global vs local package installation location

> {prefix}/lib/node_modules

vs

> path/to/project/node_modules

## View npm config

``` {.bash org-language="sh" results="output" exports="both"}
npm config list
```

``` example
; cli configs
user-agent = "npm/2.14.2 node/v4.0.0 darwin x64"

; node bin location = /Users/user/.nvm/versions/node/v4.0.0/bin/node
; cwd = /Users/user/stuff/active/blog
; HOME = /Users/user
; 'npm config ls -l' to show all defaults.

```

## Get config value

``` {.bash org-language="sh" results="output" exports="both"}
npm config get prefix
```

``` example
/Users/user/.nvm/versions/node/v4.0.0
```

## Set config value

``` {.bash org-language="sh"}
npm config set prefix=$HOME/some/location
```

## Install package globally

``` {.bash org-language="sh"}
node install --global <package-name>
```

or

``` {.bash org-language="sh"}
node install -g <package-name>
```

## List global packages

``` {.bash org-language="sh" results="output" exports="both"}
npm list --global
```

You can also use –depth=0 to make less verbose.

``` example
/Users/user/.nvm/versions/node/v4.0.0/lib
├─┬ babel-eslint@4.1.3
│ ├── acorn-to-esprima@1.0.4
│ ├─┬ babel-core@5.8.25
│ │ ├── babel-plugin-constant-folding@1.0.1
│ │ ├── babel-plugin-dead-code-elimination@1.0.2
...
```

## Install local package

``` {.bash org-language="sh"}
npm install <package-name> --save
```

–save will add \<package-name\> dependency to your package.json.

## package.json

See [using a package.json](https://docs.npmjs.com/getting-started/using-a-package.json).

## Uninstall package

``` {.bash org-language="sh"}
npm uninstall <package-name>
```

## Install package at version

``` {.bash org-language="sh"}
npm install <package-name>@1.7.0
```

## Search packages

``` {.bash org-language="sh"}
npm search linter
```

## Online documentation

Online documentation is great so far. More at [docs.npmjs.com](https://docs.npmjs.com).

# \[2015-12-25 Fri\] Clojure bookmarks
---
id: clojure-bookmarks
---



-   [ Clojure in Emacs from absolute zero ](https://www.youtube.com/watch).
-   [2015 in review](http://swannodette.github.io/2015/12/23/year-in-review/).
-   [A call for Clojure stacks · Clojure Stacks](http://www.clojurestacks.com/misc/2018/05/06/a-call-for-clojure-stacks.html).
-   [GitHub - nrepl/nrepl: A Clojure network REPL that provides a server and client, along with some common APIs of use to IDEs and other tools that may need to evaluate Clojure code in remote environments](https://github.com/nrepl/nrepl).
-   [Getting Started with Cider for Clojure Programming - Blog](https://whatacold.io/blog/2024-12-22-getting-started-with-cider/).

# \[2015-12-21 Mon\] Mac OS X tips backlog
---
id: mac-os-x-tips-backlog
---



[TODO]{.todo .TODO} [Uebersicht: Keep an eye on what is happening on your machine and in the World](http://tracesof.net/uebersicht/).

[DONE]{.done .DONE} [Kwm: Tiling window manager with focus follows mouse for OSX](https://github.com/koekeishiya/kwm).

``` {.bash org-language="sh"}
cp ~/homebrew/Cellar/kwm/1.1.3/homebrew.mxcl.kwm.plist ~/Library/LaunchAgents/
launchctl load ~/Library/LaunchAgents/homebrew.mxcl.kwm.plist
```

[DONE]{.done .DONE} Turn off shadows with [ShadowToggle](https://github.com/ocodo/ShadowToggle).

[DONE]{.done .DONE} [Disk Inventory X](http://www.derlien.com): disk usage utility for Mac.

# \[2015-12-20 Sun\] Search bash history with Emacs helm
---
id: search-bash-history-with-emacs-helm
---

Following up from [changing CWD with helm projectile](#change-emacs-shells-cwd-with-helm-projectile), here's a way to search your bash history with helm:

![](https://xenodium.github.io/images/search-bash-history-with-emacs-helm/helm-bash-history.gif)

``` {.commonlisp org-language="emacs-lisp"}
(defun ar/helm-helm (title candidates on-select-function)
  "Helm with TITLE CANDIDATES and ON-SELECT-FUNCTION."
  (helm :sources `((name . ,title)
                   (candidates . ,candidates)
                   (action . ,on-select-function))
        :buffer "*helm-exec*"
        :candidate-number-limit 10000))

(defun ar/shell-send-command (command)
  "Send COMMAND to shell mode."
  (assert (string-equal mode-name "Shell") nil "Not in Shell mode")
  (goto-char (point-max))
  (comint-kill-input)
  (insert command)
  (comint-send-input))

(defun ar/helm-shell-search-history ()
  "Narrow down bash history with helm."
  (interactive)
  (assert (string-equal mode-name "Shell") nil "Not in Shell mode")
  (ar/helm-helm "bash history"
                (with-temp-buffer
                  (insert-file-contents "~/.bash_history")
                  (reverse
                   (delete-dups
                    (split-string (buffer-string) "\n"))))
                #'ar/shell-send-command))
```

Bonus: Replace existing M-r binding to use ar/helm-shell-search-history.

``` {.commonlisp org-language="emacs-lisp"}
(bind-key "M-r" #'ar/helm-shell-search-history shell-mode-map)
```

# \[2015-12-19 Sat\] Medicine bookmarks
---
id: medicine-bookmarks
---

-   [Science-Based Medicine – Exploring issues and controversies in science and technology](https://sciencebasedmedicine.org/).

# \[2015-12-19 Sat\] View DICOM files from your X-ray
---
id: view-dicom-files-from-your-x-ray
---

Got a CD with my chest X-ray from the hospital. Was expecting a pdf or an image of sorts, but the CD content was rather different. For starters, it was targeted at Windows users (AUTORUN.INF, MediaViewerLauncher.EXE and a bunch of DLLs):

``` text
$ find . -exec file --mime-type '{}' \;

./AUTORUN.INF: text/plain
./DICOMDIR: application/dicom
./MediaViewerLauncher.EXE: application/octet-stream
...
./Libraries/BASEPRINTER.DLL: application/octet-stream
./Libraries/CDDATABURNER.DLL: application/octet-stream
./Libraries/COM.DLL: application/octet-stream
...
./Libraries/ACE.DLL: application/octet-stream
./Libraries/ACE_SSL.DLL: application/octet-stream
./Libraries/ATL90.DLL: application/octet-stream
...
./DICOM/PAT_0000: application/x-directory
./DICOM/PAT_0000/STD_0000/SER_0000/OBJ_0001/IM_0001: application/dicom
./DICOM/PAT_0000/STD_0000/SER_0001/OBJ_0001/ED_0001: application/dicom
./DICOM/PAT_0000/STD_0000/SER_0002/OBJ_0001/ED_0001: application/dicom
./Worklist/ClinicalInfo/067eccde-b299-e511-9114-005056ad3afe.mht: text/html
./Worklist/Report/067eccde-b299-e511-9114-005056ad3afe.mht: text/html
./Worklist/Worklist.wl: application/octet-stream
```

I'm on a Mac, so most of these files were not useful to me. The more interesting files were IM_0001 and ED_0001 with "application/dicom" MIME type. [DICOM](https://en.wikipedia.org/wiki/DICOM) files stand for Digital Imaging and Communications in Medicine. How to view these on a Mac? [OsiriX viewer](http://www.osirix-viewer.com/Downloads.html) is an option. OsiriX, though on the heavy side (100.7MB download), it rendered the X-ray successfully.

![](https://xenodium.github.io/images/view-dicom-files-from-your-x-ray/2015-12-03-osirix-x-ray-small.png)

Unsurprisingly, ImageMagick's [convert](http://www.imagemagick.org/script/convert.php) utility also handles DICOM files. Converting to PNG worked well.

``` {.bash org-language="sh"}
$ convert ./DICOM/PAT_0000/STD_0000/SER_0001/OBJ_0001/ED_0001 ED_0001.png
```

![](https://xenodium.github.io/images/view-dicom-files-from-your-x-ray/2015-12-03-imagemagick-x-ray-small.png)

DICOM files also hold patient's metadata and optional reports. The file format is [well known](http://cabiatl.com/mricro/dicom/index.html). OsiriX gives you access to it, but a few lines of python can also extract it for you. First install the [pydicom](https://github.com/darcymason/pydicom) package:

``` {.bash org-language="sh"}
$ sudo pip install pydicom
```

Running the python interpreter is enough to peek at the metadata:

``` python
>>> import dicom
>>> ds = dicom.read_file("./DICOM/PAT_0000/STD_0000/SER_0000/OBJ_0001/IM_0001")
>>> ds
```

``` text
(0008, 0000) Group Length                        UL: 400
(0008, 0005) Specific Character Set              CS: 'ISO_IR 100'
(0008, 0016) SOP Class UID                       UI: Computed Radiography Image Storage
(0008, 0020) Study Date                          DA: '20151203'
(0008, 0021) Series Date                         DA: '20151203'
(0008, 0023) Content Date                        DA: '20151203'
(0008, 0030) Study Time                          TM: '120519.000000'
(0008, 0031) Series Time                         TM: '120520.000000'
(0008, 0033) Content Time                        TM: '120643.000000'
(0008, 0060) Modality                            CS: 'CR'
(0008, 0070) Manufacturer                        LO: 'Canon Inc.'
...
```

There were other DICOM files with a report:

``` python
>>> import dicom
>>> ds = dicom.read_file("./DICOM/PAT_0000/STD_0000/SER_0001/OBJ_0001/ED_0001")
>>> ds
```

``` text
(0008, 0005) Specific Character Set              CS: 'ISO_IR 100'
(0008, 0016) SOP Class UID                       UI: Encapsulated PDF Storage
...
(0042, 0012) MIME Type of Encapsulated Document  LO: 'application/pdf'
```

[DCMTK](http://dcmtk.org/dcmtk.php.en) is another alternative tool to extract DICOM metadata. The source is available and can be built:

``` {.bash org-language="sh"}
$ tar xf dcmtk-3.6.0.tar.gz
$ cd dcmtk-3.6.0
$ cmake .
$ make
```

Or installed via homebrew:

``` {.bash org-language="sh"}
$ brew install dcmtk
```

DCMTK includes dcmdump. You can use it to dump DICOM files:

``` {.bash org-language="sh"}
$ dcmdata/apps/dcmdump DICOM/PAT_0000/STD_0000/SER_0000/OBJ_0001/IM_0001
```

``` text
# Dicom-File-Format

# Dicom-Meta-Information-Header
# Used TransferSyntax: Little Endian Explicit
(0002,0000) UL 192                                      #   4, 1 FileMetaInformationGroupLength
(0002,0001) OB 01\00                                    #   2, 1 FileMetaInformationVersion
(0002,0002) UI =ComputedRadiographyImageStorage         #  26, 1 MediaStorageSOPClassUID
(0002,0003) UI [1.2.392.200046.100.2.1.1.42667.20151203120519.1.1.1] #  52, 1 MediaStorageSOPInstanceUID
(0002,0010) UI =LittleEndianExplicit                    #  20, 1 TransferSyntaxUID
(0002,0012) UI [1.3.46.670589.42.1.4.4.5]               #  24, 1 ImplementationClassUID
(0002,0013) SH [PhilipsISPACS445]                       #  16, 1 ImplementationVersionName
...
```

Of interest, David Clunie's [Medical Image Format Site](http://www.dclunie.com/).

# \[2015-12-18 Fri\] Tip: GOOGLETRANSLATE your Spreadsheet
---
id: tip-googletranslate-your-spreadsheet
---

Examples from [reference](https://support.google.com/docs/answer/3093331):

``` text
=GOOGLETRANSLATE("Hello World\n","en\n","es")
=GOOGLETRANSLATE(A2,B2,C2)
=GOOGLETRANSLATE(A2)
```

# \[2015-12-18 Fri\] Organize your data with camlistore
---
id: organize-your-data-with-camlistore
---

Checking out [camlistore](https://camlistore.org) to organize all sorts of data. [Scaleway](https://www.scaleway.com/imagehub/camlistore/) enables you to deploy camlistore servers.

# \[2015-12-17 Thu\] Maps dev bookmarks
---
id: maps-dev-bookmarks
---



-   [A new way to make maps with OpenStreetMap \| Hacker News](https://news.ycombinator.com/item?id=26918259).
-   [borders: Country, region and city boundary data from OpenStreetMap, served monthly (mapzen.com)](https://www.mapzen.com/data/borders/).
-   [Farewell, Google Maps (In der Apotheke)](https://www.inderapotheke.de/blog/farewell-google-maps).
-   [Fast, Offline, Reverse Geocoding; or, in Which Polygon am I?](https://hamberg.no/erlend/posts/2015-10-22-geocoding.html).
-   [Free OpenStreetMap tile library: watercolor, black and white, terrain](https://news.ycombinator.com/item?id=22252330).
-   [Import OpenStreetMap XML data into your Unreal Engine 4](https://github.com/ue4plugins/StreetMap/blob/master/README.md).
-   [Location Tech](https://www.locationtech.org).
-   [Map's POI categories](https://wiki.openstreetmap.org/wiki/Map_Features#Amenity).
-   [Mapbox](https://www.mapbox.com/).
-   [Maperitive (offline maps)](http://maperitive.net/).
-   [Mapzen](https://mapzen.com).
-   [Medium's mapping tag](https://medium.com/tag/mapping).
-   [Migrating away from Google Maps and cutting costs by 99% (Hacker News)](https://news.ycombinator.com/item?id=18390425).
-   [Open Addresses](https://openaddresses.io/).
-   [OpenStreetCam](https://openstreetcam.org/map/).
-   [Openstreetmap, a global map for worldwide insight \| Hacker News](https://news.ycombinator.com/item?id=23722133).
-   [OpenStreetMap: Introducing OpenStreetView](https://www.openstreetmap.org/user/mvexel/diary/39274).
-   [Organicmaps: Android and iOS offline maps app for travelers, tourists, hikers…](https://news.ycombinator.com/item?id=27543012).
-   [OSM data in one file](http://wiki.openstreetmap.org/wiki/Planet.osm).
-   [OSM on paper](http://wiki.openstreetmap.org/wiki/OSM_on_Paper).
-   [OSM raw indices](http://download.osmand.net/rawindexes/).
-   [Pigeon Maps – Maps in React with no external dependencies (Hacker News)](https://news.ycombinator.com/item?id=17952361).
-   [Portable OSM](http://news.spatialdev.com/portable-open-street-map/).
-   [Show HN: Tilemaker – DIY vector tiles from OpenStreetMap data \| Hacker News](https://news.ycombinator.com/item?id=27781895).
-   [Static Map API - Overview \| MapQuest API Documentation](https://developer.mapquest.com/documentation/static-map-api/v5/).
-   [Using QGIS to create a custom map](http://www.mostlymaths.net/2015/06/using-qgis-to-create-custom-map.html).
-   [Why Openstreetmap’s product fails to compete with Google Maps \| Hacker News](https://news.ycombinator.com/item?id=25615394).
-   [World Borders Dataset (thematicmapping.org)](http://thematicmapping.org/downloads/world_borders.php).

# \[2015-12-17 Thu\] Use ImageMagick to convert image to grayscale
---
id: use-imagemagick-to-convert-image-to-grayscale
---

Another ImageMagick one-liner I'll likely forget.

``` {.bash org-language="sh"}
mogrify -type Grayscale image.png
```

# \[2015-12-14 Mon\] Drill down Emacs dired with dired-subtree
---
id: drill-down-emacs-dired-with-dired-subtree
---

JCS, from [Irreal](http://irreal.org/blog), recently [highlighted](http://irreal.org/blog/?p%3D4777) fuco's [dired-hacks](https://github.com/Fuco1/dired-hacks). [dired-subtree](https://github.com/Fuco1/dired-hacks/blob/master/dired-subtree.el) is super handy for drilling subdirectories down. Bound \<tab\> and \<backtab\> to toggle and cycle subtrees.

``` {.commonlisp org-language="emacs-lisp"}
(use-package dired-subtree :ensure t
  :after dired
  :config
  (bind-key "<tab>" #'dired-subtree-toggle dired-mode-map)
  (bind-key "<backtab>" #'dired-subtree-cycle dired-mode-map))
```

![](https://xenodium.github.io/images/drill-down-emacs-dired-with-dired-subtree/dired-subtree.gif)

# \[2015-12-14 Mon\] GPG (GnuPG) examples
---
id: gpg-examples
---

## Generate key

``` {.bash org-language="sh"}
gpg --full-generate-key
```

## Export private key

``` {.bash org-language="sh"}
gpg --export-secret-key -a <keyid> > <private.asc>
```

## Import key

``` {.bash org-language="sh"}
gpg --import < <private.asc>
```

## Delete public key

``` {.bash org-language="sh"}
gpg --delete-keys <keyid>
```

## Delete private key

``` {.bash org-language="sh"}
gpg --delete-secret-keys <keyid>
```

## Edit key

``` {.bash org-language="sh"}
gpg --edit-key <keyid>
gpg> uid (lists IDs)
gpg> uid 2 (marks ID)
gpg> deluid (deletes marked ID)
Really remove this user ID? (y/N) y
```

## Change passphrase of the secret key

``` {.bash org-language="sh"}
gpg --edit-key Your-Key-ID-Here
gpg> passwd
gpg> save
```

## References

-   [How To Use GPG on the Command Line (Ghost in the Machines)](http://blog.ghostinthemachines.com/2015/03/01/how-to-use-gpg-command-line/).
-   [GPG Change Passphrase Secret Key Password Command - nixCraft](https://www.cyberciti.biz/faq/linux-unix-gpg-change-passphrase-command/).
-   [The GNU Privacy handbook](https://www.gnupg.org/gph/en/manual.html).

# \[2015-12-14 Mon\] CSS bookmarks
---
id: css-bookmarks
---



-   [58 bytes of css to look great nearly everywhere](https://jrl.ninja/etc/1/).
-   [CSS Layout](https://csslayout.io/).
-   [CSS Protips: A collection of tips to help take your CSS skills pro (Hacker News)](https://news.ycombinator.com/item?id%3D10731360).
-   [CSS Protips: A collection of tips to help take your CSS skills pro](https://github.com/AllThingsSmitty/css-protips).
-   [CSS style guide](http://cssguidelin.es).
-   [CSS-Tricks](https://css-tricks.com/).
-   [CSStickyHeaderFlowLayout](https://github.com/jamztang/CSStickyHeaderFlowLayout).
-   [Dynamics.js: JavaScript library to create physics-based CSS animations](http://dynamicsjs.com/).
-   [Flexbox Froggy, a game for writing CSS code](http://flexboxfroggy.com/).
-   [Howtocenterincss.com (Hacker News)](https://news.ycombinator.com/item?id%3D9405284).
-   [Howtocenterincss.com](http://howtocenterincss.com/).
-   [Optimize CSS delivery (Google Developers)](https://developers.google.com/speed/docs/insights/OptimizeCSSDelivery).
-   [Web Design in 4 minutes (minimal css rules)](https://jgthms.com/web-design-in-4-minutes/).

# \[2015-12-12 Sat\] Resume partial downloads with ssh and rsync
---
id: resume-partial-downloads-with-ssh-and-rsync
---

``` {.bash org-language="sh"}
rsync --rsync-path=/usr/local/bin/rsync \
      --partial \
      --progress \
      --rsh=ssh \
      john@host:/path/to/file \
      path/to/partial/file
```

# \[2015-12-12 Sat\] Emacs text faces
---
id: emacs-text-faces
---

-   Text faces = Text styles.
-   Face attributes: font, height, weight, slant, foreground/background color, and underlining or overlining.
-   Font lock mode automatically assigns faces to text.
-   M-x list-faces-display: Shows faces defined.
-   M-x helm-colors: Also handy.
-   Unspecified attributes are taken from 'default' face.

# \[2015-12-08 Tue\] Preview HTML pages on github
---
id: preview-html-pages-on-github
---

Prepend with <http://htmlpreview.github.io/>?. For example: <http://htmlpreview.github.io/?https://github.com/xenodium/xenodium.github.io/blob/master/index.html>

# \[2015-12-07 Mon\] Flutter setup
---
id: flutter-setup
---

Based on [Getting Started with Flutter](http://flutter.io/getting-started/).

``` {.bash org-language="sh"}
$ curl -O https://storage.googleapis.com/dart-archive/channels/stable/release/1.13.0/sdk/dartsdk-macos-x64-release.zip
$ unzip dartsdk-macos-x64-release.zip
$ export PATH=`pwd`/dart-sdk/bin:$PATH
```

Verify with:

``` {.bash org-language="sh"}
$ pub --version
```

# \[2015-12-07 Mon\] Playing with Dart's analysis server
---
id: playing-with-darts-analysis-server
---

Dart SDK ships with an [analysis server](https://github.com/dart-lang/sdk/tree/master/pkg/analysis_server). Very handy if you'd like to write a completion plugin for your favorite editor. The API is well [documented](http://htmlpreview.github.io/?https://github.com/dart-lang/sdk/blob/master/pkg/analysis_server/doc/api.html). Of interest, there's [LocalDartServer.java](https://github.com/tomsontom/dartedit/blob/master/bundles/at.bestsolution.dart.server.api/src-gen/at/bestsolution/dart/server/api/internal/local/LocalDartServer.java), part of [dartedit](https://github.com/tomsontom/dartedit/blob/master/bundles/at.bestsolution.dart.server.api/src-gen/at/bestsolution/dart/server/api/internal/local/LocalDartServer.java).

``` {.bash org-language="sh"}
$ dart path/to/bin/snapshots/analysis_server.dart.snapshot  --sdk=path/to/dart-sdk
```

NOTE: The server reads requests from standard input. Either escape or execute the following as one-liner json requests.

``` json
{
  "id": "1\n",
  "method": "analysis.setAnalysisRoots\n",
  "params": {
    "included": [
      "path/to/your/dart/project"
    ],
    "excluded": []
  }
}
```

``` json
{
  "id": "3\n",
  "method": "completion.getSuggestions\n",
  "params": {
    "file": "path/to/some/file.dart\n",
    "offset": 673
  }
}
```

# \[2015-12-07 Mon\] Dart bookmarks
---
id: dart-bookmarks
---



-   [Access Dart Analysis server from Java](http://tomsondev.bestsolution.at/2015/08/25/access-dart-analysis-server-from-java/).
-   [Analysis server API](http://htmlpreview.github.io/?https://github.com/dart-lang/sdk/blob/master/pkg/analysis_server/doc/api.html).
-   [Dart tools](https://www.dartlang.org/tools/).

# \[2015-12-06 Sun\] Flutter bookmarks
---
id: flutter-bookmarks
---



-   [Eric Seidel introduces Sky, Dart Developer Summit 2015 (YouTube)](https://www.youtube.com/watch?list%3DPLOU2XLYxmsIIQorIS8gagUiMau9S84vZV&v%3DPnIWl33YMwA).
-   [Flutter - Futures - Isolates - Event Loop](https://www.didierboelens.com/2019/01/futures---isolates---event-loop/).
-   [Flutter: Futures, Isolates, Event Loop (Hacker News)](https://news.ycombinator.com/item?id=18958747).
-   [Flutter: the good, the bad and the ugly – The ASOS Tech Blog – Medium](https://medium.com/asos-techblog/flutter-vs-react-native-for-ios-android-app-development-c41b4e038db9).

# \[2015-12-06 Sun\] Swift bookmarks
---
id: swift-bookmarks
---



-   [10 Swift One Liners To Impress Your Friends](https://www.uraimo.com/2016/01/06/10-Swift-One-Liners-To-Impress-Your-Friends/).
-   [5 secrets of Swift API design](https://binarapps.com/blog/5-secrets-of-swift-api-design).
-   [5 small but significant improvements in Swift 5.1 \| Swift by Sundell](https://www.swiftbysundell.com/articles/5-small-but-significant-improvements-in-swift-5-1/).
-   [\@State messing with initializer flow - Using Swift - Swift Forums](https://forums.swift.org/t/state-messing-with-initializer-flow/25276/10).
-   [A beautiful graphics framework for Material Design in Swift](https://github.com/CosmicMind/Material).
-   [A collection view layout capable of laying out views in vertically scrolling grids and lists (AirBnB)](https://github.com/airbnb/MagazineLayout).
-   [A first look at the new diffable data sources for table views and collection view](https://wwdcbysundell.com/2019/diffable-data-sources-first-look/).
-   [A Technology Freelancer's Guide to Starting a Worker Cooperative](https://news.ycombinator.com/item?id=20908452).
-   [AES256-CBC File Encryption from the Command Line with Swift](https://medium.com/@eneko/aes256-cbc-file-encryption-from-the-command-line-with-swift-cd1f88f2e1ec).
-   [All Episodes · Swift Talk · objc.io](https://talk.objc.io/episodes).
-   [App Architecture (objc.io)](https://www.objc.io/books/app-architecture/).
-   [Async/await in Swift unit tests](https://www.swiftbysundell.com/posts/asyncawait-in-swift-unit-tests).
-   [Avoiding race conditions in Swift \| Swift by Sundell](https://www.swiftbysundell.com/articles/avoiding-race-conditions-in-swift/).
-   [Awesome server side swift](https://github.com/Awesome-Server-Side-Swift/TheList).
-   [Awesome-Swift-Education](https://github.com/hsavit1/Awesome-Swift-Education).
-   [Building DSLs in Swift (Swift by Sundell)](https://www.swiftbysundell.com/posts/building-dsls-in-swift).
-   [Conditional Compilation in Swift, Part 1 (Dave DeLong)](https://davedelong.com/blog/2018/07/25/conditional-compilation-in-swift-part-1/).
-   [Constructing URLs in Swift](https://www.swiftbysundell.com/posts/constructing-urls-in-swift).
-   [Creating a simple browser with WKWebView in Swift](https://www.hackingwithswift.com/read/4/2/creating-a-simple-browser-with-wkwebview).
-   [Curated Swift 5 documentation and reference in GNU Info format](https://github.com/danielmartin/swift-info).
-   [Debugging sourcekit-lsp using LLDB - LLDB - Swift Forums](https://forums.swift.org/t/debugging-sourcekit-lsp-using-lldb/28328/14).
-   [Deciding whether to adopt new Swift technologies \| Swift by Sundell](https://www.swiftbysundell.com/articles/deciding-whether-to-adopt-new-swift-technologies/).
-   [Deep dive into Swift frameworks - The.Swift.Dev.](https://theswiftdev.com/deep-dive-into-swift-frameworks/).
-   [Difference: diff between 2 Swift object instances](https://github.com/krzysztofzablocki/Difference).
-   [Encapsulating configuration code in Swift \| Swift by Sundell](https://www.swiftbysundell.com/articles/encapsulating-configuration-code-in-swift/).
-   [Episode 125 – Building a Layout Library: Building a Responsive Layout · Swift Talk · objc.io](https://talk.objc.io/episodes/S01E125-building-a-responsive-layout).
-   [Equatable - Swift Unboxed](https://swiftunboxed.com/protocols/equatable/).
-   [Formatting everything in swift (lovation, dates, time)](https://nshipster.com/formatter/).
-   [From NSRegularExpression to SwiftRegex](https://www.polpiella.dev/from-nsregular-expression-to-swift-regex).
-   [FunctionKit/README.md at master · mpangburn/FunctionKit · GitHub](https://github.com/mpangburn/FunctionKit/blob/master/README.md).
-   [Get your current address in Swift – Ravi Shankar](http://rshankar.com/get-your-current-address-in-swift/).
-   [Getting started with WKWebView using Swift in iOS 8](https://kinderas.com/technology/2014/6/7/getting-started-with-wkwebview-using-swift-in-ios-8).
-   [Getting to know UITextField](https://grokswift.com/uitextfield).
-   [GitHub - almassapargali/LocationPicker (Swift)](https://github.com/almassapargali/LocationPicker).
-   [GitHub - anas-p/ImagePicker: UIImagePickerController for camera and photo library](https://github.com/anas-p/ImagePicker).
-   [GitHub - burczyk/XcodeSwiftSnippets: Swift 4 code snippets for Xcode](https://github.com/burczyk/XcodeSwiftSnippets).
-   [GitHub - DevLiuSir/CircleProgressBar: This is a simple animation circle progress bar](https://github.com/DevLiuSir/CircleProgressBar).
-   [GitHub - hyperoslo/Cache: Nothing but Cache.](https://github.com/hyperoslo/Cache).
-   [GitHub - liuliu/dflat: Structured Data Store for Mobile](https://github.com/liuliu/dflat).
-   [GitHub - phynet/iOS-URL-Schemes: iOS URL list schemes (Settings)](https://github.com/phynet/iOS-URL-Schemes).
-   [GitHub - Raizlabs/BonMot: Beautiful, easy attributed strings in Swift](https://github.com/Raizlabs/BonMot).
-   [GitHub - raywenderlich/swift-algorithm-club: Swift Algorithm Club](https://github.com/raywenderlich/swift-algorithm-club).
-   [GitHub - saoudrizwan/Disk: Delightful framework for iOS to easily persist strcts, images, and data](https://github.com/saoudrizwan/Disk).
-   [GitHub - swift-embedded/swift-embedded: Swift for Embedded Systems ](https://github.com/swift-embedded/swift-embedded).
-   [GitHub - zhuorantan/LocationPicke (Swift)](https://github.com/zhuorantan/LocationPicker).
-   [How to Add Compiled Frameworks in Swift Package Manager](https://medium.com/better-programming/how-to-add-compiled-frameworks-in-swift-package-manager-f0cdbde84fc7).
-   [How to bridge a Swift View](http://browniefed.com/blog/2015/11/28/react-native-how-to-bridge-a-swift-view/).
-   [How to calculate the SHA hash of a String or Data instance](https://www.hackingwithswift.com/example-code/cryptokit/how-to-calculate-the-sha-hash-of-a-string-or-data-instance).
-   [How to capture Regex group values in Swift \| What did I learn](https://whatdidilearn.info/2018/07/29/how-to-capture-regex-group-values-in-swift.html).
-   [How to check for internet connectivity using NWPathMonitor](https://www.hackingwithswift.com/example-code/networking/how-to-check-for-internet-connectivity-using-nwpathmonitor).
-   [How to create a random terrain tile map using SKTileMapNode and GKPerlinNoiseSource](https://www.hackingwithswift.com/example-code/games/how-to-create-a-random-terrain-tile-map-using-sktilemapnode-and-gkperlinnoisesource).
-   [How to run an external program using Process](https://www.hackingwithswift.com/example-code/system/how-to-run-an-external-program-using-process).
-   [How to work with dates and times in Swift 5, part 4: Adding Swift syntactic sugar](http://www.globalnerdy.com/2020/05/28/how-to-work-with-dates-and-times-in-swift-5-part-4-adding-swift-syntactic-magic/).
-   [I made a “What’s new in Swift 4.2” playground](https://twitter.com/olebegemann/status/1004458683428950018?s=12).
-   [iphone - UIImagePNGRepresentation issues? / Images rotated by 90 degrees](https://stackoverflow.com/questions/3554244/uiimagepngrepresentation-issues-images-rotated-by-90-degrees).
-   [It Looks Like You're Still Trying to Use/Create a Swift Framework](https://www.bignerdranch.com/blog/it-looks-like-youre-still-trying-to-use-a-framework/).
-   [Jason Zurita - Compositional UI Styling in Swift - YouTube](https://www.youtube.com/watch?v=XJreRR0cC3E).
-   [Khanlou \| Implementing Dictionary In Swift](https://khanlou.com/2016/07/implementing-dictionary-in-swift/).
-   [Large Title and Search in iOS 11 – Pavel Gnatyuk – Medium](https://medium.com/@PavelGnatyuk/large-title-and-search-in-ios-11-514d5e020cee).
-   [Lightbox is a convenient and easy to use image viewer for your iOS app](https://github.com/hyperoslo/Lightbox).
-   [Location picker: A ready for use and fully customizable location picker for your app](https://github.com/zhuorantan/LocationPicker).
-   [Logging in Swift \| steipete's blog](https://steipete.com/posts/logging-in-swift/).
-   [macOS Swift Development for Beginners: Part 1](https://www.raywenderlich.com/731-macos-development-for-beginners-part-1).
-   [Martin Lasek on Twitter: "Handling prices in Swift."](https://twitter.com/MartinLasek/status/1256349442472505344).
-   [Migrating an Objective-C class to Swift: a piecemeal approach – Ole Begemann](https://oleb.net/2018/objc-swift-transition/).
-   [Migrating from CocoaPods to Swift Package Manager - The.Swift.Dev.](https://theswiftdev.com/migrating-from-cocoapods-to-swift-package-manager/).
-   [Migrating from Swift 4 to Swift 5 – The Create School – Medium](https://medium.com/thecreateschool/migrating-from-swift-4-to-swift-5-2f425b99436b).
-   [More fun with Swift 5 String Interpolation: Radix (Erica Sadun)](https://ericasadun.com/2018/12/14/more-fun-with-swift-5-string-interpolation-radix-formatting/).
-   [Netguru's Swift Style Guide](https://github.com/netguru/swift-style-guide).
-   [Never: Eliminating Impossible States in Swift Generic Types - NSHipster](https://nshipster.com/never/).
-   [NSWindow Styles \| lukakerr.github.io](https://lukakerr.github.io/swift/nswindow-styles).
-   [Optionals in Swift for newbies](https://medium.com/ios-os-x-development/optionals-in-swift-for-newbies-7199a30707d5).
-   [Path.swift: Delightful, robust, cross-platform and chainable file-pathing functions](https://github.com/mxcl/Path.swift).
-   [Pro Pattern-Matching in Swift - Digital product development agency \| Big Nerd Ranch](https://www.bignerdranch.com/blog/pro-pattern-matching-in-swift/).
-   [Regular Expressions in Swift (groups) - NSHipster](https://nshipster.com/swift-regular-expressions/).
-   [Simple networking in Swift](https://zacwood.me/2018/09/09/simple-networking-swift/).
-   [Slot-based UI development in Swift (Sundell)](https://www.swiftbysundell.com/posts/slot-based-ui-development-in-swift).
-   [Splitting a JSON object into an enum and an associated object with Codable](https://www.donnywals.com/splitting-a-json-object-into-an-enum-and-an-associated-object-with-codable/).
-   [Splitting up Swift types \| Swift by Sundell](https://swiftbysundell.com/articles/splitting-up-swift-types/).
-   [SRChoco: Seorenn's Development Libraries for OS X and iOS (github)](https://github.com/seorenn/SRChoco).
-   \[\[<https://twitter.com/steipete/status/1281578201165320192>\]\[String(string\[currentIndex\])\]\].
-   [Swift - How to authenticate a gRPC call for the Assistant SDK?](https://stackoverflow.com/questions/43797913/how-to-authenticate-a-grpc-call-for-the-assistant-sdk).
-   [Swift 5 Interpolation Part 3: Dates and Number Formatters (Erica Sadun)](https://ericasadun.com/2018/12/16/swift-5-interpolation-part-3-dates-and-number-formatters/).
-   [Swift Development with Visual Studio Code - NSHipster](https://nshipster.com/vscode/).
-   [Swift Resources](http://www.h4labs.com/dev/ios/swift.html).
-   [swift sh adds automatic dependency loading in scripts](https://github.com/mxcl/swift-sh).
-   [Swift Style, Second Edition: An Opinionated Guide to an Opinionated Language by Erica Sadun (The Pragmatic Bookshelf)](https://pragprog.com/book/esswift2/swift-style-second-edition).
-   [Swift Tip: Using AppKit from the Command-line · objc.io](https://www.objc.io/blog/2018/10/02/using-appkit-from-the-command-line/).
-   [Swift.org - Announcing ArgumentParser](https://swift.org/blog/argument-parser/).
-   [Swift.org - API Design Guidelines](https://swift.org/documentation/api-design-guidelines/).
-   [swift/ErrorHandlingRationale.rst at master · apple/swift · GitHub](https://github.com/apple/swift/blob/master/docs/ErrorHandlingRationale.rst).
-   [SwiftLinkPreview: Link Previewer for iOS, macOS, watchOS and tvOS](https://github.com/LeonardoCardoso/SwiftLinkPreview).
-   [SwiftMothly](http://swiftmonthly.com/).
-   [The Complete Guide to Optionals in Swift – Hacking with Swift](https://www.hackingwithswift.com/articles/136/the-complete-guide-to-optionals-in-swift).
-   [The Shift Language (YouTube)](https://www.youtube.com/user/TheSwiftLanguage).
-   [The SwiftPM Library, a place to find packages for Swift](https://swiftpm.co/).
-   [Today marks 4 years since shipping the first release of the rewrite of the Lyft app in Swift](https://twitter.com/scottberrevoets/status/1151228835947401216).
-   [TrozWare blogs on Swift](https://troz.net/).
-   [UILayoutGuide – The Traveled iOS Developer’s Guide – Medium](https://medium.com/the-traveled-ios-developers-guide/uilayoutguide-6b3b552b1890).
-   [Understanding DispatchQueues - SwiftRocks](https://swiftrocks.com/understanding-dispatchqueues.html).
-   [Understanding Swift - free quick start tutorials for Swift developers (hackingwithswift)](https://www.hackingwithswift.com/quick-start/understanding-swift).
-   [Use Neovim as Swift IDE - The Go Blog](https://aozsky.com/swift/swift_ide).
-   [Using errors as control flow in Swif (Sundell)](https://www.swiftbysundell.com/posts/using-errors-as-control-flow-in-swift).
-   [Why Swift Enums with Associated Values Cannot Have a Raw Value](https://medium.com/@PhiJay/why-swift-enums-with-associated-values-cannot-have-a-raw-value-21e41d5ec11).
-   [WKWebView (NSHipster)](https://nshipster.com/wkwebview).
-   [Writing Your App Swiftly](https://www.slideshare.net/SommerPanage1/writing-your-app-swiftly/SommerPanage1/writing-your-app-swiftly).

# \[2015-11-30 Mon\] Installing Emacs spaceline
---
id: installing-emacs-spaceline
---

Gave [Spaceline](https://github.com/TheBB/spaceline/) a try. [Spacemacs](https://github.com/syl20bnr/spacemacs)'s powerline theme. Setup was super simple (Thanks [Eivind Fonn](https://github.com/TheBB) and [Sylvain Benner](https://github.com/syl20bnr/spacemacs)):

``` {.commonlisp org-language="emacs-lisp"}
(use-package spaceline :ensure t
  :config
  (use-package spaceline-config
    :config
    (spaceline-toggle-minor-modes-off)
    (spaceline-toggle-buffer-encoding-off)
    (spaceline-toggle-buffer-encoding-abbrev-off)
    (setq powerline-default-separator 'rounded)
    (setq spaceline-highlight-face-func 'spaceline-highlight-face-evil-state)
    (spaceline-define-segment line-column
      "The current line and column numbers."
      "l:%l c:%2c")
    (spaceline-define-segment time
      "The current time."
      (format-time-string "%H:%M"))
    (spaceline-define-segment date
      "The current date."
      (format-time-string "%h %d"))
    (spaceline-toggle-time-on)
    (spaceline-emacs-theme 'date 'time))
```

![](https://xenodium.github.io/images/installing-emacs-spaceline/spaceline.png)

# \[2015-11-29 Sun\] package.el incomprehensible buffer
---
id: package-el-incomprehensible-buffer
---

Came across "incomprehensible buffer" error in package.el. [Workaround patch](http://osdir.com/ml/general/2015-11/msg22232.html):

``` {.commonlisp org-language="emacs-lisp"}
--- a/lisp/emacs-lisp/package.el
+++ b/lisp/emacs-lisp/package.el
@@ -1161,6 +1161,7 @@ package--with-work-buffer
(let* ((url (concat ,url-1 ,file))
       (callback (lambda (status)
                   (let ((b (current-buffer)))
+                    (goto-char (point-min))
                     (unwind-protect (wrap-errors
                                      (when-let ((er (plist-get
                                                      status :error)))
                                        (error "Error retrieving: %s %S" url er))
```

# \[2015-11-29 Sun\] Leading bookmarks
---
id: leading-bookmarks
---



-   [Agile's early evangelists wouldn't mind watching Agile die](https://news.ycombinator.com/item?id=22969533).
-   [An incomplete list of skills senior engineers need, beyond coding \| Hacker News](https://news.ycombinator.com/item?id=27414443).
-   [Ask HN: How to Be a Good Technical Lead? (Hacker News)](https://news.ycombinator.com/item?id%3D10395046).
-   [Books on leveling up as a manager](https://twitter.com/DanielleMorrill/status/1321092574837383168).
-   [Bryan Cantrill on Twitter: "So, my thoughts on engineering performance management…"](https://twitter.com/bcantrill/status/1216491216356823040).
-   [Dan Abramov: What is your favorite book about management… (twitter)](https://twitter.com/dan_abramov/status/1203486500731719681).
-   [Do You Have a Manager’s Mindset?](https://hbr.org/2015/10/do-you-have-a-managers-mindset).
-   [First Timers Only: A suggestion to Open Source project maintainers](https://medium.com/@kentcdodds/first-timers-only-78281ea47455#.hj28umxei).
-   [How to Give Tough Feedback That Helps People Grow](https://hbr.org/2015/08/how-to-give-tough-feedback-that-helps-people-grow).
-   [Interviews with developers who became managers (Hacker News)](https://news.ycombinator.com/item?id=19485559).
-   [Secrets of the Superbosses](https://hbr.org/2016/01/secrets-of-the-superbosses).
-   [Shifting from Star Performer to Star Manager](https://hbr.org/2015/10/shifting-from-star-performer-to-star-manager).
-   [The Joel Test: 12 Steps to Better Code](http://www.joelonsoftware.com/articles/fog0000000043.html?__s=5ww3bdbkavuhrw1fhfpp).
-   [The Manager as Debugger](http://whilefalse.blogspot.co.uk/2015/11/the-manager-as-debugger.html?m=1).
-   [The Manager's Path: A Guide for Tech Leaders Navigating Growth and Change](https://www.amazon.com/Managers-Path-Leaders-Navigating-Growth/dp/1491973897).

# \[2015-11-29 Sun\] Online reading backlog
---
id: online-reading-backlog
---



[TODO]{.todo .TODO} [Phrack 69](http://phrack.org/issues/69/1.html).

[TODO]{.todo .TODO} [A Simple Formula for Changing Our Behavior](https://hbr.org/2015/10/a-simple-formula-for-changing-our-behavior?utm_campaign=harvardbiz&utm_source=twitter&utm_medium=social).

[TODO]{.todo .TODO} [Be Grateful More Often](https://hbr.org/2013/11/be-grateful-more-often).

[TODO]{.todo .TODO} [GTD sucks for creative work](http://heydave.org/post/24286720323/gtd-sucks-for-creative-work-heres-an-alternative).

[TODO]{.todo .TODO} [Land, Capital, Attention: This Time it Is the Same](http://continuations.com/post/131372549150/land-capital-attention-this-time-it-is-the-same).

[TODO]{.todo .TODO} [Mindset: What You Believe Affects What You Achieve (Gates Notes)](http://www.gatesnotes.com/Books/Mindset-The-New-Psychology-of-Success).

[TODO]{.todo .TODO} [The Case for Getting Rid of Borders—Completely](http://www.theatlantic.com/business/archive/2015/10/get-rid-borders-completely/409501/?single_page%3Dtrue).

[TODO]{.todo .TODO} [The Ultimate Guide to Personal Productivity Methods](https://blog.todoist.com/2015/11/30/ultimate-guide-personal-productivity-methods/).

[TODO]{.todo .TODO} [Thing Explainer: A Basic Guide for Curious Minds (Gates Notes)](http://www.gatesnotes.com/Books/Thing-Explainer).

[TODO]{.todo .TODO} [Your body language shapes who you are](https://www.ted.com/talks/amy_cuddy_your_body_language_shapes_who_you_are?language%3Den).

# \[2015-11-28 Sat\] Travel lifestyle bookmarks
---
id: travel-lifestyle-bookmarks
---



-   [1991 VW Vanagon Westfalia campervan](https://twitter.com/getterhiss/status/1325835494773592071).
-   [5 Travel Lessons You Can Use at Home](http://fourhourworkweek.com/2010/02/25/rolf-potts-vagabonding-travel/).
-   [50 Best Travel Tips from 10 Years of Travel - Your RV Lifestyle](https://www.your-rv-lifestyle.com/travel-tips.html).
-   [A new chapter – full-time working from a van in a forest \| Hacker News](https://news.ycombinator.com/item?id=26284635).
-   [Bali Digital Nomad Guide - How To Live In Bali As A Digital Nomad](https://liveworkplaytravel.com/bali-digital-nomad-guide-live-in-bali-as-a-digital-nomad/).
-   [Bootstrapping in Bangkok is the best option](https://medium.com/ohmygeorge-blog/bootstrapping-in-bangkok-is-the-best-option-c70e98f2b781#.2qbxef7oa).
-   [goruck bag](http://www.goruck.com/en).
-   [Grooming on airplanes: What's acceptable? - The Washington Post](https://www.washingtonpost.com/travel/tips/dos-donts-in-flight-grooming/).
-   [How Much Does it Cost to Drop Everything and Travel Asia for 3 Months?](https://jamesstuber.com/long-term-travel-costs/).
-   [I am a US citizen and I am thinking of retiring in Thailand.](https://www.quora.com/I-am-a-US-citizen-and-I-am-thinking-of-retiring-in-Thailand-What-are-the-pros-and-cons-and-is-it-advisable).
-   [Lessons in Planning and Travel During COVID-19 – Uncornered Market](https://uncorneredmarket.com/planning-travel-covid19/).
-   [My 30 Best Travel Tips After 8 Years Traveling The World • Expert Vagabond](https://expertvagabond.com/best-travel-tips/).
-   [My partner & I want to backpack around as much of the world as we can for 6-12 months. What surprises did you learn on the way I should plan for?](https://www.quora.com/My-partner-I-want-to-backpack-around-as-much-of-the-world-as-we-can-for-6-12-months-What-surprises-did-you-learn-on-the-way-I-should-plan-for).
-   [NomadList](http://nomadlist.io/?hn): Best cities to work from remotely.
-   [OECD Better Life Index](http://www.oecdbetterlifeindex.org/topics/life-satisfaction/).
-   [onlinetaxman.com Prices](https://blog.calebjay.com/posts/taxman-prices/).
-   [Peace and understanding through travel and hosting \| Servas Online](https://servas.org/).
-   [Round The World Trip 2017/2018: The Costs - Just Another Backpacker](http://www.justanotherbackpacker.com/round-the-world-trip-20172018-the-costs/).
-   [Show HN: I made a database of remote companies (Hacker News)](https://news.ycombinator.com/item?id=11890991).
-   [Show HN: Nomad Visa – Working remotely? Explore your visa options \| Hacker News](https://news.ycombinator.com/item?id=28167358).
-   [tom bihn bags](http://www.tombihn.com).
-   [Travis translators](https://www.travistranslator.com/product-category/translators/).
-   [waveUPtravel](http://waveuptravel.com).
-   [What are the best ways to earn money while traveling around the world? (Quora)](https://www.quora.com/What-are-the-best-ways-to-earn-money-while-traveling-around-the-world).
-   [where to emigrate to?](https://twitter.com/twostraws/status/1336613071347982336).
-   [Why You Should Remote Work in Taiwan](https://blog.calebjay.com/posts/why-taiwan/).

# \[2015-11-26 Thu\] SQL bookmarks
---
id: sql-bookmarks
---



-   [Launching LiteCLI](https://www.pgcli.com/launching-litecli.html).
-   [Literate SQL](https://modern-sql.com/use-case/literate-sql).
-   [Show HN: SQL Trainer – Learn SQL by doing live data exercises (Hacker News)](https://news.ycombinator.com/item?id=18335723).
-   [SQL Series: From A to Z - DEV Community](https://dev.to/helenanders26/sql-series-from-a-to-z-2pk9).
-   [SQL tips and tricks](https://github.com/ben-n93/SQL-tips-and-tricks).
-   [The interesting ideas in Datasette](https://simonwillison.net/2018/Oct/4/datasette-ideas/).
-   [You Can Do it in SQL, Stop Writing Extra Code for it - DEV Community](https://dev.to/geshan/you-can-do-it-in-sql-stop-writing-extra-code-for-it-lok).

# \[2015-11-26 Thu\] Unix/Linux tools bookmarks
---
id: unix-linux-tools-bookmarks
---



-   [(small) Guide on using mtree (The FreeBSD Forums)](https://forums.freebsd.org/threads/small-guide-on-using-mtree.61113/).
-   [15 Practical Linux cURL Command Examples](http://www.thegeekstuff.com/2012/04/curl-examples/).
-   [20 awk examples – Linux Hint](https://linuxhint.com/20_awk_examples/).
-   [7 Awesome Open Source Analytics Software For Linux and Unix - nixCraft](https://www.cyberciti.biz/open-source/7-awesome-open-source-analytics-weblog-analysis-softwares/).
-   [A practical proposal for migrating to safe long sessions on the web (Hacker News)](https://news.ycombinator.com/item?id=12137576).
-   [A practical security guide for web developers (Hacker News)](https://news.ycombinator.com/item?id=12140477).
-   [A Unix Utility to Know About: lsof (2009) (Hacker News)](https://news.ycombinator.com/item?id=12364077).
-   [agnoster.bash](https://gist.github.com/rtfpessoa/7a745be31e89673b8fc7).
-   [An Elegant Way of Managing Dotfiles](https://huxiaoxing.com/tools/an-elegant-way-of-managing-dotfiles).
-   [Announcing gRPC Support in Nginx (Hacker News)](https://news.ycombinator.com/item?id=16612580).
-   [ASCII art text with figlet](http://www.figlet.org).
-   [Autotools Mythbuster](https://autotools.io/index.html).
-   [awk FAQ](http://www.faqs.org/faqs/computer-lang/awk/faq/).
-   [awk in 20 minutes](http://ferd.ca/awk-in-20-minutes.html).
-   [Balthazar – Text processing in the shell](https://blog.balthazar-rouberol.com/text-processing-in-the-shell).
-   [Bash Parameter Expansion (Linux Hint)](https://linuxhint.com/bash_parameter_expansion/).
-   [Bash pipe tutorial (Linux Hint)](https://linuxhint.com/bash_pipe_tutorial/).
-   [Bash Until Loops (Linux Hint)](https://linuxhint.com/bash_until_loops/).
-   [Basic SSH Security (The Art of Not Asking Why)](https://joshrollinswrites.com/help-desk-head-desk/basic-ssh-security/).
-   [Best Practices for UNIX chroot](http://www.unixwiz.net/techtips/chroot-practices.html).
-   [Blacklisting domains with Postfix - John Bokma](http://johnbokma.com/blog/2019/05/13/blacklisting-domains-with-postfix.html).
-   [Bruce Barnett's awk tutorial](http://www.grymoire.com/Unix/Awk.html).
-   [Bruce Barnett's sed tutorial](http://www.grymoire.com/Unix/sed.html).
-   [Cast All The Things](https://github.com/skorokithakis/catt).
-   [CLI: improved (better cli alternatives)](https://remysharp.com/2018/08/23/cli-improved).
-   [CLI: Improved, better CLI alternatives (Hacker News)](https://news.ycombinator.com/item?id=17874718).
-   [Command-line-text-processing: From finding text to search and replace, from sorting to beautifying text and more](https://github.com/learnbyexample/Command-line-text-processing).
-   [Cool but obscure unix tools at kkovacs.eu](http://kkovacs.eu/cool-but-obscure-unix-tools#).
-   [Curl Cookbook](https://catonmat.net/cookbooks/curl).
-   [curl exercises (Julia Evans)](https://jvns.ca/blog/2019/08/27/curl-exercises/).
-   [Curl in Bash Scripts by Example (Linux Hint)](https://linuxhint.com/curl_bash_examples/).
-   [Curl vs Wget (Hacker News)](https://news.ycombinator.com/item?id=11213213).
-   [CURRYFINGER - SNI & Host header spoofing utility - DUALUSE](https://dualuse.io/blog/curryfinger/).
-   [CyberChef](https://gchq.github.io/CyberChef/).
-   [Encrypt disk with bioctl(8) and CRYPTO - Roman Zolotarev](https://www.romanzolotarev.com/openbsd/bioctl-crypto.html).
-   [entr runs commands when a file changes](http://puntoblogspot.blogspot.co.uk/2016/01/entr-suckless-inotify-tools.html?m=1).
-   [Every Linux networking tool I know (zine)](https://wizardzines.com/networking-tools-poster/).
-   [fasd a command-line productivity booster](https://github.com/clvv/fasd).
-   [Find Length of String in Bash (Linux Hint)](https://linuxhint.com/length_of_string_bash/).
-   [For the Love of Pipes (Hacker News)](https://news.ycombinator.com/item?id=18967249).
-   [git-annex](http://git-annex.branchable.com/assistant/).
-   [GitHub - antonmedv/fx: Command-line tool and terminal JSON viewer](https://github.com/antonmedv/fx/).
-   [GitHub - atorstling/origin: Track down the origin of a command](https://github.com/atorstling/origin).
-   [GitHub - insanum/gcalcli: Google Calendar Command Line Interface](https://github.com/insanum/gcalcli).
-   [GitHub - raboof/nethogs: Linux 'net top' tool](https://github.com/raboof/nethogs).
-   [How to trim string in bash (Linux Hint)](https://linuxhint.com/trim_string_bash/).
-   [How to use array in awk command (Linux Hint)](https://linuxhint.com/array_awk_command/).
-   [How To Use Bash's Job Control to Manage Foreground and Background Processes](https://www.digitalocean.com/community/tutorials/how-to-use-bash-s-job-control-to-manage-foreground-and-background-processes).
-   [How to use conditional statement in awk command (Linux Hint)](https://linuxhint.com/conditional_statement_awk_command/).
-   [How to Use dd Command on Linux (Linux Hint)](https://linuxhint.com/dd_command_linux-2/).
-   [How to use for loop in awk command (Linux Hint)](https://linuxhint.com/for_loop_awk_command/).
-   [HTTP static server one-liners \| Hacker News](https://news.ycombinator.com/item?id=22082585).
-   [httpie: Command line HTTP client, a user-friendly curl alternative](https://github.com/jkbrzt/httpie).
-   [Iptables for beginners (Linux Hint)](https://linuxhint.com/iptables_for_beginners/).
-   [Jeffrey Paul: Stupid Unix Tricks (Yubikey ssh on macOS)](https://sneak.berlin/20191011/stupid-unix-tricks/).
-   [Jessie Frazelle's Blog: For the Love of Pipes](https://blog.jessfraz.com/post/for-the-love-of-pipes/).
-   [Julia Evans's zines (unix tools)](https://jvns.ca/zines/).
-   [Kira McLean \| How To Set Up Your Own Nextcloud Server](https://kiramclean.com/blog/how-to-set-up-your-own-nextcloud-server/).
-   [LD_DEBUG awesomeness (using ls)](https://twitter.com/beorn__/status/1281504590073073666).
-   [Learn a Little AWK (Irreal)](http://irreal.org/blog/?p=7323).
-   [Linux cp Command (Linux Hint)](https://linuxhint.com/linux_cp_command/).
-   [Linux environment management](http://bryan-murdock.blogspot.co.uk/2015/12/linux-environment-management.html).
-   [Linux grep Command (Linux Hint)](https://linuxhint.com/linux_grep_command/).
-   [Linux lsof Command (Linux Hint)](https://linuxhint.com/linux_lsof_command/).
-   [Linux profiling at Netflix](http://www.slideshare.net/brendangregg/scale2015-linux-perfprofiling).
-   [Linux tar Command (Linux Hint)](https://linuxhint.com/linux_tar_command-2/).
-   [Linux tr Command (Linux Hint)](https://linuxhint.com/linux_tr_command/).
-   [Magic Pipes: suite of tools to construct powerful Unix shell pipelines that operate on structured data](https://kitten-technologies.co.uk/project/magic-pipes/doc/trunk/README.wiki).
-   [Make cURL follow redirects](http://stackoverflow.com/questions/3519939/make-curl-follow-redirects).
-   [Managing macOS dot files with stow](https://github.com/idcrook/i-dotfiles/blob/master/INSTALL-macos.md).
-   [Marcin Borkowski: 2019-03-11 Name-based UUID generation](http://mbork.pl/2019-03-11_Name-based_UUID_generation).
-   [More than you really wanted to know about Patch (Hacker News)](https://news.ycombinator.com/item?id=18922030).
-   [My First 10 Minutes on a Server (Hacker News)](https://news.ycombinator.com/item?id=11909543).
-   [Nginx vs Apache](https://www.keycdn.com/support/nginx-vs-apache).
-   [Nmap Alternatives (Linux Hint)](https://linuxhint.com/nmap_alternatives/).
-   [NMAP basics Tutorial (Linux Hint)](https://linuxhint.com/nmap_basics_tutorial/).
-   [nmap flags and what they do (Linux Hint)](https://linuxhint.com/nmap_flags/).
-   [Nmap: scan IP ranges (Linux Hint)](https://linuxhint.com/nmap_scan_ip_ranges/).
-   [Peek: Simple animated GIF screen recorder with an easy to use interface](https://github.com/phw/peek).
-   [Practical Linux Hardening Guide (Hacker News)](https://news.ycombinator.com/item?id=18992930).
-   [Rclone (mount many cloud services locally)](https://rclone.org/).
-   [redbean](https://justine.lol/redbean/index.html).
-   [Remove duplicate lines from files keeping the original order](https://iridakos.com/how-to/2019/05/16/remove-duplicate-lines-preserving-order-linux.html).
-   [Ripgrep Cheatsheet • Phil's Blog](https://www.philipdaniels.com/blog/2019/ripgrep-cheatsheet/).
-   [Show HN: Ultimate Plumber – a tool for writing Linux pipes with live preview (Hacker News)](https://news.ycombinator.com/item?id=18291302).
-   [smenu is a selection filter just like sed is an editing filter](https://github.com/p-gen/smenu).
-   [SoftEther VPN](http://www.softether.org).
-   [SSH: Best practices](https://blog.0xbadc0de.be/archives/300).
-   [Text Manipulation with Command Line Utilities](http://irreal.org/blog/?p=7184).
-   [the-book-of-secret-knowledge: A collection of inspiring lists, manuals, cheatsheets, blogs, hacks, one-liners, cli/web tools, and more](https://github.com/trimstray/the-book-of-secret-knowledge).
-   [trackerjacker/README.md at master · calebmadrigal/trackerjacker · GitHub](https://github.com/calebmadrigal/trackerjacker/blob/master/README.md).
-   [Understanding Awk (Practical Guide)](https://devarea.com/understanding-awk-practical-guide/).
-   [Unison File Synchronizer](https://www.cis.upenn.edu/~bcpierce/unison/).
-   [Unix commands you wish you knew years ago (Reddit)](https://www.reddit.com/r/linux/comments/mi80x/give_me_that_one_command_you_wish_you_knew_years/).
-   [Unix for the Beginning Mage](http://unixmages.com/ufbm.pdf).
-   [usbrip: Simple CLI forensics tool for tracking USB device artifacts (history of USB events) on GNU/Linux](https://github.com/snovvcrash/usbrip).
-   [Using gnu stow to manage your dotfiles](http://brandon.invergo.net/news/2012-05-26-using-gnu-stow-to-manage-your-dotfiles.html).
-   [Welcome & Magic-Wormhole](https://magic-wormhole.readthedocs.io/en/latest/welcome.html#example).
-   [xdotool - fake keyboard/mouse input, window management, and more - semicomplete](https://www.semicomplete.com/projects/xdotool/).
-   xmllint –format.
-   [Your terminal is not a terminal: An Introduction to Streams](https://lucasfcosta.com/2019/04/07/streams-introduction.html).
-   [Your unofficial guide to dotfiles on GitHub](https://dotfiles.github.io/).

# \[2015-11-26 Thu\] Couchbase React Native bookmarks
---
id: couchbase-react-native-bookmarks
---



-   [Couchbase Mobile discussion group](https://groups.google.com/forum/#!forum/mobile-couchbase).
-   [Couchbase Mobile Native API](http://developer.couchbase.com/documentation/mobile/current/develop/guides/couchbase-lite/native-api/index.html).
-   [Couchbase Mobile](http://developer.couchbase.com/mobile/).
-   [Couchbase sync gateway](https://github.com/couchbase/sync_gateway).
-   [Getting Started with React Native Android and Couchbase Lite](http://blog.couchbase.com/2015/november/getting-started-with-react-native-android-and-couchbase-lite).

# \[2015-11-26 Thu\] Installing Emacs 25 devel on Mac OS X
---
id: installing-emacs-on-mac-os-x
---

## Stable

``` {.bash org-language="sh"}
brew update
brew install emacs --HEAD --use-git-head --with-cocoa --with-srgb --with-gnutls
brew linkapps emacs
```

## Development

``` {.bash org-language="sh"}
  brew update
  brew install emacs --devel --with-cocoa --with-srgb --with-gnutls
  brew linkapps emacs
then
```

Had problems loading seq. Removed byte-compiled packages:

``` {.bash org-language="sh"}
$ find ~/.emacs.d/elpa -iname *.elc -exec rm '{}' \;
```

# \[2015-11-25 Wed\] Diagram tools bookmarks
---
id: diagram-tools-bookmarks
---



-   [A Quick Introduction to Graphviz](https://www.worthe-it.co.za/programming/2017/09/19/quick-introduction-to-graphviz.html).
-   [Create diagrams with code using Graphviz – ncona.com – Learning about computers](https://ncona.com/2020/06/create-diagrams-with-code-using-graphviz/).
-   [Diagram.Codes](https://www.diagram.codes/).
-   [Flowchart Maker & Online Diagram Software](https://www.draw.io/).
-   [Graphviz it! - fiddle with diagrams](http://graphviz.it/).
-   [Graphviz node shapes](http://soc.if.usp.br/manual/graphviz/html/info/shapes.html).
-   [PlantText UML Editor](https://www.planttext.com/).
-   [Svgbob: Convert your ASCII diagram scribbles into happy little SVG](https://news.ycombinator.com/item).
-   [TeXample.net (TeX examples)](http://www.texample.net/tikz/examples/tag/graphs/).
-   [What do you like using for software architecture diagrams? (twitter)](https://twitter.com/maybekatz/status/1137254612468154370).

# \[2015-11-24 Tue\] Licensing bookmarks
---
id: licensing-bookmarks
---

-   [choosealicense.com](http://choosealicense.com/) (Choosing an open source license doesn’t need to be scary).
-   [choosealicense.com (github)](https://github.com/github/choosealicense.com).
-   [tldrlegal.com](https://tldrlegal.com/) (Software Licenses in Plain English).

# \[2015-11-23 Mon\] Synology bookmarks
---
id: synology-bookmarks
---



-   [Backup your files to an external drive or a shared file DSM 6.0 – Synoguide](https://synoguide.com/2016/04/21/backup-your-files-to-an-external-drive-or-a-shared-file-dsm-6-0/).
-   [Ext4 vs. Btrfs: Why We're Making The Switch {Linux}](https://www.makeuseof.com/tag/ext4-btrfs-making-switch-linux/).
-   [How to make your Synology Disk station (NAS) more secure? – BPMSG](https://bpmsg.com/how-to-make-your-synology-disk-station-nas-more-secure/).
-   [How to use the Files app to connect to a network server from your iPhone](https://www.techrepublic.com/article/how-to-use-the-files-app-to-connect-to-a-network-server-from-your-iphone-or-ipad/).
-   [Josh Dick » Configuring SSH and SCP/SFTP on DSM 5.0 for Synology DiskStations](https://joshdick.net/2014/04/12/configuring_ssh_and_scp_sftp_on_dsm_5.0_for_synology_diskstations.html).
-   [Log in to a Synology DiskStation using SSH keys as a user other than root](https://www.chainsawonatireswing.com/2012/01/16/log-in-to-a-synology-diskstation-using-ssh-keys-as-a-user-other-than-root/).
-   [Look into Synology's file encryption](http://blog.markusbordihn.de/2012/02/encryption-of-synology-diskstation-how.html).
-   [RAID5 vs SHR - Ars Technica OpenForum](https://arstechnica.com/civis/viewtopic.php?t=1273997).
-   [reddit: Please confirm that I chose the right option (SHR1 with DS718+)](https://www.reddit.com/r/synology/comments/73f7tb/please_confirm_that_i_chose_the_right_option_shr1/).
-   [Reset your Admin password in your Synology – Synoguide](https://synoguide.com/2014/07/30/reset-admin-password-synology/).

# \[2015-11-22 Sun\] Backup bookmarks
---
id: backup-bookmarks
---

-   [HGST Deskstar NAS 3.5-Inch 6TB 7200RPM SATA III 128MB Cache Internal Hard Drive (0S03839)](http://www.amazon.com/gp/product/B00O0M5QK8).
-   [I found the Holy Grail of backups](https://www.stavros.io/posts/holy-grail-backups/).
-   [Kingston Technology 4GB 1600MHz DDR3L PC3-12800 1.35V Non-ECC CL11 SODIMM Intel Laptop Memory KVR16LS11/4](http://www.amazon.com/gp/product/B00CQ35GYE).
-   [Show HN: Baxx – Unix-friendly backup service (Hacker News)](https://news.ycombinator.com/item?id=19482280).
-   [Synology Disk Station 8-Bay (Diskless) Network Attached Storage (NAS) (DS1815+)](http://www.amazon.com/gp/product/B00P3RPMEO/ref%3Das_li_ss_tl?psc%3D1&redirect%3Dtrue&ref_%3Doh_aui_detailpage_o01_s00&linkCode%3Dsl1&tag%3Dnatfrie-20&linkId%3D9867e6a1134b8c16fb39bd06c39bf1ef).
-   [Tarsnap: online backups for the truly paranoid](http://www.tarsnap.com/).

# \[2015-11-22 Sun\] Making hummus
---
id: making-hummus
---

Made hummus, based on [Delicious Istanbul's](http://www.deliciousistanbul.com/blog/2013/04/28/5-secrets-to-perfect-hummus/) [5 Secrets to Perfect Hummus](http://www.deliciousistanbul.com/blog/2013/04/28/5-secrets-to-perfect-hummus/) ([wayback machine](https://web.archive.org/web/20160829162734/deliciousistanbul.com/blog/2013/04/28/5-secrets-to-perfect-hummus/)) post.

-   160 g dry chickpeas.
-   4 cloves garlic minced.
-   1 tsp fine sea salt.
-   1 1/2 tbsp lemon juice.
-   1/4 tsp ground cumin.
-   6 tbsp tahini paste.
-   2/3 cup cooking water.
-   Extra virgin olive oil, for serving.
-   Red pepper flakes, for serving.
-   Zahter mixture, for serving.

1.  Soak chickpeas overnight.
2.  Discard water and rinse chickpeas.
3.  Cook in low heat (about 5 cups water) for 1.5 hours for until soft (but keeping shape.) Check if can be mashed with thumnb.
4.  Save cooking water.
5.  Peal chickpeas (optional).
6.  Blend ingredients until silky paste. Taste and add lemon/salt/cooking water.

Keeps in fridge for 3-4 days. Freeze otherwise.

![](https://xenodium.github.io/images/making-hummus/hummus-01.jpg) ![](https://xenodium.github.io/images/making-hummus/hummus-02.jpg) ![](https://xenodium.github.io/images/making-hummus/hummus-03.jpg) ![](https://xenodium.github.io/images/making-hummus/hummus-04.jpg) ![](https://xenodium.github.io/images/making-hummus/hummus-05.jpg) ![](https://xenodium.github.io/images/making-hummus/hummus-06.jpg) ![](https://xenodium.github.io/images/making-hummus/hummus-07.jpg) ![](https://xenodium.github.io/images/making-hummus/hummus-08.jpg) ![](https://xenodium.github.io/images/making-hummus/hummus-09.jpg)

# \[2015-11-22 Sun\] Nara travel bookmarks
---
id: nara-travel-bookmarks
---

-   [Kōfuku-ji](https://en.wikipedia.org/wiki/K%25C5%258Dfuku-ji).
-   [Nara Buddha temple](https://en.wikipedia.org/wiki/T%C5%8Ddai-ji).

# \[2015-11-21 Sat\] Kubernetes bookmarks
---
id: kubernetes-bookmarks
---



-   [A Tutorial Introduction to Kubernetes (Hacker News)](https://news.ycombinator.com/item?id=17462043).
-   [Borg, Omega, Kubernetes: Lessons learned from container management over a decade (Hacker News)](https://news.ycombinator.com/item?id=11216020).
-   [Fabric8 is an integrated open source DevOps and Integration Platform (Kubernetes or OpenShift)](http://fabric8.io/).
-   [hokusai: Artsy's Docker / Kubernetes CLI and Workflow](https://github.com/artsy/hokusai).
-   [Kubernetes by Example \| Hacker News](https://news.ycombinator.com/item?id=14452819).
-   [Swarm vs. Fleet vs. Kubernetes vs. Mesos (Hacker News)](https://news.ycombinator.com/item?id%3D10438273).
-   [Swarm vs. Fleet vs. Kubernetes vs. Mesos](https://news.ycombinator.com/item?id%3D10438273).
-   [The ultimate guide for local development on Kubernetes](https://codefresh.io/howtos/local-k8s-draft-skaffold-garden/).

# \[2015-11-21 Sat\] Docker bookmarks
---
id: docker-bookmarks
---



-   \[\[<https://news.ycombinator.com/item?id=25619319>

\]\[Dockerfile Best Practices \| Hacker News\]\].

-   [A Beginner’s Guide To Docker Compose – Linux Hint](https://linuxhint.com/beginners_guide_docker_compose/).
-   [Basic Docker Commands for Beginners \| Hacker News](https://news.ycombinator.com/item?id=22964972).
-   [Docker for Beginners (Hacker News)](https://news.ycombinator.com/item?id%3D10890233).
-   [Docker for Beginners](http://prakhar.me/docker-curriculum/).
-   [How To Remove Docker Images, Containers, and Volumes \| DigitalOcean](https://www.digitalocean.com/community/tutorials/how-to-remove-docker-images-containers-and-volumes).
-   [Simplifying Docker on OS X (Hacker News)](https://news.ycombinator.com/item?id%3D10969052).
-   [What problems have you run into in practice when using containers?](https://twitter.com/b0rk/status/1237528379097616388).

# \[2015-11-21 Sat\] Angular bookmarks
---
id: angular-bookmarks
---

-   [Egghead.io's Angular 2 lessons](https://egghead.io/technologies/angular2).

# \[2015-11-21 Sat\] Mac OS bookmarks
---
id: mac-os-bookmarks
---



-   [Customizing the Cocoa Text System (github)](https://github.com/jrus/cocoa-text-system).
-   [Customizing the Cocoa Text System (\~/Library/KeyBindings/DefaultKeyBinding.dict)](http://www.hcs.harvard.edu/~jrus/site/cocoa-text.html).
-   [GitHub - ttscoff/KeyBindings: DefaultKeybindings.dict for Mac OS X](https://github.com/ttscoff/KeyBindings).
-   [NSResponder (useful for DefaultKeyBinding.dict)](https://developer.apple.com/documentation/appkit/nsstandardkeybindingresponding?language=objc).
-   [DaisyDisk](https://www.daisydiskapp.com/) (what's taking up your disk space).
-   [DTrace: {even better than} strace for OS X \| 8th Light](https://8thlight.com/blog/colin-jones/2015/11/06/dtrace-even-better-than-strace-for-osx.html).
-   [Getting absolute path in Bash in OSX](http://flummox-engineering.blogspot.com/2014/06/getting-absolute-path-in-bash-in-osx.html).
-   [GitHub - fitztrev/shuttle: A simple SSH shortcut menu for macOS](https://github.com/fitztrev/shuttle).
-   [Guide to Securing Apple OS X](http://csrc.nist.gov/publications/drafts/800-179/sp800_179_draft.pdf).
-   [Hammerspoon](http://www.hammerspoon.org).
-   [kextstat](http://www.manpagez.com/man/8/kextstat/).
-   [KextViewr: View all modules on that are loaded in the OS kernel](https://objective-see.com/products/kextviewr.html).
-   [Little Snitch](https://www.obdev.at/products/littlesnitch/index.html).
-   [macOS Development for Beginners: Part 1](https://www.raywenderlich.com/151741/macos-development-beginners-part-1).
-   [macOS Development for Beginners: Part 2](https://www.raywenderlich.com/151746/macos-development-beginners-part-2).
-   [macOS Development for Beginners: Part 3](https://www.raywenderlich.com/151748/macos-development-beginners-part-3).
-   [Marzipan: Porting iOS Apps to the Mac (Inside PSPDFKit)](https://pspdfkit.com/blog/2018/porting-ios-apps-to-mac-marzipan-iosmac-uikit-appkit/).
-   [Phoenix: A lightweight macOS window and app manager scriptable with JavaScript](https://github.com/kasper/phoenix).
-   [Subler: Mac OS X app created to mux and tag mp4 files](https://subler.org/).
-   [Which OS X Applications do you find indispensable? (Stack Exchange)](https://apple.stackexchange.com/questions/82/which-os-x-applications-do-you-find-indispensable/).

# \[2015-11-21 Sat\] easy_install-\>pip-\>conda
---
id: easy_install-pip-conda
---

Spotted [Conda](http://conda.pydata.org/docs/index.html) package manager. It handles python installations, in addition to package management. There's also a package index provided by [Binstar](https://binstar.org/). Installed [Miniconda](http://conda.pydata.org/miniconda.html), the bare bones Conda environment.

Can't find a python package in Binstar? Here's a post on [Using PyPi Packages with Conda](http://www.peterbronez.com/Using%2520PyPi%2520Packages%2520with%2520Conda). If that fails, you can try pip from your Conda python environment.

# \[2015-11-16 Mon\] Traditional music bookmarks
---
id: traditional-music-bookmarks
---



-   [Cliff Sloane's asian classical music in mp3 format](http://asianclassicalmp3.org/).
-   [Oriental traditional music](http://oriental-traditional-music.blogspot.in).
-   [Shruti Box comparison](https://www.youtube.com/watch?v%3D4PVGmjYypGU&feature%3Dyoutu.be).

# \[2015-11-04 Wed\] Recover from an unresponsive Emacs
---
id: recover-from-an-unresponsive-emacs
---

[Wilfred Hughes](https://twitter.com/_wilfredh) has a handy [tip](https://twitter.com/_wilfredh/status/659499112677642242?refsrc%3Demail&s%3D11) to bail you out of a hung Emacs instance:

``` {.bash org-language="sh"}
pkill -SIGUSR2 emacs
```

ps. Not had a chance to try it, but next time it happens…

# \[2015-10-25 Sun\] Training for under 50 min 10k run
---
id: training-for-under-50-min-10k-run
---

Not much training time for an under 50 minute 10k run, but here's an attempt (based on time-to-run's [sub-50](http://www.time-to-run.com/training/10k/sub50.htm)):

  Mon        Tue        Wed            Thu        Fri            Sat        Sun
  ---------- ---------- -------------- ---------- -------------- ---------- -------------
  *Oct 26*   *Oct 27*   *Oct 28*       *Oct 29*   *Oct 30*       *Oct 31*   *Nov 1*
                        60 min         30 min     2k @ 4.55/k    rest       105 min
                                                  2 min rest
                        ✔                         (repeat x 3)
  *Nov 2*    *Nov 3*    *Nov 4*        *Nov 5*    *Nov 6*        *Nov 7*    *Nov 8*
  30 min     30 min     1k @ 4.50/k    30 min     30 min         rest       5k @ 4.55/k
                        90 sec rest
                        (repeat x 5)
  *Nov 9*    *Nov 10*   *Nov 11*       *Nov 12*   *Nov 13*       *Nov 14*   *Nov 15*
  10k easy   30 min     1k @ 4.55/k    30 min     30 min         rest       race day
                        1 min easy
                        (repeat x 3)

# \[2015-10-25 Sun\] Reading a running training plan
---
id: reading-a-running-training-plan
---

A sample from [Kona Part 2's](http://lsanderstri.com/2014/10/15/kona-part-2/) comments:

``` example
2.5 w/u to 4x(1.25@11.5 w/0.25R@7) to 3x(3.75@10.5 w/0.5R@7) to 2.5 c/d.
```

Is read from left to right as:

``` example
2.5 mile warm up to four times through 1.25 miles at 11.5 miles per hour with 0.25 miles recovery at 7 miles per hour to three times through 3.75 miles at 10.5 miles per hour with 0.5 miles recovery at 7 miles per hour to 2.5 miles cool down.
```

# \[2015-10-23 Fri\] Find binary in PATH using python
---
id: find-binary-in-path-using-python
---

``` {.python results="output" exports="both"}
import distutils.spawn
print distutils.spawn.find_executable('git')
```

``` example
/usr/bin/git
```

# \[2015-10-22 Thu\] Indonesia travel bookmarks
---
id: indonesia-travel-bookmarks
---



-   [Borobudur](https://duckduckgo.com/?q%3Dborobudur%2Bindonesia&t%3Dffab&iax%3D1&ia%3Dimages).
-   [Hiking Padar Island in Komodo National Park (Indonesia) \| The Backpack Almanac](https://backpackalmanac.com/2018/05/14/hiking-padar-island-in-komodo-national-park-indonesia/).
-   [Rumah Gadang](https://en.wikipedia.org/wiki/Rumah_Gadang).

# \[2015-10-22 Thu\] Malaysia travel bookmarks
---
id: malaysia-travel-bookmarks
---



-   [Coliseum Cafe, Kuala Lupur](http://www.tripadvisor.co.uk/Restaurant_Review-g298570-d1164708-Reviews-Coliseum_Cafe-Kuala_Lumpur_Wilayah_Persekutuan.html).
-   [How to Visit Penang's Kek Lok Si Temple (and What to Eat)](https://migrationology.com/kek-lok-si-temple-penang/).

# \[2015-10-22 Thu\] Mongolia travel bookmarks
---
id: mongolia-travel-bookmarks
---



-   [Beyond the dunes: road-tripping Mongolia's Gobi Desert](http://www.lonelyplanet.com/mongolia/travel-tips-and-articles/beyond-the-dunes-road-tripping-mongolias-gobi-desert).
-   [Terra cotta warriors at Mount Khan, Inner Mongolia](https://twitter.com/archpics/status/881270695614967808).

# \[2015-10-22 Thu\] Running bookmarks
---
id: running-bookmarks
---



-   [10k in under 50 mins — Runner's World UK Forum](https://forums.runnersworld.co.uk/discussion/164225/10k-in-under-50-mins).
-   [Garmin Forerunner 230 & 235 In-Depth Review (DC Rainmaker)](http://www.dcrainmaker.com/2015/11/garmin-fr230-fr235-review.html).
-   [Harvard's Running barefoot or in minimal footwear FAQ](http://barefootrunning.fas.harvard.edu/6FAQ.html).
-   [How to run a sub-50 10K - The Running Bug](https://therunningbug.com/fitness/tips-and-advice/how-to-run-a-sub-50-10k-race).
-   [Is Running Good Or Bad For Your Health?](http://www.npr.org/sections/13.7/2016/09/14/493803246/is-running-good-or-bad-for-your-health).
-   [Mornington Chasers running club](http://www.chaser.me.uk).
-   [Open track: Race Management System](https://entries.opentrack.run/).
-   [Review : Newton Gravity IV & Motion IV \| Ramblings of an IronRose](http://ironrosey.com/blog-posts/review-newton-gravity-iv-motion-iv/).
-   [The Race Organiser](https://www.theraceorganiser.com/listed-races/).
-   [Training towards a sub 50 minute 10K](http://www.time-to-run.com/training/10k/sub50.htm).

# \[2015-10-22 Thu\] Media player bookmarks
---
id: media-player-bookmarks
---



-   [cmus, a small, fast and powerful console music player for Unix-like OS](https://cmus.github.io).
-   [mps-youtube](https://github.com/mps-youtube/mps-youtube).
-   [mpv (a fork of mplayer2 and MPlayer)](https://mpv.io/).
-   [Multimedia on Linux Command Line: wget, PdfTK, ffmpeg, flac, SoX](https://sandilands.info/sgordon/multimedia-on-linux-command-line).
-   [PLEX](https://plex.tv/) (stream your media everywhere).
-   [Soul – A language and IDE for audio coding ](https://news.ycombinator.com/item).

# \[2015-10-17 Sat\] Get Emacs to gather links in posts
---
id: get-emacs-to-gather-links-in-posts
---

Comments in posts can be a great source of recommendations. Here's a way to extract post links using Emacs and [enlive](http://github.com/zweifisch/enlive).

![](https://xenodium.github.io/images/get-emacs-to-gather-urls-in-posts/emacs-enlive-url-fetch.gif)

``` {.commonlisp org-language="emacs-lisp"}
(require 'enlive) ;; https://github.com/zweifisch/enlive
(require 'org)

(defun ar/input-clipboard-url-or-prompt ()
  "Return a URL from clipboard or prompt user for one."
  (let* ((clipboard (current-kill 0))
         (url (if (string-match "^https?://" clipboard)
                  clipboard
                (read-string "URL: "))))
    (unless (string-match "^https?://" url)
      (error "Not a URL"))
    url))

(defun ar/url-fetch-anchor-elements (url)
  "Fetch anchor elements in URL as list of alist:
\((title . \"my title\")
 (url . \"http://some.location.com\"))."
  (let ((elements (enlive-query-all (enlive-fetch url) [a])))
    (mapcar (lambda (element)
              `((title . ,(enlive-text element))
                (url . ,(enlive-attr element 'href))))
            elements)))

(defun ar/url-view-links-at ()
  "View external links in HTML from prompted URL or clipboard."
  (interactive)
  (with-current-buffer (get-buffer-create "*links*")
    (org-mode)
    (view-mode -1)
    (erase-buffer)
    (mapc (lambda (anchor)
            (let-alist anchor
              (when (and .url (string-match "^http" .url))
                (insert (org-make-link-string .url
                                              .title) "\n"))))
          (ar/url-fetch-anchor-elements
           (ar/input-clipboard-url-or-prompt)))
    (delete-duplicate-lines (point-min) (point-max))
    (goto-char (point-min))
    (toggle-truncate-lines +1)
    (view-mode +1)
(switch-to-buffer (current-buffer))))
```

UPDATE(2019-04-13): Refreshed post with latest code from my [init](https://github.com/xenodium/dotsies/blob/9cf32157c5fec140218898dfcb11e74f623fec6c/emacs/ar/ar-url.el#L35). Thanks to [Gĳs](https://twitter.com/sjig) for pinging.

# \[2015-10-16 Fri\] UX toolbox bookmarks
---
id: ux-toolbox-bookmarks
---



-   [Affinity Designer: the perfect tool for UI and UX design](https://affinity.serif.com/en-gb/ui-design-software/).
-   [Affinity Publisher – Professional Desktop Publishing Software](https://affinity.serif.com/en-us/publisher/).
-   [Build a static site with Material Design Lite](https://www.youtube.com/watch?v=lWz9G95ITuk&feature=youtu.be&utm_source=designernews).
-   [Eye dropper Chrome extension (pick colors in browser)](http://eye-dropper.kepi.cz/).
-   [Generate - Coolors.co](https://coolors.co/1a181b-5d4d66-703d89-9e2bd8-a304f2).
-   [Google, but for colors (Hacker News)](https://news.ycombinator.com/item?id=17869229).
-   [Nodesign.dev \| Design less develop more.](https://nodesign.dev/).
-   [PaintCode - Turn your drawings into Objective-C or Swift drawing code](https://www.paintcodeapp.com).
-   [Paletton - The Color Scheme Designer](http://paletton.com/#uid=30n190kr6u-blKMk5ypvBoeFHhn).
-   [WhatTheFont! (find out font names)](http://www.myfonts.com/WhatTheFont/).

# \[2015-10-08 Thu\] Change Emacs shell's CWD with helm projectile
---
id: change-emacs-shells-cwd-with-helm-projectile
---

If using Emacs shell and helm projectile, you can wire these up to quickly change your current working directory.

![](https://xenodium.github.io/images/change-emacs-shells-cwd-with-helm-projectile/change-cwd-with-helm-projectile.gif)

``` {.commonlisp org-language="emacs-lisp"}
(require 'helm-projectile)

(defun ar/shell-cd (dir-path)
"Like shell-pop--cd-to-cwd-shell, but without recentering."
  (unless (string-equal mode-name "Shell")
    (error "Not in Shell mode"))
  (message mode-name)
  (goto-char (point-max))
  (comint-kill-input)
  (insert (concat "cd " (shell-quote-argument dir-path)))
  (let ((comint-process-echoes t))
    (comint-send-input)))

(defun ar/helm-projectile-shell-cd ()
  "Change shell current working directory using helm projectile."
  (interactive)
  (unless (string-equal mode-name "Shell")
    (error "Not in Shell mode"))
  (let ((helm-dir-source (copy-tree  helm-source-projectile-directories-list)))
    (add-to-list 'helm-dir-source '(action . ar/shell-cd))
    (add-to-list 'helm-dir-source '(keymap . nil))
    (add-to-list 'helm-dir-source '(header-line . "cd to directory..."))
    (helm :sources helm-dir-source
          :buffer "*helm-dirs*"
          :candidate-number-limit 10000)))
```

# \[2015-10-07 Wed\] Thermostat reset on Bosch WKD28350GB
---
id: thermostat-reset-on-bosch-wkd28350gb
---

My Bosch washer/dryer (WKD28350GB) stopped drying recently. Resetting the dryer's thermostat red breaker did the trick.

![](https://xenodium.github.io/images/thermostat-reset-on-bosch-wkd28350gb/WKD28350GB-01.jpg) ![](https://xenodium.github.io/images/thermostat-reset-on-bosch-wkd28350gb/WKD28350GB-02.jpg) ![](https://xenodium.github.io/images/thermostat-reset-on-bosch-wkd28350gb/WKD28350GB-03.jpg) ![](https://xenodium.github.io/images/thermostat-reset-on-bosch-wkd28350gb/WKD28350GB-04.jpg)

Edit: Similar post [here](https://www.diynot.com/diy/threads/bosch-wkd28350gb-washer-dryer-no-heat-when-drying.466138/).

# \[2015-10-05 Mon\] Javascript fetch node sample
---
id: javascript-fetch-node-sample
---

Playing with node and fetch:

``` {.javascript org-language="js"}
// Requisite: npm install node-fetch --save
// Save to fetch-demo.js
// Run: node fetch-demo.js

var fetch = require('node-fetch');

fetch("http://xenodium.com/data/javascript-fetch-node-sample/message.json\n", {
  method: 'GET',
  timeout: 5000
}).then(function(response) {
  return response.json();
}).then(function(response) {
  console.log('subject: ' + response.subject);
  console.log('body: ' + response.body);
}).catch(function(reason) {
  console.log(reason);
});
```

# \[2015-10-01 Thu\] Extract dominant colors in images
---
id: extract-dominant-colors-in-images
---

There's a handy [HN post](https://news.ycombinator.com/item?id%3D10309441) pointing to Javier López's [Using imagemagick, awk and kmeans to find dominant colors in images](http://javier.io/blog/en/2015/09/30/using-imagemagick-and-kmeans-to-find-dominant-colors-in-images.html). A comment also highlights [color-extract,](https://github.com/andrewgleave/color-extract) written in Go.

# \[2015-09-28 Mon\] Find a word with regex and WordNet
---
id: find-a-word-with-regex-and-wordnet
---

Recently wanted to come up with a random keyword. Querying [WordNet](http://wordnet.princeton.edu/) and a regular expression did the job.

Installed WordNet on Mac:

``` {.bash org-language="sh"}
$ brew install wordnet
```

Want a word ending in "esome"?

``` {.bash org-language="sh"}
$ wn esome -grepn -grepv -grepa -grepr | egrep -o -e "\w*esome\b" | sort | uniq

adventuresome
awesome
blithesome
bunglesome
cuddlesome
esome
fivesome
gruesome
lithesome
lonesome
lovesome
meddlesome
mettlesome
nettlesome
threesome
tiresome
torturesome
troublesome
unwholesome
venturesome
wholesome
```

# \[2015-09-26 Sat\] Soundcloud's Go best practices (GopherCon 2014)
---
id: soundclouds-go-best-practices-gophercon-2014
---

Having watched the [video](https://www.youtube.com/watch?v%3DY1-RLAl7iOI), some takeaways:

## Single GOPATH

### \$GOPATH/src/github.com/soundcloud/foo

## Repo structure

### github.com/soundcloud/whatever

1.  README.md

2.  Makefile

3.  main.go

4.  support.go

5.  foo

    1.  foo.go

    2.  bar.go

6.  whatever-server

    1.  main.go

7.  wharever-worker

    1.  main.go

## Formatting and style

### Use gofmt.

### Google's codereview [guidelines](https://github.com/golang/go/wiki/CodeReviewComments).

### Avoid named return parameters.

### Avoid make and new (unless you know sizes).

### Use struct{} for sentinel values: sets, signal chans.

1.  Conveys no information in it this part.

2.  Instead of empty interface.

3.  instead of boolean.

### Break long lines at parameters

1.  No need to compact.

2.  Keep trailing coma in last argument.

### Flags

``` go
func main() {
  var (
    foo = flags.String("foo\n", "doch\n", "...")
    bar = flat.Int("bar\n", 34, "...")
  )
  flag.Parse()
  // ...
}
```

### Logging

1.  package log

2.  Telemetry

3.  Push model (gets expensive over time)

    1.  Graphite

    2.  Statsd

    3.  AirBrake

4.  Pull model (chosen)

    1.  expvar

    2.  Prometheus

### Testing

1.  package testing

    1.  Unit tests

    2.  reflect.DeepEqual

2.  Integration

    1.  Use flags for starting services

    2.  // +build integration

### Code validation

1.  On Save

    1.  Go fmt

    2.  Go import (go fmt++)

2.  On Build

    1.  Go vet

    2.  Golint

    3.  Go test

3.  On Deploy

    1.  go test -tags=integration

4.  GoCov?

### Dependency management

1.  Unimportant projects

    1.  go get -d (and hope)

2.  Important

    1.  VENDOR (ie. copy into your repo)

        1.  Git submodules (no!).

        2.  Git subtrees (seem OK).

        3.  Tool (godep?).

        4.  Build

        5.  For binaries (use \_vendor subdir)

# \[2015-09-23 Wed\] Sync pip with Mac OS updates
---
id: sync-pip-with-mac-os-updates
---

My pip installation recently broke after a Mac OS update.

``` example
$ pip
Traceback (most recent call last):
  File "/usr/local/bin/pip\n", line 5, in <module>
    from pkg_resources import load_entry_point
  File "/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/pkg_resources.py\n", line 2793, in <module>
    working_set.require(__requires__)
  File "/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/pkg_resources.py\n", line 673, in require
    needed = self.resolve(parse_requirements(requirements))
  File "/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/pkg_resources.py\n", line 576, in resolve
    raise DistributionNotFound(req)
pkg_resources.DistributionNotFound: pip==1.1
```

Updating my pip installation fixes the break:

``` {.bash org-language="sh"}
$ sudo easy_install -U pip
```

# \[2015-09-20 Sun\] Chinatown treats review
---
id: chinatown-treats-review
---

## Recommended? yep

There's a corner in Chinatown hosting some truly superb treats. If you get caught in the rush between Newport court and Newport place, you'd likely fail to notice some the awesome street food stands.

![](https://xenodium.github.io/images/chinatown-treats/chinatown.jpg) ![](https://xenodium.github.io/images/chinatown-treats/newport-court.jpg)

## Chilly squid

I've walked past this place many times and never noticed it. They serve a handful of items, but the grilled chilly squid skewers caught my attention. They're grilled, brushed with chilly sauce and finished with sprinkled sesame and cumin seeds. Super tasty.

![](https://xenodium.github.io/images/chinatown-treats/squid-stand.jpg)

![](https://xenodium.github.io/images/chinatown-treats/chilly-squid-1.jpg) ![](https://xenodium.github.io/images/chinatown-treats/chilly-squid-2.jpg)

## Pancake + Crisp + Egg + Hot chillies = Jiān Bǐng 煎餅

I first had these delicious breakfast savory pancakes at a Beijing street food stall. Never expected to randomly find Jiān Bǐng in London. It's a crepe with an additional egg spread, hoisin sauce, chilly sauce, hot chillies, topped with spring onions and coriander, all wrapping a wonderfully crispy bread cracker. And.. it's awesome.

![](https://xenodium.github.io/images/chinatown-treats/pancake-3.jpg)

## Tai Yaki

Chinatown Bakery is hard to miss. Pedestrian traffic slows down as we all fall under the spell of the Tai Yaki machine. This wonderful assembly line produces fish-shaped sweet waffles filled with custard. They are the perfect dessert after some savory street snacks. You can get a bag of 4 for £2.

![](https://xenodium.github.io/images/chinatown-treats/fish-1.jpg) ![](https://xenodium.github.io/images/chinatown-treats/fish-4.jpg)

## All near each other

All these delights are within a stone's throw away from each other.

![](https://xenodium.github.io/images/chinatown-treats/pano.png)

## Useful?

Was this post useful to you? do [reply](https://twitter.com/xenodium/status/646101779281801216)!

## Better suggestion?

London is full of overhyped, gimmicky, and unnecessarily expensive restaurants. Very few deliver truly awesome food (even those expensive ones). Got suggestions? I'd love to hear from you [\@xenodium](https://twitter.com/xenodium).

# \[2015-09-18 Fri\] React bookmarks
---
id: react-bookmarks
---



-   [11 mistakes I’ve made during React Native / Redux app development](https://medium.com/dailyjs/11-mistakes-ive-made-during-react-native-redux-app-development-8544e2be9a9).
-   [9 things every React.js beginner should know (Hacker News)](https://news.ycombinator.com/item?id=10962784).
-   [9 things every React.js beginner should know](https://camjackson.net/post/9-things-every-reactjs-beginner-should-know).
-   [A Complete Guide to Flexbox](https://css-tricks.com/snippets/css/a-guide-to-flexbox/).
-   [A complete native navigation solution for React Native with optional redux support - nav bars, tabs, drawer, modals](https://github.com/wix/react-native-navigation).
-   [A Material Design style React Native component library](http://mrn.js.org/).
-   [A pull to refresh ListView for React Native](https://github.com/syrusakbary/react-native-refresher/blob/master/README.md).
-   [Adam Wolf's React Native talk](http://nerds.airbnb.com/facebook-react-native/).
-   [Aligning Children using Flexbox in React Native](http://moduscreate.com/aligning-children-using-flexbox-in-react-native/).
-   [Applying baisc styles in react native (video)](https://egghead.io/lessons/react-applying-basic-styles-in-react-native).
-   [Applying Basic Styles in React Native](https://egghead.io/lessons/react-applying-basic-styles-in-react-native).
-   [Avoid premature fluxing](https://twitter.com/floydophone/status/649786438330945536).
-   [Awesome React: a collection of awesome things regarding React ecosystem](https://github.com/enaqx/awesome-react/).
-   [babel-eslint](https://github.com/babel/babel-eslint).
-   [Beginner’s Guide to Using CocoaPods with React Native](https://medium.com/infinite-red/beginner-s-guide-to-using-cocoapods-with-react-native-46cb4d372995#.i87ebbwl0).
-   [Beyong React Native's "getting started guide"](https://medium.com/delivery-com-engineering/react-native-in-an-existing-ios-app-delivered-874ba95a3c52#.kin2ke23s).
-   [Bonnie Eisenman's blog (some react)](http://blog.bonnieeisenman.com/).
-   [Breaking up Heavy Processing in React Native (Blog post)](https://corbt.com/posts/2015/12/22/breaking-up-heavy-processing-in-react-native.html).
-   [Brent Vatne - Building li.st for Android with Exponent and React Native at react-europe 2016](https://www.youtube.com/watch?v=cI9bDvDEsYE).
-   [Bridging in React Native: An in-depth look into React Native's core](http://tadeuzagallo.com/blog/react-native-bridge/).
-   [Building React Native Apps](http://tech.taskrabbit.com/blog/2015/10/18/building-react-native-apps/).
-   [Bulding the F8 app](http://makeitopen.com/tutorials/building-the-f8-app).
-   [Cairn: a tiny library for React Native replacing default styling syntax](https://github.com/adamterlson/cairn).
-   [Coding Apps with React Native at Exponent](https://medium.com/the-exponent-log/coding-apps-with-react-native-at-exponent-7a5922da27bf#.udrk6kz05).
-   [Configuring Emacs to use eslint and babel with flycheck for javascript and React.js JSX](http://codewinds.com/blog/2015-04-02-emacs-flycheck-eslint-jsx.html).
-   [Curated tutorial and resource links I've collected on React, Redux, ES6, and more](https://github.com/markerikson/react-redux-links).
-   [Dan Abramov - Live React: Hot Reloading with Time Travel at react-europe 2015](https://www.youtube.com/watch?v=xsSnOQynTHs).
-   [Deep Diving React Native Debugging](https://medium.com/@shaheenghiassy/deep-diving-react-native-debugging-ea406ed3a691).
-   [Developing React.js Components Using ES6](http://ilikekillnerds.com/2015/02/developing-react-js-components-using-es6/).
-   [Device Information for React Native iOS and Android](https://github.com/rebeccahughes/react-native-device-info).
-   [Didact: a DIY guide to build your own React – Hexacta Engineering](https://engineering.hexacta.com/didact-learning-how-react-works-by-building-it-from-scratch-51007984e5c5).
-   [ECMAScript 5 Strict Mode, JSON, and More](http://ejohn.org/blog/ecmascript-5-strict-mode-json-and-more/).
-   [ESLint plugin for React Native](https://github.com/Intellicode/eslint-plugin-react-native).
-   [eslint-plugin-flowtype](https://github.com/gcazaciuc/eslint-plugin-flowtype).
-   [Exponentjs](https://exponentjs.com/).
-   [Flowery: prettifies the result generated by Facebook Flow](https://github.com/coodoo/flowery).
-   [Flux diagram](http://blog.krawaller.se/img/flux-diagram.png).
-   [Getting Started with Redux (30 lessons)](https://egghead.io/series/getting-started-with-redux).
-   [Idiomatic React Testing Patterns](https://gist.github.com/joshdover/235714771d94509a83609b16d232014a).
-   [Implement XHR timeout for Android and IOS natively](https://github.com/facebook/react-native/commit/1303e6d0392e8bc4da1198c98fc8cd7ad488b81c).
-   [Improved shadow performance on iOS](https://github.com/facebook/react-native/commit/e4c53c28aea7e067e48f5c8c0100c7cafc031b06).
-   [Learn Raw React – No JSX, No Flux, No ES6, No Webpack (Hacker News)](https://news.ycombinator.com/item?id=11093275).
-   [LearnRxSwift](https://github.com/DianQK/LearnRxSwift/blob/master/README.md).
-   [ListView rendering issue](https://github.com/facebook/react-native/issues/499#issuecomment-128836161).
-   [Native image/photo picker for react native](https://github.com/marcshilling/react-native-image-picker).
-   [Native react navigation in every platform](https://www.youtube.com/watch?v=dOSwHABLvdM).
-   [OfflineMovies: retrieves movies from an api and caches the result offline](https://github.com/geirman/offlineMovies).
-   [One day with React Native for Android](https://corbt.com/posts/2015/09/16/one-day-with-react-native-for-android.html).
-   [Optimizing React Native views (Screencast)](https://www.youtube.com/watch?v%3Dfh_Y4mPivuM).
-   [Optimizing React Native views (Screencast)](https://www.youtube.com/watch?v=fh_Y4mPivuM).
-   [Passing info automatically through a tree](https://facebook.github.io/react/docs/context.html).
-   [Progressive image loading](https://medium.com/@sharathprabhal/progressive-image-loading-in-react-native-ecc88e724343#.ffudiaxf3).
-   [React and React Native Layout Components - ReactScript](http://reactscript.com/categories/layout/).
-   [React Component Starter Kit](https://github.com/kriasoft/react-component-starter).
-   [React Custom Renderers (Blog post)](http://iamdustan.com/2016/01/18/react-custom-renderers/).
-   [React Design Principles](https://facebook.github.io/react/contributing/design-principles.html).
-   [React Native accordion](https://github.com/naoufal/react-native-accordion).
-   [React Native action button](https://github.com/mastermoo/react-native-action-button).
-   [React Native and Typescript](https://medium.com/react-weekly/react-native-and-typescript-ad57b7413ead#.w5lky7jol).
-   [React Native Animated ScrollView Row Swipe Actions](http://browniefed.com/blog/2015/08/01/react-native-animated-listview-row-swipe/).
-   [React Native App initial setup](http://zaicheng.me/2016/06/20/react-native-initial-setup/).
-   [React Native in an Existing iOS App: Dynamic Routing](https://medium.com/delivery-com-engineering/react-native-in-an-existing-ios-app-dynamic-routing-7013e03fa9ad#.cyv7v7oez).
-   [React Native in the Github Community](https://github.com/ericvicenti/react-native-community/).
-   [React Native Layout System](http://moduscreate.com/react-native-layout-system/).
-   [React Native Mapview component for iOS + Android](https://github.com/lelandrichardson/react-native-maps).
-   [React Native Material Design (react-native-material-design)](https://github.com/react-native-material-design/react-native-material-design).
-   [React Native Material Design (xinthink)](https://github.com/xinthink/react-native-material-kit).
-   [React Native Newsletter - Issue #24](http://us10.campaign-archive2.com/?u%3Ddb0dd948e2b729ee62625b1a8&id%3Dfbfe8b6010&e%3Dc7b5ce9f56).
-   [React Native Newsletter - Issue #25](http://us10.campaign-archive2.com/?u%3Ddb0dd948e2b729ee62625b1a8&id%3D674b414994&e%3Dc7b5ce9f56).
-   [React Native Package Manager (rnpn)](https://github.com/rnpm/rnpm).
-   [React Native Playground](https://rnplay.org/).
-   [React Native scrollable decorator](http://npm.taobao.org/package/react-native-scrollable-decorator).
-   [React Native Toolkit (navigation examples)](https://github.com/marty-wang/react-native-toolkit).
-   [React Native Tutorial: Building Apps with JavaScript](http://www.raywenderlich.com/99473/introducing-react-native-building-apps-javascript).
-   [React Native’s LayoutAnimation is Awesome](https://medium.com/@Jpoliachik/react-native-s-layoutanimation-is-awesome-4a4d317afd3e#.97zx978rl).
-   [React Tips and Best Practices](http://aeflash.com/2015-02/react-tips-and-best-practices.html).
-   [React-Move – Animate anything in React (Hacker News)](https://news.ycombinator.com/item?id=14144142).
-   [react-native-camera: A Camera component for React Native](https://github.com/lwansbrough/react-native-camera).
-   [react-native-redux-router (replace push/pop screens with easy syntax)](https://github.com/aksonov/react-native-redux-router).
-   [React.js Program: A project based, linear approach to learning React.js and the React.js ecosystem](http://www.reactjsprogram.com/).
-   [react.parts/native feed](https://react.parts/native).
-   [Reactive Programming Overview](https://www.youtube.com/watch?v=dwP1TNXE6fc).
-   [ReactNativeAutoUpdater](https://github.com/aerofs/react-native-auto-updater).
-   [Redux: Predictable state container for JavaScript apps](https://github.com/rackt/redux).
-   [Removing User Interface Complexity, or Why React is Awesome](http://jlongster.com/Removing-User-Interface-Complexity,-or-Why-React-is-Awesome).
-   [Responsive Design in React Native](https://medium.com/@elieslama/responsive-design-in-react-native-876ea9cd72a8#.cjpedynak).
-   [rnplay.org: Test and share React Native code samples](https://rnplay.org/).
-   [Snowflake (React iOS/Android + Redux + Jest testable + parse.com + bitrise.io)](https://github.com/bartonhammond/snowflake).
-   [Some Thoughts On Gluing React Native and Meteor (Blog post)](http://hharnisc.github.io/2015/04/15/react-native-and-meteor.html).
-   [Testing react Native with jest](http://www.schibsted.pl/2015/10/testing-react-native-components-with-jest/).
-   [The beginners guide to React Native and Firebase (Blog post)](https://www.firebase.com/blog/2016-01-20-tutorial-firebase-react-native.html).
-   [The Case for Flux](https://medium.com/swlh/the-case-for-flux-379b7d1982c6#.109lf7s2a).
-   [The Reactive Extensions for JavaScript](https://github.com/Reactive-Extensions/RxJS).
-   [The reactive manifesto](http://www.reactivemanifesto.org/).
-   [Thinking in React](https://facebook.github.io/react/docs/thinking-in-react.html).
-   [Thoughts on the future of mobile app development (Blog post)](https://getsiphon.com/blog/2016/01/20/future-of-app-development/).
-   [Tips for styling your React Native apps](https://medium.com/the-react-native-log/tips-for-styling-your-react-native-apps-3f61608655eb#.tg2qh13vd).
-   [Tutorial: Handcrafting an iOS Application with React Native (and lots of love)](http://stanleycyang.github.io/technology/reactjs/native/ios/2015/10/04/react-native-tutorial-with-navigation-and-animation.html).
-   [Unit Testing React Native Components: A Firsthand Guide](https://medium.com/@jcfrancisco/unit-testing-react-native-components-a-firsthand-guide-cea561df242b#.arff9dygw).
-   [Using redux-saga To Simplify Your Growing React Native Codebase](https://medium.com/infinite-red/using-redux-saga-to-simplify-your-growing-react-native-codebase-2b8036f650de#.382a5inf8).
-   [Ways to pass objects between native and JavaScript in React Native](https://medium.com/shoutem/ways-to-pass-objects-between-native-and-javascript-in-react-native-c3dcae7bf4f5).
-   [What I learned from building with React](http://blog.zmxv.com/2015/09/what-i-learned-from-building-react.html).
-   [Why React Native is Better than Native for Your Mobile Application](https://www.youtube.com/watch?v=QQRDcYsN4xs).
-   [Writing Modular JavaScript With AMD, CommonJS & ES Harmony](http://addyosmani.com/writing-modular-js/).
-   [Yasnippets for React](https://github.com/johnmastro/react-snippets.el).

# \[2015-09-16 Wed\] Chinese rice vinegar
---
id: chinese-rice-vinegar
---

Note to self to buy [Gold Plum Chinkiang Vinegar](http://www.amazon.co.uk/dp/B00OG3L7N6/ref%3Dsr_1_1?ie%3DUTF8&qid%3D1442442376&sr%3D8-1&). Awesome with dim sum.

![](https://xenodium.github.io/images/chinese-rice-vinegar/chinkiang-vinegar.jpg)

# \[2015-09-13 Sun\] Use ImageMagick to batch-resize images
---
id: use-imagemagick-to-batch-resize-images
---

Using percentage:

``` {.bash org-language="sh"}
$ mogrify -resize 10% *.png
```

Using dimensions:

``` {.bash org-language="sh"}
$ mogrify -resize 120x120 *.png
```

Lots of other alternatives from ImageMagick's [documentation](http://www.imagemagick.org/script/command-line-processing.php#geometry):

  --------- -------------------
  -resize   scale%
  -resize   scale-x%xscale-y%
  -resize   width
  -resize   xheight
  -resize   widthxheight
  -resize   widthxheight\^
  -resize   widthxheight!
  -resize   widthxheight\>
  -resize   widthxheight\<
  -resize   area@
  --------- -------------------

Fix image aspect ratios for Instagram:

``` {.bash org-language="sh"}
$ mogrify -resize 1080x1350 -gravity center -extent 1080 *.jpg
```

# \[2015-09-08 Tue\] Lucky 7 review
---
id: lucky-7-review
---

## Recommended? yep

[Lucky 7](http://www.lucky7london.co.uk) is a small nostalgic American diner on Westbourne Park road. I like the vibe, the space, and the unpretentious waiting staff. I go to Lucky 7 often enough, originally for the buttermilk pancakes, but the list of favorites on the menu keeps growing.

![](https://xenodium.github.io/images/lucky-7-review/lucky-7-menu-board.jpg) ![](https://xenodium.github.io/images/lucky-7-review/lucky-7-staff.jpg)

Smileys by [w.dyer](https://openclipart.org/detail/219291/smile).

## Buttermilk Banana pancakes

These are my favorite pancakes in London by far. Banana buttermilk pancakes and a few free coffee refills usually sort me out until dinner time. Add a side of bacon if extra hungry. You probably don't need it though.

![](https://xenodium.github.io/images/lucky-7-review/lucky-7-coffee.jpg) ![](https://xenodium.github.io/images/lucky-7-review/lucky-7-pancakes.jpg)

## Reuben sandwich

The reuben has been on Lucky 7's specials menu for months now. Not had many of these in London, but compared to The Brass Rail's, this reuben was a clear winner. The sandwich is huge and comes with fries. My girlfriend and I struggled to finish one between the two of us.

![](http://localhost:8787/alvaro/lucky-7-review/lucky-7-reuben-fries.jpg "1")

![](http://localhost:8787/alvaro/lucky-7-review/lucky-7-reuben-cross-section.jpg "1")

## Vanilla milkshake (add malt!)

This milkshake hits the spot every time, but it's filling. You almost have to decide between the shake and an actual meal. If you must have it, add malt. Sorry, no picture.

## Huevos Rancheros

This is a breakfast dish I can equally make (better?) at home, but Lucky 7 wins hands down every time I'm feeling particularly lazy. Sorry, no picture.

## Useful?

Was this post useful to you? do [reply](https://twitter.com/xenodium/status/643139264302186497)!

## Better suggestion?

London is full of overhyped, gimmicky, and unnecessarily expensive restaurants. Very few deliver truly awesome food (even those expensive ones). Got suggestions? I'd love to hear from you [\@xenodium](https://twitter.com/xenodium).

# \[2015-09-02 Wed\] Sierra Leone travel bookmarks
---
id: sierra-leone-travel-bookmarks
---

-   [Sierra Leone marathon](http://www.sierraleonemarathon.com/).
-   [Street Child charity](http://www.street-child.co.uk/).

# \[2015-09-02 Wed\] London travel bookmarks
---
id: london-travel-bookmarks
---



-   [Chiswick House & Gardens](http://www.chgt.org.uk).
-   [Heath Robinson Museum](https://www.heathrobinsonmuseum.org).
-   [London Library (book your free tour)](http://www.londonlibrary.co.uk/).
-   [Quaker gardens](https://en.wikipedia.org/wiki/Quaker_Gardens,_Islington), Islington.
-   [Soho Theatre](http://www.sohotheatre.com/) (not tried yet).
-   [The best brunch London 2020 \| CN Traveller](https://www.cntraveller.com/gallery/best-brunch-london).
-   [The most beautiful restaurants in London for 2020 \| CN Traveller](https://www.cntraveller.com/gallery/the-most-beautiful-restaurants-in-london).

# \[2015-08-23 Sun\] Use ImageMagick to auto-orient images
---
id: use-imagemagick-to-auto-orient-images
---

Recently needed to rotate images based on EXIF metadata. ImageMagick to the rescue:

``` {.bash org-language="sh"}
$ for i in *.png; do convert -auto-orient "$i" "$i"; done
```

# \[2015-08-23 Sun\] Bengali Macher Jhol
---
id: bengali-macher-jhol
---

My friend Sakhya brought me the wonderful [Cookbook of Regional Cuisines of India](http://www.nitamehta.com/Cookbook-of-Regional-Cuisines-of-India-%2528Veg-%2B-Non-Veg%2529_431.html). After improvisations and substitutions, here's my attempt at making Bengali Machcher Jhol:

![](https://xenodium.github.io/images/bengali-machcher-jhol/bengali-machcher-jhol-00.png) ![](https://xenodium.github.io/images/bengali-machcher-jhol/bengali-machcher-jhol-01.png) ![](https://xenodium.github.io/images/bengali-machcher-jhol/bengali-machcher-jhol-02.png) ![](https://xenodium.github.io/images/bengali-machcher-jhol/bengali-machcher-jhol-03.png) ![](https://xenodium.github.io/images/bengali-machcher-jhol/bengali-machcher-jhol-04.png) ![](https://xenodium.github.io/images/bengali-machcher-jhol/bengali-machcher-jhol-05.png)

# \[2015-08-22 Sat\] New habits for 2015
---
id: new-habits-for-2015
---

-   20 min morning meditations.
-   [A better way to tie your shoes](http://www.ted.com/talks/terry_moore_how_to_tie_your_shoes).
-   Cold showers (all of them!).
-   Keys, wallet, phone, badge, and headphones live together.
-   Listen to audio books.
-   Morning runs.
-   Nightly flossing.

# \[2015-08-22 Sat\] Meditation retreats bookmarks
---
id: meditation-retreats-bookmarks
---



-   [Best places to seek silence](http://www.lonelyplanet.com/travel-tips-and-articles/best-places-to-seek-silence).
-   [Opening to life @ Dhanakosa Buddhist Retreat Centre](http://www.dhanakosa.com/retreat/2015/opening-life-0).
-   [Samye Ling (Tibetan- buddhist monastery)](http://www.samyeling.org/).
-   [Vipassana Meditation (centers across world)](https://www.dhamma.org/en-US/index).

# \[2018-07-08 Sun\] Human memory bookmarks
---
id: human-memory-bookmarks
---



-   [Augmenting Long-term Memory (Michael Nielsen)](http://augmentingcognition.com/ltm.html).
-   [Ludism's memory techniques](http://www.ludism.org/mentat/).
-   [Using Anki to remember what you read \| Hacker News](https://news.ycombinator.com/item?id=22492381).
-   [Using Anki to remember what you read \| Hacker News](https://news.ycombinator.com/item?id=22492381).

# \[2015-08-22 Sat\] Mindfulness/meditation bookmarks
---
id: meditation-bookmarks
---



-   [10% Happier: Mindfulness Meditation Courses with Dan Harris and Joseph Goldstein](https://www.10percenthappier.com/).
-   [Aimless Wandering](https://en.wikipedia.org/wiki/Aimless_wandering).
-   [Are You in Despair? That’s Good (NY Times)](http://www.nytimes.com/2016/06/05/opinion/sunday/are-you-in-despair-thats-good.html).
-   [Beating procrastination](http://lesswrong.com/lw/3w3/how_to_beat_procrastination/).
-   [Best 10 life changes](http://theenergyproject.com/blog/take-back-your-life-ten-steps).
-   [Breathing Exercise: Three To Try \| 4-7-8 Breath (Andrew Weil, M.D.)](https://www.drweil.com/health-wellness/body-mind-spirit/stress-anxiety/breathing-three-exercises/).
-   [Contemplative Practice That Isn’t Meditating](http://theoryengine.org/life/contemplative-practice-that-isnt-meditating/).
-   [Day One - The award-winning journal app for iPhone, iPad, and Mac.](https://dayoneapp.com/).
-   [Developing Lotus Flexibility - Preparing Yoga Padmasana Sitting Position, part 1 (YouTube)](https://www.youtube.com/watch?v%3DZ8LOhZmuVaE&feature%3Dyoutu.be).
-   [Free meditations from Mindfulness \| Mindfulness: Finding Peace in a Frantic World](http://franticworld.com/free-meditations-from-mindfulness/).
-   [How to Make Yourself Work When You Just Don’t Want To](https://hbr.org/2014/02/how-to-make-yourself-work-when-you-just-dont-want-to/).
-   [How to sit Zen](http://www.tricycle.com/blog/how-sit-zen-and-stretching-excercises-full-lotus).
-   [Jonathan Foust's talks](http://jonathanfoust.libsyn.com/webpage).
-   [Kalyanamittas: We'll See - A Zen Story](http://buddhistinspiration.blogspot.com/2011/12/well-see-zen-story.html).
-   [Meditation centres around the UK](http://www.theguardian.com/lifeandstyle/2011/jan/22/meditation-centres-uk).
-   [MEGATHREAD TIME: In 40 tweets I will describe 40 power powerful concepts for understanding the world](https://twitter.com/g_s_bhogal/status/1225561131122597896).
-   [Memreise's blog](http://www.memrise.com/blog/).
-   [Mental Models I Find Repeatedly Useful - Gabriel Weinberg (Medium)](https://medium.com/@yegg/mental-models-i-find-repeatedly-useful-936f1cc405d).
-   [Mental Models I Find Repeatedly Useful](https://medium.com/@yegg/mental-models-i-find-repeatedly-useful-936f1cc405d#.g0gjbdp8z).
-   [Mind Body Attention — thinking, moving, and meditating](https://www.mindbodyattention.com/).
-   [Mindfulness breathing](https://thebuddhistcentre.com/text/mindfulness-breathing).
-   [Mindfulness Mitigates Biases You May Not Know You Have](https://hbr.org/2014/12/mindfulness-mitigates-biases-you-may-not-know-you-have).
-   [Nam Myoho Renge Kyo](https://www.youtube.com/watch).
-   [Ram Dass has died (Hacker News)](https://news.ycombinator.com/item?id=21861986).
-   [Smiling Mind free apps](https://www.smilingmind.com.au/smiling-mind-app).
-   [The Challenge of Consciousness (Hacker News)](https://news.ycombinator.com/item?id=13019767).
-   [The effect of meditation on brain structure (2012) \| Hacker News](https://news.ycombinator.com/item?id=21036927).
-   [The Energy Project blog](http://theenergyproject.com/blog).

# \[2015-08-22 Sat\] Learning bookmarks
---
id: learning-bookmarks
---



-   [Best YouTube channels for learning (Quora)](http://www.quora.com/What-are-the-best-YouTube-channels-for-learning-growth-and-development).
-   [Effective learning: Twenty rules of formulating knowledge](https://www.supermemo.com/en/articles/20rules).
-   [HN's comments on learning languages](https://news.ycombinator.com/item?id=7826745).
-   [HN's comments on memory](https://news.ycombinator.com/item?id=6522901).
-   [How to Finally Play the Guitar: 80/20 Guitar and Minimalist Music](http://fourhourworkweek.com/2012/12/11/how-to-play-the-guitar/).
-   [Learn Difficult Concepts with the ADEPT Method](http://betterexplained.com/articles/adept-method/).
-   [Learning to learn](https://www.youtube.com/playlist?list=PL2FF649D0C4407B30).
-   [Learning to Learn: Intuition Isn’t Optional \| BetterExplained](http://betterexplained.com/articles/intuition-isnt-optional/).
-   [Scientific Speed Reading: How to Read 300% Faster in 20 Minutes](http://fourhourworkweek.com/2009/07/30/speed-reading-and-accelerated-learning/).

# \[2015-08-22 Sat\] Bundi travel bookmarks
---
id: bundi-travel-bookmarks
---

-   Bundi Haveli (accomodation).
-   Hadoti Palace (accomodation).
-   Haveli Braj Bhushan Ji ki (accomodation).
-   Haveli Katkoun Guest House (accomodation).
-   Kasera Paradise (accomodation).

# \[2015-08-14 Fri\] Upgrading PL30 headphones
---
id: upgrading-pl30-headphones
---

I've loved my [Soundmagic PL30 in-ear headphones](http://www.amazon.com/Soundmagic-PL30-In-Ear-Headphones/dp/B001MQ3CCO). They're relatively inexpensive, comfortable, and great for exercising (they stay in). Audio quality and bass have been good enough (I don't need much). Unfortunately, I've had two pairs of PL30's and both stopped working after a year or two. I'm replacing the last pair with [RHA's MA750](http://www.amazon.co.uk/RHA-MA750-Isolating-In-Ear-Headphone-Black/dp/B00ELAM8LE) (an upgrade, me hopes).

Other contenders considered: [Etymotic Research HF5](http://www.amazon.co.uk/Etymotic-Research-Portable-iPhone-Earphones-Black/dp/B000XPG2QI), and [Shure SE215](http://www.amazon.co.uk/Shure-SE215-In-Ear-Isolating-Earphones-Clear/dp/B004U9NH3E). Also considered bluetooth alternatives like [JayBird BlueBuds X](http://www.amazon.com/JayBird-BlueBuds-Sport-Bluetooth-Headphones/dp/B00AIRUOI8?) and [Plantronics BackBeat GO 2](http://www.amazon.co.uk/Plantronics-BackBeat-Wireless-Earbuds-Frustration-Black/dp/B00DZTHW9U).

I'm somewhat nervous to pay more for a pair of headphones. Let's hope they don't meet the same unfortunate fate. We'll see.

# \[2015-08-13 Thu\] Quotes
---
id: quotes
---

-   ["Being good at something is about being curious enough to explore things to a level where most people give up."](https://twitter.com/stevemagness/status/633778359156125696?refsrc%3Demail&s%3D11)
-   "The world is a book and those who do not travel read only one page." - Augustine of Hippo.
-   "National identity is not your only identity." - Xiaolu Guo?
-   ["Choose your words carefully. Words are cheap, but their effect can be expensive."](https://news.ycombinator.com/item?id=27696310)

# \[2015-08-13 Thu\] Bhutan travel bookmarks
---
id: bhutan-travel-bookmarks
---

-   [Taktsang (Tiger’s Nest) Monastery](http://www.tigersnestbhutan.com/).

# \[2015-08-12 Wed\] Cooking bookmarks
---
id: cooking-bookmarks
---



-   [14 Best Indian Breakfast Recipes \| Easy Indian Breakfast Recipes - NDTV Food](https://food.ndtv.com/lists/10-best-indian-breakfast-recipes-696080).
-   [25 Cocktails Everyone Should Know](http://drinks.seriouseats.com/2013/05/25-essential-cocktails-everyone-should-know-cocktail-101-easy-mixed-drink-recipes-classic-cocktail-guide.html).
-   [Amazon.com: Taylor Precision Products Stainless Steel Kitchen Scale](https://www.amazon.com/Taylor-Precision-Products-Stainless-11-Pound/dp/B002SXV8G2/ref=sr_1_1?s=home-garden&ie=UTF8&qid=1481553229&sr=1-1-spons&keywords=Taylor+Precision+stainless+steel&psc=1).
-   [Basic New York-Style Pizza Dough Recipe \| Serious Eats](https://www.seriouseats.com/recipes/2012/07/basic-new-york-style-pizza-dough.html).
-   [Cast Iron Fry Pans](http://www.world-of-crepes.com/cast-iron-fry-pans.html).
-   [ChienLing Koo's answer to How is authentic fried rice prepared? (Quora)](https://www.quora.com/How-is-authentic-fried-rice-prepared/answer/ChienLing-Koo-1/share).
-   [Eggs Kejriwal Recipe - NYT Cooking](https://cooking.nytimes.com/recipes/1018717-eggs-kejriwal).
-   [Equipment Review: Best Carbon-Steel Skillets (YouTube)](https://www.youtube.com/watch?v=-suTmUX4Vbk).
-   [Equipment: How to Buy, Season, and Maintain Cast Iron Cookware](http://www.seriouseats.com/2010/06/how-to-buy-season-clean-maintain-cast-iron-pans.html).
-   [How do Chinese restaurants get their beef to be so tender?](https://www.quora.com/How-do-Chinese-restaurants-get-their-beef-to-be-so-tender-Like-beef-in-black-bean-sauce-or-Mongolian-beef-etc-It-almost-falls-apart-in-the-mouth).
-   [How To Cook With Cast Iron (YouTube)](https://www.youtube.com/watch?v=KLGSLCaksdY#action=share).
-   [How To Make French Onion Soup](https://getpocket.com/explore/item/how-to-make-french-onion-soup).
-   [Imperia Italian Double Cutter Pasta Machine](https://www.amazon.co.uk/Imperia-Italian-Double-Cutter-Machine/dp/B0001IXA0I).
-   [It's Not Rocket Science, Steaming Hard-Boiled Eggs Makes Peeling Easier (Digital trends)](https://www.digitaltrends.com/home/steaming-hard-boiled-eggs/).
-   [Jeff Varasano's NY Pizza Recipe](http://www.varasanos.com/PizzaRecipe.htm).
-   [Marcato Atlas 150 pasta machine Chrome, Silver Wellness](https://www.amazon.co.uk/Marcato-machine-Chrome-Silver-Wellness/dp/B0009U5OSO/).
-   [Masoor Dal Tadka - Indian Red Lentil Dal](https://www.thecuriouschickpea.com/masoor-dal-tadka/).
-   [My Favourite Homemade Almond Milk + Step By Step Photos](http://ohsheglows.com/2013/01/24/my-favourite-homemade-almond-milk-step-by-step-photos/).
-   [New York Times cooking](http://cooking.nytimes.com/).
-   [Pho Tai Lan (Hanoi style flash-fried steak & garlic soup)](http://www.womenshealthmag.co.uk/nutrition/recipes/2321/pho-tai-lan-hanoi-style-flash-fried-steak-garlic-soup/).
-   [Pizza Recipes - PizzaMaking.com](https://www.pizzamaking.com/pizza-recipes.html).
-   [Portland Farmers Market » Cookbook](https://www.portlandfarmersmarket.org/cookbook/).
-   [Swedish Cardamom Rolls (Kardemummabullar) — Fix Feast Flair](https://www.fixfeastflair.com/home/2015/2/9/swedish-cardamom-rolls-kardemummabullar-recipe).
-   [The Ringer Cast Iron Cleaner XL 8x6 Inch Stainless Steel Chainmail (Amazon)](http://www.amazon.com/The-Ringer-Cleaner-Stainless-Chainmail/dp/B00FKBR1ZG).
-   [The Truth About Cast Iron Pans: 7 Myths That Need To Go Away](http://www.seriouseats.com/2014/11/the-truth-about-cast-iron.html).
-   [The ultimate way to season cast iron](http://www.cooksillustrated.com/how_tos/5820-the-ultimate-way-to-season-cast-iron).
-   [Why do steaks at high end restaurants taste so different from other steaks? (Quora)](https://www.quora.com/Why-do-steaks-at-high-end-restaurants-taste-so-different-from-other-steaks).

# \[2015-08-11 Tue\] 9 week half-marathon training
---
id: 9-week-half-marathon-training
---

While reading [Zen Habits: Mastering the Art of Change](https://zenhabitsbook.s3.amazonaws.com/Zen%2520Habits%2520book.pdf), I comitted to running half marathon in mid-October. That's roughly two months from now. Here's a 9 week training schedule:

  WEEK   MON    TUE    WED    THU     FRI    SAT    SUN
  ------ ------ ------ ------ ------- ------ ------ -------
  1      Rest   5 Km   5 Km   Cycle   Rest   5 Km   7 Km
  2      Rest   5 Km   5 Km   Cycle   Rest   5 Km   8 Km
  3      Rest   7 Km   5 Km   Cycle   Rest   5 Km   10 Km
  4      Rest   8 Km   5 Km   Cycle   Rest   5 Km   12 Km
  5      Rest   8 Km   Rest   8 Km    Rest   5 Km   14 Km
  6      Rest   8 Km   Rest   8 Km    Rest   6 Km   16 Km
  7      Rest   8 Km   8 Km   8 Km    Rest   8 Km   19 Km
  8      Rest   8 Km   Rest   12 Km   Rest   8 Km   16 Km
  9      Rest   8 Km   Rest   5 Km    5 Km   Rest   Race

My times:

  WEEK   MON    TUE     WED     THU           FRI     SAT     SUN
  ------ ------ ------- ------- ------------- ------- ------- ---------
  1      Rest   ✘       29:04   ✔             Rest    26:36   38:40
  2      Rest   29:11   28:50   ✔             Rest    27:07   44:55
  3      Rest   40:46   26:29   ✔             Rest    ✘       57:01
  4      Rest   46:46   ✘       ✘             Rest    30:08   1:12:10
  5      Rest   46:59   Rest    44:46         Rest    24:50   1:25:24
  6      Rest   50:02   Rest    46:24         Rest    ✘       1:37:39
  7      Rest   46:54   46:41   46:42         Rest    ✘       1:57:57
  8      Rest   45:28   Rest    48:13 (8km)   Rest    43:56   ✘
  9      Rest   44:24   Rest    27:12         26:09   Rest    1:58:28

# \[2015-08-11 Tue\] Shanghai travel bookmarks
---
id: shanghai-travel-bookmarks
---



-   [36 Hours in Shanghai](http://www.nytimes.com/2013/12/01/travel/36-hours-in-shanghai.html).
-   Shanghai Xiaolongbao at [Dumpling House Edison (on Rt 27)](http://www.yelp.com/biz/shanghai-dumpling-house-edison-2).
-   [Tianzi Fang street art (Google maps)](https://goo.gl/maps/FQmSF).
-   [Tianzi Fang street art](http://tianzifang.cn/).
-   [Town God's Temple](https://goo.gl/maps/Ngqwk), street Food!
-   [Yu Garden/Huxinting Teahouse](https://en.wikipedia.org/wiki/Yu_Garden).
-   佳家 for 小龙包.
-   小样 (Little Yang's) for 生煎包 (sheng jian bao). Fried soup filled dumplings. Think skin crunchy bottom texture.

# \[2015-08-10 Mon\] Singapore job board bookmarks
---
id: singapore-job-board-bookmarks
---



-   [Angel.co (Singapore Startup Jobs)](https://angel.co/singapore/jobs).
-   [e27](http://e27.co/jobs).
-   [Startupjobs.asia](http://www.startupjobs.asia/).
-   [Those who relocated to Europe for a tech position: where did you find your job?](https://twitter.com/NataliePis/status/1130811744027316224).

# \[2015-08-08 Sat\] Germany travel bookmarks
---
id: germany-travel-bookmarks
---



-   [Azalea and Rhododendron Park Kromlau](https://en.wikipedia.org/wiki/Azalea_and_Rhododendron_Park_Kromlau).
-   [Having a post-lockdown bucket list - zerokspot.com](https://zerokspot.com/weblog/2020/04/05/post-lockdown-bucketlist/).
-   [Home - 7STERN Bräu](http://www.7stern.at/de-de/).
-   [Kerrie's Cup of Tea: lai fufu in Munich Germany](https://kerriescupoftea.blogspot.co.uk/2014/10/lai-fufu-in-munich-germany.html).
-   [Laifufu Teesalon - Teezeremonie - Tee - Oolong - München - Laifufu Teesalon](https://www.laifufu.de/).
-   [SUDHAUS — Brauerei & Restaurant (try beef tartar. also pizza?)](https://www.sudhaus.at/).

# \[2015-08-08 Sat\] Menorca travel bookmarks
---
id: menorca-travel-bookmarks
---

-   [Cala Macarella, Menorca](https://www.flickr.com/photos/paul_stephenson/4282369223/).
-   [Punta Nati](https://en.wikipedia.org/wiki/Punta_Nati_Lighthouse).
-   [Scooter rental in Menorca](http://www.lonelyplanet.com/spain/balearic-islands/menorca/activities/driving-offroading/scooter-rental-menorca).

# \[2015-08-08 Sat\] Travel tools bookmarks
---
id: travel-tools-bookmarks
---



-   [Cool cities, a visual city guide](http://www.cool-cities.com/).
-   [Detour 2.0](https://www.producthunt.com/tech/detour-2-0).
-   [Dojo: Best stuff to do in London](https://play.google.com/store/apps/details?id%3Dco.dojoapp.dojo&hl%3Den_GB).
-   [escapethecity.org](http://www.escapethecity.org).
-   [Find the best places to sleep, eat and play](https://everplaces.com).
-   [hostelworld.com](http://www.hostelworld.com).
-   [How to travel the world without money](http://ezroadtrips.com/blogs/2015/03/How-To-Travel-The-World-Without-Money.html).
-   [Indie: a simple, powerful way to buy multi-stop flights](https://indie.bootsnall.com/).
-   [International SOS Assistance App](http://app.internationalsos.com).
-   [IziTravel: audio guides and city/museum tours](https://izi.travel/en).
-   [Jet Setter](http://www.jetsetter.com).
-   [Louis Vuitton city guide](http://us.louisvuitton.com/eng-us/men/books/city-guides).
-   [Mapiac: discover hidden wonders](http://mapiac.com/travel-map/).
-   [roadsharing.com](http://www.roadsharing.com).
-   [Tripcast](https://tripcast.co/).
-   [Triposo](https://www.triposo.com/).
-   [Vayable (find a new experience)](https://www.vayable.com/).
-   [Visa Requirements by Citizenship](https://www.visahq.com/citizens/).
-   [What is the best website or app to use for trip planning, and why? (Quora)](https://www.quora.com/What-is-the-best-website-or-app-to-use-for-trip-planning-and-why).
-   [What travel hacks have saved you a lot of money? (Quora)](https://www.quora.com/What-travel-hacks-have-saved-you-a-lot-of-money).
-   [wwoof.net (Worldwide Opportunities on Organic Farms)](http://www.wwoof.net).

# \[2015-08-08 Sat\] Philippines travel bookmarks
---
id: philippines-travel-bookmarks
---



-   [5 Unique Tourist Spots in the Philippines - RachFeed](https://rachfeed.com/5-unique-tourist-spots-philippines/).
-   [7 first-timer fails](http://www.lonelyplanet.com/philippines/travel-tips-and-articles/the-philippines-for-beginners-7-first-timer-fails-to-avoid-on-your-trip).
-   [Palawan (island)](https://en.wikipedia.org/wiki/Palawan_%28island%29).
-   [The best beaches of the Philippines](http://www.lonelyplanet.com/philippines/travel-tips-and-articles/77222).

# \[2015-07-23 Thu\] Add site-specific browsers to your workflow
---
id: add-site-specific-browsers-to-your-workflow
---

There are three browser tabs continously used in my workflow: GMail, Google Calendar, and Google Play Music. I normally have many more tabs open, but these three I access periodically. As the number of open tabs increases, and I fail to cleanup, getting back to my usual three gets a little trickier.

So far, I've kept each of these services open in separate windows. But that doesn't always work. Click on any link in your inbox and you're back to playing cleanup. This is where [site-specific browsers](https://en.wikipedia.org/wiki/Site-specific_browser) (SSB) can help.

[Epichrome](https://github.com/dmarmor/epichrome) enables you to build Chrome-based SSBs (on Mac OSX). Build an SSB for the usual suspects and easily jump to them using the app switcher.

![](https://xenodium.github.io/images/add-site-specific-browsers-to-your-workflow/switcher-small.png)

More at [OSX Chrome SSB](https://github.com/dmarmor/osx-chrome-ssb-gui/) and [Quora thread](http://www.quora.com/Is-there-a-way-to-use-Chrome-as-a-site-specific-browser)

UPDATE: Enable the Chrome extension to open URLs in default browser.

![](https://xenodium.github.io/images/add-site-specific-browsers-to-your-workflow/helper.png)

And choose the default browser to open URLs.

![](https://xenodium.github.io/images/add-site-specific-browsers-to-your-workflow/default.png)

# \[2015-07-20 Mon\] Sardinia travel bookmarks
---
id: sardinia-travel-bookmarks
---

-   Alghero.
-   Baja Sardinia.
-   Budoni.
-   [Cala Goloritze, Sardinia](http://www.sardinianbeaches.com/beaches-of-sardinia/east/baunei/cala-goloritze/).
-   Castelsardo (gifts maybe?).
-   Food: Maialetto sardo (Pig), Sebadas, Pardula, Papassinas, Pani e sapa.
-   L'Asinara boat trip (abandoned penitentiary).
-   La Pelosa beach.
-   Nuraghe.
-   Porto Cervo.
-   Porto Torres.
-   San Teodoro.
-   Stintino (fishing port).
-   Zedda e Piras vinyards (Alghero).

# \[2015-07-17 Fri\] Open closest build file in Emacs
---
id: open-closest-build-file-in-emacs
---

Whether it's Makefile, SConstruct, BUILD, or your favorite build file, chances are you have to tweak it from time to time. `ar/open-build-file` searches your current and parent directories to find a build file.

``` {.commonlisp org-language="emacs-lisp"}
(defvar ar/project-file-names '("Makefile" "SConstruct" "BUILD"))

(defun ar/parent-directory (path)
  "Get parent directory for PATH."
  (unless (equal "/" path)
    (file-name-directory (directory-file-name path))))

(defun ar/find-upwards (path filename)
  "Search upwards from PATH for a file named FILENAME."
  (let ((file (concat path filename))
        (parent (ar/parent-directory (expand-file-name path))))
    (if (file-exists-p file)
        file
      (when parent
        (ar/find-upwards parent filename)))))

(defun ar/open-closest (filename)
  "Open the closest FILENAME in current or parent dirs (handy for finding Makefiles)."
  (let ((closest-file-path (ar/find-upwards (buffer-file-name)
                                                 filename)))
    (when closest-file-path
      (message closest-file-path)
      (switch-to-buffer (find-file-noselect closest-file-path)))
    closest-file-path))

(defun ar/open-build-file ()
  "Open the closest project file in current or parent directory.
For example: Makefile, SConstruct, BUILD, etc.
Append `ar/project-file-names' to search for other file names."
  (interactive)
  (catch 'found
    (mapc (lambda (filename)
            (when (ar/open-closest filename)
              (throw 'found t)))
          ar/project-file-names)
    (error "No project file found")))
```

# \[2015-07-15 Wed\] Create iOS static fat libraries
---
id: create-ios-static-fat-libraries
---

Have separate static libraries for different iOS architectures? Stitch 'em up into a single fat library using with lipo:

``` {.bash org-language="sh"}
$ lipo -create libOne_i386.a libOne_x86_64.a libOne_armv7.a libOne_arm64.a -output libOne.a
```

# \[2015-07-15 Wed\] Settling scores with an org table
---
id: settling-scores-with-an-org-table
---

Recently kept track of expenses between a group of us. To settle the scores, I emailed an exported HTML table from an org file. This was simple enough and required no external viewer from recepients. The org table, in all its textful glory, looked as follows…

``` example

| Date             | Item           |   Charge |
|------------------+----------------+----------|
| [2015-06-18 Thu] | Cash           |    20.00 |
| [2015-07-11 Sat] | Lucky 7        |    42.97 |
| [2015-07-13 Mon] | Santa Maria    |    32.00 |
| [2015-07-12 Sun] | Tayyabs        |    46.00 |
| [2015-07-13 Mon] | The Brass Rail |    39.00 |
| [2015-07-13 Mon] | Underground    |    10.00 |
| [2015-07-10 Fri] | Cash           |    20.00 |
| [2015-07-13 Mon] | Cash           |    20.00 |
| [2015-07-14 Tue] | Cash           |    20.00 |
|------------------+----------------+----------|
|                  | total          | £ 249.97 |
#+TBLFM: @11$3=vsum(@2..@10);£ %.2f
```

…while the exported HTML below could be easily pasted on to an email.

  Date                 Item             Charge
  -------------------- ---------------- ----------
  \[2015-06-18 Thu\]   Cash             20.00
  \[2015-07-11 Sat\]   Lucky 7          42.97
  \[2015-07-13 Mon\]   Santa Maria      32.00
  \[2015-07-12 Sun\]   Tayyabs          46.00
  \[2015-07-13 Mon\]   The Brass Rail   39.00
  \[2015-07-13 Mon\]   Underground      10.00
  \[2015-07-10 Fri\]   Cash             20.00
  \[2015-07-13 Mon\]   Cash             20.00
  \[2015-07-14 Tue\]   Cash             20.00
                       total            £ 249.97

```{=org}
#+TBLFM: @11$3=vsum(@2..@10);£ %.2f
```
# \[2015-07-13 Mon\] Recognize new password prompts in Emacs shell
---
id: recognize-new-password-prompts-in-emacs-shell
---

At some point, you may come across a trusted command-line utility prompting you for a password, and Emacs shell happily displaying each typed character to the nearby-world to see. Luckily, you can train Emacs to recognize new password prompts and hide the typed characters in modes deriving from comint. Append the password prompt REGEXP:

``` {.commonlisp org-language="emacs-lisp"}
(setq comint-password-prompt-regexp (concat comint-password-prompt-regexp
                                            "\\|"
                                            "Password for red alert:"))
```

# \[2015-07-11 Sat\] Bosnia and Hercegovina travel bookmarks
---
id: bosnia-and-hercegovina-travel-bookmarks
---

-   [Ten reasons to visit Bosnia & Hercegovina](http://www.lonelyplanet.com/bosnia-and-hercegovina/travel-tips-and-articles/ten-reasons-to-visit-bosnia-hercegovina).

# \[2015-07-11 Sat\] Ireland travel bookmarks
---
id: ireland-travel-bookmarks
---

-   [Skellig Michael](https://en.wikipedia.org/wiki/Skellig_Michael).
-   Fishy Fishy in Kinsale: beautiful town on the water.
-   Belfast.
-   Giant's Causeway.
-   Greyhound dog races at Shelbourne Park.
-   [Old library chamber, Trinity College, Dublin](https://twitter.com/bilderbergh/status/1066223113774514176?s=12).

# \[2015-07-09 Thu\] Pizza in London
---
id: pizza-in-london
---

Not tried these yet. Taking note:

-   Bravi Ragazzi (Streatham).
-   Homeslice (Covent Garden).
-   Lord Morpeth (Hackney).
-   Santa Maria (Ealing).
-   Voodoo Ray's (Dalston).
-   Well Kneaded Wagon (Date-dependent location).

# \[2015-07-09 Thu\] mp4 to gif
---
id: mp4-to-gif
---

Converting mp4 to gif is handy for posting short screencasts. You can convert to gif using ffmpeg and optimize with imagemagick. To install:

``` {.bash org-language="sh"}
apt-get install ffmpeg imagemagick (linux)
brew install ffmpeg imagemagick (Mac)
```

Convert to gif:

``` {.bash org-language="sh"}
ffmpeg -i my.mp4 -pix_fmt rgb24 -r 5 my.gif
```

Optimize with:

``` {.bash org-language="sh"}
convert -dither none -layers Optimize my.gif my_optimized.gif
```

UPDATE: There's also licecap and subsequently optimize with:

``` {.bash org-language="sh"}
cat source.gif | gifsicle --colors 256 --optimize=3 --delay=15 > target.gif
```

UPDATE: [Also consider for .mov](https://gist.github.com/dergachev/4627207):

``` {.bash org-language="sh"}
ffmpeg -i in.mov -pix_fmt rgb24 -r 10 -f gif - | gifsicle --optimize=3 --delay=3 > out.gif
```

# \[2015-07-06 Mon\] Keyboards bookmarks
---
id: keyboards-bookmarks
---



-   [An introduction to Cherry MX mechanical switches](http://www.keyboardco.com/blog/index.php/2012/12/an-introduction-to-cherry-mx-mechanical-switches/).
-   [Code keyboard](http://www.codekeyboards.com).
-   [I ♥ Keyboards \| Ethan Anderson](https://ethanaa.com/blog/i-%E2%99%A5-keyboards/#silver).
-   [Keyboardio Blog](https://blog.keyboard.io/).
-   [Keychron \| Wireless Mechanical Keyboards for Mac, Windows and phones](https://www.keychron.com/).
-   [Learn - Colemak keyboard layout](https://colemak.com/Learn).
-   [Mechanical Keyboards Database - custom keyboards photos](https://mechdb.net/).
-   [Plaid // Keyboard base board](https://5z6p.com/products/plaid-through-hole/).
-   [Products – Ultimate Hacking Keyboard](https://ultimatehackingkeyboard.com/shop).
-   [r/cyberDeck](https://www.reddit.com/r/cyberDeck/).
-   [r/ErgoMechKeyboards](https://www.reddit.com/r/ErgoMechKeyboards/).
-   [Ultimate Hacking Keyboard (Hacker News)](https://news.ycombinator.com/item?id=17989303).
-   [Why Learn the Colemak Keyboard Layout?](http://sittingscribe.com/why-learn-the-colemak-keyboard-layout/).

# \[2015-07-05 Sun\] United States travel bookmarks
---
id: united-states-travel-bookmarks
---



-   [Abandoned America](https://www.abandonedamerica.us/).
-   [America's best food cities for travelers on a budget - Lonely Planet](https://www.lonelyplanet.com/usa/travel-tips-and-articles/americas-best-food-cities-for-travelers-on-a-budget/40625c8c-8a11-5710-a052-1479d2756c74).
-   [Antelope Canyon (Arizona)](https://en.wikipedia.org/wiki/Antelope_Canyon).
-   [Law Library in Iowa](https://www.statelibraryofiowa.org/services/collections/law-library).
-   [Peter Wade's answer has restaurants throughout the US](https://qr.ae/pGIlFt).
-   [Supai, Arizona](https://duckduckgo.com/?q=Supai%252C+Arizona&t=ffab&iax=1&ia=images).
-   [The Texas Triffid Ranch \| Dallas's Pretty Much Only Carnivorous Plant Gallery](https://texastriffidranch.com/).
-   [Turnip Rock in Port Austin, Michigan](https://duckduckgo.com/?q%3DTurnip%2BRock%2Bin%2BPort%2BAustin%252C%2BMichigan&t%3Dffab&iax%3D1&ia%3Dimages).
-   [Vance Creek Bridge in Washington](https://twitter.com/EarthPix/status/613912754227965952/photo/1).
-   [Washington trail association (hiking)](https://www.wta.org/).
-   [Where can I afford to live in NYC with a \$100,000 salary and no debt? (Quora)](https://www.quora.com/Where-can-I-afford-to-live-in-NYC-with-a-100-000-salary-and-no-debt).

# \[2015-07-05 Sun\] Lebanon travel bookmarks
---
id: lebanon-travel-bookmarks
---



-   [Baatara gorge waterfall](https://en.wikipedia.org/wiki/Baatara_gorge_waterfall).
-   [STEAK CRUSH (@steakcrush)](https://www.instagram.com/steakcrush).

# \[2015-07-05 Sun\] Slovenia travel bookmarks
---
id: slovenia-travel-bookmarks
---

-   [Lake Bohinj](http://wildswim.com/lake-bohinj).

# \[2015-07-05 Sun\] Belgium travel bookmarks
---
id: belgium-travel-bookmarks
---



-   [The Flower Carpet event at the Grand-Place in Brussels](https://twitter.com/planetepics/status/617003120695099392/photo/1).
-   [Travel arrangements around Brussels - zerokspot.com](https://zerokspot.com/weblog/2020/02/03/travel-arrangements-brussels/).

# \[2015-07-03 Fri\] Fishing with Emacs
---
id: fishing-with-emacs
---

OK not quite, but having recently learned about [C-M-w (append-next-kill)](https://www.gnu.org/software/emacs/manual/html_node/emacs/Appending-Kills.html), I used it in a keyboard macro to fish out matching lines. This is similar to [flush-lines](https://www.gnu.org/software/emacs/manual/html_node/emacs/Other-Repeating-Search.html), except the kill ring is also populated. This is handy, if you need the flushed lines. Here's an example.

![](https://xenodium.github.io/images/fishing-with-emacs/fishing.gif)

Here's the equivalent in Emacs lisp:

``` {.commonlisp org-language="emacs-lisp"}
(defun flush-kill-lines (regex)
  "Flush lines matching REGEX and append to kill ring.  Restrict to \
region if active."
  (interactive "sFlush kill regex: ")
  (save-excursion
    (save-restriction
      (when (use-region-p)
        (narrow-to-region (point) (mark))
        (goto-char 0))
      (while (search-forward-regexp regex nil t)
        (move-beginning-of-line nil)
        (kill-whole-line)))))
```

# \[2015-07-03 Fri\] California travel bookmarks
---
id: california-travel-bookmarks
---

-   [General Sherman Tree at Sequoia National Park](https://en.wikipedia.org/wiki/Sequoia_National_Park).

# \[2015-07-01 Wed\] Rebind caps lock to control key on Mac OS X
---
id: rebind-caps-lock-to-control-key-on-mac-os-x
---

Let's see if this one sticks. I'll give caps lock as control a try. Rebinding the keys on Mac OS X is easy enough:

![](https://xenodium.github.io/images/rebind-caps-lock-to-control-key-on-mac-os-x/caps-lock-to-control.png)

> System Preferences -\> Keyboard -\> Keyboard Tab -\> Modifier Keys…

# \[2015-06-30 Tue\] Searchable ebooks in Emacs
---
id: searchable-ebooks-in-emacs
---

If you haven't bought [Mastering Emacs](https://www.masteringemacs.org/book) by [Mickey Petersen](https://twitter.com/mickeynp), you should. It's a wonderful source of Emacs tips. Having just finished the ebook on my Kindle, I was keen to go back and fish out some of that newly found wisdom. My immediate reaction was to figure out a way to make the ebook searchable from Emacs.

The ebook is available in epub and pdf format. Though Emacs's docview is super handy for viewing pdf's, searching didn't feel as comfortable as searching in org mode. The epub, on the other hand, proved useful. [Pandoc](http://pandoc.org) can easily convert from epub to org.

``` {.bash org-language="sh"}
pandoc  --from=epub --to=org mastering-emacs.epub > mastering-emacs.org
```

After a some tidying (mostly removing BEGIN_HTML/END_HTML blocks and adding TITLE/AUTHOR), the resulting org file is surprisingly clean and easy to search/navigate. [helm-swoop](https://github.com/ShingoFukuyama/helm-swoop) and [helm-org-in-buffer-headings](https://github.com/emacs-helm/helm/blob/199b9feb396eedc0e502dd767b19060f7dc09f6a/helm-org.el) are great for that.

![](https://xenodium.github.io/images/searchable-ebooks-in-emacs/mastering-emacs-org-00.png)

![](https://xenodium.github.io/images/searchable-ebooks-in-emacs/mastering-emacs-org-01.png)

![](https://xenodium.github.io/images/searchable-ebooks-in-emacs/mastering-emacs-org-02.png)

# \[2015-06-21 Sun\] Portugal travel bookmarks
---
id: portugal-travel-bookmarks
---



-   [As a Dermatologist, what life changing skin care advice would you give me?](https://www.quora.com/As-a-Dermatologist-what-life-changing-skin-care-advice-would-you-give-me).
-   [Avenida dos Platanos](https://duckduckgo.com/?q=avenida+dos+platanos&ia=images).
-   [Beautiful Lisbon](https://brunoamaral.eu/page/beautiful-lisbon/).
-   [Best restaurants in Alghero?](https://www.reddit.com/r/Sardinia/comments/14uwypj/best_restaurants_in_alghero/).
-   Boca do inferno.
-   Cabo da Roca.
-   Casa dos passarinhos (Steak on hot stone, tuna steak with “mirandesa” sauce, monkfish masada).
-   Cascais - Guincho.
-   Cervejaria Ramiro (seafood restaurant in town).
-   Eduard 7th park.
-   Estoril.
-   Fox Trot (bar).
-   [Hachijō-jima island](https://en.wikipedia.org/wiki/Hachij%C5%8D-jima).
-   [Ilha da Culatra (good for families)](https://duckduckgo.com/?q=ilha+da+culatra&t=ffab&iax=1&ia=images).
-   [Ilha da Tavira (good for food @ Portas do Mar)](https://duckduckgo.com/?q=ilha+da+tavira&t=ffab&iax=1&ia=images).
-   [Ilha Deserta (seafood as Estaminé)](https://duckduckgo.com/?q=ilha+deserta&t=ffab&iax=1&ia=images).
-   Jeronimos Monastery (Lisbon).
-   Lisbon Castle.
-   [Mercado da Ribeira in Lisbon](https://www.lisbonlux.com/lisbon-shops/mercado-da-ribeira.html).
-   Mouro's castle (Sintra).
-   Mouro's castle.
-   Pasteis de Belem (Lisbon).
-   Pastelaria piriquita eat queijadas de sintra.
-   Pasteleria Piriquita (Sintra).
-   Pavilhao Chines (bar).
-   Pena's Pallace (must see if you go to sintra)
-   Pena's Pallace (Sintra).
-   Pensao do Amor (bar).
-   [Portugal Archives - ET Food Voyage](https://www.etfoodvoyage.com/category/locations/portugal/).
-   Praça do comercio.
-   Quinta da Regaleira
-   Quinta da Regaleira (Sintra).
-   Sintra village
-   [Sintra](https://en.wikipedia.org/wiki/Sintra).
-   Stop do bairro (tamboril rice, prawn curry, and seafood rice).
-   [Surfcastle](http://www.surfcastle.com/surf/school).
-   [São Bento railway station](https://twitter.com/archpng/status/1115037292752723968).
-   Sé (Lisbon Cathedral).
-   [The best beaches in Portugal's Algarve](https://twitter.com/lonelyplanet/status/612282216635363328/photo/1).
-   Torre Belem (Lisbon).
-   [Web Summit Ladies Craft Night - Tote Bag Embroidery Workshop Tickets, Tue, Nov 6, 2018 at 7:00 PM (Eventbrite)](https://www.eventbrite.com/e/web-summit-ladies-craft-night-tote-bag-embroidery-workshop-tickets-51503431149).
-   [What tips would you give to a newbie who wants to travel like you? - Quora](https://www.quora.com/What-tips-would-you-give-to-a-newbie-who-wants-to-travel-like-you).
-   [World's longest pedestrian suspension bridge](https://edition.cnn.com/travel/article/world-longest-pedestrian-suspension-bridge-portugal-arouca/index.html).

# \[2015-06-21 Sun\] Bulgaria travel bookmarks
---
id: bulgaria-travel-bookmarks
---



-   [Devetashka Cave](https://twitter.com/EarthPix/status/612661559018528768/photo/1).

# \[2015-06-21 Sun\] Presenting bookmarks
---
id: presenting-bookmarks
---



-   [How to give a presentation people will remember](http://s.hbr.org/1A4l5OX).
-   [How to give a stellar presentation](http://s.hbr.org/1A3uvKp).
-   [Speaker style bingo: 10 presentation anti-patterns](http://www.troyhunt.com/2015/06/speaker-style-bingo-10-presentation.html?m%3D1).

# \[2015-06-21 Sun\] Bali travel bookmarks
---
id: bali-travel-bookmarks
---

-   [Gili Islands travel (Nusa Tenggara, Indonesia - Lonely Planet)](https://www.lonelyplanet.com/indonesia/nusa-tenggara/gili-islands).
-   [Manta snorkeling Nusa Penida – When? Where? How much?](https://snorkelaroundtheworld.com/2018/09/manta-snorkeling-nusa-penida/).
-   Pura Lempuyang, Bali.

# \[2015-06-17 Wed\] WWDC app for OS X
---
id: wwdc-app-for-os-x
---

[Guilherme Rambo](https://github.com/insidegui) created a great OS X [OS X app for viewing WWDC content](https://github.com/insidegui/WWDC). Just installed it. Super handy. Thanks. Installing as simple as:

``` {.bash org-language="sh"}
$ brew cask install wwdc
```

# \[2015-06-15 Mon\] Debugging Objective-C reference cycles
---
id: debugging-objective-c-reference-cycles
---

Overriding retain/release/autorelease may be handy while debugging:

``` objc
- (instancetype)retain {
  NSLog(@"%p, retain\n", self);
  return [super retain];
}

- (oneway void)release {
  NSLog(@"%p, release\n", self);
  [super release];
}

- (instancetype)autorelease {
  NSLog(@"%p, autorelease\n", self);
  return [super autorelease];
}
```

# \[2015-06-13 Sat\] London grub
---
id: london-grub
---

Beyond the hype, buzz, and pricey gimmicks… Places to eat in London:

-   Antipode.
-   Arang.
-   Bone Daddies.
-   Gelupo.
-   Grind.
-   Holy Cow.
-   Kerbisher and Malt.
-   Kulu Kulu (South Ken).
-   Le Relais de Venise.
-   Lucky 7's.
-   Royal China.
-   Shree Krishna Vada Pav.
-   Sri Suwoon.
-   Tayyabs.
-   The Cow.
-   Tonkotsu.

# \[2015-06-08 Mon\] My working playlist
---
id: my-working-playlist
---

It's been a while since I spotted [The Ultimate Music Collection for Getting Work Done](http://www.asianefficiency.com/motivation/music-working/). Since then, I've been on the lookout for music to work to. Some favorites:

-   [B. Fleischmann - I'm Not Ready For The Grave Yet](https://play.google.com/store/music/album/B_Fleischmann_I_m_Not_Ready_For_The_Grave_Yet?id%3DBvu3fq5u5nbqcouo55bqi5qukjq).
-   [B. Fleischmann - Pop Loops For Breakfast](https://play.google.com/store/music/album/B_Fleischmann_Pop_Loops_For_Breakfast?id%3DB55lzvhp5xn2mkrzggq2uymiwm4).
-   [B. Fleischmann - Sidonie](https://play.google.com/store/music/album/B_Fleischmann_Sidonie?id%3DBu5v5pc4ixxzapcoehnpllfvm5u).
-   [B. Fleischmann - The Humbucking Coil](https://play.google.com/store/music/album/B_Fleischmann_The_Humbucking_Coil?id%3DBok7yvyylg7ddkofaaecjdsduky).
-   [B. Fleischmann - The Tired Sounds of Stars of the Lid](https://play.google.com/store/music/album/Stars_of_the_Lid_The_Tired_Sounds_of_Stars_of_the?id%3DBasr7yt6jlsut3v2tpua7kfcckm).
-   [B. Fleischmann - Welcome Tourist](https://play.google.com/store/music/album/B_Fleischmann_Welcome_Tourist?id%3DByefc55y7psyxg4okrq63mn4nne).
-   [Bexar Bexar - Haralambos](https://play.google.com/store/music/album/Bexar_Bexar_Haralambos?id%3DBpyhpbxh6b4wthiczeokgiuijo4).
-   [Budhaditya Mukherjee - Sitar Recital](https://play.google.com/store/music/album/Budhaditya_Mukherjee_Sitar_Recital?id%3DBtawoyja7nxl2arsuimelitwzay).
-   [Daft Punk - TRON: Legacy](https://play.google.com/store/music/album/Daft_Punk_TRON_Legacy?id%3DBbcjlhafmpp5ueztndxevp4cfuq).
-   [General Fuzz - Soulful Filling](https://play.google.com/store/music/album/General_Fuzz_Soulful_Filling?id%3DB7rb24bzexr2q5bfjzffhvdd5he).
-   [Inception (Music From The Motion Picture)](https://play.google.com/store/music/album/Hans_Zimmer_Inception_Music_From_The_Motion_Pictur?id%3DBoebgqwhs6bsgytjw2eybh7jiny).
-   [ISAN - Lucky Cat](https://play.google.com/store/music/album/ISAN_Lucky_Cat?id%3DBjuvgzm2mocch55nolmbsjenaxy).
-   [ISAN - Plans Drawn In Pencil](https://play.google.com/store/music/album/ISAN_Plans_Drawn_In_Pencil?id%3DBmp2y6k5bstvqlnzn2ncexcyolq).
-   [Jayanthi Kumaresh - Mysterious Duality](https://play.google.com/store/music/album/Jayanthi_Kumaresh_Mysterious_Duality?id%3DByrdsgd3b7ixcouemqqouxf45ia).
-   [Mogwai - Les Revenants](https://play.google.com/store/music/album/Mogwai_Les_Revenants?id%3DBu2zb5nvoth3ead6v5riw43by7u).
-   [Moondog - Big Cat](https://play.google.com/store/music/album/Moondog_Big_Cat?id%3DB2hq6dlicqboshlev5eeiy53ybe).
-   [Moonrise Kingdom (Original Soundtrack)](https://play.google.com/store/music/album/Various_Artists_Moonrise_Kingdom_Original_Soundtra?id%3DB5babupzgcigh6jdprp3ga3owzm).
-   [Nico Muhly - Drones](https://play.google.com/store/music/album/Nico_Muhly_Drones?id%3DBlj2wetseui4m5gfjjk5lssenui).
-   [Paul Leonard-Morgan - Limitless (Original Motion Picture Soundtrack)](https://play.google.com/store/music/album/Paul_Leonard_Morgan_Limitless_Original_Motion_Pict?id%3DBev5grya2zxgojikqwkdcxmdijq).
-   [Robert Scott Thompson - Upon the Edge of Night](https://play.google.com/store/music/album/Robert_Scott_Thompson_Upon_the_Edge_of_Night?id%3DBpkg77vpxsfgu4dj53y5ucxa4qe).
-   [Ryan Miller - The Kings of Summer (Jordan Vogt-Roberts' Original Motion Picture Soundtrack)](https://play.google.com/store/music/album/Ryan_Miller_The_Kings_of_Summer_Jordan_Vogt_Robert?id%3DBx2mxfujrx5mjkqq6mm23zwzj54).
-   [Stars of the Lid - And Their Refinement of the Decline](https://play.google.com/music/listen#/album//Stars%2Bof%2Bthe%2BLid/And%2BTheir%2BRefinement%2Bof%2Bthe%2BDecline).
-   [Start of the Lid - Gravitational Pull vs. The Desire for an Aquatic Life](https://play.google.com/store/music/album/Stars_of_the_Lid_Gravitational_Pull_vs_The_Desire?id%3DBdnfpvqwopgqufuy2ly6u3lkhvy).
-   [Terry Riley - A Rainbow In Curved Air; Poppy Nogood and the Phantom Band](https://play.google.com/store/music/album/Terry_Riley_Terry_Riley_A_Rainbow_In_Curved_Air_Po?id%3DBmfe6h2d7heiey4xz74ocg6sx6e).
-   [Trent Reznor & Atticus Ross - The Social Network (Soundtrack from the Motion Picture)](http://www.amazon.com/Social-Network-Trent-Reznor-Atticus/dp/B0044430H8/ref%3Dtmm_msc_swatch_0?_encoding%3DUTF8&sr%3D&qid%3D).
-   [Trentemøller - Into The Great Wide Yonder](https://play.google.com/store/music/album/Trentem%25C3%25B8ller_Into_The_Great_Wide_Yonder?id%3DBf6v47rm3dvgrjaircusjtocbfq).
-   [Tycho - Awake](https://play.google.com/store/music/album/Tycho_Awake?id%3DBtc34r45fy7qwk4t6irzpkduv4a).
-   [Various Artists - Singing Strings From India](https://play.google.com/store/music/album/Various_Artists_Singing_Strings_From_India?id%3DBvkavd7gn62io3lmskjsbgpvtvy).
-   [vitling: Triple Saw (algorithmic music) #algorave](http://www.vitling.com/toys/triple_saw/).
-   [Whiplash (Original Motion Picture Soundtrack)](https://play.google.com/store/music/album/Justin_Hurwitz_Whiplash_Original_Motion_Picture_So?id%3DBfdbec3biny47s6rwchdifzgrg4).
-   [Youth Lagoon - The Year Of Hibernation](https://play.google.com/store/music/album/Youth_Lagoon_The_Year_Of_Hibernation?id%3DBfw6onp7zxplpmlrheu3rmd3yui).

# \[2015-06-02 Tue\] Xcode bookmarks
---
id: xcode-bookmarks
---



-   [A Better Way to Automatically Merge Changes in Your XCode Project Files](https://medium.com/ios-os-x-development/a-better-way-to-automatically-merge-changes-in-your-xcode-project-files-3d83b3583fe4#.hz33egjv1).
-   [Clean Code: A Handbook of Agile Software Craftsmanship (Book)](http://www.amazon.co.uk/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882/ref=sr_1_1?ie=UTF8&qid=1444472656&sr=8-1&keywords=Clean+Code%3A+A+Handbook+of+Agile+Software+Craftsmanship).
-   [From Xcode to TestFlight using command line](https://medium.com/passei-direto-product-and-technology/from-xcode-to-testflight-using-command-line-288c3a85bd93).
-   [Fuzzy autocomplete for Xcode](https://github.com/FuzzyAutocomplete/FuzzyAutocompletePlugin/blob/master/README.md).
-   [Multiplex (like Emacs multiple cursor but for Xcode)](https://github.com/kolinkrewinkel/Multiplex).
-   [Reverse-engineering Xcode with dtrace](http://chen.do/blog/2013/10/22/reverse-engineering-xcode-with-dtrace/).

# \[2015-06-02 Tue\] Costa Rica travel bookmarks
---
id: costa-rica-travel-bookmarks
---

-   [Catarata del Toro](https://twitter.com/planetepics/status/603851463509540864/photo/1).
-   [What are the best travel hacks when traveling to Costa Rica? (Quora)](https://www.quora.com/What-are-the-best-travel-hacks-when-traveling-to-Costa-Rica).

# \[2015-06-02 Tue\] Australia travel bookmarks
---
id: australia-travel-bookmarks
---



-   [Australia's best food experiences: state by state](http://www.lonelyplanet.com/australia/sydney/travel-tips-and-articles/australias-best-food-experiences-state-by-state).
-   [Best Queensland island escapes for small budgets](http://www.lonelyplanet.com/travel-tips-and-articles/best-queensland-island-escapes-for-small-budgets).
-   [Des and Debi O’Tooles Honey](http://myproducetrail.com.au/directory/215).
-   Fish and chips at Bondi beach.
-   [Tasmania: the isle that's wild at heart](https://www.lonelyplanet.com/australia/tasmania/travel-tips-and-articles/tasmania-the-formidable-isle-thats-wild-at-heart).
-   The Butler Potts Point (bar & restaurant).
-   [Tree Top Walk (Walpole, Australia): Top Tips Before You Go - TripAdvisor](https://www.tripadvisor.com/Attraction_Review-g488368-d2415480-Reviews-Tree_Top_Walk-Walpole_Western_Australia.html).

# \[2015-06-02 Tue\] Samoa travel bookmarks
---
id: samoa-travel-bookmarks
---

-   [To Sua ocean trench](http://www.samoa.travel/activity/to-sua-ocean-trench).

# \[2015-06-02 Tue\] Norway travel bookmarks
---
id: norway-travel-bookmarks
---



-   [Atlantic Road](https://twitter.com/archpics/status/613586879645155328/photo/1).
-   Bergen (check out colorful wooden houses).
-   Bergen railway (Bergen-Oslo): 300 miles of beautiful Norwegian scenery.
-   [Lofoten Islands](http://www.lofoten-info.no/).
-   Norwegian Air (cheap flights between all the
-   [Olden](https://duckduckgo.com/?q=olden+norway&t=ffab&iax=1&ia=images).
-   [Reine](https://en.wikipedia.org/wiki/Reine).
-   [Sakrisøy, Lofoten Islands](https://www.pinterest.com/pin/377950593706704729/?utm_campaign%3Drecs_150817&utm_term%3D1&utm_content%3D377950593706704729&e_t%3Dbce987c654c54dfa8733bc2f9df20080&utm_source%3D31&e_t_s%3Dpins&utm_medium%3D2004).
-   [Spitsbergen](https://duckduckgo.com/?q=Spitsbergen&t=ffsb&iax=1&ia=images).
-   [The Atlantic Road - Atlanterhavsveien / Atlanterhavsvegen](http://www.theatlanticroad.com/).

# \[2015-06-02 Tue\] Los Angeles travel bookmarks
---
id: los-angeles-travel-bookmarks
---



-   [Beer Belly (Craft Beer + Crafty Food)](http://www.beerbellyla.com/).
-   [Blue Star Donuts (SF + LA)](http://www.bluestardonuts.com/).

# \[2015-05-28 Thu\] Mastering Emacs is out
---
id: mastering-emacs-is-out
---

Emacs is amazingly alive. New packages are regularly listed on [melpa](http://melpa.org) and a new book just came out: [Mastering Emacs](https://www.masteringemacs.org/book) by [Mickey Petersen](https://twitter.com/mickeynp).

[![](https://xenodium.github.io/images/mastering-emacs-is-out/cover.png)](https://www.masteringemacs.org/book)

# \[2015-05-25 Mon\] South Carolina travel bookmarks
---
id: south-carolina-travel-bookmarks
---

-   [Angel Oak tree](https://en.wikipedia.org/wiki/Angel_Oak).

# \[2015-05-25 Mon\] Colorado travel bookmarks
---
id: colorado-travel-bookmarks
---

-   [Horseshoe Bend](http://horseshoebend.com/).

# \[2015-05-25 Mon\] Cuzco travel bookmarks

-   Gelatina de patita (mercado)
-   Yolanda. Adobo/chicarron. Chicarroneria Yoli.
-   Pan de chocolate Oropeza.
-   La esquina de los lechones y tamales dulces de Sra Elsa.
-   Cafe el Ayllu (lengua de suegra)
-   La Chomba (picanteria). Costillar frito. Frutillada. Chicharron. Ubre. Tripa.
-   La quinta Eulaia. Asado y chicarron. Rocoto. Humita.
-   Chicheria la loba.

# \[2015-05-25 Mon\] Bash bookmarks
---
id: bash-bookmarks
---



-   [Bash conditional statement (Linux Hint)](https://linuxhint.com/bash_conditional_statement/).
-   [Bash Echo Examples (Linux Hint)](https://linuxhint.com/bash_echo/).
-   [Bash Error Handling (Linux Hint)](https://linuxhint.com/bash_error_handling/).
-   [Bash for loop examples (Linux Hint)](https://linuxhint.com/bash_for_loop/).
-   [Bash Reference Manual](https://www.gnu.org/software/bash/manual/bashref.html).
-   [Common shell script mistakes (Hacker News)](https://news.ycombinator.com/item?id=11832941).
-   [Defensive bash programming](http://www.kfirlavi.com/blog/2012/11/14/defensive-bash-programming).
-   [HowTo: Use bash For Loop In One Line - nixCraft](https://www.cyberciti.biz/faq/linux-unix-bash-for-loop-one-line-command/).
-   [Rich’s sh (POSIX shell) tricks](http://www.etalabs.net/sh_tricks.html).
-   [Safe ways to do things in bash](https://github.com/anordal/shellharden/blob/master/how_to_do_things_safely_in_bash.md).
-   [shellcheck: ShellCheck, a static analysis tool for shell scripts](https://github.com/koalaman/shellcheck).
-   [String concatenation in bash (Linux Hint)](https://linuxhint.com/string_concatenation_bash/).
-   [The Bash Academy](http://bash.academy).

# \[2015-05-25 Mon\] restclient.el
---
id: restclient.el
---

Installed [Pashky's](https://github.com/pashky/restclient.el) [restclient.el](https://github.com/pashky/restclient.el) Emacs package. Super helpful when trying out REST APIs.

![](https://xenodium.github.io/images/restclient.el/restclient.png)

# \[2015-05-25 Mon\] Seatle travel bookmarks
---
id: seatle-travel-bookmarks
---



-   [14 free things to do in Seattle](http://www.lonelyplanet.com/usa/seattle/travel-tips-and-articles/14-free-things-to-do-in-seattle).
-   [Indi chocolate](https://indichocolate.com/).
-   [Le Panier](https://www.lepanier.com/).

# \[2015-05-25 Mon\] Berlin travel bookmarks
---
id: berlin-travel-bookmarks
---



-   [10 things to do in Berlin](http://www.topinspired.com/top-10-things-to-do-in-berlin/).
-   [Berlin On A Budget: Our Slow Travel Guide](http://www.angloitalianfollowus.com/berlin-on-a-budget).
-   [Perfect day in Berlin](http://www.lonelyplanet.com/travel-tips-and-articles/69756).
-   [The best of hidden Berlin](http://www.lonelyplanet.com/germany/berlin/travel-tips-and-articles/75972).

# \[2015-05-25 Mon\] Skeuomorph
---
id: skeuomorph
---

From [Wikipedia](https://en.wikipedia.org/wiki/Skeuomorph), skeuomorph *ˈskjuːəmɔrf* is a derivative object that retains ornamental design cues from structures that were necessary in the original. Examples include pottery embellished with imitation rivets reminiscent of similar pots made of metal and a software calendar that imitates the appearance of binding on a paper desk calendar.

# \[2015-05-25 Mon\] define-word
---
id: define-word
---

Installed [Abo Abo's](https://github.com/abo-abo) [define-word](https://github.com/abo-abo/define-word) Emacs package. A handy package to define words at point.

![](https://xenodium.github.io/images/define-word/define-word.png)

# \[2015-05-22 Fri\] Flushing empty lines in Emacs
---
id: flushing-empty-lines-in-emacs
---

Via [masteringemacs.org](https://www.masteringemacs.org), [removing blank lines in a buffer](https://www.masteringemacs.org/article/removing-blank-lines-buffer):

``` example
M-x flush-lines RET ^$ RET
```

# \[2015-05-22 Fri\] Regex bookmarks
---
id: regex-bookmarks
---



-   [Emacs: Text Pattern Matching (regex) tutorial](http://ergoemacs.org/emacs/emacs_regex.html).
-   [Regex Cheat Sheet (DEV Community)](https://dev.to/emmawedekind/regex-cheat-sheet-2j2a).
-   [Regex quick reference](http://regexrenamer.sourceforge.net/help/regex_quickref.html): From regexrenamer.
-   [RegExr, see hacker news comments for other suggestions](https://news.ycombinator.com/item).
-   [RegExr: A website for interactive regex prototyping with syntax highlighting](http://regexr.com/).

# \[2015-05-06 Wed\] Write to temp iOS snippet
---
id: write-to-temp-ios-snippet
---

``` objc
NSString *tempDir = NSTemporaryDirectory();
NSLog(@"%@\n", tempDir);
NSString *dataFilePath = [tempDir stringByAppendingPathComponent:@"my.file"];
[data writeToFile:dataFilePath atomically:YES];
```

# \[2015-05-04 Mon\] Greece travel bookmarks
---
id: greece-travel-bookmarks
---



-   [Armenistis - Ikaria](http://island-ikaria.com/villages/Armenistis).
-   [Hydra (island). No cars or motorcycles allowed](https://en.wikipedia.org/wiki/Hydra_%2528island%2529).
-   [Kathisma Beach - Lefkada](https://twitter.com/planetepics/status/584886491534471168/photo/1).
-   [Kefalonia Island](https://en.wikipedia.org/wiki/Cephalonia).
-   [Melissani Cave](https://en.wikipedia.org/wiki/Melissani_Cave).
-   [Momnevasia](https://duckduckgo.com/?q=monemvasia+greece&iac=1).
-   [Navagio bay](https://en.wikipedia.org/wiki/Navagio).
-   [Papafragas beach](http://www.milos-island.gr/beaches/papafragas-beach.html).
-   [Preveza at DuckDuckGo](https://duckduckgo.com/?q=preveza&t=ffab&iax=images&ia=images).

# \[2015-05-04 Mon\] Sri Lanka travel bookmarks
---
id: sri-lanka-travel-bookmarks
---



-   [Ambuluwawa Temple](https://exploreslk.com/ambuluwawa-temple/).
-   [Sri Lanka Travel Guide \| Best Tips For Your Trip (Nomadic Matt)](https://www.nomadicmatt.com/travel-blogs/sri-lanka-trip-planning-guide/).
-   [The best train journeys in Sri Lanka](https://www.lonelyplanet.com/amp/articles/best-train-rides-sri-lanka).
-   [The Safari Hotel (great area to go on safari, see leopards)](http://www.agoda.com/the-safari-hotel/hotel/yala-lk.html%20).

# \[2015-05-04 Mon\] Switzerland travel bookmarks
---
id: switzerland-travel-bookmarks
---



-   [Bernina railway](https://en.wikipedia.org/wiki/Bernina_railway).
-   [Lauterbrunnen village](https://en.wikipedia.org/wiki/Lauterbrunnen).
-   [Lion Monument (Lucerne)](http://en.wikipedia.org/wiki/Lion_Monument).
-   [Lucerne lake/city](http://www.luzern.com/en/index.cfm).
-   [Oeschinen Lake](https://en.wikipedia.org/wiki/Oeschinen_Lake).

# \[2015-05-04 Mon\] Thailand travel bookmarks
---
id: thailand-travel-bookmarks
---



-   [Best Thai street food: Bangkok stall Raan Jay Fai awarded with Michelin star](http://www.traveller.com.au/bangkok-street-food-restaurant-raan-jay-fai-awarded-with-michelin-star-h03h7v).
-   [Buddha Statue in Forest Pak Chong](http://www.thebuddhism.net/2012/07/11/buddha-statue-in-forest-pak-chong-thailand/).
-   [Phanom Rung Historical Park](http://en.wikipedia.org/wiki/Phanom_Rung_Historical_Park).
-   [Rama IX park, Bangkok](https://twitter.com/archpics/status/607334981971623936/photo/1).
-   [Sanctuary of Truth](https://duckduckgo.com/?q=Sanctuary+of+truth%2C+Thailand+&t=ffsb&iax=1&ia=images).
-   [What makes Bangkok so popular? (Quora)](https://www.quora.com/What-makes-Bangkok-so-popular).

# \[2015-05-04 Mon\] Madagascar travel bookmarks
---
id: madagascar-travel-bookmarks
---

-   [Avenue of the Baobabs](http://en.wikipedia.org/wiki/Avenue_of_the_Baobabs).

# \[2015-05-04 Mon\] Hong Kong travel bookmarks
---
id: hong-kong-travel-bookmarks
---



-   [Causeway Bay pedestrian crossing](http://hongkongthrumyeyes.com/2013/07/13/crowd-of-pedestrians-crossing-at-sogo-in-causeway-bay/).
-   [Hong Kong's most breathtaking views: where to glimpse the city from above](http://www.lonelyplanet.com/china/travel-tips-and-articles/75797).
-   [Hotel Icon (allegedly amazing service/extras)](http://www.hotel-icon.com/).
-   [Lin Heung Tea House (bakery/tea/dim sum)](https://en.wikipedia.org/wiki/Lin_Heung_Tea_House).
-   [Mak's Noodle (Jordan)](https://www.tripadvisor.co.uk/Restaurant_Review-g294217-d8028365-Reviews-Mak_s_Noodle_Jordan-Hong_Kong.html).
-   [Siu yuk (Roasted Pig)](https://en.wikipedia.org/wiki/Siu_yuk).
-   [Tsang Tsou Choi (King of Hong Kong)](https://en.wikipedia.org/wiki/Tsang_Tsou_Choi).
-   [Tsim Chai Kee](http://danielfooddiary.com/2014/12/13/tsimchaikee/) (recommended over Mak's wonton/soup).

# \[2015-05-04 Mon\] Barcelona travel bookmarks
---
id: barcelona-travel-bookmarks
---



-   [18 free things to do in Barcelona](http://www.lonelyplanet.com/spain/barcelona/travel-tips-and-articles/77782).
-   [Dessert place you can recommend in Barcelona? (Twitter)](https://twitter.com/merowing_/status/884349497685549056).
-   [La Pedrera](https://www.lapedrera.com/en/home).

# \[2015-05-04 Mon\] Iceland travel bookmarks
---
id: iceland-travel-bookmarks
---



-   [An Iceland travel log](http://www.gertenbach.info/e_reisen_2010.htm).
-   [Apartmenthouse.is](http://www.apartmenthouse.is/) for local flats.
-   Blue lagoon spa.
-   [citywalk.is](http://citywalk.is/): Free walking tour.
-   [Design March](http://designmarch.is/).
-   [Drive it yourself: The Snæfellsnes peninsula](http://www.iheartreykjavik.net/2015/04/drive-it-yourself-the-snaefellsnes-peninsula/).
-   [Efstidalur](https://www.google.co.uk/maps/place/Efstidalur/@64.2428231,-20.5525875,17z/data%3D!3m1!4b1!4m2!3m1!1s0x48d699ea8baff6ab:0x9c26aa93153abbec?hl%3Den): farm to table restaurant.
-   [Eight must-see spots in Iceland's wild west](http://www.lonelyplanet.com/travel-tips-and-articles/eight-must-see-spots-in-icelands-wild-west).
-   [Fridrikv restaurant](http://www.fridrikv.is/en/).
-   [Gangleri outfitters](http://outfitters.is/en/).
-   Golden circle's waterfalls and geysers.
-   [grillmarkadurinn.is](http://www.grillmarkadurinn.is/) restaurant.
-   [Horse farm hotel](http://www.smaratun.is/).
-   [Hotel Budir](http://www.hotelbudir.is/).
-   [How to have a budget break in iceland](http://www.lonelyplanet.com/iceland/travel-tips-and-articles/how-to-have-a-budget-break-in-iceland).
-   [Iceland itinerary](https://drive.google.com/a/google.com/file/d/0B_7OFb4eNjNWeEFzM29maE9EUkU/view).
-   [Lebowski Bar](http://www.lebowskibar.is/) seriously?
-   Noodle Station.
-   [Pink Iceland tours](http://www.pinkiceland.is/#!tours/cbo8).
-   [Reykjavik Apartment Hotel – Accommodation in City Centre (swanhouse.is)](https://swanhouse.is/).
-   [Reykjavik City Breaks (Book now with British Airways)](https://www.britishairways.com/en-gb/destinations/reykjavik/reykjavik-holidays).
-   [Sandholt](http://sandholt.is/).
-   South coast's waterfalls and caves.

# \[2015-04-30 Thu\] Building clang-format
---
id: building-clang-format
---

Based on instructions from [Building clang-format and friends on OSX Mountain Lion](http://blog.hardcodes.de/articles/63/building-clang-format-and-friends-on-osx-mountain-lion).

``` {.bash org-language="sh"}
#!/bin/bash
  set -o nounset
  set -o errexit

  # Based on instructions from:
  # http://blog.hardcodes.de/articles/63/building-clang-format-and-friends-on-osx-mountain-lion

  readonly LLVM_DIR_PATH='/tmp/llvm'

  update_repo() {
    if [[ ! -d $1 ]]; then
      git clone $2
    else
      cd $1
      git pull
      cd ..
    fi
    cd ..
  }

  update_all_repos() {
    update_repo "llvm" "http://llvm.org/git/llvm.git"
    pushd "${LLVM_DIR_PATH}/llvm/tools"
    update_repo "clang" "http://llvm.org/git/clang.git"
    popd
    cd "../../${LLVM_DIR_PATH}/llvm/tools/clang/tools"
    update_repo "clang-tools-extra" "http://llvm.org/git/clang-tools-extra.git"
    cd "../../.."
  }

  build_clang() {
    mkdir -p clang
    mkdir -p build
    cd clang
    ../llvm/configure --enable-libcpp --enable-cxx11 --enable-debug-symbols=no --enable-optimized --prefix="${LLVM_DIR_PATH}/build"
    make install
  }

  mkdir -p $LLVM_DIR_PATH
  cd ${LLVM_DIR_PATH}
  update_all_repos
  build_clang
```

Bonus: use [clang-format-configurator](http://zed0.co.uk/clang-format-configurator/).

# \[2015-04-30 Thu\] Programmatic iOS Auto Layout
---
id: programmatic-ios-auto-layout
---

Basic iOS auto layout usage. See [Adopting Auto Layout](https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/AutolayoutPG/AdoptingAutoLayout/AdoptingAutoLayout.html) and [Visual Format language](https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/AutolayoutPG/VisualFormatLanguage.html) for reference.

``` objc
- (instancetype)initWithFrame:(CGRect)frame {
  self = [super initWithFrame:frame];
  if (self) {
    // Disable autoresizing mask translation for parent.
    self.translatesAutoresizingMaskIntoConstraints = NO;

    _subview1 = [[UIView alloc] init];
    // Disable autoresizing mask translation for subview.
    _subview1.translatesAutoresizingMaskIntoConstraints = NO;

    _subview1.backgroundColor = [UIColor redColor];
    [self addSubview:_subview1];

    // Creates a dictionary of bindings to be used in visual format.
    NSDictionary *viewBindings = NSDictionaryOfVariableBindings(_subview1);

    // H: horizontal layout
    // |-50- spacing in relation to superview
    // [_subview1(==50)] subview1's width
    [self addConstraints:[NSLayoutConstraint constraintsWithVisualFormat:@"H:|-50-[_subview1(==50)]"
                                                                 options:0
                                                                 metrics:nil
                                                                   views:viewBindings]];
    [self addConstraints:[NSLayoutConstraint constraintsWithVisualFormat:@"V:[_subview1(==50)]"
                                                                 options:0
                                                                 metrics:nil
                                                                   views:viewBindings]];
  }
  return self;
}
```

## Also consider:

-   A UIView Subclass should implement intrinsicContentSize.
-   A UIView Subclass should never add constraints on neither itself (ie. self) nor superview.

## References

-   [Auto layout best practices for minimum pain](https://medium.com/@NSomar/auto-layout-best-practices-for-minimum-pain-c130b2b1a0f6#.uu0xxmqbr).

# \[2015-04-23 Thu\] Learning Japanese bookmarks
---
id: learning-japanese-bookmarks
---



-   [Beginners Japanese - International House London](https://www.ihlondon.com/foreign-languages/learn-japanese/beginners-japanese/).
-   [Hiragana stroke table](https://files.tofugu.com/articles/japanese/2016-04-05-hiragana-chart/sasagami-hiragana-chart-sample.jpg).
-   [I discovered a website that has a list of the most common 6000](https://www.reddit.com/r/LearnJapanese/s/sb0he9nYnQ).
-   [Japanese Beginners Course \| SOAS](https://www.soas.ac.uk/study/find-course/japanese-beginners-course).
-   [Japanese Guide - TheMoeWay](https://learnjapanese.moe/guide/).
-   [Japanese Resources - Google Docs](https://docs.google.com/document/d/1LH82FjsCqCgp6-TFqUcS_EB15V7sx7O1VCjREp6Lexw/edit).
-   [Junji Ito's Cat Diary: Yon & Mu (reading)](https://mangadex.org/title/53c628b3-d1f5-43aa-8df3-080034285cb4/junji-ito-s-cat-diary-yon-mu).
-   [Kansai-ben: Kansai Dialect Self-study Site](https://www.kansaiben.com/).
-   [Learn Hiragana: Tofugu's Ultimate Guide](https://www.tofugu.com/japanese/learn-hiragana/).
-   [Sites to practice Japanese reading? ](https://www.reddit.com/r/LearnJapanese/comments/1gdfrqg/sites_to_practice_japanese_reading).
-   [The Japan Foundation, London - Language Centre - Japanese Language Courses](https://jpf.org.uk/language/courses.php).
-   [The shortest guide to learning Japanese](https://www.reddit.com/r/LearnJapanese/comments/1hhch8s/the_shortest_guide_to_learning_japanese).
-   [Tofugu’s Learn Kana Quiz](https://kana-quiz.tofugu.com/).

# \[2015-04-23 Thu\] Japan travel bookmarks
---
id: japan-travel-bookmarks
---



-   [21 Awesome Things to Do in Yokohama, Japan (2020 Guide)](https://www.nomadasaurus.com/things-to-do-in-yokohama-japan/).
-   [21 free things to do in Tokyo](http://www.lonelyplanet.com/travel-tips-and-articles/77715).
-   [6 Tokyo Travel Tips to Help You Get Around the City \| Tokyo Weekender](http://www.tokyoweekender.com/2017/11/6-tokyo-travel-tips-to-help-you-get-around-the-city/).
-   7 day Japan Rail pass (first class?), possibly only sold outside Japan.
-   [80/20 Japanese by Richard Webb - Publishizer](https://publishizer.com/8020-japanese/).
-   [A Guide to the regional ramen of Japan](http://luckypeach.com/a-guide-to-the-regional-ramen-of-japan/).
-   [A guide to understanding "Small Seasons"](https://smallseasons.guide/).
-   [A Moss Girl’s Guide to Japanese Moss Viewing](http://ignition.co/398).
-   [A no-sushi guide to food in Japan](http://www.lonelyplanet.com/japan/travel-tips-and-articles/77501).
-   [A trip to Japan (Quora answer)](http://www.quora.com/How-does-it-feel-to-travel-alone#__w2_kxAuQyJ_answer_content).
-   [An unsponsored review of the Tawaraya Ryokan in Kyoto, Japan](https://www.annees-de-pelerinage.com/tawaraya-ryokan-review-best-hotel-in-the-world/).
-   [Arashiyama Bamboo Grove](http://www.insidekyoto.com/arashiyama-bamboo-grove).
-   [Autumn Leaves in Hokkaido](http://jnto.org.au/autumn-leaves-in-hokkaido/).
-   [BBC - Travel - Japan’s special take on a packed lunch](http://www.bbc.com/travel/story/20181009-japans-special-take-on-a-packed-lunch).
-   [Bushido: Way of Total Bullshit](https://www.tofugu.com/japan/bushido/).
-   [COOL JAPAN(?)" - What are things about Japan that you think are actually cool?](https://www.reddit.com/r/japanlife/comments/1i2ikgo/cool_japan_what_are_things_about_japan_that_you/).
-   [Drinking Japan](http://www.amazon.co.uk/Drinking-Japan-Alcoholic-Beverages-Establishments/dp/4805310545).
-   [Eki-stamps / 駅スタンプ \| eli's japan blog](https://japan.elifessler.com/eki-stamps/).
-   [Five Best: Japanese Ryokan](http://www.independent.co.uk/travel/asia/five-best-japanese-ryokan-406127.html).
-   Fuji Q Highland (rollercoaster theme park). Check out haunted hospital.
-   [Furano, Hokaido](http://www.city.furano.hokkaido.jp/).
-   [Going to Kyushu, Japan? Why Visiting Yakushima is Worth it - The Ruby Ronin](http://rubyronin.com/going-to-kyushu-japan-why-visiting-yakushima-is-worth-it/).
-   Guest houses: [Kazariya](http://kazari-ya.com/index-e.html), [Rakuza](http://rakuza.gh-project.com/e/home.html), [Musubian](http://ja-jp.facebook.com/musubian.kyoto).
-   [Hiiragiya ryokan](http://www.hiiragiya.co.jp/).
-   [Himeji Castle](https://en.wikipedia.org/wiki/Himeji_Castle).
-   Hiroshima oysters (try the one with cheese).
-   [Historic Villages of Shirakawa-gō and Gokayama - Wikipedia](https://en.wikipedia.org/wiki/Historic_Villages_of_Shirakawa-g%C5%8D_and_Gokayama).
-   Hokkaido summer flowers.
-   [Hypermedia (internal travel website)](http://www.hyperdia.com/en/).
-   [jalan.net (travel booking site)](http://www.jalan.net/en/japan_hotels_ryokan/?cc%3Deng_banner).
-   [Japan guide](http://www.japan-guide.com).
-   [Japan Info](http://jpninfo.com/).
-   [Japan is launching a program that will give away abandoned homes - INSIDER](https://www.thisisinsider.com/japan-program-free-abandoned-homes-2018-11).
-   [Japan Rail Pass](http://www.japan-guide.com/e/e2361.html).
-   [Japan Study Program](http://www.mext.go.jp/english/highered/1303739.htm).
-   [JAPAN TRAVEL DATA 15DAYS, 3.5GB on 4G/LTE- NANO SIM](https://www.amazon.co.uk/JAPAN-TRAVEL-15DAYS-3-5GB-SIM/dp/B01J0Q8132).
-   [Japan's glut of abandoned homes: Hard to sell but bargains when opportunity knocks (The Japan Times)](https://www.japantimes.co.jp/news/2017/12/26/national/japans-glut-abandoned-homes-hard-sell-bargains-opportunity-knocks/).
-   [Japanese beaches](http://www.lonelyplanet.com/travel-tips-and-articles/the-other-japan-okinawas-secret-beaches).
-   [Japanese Foods Encounter Like No Others (food search)](https://gurunavi.com/).
-   [Japanese rule of 7](http://japaneseruleof7.com/).
-   [Japan’s 72 Microseasons](https://www.nippon.com/en/features/h00124/).
-   [Kawachi Fujien 河内藤園 (Kawachi Wisteria Garden)](http://www.japanonwheels.com/kawachi_fujien.html).
-   [Kodo – Preparing the Censor](http://www.japanese-incense.com/kodo-censer.htm).
-   [Kongō Sanmai-in at Kōya-san](https://cromwell-intl.com/travel/japan/koyasan/kongo-sanmai-in.html).
-   [Koya Bound – Eight Days on the Kumano Kodo \| Hacker News](https://news.ycombinator.com/item?id=13136252).
-   [Koyasan (needs booking)](http://eng.shukubo.net/).
-   [Landed Japan Book (local knowledge to buy Japanese real estate)](http://landedbook.com/landed-japan/).
-   [Lots of goodies. Bamboo forest, oh my](http://www.japan-guide.com/e/e3912.html).
-   [Michael’s Cafe American – Black Ship Coffee](https://blackshipcoffee.com/cafe/).
-   [Miyajima: One of the top three scenic spots in Japan](http://visit-miyajima-japan.com/en/).
-   [Monument in front of the Shin-Yatsushiro Station](https://www.flickr.com/photos/26608745@N05/2845439357/).
-   [Nagakushiyama park](https://duckduckgo.com/?q=Nagakushiyama+park%2C+Japan+&t=ffsb&iax=1&ia=images).
-   [Nagoya](https://en.wikipedia.org/wiki/Nagoya).
-   Natadera Temple in winter.
-   [Niseko Ski Resort](http://www.skijapan.com/resorts/niseko/).
-   [Okinawa: secrets for a long and happy life](https://www.lonelyplanet.com/japan/okinawa-and-the-southwest-islands/okinawa-honto/travel-tips-and-articles/the-other-japan-okinawas-secret-beaches).
-   Okonomimura (all okonomiyaki restaurants).
-   Onsen.
-   [Quora: What are some of Japans best kept secrets](http://www.quora.com/What-are-some-of-Japans-best-kept-secrets)?
-   [Saitamaya: The Master of Grilled Meat - YouTube](https://www.youtube.com/watch?v=geZWL_gE-Ak).
-   [Satsuma Rebellion: Satsuma Clan Samurai Against the Imperial Japanese Army](https://www.historynet.com/satsuma-rebellion-satsuma-clan-samurai-against-the-imperial-japanese-army.htm).
-   [Shitamachi #Museum in Ueno and catch a glimpse into old-fashioned living](https://twitter.com/tokyo_gov/status/1146931698837291008).
-   [Siege of Kumamoto Castle (Wikipedia)](https://en.wikipedia.org/wiki/Siege_of_Kumamoto_Castle).
-   [Snapshots of Tokyo’s vivid street life (Hacker News)](https://news.ycombinator.com/item?id=18442097).
-   [Table of Content for japan2013](http://marc.merlins.org/perso/japan2013/links.html).
-   [Table of Content for japan2014](http://marc.merlins.org/perso/japan2014/links.html).
-   [Table of Content for japan2015](http://marc.merlins.org/perso/japan2015/links.html).
-   [TAKAZAWA Candle (or look for ikaragata shape candle)](http://www.4wd-networks.com/makers/detail/takazawa-candle.html).
-   [The 2020 Hachinohe Enburi Festival Schedule (Sakura festival)](https://visithachinohe.com/en/stories/the-2020-hachinohe-enburi-festival-schedule/).
-   [The village of living water](http://jpninfo.com/13012).
-   [Things to look out for in Japan (Quora)](https://www.quora.com/What-are-the-most-inconvenient-things-foreign-tourists-who-travel-to-Japan-experience).
-   [Tohoku Travel Guide](https://www.japan-guide.com/list/e1102.html).
-   [Try out sukiyaki](https://en.wikipedia.org/wiki/Sukiyaki).
-   [Uncharted Tokyo](https://docs.google.com/document/d/1wjqJKYEKbHSUTsj8Lxj8OCn0gSOXOpf_SroyBEjLbKY/edit).
-   [Vitra \| The Hill of the Buddha](https://www.vitra.com/en-gb/magazine/details/the-hill-of-the-buddha).
-   [Zao Fox Village](http://www.mymodernmet.com/profiles/blogs/zao-fox-village-miyagi-japan).
-   [国指定重要文化財「野村別邸　碧雲荘」](http://hekiunsou.jp/).
-   Neighbourhoods
    -   Mishuku
    -   Sancha neighborhood. Lots of places to eat.
    -   Sangenjaya
    -   Soba Noodle Kochi
    -   Seiki (Japanese dishes)
    -   Sent from my iPhone
    -   Sakae street
    -   Tokoshima (wine and yakitori)

# \[2015-10-21 Wed\] Kyoto travel bookmarks
---
id: kyoto-travel-bookmarks
---



-   [Eating My Way Through Nishiki Market, Kyoto \| Ever In Transit](http://www.everintransit.com/nishiki-market-tour-kyoto/).
-   [Fushimi Inari Temple](http://en.wikipedia.org/wiki/Fushimi_Inari-taisha): 4KM mountain trail lined with bright orange shinto gates.
-   Golden Pavillion (macha and biscuits at tea house).
-   Hakone (day trip for hot baths), see Yuryo spa. Also the pirate boat.
-   [Kibune](http://www.aaronwilliamson.com/old_web/travel/japan/kibune/kibune.htm).
-   [Kinkakuji Temple](http://en.wikipedia.org/wiki/Kinkaku-ji).
-   [Kiyomizu Temple](http://en.wikipedia.org/wiki/Kiyomizu-dera).
-   Kuramadera Temple & Kibune Shrine: More peaceful shrine.
-   [Kyoto itineraries](http://www.insidekyoto.com/kyoto-itineraries).
-   [Kyoto travel tips (doc)](https://docs.google.com/document/d/1bQb4GeiTElx0Gsv84wTDQlOVrbkqwTChSnMPMzrCcr4/edit?authkey%3DCJPtzocJ&hl%3Den_US&authkey%3DCJPtzocJ).
-   [Kyoto walking maps](http://www.kyotoguide.com/ver2/walking/walking-top.html).
-   Kyoto's train station itself.
-   [Nijo-Jo’](http://en.wikipedia.org/wiki/Nij%C5%8D_Castle).
-   Nishiki Market: Awesome market. Some say better than Tsukiji.
-   Origami master and school <http://www.orizurusalon-yume.com> info@orizurusalon-yume.com
-   [orizurusalon yume (origami)](http://www.orizurusalon-yume.com/).
-   Ryokan ("kaiseki" meals).
-   Ryōan-ji (竜安寺).
-   [Sanjusangendo](http://en.wikipedia.org/wiki/Sanj%C5%ABsangen-d%C5%8D).
-   [Things to do in Kyoto, Japan](http://globalhelpswap.com/things-to-do-in-kyoto-japan/).
-   [Walking courses (Google maps)](http://maps.google.com/maps/ms?msid%3D202789377275033201812.00049d620c1fcd8fb451e&msa%3D0&ll%3D35.019734,135.756168&spn%3D0.093628,0.181789).
-   [WaRaiDo Nighttime tour](http://www.waraido.com/walking/gion.html).

# \[2015-04-19 Sun\] Tokyo travel bookmarks
---
id: tokyo-travel-bookmarks
---



-   [14 Things to Know Before You Go to Tokyo](https://roadsandkingdoms.com/travel-guide/tokyo/know-before-you-go-to-tokyo/).
-   [5 alternative things to do in Tokyo (by globalhelpswap)](http://globalhelpswap.com/5-alternative-things-to-do-in-tokyo/).
-   [A History of Tokyo in 8 Dishes](https://roadsandkingdoms.com/travel-guide/tokyo/a-history-of-tokyo-in-8-dishes/).
-   Akasaka area (N/E of Roppongi).
-   Akasaka Sagamiya (also Mamekan, established in 1895).
-   Akihabara: Electronics district, arcades and comic stores.
-   Asakusa (tourist spot). Kaminarimon, Nakamise (oldest shopping street in Japan). Sensoji Temple.
-   [Asakusa hotel](https://www.hokke.co.jp/english/asakusa/).
-   Asakusa Shrine: Shinto shrine and market.
-   [Bar Epilogue](http://bar-navi.suntory.co.jp/shop/0334413588/index.html).
-   [Bar Odin](http://authenticbar.com/odin/yebisu.html).
-   [Benten, Taito - 3-21-8 Asakusa, Ueno, Asakusa (Buckwheat noodles shop)](https://www.tripadvisor.co.uk/Restaurant_Review-g1066461-d1688630-Reviews-Benten-Taito_Tokyo_Tokyo_Prefecture_Kanto.html).
-   Bentomi (Sushi).
-   [CHEESE STAND （チーズスタンド）](https://cheese-stand.com/).
-   Coffee Tengoku, Asakusa (best hotcakes/pancakes). Noting is premade. After 12 years, best hotcakes.
-   Cup noodle museum.
-   [Daiwasushi (food)](http://tabelog.com/en/tokyo/A1313/A131301/13002389/). An account [here](http://mjkobb.com/Prattling%20on/6570A66F-8F2F-49FD-912C-4A5D0C3862C8.html).
-   Dorayaki (in Ukenbukuru). Seijuken is long established in Ningyocho.
-   [Doteno-Iseya 土手の伊勢屋: 127-year old Tempura](http://dairycream.blogspot.co.uk/2016/07/doteno-iseya-127-year-old-tempura-don.html).
-   Eateries around Takadanobaba eki
-   Ebisu (area for izakaya experience, drink/chat with bartender). Look for Ebisu Yokocho.
-   Fish market (6am sushi).
-   [Five of the worst areas to live in and around Tokyo \| SoraNews24](https://en.rocketnews24.com/2017/10/11/five-of-the-worst-areas-to-live-in-and-around-tokyo/?utm_content=buffer38deb&utm_medium=social&utm_source=twitter.com&utm_campaign=buffer).
-   [Fu-unji & 風雲児 \| Tokyo Eats](http://www.tokyoeats.jp/fuunji/).
-   [Ghibli museum](http://www.ghibli-museum.jp/en/welcome) (book in advance or try [lawson](http://www.lawson.co.jp/ghibli/museum/ticket/english.html)).
-   Ginza Kimuraya (bakery). Try anpan (invented here).
-   Ginza.
-   [Ginzakyuubee (food)](http://tabelog.com/en/tokyo/A1301/A130103/13002611/).
-   [Golden Gai (lots tiny bars)](http://unmissabletokyo.com/golden-gai).
-   [How to Spend a Magical Christmas in Tokyo (2019 update)](https://blog.govoyagin.com/tokyo-christmas).
-   <https://www.timeout.com/tokyo/restaurants/tokyo-coolest-kakigori>
-   Ichiran Ramen.
-   Imperial Palace: Book to go inside. Beautiful park, great for pictures.
-   [In which ward are you living?](https://www.reddit.com/r/Tokyo/comments/1dnwpwr/in_which_ward_are_you_living).
-   Irie known (sweet shop) for Mamekan. In Monzen-Nakacho.
-   Isetan (upscale food market).
-   [Isozushi (food)](http://tabelog.com/en/tokyo/A1313/A131301/13091991/).
-   [Jimbocho Book Town (largest second-hand book town in the world, classic-style cafes, old school charm)](https://trulytokyo.com/jimbocho-book-town/).
-   Kaiden-don, near tsukiji (Sushi).
-   Kajitsuen Libre. Peach Parfait. Fresh fruit.
-   Kinozen restaurant for Matcha Bavarian cream (matcha bavaroa). Kagurazaka. Check out the backstreets.
-   [Kodai's Fukui restaurant (old tea house)](http://www.waentei-kikko.com/).
-   Kushikatsu restaurant in Golden Gai, a karaoke booth in Ebisu, or drifting through the back alley izakayas of Akabane.
-   Menya Musashi and Fuunji are both generally very well regarded and about a 5-7 minute walk from the SW part of Shinjuku station.
-   [Mikimoto building in Ginza](http://openbuildings.com/buildings/mikimoto-ginza-2-profile-2818).
-   [Mori Art museum](http://www.mori.art.museum/eng/index.html).
-   [Musashiya ramen](https://www.google.co.uk/webhp?sourceid=chrome-instant&ion=1&espv=2&ie=UTF-8#q=musashiya+tripadvisor+tokyo).
-   [Nakiryu: Tantalizing Tantanmen Noodles with a Michelin Star](https://tokyocheapo.com/food-and-drink/michelin-star-ramen-nakiryu/).
-   [Nezu museum](https://en.wikipedia.org/wiki/Nezu_Museum).
-   [Odaiba](https://www.gotokyo.org/en/destinations/southern-tokyo/odaiba/index.html).
-   [Okonomiyaki in Tokyo](http://tokyoplaying.blogspot.co.uk/2012/01/not-japanese-pizza-okonomiyaki-in.html).
-   Omoide yokocho: Alleyway next to Shinjuku station. Lots of yakitori restaurants.
-   [Omotesando Koffee](http://ooo-koffee.com/) (coffee and baked custard slice).
-   Omotesando side streets.
-   Pan No Tora Bakery (Kyoto?).
-   [Pignon \| French Restaurant](http://pignontokyo.jp/).
-   Pound cake from Patisserie Gondola in Kudanue.
-   Roppongi.
-   Savarin (brioge-based, of french origin) in Yokohama. Cafe Recherche.
-   Seafood street south of Ueno eki
-   [Secret snapshots of Tokyo vivid street life](https://www.huckmag.com/art-and-culture/photography-2/tokyo-street-photographer-mikiko-hara/).
-   [Shibamata: Snacking and Sightseeing in Tokyo’s Old Edo Neighborhood](https://livejapan.com/en/in-shibamata_kita-senju_kameari/article-a0001571/).
-   Shibuya Crossing: Largest pedestrian crossing in the world.
-   Shimokitazawa (Shimokita for short). Bohemian, vintage shopping.
-   Shimokitazawa (thirft stores, music bands, pubs, and cafes).
-   [Short trips from Tokyo](https://www.reddit.com/r/Tokyo/comments/1dikh1q/short_trips_from_tokyo/).
-   [Short trips from Tokyo](https://www.reddit.com/r/Tokyo/comments/1dikh1q/short_trips_from_tokyo).
-   [Sukiyabashi Jiro](http://tabelog.com/en/tokyo/A1301/A130101/13002260/).
-   Sushi dai (Sushi, long queue, maybe turisty).
-   [Sushi Kanesaka](http://tabelog.com/en/tokyo/A1301/A130103/13005003/).
-   Sushi places around Tsukiji market in the morning (much better than the market visit itself, these days)
-   [Sushi Saito](http://tabelog.com/en/tokyo/A1308/A130802/13015251/).
-   [Sushidai (food)](http://tabelog.com/en/tokyo/A1313/A131301/13002388/).
-   [Sushitsu (food)](http://tabelog.com/en/tokyo/A1307/A130701/13061640/).
-   [Sutekihausukatsura](http://tabelog.com/en/tokyo/A1316/A131603/13013967/).
-   [Takaosan (Mount Takao)](http://www.japan-guide.com/e/e3029.html).
-   [Tempura Tsunahachi en Tokio: 4 opiniones y 7 fotos](https://www.minube.com/rincon/restaurante-tsunahachi-a186891).
-   [Tenkazushi (food)](http://tabelog.com/en/tokyo/A1303/A130301/13001783/).
-   The whole of Kabukicho (area in-between Shinjuku station and Shin-Okubo)
-   [Things to Do in Tokyo Japan - Sunday Spotlight](http://www.ytravelblog.com/things-to-do-in-tokyo-japan/).
-   [Tokyo Gov on Twitter: Higashikurume Station](https://twitter.com/tokyo_gov/status/1201652265649606656).
-   [Tokyo in winter: what to see, do and eat (Lonely Planet)](https://www.lonelyplanet.com/japan/travel-tips-and-articles/tokyo-in-winter-what-to-see-do-and-eat/40625c8c-8a11-5710-a052-1479d276b0f5).
-   Tokyo Municipal Government building: Only for observation deck with view to Fuji (if clear day).
-   [Tokyo on a budget: tips for making your yen go further (Lonely Planet)](https://www.lonelyplanet.com/japan/tokyo/travel-tips-and-articles/tokyo-on-a-budget-tips-for-making-your-yen-go-further/40625c8c-8a11-5710-a052-1479d2775214?utm_campaign=article&utm_medium=social&utm_source=twitter&utm_content=Tokyo%20on%20a%20budget:%20tips%20for%20making%20your%20yen%20go%20further).
-   [Tokyo play blog](http://tokyoplaying.blogspot.co.uk/).
-   [Tokyo Salaries: all you need to know](http://japaneseruleof7.com/tokyo-salaries-all-you-need-to-know).
-   Tokyo station: Friendly JR office (english spoken). They help book all trips/tickets/reservations.
-   Tokyo Station: Massive station. Lots of restaurants and shops (check out ramen street).
-   [Tokyo Travel Tips: 5 Things You Need In Japan \| Coffee and Passport](http://coffeeandpassport.com/tokyo-travel-tips/).
-   [Tokyo Twitter: any Japanese breakfast restaurants](https://twitter.com/yanarchy/status/1162570360769798144).
-   [Tokyo, Japan - Condé Nast Traveller \| CN Traveller](https://www.cntraveller.com/article/travel-guide-tokyo).
-   [TokyoCheapo](http://tokyocheapo.com/).
-   [Tokyo’s oldest train line – in pictures \| Art and design \| The Guardian](https://www.theguardian.com/artanddesign/gallery/2024/jul/08/tokyos-oldest-train-line-jr-yamanote-in-pictures).
-   Tokyu Hands and Loft (shops in Shibuya).
-   Toritake (yakitori at Shibuya).
-   Try Mos rice burger (fast food).
-   Try out Pancan (bread in can).
-   [Tsukiji Fish Market calendar](http://www.tsukiji-market.or.jp/etc/calendar/2016.html).
-   Tsukiji Fish Market: Sushi bars and food vendors (get there early, visitor numbers restricted).
-   Umemura in Asakusa (also Mamekan).
-   [Unusual things to do in Tokyo? ](https://www.reddit.com/r/JapanTravel/comments/79c82l/unusual_things_to_do_in_tokyo/).
-   [Walk around Yoyogi-Uehara Station, Shibuya, Binaural City Sounds(ASMR) in Tok…](https://www.alojapan.com/253056/walk-around-yoyogi-uehara-station-shibuya-binaural-city-soundsasmr-in-tokyo-japan-osmo-pocket/).
-   [What's something you know about in Tokyo that you think others should know about?](https://www.reddit.com/r/Tokyo/s/1mBB6ix3aW).
-   Yurakucho Yakitori Alley
-   Zauo.com "Let's fixhing enjoy". Catch your own fish to eat.
-   [婁熊東京 (raw and grilled pork)](http://tabelog.com/en/tokyo/A1303/A130301/13058009/).
-   [酒友](http://r.tabelog.com/tokyo/A1307/A130701/13041724/) (Sake & good Shabushabu), Roppongi.

# \[2015-04-19 Sun\] UK travel bookmarks
---
id: uk-travel-bookmarks
---



-   [25 stunning british places you can reach from London](http://www.buzzfeed.com/chelseypippin/25-wanderlust-worthy-day-trips-from-london#.xbkbNaApW).
-   [A graveyard of red telephone boxes located in the small village of Carlton Miniott](https://twitter.com/ddoniolvalcroze/status/1278326573070876672).
-   [Dunmore Pinapple](https://en.wikipedia.org/wiki/Dunmore_Pineapple).
-   [Hitchin Lavender](http://www.hitchinlavender.co.uk/).
-   [In search of Scotland’s best beach](http://www.theguardian.com/travel/2015/may/10/scotland-beach-swimming-wild-camping).
-   [Isle of Man](http://www.seemytravels.com/2015/01/23/the-isle-of-man-mist/).
-   [Sandwood Bay](https://en.wikipedia.org/wiki/Sandwood_Bay).
-   [Sark island](https://duckduckgo.com/?q=sark+island&t=ffsb&iax=1&ia=images).
-   [Scotland’s new North Coast 500 route](http://www.theguardian.com/travel/2015/aug/23/scotland-north-coast-500-road-trip?CMP%3Dshare_btn_tw).
-   [The 8 most dramatic hikes in England](https://www.lonelyplanet.com/amp/articles/best-hikes-in-england).
-   [The New Forest](http://www.thenewforest.co.uk/).
-   [Where to Find Street Art in Liverpool](http://www.seemytravels.com/2015/02/15/where-to-find-street-art-in-liverpool/).
-   [X-Pilot (Redsand towers)](http://www.x-pilot.co.uk/).

# \[2015-04-19 Sun\] Development quotes
---
id: development-quotes
---

-   [If your backlog is exploding the problem is not that your developers are slow, but that your business model is not based on reality](https://twitter.com/giorgiosironi/status/587507955521708032).
-   [If you lose out on object allocation, you still win by avoiding expensive re-renders and re-calculations](http://redux.js.org/docs/introduction/PriorArt.html).
-   [Duplication is far cheaper than the wrong abstraction (prefer duplication up to a point)](https://www.sandimetz.com/blog/2016/1/20/the-wrong-abstraction).
-   [Choosing an appropriate design to duplication avoid might benefit from more examples to see patterns in. Attempting premature refactoring risks selecting a wrong abstraction](https://en.wikipedia.org/wiki/Rule_of_three_(computer_programming)).
-   [Patterns failed, why we should case](https://www.deconstructconf.com/2017/brian-marick-patterns-failed-why-should-we-care).

# \[2015-04-19 Sun\] Development philosophy
---
id: development-philosophy
---

-   Boyscout rule: Leave campground cleaner than found.
-   [What can clang-format teach us about the human condition?](https://nibblestew.blogspot.com/2019/12/what-can-clang-format-teach-us-about.html?m=1).

# \[2015-04-19 Sun\] Spain travel bookmarks
---
id: spain-travel-bookmarks
---



-   [7 CAFETERIAS BONITAS, ORIGINALES y CON ENCANTO en MADRID](https://www.larecomendadora.com/2019/11/cafeterias-bonitas-originales-encanto-madrid.html).
-   [BOMBONERIA SANTA, Madrid - Barrio de Salamanca](https://www.tripadvisor.co.uk/Restaurant_Review-g187514-d6673431-Reviews-Bomboneria_Santa-Madrid.html).
-   [Cine Doré Filmoteca Española \| Cinemas in Lavapiés, Madrid](https://www.timeout.com/madrid/cinemas/cine-dore-filmoteca-espanyola).
-   [Espacio Fundación Telefónica \| Art in Malasaña, Madrid](https://www.timeout.com/madrid/art/espacio-fundacion-telefonica).
-   [Fundación Masaveu \| Art in Madrid, Madrid](https://www.timeout.com/madrid/art/fundacion-masaveu).
-   [JUANCHI'S BURGERS](https://www.larecomendadora.com/2019/10/juanchis-burgers-hamburguesas-madrid.html).
-   [La Duquesita. Pastelería - Bombonería - Confitería repostería desde 1914](https://laduquesita.es/).
-   [La Palma, most north-westerly of the Canary Islands](https://en.wikipedia.org/wiki/La_Palma).
-   [La Perejila - Madrid - Bar de tapas y restaurante, Restaurante español](https://www.facebook.com/pages/La-Perejila/116839091715751).
-   [Lanzarote's green lagoon](http://www.tripadvisor.com/ShowUserReviews-g1802172-d1887157-r141602833-El_Lago_Verde-El_Golfo_Lanzarote_Canary_Islands.html).
-   [Madri: onde comer \| Restaurantes e bares de tapas recomendados](https://www.viajenaviagem.com/destino/madri/onde-comer-madri/).
-   [Madricioso](http://www.madricioso.com).
-   [Matadero Madrid \| Art in Legazpi, Madrid](https://www.timeout.com/madrid/art/matadero-madrid).
-   [Matadero Madrid. Centro de creación contemporánea](http://www.mataderomadrid.org).
-   [Mercado de San Fernando \| Shopping in Lavapiés, Madrid](https://www.timeout.com/madrid/shopping/mercado-de-san-fernando).
-   [Mercado de Vallehermoso \| Things to do in Chamberí, Madrid](https://www.timeout.com/madrid/things-to-do/mercado-de-vallehermoso).
-   [Rock carved hermitage of Saints Justus and Pastor, Olleros de Pisuerga](https://commons.wikimedia.org/wiki/Category:Rock_carved_hermitage_of_Saints_Justus_and_Pastor,_Olleros_de_Pisuerga).
-   [triciclo - grupotriciclo](https://eltriciclo.es/triciclo/).

# \[2015-04-19 Sun\] Meet up bookmarks
---
id: meet-up-bookmarks
---

-   [Couchsurfing.org](https://www.couchsurfing.com).
-   [Meetup](http://www.meetup.com/).
-   [Tea with strangers](http://teawithstrangers.com).

# \[2015-04-17 Fri\] Plantuml example
---
id: plantuml-example
---

Played with [Plantuml](http://plantuml.sourceforge.net/PlantUML_Language_Reference_Guide.pdf). Convenient for generating UML diagrams from text. Here's the [Language Reference Guide](http://plantuml.sourceforge.net/PlantUML_Language_Reference_Guide.pdf). Here's an example:

``` {.plantuml exports="both" file="images/plantuml-example/plantuml-singer.png"}
@startuml
  abstract class Singer {
    abstract void sing()
    void Dance()
  }

  skinparam monochrome true
  Singer <|-- PopSinger
  Singer <|-- SalsaSinger

  class PopSinger {
    void sing()
  }

  class SalsaSinger {
    void sing()
  }

@enduml
```

![](https://xenodium.github.io/images/plantuml-example/plantuml-singer.png)

Install plantuml on Mac OS X:

``` {.bash org-language="sh"}
brew install plantum
```

Generating diagram:

``` {.bash org-language="sh"}
$GRAPHVIZ_DOT=~/homebrew/bin/dot java -jar path/to/plantuml.8018.jar diagram.plantuml
```

ps. Installation and verification [gist](https://gist.github.com/NLKNguyen/c39596c205ba1f1866c8).

ps2. More handy UML examples in this [fork](https://github.com/xenodium/uml).

# \[2015-04-14 Tue\] Helm-describe-helm-attribute
---
id: helm-describe-helm-attribute
---

[Writing A Spotify Client in 16 Minutes](https://www.youtube.com/watch?v%3DXjKtkEMUYGc) is fantastic for picking up helm and Emacs lisp tips. Of interest helm-describe-helm-attribute, second to the awesomeness of helm-spotify integration.

``` html
<iframe width='420'
        height='315'
        src='https://www.youtube.com/embed/XjKtkEMUYGc'
        frameborder='0'
        allowfullscreen>
</iframe>
```

# \[2015-04-12 Sun\] Youtube videos in your org html export
---
id: youtube-videos-in-your-org-html-export
---

[Sacha Chua](https://twitter.com/sachachua) and [John Wiegley](https://twitter.com/jwiegley) posted a wonderful video on [Emacs lisp development tips](http://sachachua.com/blog/2015/04/2015-04-08-emacs-lisp-development-tips-with-john-wiegley). Embedding the following raw HTML using #+BEGIN_HTML/#+END_HTML:

``` html
<iframe width="420"
        height="315"
        src="https://www.youtube.com/embed/QRBcm6jFJ3Q"
        frameborder="0"
        allowfullscreen>
</iframe>
```

results in an embedded video when exporting your org file:

``` html
<iframe width="420"
        height="315"
        src="https://www.youtube.com/embed/QRBcm6jFJ3Q"
        frameborder="0"
        allowfullscreen>
</iframe>
```

# \[2015-04-12 Sun\] .net bookmarks
---
id: dot-net-bookmarks
---



-   [Open Source .Net libraries that make your life easier](http://thomasvm.github.io/blog/2015/03/17/open-source-net-libraries-that-make-your-life-easier/).

# \[2015-04-10 Fri\] UK property bookmarks
---
id: uk-property-bookmarks
---

-   [Commute from](http://commutefrom.com/) (find property based on potential commute).
-   [Mapumental Property](http://property.mapumental.com) (find property by travel time).

# \[2015-04-09 Thu\] Git commit message style
---
id: git-commit-message-style
---

Adopted Tim Pope's Git commit message [style](http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html). Also enabled Emacs's git-commit-training-wheels-mode:

``` {.commonlisp org-language="emacs-lisp"}
(use-package git-commit-training-wheels-mode :ensure t
  :commands (git-commit-training-wheels-mode))

(use-package git-commit-mode :ensure t
  :config
  (add-hook 'git-commit-mode-hook 'git-commit-training-wheels-mode)
  :commands (git-commit-mode))
```

Another great [post](http://chris.beams.io/posts/git-commit/) by Chris Beams.

# \[2015-04-06 Mon\] fci-mode and org-html-export-to-html bug
---
id: fci-mode-and-org-html-export-to-html-bug
---

Having enabled fci-mode in most programing modes, org-html-export-to-html now exports an additional unicode character in source blocks. This [thread](http://lists.gnu.org/archive/html/emacs-orgmode/2014-09/msg00777.html) has a workaround:

``` {.commonlisp org-language="emacs-lisp"}
(defun org-html-fontify-code (code lang)
  ;; ...
  (funcall lang-mode)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  (when (require 'fill-column-indicator nil 'noerror)
    (fci-mode -1))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  (insert code)
  ;; ...
```

# \[2015-04-03 Fri\] Try cocoapods out
---
id: try-cocoapods-out
---

[Cocapods try](https://github.com/CocoaPods/cocoapods-try):

``` {.bash org-language="sh"}
$ pod try POD_NAME
```

# \[2015-04-03 Fri\] Cornwall travel bookmarks
---
id: cornwall-travel-bookmarks
---

-   [Food along the way](http://barefootcornwall.com/on-the-road/).

# \[2015-04-03 Fri\] Austria travel bookmarks
---
id: austria-travel-bookmarks
---



-   [Coffee houses in Vienna](https://www.lonelyplanet.com/austria/vienna/travel-tips-and-articles/coffee-house-culture-in-vienna-where-to-get-your-caffeine-hit).
-   [Melk Abbey library](https://duckduckgo.com/?q%3Dmelk%2Baustria%2Blibrary&iax%3D1&ia%3Dimages).

# \[2015-04-02 Thu\] Cinnamon desktop run dialog
---
id: cinnamon-desktop-run-dialog
---

Note to self. Open with Alt-f2.

# \[2015-03-29 Sun\] Books for 2015
---
id: books-for-2015
---

-   [Catch 22](http://www.amazon.co.uk/Catch-22-Vintage-Classics-Joseph-Heller/dp/0099470462).
-   [The Circle](http://www.amazon.co.uk/Circle-Dave-Eggers/dp/0804172293).
-   [Born to Run](http://www.amazon.co.uk/Born-Run-Hidden-Ultra-Runners-Greatest/dp/1861978774).
-   [Thinking, Fast and Slow](http://www.amazon.co.uk/Thinking-Fast-Slow-Daniel-Kahneman/dp/0141033576).

# \[2015-03-29 Sun\] Ayahuasca bookmarks
---
id: ayahuasca-bookmarks
---

-   [Ayaadvisor](http://ayaadvisor.org/listings/onanya-joni-shipibo-europe/).
-   [Ayahuasca fatalities](https://www.erowid.org/chemicals/ayahuasca/ayahuasca_death.shtml).
-   [Ayahuasca on erowid](https://erowid.org/chemicals/ayahuasca/).
-   [Jennifer Logan's death in Peru](http://www.cbc.ca/m/news/canada/jennifer-logan-s-death-in-peru-puts-focus-on-purging-ceremonies-1.2948955).
-   [The hacker who drank Ayahuasca](https://medium.com/@Grayfox/the-hacker-who-drank-ayahuasca-517148aa1ed4).

# \[2015-03-28 Sat\] Emacs init.el bookmarks
---
id: emacs-init.el-bookmarks
---



-   [Adam Schwartz's init](https://github.com/daschwa/emacs.d).
-   [Andrew Gwozdziewycz's init.el](https://github.com/apg/emacs-config/tree/master/lisp/activator.d).
-   [Andrew Kensler's init.el](http://www.cs.utah.edu/~aek/code/init.el.html).
-   [Andrew's .emacs](https://github.com/Droogans/.emacs.d/blob/mac/init.el).
-   [Anler Hernandez's literate config](https://github.com/ikame/.emacs.d-literate).
-   [Chen Bin's init.el](https://github.com/redguardtoo/emacs.d/).
-   [Clinton Ryan's init (JS config)](https://github.com/eastwood/config/blob/master/emacs.d/org-init.org).
-   [daviderestivo/emacs-config (clean/macOS)](https://github.com/daviderestivo/emacs-config/blob/master/README.md).
-   [dotfiles/config.org at master · iocanel/dotfiles · GitHub (mu4e config)](https://github.com/iocanel/dotfiles/blob/master/.config/emacs/config.org).
-   [EmacsWiki: Starter Kits](https://www.emacswiki.org/emacs/StarterKits).
-   [Eric James Michael Ritz](https://github.com/ejmr/DotEmacs/blob/master/.emacs).
-   [GitHub - alhassy/emacs.d: My Emacs configuration, literately](https://github.com/alhassy/emacs.d).
-   [GitHub - FIXME rememberYou/.emacs.d: Personal GNU Emacs configuration](https://github.com/rememberYou/.emacs.d/).
-   [GitHub - Fuco1/.emacs.d: My emacs config](https://github.com/Fuco1/.emacs.d).
-   [GitHub - MatthewZMD/.emacs.d: M-EMACS, a full-feature GNU Emacs configuration](https://github.com/MatthewZMD/.emacs.d).
-   [GitHub - zamansky/emacs.dz: Awesome emacs config files](https://github.com/zamansky/emacs.dz).
-   [GitHub - zoliky/dotemacs: My GNU Emacs configuration (super clean)](https://github.com/zoliky/dotemacs).
-   [Grant Rettke's literate config](https://github.com/grettke/home/blob/master/ALEC.txt).
-   [Hardcore Freestyle Emacs](http://doc.rix.si/org/fsem.html).
-   [Huseyin Yilmaz](https://github.com/huseyinyilmaz/emacs-config/blob/master/lisp/user-init.el).
-   [ianpan870102/.personal-emacs.d](https://github.com/ianpan870102/.personal-emacs.d/blob/master/init.el).
-   [Ivan Malison's Emacs init](http://ivanmalison.github.io/dotfiles/).
-   [Ivan Malison's init.el](http://ivanmalison.github.io/dotfiles/#colorizecompliationbuffers).
-   [John's Emacs Config (mu4e and ledger usage)](http://www.john2x.com/emacs.html).
-   [Justin Abrahms: My Emacs Configuration](https://justin.abrah.ms/dotfiles/emacs.html).
-   [Ladicle's Emacs Configuration](https://ladicle.com/post/config/).
-   [M-EMACS's lsp config](https://github.com/MatthewZMD/.emacs.d#lsp).
-   [Mark Sparks's init.el](https://github.com/msparks/dotfiles/blob/master/.emacs).
-   [Marten Lienen's init.el](https://github.com/CQQL/dotfiles/blob/master/src/.emacs.d/init.el).
-   [Mathew Lee Hinman's Emacs settings file](http://writequit.org/org/settings.html).
-   [Mathieu Marques's wonderful literary config (uses tern for Javascript)](https://github.com/angrybacon/dotemacs/blob/master/dotemacs.org).
-   [Rinat Abdullin's literary config](https://github.com/abdullin/emacs.d/blob/master/emacs.org).
-   [Temacco's init](https://github.com/To1ne/temacco).
-   [Temacco's Plutonium empowered emacs](https://gitlab.com/to1ne/temacco).
-   [Wasamama's extensive init TODO ](https://github.com/wasamasa/dotemacs/blob/master/TODO.org).
-   [zzamboni.org \| My Emacs Configuration, With Commentary](http://zzamboni.org/post/my-emacs-configuration-with-commentary/).
-   [Étienne Deparis's Emacs Main Initialization File](https://etienne.depar.is/emacs.d/init.html).

# \[2015-03-28 Sat\] CSS vertical align using flex
---
id: css-vertical-align-using-flex
---

Codepen [snippet](http://codepen.io/oisinlavery/pen/Jmjtz):

``` css
div{
  height: 200px;
  background: #ccc;
  display: flex;
  justify-content: center;
  align-items: center;
}

p{
  margin: auto
}
```

# \[2015-03-26 Thu\] London diving schools
---
id: london-diving-schools
---

-   [London Diving School](http://londonschoolofdiving.co.uk). Not heard good comments.
-   [Dive Wimbledon](http://www.divewimbledon.com). Heard ok comments.
-   [Clidive](http://www.clidive.org/) is a BSAC club (amateur organisation). Not commercial but may take longer.
-   [Sublime Diving](http://www.sublimediving.co.uk/). Heard good comments.
-   [Oyster Diving](http://www.oysterdiving.com/). Pool in cetral London. Good comments.
-   [SS Thistlegorm](http://en.wikipedia.org/wiki/SS_Thistlegorm) mentioned as a memorable site.
-   Many suggest to get certified elsewhere. Perhaps Egypt via [Poseidon Divers](http://www.poseidondivers.com/).

# \[2015-03-26 Thu\] Helm buffer URLs
---
id: helm-buffer-urls
---

Venturing into Emacs lisp and [Helm](https://github.com/emacs-helm/helm). Here's a go at listing all URLs in current buffer.

``` {.commonlisp org-language="emacs-lisp"}
(require 'goto-addr)

(defun ar/helm-buffer-url-candidates ()
  "Generate helm candidates for all URLs in buffer."
  (save-excursion
    (goto-char (point-min))
    (let ((helm-candidates '())
          (url))
      (while (re-search-forward goto-address-url-regexp
                                nil t)
        (setq url
              (buffer-substring-no-properties (match-beginning 0)
                                              (match-end 0)))
        (add-to-list 'helm-candidates
                     (cons url
                           url)))
      helm-candidates)))

(defun ar/helm-buffer-urls ()
  "Narrow down and open a URL in buffer."
  (interactive)
  (helm :sources `(((name . "Buffer URLs")
                    (candidates . ,(ar/helm-buffer-url-candidates))
                    (action . (lambda (url)
                                (browse-url url)))))))
```

# \[2015-03-23 Mon\] Doh! undo last git commit
---
id: doh-undo-last-git-commit
---

``` {.bash org-language="sh"}
$ git reset --soft HEAD~1
```

# \[2015-03-22 Sun\] Resetting variables using defvar
---
id: resetting-variables-using-defvar
---

Want to re-evaluate defvars and modify variables? eval-defun (bound to C-M-x) can help. From the manual:

> If the current defun is actually a call to \`defvar', then reset the variable using its initial value expression even if the variable already has some other value. (Normally \`defvar' does not change the variable's value if it already has a value.) Treat \`defcustom' similarly.

# \[2015-03-22 Sun\] Broken Xcode plugins?
---
id: broken-xcode-plugins
---

Some Xcode plugins stopped loading after updating Xcode. Ensure the latest DVTPlugInCompatibilityUUIDs is added to the plugin's Info.plist. Get from:

``` {.bash org-language="sh"}
$ defaults read \
    /Applications/Xcode.app/Contents/Info DVTPlugInCompatibilityUUID
```

Additional suggestions as [Stack Overflow](http://stackoverflow.com/questions/30361228/why-are-my-xcode-plugins-such-as-clang-format-installed-with-alcatraz-no-longe).

# \[2015-03-22 Sun\] Born to Run references
---
id: born-to-run-references
---



References from reading Christopher McDougall's [Born to Run](http://www.chrismcdougall.com/born-to-run):

-   [Chi running](http://www.chirunning.com).
-   Chia and pinole. Random recipes [here](http://www.nomeatathlete.com/tarahumara-pinole-chia-recipes/).
-   [Heritage Seeds](http://heritageseeds.org/).
-   Ken Mierke’s [Evolution running](http://www.evolutionrunning.com).
-   [Pose method](https://posemethod.com/running).
-   Quotes, references, videos, etc. at [ultimate paleo guide](http://ultimatepaleoguide.com/born-to-run/).

Recipe by [Megan Mignot](http://www.bellaonline.com/articles/art51802.asp), based on book references:

## Mama Tita’s Pancakes

-   1 ½ cups cooked brown rice
-   1 cup coconut milk
-   2 ripe bananas
-   1 tablespoon honey
-   ½ cup white cornmeal
-   2 teaspoons baking powder

# \[2015-03-19 Thu\] Org tips from 2015-03-18 Emacs hangout
---
id: org-tips-from-2015-03-18-emacs-hangout
---



Lots of great tips in [Emacs Hangout 2015-03-18](http://sachachua.com/blog/2015/03/emacs-hangout-2015-03-18-show-notes/). Favorites:

-   Private org drawer to prevent export:

``` org
:PRIVATE:
My super duper secret text I don't want to export.
:END:
```

-   C-c C-p/C-c C-n Jump over sections.
-   (setq org-hide-leading-stars t).
-   (org-bullets-mode).
-   (org-refile).
-   C-u (org-refile) jumps, no refile.
-   (helm-org-in-buffer-headings).

# \[2015-03-19 Thu\] Food bookmarks
---
id: food-bookmarks
---



-   [Cher's hot sauce collection](https://twitter.com/cherdotdev/status/1264343579725647880).
-   [Scott Martin's hot sauce collection](https://twitter.com/hex/status/1320350713734717440).
-   [Summer tomato](http://summertomato.com/).
-   [Tarladalal recipes](http://www.tarladalal.com/).

# \[2015-03-19 Thu\] Ethiopia travel bookmarks
---
id: ethiopia-travel-bookmarks
---

-   [Bet Giyorgis Church](https://en.wikipedia.org/wiki/Church_of_Saint_George,_Lalibela).

# \[2015-03-19 Thu\] China travel bookmarks
---
id: china-travel-bookmarks
---



-   ["If you have not been to Kashgar, then you haven’t really been to Xinjiang”](http://en.people.cn/n3/2021/0719/c90000-9874081.html).
-   [7 first-timer fails to avoid on your trip to Beijing](http://www.lonelyplanet.com/asia/travel-tips-and-articles/china-for-beginners-7-first-timer-fails-to-avoid-on-your-trip-to-beijing).
-   [Archpng on Twitter: "Mount Maiji Grottoes,China… "](https://twitter.com/archpng/status/1146625946943967232).
-   [Beijing on a budget](http://t.co/1tSn3xxfP7).
-   [Chinese cities you've never heard of](http://www.lonelyplanet.com/china/travel-tips-and-articles/the-most-incredible-chinese-cities-youve-never-heard-of).
-   Ctrip for hotels. Stick to high-rated only.
-   [Essential regional cuisine of China](http://www.lonelyplanet.com/asia/travel-tips-and-articles/essential-regional-cuisine-of-china).
-   [Fenghuang ancient town](https://en.wikipedia.org/wiki/Fenghuang_County).
-   [Hallelujah Mountains](http://www.youramazingplaces.com/hallelujah-mountains-china/).
-   [Houhai Lake](https://goo.gl/maps/yP03w) (Beijing). Miscellaneous bars.
-   [Jiuzhaigou nature reserve](https://en.wikipedia.org/wiki/Jiuzhaigou).
-   [Luotuofeng peak, Sichuan](https://twitter.com/planetepics/status/613968121498632192).
-   [Mount Huashan](http://www.boredpanda.com/worlds-most-dangerous-hiking-trail-huashan-mountain-china/).
-   [Mount Maiji Grottoes (DuckDuckGo)](https://duckduckgo.com/?q=Mount+Maiji+Grottoes&t=ffab&iax=images&ia=images).
-   [Nan Luo Gu Xiang](https://goo.gl/maps/TfdOV) (Beijing). Street Food!
-   [Qianmen Street](https://goo.gl/maps/15aFa). Near Tiananmen Square. Artifact shopping and famous food.
-   [Rock pools](http://www.dailymail.co.uk/travel/article-1389739/Chinas-Sichuan-province-Visiting-lair-Yellow-Dragon.html).
-   [Shanghai Street Food #7 Jiān Bǐng 煎餅](http://www.lifeonnanchanglu.com/2010/06/shanghai-street-food-7-jian-bing.html).
-   [Shenzhen](http://joi.ito.com/weblog/2014/09/01/shenzhen-trip-r.html) (Hong Kong). The worlds manufacturing ecosystem.
-   [Suspended Temple of Mt. Hengshan](http://arts.cultural-china.com/en/85Arts192.html).
-   [The essential guide to backpacking China's silk road](http://www.lonelyplanet.com/round-the-world-travel/best-of-round-the-world-travel/content/travel-tips-and-articles/77807).
-   [What are some must-try foods when visiting China? (Quora)](https://www.quora.com/What-are-some-must-try-foods-when-visiting-China).
-   [Zhangjiajie National Forest Park](https://en.wikipedia.org/wiki/Zhangjiajie_National_Forest_Park).
-   [China's most epic high-speed rail journeys](https://www.lonelyplanet.com/china/travel-tips-and-articles/chinas-most-epic-high-speed-rail-journeys/40625c8c-8a11-5710-a052-1479d2768596).

# \[2015-03-18 Wed\] South Korea travel bookmarks
---
id: south-korea-travel-bookmarks
---



-   [8 Amazing Things to Do in Jeonju, South Korea (2020 Guide)](https://www.nomadasaurus.com/things-to-do-in-jeonju-south-korea/).
-   [Hongdae, Seoul](https://en.wikipedia.org/wiki/Hongdae,_Seoul).
-   [Koi fish mural at Naksan Park, Seoul](http://www.humarakausar.com/tag/koi-fish-mural).

# \[2015-03-18 Wed\] Sharing on iOS
---
id: sharing-on-ios
---

-   [UIActivityViewController](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIActivityViewController_Class/).
    -   Use completionWithItemsHandler on iOS 8.
    -   Sample:

``` objc
NSString *title = @"Sharing on iOS bookmarks.";
NSURL *url = [NSURL URLWithString:@"http://xenodium.com/#sharing-on-ios"];
UIImage *image = [UIImage imageNamed:@"beautiful-image"];

UIActivityViewController *controller =
  [[UIActivityViewController alloc]
    initWithActivityItems:@[title, url, image]
    applicationActivities:nil];

// self being a UIViewController.
[self presentViewController:controller animated:YES completion:nil];
```

-   Sharing through Mail app on simulator isn't supported.

> viewServiceDidTerminateWithError: Error Domain=\_UIViewServiceInterfaceErrorDomain Code=3 "The operation couldn’t be completed. (\_UIViewServiceInterfaceErrorDomain error 3.)" UserInfo=… {Message=Service Connection Interrupted}

-   Sharing through Mail app on device is OK.
-   [WWDC 2014 Creating Extensions for iOS and OSX, Part 1](http://devstreaming.apple.com/videos/wwdc/2014/205xxqzduadzo14/205/205_hd_creating_extensions_for_ios_and_os_x,_part_1.mov?dl%3D1).
    -   Share Extensions talk by Guy Fullerton.
        -   Usually view controllers in addition to plist.
        -   CFBundleDisplayName.
        -   NSExtendion.
            -   NSExtensionAttributes.
                -   NSExtensionActivationRule.
    -   SLComposeServiceViewController.
    -   UIActivityViewController.
-   [WWDC 2014 Creating Extensions for iOS and OSX, Part 2](http://devstreaming.apple.com/videos/wwdc/2014/217xxsvxdga3rh5/217/217_hd_creating_extensions_for_ios_and_os_x_part_2.mov?dl%3D1).
-   Want to a share URL to App Store? See [Technical Q&A 1633](https://developer.apple.com/library/ios/qa/qa1633/_index.html).

# \[2015-03-18 Wed\] San Francisco travel bookmarks
---
id: san-francisco-travel-bookmarks
---



-   [Blue Star Donuts (Portland + LA)](http://www.bluestardonuts.com/).
-   [Mr. and Mrs. Miscellaneous](https://www.yelp.com/biz/mr-and-mrs-miscellaneous-san-francisco).
-   [Smitten Ice Cream](https://www.smittenicecream.com/).
-   [Tiled steps at 16th Moraga Street in San Francisco](http://www.tiledsteps.org/).

# \[2015-03-18 Wed\] Istanbul travel bookmarks
---
id: istanbul-travel-bookmarks
---



-   [Altan Şekerleme (turkish delight shop)](http://istanbulfood.com/altan-sekerleme-a-sweet-sweet-bayram/).
-   [Cheap eats in Istanbul's Bazaar District](http://www.lonelyplanet.com/turkey/istanbul/travel-tips-and-articles/top-10-traditional-cheap-eats-in-istanbuls-bazaar-district).
-   [Findikli rainbow stairs](http://www.turkeyfromtheinside.com/istanbul-guide/f/1255-findikli.html).
-   Historic neighborhood of Arnavutkoy in Istanbul.
-   [Istanbul Food: after the perfect bite](http://istanbulfood.com/altan-sekerleme-a-sweet-sweet-bayram/).
-   [The rise of Karakoy: Istanbul's hippest neighbourhood](http://www.lonelyplanet.com/turkey/cappadocia-kapadokya/travel-tips-and-articles/the-rise-of-karakoy-istanbuls-hippest-neighbourhood).
-   [Uskudar Fish Market](http://www.timwilmot.com/2012/04/fish-market-uskudar-istanbul.html).

# \[2015-03-18 Wed\] Rome travel bookmarks
---
id: rome-travel-bookmarks
---

-   [Bike rental in Rome](http://www.topbikerental.com/nuovosito/eng/tour-rome/city-center.php).
-   [Darkrome tours](http://www.darkrome.com/).
-   [First time Rome: a beginner’s guide to the Eternal City](http://www.lonelyplanet.com/italy/travel-tips-and-articles/first-time-rome-a-beginners-guide-to-the-eternal-city#ixzz3lhwtbgg0).

# \[2015-03-17 Tue\] Italy travel bookmarks
---
id: italy-travel-bookmarks
---



-   [22 Towns in Italy That Are Almost Too Perfect Looking](http://themindcircle.com/stunning-italy/).
-   [Abbazia di Monte Oliveto Maggiore](http://www.monte-oliveto.com/).
-   [Abbruzzo's Sulmona: one of the oldest towns in the area and home to the Latin poet Ovid, confetti (sugared almonds) and arrosticini (barbecued lamb skewers)](https://travellingantics.com/).
-   [Alberobello - Wikipedia](https://en.wikipedia.org/wiki/Alberobello).
-   [Amalfi coast's Furore beach](http://www.neatorama.com/2015/04/22/Furore-The-Little-Italian-Beach-Hidden-in-a-Fjord/).
-   [Boboli Gardens, Florence](https://en.wikipedia.org/wiki/Boboli_Gardens).
-   [Braie lake](http://italychronicles.com/heavenly-beauty-braies-lake-italy/).
-   [Caffe Meletti](http://www.caffemeletti.it/).
-   [Cinque Terre](https://en.wikipedia.org/wiki/Cinque_Terre).
-   [Emilia Romagna](https://en.wikipedia.org/wiki/Emilia-Romagna). (foood!).
-   [Fixe small towns in Italy](http://emilyluxton.co.uk/italy/five-small-towns).
-   [Herculaneum - Wikipedia](https://en.wikipedia.org/wiki/Herculaneum).
-   [Italy's six best road trips](http://www.lonelyplanet.com/italy/travel-tips-and-articles/italys-six-best-road-trips).
-   [Le Sirenuse (Positano)](https://sirenuse.it/en).
-   [Live the good life: 12 local experiences on the Amalfi Coast](http://www.lonelyplanet.com/italy/amalfi-coast/travel-tips-and-articles/76904).
-   [Manarola](https://en.wikipedia.org/wiki/Manarola).
-   Milan - Deus cafe.
-   Milan - [Gelato joints](https://www.google.co.uk/search?sa%3DG&hl%3Den&q%3Dgelateria%2Bmilano&npsic%3D0&rflfq%3D1&tbm%3Dlcl&ved%3D0ahUKEwjx8vuA353KAhWIOhoKHaFNDq0QjGoIPQ&biw%3D1600&bih%3D789).
-   Milan - [Il mangione](http://www.ilmangione.it/) to find restaurants.
-   Milan - Mercato Metropolitani.
-   Milan - Navigli and eat at "el brellin".
-   Milan - [Taveggia](http://www.taveggia.it) for hot chocolate.
-   Milan - [Where to go for aperitivo in Milan](http://www.msadventuresinitaly.com/blog/2008/04/14/where-to-go-to-aperitivo-in-milan-italy/).
-   [Montalcino, and Brunello wine](https://en.wikipedia.org/wiki/Montalcino).
-   [Palace of Venaria](https://en.wikipedia.org/wiki/Palace_of_Venaria).
-   [Piazza dei Miracoli](https://en.wikipedia.org/wiki/Piazza_dei_Miracoli#Duomo).
-   [Piedmont](https://en.wikipedia.org/wiki/Piedmont).
-   [Pienza, Tuscany](https://en.wikipedia.org/wiki/Pienza).
-   [Rabbit beach](https://en.wikipedia.org/wiki/Lampedusa).
-   [Re di Macchia, restaurant in Montalcino](http://www.tripadvisor.co.uk/Restaurant_Review-g635634-d1515714-Reviews-Re_di_Macchia-Montalcino_Tuscany.html).
-   [San Galgano, Tuscany](http://www.sacred-destinations.com/italy/san-galgano-abbey).
-   [San Gimignano, Tuscany](https://en.wikipedia.org/wiki/San_Gimignano).
-   [San Lorenzo leather market](http://florence-markets.com/sanlorenzomarket.asp).
-   [Skiing in Italy: find your perfect resort](https://www.lonelyplanet.com/travel-tips-and-articles/skiing-in-italy-find-your-perfect-resort).
-   [The Devil's Bridge in Borgo a Mozzano, Tuscany, Italy - Love from Tuscany](https://lovefromtuscany.com/devils-bridge-tuscany/).
-   [The New Treasures of Pompeii](https://news.ycombinator.com/item).
-   [Volterra, Tuscany](https://en.wikipedia.org/wiki/Volterra).

# \[2015-03-17 Tue\] Emacs lisp debug on entry
---
id: emacs-lisp-debug-on-entry
---

Wanted to track down which package was enabling ido-mode on my behalf. debug-on-entry to the rescue. Pass the method name in question and you're good to go.

``` {.commonlisp org-language="emacs-lisp"}
(debug-on-entry 'ido-mode)
```

When done, use cancel.

``` {.commonlisp org-language="emacs-lisp"}
(cancel-debug-on-entry 'ido-mode)
```

# \[2015-03-17 Tue\] Burma travel bookmarks
---
id: burma-travel-bookmarks
---



-   Bagan and Inle lake are the "touristy" areas.
-   [Balloons over Bagan](http://balloonsoverbagan.com/home).
-   For Bagan, get bicycles.
-   Inle lake guided boat tour.
-   [Ngapali beach](https://en.wikipedia.org/wiki/Ngapali_Beach).
-   [Ngwe Saung beach](https://www.go-myanmar.com/ngwe-saung/).
-   Shwesandaw at sunset.
-   [zyklusdiewelt's Myanmar's photos](http://imgur.com/a/D1EQJ).

# \[2015-03-16 Mon\] OS X Screencasts to animated GIF
---
id: os-x-screencasts-to-animated-gif
---

-   [Alex Dergachev](https://gist.github.com/dergachev/4627207) has a great [howto](https://gist.github.com/dergachev/4627207) for generating animated GIF out of OS X Screencasts.
-   Of interest [GIF Brewery](http://gifbrewery.com/).

# \[2015-03-15 Sun\] Writing Xcode plugins
---
id: writing-xcode-plugins
---

-   [Xcode-Plugin-Template](https://github.com/kattrali/Xcode-Plugin-Template) from [Delisa Mason](http://www.delisa.me/)/[kattrali](https://github.com/kattrali/Xcode-Plugin-Template).
    -   Ensure DVTPlugInCompatibilityUUIDs is in Info.plist.
    -   Get from:

``` {.bash org-language="sh"}
defaults read \
    /Applications/Xcode.app/Contents/Info DVTPlugInCompatibilityUUID
```

-   Luis Solanos's [Xcode-RuntimeHeaders](https://github.com/luisobo/Xcode-RuntimeHeaders).
-   Boris Bügling's [Xcode-RuntimeHeaders](https://github.com/neonichu/Xcode-RuntimeHeaders) fork.
-   [Building the Xcode plugin snapshots](http://artsy.github.io/blog/2014/06/17/building-the-xcode-plugin-snapshots/).
-   [Xcode Explorer](https://github.com/edwardaux/XcodeExplorer) enables you to explore Xcode events/notifications.
-   [Creating an Xcode4 plugin](http://www.blackdogfoundry.com/blog/creating-an-xcode4-plugin/).
-   [Common Xcode plugin techniques](http://www.blackdogfoundry.com/blog/common-xcode4-plugin-techniques/).
-   [XcodeExplorer to monitor Xcode internals](http://www.blackdogfoundry.com/blog/xcodeexplorer-monitor-xcode4-internals/).
-   [Debugging your Xcode plugin](http://www.blackdogfoundry.com/blog/debugging-your-xcode-plugin/).

# \[2015-03-15 Sun\] Uninstalling Alcatraz from Xcode
---
id: uninstalling-alcatraz-from-xcode
---

``` {.bash org-language="sh"}
$ rm -rf ~/Library/Application\ Support/Developer/Shared/Xcode/Plug-ins/Alcatraz.xcplugin
$ rm -rf ~/Library/Application\ Support/Alcatraz
```

ps. Removing all plugins:

``` {.bash org-language="sh"}
$ rm -rf ~/Library/Application\ Support/Developer/Shared/Xcode/Plug-ins/*
```

# \[2015-03-14 Sat\] Prefill Emacs swiper with current region
---
id: prefill-emacs-swiper-with-current-region
---

The new [swiper](https://github.com/abo-abo/swiper) Emacs package is proving to be a great alternative to [helm-swoop](https://github.com/ShingoFukuyama/helm-swoop). Here's how to prefill with current region:

``` {.commonlisp org-language="emacs-lisp"}
(defun ar/prefilled-swiper ()
  "Pre-fill swiper input with region."
  (interactive)
  (if (region-active-p)
      (let ((region-text (buffer-substring (region-beginning)
                                           (region-end))))
        (swiper region-text))
    (swiper)))

(global-set-key (kbd "C-s")
                #'ar/prefilled-swiper)
```

# \[2015-03-14 Sat\] Change macOS app icon
---
id: change-mac-os-app-icon
---

-   Open the new icon (.icns) in Preview.
-   Click on large image
-   Select all (⌘-a).
-   Copy (⌘-c).
-   Ctrl-click on app icon.
-   Select Get Info.
-   Click on app icon (top-left).
-   Paste (⌘-v).
-   Done!

![](https://xenodium.github.io/images/change-mac-os-app-icon/overriding.png)

![](https://xenodium.github.io/images/change-mac-os-app-icon/after.png)

# \[2015-03-11 Wed\] Hack on Emacs London meetup bookmarks
---
id: hack-on-emacs-meetup
---

-   [European Lisp Symposium](http://www.european-lisp-symposium.org).
-   [guide-key](https://github.com/kai2nenobu/guide-key) displays available key bindings.
-   [iplayer-el](https://github.com/csrhodes/iplayer-el) Emacs interface to the BBC's iPlayer.
-   [swankr](https://github.com/csrhodes/swankr) REPL (swank protocol for R).

# \[2015-03-09 Mon\] Working with OS X and Emacs tips
---
id: working-with-os-x-and-emacs-tips
---

From [M-x all-things-emacs](http://emacsblog.org), Ryan McGeary's OS X/Emacs [workflow](http://emacsblog.org/2011/01/04/how-i-work-working-with-os-x-and-emacs/).

## Frequently used apps:

-   [1 password](https://agilebits.com/onepassword).
-   [Choosy](http://www.choosyosx.com/).
-   [Divvy](http://mizage.com/divvy/).
-   [Fastscript](http://www.red-sweater.com/fastscripts).
-   [Fluid](http://fluidapp.com/) (SSB).
-   [Launchbar](http://www.obdev.at/products/launchbar/index.html).
-   [Skitch (screenshots)](https://evernote.com/skitch/guide/mac/).
-   [te (Text expander)](http://smilesoftware.com/TextExpander/index.html).

## Dotfiles

-   [Github](https://github.com/rmm5t/dotfiles).

# \[2015-03-09 Mon\] Building ycmd
---
id: building-ycmd
---

## Build
---
id: build-3
---

``` {.bash org-language="sh"}
$ git clone https://github.com/Valloric/ycmd.git
$ cd ycmd
$ git submodule update --init --recursive
$ ./build.sh --clang-completer
```

## Test

``` {.bash org-language="sh"}
$ python ycmd
  serving on http://127.0.0.1:54265
```

## More info

-   [YouCompleteMe README](https://github.com/Valloric/YouCompleteMe/blob/master/README.md).
-   [ycmd README](https://github.com/Valloric/ycmd/blob/master/README.md).

# \[2015-03-08 Sun\] Regular bookmarks
---
id: regular-bookmarks
---

-   [Roads & Kingdoms (food)](http://roadsandkingdoms.com/category/food/).
-   [Roads & Kingdoms (music)](http://roadsandkingdoms.com/category/music).
-   [Roads & Kingdoms (travel)](http://roadsandkingdoms.com/category/travel/).

# \[2015-03-08 Sun\] Photography bookmarks
---
id: photography-bookmarks
---



-   [77 photography techniques, tips and tricks for taking pictures of anything](http://www.techradar.com/how-to/photography-video-capture/cameras/77-photography-techniques-tips-and-tricks-for-taking-pictures-of-anything-1320768/).
-   [Course schedule - Digital Photography](https://sites.google.com/site/marclevoylectures/schedule).
-   [ExifRenamer: Batch rename photos using exif information](https://www.qdev.de/?location=mac/exifrenamer).
-   [Exposé, A simple static site generator for photoessays](https://github.com/Jack000/Expose).
-   [Japanese Storefront Reference set - Elora 's Ko-fi Shop - Ko-fi](https://ko-fi.com/s/f7ed5aec56).
-   [Michael Gakuran's Gakuranman](http://gakuran.com/category/haikyo-ruins/).
-   [OpenMV (Small - Affordable - Expandable)](https://openmv.io/).
-   [Photo Critique (Subreddit)](https://www.reddit.com/r/photocritique).

# \[2015-03-08 Sun\] Paris travel bookmarks
---
id: paris-travel-bookmarks
---



-   [Atelier Maitre Albert (known for its rotisserie chicken)](http://www.ateliermaitrealbert.com/).
-   Au Passage. Small plates in fun atmosphere.
-   Berthillon Ice Cream.
-   [Breizh Café (traditional gallete, savory buckwheat crepes)](http://www.yelp.com/biz/breizh-caf%C3%A9-paris-2).
-   Buvette Gastrotheque. Wine bar with small dishes.
-   Cheri Bibi, possibly hipster, underneath Sacre Coeur, good cocktails.
-   Creperie Josseline. Worth the queue. Drink Breton cider with crepes.
-   [Holybelly](http://holybel.ly) Canal Saint Martin.
-   [How To Spend a Culinary Weekend In Paris](http://xdaysiny.com/how-to-spend-a-culinary-weekend-in-paris/).
-   L'Aller Retour. The place for steak-frites.
-   L'Office. Wine bar/bistrot.
-   Le Barav'.
-   Le Petit Poucet (restaurant next to Place de Clichy, Paris).
-   [Le Reminet](http://www.lereminet.com) (Paris restaurant).
-   Marché d'Aligre. Authentic neighbourhood market.
-   Marché des Enfants Rouge. Small covered market. Eat at food stalls.
-   Mosquee de Paris. City mosque. Drink mint tea at courtyard under olive trees or eat in restaurant inside. North African food.
-   Musee d'Orsay.
-   [Paris: A Guide To Some Of The Best Cafes In Canal St. Martin](http://sprudge.com/paris-a-guide-to-some-of-the-best-cafes-in-canal-st-martin-56068.html).
-   Pierre Herme. For great pastries and macarons.
-   RATP for transport info including the "carnet" of 10 tickets.
-   Rodin Museum.
-   [West Country Girl (crepes)](http://www.yelp.com/biz/west-country-girl-paris).
-   [What are the best boulangeries and patisseries in Paris for each arrondissement? (Quora)](https://www.quora.com/What-are-the-best-boulangeries-and-patisseries-in-Paris-for-each-arrondissement).
-   [What are the best places to buy cheese in Paris? (Quora)](https://www.quora.com/What-are-the-best-places-to-buy-cheese-in-Paris).
-   [Where are best vintage stores in Paris? (Quora)](https://www.quora.com/Where-are-best-vintage-stores-in-Paris).
-   [Where are the best flea markets in Paris? (Quora)](https://www.quora.com/Where-are-the-best-flea-markets-in-Paris).

# \[2015-03-08 Sun\] Org mode bookmarks
---
id: org-mode-bookmarks
---



-   \[\[<https://karl-voit.at/2017/08/12/org-rabbit-hole/>\]\[\[org-agenda\] UOMF: Org Mode As a Rabbit Hole: Agenda Tasks Piling Up\]\].
-   [A Baby Steps Guide to Managing Your Tasks with Org](http://www.emacslife.com/baby-steps-org.html).
-   [An Agenda for Life With Org Mode](https://blog.aaronbieber.com/2016/09/24/an-agenda-for-life-with-org-mode.html).
-   [An Org Table Spreadsheet cheatsheet](https://scripter.co/notes/org-table-spreadsheet/).
-   [Assigning ids to entries](http://stackoverflow.com/questions/13340616/assign-ids-to-every-entry-in-org-mode).
-   [Automating boilerplate in org-mode journalling](http://thewanderingcoder.com/2015/03/automating-boilerplate-in-org-mode-journalling/).
-   [Beautiful Emacs tags (maybe for org mode?)](https://www.reddit.com/r/emacs/comments/jc4uou/tags_everywhere/).
-   [Beautifying Org Mode in Emacs](https://zzamboni.org/post/beautifying-org-mode-in-emacs).
-   [Blogging from GNU Emacs/org (with rss example)](https://emacs-doctor.com/blogging-from-emacs.html).
-   [Blogging with Emacs org-mode](https://www.sadiqpk.org/blog/2018/08/08/blogging-with-org-mode.html).
-   [Build a second brain](https://yewtu.be/watch).
-   [Compounding Confoundment: arbitrary interpreters for Babel](https://mullikine.github.io/posts/arbitrary-interpreters-for-babel/).
-   [Creating org atom xml feed with blog-atom.sh](https://gitlab.com/sadiq/sadiq.gitlab.io/blob/master/src/blog-atom.sh).
-   [Creating scientific posters with org-mode](https://github.com/philipphoman/org-mode-poster).
-   [Customizing pandoc to generate beautiful pdfs from markdown (helpful to tweak org export)](https://dev.to/learnbyexample/customizing-pandoc-to-generate-beautiful-pdfs-from-markdown-3lbj).
-   [dfeich/org-babel-examples (GitHub)](https://github.com/dfeich/org-babel-examples/blob/master/README.org).
-   [Dfeich’s Org-babel, org-exporter, org-table example collection](https://github.com/dfeich/org-babel-examples/blob/master/README.org).
-   [Diego Zamboni / ox-leanpub · GitLab](https://gitlab.com/zzamboni/ox-leanpub).
-   [Drawing Git Graphs with Graphviz and Org-Mode](http://correl.phoenixinquis.net/2015/07/12/git-graphs.html).
-   [Elisp: Parse Org Mode (API examples by Xah Lee)](http://ergoemacs.org/emacs/elisp_parse_org_mode.html).
-   [Emacs org-mode examples and cookbook](http://ehneilsen.net/notebook/orgExamples/org-examples.html).
-   [Emacs Orgmode Source Code Blocks 2 \| jherrlin](https://jherrlin.github.io/posts/emacs-orgmode-source-code-blocks2/).
-   [Executing org source blocks when loading file (and defining file-local vars)](https://emacs.stackexchange.com/questions/51399/org-babel-tangle-with-function-in-header-arguments/51769#51769).
-   [Export Org HTML SRC blocks as PNG files using Chrome](https://github.com/nikclayton/ob-html-chrome).
-   [feed-builder/feed-builder.el an org/blog rss implementation](https://gitlab.com/ambrevar/ambrevar.gitlab.io/blob/master/feed-builder/feed-builder.el).
-   [Getting Boxes Done, the Code](https://howardism.org/Technical/Emacs/getting-more-boxes-done.html).
-   [GitHub - DarkBuffalo/ox-report: Export your org file to minutes report PDF file](https://github.com/DarkBuffalo/ox-report).
-   [GitHub - misohena/el-easydraw: Embedded drawing tool for Emacs](https://github.com/misohena/el-easydraw).
-   [GitHub - niklasfasching/go-org: Org mode parser with html & pretty printed org rendering](https://github.com/niklasfasching/go-org).
-   [helm-org-rifle: Rifle through your Org buffers and acquire your target](https://github.com/alphapapa/helm-org-rifle).
-   [How can org-babel be configured to set variables across multiple language? (Reddit)](https://www.reddit.com/r/emacs/comments/6mzgkg/how_can_orgbabel_be_configured_to_set_variables/).
-   [How I use org-mode](https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html).
-   [HTML doctypes (The Org Manual)](https://orgmode.org/manual/HTML-doctypes.html#HTML-doctypes).
-   [Image display size in Org](https://www.miskatonic.org/2016/08/25/image-display-size-in-org/).
-   [Karl Voit's personal information management PIM Lecture at TU Graz](https://karl-voit.at/2021/08/28/pim-lecture-tug-2021/).
-   [Kevin's org notes](http://kelvinh.github.io/wiki/org-mode-manual/).
-   [Literate DevOps with org source blocks (Howardism)](http://howardism.org/Technical/Emacs/literate-devops.html).
-   [Literate DevOps](http://www.howardism.org/Technical/Emacs/literate-devops.html).
-   [Literate Programming with Org-mode](http://cachestocaches.com/2018/6/org-literate-programming/).
-   [Literate Programming: Empower Your Writing with Emacs Org-Mode](https://www.offerzen.com/blog/literate-programming-empower-your-writing-with-emacs-org-mode).
-   [Lost in Technopolis (getting things done with org agenda)](http://www.newartisans.com/2007/08/using-org-mode-as-a-day-planner/).
-   [Making a Poster with Org-mode (Irreal)](http://irreal.org/blog/?p=7651).
-   [Managing your contacts in org-mode and syncing them to your phone](https://isamert.net/2021/04/21/managing-your-contacts-in-org-mode-and-syncing-them-to-your-phone-android-ios-whatever-.html).
-   [Managing Your Life With org-mode and Other Tools](https://www.bytedude.com/files/managing-your-life-with-org-mode.html).
-   [Marcin Borkowski: 2018-08-18 Embedding files in Org-mode revisited](http://mbork.pl/2018-08-18_Embedding_files_in_Org-mode_revisited).
-   [Multiline fontification (ie. bold) with org-emphasis-alist](https://fuco1.github.io/2018-12-23-Multiline-fontification-with-org-emphasis-alist.html).
-   [My Org Capture Templates - Part 1 &middot; The Art of Not Asking Why](https://joshrollinswrites.com/emacsorg/org-capture-template-1/).
-   [My Org Capture Templates - Part 3 &middot; The Art of Not Asking Why](https://joshrollinswrites.com/emacsorg/org-capture-template-3/).
-   [My org-mode agenda, much better now with category icons! : emacs](https://www.reddit.com/r/emacs/comments/hnf3cw/my_orgmode_agenda_much_better_now_with_category/).
-   [My Org-mode use cases (Patrick Skiba)](https://patrickskiba.com/org-mode/2019/05/22/uses-for-org-mode.html).
-   [My Workflow with Org-Agenda](http://www.cachestocaches.com/2016/9/my-workflow-org-agenda/).
-   [Native macOS Notifications for Emacs Org Tasks and Appointments](https://christiantietze.de/posts/2019/12/emacs-notifications/).
-   [New link features in org 9](https://kitchingroup.cheme.cmu.edu/blog/2016/11/04/New-link-features-in-org-9/).
-   [om.el/README.md at master · ndwarshuis/om.el · GitHub](https://github.com/ndwarshuis/om.el/blob/master/README.md).
-   [Org babel examples repo](https://github.com/dfeich/org-babel-examples).
-   [Org Babel reference card](https://org-babel.readthedocs.io/en/latest/).
-   [org babel scraps](https://raw.githubusercontent.com/eschulte/babel-dev/master/scraps.org).
-   [Org crypt and LOGBOOK: how they can work together for a secure agenda.](https://ag91.github.io/blog/2020/08/28/org-crypt-and-logbook-how-they-can-work-together-for-a-secure-agenda/).
-   [Org CV/resume](https://titan-c.gitlab.io/org-cv/).
-   [Org mode basics](http://www.star.bris.ac.uk/bjm/org-basics.html).
-   [Org mode blogging: RSS feed](https://writepermission.com/org-blogging-rss-feed.html).
-   [Org mode examples and cookbook](http://home.fnal.gov/~neilsen/notebook/orgExamples/org-examples.html).
-   [Org mode examples](http://home.fnal.gov/~neilsen/notebook/orgExamples/org-examples.html).
-   [Org Mode Habits : emacs](https://www.reddit.com/r/emacs/comments/9d8i7y/org_mode_habits/).
-   [Org mode reference card](https://gist.github.com/drj42/1755992).
-   [Org tutorials](https://orgmode.org/worg/org-tutorials/).
-   [org-almanac](https://alphapapa.github.io/org-almanac/).
-   [org-capture-extension (GitHub)](https://github.com/sprig/org-capture-extension/blob/master/README.md).
-   [org-ehtml: Export Org-mode files as editable web pages](https://github.com/eschulte/org-ehtml).
-   [org-mind-map: creates graphviz directed graphs from org-mode files](https://github.com/theodorewiles/org-mind-map).
-   [Org-mode basics VII: A TODO list with schedules and deadlines \| Pragmatic Emacs](http://pragmaticemacs.com/emacs/org-mode-basics-vii-a-todo-list-with-schedules-and-deadlines/).
-   [Org-mode features You May Not Know · Bastien Guerry - Liberté, informatique](https://bzg.fr/en/some-emacs-org-mode-features-you-may-not-know.html/).
-   [Org-mode Hidden Gems - 02 Tables](https://yiufung.net/post/org-mode-hidden-gems-pt2/).
-   [org-mode support for vCard export and import](https://github.com/flexibeast/org-vcard/).
-   [org-noter: Emacs document annotator, using Org-mode](https://github.com/weirdNox/org-noter).
-   [org-special-block-extras](https://alhassy.github.io/org-special-block-extras/README.html).
-   [org-web-tools: Commands and functions for retrieving web page content and processing it into and displaying it as Org-mode content.](https://github.com/alphapapa/org-web-tools).
-   [org-web-tools: View, capture, and archive Web pages in Org-mode](https://github.com/alphapapa/org-web-tools).
-   [org/uml examples](https://github.com/lyon0xd/uml/blob/master/org/test.org).
-   [Organize you life in Emacs Org \| ZCL.SPACE](https://www.zcl.space/tools/organize-you-life-in-org/).
-   [Organize your life in plain text](http://doc.norang.ca/org-mode.html).
-   [OrgMode tutorial - YouTube channel](https://www.youtube.com/playlist?list=PLVtKhBrRV_ZkPnBtt_TD1Cs9PJlU0IIdE&app=desktop).
-   [Pablo Stafforini’s Forecasting System - EA Forum](https://forum.effectivealtruism.org/posts/w4CM7RfTLXxYLDccX/pablo-stafforini-s-forecasting-system-1).
-   [Plan your day: Daily Time Management with Emacs, Org-Mode, and Google Calendar](https://medium.com/@tasshin/plan-your-day-daily-time-management-with-emacs-org-mode-and-google-calendar-a9162837fdb3).
-   [Prettifying Org Mode with CSS \| Hacker News](https://news.ycombinator.com/item?id=23130104).
-   [Prettifying Org Mode with CSS](https://sandyuraz.com/articles/orgmode-css/).
-   [puntoblogspot: 3 basic org agenda tips for the fundamentally forgetful](https://puntoblogspot.blogspot.com/2018/12/3-basic-org-agenda-tips-for.html).
-   [Querying RESTful webservices into Emacs orgmode tables (vxlabs)](https://vxlabs.com/2017/06/03/querying-restful-webservices-into-emacs-orgmode-tables/).
-   [Rainer König's OrgMode YouTube tutorials](https://www.youtube.com/playlist?list=PLVtKhBrRV_ZkPnBtt_TD1Cs9PJlU0IIdE).
-   [Refiling hydra with pre-defined targets](https://fuco1.github.io/2019-02-10-Refiling-hydra-with-pre-defined-targets.html).
-   [Ricing up Org Mode - EMACS-DOCUMENT](http://blog.lujun9972.win/emacs-document/blog/2018/10/22/ricing-up-org-mode/index.html).
-   [Ricing up Org Mode](https://lepisma.github.io/2017/10/28/ricing-org-mode/).
-   [Robust Notes with Embedded Code (extensive org babel usage)](https://www.arcadianvisions.com/blog/#orga597dcf).
-   [The compact Org-mode Guide](https://orgmode.org/guide/).
-   [The Poor Org-User Spaced Repetition - Where parallels cross](https://ag91.github.io/blog/2020/09/04/the-poor-org-user-spaced-repetition/).
-   [Tutorial 16.1 - Emacs orgmode tables](http://www.flutterbys.com.au/stats/tut/tut16.1.html).
-   [UOMF: Recurring Events with Org Mode](https://karl-voit.at/2017/01/15/org-clone-subtree-with-time-shift/).
-   [Use Emacs Org Mode and REST APIs for an up-to-date Stock Portfolio](http://www.sastibe.de/2018/05/2018-05-11-emacs-org-mode-rest-apis-stocks/).
-   [Using Emacs - 24 - Org Capture 2](http://cestlaz.github.io/posts/using-emacs-24-capture-2/#.WTtEbXWw5pg).
-   [Using Emacs 54 Org Tables](https://cestlaz.github.io/post/using-emacs-54-org-tables).
-   [Using Emacs's org-mode As Your Zettelkasten](https://dpitt.me/blog/2020/03/zettelkasten).
-   [Using org-capture with org-protocol be like - Diego Berrocal](http://www.diegoberrocal.com/blog/2015/08/19/org-protocol/).
-   [Using results from one code block in another org-mode](http://kitchingroup.cheme.cmu.edu/blog/2019/02/12/Using-results-from-one-code-block-in-another-org-mode/).
-   [Using sudo in org-babel](https://ofosos.org/2017/12/04/sudo-org-babel/).
-   [Visit tangled file with org-open-at-point (supports tramp/ssh)](https://www.reddit.com/r/emacs/comments/jof1p3/visit_tangled_file_with_orgopenatpoint/).
-   [WorgSheet Calc Intro – Dj Pj (lots of tips and shortcuts)](https://pjs64.wordpress.com/2020/12/07/worgsheet-calc-intro/).
-   [Writing Specs with Org-mode](http://katherine.cox-buday.com/blog/2015/03/14/writing-specs-with-org-mode/).
-   [YouTube: org introduction](https://www.youtube.com/watch).
-   [Zero to Emacs and Org-roam: a step-by-step guide](https://github.com/nobiot/Zero-to-Emacs-and-Org-roam).

# \[2018-09-11 Tue\] London bar backlog
---
id: london-bar-backlog
---

## Soho

-   [68 and Boston (cocktails and wine bar)](http://www.68andboston.com).

# \[2015-03-08 Sun\] London food backlog
---
id: london-food-backlog
---



## B_acklog

### [Saporitalia (Italian/pizza), Notting Hill](https://www.saporitaliarestaurant.co.uk).

### [Menus \| Lunch, Dinner, Sunday Roast - Blacklock](https://theblacklock.com/menus/).

### [Food & Drink - The Barbary \| Covent Garden Restaurant \| Neal's Yard \| London](https://thebarbary.co.uk/food-drink/).

### [Pophams Bakery](https://www.pophamsbakery.com/).

### [Yipin China \| Restaurants in Islington, London](https://www.timeout.com/london/restaurants/yipin-china).

### [Sunday (breakfast)](https://m.facebook.com/sundaybarnsbury/).

### [The Quince Tree Cafe London (Cafe), Paddington](https://www.clifton.co.uk/the-quince-tree-cafe-london).

### [Bombay Bustle (Indian), Mayfair](https://www.bombaybustle.com).

### [Kyseri (modern turkish), Fitzrovia](https://www.kyseri.co.uk).

### [Pied a Terre (fine dining), Fitzrovia](http://www.pied-a-terre.co.uk/).

### [The Ledbury (fine dining), Notting Hill](http://www.theledbury.com/tasting-menu/).

### [Flour and Grape (Pasta), Bermondsey](https://www.flourandgrape.com).

### [Honi Pokē (poke), Soho](https://www.honipoke.com/).

### [ZIA LUCIA (pizza), Highbury Islington](http://zialucia.com/).

### Yeast Bakery.

### Pavillion Cafe.

### Palm Vaults.

## Angel

[TODO]{.todo .TODO} [Shawarma Bar - Berber and Q](http://www.shawarmabar.co.uk/).

[TODO]{.todo .TODO} [Bombay Burrito (Indian burrito takeaway & restaurant: Angel, Islington)](http://bombayburrito.co.uk/).

## Baker Street

[DONE]{.done .DONE} [L’ANTICA PIZZERIA DA MICHELE (Pizza), Baker Street](http://www.anticapizzeriadamichele.co.uk).

## Barbican

[TODO]{.todo .TODO} [Sushi Tetsu (must book, well in advance)](http://sushitetsu.co.uk).

## Barnsbury

[TODO]{.todo .TODO} Sunday (breakfast, cafe, working).

## Battersea

[TODO]{.todo .TODO} [Tonkotsu (ramen)](https://tonkotsu.co.uk/).

## Brick Lane

[TODO]{.todo .TODO} [Chez Elles](http://www.chezellesbistroquet.co.uk) (french).

[TODO]{.todo .TODO} [Fika](http://www.yelp.com/biz/fika-london-2) (Swedish, cinnamon buns, coffee).

## Bermondsey

[TODO]{.todo .TODO} Druid Street market

1.  FAT London (Kimchee ).

2.  & Cultured butter.

## Bethnal Green

### [DONE]{.done .DONE} [Lahpet](https://lahpet.co.uk/) (Burmese) \<2018-12-02 Sun\> \<2018-12-27 Thu\>
---
id: lahpet-burmese-2018-12-02-sun-2018-12-27-thu
---

## Brixton

[TODO]{.todo .TODO} [Nanban](http://www.nanban.co.uk/) (Japanese soul food).

## Borough

[DONE]{.done .DONE} [Padella](http://padella.co) (great fresh pasta).

[TODO]{.todo .TODO} [Roasting Plant: Fresh Roasted Coffee](https://roastingplant.com/) \<2019-01-15 Tue\>

## Camberwell

[TODO]{.todo .TODO} [Sun of Camberwell](http://suncamberwell.com) (Roast beef, Yorkshire, and sticky toffee pudding).

[TODO]{.todo .TODO} [Silk Road (Chinese, Lamb/cumin skewers)](http://www.timeout.com/london/restaurants/silk-road).

## Canada Water

[TODO]{.todo .TODO} [Chuck burger (truck)](http://www.chuckburgerbar.com/#canadawater).

## Cannon street

[TODO]{.todo .TODO} [The Brigadiers (Indian)](https://www.theinfatuation.com/london/reviews/brigadiers) \<2019-01-22 Tue\>

## Chiswick

[TODO]{.todo .TODO} [The Coffee Traveller](https://www.thecoffeetraveller.com/) \<2019-01-16 Wed\>

## Covent Garden

[TODO]{.todo .TODO} [Punjab](http://www.punjab.co.uk/) (Punjabi).

[TODO]{.todo .TODO} [鼎泰豐・Din Tai Fung・ディンタイフォン・딘타이펑 (soup dumplings)](https://www.dintaifung-uk.com/) \<2019-03-12 Tue\>

[TODO]{.todo .TODO} [Little Kolkata (London Restaurant - Kolkata Spirits)](https://www.littlekolkata.co.uk/) \<2019-03-12 Tue\>

[TODO]{.todo .TODO} [Duende](http://www.duendelondon.com/) (modern Spanish).

[TODO]{.todo .TODO} [Rock & Sole Plaice](http://rockandsoleplaice.com) (fish and chips).

[TODO]{.todo .TODO} [Timber Yard](https://tyuk.com) (coffee, working).

[TODO]{.todo .TODO} [Chicks 'n' Sours](http://www.chicknsours.co.uk/).

[TODO]{.todo .TODO} [Jidori](https://www.jidori.co.uk/) (chicken yakitori) \<2018-12-02 Sun\>

[DONE]{.done .DONE} Dishoom (Indian), try Lamb raan.

[DONE]{.done .DONE} [Sagar](http://www.sagarveg.co.uk) (South Indian): Great food!

## Clapham

[TODO]{.todo .TODO} [Joe Public Pizza](http://www.joepublicpizza.com).

## Crouch end

[TODO]{.todo .TODO} [The Haberdashery](http://www.the-haberdashery.com) (coffee, working).

[TODO]{.todo .TODO} [Blend](http://www.localblend.co.uk/blend-harringay-2) (coffee, working).

## Ealing

[TODO]{.todo .TODO} Kiraku (Sushi).

[TODO]{.todo .TODO} [Wa Cafe (Japanese Patiserie)](https://wacafe.co.uk/).

## Earls court

[TODO]{.todo .TODO} [MAM](http://mamlondon.com) (Vietnamese) \<2018-12-02 Sun\>

[TODO]{.todo .TODO} [Jollibee UK (filipino fried chicken/fast food)](https://www.facebook.com/ukjollibee/?utm_source=tripadvisor&utm_medium=referral) \<2019-03-12 Tue\>

## Edware road

[DONE]{.done .DONE} [GOGI](http://gogi-restaurant.com) (korean): Average. Also, they lied to me and apologized with £10 credit.

## Euston

[TODO]{.todo .TODO} Roti King (Indian/Pakistani/Singaporean): 40, Doric Way, Euston, NW1 1LH.

## Farringdon

[TODO]{.todo .TODO} Quality Chop House.

[TODO]{.todo .TODO} Daddy Donkey (Mexican).

[TODO]{.todo .TODO} [J+A](http://jandacafe.com) (coffe, working).

## Fitzrovia

[TODO]{.todo .TODO} [Indian YMCA](http://www.indianymca.org/) (inexpensive Indian).

[TODO]{.todo .TODO} [Pastificio al dente (Italian, fresh pasta)](https://www.pastificioaldente.com) \<2019-03-12 Tue\>

[TODO]{.todo .TODO} [House of Ho](http://www.houseofho.co.uk/home) (Vietnamese).

## Golders Green

[TODO]{.todo .TODO} Cafe Japan (Sushi).

## Hackney

[TODO]{.todo .TODO} [Pidgin](http://www.pidginlondon.com).

[TODO]{.todo .TODO} [DabbaDrop (Indian delivery subscription)](https://dabbadrop.co.uk).

## Hammersmith

[DONE]{.done .DONE} [Indian Zing](http://indian-zing.co.uk/) (Indian): It was OK (not great).

[TODO]{.todo .TODO} [Dragon cat cafe](https://www.etfoodvoyage.com/2018/08/24/dragon-cat-cafe/) (bubble tea and wheel cake). \<2019-07-14 Sun\>

## Hamstead

[TODO]{.todo .TODO} [Jin Kichi](http://www.jinkichi.com/) (Japanese).

## Harrow

[TODO]{.todo .TODO} [Mazar](http://mazarafghanrestaurant.co.uk/contact/) (Afghan).

## Hatch End

[TODO]{.todo .TODO} [Chuck Burger](http://www.chuckburgerbar.com/).

## Holborn

[TODO]{.todo .TODO} [Prufrock Café](http://www.prufrockcoffee.com) (coffee, working).

[TODO]{.todo .TODO} [Good & Proper](http://www.goodandpropertea.com/find-us) (coffee, tea, working).

[TODO]{.todo .TODO} [Noble Rot (wine bar/food)](https://www.theinfatuation.com/london/reviews/noble-rot) \<2019-01-22 Tue\>

## Holloway Road

[TODO]{.todo .TODO} Xi'an impression (Xi'an)

## Islington

[TODO]{.todo .TODO} [Delhi Grill](http://delhigrill.com) (Indian), try chicken makhani and naan.

[TODO]{.todo .TODO} [BabaBoom](http://www.bababoom.london) (the kebab makers) \<2018-12-02 Sun\>

[TODO]{.todo .TODO} [Roots N1](http://rootsatn1.com) (Indian).

[TODO]{.todo .TODO} [The pig and butcher](http://www.thepigandbutcher.co.uk/) (sunday roast).

[TODO]{.todo .TODO} [Busan BBQ](http://busanbbq.co.uk) (Korean meets American diner/burgers and fried chicken).

[TODO]{.todo .TODO} [Smokehouse Islington](https://smokehouseislington.co.uk/).

[TODO]{.todo .TODO} [Katsuke 100](https://www.etfoodvoyage.com/2019/02/19/katsute-100/) (Japanese tea/cake room). \<2019-07-14 Sun\>

## Kensington

[TODO]{.todo .TODO} Clarke's, try the burger.

## Kensal Green

[TODO]{.todo .TODO} [Centro Galego de Londres](http://www.tripadvisor.com/Restaurant_Review-g186338-d3531042-Reviews-Centro_Galego_de_Londres-London_England.html) (Gallician).

## Kentish town

[TODO]{.todo .TODO} [The Fields Beneath](http://www.timeout.com/london/restaurants/the-fields-beneath) (coffee, working).

## King's Cross

[TODO]{.todo .TODO} Itadaki Zen.

[TODO]{.todo .TODO} [German Gymnasium](http://www.germangymnasium.com/).

[DONE]{.done .DONE} [Yeah! Burger at Star of Kings](http://starofkings.co.uk/food-and-drink/).

[TODO]{.todo .TODO} [Wing Wing (Korean fried chicken)](http://www.wingwing.co.uk/)s.

[TODO]{.todo .TODO} [Sambal Shiok](https://www.etfoodvoyage.com/2018/08/31/sambal-shiok-has-a-permanent-home) known for laksa and satai burger. \<2019-07-14 Sun\>

## Leicester square

[Curry House Ichibanya UK Japanese Restaurant London WC2H](https://ichibanya.uk/) \<2019-03-12 Tue\>.

## Leytonstone

[Singburi (Thai)](http://www.singburi.co.uk) \<2019-05-07 Tue\>.

## Liverpool street

[TODO]{.todo .TODO} [Gunpowder](http://www.gunpowderlondon.com) (Indian).

[TODO]{.todo .TODO} Cinnamon Kitchen (Indian).

## London Bridge

[TODO]{.todo .TODO} [Santo Remedio](https://www.santoremedio.co.uk/) (Mexican).

## Marylebone

[DONE]{.done .DONE} [Fischer's](http://www.timeout.com/london/restaurants/fischers) (Austrian). Great atmosphere and schnitzel. Not cheap.

[TODO]{.todo .TODO} Nambutei (Sushi).

[TODO]{.todo .TODO} [Lurra](http://www.lurra.co.uk/) (Basque).

## Mayfair

[TODO]{.todo .TODO} [Mayfair chippy](http://www.mayfairchippy.com) (Fish and chips).

[TODO]{.todo .TODO} [Ikeda](http://www.ikedarestaurant.com/) (Japanese).

[TODO]{.todo .TODO} [THE ARAKI (Sushi) / pricey](http://www.the-araki.com/).

## Mornington Crescent

[TODO]{.todo .TODO} Asakusa (Japanese).

## Notting Hill

[TODO]{.todo .TODO} [Blend](http://www.localblend.co.uk/blend-harringay-2) (coffee, working).

[TODO]{.todo .TODO} [The continental pantry](http://www.thecontinentalpantry.com/).

[TODO]{.todo .TODO} [MAM](http://mamlondon.com) (Vietnamese) \<2018-12-02 Sun\>

## Old Street

[TODO]{.todo .TODO} [Sardine](http://sardine.london) (French).

[TODO]{.todo .TODO} [Sasuke](http://sasukeramen.co.uk/) (ramen).

## Olympia

[DONE]{.done .DONE} Aborz (Iranian). \<2018-12-27 Thu\>

## Oxford street

[TODO]{.todo .TODO} Roti Chai (Indian).

## Peckham

[TODO]{.todo .TODO} [Ganapati](http://www.ganapatirestaurant.com) (South Indian).

[TODO]{.todo .TODO} [The Begging Bowl (Thai)](http://thebeggingbowl.co.uk/) \<2019-05-07 Tue\>.

## Piccadilly

[TODO]{.todo .TODO} [Urban tea rooms (coffee/tea/brunch)](http://www.urbantearooms.com/menus) \<2019-03-12 Tue\>

[TODO]{.todo .TODO} [Machiya](http://machi-ya.co.uk/) (Japanese comfort) \<2018-12-02 Sun\>

[TODO]{.todo .TODO} [YORI-Korean Restaurant](https://yoriuk.com/) \<2019-03-12 Tue\>

[TODO]{.todo .TODO} [Rochelle Canteen @ The Institute of Contemporary Arts (ICA)](https://www.ica.art/rochelle-canteen) (Pie and ping Sunday special) \<2019-02-12 Tue\>

[TODO]{.todo .TODO} [Dark Chocolate Coated Chocolate Pearl, 190g - Fortnum & Mason](https://www.fortnumandmason.com/products/dark-chocolate-coated-chocolate-pearl) \<2020-06-14 Sun\>.

## Putney

[TODO]{.todo .TODO} [authentic Japanese restaurant in Putney - Tomoe, London Traveller Reviews - TripAdvisor](https://www.tripadvisor.co.uk/ShowUserReviews-g186338-d807103-r176708451-Tomoe-London_England.html).

## Sheppherds bush

[TODO]{.todo .TODO} [Caco & Co](https://www.etfoodvoyage.com/2017/09/03/caco-co/) (Portuguese cafe). \<2019-07-14 Sun\>

[TODO]{.todo .TODO} [Chop chop](https://www.etfoodvoyage.com/2017/03/17/chop-chop-noodle-bar/) (Noodle bar). \<2019-07-14 Sun\>

## Shoreditch

[TODO]{.todo .TODO} [Mast Brothers chocolate makers](http://mastbrothers.com/pages/london).

[TODO]{.todo .TODO} [Sagardi](http://www.sagardi.co.uk/en/) (basque).

[TODO]{.todo .TODO} [Look mum no hands](http://www.lookmumnohands.com/) (cofee, working).

[TODO]{.todo .TODO} [J+A](http://jandacafe.com) (coffe, working).

[TODO]{.todo .TODO} [Good & Proper](http://www.goodandpropertea.com/find-us) (coffee, tea, working).

[TODO]{.todo .TODO} [Smokestak](https://smokestak.co.uk) (BBQ).

[TODO]{.todo .TODO} [Pho Viet 68](https://pickyglutton.com/2015/08/17/banh-mi-in-london-review/) (Banh mi).

## Sloane Square

[TODO]{.todo .TODO} [Rasoi](http://rasoi-uk.com/) (Indian).

## Soho

[TODO]{.todo .TODO} [Le Hanoi](https://www.lehanoi.uk/) (Vietnamese) \<2018-12-02 Sun\>

[TODO]{.todo .TODO} [Cay Tre](https://www.thevietnamesekitchen.co.uk/) (Vietnamese) \<2018-12-02 Sun\>

[TODO]{.todo .TODO} [Viet Food](http://vietnamfood.co.uk/vietfood) (Vietnamese) \<2018-12-02 Sun\>

[TODO]{.todo .TODO} [Tao Tao Ju](http://www.taotaoju.co.uk/) (Dim sum) \<2018-12-02 Sun\>

[TODO]{.todo .TODO} [Lokhandwala London (Top Indian Tapas Restaurant & Bar in London)](http://www.lokhandwala.co.uk/) \<2019-01-15 Tue\>

[TODO]{.todo .TODO} [DUM biryani (Indian)](https://dumlondon.com/) \<2019-01-15 Tue\>

[TODO]{.todo .TODO} [Pastaio (Italian, fresh pasta)](http://pastaio.london) \<2019-01-15 Tue\>.

[TODO]{.todo .TODO} [Bun House](https://bun.house/) (ie. pork buns).

[TODO]{.todo .TODO} [Temper restaurant](http://temperrestaurant.com/) (BBQ/tapas).

[TODO]{.todo .TODO} [Golden Union](http://www.goldenunion.co.uk) (fish bar).

[TODO]{.todo .TODO} [Melt Room](http://meltroom.com/) (Cheese toasties).

[TODO]{.todo .TODO} [Shotgun](http://shotgunbbq.com/) (BBQ).

[TODO]{.todo .TODO} [Smack Lobster](http://smacklobster.com/) (Lobster rolls).

[TODO]{.todo .TODO} [Smoking Goat](https://pickyglutton.com/2014/11/05/smoking-goat-review/) (Thai), highly recommended.

[TODO]{.todo .TODO} [Atari Ya](http://www.atariya.co.uk/restaurants/) (Sushi).

[TODO]{.todo .TODO} Yumi Izakaya (Japanese).

[TODO]{.todo .TODO} Jugemu (Japanese).

[TODO]{.todo .TODO} [Darjeeling Express](http://www.darjeeling-express.com/) (Indian).

[TODO]{.todo .TODO} [Hoppers](http://www.hopperslondon.com) Dosas, Rice, Roast, Kothu & Arrack (Sri Lanka and Tamil Nadu).

[TODO]{.todo .TODO} [Timber Yard](https://tyuk.com) (coffee, working).

[DONE]{.done .DONE} [Pizza Pilgrims](http://pizzapilgrims.co.uk/).

[DONE]{.done .DONE} [Kiln](https://pickyglutton.com/2016/10/14/kiln-review-soho/) (Thai), highly recommended.

[DONE]{.done .DONE} [BAO](http://baolondon.com) (Bao buns! enough said).

[DONE]{.done .DONE} [SAID](http://said.it/en/london/) (italian chocolate shop). Awesome hot chocolate.

## Southhall

### [DONE]{.done .DONE} [Brilliant restaurant](http://brilliantrestaurant.com) (healthier Indian). \<2018-12-27 Thu\>
---
id: brilliant-restaurant-healthier-indian.-2018-12-27-thu
---

## Southbank

[TODO]{.todo .TODO} [Tonkotsu (ramen)](https://tonkotsu.co.uk/).

## South Kensington

[TODO]{.todo .TODO} Hour Glass (Pub restaurant).

## Smithfield

[TODO]{.todo .TODO} [Bird of Smithfield](http://birdofsmithfield.com) (Sheppherd's pie, ox cheek, cheesecake).

## Spitafields

[DONE]{.done .DONE} [Som Saa](https://pickyglutton.com/2016/05/02/som-saa-review-spitalfields/) (Thai), highly recommended. \<2018-12-27 Thu\>

[TODO]{.todo .TODO} [Lahpet](https://lahpet.co.uk/) (Burmese) \<2018-12-02 Sun\>

## Strand

[TODO]{.todo .TODO} [India Club (around for 50 years)](https://www.strand-continental.co.uk/india-club) \<2019-05-21 Tue\>

## Stoke Newingtom

[TODO]{.todo .TODO} [The Haberdashery](http://www.the-haberdashery.com) (coffee, working).

## Tottenham Court Road.

[DONE]{.done .DONE} [Kanada-Ya](https://www.kanada-ya.com/) (rammen): Not bad.

## Tower Hill

[TODO]{.todo .TODO} [M. Manze](http://www.manze.co.uk) (pie and mash).

[TODO]{.todo .TODO} [Maltby street market](https://www.google.co.uk/search?q=maltby+street+market&rlz=1C1FLDB_enGB546GB546&espv=2&biw=1449&bih=913&tbm=isch&tbo=u&source=univ&sa=X&ved=0ahUKEwj1nrGQvYvLAhUF2hoKHeaQDQsQsAQIOg&dpr=1).

## Tufnell Park

[TODO]{.todo .TODO} Monsoon (Indian), try lamb naga.

## Turnham Green

[TODO]{.todo .TODO} Chief Coffee.

## Victoria

[TODO]{.todo .TODO} [Dominique Ansel Bakery (Bakery)](http://dominiqueansellondon.com/) \<2019-01-22 Tue\>

[TODO]{.todo .TODO} Dominique Ansel Bakery \<2018-12-11 Tue\>

[TODO]{.todo .TODO} [Bleeker (burger)](https://bleeckerburger.co.uk) \<2019-01-22 Tue\>

## Walthamstow

[TODO]{.todo .TODO} [Grillstock BBQ](https://grillstock.co.uk).

## Waterloo

[TODO]{.todo .TODO} [The Laughing Gravy](http://thelaughinggravy.co.uk).

[TODO]{.todo .TODO} [Zen China](http://zenchina.co.uk).

## West Hamstead

[TODO]{.todo .TODO} [Nautilus](http://www.timeout.com/london/restaurants/nautilus) (fish and chips).

[TODO]{.todo .TODO} [Mamacita](https://twitter.com/MamacitaNW6/media) (Mexican).

## Whitechapel

[TODO]{.todo .TODO} Lahore Kebab House, try seekh kebabs with roti.

[TODO]{.todo .TODO} Sushinoen.

## Wimbledon

[TODO]{.todo .TODO} Dalchini (Indian), try spicy cocunut fish curry.

# \[2015-03-07 Sat\] UX bookmarks
---
id: ux-bookmarks
---



-   [10 kerning tips for improving your typography](https://99designs.com/designer-blog/2014/01/20/11-kerning-tips/).
-   [10 Usability Heuristics for User Interface Design](https://www.nngroup.com/articles/ten-usability-heuristics/).
-   [30 Flat Design Color Palettes That Just Work](http://line25.com/inspiration/flat-design-color-palettes).
-   [4 Rules for Intuitive UX](https://learnui.design/blog/4-rules-intuitive-ux.html).
-   [Animated SVG icons](http://tympanus.net/Development/AnimatedSVGIcons/).
-   [Apple's UI design Dos and Don'ts](https://developer.apple.com/design/tips/).
-   [Applying white space in UI design: 8 practical tips, with examples.](https://twitter.com/yuanqinglim/status/1357893783803756544).
-   [Ask HN: Good books or articles on UI design? (Hacker News)](https://news.ycombinator.com/item?id=12711060).
-   [behance (Showcase & Discover Creative Work)](https://www.behance.net/).
-   [California magazine](https://www.behance.net/gallery/18006477/California-Magazine).
-   [capptivate.co (features mobile UIs)](http://capptivate.co).
-   [Creating badass users](https://lmjabreu.com/post/creating-badass-users/).
-   [Death to Stock (stock photos)](http://deathtothestockphoto.com/stories/).
-   [Designer News](https://www.designernews.co/).
-   [Designing an Icon for Your App – Space and Meaning (planet gnome)](https://blogs.gnome.org/tbernard/2019/12/30/designing-an-icon-for-your-app/).
-   [DIY UI Tips for Backend Developers](https://developer.bring.com/blog/ui-tips/).
-   [Evil icons](http://evil-icons.io).
-   [Font squirrel (free fonts for commercial use)](http://www.fontsquirrel.com/).
-   [Freesound just reached 500K Creative Commons sounds \| Hacker News](https://news.ycombinator.com/item?id=27232297).
-   [How to Become a UX Designer (Hacker News)](https://news.ycombinator.com/item?id=13015631).
-   [How to Draw from Imagination: Beyond References](https://www.sketchbook.com/blog/how-to-draw-imagination-using-references/).
-   [Images and Sketch files of popular devices (Hacker News)](https://news.ycombinator.com/item?id=10861521).
-   [Images and Sketch files of popular devices](http://facebook.github.io/design/devices).
-   [iOS Typography: Stop Saying “No” to Designers on Vimeo](https://vimeo.com/137263880).
-   [Laws of UX \| Hacker News](https://news.ycombinator.com/item?id=24030969).
-   [Logo Modernism (Book)](http://www.underconsideration.com/brandnew/archives/logo_modernism.php#.VhRP_HvoVE4).
-   [Makerbook: A hand-picked directory of the best free resources for creatives](http://makerbook.net/).
-   [Material Design icons](https://github.com/google/material-design-icons/releases/tag/1.0.0).
-   [mobile-patterns.com (UX mobile patterns)](http://www.mobile-patterns.com/).
-   [pttrns.com (mobile UX patterns)](http://pttrns.com/).
-   [Refactoring UI: The Book](https://www.refactoringui.com/book).
-   [Rules for Intuitive UX \| Hacker News](https://news.ycombinator.com/item?id=20728645).
-   [Selection controls — UI component series \| by Taras Bakusevych \| UX Collective](https://uxdesign.cc/selection-controls-ui-component-series-3badc0bdb546).
-   [Skins / Themes / Docs / TACHYONS](http://tachyons.io/docs/themes/skins/).
-   [Swissted (punk rock and Swiss Modernism drawings)](https://www.swissted.com/).
-   [TACHYONS - Css Toolkit (Minimalistic Swiss-inspired)](http://tachyons.io/).
-   [Ten most popular webfonts of 2014](http://www.typewolf.com/blog/most-popular-fonts-of-2014).
-   [The 100 Best Design Blogs to Follow](http://inkbotdesign.com/100-best-design-blogs/).
-   [The Foundations of a Good UI](http://www.codelitt.com/blog/the-foundations-of-a-good-ui/).
-   [The Psycology of UX](http://www.methodsandtools.com/archive/archive.php?id=126).
-   [Typographica (type reviews, books, commentary)](http://typographica.org/).
-   [Unsplash – Beautiful photos free to use under the Unsplash License (Hacker News)](https://news.ycombinator.com/item?id=12887416).
-   [UX Planet](https://uxplanet.org/).
-   [Visualizing Science: Illustration and Beyond - Scientific American Blog Network](https://blogs.scientificamerican.com/sa-visual/visualizing-science-illustration-and-beyond).
-   [What are you working on? Dribbble is show and tell for designers](https://dribbble.com/).
-   [Why Showing Your Process is So Important!](https://blog.prototypr.io/why-showing-your-process-is-so-important-1e4129a5f5d2#.7o5bfjwd7).

# \[2015-03-07 Sat\] Recipes
---
id: recipes
---

## Jeera rice (cumin rice)

### Sizzle spices (40 seconds)

-   1 tablespoon oil
-   1 teaspoon cumin seeds
-   4 cloves
-   2 black cardamon pods
-   1 cinnamon stick

### Sautee onion (2 mins or browned/opaque)

-   1 small yellow onion (chopped)

### Sautee rice + salt (1 minute)

-   2 cups of basmati rice
-   1.2 teaspoon of salt

### Boil, then partially cover and simmer (8 minutes or water gone)

-   4 cups water

### Rest 5 minutes (covered)

## Slow-cooked lamb

1.  Preheat oven: 240°C (no fan) 220°C (fan).
2.  Lamb face up in tray.
3.  Cook for 30 mins (or brown).
4.  Take lamb out.
5.  Add to tray: broth, onions, rosemary.
6.  Lamb face down (broth covers 1/3 or 1/4).
7.  Cover with lid (or baking/parchment paper then 2 layers of foil).
8.  Bake for 3.5 hours at 180°C (no fan).
9.  Take out.
10. Turn lamb face up (over again). Check if liquid needs top-up.
11. Cook for 2 more hours.
12. Check if ready. Does meat fall off the bone with fork?
13. If not, keep for another 30 mins. Check again.
14. You are done ø/.

## Tom Kha Gai soup

-   Chicken or Prawns
-   2 kaffir lime leaves
-   1 lemongrass stalk
-   1 1/2 cocunut milk
-   3/4 sliced fresh galaghal
-   1 1/2 chicken stock or water
-   1/2 cup mushrooms
-   3 1/2 tbsp sugar
-   1/2 cup of cilantro
-   1-4 thai chillies
-   1-2 tbsp chili oil
-   1 green onion

## Veg-Fruit juice

-   Lime
-   Ginger
-   Apple
-   Chilly
-   Celery
-   Fig
-   Blueberries

## Berry Hempster

-   Hemp milk
-   Hemp protein
-   Strawberry
-   Blueberry
-   Date

## How to cook [Beef Chow Fun](https://www.youtube.com/watch?v%3DDaN4ifTG3H0).

## [Cavolo nero with anchovies, chilli and garlic](http://www.dailymail.co.uk/home/you/article-2248267/Recipe-Cavolo-nero-anchovies-chilli-garlic.html).

## Vietnamese Pork Lettuce Wraps (my own versions)

-   Pork Mince.
-   Chopped garlic.
-   Chopped chillies.
-   Chopped ginger.
-   4 tablespoons of soy sauce.
-   2 tablespoons of apple cider vinegar.
-   Sesame oil (for cooking mince).
-   Half tablespoon of coconut sugar.
-   Lettuces (for wrapping).

# \[2015-03-07 Sat\] Music backlog
---
id: music-backlog
---



[TODO]{.todo .TODO} [CatMeows: A Publicly-Available Dataset of Cat Vocalizations \| Zenodo](https://zenodo.org/record/4008297).

[TODO]{.todo .TODO} Pay What You Want (bandcamp).

[TODO]{.todo .TODO} [Zontali on Twitter: "Name one of your most emotionally resonant songs, and I …](https://twitter.com/cognazor/status/1196464349109530625).

[TODO]{.todo .TODO} [Generative.fm](https://generative.fm/).

[TODO]{.todo .TODO} [Diminished Fifth](http://ivanish.ca/diminished-fifth/).

[TODO]{.todo .TODO} [Archive of Indian music](http://www.archiveofindianmusic.org/).

[TODO]{.todo .TODO} Budhaditya Mukherjee.

[TODO]{.todo .TODO} Debashish Bhattcharya.

[TODO]{.todo .TODO} Halim Jafar Khan and his Disciples - Sitar Quintet - LP published in India in 1968.

[TODO]{.todo .TODO} Harjinderpal Singh.

[TODO]{.todo .TODO} Jayanthi Kumaresh.

[TODO]{.todo .TODO} [Kayhan Kalhor](https://www.youtube.com/watch?v=jMEjPKBvhzE#t=0).

[TODO]{.todo .TODO} [Malaya Chalo](http://youtu.be/qQcKzwSmGy0).

[TODO]{.todo .TODO} Mehboob Nadeem.

[TODO]{.todo .TODO} Nirmalya Dey.

[TODO]{.todo .TODO} [Zia Mohiuddin](https://www.youtube.com/watch?v=dPSr3swtLDk).

[TODO]{.todo .TODO} Music sites

-   [3hive](http://3hive.com/)
-   [A Closer Listen](https://acloserlisten.com/)
-   [Alfitude](https://alfitude.com/)
-   [Abduction Radiation](https://abductionradiation.tumblr.com/)
-   [Addicted](http://www.weraddicted.com/category/music/)
-   [Acid Stag](https://acidstag.com/category/music/)
-   [ADHOC](https://www.adhoc.fm/)
-   [Album of the Year](https://www.albumoftheyear.org/)
-   [American Songwriter](https://americansongwriter.com/news/)
-   [Any Decent Music?](http://www.anydecentmusic.com/)
-   [Aquarium Drunkard](https://aquariumdrunkard.com/)
-   [Atwood Magazine](https://atwoodmagazine.com/)
-   [Backseat Mafia](https://www.backseatmafia.com/)
-   [Birp!](http://www.birp.fm/)
-   [Black Plastic](https://www.blackplastic.co.uk/)
-   [Bleep](https://bleep.com/)
-   [Blinded by the Floodlights](https://www.blindedbythefloodlights.com/)
-   [Bloodbuzzed](http://bloodbuzzed.blogspot.com/)
-   [Brighton Music Blog](https://brightonmusicblog.co.uk/)
-   [Brooklyn Vegan](https://www.brooklynvegan.com/)
-   [Built on a Weak Spot](https://boaws.org/)
-   [buzzbands.la](https://buzzbands.la/)
-   [Cereal and Sounds](http://www.cerealandsounds.com/)
-   [Chillhop Blog](https://chillhop.com/blog/)
-   [Classics Dujour](https://classicsdujour.com/)
-   [Classic Rock History](https://www.classicrockhistory.com/)
-   [Clout](https://cloutcloutclout.com/)
-   [Clunk Magazine](https://clunkmag.com/?v=7516fd43adaa)
-   [Consequence of Sound](https://consequenceofsound.net/category/new-music/)
-   [Cool Music and Things](https://www.coolmusicandthings.co.uk/)
-   [Crack Magazine](https://crackmagazine.net/)
-   [Curious for Music](https://www.curiousformusic.com/)
-   [Darren’s Music Blog](https://darrensmusicblog.com/category/rock-music/)
-   [Daytrotter](https://www.pastemagazine.com/daytrotter)
-   [Desert Island Cloud](https://www.desertislandcloud.com/)
-   [Digital Tour Bus](https://www.digitaltourbus.com/)
-   [Diffuser.fm](https://diffuser.fm/)
-   [Disco Naivete’](https://disconaivete.com/)
-   [DiscoverNu](http://www.discovernu.co/)
-   [Discovery Music](https://discoverymusicscotland.com/)
-   [Dinked](https://dinkededition.co.uk/)
-   [Dork](https://readdork.com/)
-   [Drag City](https://www.dragcity.com/)
-   [Driven Far Off](http://www.drivenfaroff.com/category/videos/)
-   [Dummy Magazine](https://dmy.co/new-music)
-   [Earmilk](https://earmilk.com/)
-   [Ear to the Ground Music](https://www.eartothegroundmusic.co/)
-   [Eclectic Music Lover](https://eclecticmusiclover.com/)
-   [Elicit Magazine](http://www.elicitmagazine.com/)
-   [Exclaim!](https://exclaim.ca/music)
-   [Exposed Magazine](https://www.exposedmagazine.co.uk/category/music/)
-   [Fame Magazine](https://www.famemagazine.co.uk/)
-   [Fact Magazine](https://www.factmag.com/)
-   [Fashionably Early](https://www.fashionably-early.com/)
-   [First in Music](https://www.wunc.org/live-updates/north-carolina-local-music-blog-burns-wunc)
-   [Fluxblog](http://www.fluxblog.org/)
-   [For the Love of Bands](https://fortheloveofbands.com/)
-   [For the Rabbits](https://fortherabbits.net/)
-   [From the Strait](https://fromthestrait.com/)
-   [FV Music Blog](https://fvmusicblog.com/blog/)
-   [Gas Mask Magazine](http://www.gasmaskmagazine.com/)
-   [Gig Goer](https://giggoer.com/)
-   [GoldFlakePaint](https://www.goldflakepaint.co.uk/posts/)
-   [GoldenPlec](https://www.goldenplec.com/)
-   [Goldmine](https://www.goldminemag.com/)
-   [Gorilla Vs. Bear](https://www.gorillavsbear.net/)
-   [God is in the TV](http://www.godisinthetvzine.co.uk/category/new-music/)
-   [Grimy Goods](https://www.grimygoods.com/new-music-2/)
-   [Hard of Hearing Music](https://hardofhearingmusic.com/)
-   [Hardly Art](https://www.hardlyart.com/)
-   [Hearing Things!](https://www.hearingthings.co/)
-   [High Clouds](https://highclouds.org/)
-   [Hype Machine](https://hypem.com/site/highclouds/23232)
-   [High Five For…](https://hi54.blog/)
-   [Hot Press](https://www.hotpress.com/music)
-   [Hype Machine](https://hypem.com/latest)
-   [hundreds of music sites](https://hypem.com/list)
-   [latest posts](https://hypem.com/)
-   [I Herat Moosiq](https://iheartmoosiq.tumblr.com/)
-   [Impose Magazine](https://imposemagazine.com/)
-   [In Tune](http://www.intunemusic.co.uk/)
-   [Independent Music Reviews](https://independentmusic.reviews/)
-   [Indie-Tapes](https://indie-tapes.com/)
-   [Indie88](https://indie88.com/)
-   [Indie30](https://indie30.com/)
-   [Indie Air](https://www.youtube.com/channel/UCVoraDictyd89xgZt-J2Frw)
-   [Indie Artist Go](https://indieartistgo.com/category/indie-music/indie-music-interviews/)
-   [Indie Central Music](https://www.indiecentralmusic.com/)
-   [Indie is not a Genre](https://www.indieisnotagenre.com/)
-   [Indie Music Filter](https://indiemusicfilter.com/)
-   [Indie Obsessive](http://indieobsessive.blogspot.com/)
-   [Indie Pulse Magazine](https://indiepulsemusic.com/)
-   [Indie Rock Cafe](https://indierockcafe.com/)
-   [Indie Underground](http://indieunderground.ca/)
-   [Indiemuck](https://www.indiemuck.com/)
-   [Indietronica](http://indietronica.org/)
-   [Infinite Volume Magazine](https://infinitevolumemag.com/)
-   [Is This Music?](https://www.isthismusic.com/)
-   [It’s All Indie](http://www.itsallindie.com/)
-   [It’s Indie and We Know it](https://www.itsindie.co.uk/music)
-   [IQ](https://www.iq-mag.net/)
-   [Juno](https://www.juno.co.uk/junodaily/category/music-news/)
-   [Kaput Magazine](http://kaput-mag.com/en/)
-   [Keep Walking Music](https://keepwalkingmusic.com/)
-   [S. Ben Ali](https://twitter.com/SEBenAli)
-   [LA Record](https://larecord.com/)
-   [Largehearted Boy](http://blog.largeheartedboy.com/)
-   [Lefuturewave](https://lefuturewave.com/)
-   [Little Indie Blogs](http://littleindieblogs.blogspot.com/)
-   [Lucy McCourt](https://lucymccourt.com/)
-   [Mad Mackeral](https://madmackerel.org/)
-   [MEL Magazine](https://melmagazine.com/entertainment/music)
-   [Mix it all Up](https://mixitallup.com/)
-   [MORIndie](https://www.youtube.com/user/MORindie)
-   [My Old Kentucky Blog](http://www.myoldkentuckyblog.com/)
-   [Music Assent](http://musicassent.com/)
-   [Music Authentic](https://musicauthentic.com/)
-   [Music Bloggers Network](https://www.musicbloggersnetwork.com/)
-   [Music Crowns](https://www.musiccrowns.org/)
-   [Music for Misfits](https://musicforthemisfits.com/)
-   [Music Industry Blog](https://musicindustryblog.wordpress.com/)
-   [Music Machinery](https://musicmachinery.com/)
-   [Music Matters](https://musicmattersgb.com/)
-   [Music Review World](https://musicreviewworld.com/)
-   [Music Savage](http://www.musicsavage.com/)
-   [Musikblog](https://www.musikblog.de/)
-   [Neon Filler](http://www.neonfiller.com/wordpress/)
-   [Top 100 Indie and Alternative Albums list](http://www.neonfiller.com/wordpress/?cat=268)
-   [Neon Music](https://neonmusic.co.uk/)
-   [New Sound Generation UK](https://newsoundgeneration.co.uk/)
-   [New Sounds](https://newsoundsmag.co.uk/)
-   [NiteStylez](http://www.nitestylez.de/)
-   [Noctis](https://noctismag.com/)
-   [Noise Artists](https://noiseartists.net/)
-   [Notion](https://notion.online/)
-   [Now Then Magazine](https://nowthenmagazine.com/music)
-   [NME](https://www.nme.com/news/music)
-   [No Depression](https://www.nodepression.com/)
-   [#RootsMusic](https://twitter.com/search?q=%23RootsMusic&src=hashtag_click)
-   [Nordic Music Review](https://www.nordicmusicreview.com/)
-   [NYCTaper](http://www.nyctaper.com/)
-   [Oblivious Pop](http://www.obliviouspop.com/)
-   [Golden Tiki](https://www.thegoldentiki.com/)
-   [Obscure Sound](https://www.obscuresound.com/)
-   [Oh My Rockness](https://www.ohmyrockness.com/)
-   [One Great Song](https://www.onegreatsong.co.uk/)
-   [One Song a Day](http://www.1songday.com/)
-   [One Stop Record Shop](http://onestoprecordshop.co.uk/)
-   [One Quart Magazine](https://onequartmagazine.com/music/)
-   [Overblown UK](https://overblown.co.uk/)
-   [Ovrld](http://ovrld.com/)
-   [Pastel Wasteland](https://pastelwasteland.com/)
-   [Pilerats](http://pilerats.com/music/bands/)
-   [Pink Wafer](https://pinkwafer.club/)
-   [Pitchfork](https://pitchfork.com/)
-   [Plastic](http://plasticmag.co.uk/)
-   [Please Pass the Indie](https://www.pleasepasstheindie.com/)
-   [Popped Music UK](https://poppedmusic.co.uk/)
-   [Portals](http://prtlsmusic.com/)
-   [Post-Trash](http://post-trash.com/)
-   [Purple Melon](https://purplemelonmu.com/)
-   [Raven Sings the Blues](http://www.ravensingstheblues.com/)
-   [Record of the Day](https://www.recordoftheday.com/track-archive)
-   [Reddit](https://www.reddit.com/r/indiemusic/)
-   [Rhythm Section](https://www.wearerhythmsection.com/)
-   [Right Cord Music](https://www.rightchordmusic.co.uk/)
-   [Rock the Pigeon](https://rockthepigeon.com/)
-   [Padraigs](https://www.padraigs.com/)
-   [Scene Point Blank](https://www.scenepointblank.com/)
-   [Schon!](https://schonmagazine.com/)
-   [Scientists of Sound](https://www.sos-music.co.uk/)
-   [Scottish Music Network](http://www.scottishmusicnetwork.co.uk/)
-   [She Bops](https://shebops.net/)
-   [Shindig!](https://www.shindig-magazine.com/)
-   [Shoegaze Blog](https://shoegazeblog.com/)
-   [Sidekick Music](https://sidekick-music.com/music-news/)
-   [Sinusoidal Music](https://sinusoidalmusic.com/)
-   [Sodwee](https://sodwee.com/blog/)
-   [So Young Magazine](https://soyoungmagazine.com/journal/)
-   [Some Kind of Wonderful](https://www.somekindofawesome.com/)
-   [Sould Doubt Magazine](https://www.souldoubtmag.com/)
-   [Sound Good to Me Too](https://sgtmt.tumblr.com/)
-   [SPIN](https://www.spin.com/)
-   [Spinditty](https://spinditty.com/artists-bands/)
-   [Stamp The Wax](https://www.stampthewax.com/)
-   [Static Dive](https://staticdive.com/)
-   [Stepkid](http://stepkid.com/)
-   [Stereofox](https://www.stereofox.com/)
-   [Stereogum](https://www.stereogum.com/music/)
-   [Stereo Stickman](https://stereostickman.com/)
-   [Still in Rock](https://www.stillinrock.com/)
-   [Swell Tone](http://swelltonemusic.com/)
-   [Swim into the Sound](https://swimintothesound.com/)
-   [Sync.](https://syncmusicblog.com/)
-   [Tenement TV](https://www.tenementtv.com/)
-   [Test Pressing](https://testpressing.org/)
-   [That Grape Juice](https://thatgrapejuice.net/)
-   [The Alternative](https://www.getalternative.com/category/music/)
-   [The Bops Collective](https://thebopscollective.com/)
-   [The Blue Walrus](https://thebluewalrus.com/)
-   [The Burning Ear](http://www.theburningear.com/)
-   [The Daily Listening](https://www.thedailylistening.com/)
-   [The Daily Music Report](https://thedailymusicreport.com/best-new-music/)
-   [Fader](http://www.thefader.com/)
-   [The Grey Estates](https://www.thegreyestates.com/)
-   [The HoneyPop](https://thehoneypop.com/)
-   [The Indie Grid](https://theindiegrid.co.uk/)
-   [The Indie Scene](https://www.theindiescene.co.uk/)
-   [The Indie Sound](http://theindiesound.com/)
-   [The Last Mixed Tape](https://thelastmixedtape.com/)
-   [The Line of Best Fit](https://www.thelineofbestfit.com/)
-   [The Luna Collective](https://www.thelunacollective.co/)
-   [The Music](https://themusic.com.au/)
-   [The Music Files](https://the-music-files.com/single-album-reviews/)
-   [The Music Manual](http://www.themusicmanual.co.uk/)
-   [The Music Mermaid](https://www.themusicmermaid.com/)
-   [The Music Ninja](http://www.themusicninja.com/)
-   [The New LoFi](https://thenewlofi.com/)
-   [The Other Side Reviews](https://www.theothersidereviews.com/)
-   [The Playground](https://www.theplayground.co.uk/)
-   [The Pit London](https://www.thepitldn.com/guestmixes)
-   [The Point of Everything](http://www.thepointofeverything.com/)
-   [The Quietus](https://thequietus.com/)
-   [The Reviews are in](https://www.thereviewsarein.com/)
-   [The Revue](https://therevue.ca/category/music/)
-   [The Scenestar](https://thescenestar.typepad.com/)
-   [The Sonic Mosquito Soup](https://thesonicmosquitosoup.wordpress.com/)
-   [The Skinny](https://www.theskinny.co.uk/music)
-   [The Sound Sniffer](https://thesoundsniffer.com/)
-   [The Static Dive](https://staticdive.com/)
-   [The Thin Air](https://thethinair.net/)
-   [The Waster](http://www.thewaster.com/)
-   [The WonderWhy](https://thewonderwhy.wixsite.com/website)
-   [The Zine UK](https://www.thezineuk.co.uk/music/)
-   [This Song is Sick](http://thissongissick.com/)
-   [Three Imaginary Girls](https://threeimaginarygirls.com/record_review/)
-   [Tiny Mix Tapes](https://www.tinymixtapes.com/)
-   [Tone Def Sound](https://tonedefsound.com/)
-   [Top Shelf Records](https://www.topshelfrecords.com/words)
-   [Turntable Kitchen](https://www.turntablekitchen.com/music/)
-   [Turtle Tempo UK](http://turtletempo.co.uk/)
-   [Two Story Melody](https://twostorymelody.com/)
-   [Upset Magazine](https://www.upsetmagazine.com/)
-   [Upstream Indie](https://upstreamindie.com/)
-   [Under the Radar Magazine](http://www.undertheradarmag.com/)
-   [Uranium Waves](https://www.uraniumwaves.com/)
-   [Various Small Flames](https://varioussmallflames.co.uk/)
-   [Vulture](https://www.vulture.com/music/)
-   [We all want someone to shout for](https://weallwantsomeone.org/)
-   [We Plug Good Music](https://www.wepluggoodmusic.com/)
-   [We Write About Music](https://www.wewriteaboutmusic.com/)
-   [When the Horn Blows](https://whenthehornblows.com/)
-   [Where the Music Meets](https://www.wherethemusicmeets.com/)
-   [Wolf in a Suit](https://www.wolfinasuit.com/)
-   [Words for Music](https://www.wordsformusic.blog/)
-   [ZS Noize](https://www.xsnoize.com/)
-   [Xune Mag](https://xunemag.com/)
-   [XLR8R](https://xlr8r.com/)
-   [Your Roman Features](https://yourromanfeatures.tumblr.com/)
-   [Attack Magazine](https://www.attackmagazine.com/)
-   [Audiodrums](http://www.audiodrums.com/)
-   [BoilerRoomTV](https://boilerroom.tv/)
-   [Daily Beat](https://daily-beat.com/)
-   [Dance Music NW](https://www.dancemusicnw.com/)
-   [Data Transmission](https://datatransmission.co/)
-   [Deep House Amsterdam](https://www.deephouseamsterdam.com/)
-   [DJ Gym](https://www.djgym.co.uk/blog)
-   [DJ Mag](https://djmag.com/)
-   [EDM.com](https://edm.com/)
-   [EDM Sauce](https://www.edmsauce.com/)
-   [EDMTunes](https://www.edmtunes.com/)
-   [EDM Identity](https://edmidentity.com/)
-   [EKM](https://ekm.co/)
-   [Electro Jams](https://www.electrojams.com/)
-   [ElectroWow](https://www.electrowow.net/)
-   [Electronic Beats](https://www.electronicbeats.net/)
-   [Emerald City EDM](https://www.emeraldcityedm.com/)
-   [FAZEmag](https://www.fazemag.de/)
-   [of the Beast](https://beastbarbecue.com/)
-   [Dummy Mag](https://www.dummymag.com/)
-   [Hammarica](https://www.hammarica.com/category/dj-interviews/)
-   [Inverted Audio](https://inverted-audio.com/)
-   [Life Support Machine UK](https://www.lifesupportmachine.co.uk/)
-   [Magnetic Magazine](https://www.magneticmag.com/)
-   [Minimal Freaks](https://minimalfreaks.co/)
-   [Mixing-DJ](https://mixing.dj/)
-   [MixMag](https://mixmag.net/)
-   [Pilerats](http://pilerats.com/music/electronic/)
-   [Plastic](https://plasticmag.co.uk/category/features/)
-   [Purple Sneakers](https://www.purplesneakers.com.au/)
-   [Rave Culture](https://www.raveculture.com/)
-   [Raver Rafting](http://raverrafting.com/)
-   [Resident Advisor](https://ra.co/)
-   [r/electronicmusic](https://www.reddit.com/r/electronicmusic/)
-   [Robot Dance Music](http://www.robotdancemusic.com/)
-   [Run the Trap](https://runthetrap.com/)
-   [Smash the Club](http://www.smashtheclub.com/)
-   [Stoney Roads](https://stoneyroads.com/)
-   [Synthtopia](https://www.synthtopia.com/)
-   [That Drop](https://thatdrop.com/)
-   [The Untz](https://www.theuntz.com/)
-   [this song is sick](https://thissongissick.com/)
-   [this song slaps](https://thissongslaps.com/)
-   [Traxsource](https://www.traxsource.com/)
-   [Tropical Bass](https://www.tropicalbass.com/)
-   [We Rave You](https://weraveyou.com/)
-   [When We Dip](https://whenwedip.com/)
-   [2DopeBoyz](https://2dopeboyz.com/)
-   [24Hip-Hop](https://24hip-hop.com/category/new-music/)
-   [Album Talks](https://albumtalks.com/)
-   [BallerStatus](https://www.ballerstatus.com/music/)
-   [BeatRoute](https://beatroutemedia.com/)
-   [Beats, Rhymes and Lists](https://beats-rhymes-lists.com/)
-   [BigNoiseRadio](https://bignoiseradio.com/)
-   [Radio Stations](https://bignoiseradio.com/radio)
-   [Five Elements](https://bignoiseradio.com/gallery)
-   [BlackoutHipHop](http://www.blackouthiphop.com/)
-   [Central Sauce](https://centralsauce.com/)
-   [Complex](https://www.complex.com/pigeons-and-planes/)
-   [Cornell Hip Hop Collection](https://rmc.library.cornell.edu/hiphop/digital_collections.php)
-   [Datpiff](https://www.datpiff.com/)
-   [DesiHipHop](http://www.desihiphop.com/)
-   [DJ Booth](https://djbooth.net/)
-   [Dummy Mag](https://www.dummymag.com/genre/rap/)
-   [Earmilk](https://earmilk.com/category/hiphop/)
-   [FakeShoreDrive](https://www.fakeshoredrive.com/)
-   [Genius](https://genius.com/)
-   [Grungecake](https://grungecake.com/)
-   [Hip Hop All Around](https://www.hiphopallaround.com/)
-   [HipHopDX](https://hiphopdx.com/news)
-   [HipHopnMore](https://hiphop-n-more.com/)
-   [HipHopOnDeck](http://www.hiphopondeck.com/)
-   [HipHopPush](https://hiphoppush.com/)
-   [HipHopSince87](https://hiphopsince1987.com/)
-   [Hip-HopVibe](https://www.hip-hopvibe.com/)
-   [HipHopWired](https://hiphopwired.com/)
-   [Hot97](https://www.hot97.com/)
-   [HotNewHipHop](https://www.hotnewhiphop.com/)
-   [HypeBeast](https://hypebeast.com/)
-   [HypeMagazine](https://www.thehypemagazine.com/)
-   [IndieHipHop](https://www.indiehiphop.net/)
-   [LA on Lock](https://www.laonlock.com/)
-   [MRCNNLIVE](https://www.mrcnnlive.com/category/video/)
-   [OkayPlayer](https://www.okayplayer.com/)
-   [OnSmash](http://onsmash.com/)
-   [Pilerats](http://pilerats.com/music/rap/)
-   [Rap-Up.com](https://www.rap-up.com/)
-   [RapRadar](https://rapradar.com/)
-   [RapReviews](http://www.rapreviews.com/)
-   [Raptology](https://raptology.com/)
-   [Rapzilla](https://rapzilla.com/)
-   [reddit/r/hiphopheads](https://www.reddit.com/r/hiphopheads/)
-   [RespectMyRegion](https://www.respectmyregion.com/category/music/hip-hop/)
-   [ResultsandNoHype](https://resultsandnohype.com/)
-   [Royal Bey](https://royalbey.com/)
-   [Siccness](https://www.siccness.net/wp/)
-   [SOHH](https://www.sohh.com/)
-   [Stardom101Mag](https://www.stardom101mag.net/)
-   [The BoomBox](https://theboombox.com/category/hip-hop-news/)
-   [The Pit London](https://www.thepitldn.com/music)
-   [TheSource](https://thesource.com/)
-   [Thizzler](https://www.thizzler.com/)
-   [UndergoundHipHopBlog](https://undergroundhiphopblog.com/)
-   [Underground Underdogs](http://undergroundunderdogs.com/)
-   [UPROXX](https://uproxx.com/music/)
-   [Urban Vault](https://urbanvault.co.uk/category/u-s-music-news/)
-   [WordisBond](https://www.thewordisbond.com/)
-   [WorldStarHipHop](https://worldstarhiphop.com/videos/)
-   [XXL Magazine](https://www.xxlmag.com/linkinbio/)
-   [106.3 Radio](https://1063atl.com/)
-   [Better Must Come](http://bettermustcome.blogspot.com/)
-   [Blazin Reggae Vibes](https://www.blazinreggaevibes.com/\\)
-   [Canadian Reggae World](http://www.canadianreggaeworld.com/blog)
-   [Caribbean Dance Radio](http://www.caribbeandanceradio.com/news)
-   [Dancecrasher UK](http://www.dancecrasher.co.uk/)
-   [Dancehall Magazine](https://www.dancehallmag.com/)
-   [Digestivo Reggae](https://www.digestivoreggae.com/)
-   [Dub Vendor UK](https://www.dubvendor.co.uk/)
-   [Jamaicans.com](https://jamaicans.com/jamaica/jamaican-music/)
-   [Jump Up Records](https://www.jumpuprecords.com/)
-   [Reggae Around the World](https://reggaearoundtheworld.wordpress.com/)
-   [Reggae Festival Guide](https://reggaefestivalguide.com/)
-   [Reggae Fraternity UK](https://www.reggaefraternityuk.com/)
-   [ReggaeNation](http://reggaenation.com/)
-   [ReggaeMani](https://reggaemani.wordpress.com/)
-   [Reggae Showtime Radio](https://www.reggaeshowtimeradio.com/)
-   [Reggae Steady Ska](https://reggae-steady-ska.com/)
-   [Reggae Report](https://reggaereport.com/)
-   [Reggae Unite](https://reggaeunite.blogspot.com/)
-   [ReggaeVibe](https://reggaevibe.org/)
-   [Reggaeville](https://www.reggaeville.com/)
-   [Riddims World](https://riddimsworld.com/)
-   [Roots Reggae Hub](https://www.rootsreggaehub.com/)
-   [The Pier](https://thepier.org/)
-   [Toronto Reggae](https://www.torontoreggae.ca/)
-   [Trojan Records](https://trojanrecords.com/playlists/)
-   [United Reggae](https://unitedreggae.com/)
-   [Urban Islandz](https://urbanislandz.com/)
-   [VP Records](https://www.vprecords.com/artists/)
-   [World A Reggae](https://www.worldareggae.com/)
-   [YardHype](https://yardhype.com/)
-   [Americana UK](https://americana-uk.com/)
-   [Blues & Roots Radio](https://www.bluesandrootsradio.com/)
-   [Nashville Gab](https://nashvillegab.com/)
-   [Rocking Magpie](https://rockingmagpie.wordpress.com/)
-   [Taste of Country](https://tasteofcountry.com/)
-   [Twangville](https://twangville.com/)
-   [Battle of the Midwestern Housewives](http://www.midwesternhousewives.com/)
-   [Free Ska Foundation](http://freeskafoundation.blogspot.com/)
-   [The Duff Guide](https://duffguidetoska.blogspot.com/)
-   [Rude Boy Train](http://rudeboytrain.com/)
-   [Skabook](http://skabook.com/blog/)
-   [Beatroute](https://beatroutemedia.com/category/music/)
-   [MuuMuse](https://muumuse.com/)
-   [Folk Radio UK](https://www.folkradio.co.uk/)
-   [Classic Rock](https://www.loudersound.com/classic-rock)
-   [eon music](https://www.eonmusic.co.uk/)
-   [Lambgoat](https://lambgoat.com/)
-   [MOJO](https://www.mojo4music.com/)
-   [Rock And Roll Garage](https://rockandrollgarage.com/)
-   [Talkhouse](https://www.talkhouse.com/)
-   [Ultimate Classic Rock](https://ultimateclassicrock.com/)
-   [Disposable America](http://www.disposable-america.com/)
-   [Exit Stencil](https://www.exitstencil.org/)
-   [Exploding in Sound Records](http://www.explodinginsoundrecords.com/)
-   [Lauren Records](https://www.lauren-records.com/)
-   [Ghostly](https://ghostly.com/)
-   [Longwell Records](https://longwellrecords.com/blogs/news)
-   [Matador Records](https://www.matadorrecords.com/)
-   [Merge Records](https://www.mergerecords.com/)
-   [Polyvinyl Records](https://www.polyvinylrecords.com/)
-   [Post Present Medium](http://www.postpresentmedium.com/releases.html)
-   [Remote Control](https://www.remotecontrolrecords.com.au/)
-   [Slumberland Records](https://www.slumberlandrecords.com/)
-   [Sub Pop Records](https://www.subpop.com/)
-   [Western Vinyl](http://westernvinyl.com/news/)
-   [Best Vinyl Podcasts](https://player.fm/podcasts/vinyl)
-   [Dice](https://dice.fm/blog)
-   [Village Voice](https://www.villagevoice.com/culture/music/)
-   [Louder](https://www.loudersound.com/)
-   [New Releases](https://www.newreleasesnow.com/)
-   [Radio K](https://www.radiok.org/features/weekly-release-spotlight/)
-   [Roots Music Report](https://www.rootsmusicreport.com/)
-   [The Unsigned Guide](https://www.theunsignedguide.com/news)
-   [Top Shelf Music Magazine](https://topshelfmusicmag.com/)
-   [Two Story Melody](https://twostorymelody.com/music-promotion-tips/)
-   [Vinyl Me Please](https://www.vinylmeplease.com/)
-   [Palmer’s Bar](https://www.palmersbar.net/)
-   [Ditto](https://dittomusic.com/en/blog)
-   [Rightcord Music UK](https://www.rightchordmusic.co.uk/)
-   [ISpyTunes](https://www.ispytunes.com/blog-made-for-musicians)
-   [TellingBeatzz](https://tellingbeatzz.com/blog-2/)

# \[2015-03-06 Fri\] UX scrapbook bookmarks
---
id: ux-scrapbook-bookmarks
---



-   [27 fonts\* (give or take) that explain your world](http://www.vox.com/2015/2/8/7475667/27-fonts-give-or-take-that-explain-your-world).
-   [5 Years of Design (good for inspiration)](https://timetravel.pixelfika.com/).
-   [60 FPS on mobile web (plus layouts)](http://engineering.flipboard.com/2015/02/mobile-web/).
-   [Another minilimalistic one-pager](http://rix.si/).
-   [Another minimalistic gallery](https://exposure.co/).
-   [Behance](https://www.behance.net/search?search=ios&utm_source=ios%20dev%20tools&utm_medium=website&utm_campaign=ios%20dev%20tools&at=11lvzs&ct=ios%20dev%20tools).
-   [Compact & Powerful: Great Examples of Floating Action Buttons in Interfaces](https://stories.uplabs.com/compact-powerful-great-examples-of-floating-action-buttons-in-interfaces-7079b9926cb5#.7ch9p8n82).
-   [Flag of Planet Earth](http://www.flagofplanetearth.com/#intro-shift).
-   [Generative Placeholders](http://generative-placeholders.glitch.me/).
-   [Graphic design from other cultures](https://twitter.com/stroughtonsmith/status/1320966432600006656).
-   [Kevin.is (Simple layout)](https://kevin.is/committed-to-github/).
-   [Meng To's I Love Food I](http://mengto.com/img/snoflake-menu.jpg).
-   [Meng To's I Love Food II](http://mengto.com/img/exp-menu.jpg).
-   [Minimalistic blog layout](https://lmjabreu.com/).
-   [Minimalistic blog layout](http://antirez.com/latest/0).
-   [Minimalistic gallery](http://www.piotrpisarzphotography.com/).
-   [Minimalistic one-pager](http://indie.vc).
-   [Neue Haas Unica (reborn)](http://www.wired.com/2015/04/legendary-redesign-helvetica-reborn-30-years).
-   [Neue Haas Unica](http://www.monotype.com/libraries/neue-haas-unica/).
-   [Neumorphism in user interfaces - UX Collective](https://uxdesign.cc/neumorphism-in-user-interfaces-b47cef3bf3a6).
-   [Organizational Debt is Like Technical debt — But Worse](https://medium.com/@sgblank/organizational-debt-is-like-technical-debt-but-worse-3c0c86eae3eb).
-   [Pierre-Yves Ritschard's minialistic blog](http://spootnik.org/).
-   [Raleway Font](http://www.fonts2u.com/raleway-heavy.font).
-   [Svbtle](http://nsainsbury.svbtle.com/java-developers): A post on java developers. Enjoyed its minimalistic layout.
-   [whereis-whoishiring-hiring.me (minimalistic categorization)](http://whereis-whoishiring-hiring.me/).

# \[2015-10-09 Fri\] Travel blog bookmarks
---
id: travel-blog-bookmarks
---



-   [Hidden Travel Treasures](http://hiddentraveltreasures.com/).
-   [One Step 4Ward](http://onestep4ward.com/).
-   [Tigrest Travel Blog](http://tigrest.com).

# \[2015-03-06 Fri\] Travel bookmarks
---
id: travel-bookmarks
---



-   [21 Totally Breathtaking Trails](http://www.buzzfeed.com/ariannarebolini/totally-breathtaking-trails-to-hike-before-you-die#.chOolMjWA).
-   [5 increíbles escapadas a islas que quizás nunca has considerado](http://cnnespanol.cnn.com/2015/09/15/5-increibles-escapadas-a-islas-que-quizas-nunca-has-considerado/).
-   [52 Places to Go in 2016 (Hacker News)](https://news.ycombinator.com/item?id=10863990).
-   [52 Places to Go in 2016](http://www.nytimes.com/interactive/2016/01/07/travel/places-to-visit.html?_r=0).
-   [A beginner's guide to the art of hiking](http://www.lonelyplanet.com/walking-and-trekking/best-of-walking-and-trekking/content/travel-tips-and-articles/a-beginners-guide-to-the-art-of-hiking).
-   [abitofculture.net](http://abitofculture.net/).
-   [Alex in wanderland](http://www.alexinwanderland.com/).
-   [Amazing places around the world](http://imgur.com/a/m9YjK).
-   [Backpacks and Bunkbeds](http://www.backpacksandbunkbeds.co.uk/).
-   [Beyond blighty](http://beyondblighty.com/).
-   [BLOUINARTINFO+TRAVEL](http://www.blouinartinfo.com/travel).
-   [Continental Breakfast travel](http://continentalbreakfasttravel.com/).
-   [Girl tweets world](http://www.girltweetsworld.com/).
-   [How does it feel to travel alone? (Quora)](http://www.quora.com/How-does-it-feel-to-travel-alone).
-   [How to pack light: tips from a master packer](http://www.lonelyplanet.com/round-the-world-travel/best-of-round-the-world-travel/content/travel-tips-and-articles/how-to-pack-light-tips-from-a-master-packer).
-   [How to travel: 21 Contrarian rules](http://fourhourworkweek.com/2013/07/14/how-to-travel-21-contrarian-rules/).
-   [International Railway Journal](http://www.railjournal.com/).
-   [izi.TRAVEL: A tour guide in your pocket](https://izi.travel/en/app?content_lang=fr&content_uuid=ede5d243-ace6-459c-b1cc-f45744c48a5d).
-   [Joe's Trippin' A few tales from the road by a modern day nomad](http://joestrippin.blogspot.co.uk/).
-   [Legal nomads](http://www.legalnomads.com/).
-   [Need another holiday](http://www.needanotherholiday.com/).
-   [Never ending footsteps](http://www.neverendingfootsteps.com/).
-   [New in Travel: the best new openings of 2017 (11 to 20)](https://www.lonelyplanet.com/travel-tips-and-articles/new-in-travel-the-best-new-openings-of-2017-11-to-20).
-   [New in Travel: the best new openings of 2017 (21 to 35)](https://www.lonelyplanet.com/travel-tips-and-articles/new-in-travel-the-best-new-openings-of-2017-21-to-35).
-   [New in Travel: the best new openings of 2017 (one to 10)](https://www.lonelyplanet.com/travel-tips-and-articles/new-in-travel-the-best-new-openings-of-2017-one-to-10).
-   [On The Luce](http://www.ontheluce.com/).
-   [Paradise Lost: Tourists Are Destroying the Places They Love - SPIEGEL ONLINE](http://www.spiegel.de/international/paradise-lost-tourists-are-destroying-the-places-they-love-a-1223502.html).
-   [pichette.org's travel blog](http://www.pichette.org/).
-   [Posters: Create travel gifts/posters and souvenirs (eliot)](https://www.eliotandme.com/poster).
-   [Restless Jo](https://restlessjo.wordpress.com/).
-   [See my travels](http://www.seemytravels.com/).
-   [The Crew Lounge](http://upgrd.com/thecrewlounge).
-   [The Grown-up gap year](https://thegrownupgapyear.wordpress.com/).
-   [The Happy Talent. A Travel blog](http://www.thehappytalent.com/).
-   [The Travel Hack](http://thetravelhack.com/).
-   [The Travelbunny](http://thetravelbunny.com/).
-   [The Volunteer Journal \| Swap Skills For Accommodation](https://helpstay.com/journal/).
-   [The world's best places to see autumn colours](http://www.lonelyplanet.com/travel-photography/best-of-travel-photography/content/travel-tips-and-articles/the-worlds-best-places-to-see-autumn-colours).
-   [Thorn Tree travel forum (Lonely Planet's)](https://www.lonelyplanet.com/thorntree).
-   [Travel with Kat](http://travelwithkat.com/).
-   [Traveldudes](http://www.traveldudes.org/).
-   [Traveling Spoon](http://travelingspoon.com/).
-   [Travelistly TV (high quality travel content)](http://www.travelistly.com/tv).
-   [Tried and tested tips for a trouble free road trip](http://www.lonelyplanet.com/travel-tips-and-articles/tried-and-tested-tips-for-a-trouble-free-road-trip).
-   [Two for the road](http://www.two-fortheroad.com/).
-   [Ultimate travel list: Lonely Planet's top 10 sights in the world](https://www.lonelyplanet.com/travel-tips-and-articles/ultimate-travel-list-lonely-planets-top-10-sights-in-the-world).
-   [Vagabond Baker](http://vagabondbaker.com/).
-   [What are common items that savvy travelers bring with them that less-savvy ones don't? (Quora)](https://www.quora.com/What-are-common-items-that-savvy-travelers-bring-with-them-that-less-savvy-ones-dont).
-   [What are some must-eat dishes in your country? - Quora](https://www.quora.com/What-are-some-must-eat-dishes-in-your-country).
-   [What are your top 10 travel tips? (Quora)](https://www.quora.com/What-are-your-top-10-travel-tips).
-   [World daily secret](http://world.dailysecret.com/world/en).
-   [World food and drink](https://plus.google.com/collection/IW-dY).
-   [X Days in Y](http://www.xdaysiny.com/).
-   [ytravel](http://www.ytravelblog.com/).

# \[2015-03-06 Fri\] Startup bookmarks
---
id: startup-bookmarks
---



-   [16 Startup Metrics (Hacker News)](https://news.ycombinator.com/item?id%3D10101209).
-   [16 Startup Metrics](http://a16z.com/2015/08/21/16-metrics/).
-   [19 Amazing Sites To Get Free Stock Photos](http://sidejobr.com/help/19-amazing-sites-get-free-stock-photos/).
-   [301 Redirects Rules Change: What You Need to Know for SEO](https://moz.com/blog/301-redirection-rules-for-seo).
-   [6 ways to increase user engagement for product-led growth](https://www.appcues.com/blog/increase-user-engagement).
-   [A Dashboard for your Code](https://landscape.io).
-   [A guide to PR for startups (Hacker News)](https://news.ycombinator.com/item?id=9923709).
-   [A guide to PR for startups](http://www.craigkerstiens.com/2015/07/21/An-intro-PR-guide-for-startups/).
-   [A Guide to Pricing Plans \| Hacker News](https://news.ycombinator.com/item?id=22895842).
-   [A two-person startup already uses twenty-eight other tools \| Hacker News](https://news.ycombinator.com/item?id=22449314).
-   [Airtable: cloud DB with a spreadsheet web UI](https://airtable.com/).
-   [All Things Sales: Mini-lessons for startup founders (Hacker News)](https://news.ycombinator.com/item?id=17899510).
-   [Amazingly Simple Graphic Design Software – Canva](https://www.canva.com/).
-   [An email I will never open (Chris Sacca)](https://chrissacca.com/2018/12/an-email-i-will-never-open).
-   [An iOS REST Client that is based on MVVM using ReactiveCocoa](https://github.com/abaraka/RESTClient).
-   [An iOS Weather app case study](http://www.raywenderlich.com/55384/ios-7-best-practices-part-1).
-   [Answer these questions about potential digital platform](https://hbr.org/2015/04/how-to-launch-your-digital-platform).
-   [aphyr/distsys-class: Class materials for a distributed systems lecture](https://github.com/aphyr/distsys-class).
-   [API pagination design \| Hacker News](https://news.ycombinator.com/item?id=25547716).
-   [AppFigures:](https://appfigures.com/) App tracking platform.
-   [Apple Edge Cache (CDNs) \| Hacker News](https://news.ycombinator.com/item?id=22328822).
-   [Application-Level Logging Best Practices (Hacker News)](https://news.ycombinator.com/item?id=19497788).
-   [AppScale, The Open Source Implementation of Google App Engine](https://github.com/AppScale/appscale).
-   [Arc (crowdfunded CDN)](https://arc.io/pricing).
-   [Artisanal Web Hosting](https://arenzana.org/2019/06/artisanal-web-hosting/).
-   [Ask HN: Best business advice for software developers (Hacker News)](https://news.ycombinator.com/item?id=14146850).
-   [Ask HN: How do you handle DDoS attacks? (Hacker News)](https://news.ycombinator.com/item?id=12376596).
-   [Ask HN: How does your company manage its encryption keys? \| Hacker News](https://news.ycombinator.com/item?id=23390966).
-   [Ask HN: How to effectively get feedback from users? \| Hacker News](https://news.ycombinator.com/item?id=24965115).
-   [Ask HN: Simple alternative to Google Analytics](https://news.ycombinator.com/item?id=9561127).
-   [Ask HN: What tools do you use to build HTML emails?](https://news.ycombinator.com/item?id=9667247)
-   [Ask HN: What's your advice for someone who's raising capital for the first time? (Hacker News)](https://news.ycombinator.com/item?id=18236188).
-   [Authentication Cheet Sheet](https://www.owasp.org/index.php/Authentication_Cheat_Sheet).
-   [AXDRAFT (Free legal documents for startups)](https://business.axdraft.com/en/business).
-   [BaaS comparison](https://docs.google.com/spreadsheet/ccc?key%3D0Al7M8fgKPXoidENFa0M5VnJpb3pMeHQtS0RDcHFvY1E&usp%3Dsharing#gid%3D0).
-   [BaaS ecosystem map](http://www.kinvey.com/images/kinvey_backend-as-a-service_mobileecosystem_2100px.png).
-   [Barnacles](https://barnacl.es/).
-   [Bayesian ranking of items with up and downvotes or 5 star ratings (Hacker News)](https://news.ycombinator.com/item?id=10481507).
-   [Bayesian ranking of items with up and downvotes or 5 star ratings](http://julesjacobs.github.io/2015/08/17/bayesian-scoring-of-ratings.html).
-   [BBC Sound Effects Archive Resource • Research & Education Space](http://bbcsfx.acropolis.org.uk/).
-   [bcrypt: password hashing function alternative to md5 and sha1 (Wikipedia)](https://en.wikipedia.org/wiki/Bcrypt).
-   [Building a small container for a golang service for kubernetes](https://hakaselogs.me/2018-12-01/building-small-containers-for-kubernetes).
-   [Building a Well-Rounded Website: Essentials (wonderful recommendations for your site)](https://hybridcattt.com/blog/website-essentials/).
-   [Building Your Color Palette \| Hacker News](https://news.ycombinator.com/item?id=25180180).
-   [Carrd - Simple, free, fully responsive one-page sites for pretty much anything](https://carrd.co/).
-   [Check for word safety (wordsafety.com)](http://wordsafety.com/).
-   [Choosing Your First Marketing Hire (Hacker News)](https://news.ycombinator.com/item?id=17920287).
-   [Clink78 hostel](http://www.clinkhostels.com/london/clink78/).
-   [Common Startup Timing Mistakes and How to Avoid Them (Hacker News)](https://news.ycombinator.com/item?id=12396520).
-   [Compare Prices of All Top-Level Domains \| TLD List](https://tld-list.com/).
-   [Comparing five monitoring options for docker](http://rancher.com/comparing-monitoring-options-for-docker-deployments/).
-   [Compose.io](https://www.compose.io/).
-   [Contentful: Like a CMS — except for the bad parts](https://www.contentful.com/).
-   [Create OpenStreetMaps with uMap](http://umap.openstreetmap.fr/en/).
-   [curl online command line builder](https://curlbuilder.com/).
-   [Daniel Vassallo - (quit Amazon story and advice)](https://danielvassallo.com/).
-   [Dashborads using ASCII and JS](https://github.com/yaronn/blessed-contrib).
-   [Detect iOS Device location in just one line](https://github.com/sag333ar/SRKLocationManager).
-   [Disposable chats in Go](https://niltalk.com/) (more links [here](https://news.ycombinator.com/item?id%3D9372918)).
-   [Do Things that Don't Scale](http://paulgraham.com/ds.html).
-   [Does anyone have recommendations for accounting software? : UKPersonalFinance](https://www.reddit.com/r/UKPersonalFinance/comments/9xyiv7/does_anyone_have_recommendations_for_accounting/).
-   [Does it scale? Who cares (2011) (Hacker News)](https://news.ycombinator.com/item?id=14070189).
-   [Domains for the Rest of Us (domain name generator)](https://www.domainsfortherestofus.com/).
-   [Done is better than perfect](https://speakerdeck.com/appltn/done-is-better-than-perfect).
-   [Don’t Take VC Funding - It Will Destroy Your Company \| Oliver Eidel](https://www.eidel.io/2023/07/09/vc-funding/).
-   [dynamic website/service with Redis leader and follower replicas](https://twitter.com/rsms/status/1324142698161303552).
-   [Earnest Capital is live (Hacker News)](https://news.ycombinator.com/item?id=19154082).
-   [Edge Cloud Platform (Fastly)](https://www.fastly.com/).
-   [Emergency Website Kit \| Max Böck - Frontend Web Developer](https://mxb.dev/blog/emergency-website-kit/).
-   [Encore • APIs made simple](https://encore.dev).
-   [Ethical apps code of conduct - HackMD](https://hackmd.io/EmPIHGhTRh6pDSJ1VEgkkA).
-   [Everything you need to know about OAuth 2.0 \| Hacker News](https://news.ycombinator.com/item?id=23851870).
-   [Fathom Analytics - Simple, Privacy-focused Web Analytics](https://usefathom.com/).
-   [Find words that match your pattern.](https://www.litscape.com/word_tools/pattern_match.php).
-   [Find your competition](https://rivalseek.com/).
-   [Fiverr (logos, graphic design, etc)](https://www.fiverr.com/).
-   [Flag Theory: Freedom, Privacy and Wealth](http://flagtheory.com/).
-   [Fonts, Graphics, Themes and More \~ Creative Market](https://creativemarket.com/).
-   [Fonts, Logos & Icons from GraphicRiver](https://graphicriver.net/).
-   [For Static Sites, There’s No Excuse Not to Use a CDN (Hacker News)](https://news.ycombinator.com/item?id=17266006).
-   [Free HTML landing page templates for startups - Cruip](https://cruip.com/).
-   [Free tools for startups (Shyahi blog)](http://blog.shyahi.com/post/62901878131/putting-everything-together-free-tools-for).
-   [Free vectors](http://www.freevectors.net/).
-   [Gain valuable, actionable feedback on your startup ideas](http://www.backa.co/).
-   [Glyphish icon collection](http://www.glyphish.com/).
-   [Go hosting (Reddit comments)](http://www.reddit.com/r/golang/comments/20e2to/cheap_go_hosting_with_postgresql/).
-   [GoatCounter web analytics](https://www.goatcounter.com/).
-   [gofundme](http://www.gofundme.com/).
-   [Gophish - Open Source Phishing Framework](https://getgophish.com/).
-   [GraphQL, a query language and execution engine tied to any backend service](https://github.com/facebook/graphql).
-   [grpcui: An interactive web UI for gRPC](https://github.com/fullstorydev/grpcui).
-   [grpcurl: Like cURL, but for gRPC](https://github.com/fullstorydev/grpcurl).
-   [Gumroad. Helps creators sell, generate digital licenses, grow audiences, etc](https://gumroad.com).
-   [HN: Things to Know When Making a Web Application in 2015](https://news.ycombinator.com/item?id=9865338).
-   [How I got to the app store top with a simple currency app](http://kukuruku.co/hub/ios/how-i-got-to-the-app-store-top-with-a-simple-currency-app).
-   [How I Made \$8,000 per Month Podcasting, and Why You Probably Don’t Want To](https://blog.usejournal.com/how-i-made-8-000-per-month-podcasting-and-why-you-probably-dont-want-to-855966a557aa?gi=58d80835cfc8).
-   [How much does it cost to build an app? (Sentia Blog)](http://www.sentia.com.au/blog/how-much-does-it-cost-to-build-an-app).
-   [How Startup Options (and Ownership) Works](https://a16z.com/2016/08/24/options-ownership/).
-   [How to Acquire Your First 100 Customers (Hacker News)](https://news.ycombinator.com/item?id=18490437).
-   [How to Be Prepared for Technical Due Diligence: What to Anticipate and How to Excel](http://bulgerpartners.com/how-to-be-prepared-for-technical-due-diligence-what-to-anticipate-and-how-to-excel/).
-   [How to Build a Great Series A Pitch and Deck \| Hacker News](https://news.ycombinator.com/item?id=24780152).
-   [How to DIY a Product Launch Video with No Experience, and for Free](https://clearfounder.com/how-to-diy-a-product-launch-video-with-no-experience-and-for-free/).
-   [How to get your money’s worth from your startup lawyer (Hacker News)](https://news.ycombinator.com/item?id=18880043).
-   [How to implement a multi-CDN strategy: everything you need to know](https://blog.streamroot.io/how-to-implement-a-multi-cdn-strategy-everything-you-need-to-know/).
-   [How to Kickstart and Scale a Marketplace \| Hacker News](https://news.ycombinator.com/item?id=21591002).
-   [How to price anything: The psychology of why we’ll pay what we pay](https://crew.co/backstage/blog/the-psychology-of-pricing).
-   [How to Send Email Like a Startup](https://www.sendwithus.com/resources/guide).
-   [How to start a startup lectures](http://startupclass.samaltman.com/).
-   [Icon archive](http://www.iconarchive.com/).
-   [Icon finder](https://www.iconfinder.com).
-   [ImageTragick (ImageMagick vulnerabilities and mitigations)](https://imagetragick.com/).
-   [Irreal: Bad Password Policies (salt + hash with bcrypt)](https://irreal.org/blog/).
-   [Kaffeine pings your Heroku app every 30 minutes so it will never go to sleep](https://kaffeine.herokuapp.com/).
-   [Keycloak: Open-source identity and access management \| Hacker News](https://news.ycombinator.com/item?id=22871180).
-   [Launch HN: Axdraft (YC W19) - Legal documents for startups in minutes (Hacker News)](https://news.ycombinator.com/item?id=19372623).
-   [Launchaco - Name a business](http://launchaco.com/build/).
-   [Layer, messaging platform](https://layer.com).
-   [Legal Letters—At a fraction of the cost](https://www.legalletters.co/).
-   [Lessons I learned from Co-Founding a startup](http://blog.sueraisty.com/lessons-learned-from-co-founding-a-tech-startup/).
-   [Lightweight Alternatives to Google Analytics \| Hacker News](https://news.ycombinator.com/item?id=23560823).
-   [List of Minimal frameworks](https://github.com/neiesc/ListOfMinimalistFrameworks).
-   [Logo Maker & Logo Creator - Free Logo Generator Online](https://hatchful.shopify.com/).
-   [Logo Maker - Create a Free Logo in Minutes - Namecheap](https://www.namecheap.com/logo-maker/).
-   [Logodust: Free Logo Designs For Your Startup](http://logodust.com/).
-   [Logojoy: AI-powered logo creator (Hacker News)](https://news.ycombinator.com/item?id=13065015).
-   [Logoshi: Online Logo Maker](https://www.logoshi.com/).
-   [Looker (Data analysis)](http://www.looker.com).
-   [Lorem Picsum: Lorem Ipsum… but for photos](https://picsum.photos/).
-   [Luis Abreu, iOS Design/UX Specialist](https://lmjabreu.com/).
-   [Making Instagram.com faster: Part 3 – cache first (Hacker News)](https://news.ycombinator.com/item?id=21225223).
-   [Mapbox. Maps for iOS, Android and Web](https://www.mapbox.com/).
-   [MAPS.ME (open sourced)](https://github.com/mapsme/omim/blob/master/README.md).
-   [Messaging UI for iOS](https://github.com/jessesquires/JSQMessagesViewController).
-   [Metadata: My Distributed Systems Seminar's reading list for Spring 2020](https://muratbuffalo.blogspot.com/2019/12/my-distributed-systems-seminars-reading.html).
-   [Migrating Away from Google Analytics \| Hacker News](https://news.ycombinator.com/item?id=23803046).
-   [Names to reserve for your own service](https://ldpreload.com/blog/names-to-reserve).
-   [Netflix's Mantis: a platform to build an ecosystem of realtime stream processing applications](https://netflix.github.io/mantis/).
-   [Netlify: All-in-one platform for automating modern web projects.](https://www.netlify.com/).
-   [Netlify: Build, deploy, and manage modern web projects](https://www.netlify.com).
-   [NGINX Config generator \| DigitalOcean](https://www.digitalocean.com/community/tools/nginx).
-   [Nighthawk (Debug iOS apps remotely from your browser)](http://mobilenighthawk.com/).
-   [nimforum: Lightweight alternative to Discourse written in Nim](https://github.com/nim-lang/nimforum).
-   [No more tax surprises - Track](https://www.track.tax/).
-   [Office Snapshots](http://officesnapshots.com/).
-   [Onboarding engineers](http://blog.fogcreek.com/how-to-onboard-software-engineers-interview-with-kate-heddleston/).
-   [OneSignal](https://onesignal.com/).
-   [Online investing, equity crowdfunding, business finance : Crowdcube](https://www.crowdcube.com/).
-   [Online Payroll Services, HR, and Benefits \| Gusto](https://gusto.com/).
-   [Open Hunt: an open and community-run alternative to Product Hunt.](https://www.openhunt.co/).
-   [Open Startups: companies embracing transparency and openness](https://baremetrics.com/open-startups).
-   [Options to serve static content](http://serverfault.com/questions/219620/which-is-the-best-webserver-for-serving-static-content-and-load-balancing).
-   [Organizational Debt is Like Technical debt — But Worse](https://medium.com/@sgblank/organizational-debt-is-like-technical-debt-but-worse-3c0c86eae3eb).
-   [Origami for UI patterns and interactions](http://facebook.github.io/origami/examples/).
-   [PaintCode (drawings into ObjC code)](http://www.paintcodeapp.com) - [coupon](http://bit.ly/PaintCodeRocks).
-   [Pair programming over code-reviews](http://eatcodeplay.com/why-we-killed-off-code-reviews/).
-   [parse.com](https://www.parse.com).
-   [paymentfont.io (Payment icons)](http://paymentfont.io/).
-   [People Who Like This Also Like](http://www.benfrederickson.com/distance-metrics/?hn=1)…
-   [People Who Like This Also Like… (Hacker News)](https://news.ycombinator.com/item?id%3D9453477).
-   [Permutive (ad-server for sponsored content)](http://permutive.com/).
-   [Pioneer - The network for ambitious outsiders](https://pioneer.app/).
-   [porkbun.com \| An oddly satisfying experience (domain registry)](https://porkbun.com/).
-   [Pragmatic app pricing (Hacker News)](https://news.ycombinator.com/item?id=10381584).
-   [Pragmatic app pricing ](http://www.marco.org/2015/10/13/pragmatic-pricing).
-   [Product and User Behavioral Analytics for Mobile, Web, & More \| Mixpanel](https://mixpanel.com/).
-   [Product Hunt: a curation of the best new products, every day](https://www.producthunt.com/).
-   [Psychological differences in price](http://www.theatlantic.com/business/archive/2015/01/the-psychological-difference-between-1200-and-1167/384993/?single_page=true).
-   [Questions to ask when joining a startup to help you understand the potential value of your equity](https://twitter.com/bmweis/status/1162738837539426304).
-   [Quora: What are the best productivity tools for entrepreneurs](http://www.quora.com/What-are-the-best-productivity-tools-for-entrepreneurs)?
-   [Real Time Web Analytics & Marketing Attribution Tools - Gauges](https://get.gaug.es/).
-   [RemoteMac.io – Dedicated Mac mini (Hacker News)](https://news.ycombinator.com/item?id=18402411).
-   [ResponseVault - Spreadsheet. Grid Form Builder.](https://responsevault.com/).
-   [RethinkDB FAQ](http://rethinkdb.com/faq/).
-   [RethinkDB HN comments](https://news.ycombinator.com/item?id=9185338).
-   [Retool: Build internal tools fast](https://retool.com).
-   [Roll Your Own Analytics (Hacker News)](https://news.ycombinator.com/item?id=19388489).
-   [Roll Your Own Analytics](https://www.pcmaffey.com/roll-your-own-analytics/).
-   [Securing Intellectual Property Rights in a Software Development Contract](https://spin.atomicobject.com/2019/06/12/ip-software-dev-contract/).
-   [Send email like a startup](https://www.sendwithus.com/resources/guide/).
-   [Share as image](https://shareasimage.com/).
-   Show HN: How I made simple Geolocation service which handles 6m+ req/mo for \$5.
-   [Show HN: Profit Hunt - Get inspired by profitable online projects \| Hacker News](https://news.ycombinator.com/item?id=22441289).
-   [Simplescraper — Scrape Websites and turn them into APIs](https://simplescraper.io/).
-   [So you want your app/website to work in China](https://news.ycombinator.com/item?id=19457709).
-   [space-cloud: Open source, high performance web service which provides instant Realtime APIs on the database of your choice.](https://github.com/spaceuptech/space-cloud).
-   [Splunk: SIEM, AIOps, Application Management, Log Management, Machine Learning, and Compliance](https://www.splunk.com/).
-   [Squarespace Logo](http://logo.squarespace.com/).
-   [Startup advice, briefly](http://blog.samaltman.com/startup-advice-briefly).
-   [Startup idea checklist \| defmacro](https://www.defmacro.org/2019/03/26/startup-checklist.html).
-   [Startup Incorporation Checklist](https://github.com/leonar15/startup-checklist).
-   [Striking off company - am I missing anything? : UKPersonalFinance](https://www.reddit.com/r/UKPersonalFinance/comments/9nibvw/striking_off_company_am_i_missing_anything).
-   [Structuring JSON data in your Firebase database](https://www.firebase.com/docs/android/guide/structuring-data.html).
-   [Submit.co: Press coverage for your startup](http://t.co/5WUoz5BwtT).
-   [submit.co: Where to get press coverage for your startup](http://submit.co/).
-   [Swagger](http://swagger.io/): Represent REST API.
-   [Tailwind UI](https://tailwindui.com/).
-   [TaskJuggler - A Free and Open Source Project Management Software - About TaskJuggler](http://taskjuggler.org/).
-   [Technically: what your developers are using (stacks, tools, and beyond)](https://technically.dev/posts/what-your-developers-are-using.html).
-   [Telephony, SMS, and MMS APIs (Hacker News)](https://news.ycombinator.com/item?id=11964763).
-   [TextBelt:](http://textbelt.com/) A free, open source API for outgoing texts..
-   [The Correct Way to Validate Email Addresses (Hacker News)](https://news.ycombinator.com/item?id=12448844).
-   [The first rule of pricing is: you do not talk about pricing](https://medium.com/fluxx-studio-notes/the-first-rule-of-pricing-is-you-do-not-talk-about-pricing-1875caa39b89#.exvbm4vfa).
-   [The good parts of AWS: a visual summary \| Hacker News](https://news.ycombinator.com/item?id=22608106).
-   [The Psychology of Pricing: A Gigantic List of Strategies (HN comments)](https://news.ycombinator.com/item?id=9501892).
-   [The Psychology of Pricing: A Gigantic List of Strategies](http://www.nickkolenda.com/psychological-pricing-strategies).
-   [TheHungryJPEG.com (Premium Graphic Design Resources)](https://thehungryjpeg.com/aff/Madiha/).
-   [Things to Know When Making a Web Application in 2015](http://blog.venanti.us/web-app-2015/).
-   [TLDR Stock Options](https://news.ycombinator.com/item).
-   [Tools for Developers (DEV Community)](https://dev.to/sahilrajput/tools-for-developers-gkp).
-   [ToroDB](https://github.com/torodb/torodb).
-   [Traffic/en – Hetzner DokuWiki (CDN)](https://wiki.hetzner.de/index.php/Traffic/en).
-   [Twitter: Cheapest and reliable way of serving data over http](https://twitter.com/migueldeicaza/status/1314004192844021765).
-   [Understanding OAuth2 and OpenID Connect \| Hacker News](https://news.ycombinator.com/item?id=24391612).
-   [Unsplash: Beautiful Free Images & Pictures](https://unsplash.com/).
-   [Using BitTorrent with Amazon S3](http://docs.aws.amazon.com/AmazonS3/latest/dev/S3Torrent.html).
-   [Valve employee handbook](http://www.valvesoftware.com/company/Valve_Handbook_LowRes.pdf).
-   [Wave Financial: Financial Software for Small Businesses](https://www.waveapps.com/).
-   [We ditched Google Analytics \| Hacker News](https://news.ycombinator.com/item?id=23378524).
-   [We use RethinkDB at Workshape.io](http://blog.workshape.io/we-use-rethinkdb-at-workshapeio/).
-   [Web Analytics in Real Time (Clicky)](https://clicky.com/).
-   [Web Analytics Made Easy - Statcounter](http://statcounter.com).
-   [Web Scraping, Data Extraction and Automation · Apify](https://apify.com/).
-   [What are some of the things VCs listen for when hearing pitches that instill confidence in them about the startup founders pitching?](https://www.quora.com/What-are-some-of-the-things-VCs-listen-for-when-hearing-pitches-that-instill-confidence-in-them-about-the-startup-founders-pitching/answer/Patrick-Mathieson).
-   [What does the GDPR actually mean for startups? (Hacker News)](https://news.ycombinator.com/item?id=17875285).
-   [What hosting do you use? - DEV Community](https://dev.to/allison_seboldt/what-hosting-do-you-use--5bmh).
-   [What I'd tell myself about startups if I could go back 5 years](http://www.talkingquickly.co.uk/2015/04/what-id-tell-myself-about-startups/).
-   [What is the best "payment processor" for a SME e-commerce company in the UK?](https://www.reddit.com/r/UKPersonalFinance/comments/e1f0tn/what_is_the_best_payment_processor_for_a_sme/).
-   [What is your favorite domain registrar? (Twitter)](https://twitter.com/romanzolotarev/status/1054342116917329921?s=12).
-   [What's a good (mobile) app subscription price? - zerokspot.com](https://zerokspot.com/weblog/2020/02/29/mobile-app-subscription-pricing/).
-   [What's the best financial package I could offer our employees?](https://www.reddit.com/r/UKPersonalFinance/comments/ehd14k/whats_the_best_financial_package_i_could_offer/).
-   [What’s the Second Job of a Startup CEO? (Hacker News)](https://news.ycombinator.com/item?id=13063842).
-   [Writing copy for landing pages (Hacker News)](https://news.ycombinator.com/item?id=18713844).
-   [YC Sales agreement](http://www.ycombinator.com/documents/#sales).
-   [You Need More than REST for API Success](https://spin.atomicobject.com/2019/11/14/more-than-rest-for-api-success/).

# \[2015-03-06 Fri\] Romania travel bookmarks
---
id: romania-travel-bookmarks
---



-   [Abandoned Romania](https://www.abandonedamerica.us/abandoned-romania).
-   [Bran Castle](http://bran-castle.com/).

# \[2015-03-06 Fri\] Productivity tips backlog
---
id: productivity-tips-backlog
---



[TODO]{.todo .TODO} [AnyBar: OS X menubar status indicator (color dot)](https://github.com/tonsky/AnyBar).

[TODO]{.todo .TODO} [mercury (fuzzy tab search)](https://github.com/benvan/mercury).

# \[2015-03-06 Fri\] Productivity bookmarks
---
id: productivity-bookmarks
---



-   [10 fast fingers](http://10fastfingers.com/) (improve typing skills).
-   [Day One Journal](http://dayoneapp.com/)
-   [Dotfiles for insane productivity in bash, git, and vim](http://yanpritzker.com/2011/11/17/dotfiles-for-ultimate-productivity-in-bash-and-vim/ ).
-   [EricaJoy on Twitter: "so folks, what are your #1 tools for remote work?](https://twitter.com/EricaJoy/status/1235635291378999296).
-   [How to Get Things Done When You Don't Feel Like It (Hacker News)](https://news.ycombinator.com/item?id=18179972).
-   [How to return to the flow faster (Hacker News)](https://news.ycombinator.com/item?id=20780939).
-   [How to return to the flow faster \| Code Jamming](https://codejamming.org/2019/how-to-return-to-flow).
-   [jrnl](http://maebert.github.io/jrnl/): Likely what I've been looking for journaling from command line.
-   [Noisli - Improve Focus and Boost Productivity with Background Noise](https://www.noisli.com/).
-   [Pocket](https://app.getpocket.com/).
-   [Reflecting On One Year of Remote Work - DEV Community](https://dev.to/karaluton/reflecting-on-one-year-of-remote-work-1nkp).
-   [The Ultimate Guide to Personal Productivity Methods](https://blog.todoist.com/2015/11/30/ultimate-guide-personal-productivity-methods/).
-   [Tricks to start working despite not feeling like it \| Hacker News](https://news.ycombinator.com/item?id=22105229).
-   [Yan's dot files](https://github.com/skwp/dotfiles): For peeking.
-   [Yan's productivity tips](http://yanpritzker.com/2006/10/03/five-ways-to-get-insane-productivity-boosts/): Also to try.
-   [Zotero](https://www.zotero.org).

# \[2015-03-06 Fri\] Privacy bookmarks
---
id: privacy-bookmarks
---



-   [#1 Password Manager, Vault, & Digital Wallet App (LastPass)](https://www.lastpass.com/).
-   [A Modest Privacy Protection Proposal](https://blog.lopp.net/modest-privacy-protection-proposal/).
-   [Against an Increasingly User-Hostile Web - Neustadt.fr](https://www.neustadt.fr/essays/against-a-user-hostile-web/).
-   [Alternatives to Google Products (Restore Privacy)](https://restoreprivacy.com/google-alternatives/).
-   [Am I unique?](https://amiunique.org/fp).
-   [An Intensive Introduction to Cryptography (Hacker News)](https://news.ycombinator.com/item?id=17896692).
-   [asc-key-to-qr-code-gif: Convert ASCII-armored PGP keys to animated QR code](https://github.com/yishilin14/asc-key-to-qr-code-gif).
-   [Ask HN: A way to adblock “we're using cookies” popups? \| Hacker News](https://news.ycombinator.com/item?id=23521399).
-   [Awesome selfhosted (locally hosting and managing applications instead of renting from SaaS providers)](https://github.com/Kickball/awesome-selfhosted).
-   [bellingcat - Guide To Using Reverse Image Search For Investigations - bellingcat](https://www.bellingcat.com/resources/how-tos/2019/12/26/guide-to-using-reverse-image-search-for-investigations/).
-   [Brute Force Incognito Browsing « null program](https://nullprogram.com/blog/2018/09/06/).
-   [Change your online habits - Guides \| Mullvad VPN](https://www.mullvad.net/en/guides/first-steps-towards-online-privacy/).
-   [Countly \| Product Analytics for Mobile, Web, Desktop and IoT](https://count.ly/).
-   [Cryptee (Private, Secure, Encrypted Documents & Photos)](https://crypt.ee).
-   [CryptPad: Collaboration suite, encrypted and open-source](https://cryptpad.fr/).
-   [dbp.io: A Hacker's Replacement for GMail](https://dbp.io/essays/2013-06-29-hackers-replacement-for-gmail.html).
-   [De-Googling My Life](https://nrempel.com/de-googling-my-life/).
-   [Deep links to opt-out of data sharing by 60+ companies – Simple Opt Out](https://simpleoptout.com/).
-   [degoogle \| A huge list of alternatives to Google products.](https://degoogle.jmoore.dev/).
-   [Digital Era](http://digital-era.net/).
-   [DNS leak test](https://www.dnsleaktest.com).
-   [Does my site need HTTPS?](https://doesmysiteneedhttps.com/).
-   [DuckDuckGo Traffic (Hacker News)](https://news.ycombinator.com/item?id=18100243).
-   [Etherpad (Open Source online editor)](https://etherpad.org/).
-   [Ethical Alternatives & Resources - ethical.net](https://ethical.net/resources/).
-   [Fathom Analytics - Simple, Privacy-focused Web Analytics](https://usefathom.com/).
-   [Getting Started with WireGuard » Miguel Mota \| Software Developer](https://miguelmota.com/blog/getting-started-with-wireguard/).
-   [git-crypt: Transparent file encryption in git](https://github.com/AGWA/git-crypt).
-   [GitHub - tycrek/degoogle: Repo for the r/privacy "degoogle" megathread](https://github.com/tycrek/degoogle).
-   [Give Firefox A Chance For A Faster, Calmer And Distraction-Free Internet](https://markosaric.com/firefox/).
-   [How to stay as private as possible on Apple&#039;s iPad and iPhone \| Computerworld](https://www.computerworld.com/article/3339618/apple-ios/how-to-stay-as-private-as-possible-on-apples-ipad-and-iphone.html).
-   [Ian M discusses what makes a good password (NCSC)](https://www.ncsc.gov.uk/blog-post/three-random-words-or-thinkrandom-0).
-   [iOS - Platforms - PRISM Break (more privacy tools)](https://prism-break.org/en/categories/ios/).
-   [K-anonymity (Hacker News)](https://news.ycombinator.com/item?id=17737148).
-   [Kickball/awesome-selfhosted: Free Software network services and web applications which can be hosted locally.](https://github.com/Kickball/awesome-selfhosted).
-   [Kill the Newsletter!](https://www.kill-the-newsletter.com/).
-   [Kolab (calendar)](https://kolabnow.com/feature/calendar).
-   [mailbox.org (email + calendar host)](https://mailbox.org/en/).
-   [Migrating from Google Analytics (Hacker News)](https://news.ycombinator.com/item?id=18810035).
-   [mssun/passforios Wiki](https://github.com/mssun/passforios/wiki#importing-ascii-armor-encrypted-key).
-   [Mullvad VPN](https://www.mullvad.net/en/).
-   [New privacy tools](http://adi.is/s/cpunk20/#21).
-   [OpenPGP Best Practices - riseup.net](https://riseup.net/en/security/message-security/openpgp/best-practices).
-   [Our Favorite Ad Blockers and Browser Extensions for Privacy](https://www.nytimes.com/wirecutter/reviews/our-favorite-ad-blockers-and-browser-extensions-to-protect-privacy/).
-   [Panopticlick (Is your browser safe against tracking?)](https://panopticlick.eff.org).
-   [Pi-hole troubleshooting: An overview of my recent installation \| Matthew Haffner](https://mhaffner.github.io/post/pi-hole-troubleshooting/).
-   [Pi-Hole – A black hole for Internet advertisements (Hacker News)](https://news.ycombinator.com/item?id=19258717).
-   [Plausible · Simple, open-source web analytics](https://plausible.io/).
-   [Privacy Tools - Encryption Against Global Mass Surveillance](https://www.privacytools.io/).
-   [Privacy – A curated list of services and alternatives that respect privacy](https://news.ycombinator.com/item?id=27294703).
-   [Publishing A Public Key via Web Key Directory (WKD) - OpenPGP Keyserver](https://keyserver.mattrude.com/guides/web-key-directory/).
-   [Purelymail – cheap, no-nonsense email \| Hacker News](https://news.ycombinator.com/item?id=27707857).
-   [Qubes OS: A reasonably secure operating system](https://www.qubes-os.org/).
-   [Runaroo (metasearch engine)](https://www.runnaroo.com/).
-   [Runnaroo \| A Better Private Search Engine](https://www.runnaroo.com/).
-   [Searx search engine instances](https://searx.space/).
-   [Setup ELK for NGINX logs with Elasticsearch, Logstash, and Kibana (analytics alternative)](https://abot.app/blog/elk-nginx-logs-setup).
-   [Simple Analytics - Simple, clean, and privacy-friendly analytics](https://simpleanalytics.io).
-   [smallstep - Everything you should know about certificates and PKI but are too afraid to ask](https://smallstep.com/blog/everything-pki.html).
-   [Surveillance Self-Defense \| Tips, Tools and How-tos for Safer Online Communications](https://ssd.eff.org/).
-   [Temporary Containers – Get this Extension for Firefox (en-US)](https://addons.mozilla.org/en-US/firefox/addon/temporary-containers/).
-   [That One Privacy Site](https://thatoneprivacysite.net/).
-   [The easiest way to remember passwords \| RememBear](https://www.remembear.com).
-   [TinEye Reverse Image Search](https://tineye.com/).
-   [Tools for people and groups working on liberatory social change (riseup.net)](https://riseup.net/en).
-   [Tor use - best practices](http://digital-era.net/tor-use-best-practices/).
-   [Trying to Secure My Digital Life – Adam Hawkins – Medium](https://medium.com/@ahawkins/trying-to-secure-my-digital-life-b2e5a2876c12).
-   [twitter: YOUR RIGHTS!!! (this is a UK version, but i’m sure some things may apply!! )](https://twitter.com/namseoknation/status/1268306421197746179).
-   [uBlock Origin review \| Hacker News](https://news.ycombinator.com/item?id=28410807).
-   [Virtual Private Networks (Reddit)](https://www.reddit.com/r/VPN/).
-   [Webbkoll: How privacy-friendly is your site?](https://webbkoll.dataskydd.net/en/).
-   [Why Privacy Matters \| Privacy is important. Here are some simple reasons why.](https://whyprivacymatters.org/).

# \[2015-03-06 Fri\] Lifestyle/wellbeing/health bookmarks
---
id: lifestyle-bookmarks
---



-   "Do not spoil what you have by desiring what you have not; what you now have was once among the things you only hoped for." - Epicurus
-   [23 Weird Plants For Your Bedroom That Will Help You Sleep Like A Baby](https://www.thesleepjudge.com/23-weird-plants-for-your-bedroom-that-will-help-you-sleep-like-a-baby/).
-   [A simple guide to meditation](http://www.theflowstatecollective.com/flow-habits/a-simple-guide-to-meditation).
-   [Advice I needed when I was young](https://twitter.com/farbodsaraf/status/1067980298040807424?s=12).
-   [Anxiety Culture](http://www.anxietyculture.com/).
-   [Anxiety No More (Support and Help for a natural anxiety cure)](https://anxietynomore.co.uk/).
-   [Ask HN: How did you decide what problems to solve in your lifetime? \| Hacker News](https://news.ycombinator.com/item?id=18837334).
-   [Better etiquette: Topical Etiquette Tips, Helpful Household Hints, International Travel Tips, Dine Like a Diplomat…](https://betteretiquette.blogspot.com/)
-   [Blue Zone: Where some claim people live much longer than average](https://en.wikipedia.org/wiki/Blue_Zone).
-   [Brain Pickings](https://www.brainpickings.org/).
-   [Caffeine-induced anxiety disorder - Wikipedia](https://en.wikipedia.org/wiki/Caffeine-induced_anxiety_disorder).
-   [Calisthenics - Wikipedia](https://en.wikipedia.org/wiki/Calisthenics#Common_exercises).
-   [Cameron Desautel on lifehacking](http://camdez.com/blog/2010/01/15/lifehacking-expanded/).
-   [Cameron Desautel on productivity](http://camdez.com/blog/categories/productivity/).
-   [Canadian Permanent Residency](https://harryrschwartz.com/2019/11/16/canadian-permanent-residency).
-   [Curated list of falsehoods programmers believe in](https://github.com/kdeldycke/awesome-falsehood).
-   [Dr. Hamilton Demonstrates "The Hold" - How To Calm A Crying Baby (YouTube)](https://www.youtube.com/watch?v=j2C8MkY7Co8&feature=youtu.be).
-   [Dream Homes from the Past Century \| Hacker News](https://news.ycombinator.com/item?id=23508581).
-   [Game Changer or Fame Gainer? — News & Features](https://www.recipes-news.co.nz/news/2019/11/6/game-changer-or-fame-gainer).
-   [How to Configure Your iPhone to Work for You, Not Against You](https://betterhumans.coach.me/how-to-set-up-your-iphone-for-productivity-focus-and-your-own-longevity-bb27a68cc3d8).
-   [How to get six pack abs in one year - Quora](https://www.quora.com/How-do-I-get-six-pack-abs-in-one-year).
-   [ICEBREAKERS, via The Art of Noticing by Rob Walker](https://docs.google.com/document/d/1j4rj883slFvh1zZLGedqQFM0wqCrHlIEPE62K0LkKak/edit).
-   [Jon Brosio's answer to What is the best way to improve life? - Quora](https://www.quora.com/What-is-the-best-way-to-improve-life/answer/Jon-Brosio).
-   [MAPA hides prefab Minimod Curucaca in Brazilian forest](https://www.dezeen.com/2019/05/02/minimod-curucaca-mapa-prefab-house-brazil/).
-   [Melatonin: Much More Than You Wanted to Know (Hacker News)](https://news.ycombinator.com/item?id=17632668).
-   [Mind body green](http://www.mindbodygreen.com/).
-   [Most lives are lived by default (2012) \| Hacker News](https://news.ycombinator.com/item?id=18844791).
-   [Panic attacks and panic disorder - Symptoms and causes - Mayo Clinic](https://www.mayoclinic.org/diseases-conditions/panic-attacks/symptoms-causes/syc-20376021).
-   [Periodic fasting starves cisplatin‐resistant cancers to death (Hacker News)](https://news.ycombinator.com/item?id=17679451).
-   [Planning for My Kidnapping \| Hacker News](https://news.ycombinator.com/item?id=24050837).
-   [Posing for photos (all about the squinch)](https://news.ycombinator.com/item?id=17231806).
-   [Quiz: The 36 Questions That Lead to Love](http://www.nytimes.com/2015/01/11/fashion/no-37-big-wedding-or-small.html).
-   [Quora on increasing energy levels](http://www.quora.com/What-methods-can-I-use-to-avoid-getting-so-tired-when-I-do-the-same-amount-of-a-work-as-my-peers-who-do-not-get-so-tired).
-   [Show HN: I made a community sourced fitness routine database \| Hacker News](https://news.ycombinator.com/item?id=27503597).
-   [Show Me the Science – When & How to Use Hand Sanitizer in Community Settings](https://www.cdc.gov/handwashing/show-me-the-science-hand-sanitizer.html).
-   [Side sleepers with neck problems ONLY (pillow thread)](https://twitter.com/msdanifernandez/status/1330962637731971073).
-   [Six Years With a Distraction-Free iPhone – Member Feature Stories – Medium](https://medium.com/s/story/six-years-with-a-distraction-free-iphone-8cf5eb4f97e3).
-   [The 101 Best Habits to Track in 2018 – Coach.me App – Medium](https://medium.com/coach-me-app/top-100-habits-to-track-in-2018-4940bf459d5).
-   [The Best Indoor Plants to Clear the Air, Literally](http://www.mydomaine.com/best-indoor-plants-for-clean-air/slide7).
-   [The military secret to falling asleep in two minutes (The Independent)](https://www.independent.co.uk/life-style/fall-asleep-two-minutes-how-to-military-secret-trick-a8520991.html).
-   [The Only New Year’s Resolutions You’ll Ever Need – John LeFevre – Medium](https://medium.com/@JohnLeFevre/the-only-new-years-resolutions-you-ll-ever-need-9246aa419263).
-   [The Path to Dijkstra’s Handwriting](https://joshldavis.com/2013/05/20/the-path-to-dijkstras-handwriting/).
-   [The Shocking Truth About Freshly Squeezed Orange Juice](http://articles.mercola.com/sites/articles/archive/2011/08/16/dirty-little-secret-orange-juice-is-artificially-flavored-to-taste-like-oranges.aspx).
-   [Travelling alone (Quora)](http://www.quora.com/How-does-it-feel-to-travel-alone).
-   [You should’ve asked \| Emma](https://english.emmaclit.com/2017/05/20/you-shouldve-asked/comment-page-9/).
-   [Zero Waste Home](http://www.zerowastehome.com/).

# \[2015-03-06 Fri\] Graphics bookmarks
---
id: graphics-bookmarks
---



-   [gif.js](http://jnordberg.github.io/gif.js/).
-   [Icicles](http://philogb.github.io/jit/static/v20/Jit/Examples/Icicle/example2.html): Data viz.
-   [inkpanther2 graphics or logo commissions](https://twitter.com/valerybriz/status/1369449701641248769).
-   [List of best websites for downloading free SVGs](https://www.reddit.com/r/cricut/comments/13b0qkg/list_of_best_websites_for_downloading_free_svgs/).
-   [Protoviz](http://mbostock.github.io/protovis/): Data viz.
-   [Svg animation info](http://www.inkscapeforum.com/viewtopic.php?f=22&t=13126): Potentially useful for some ideas in mind.
-   [Svg within svg](http://stackoverflow.com/questions/14804950/include-one-svg-inside-another): Potentially useful for some ideas in mind.
-   [where to find svgs](https://www.reddit.com/r/cricutcrafting/wiki/svg/).

# \[2015-03-06 Fri\] Nexus Q bookmarks
---
id: nexus-q-bookmarks
---

-   [How to Install CyanogenMod on the Google Nexus Q ("steelhead")](http://wiki.cyanogenmod.org/w/Install_CM_for_steelhead).
-   [Nexus Q troubleshooting](http://nexusq.wikidot.com/troubleshooting).
-   [Unlocking-\>insecure boot-\>root-\>flash cm10 with amplifier support your Q without apk](http://forum.xda-developers.com/showthread.php?t%3D2408799).

# \[2015-03-06 Fri\] Golang bookmarks
---
id: golang-bookmarks
---



-   [7 Common mistakes in Go](http://spf13.com/presentation/7-common-mistakes-in-go-2015/?utm_source=feedburner&utm_medium=feed&utm_campaign=Feed%3A+spf13+%28Steve+Francia%27s+Blog%29).
-   [A collection of common regular expressions for Go](https://github.com/mingrammer/commonregex).
-   [A curated list of awesome Go packages](https://github.com/avelino/awesome-go).
-   [A curated list of awesome golang Security related resources](https://github.com/guardrailsio/awesome-golang-security).
-   [A Drawer implement on SwiftUI](https://iosexample.com/a-drawer-implement-on-swiftui/).
-   [A statistics package with common functions that are missing from the Golang standard library](https://github.com/montanaflynn/stats).
-   [A whirlwind tour of Go’s runtime environment variables](http://dave.cheney.net/2015/11/29/a-whirlwind-tour-of-gos-runtime-environment-variables).
-   [Attempting to Learn Go - Now Sending GET/POST REST Requests](https://dev.to/shindakun/attempting-to-learn-go---now-sending-rest-requests-akp).
-   [authentication - python gRPC equivalent of golang's PerRPCCredentials](https://stackoverflow.com/questions/59100973/python-grpc-equivalent-of-golangs-perrpccredentials).
-   [Avoiding Reflection (And Such) In Go](http://www.jerf.org/iri/post/2945).
-   [BasicGoAPI (ie. REST)](https://github.com/iangudger/basicGoAPI).
-   [Bazel Golang Hello World (Kubernetes musings by chrislovecnm)](https://chrislovecnm.com/golang/bazel/bazel-hello-world/).
-   [Beego, platform for web apps](http://beego.me/docs/intro/releases.md).
-   [Buffalo & Rapid Web Development in Go](https://gobuffalo.io/).
-   [Building a RESTful API in Go Using Only the Standard Library (Episode 1)](https://www.youtube.com/watch?v=eTjNtNnVOGY).
-   [Building an API with Golang, RethinkDB and wercker](http://blog.wercker.com/2013/08/07/building-an-api-with-golang-rethinkdb-wercker.html).
-   [Building Small Containers for Kubernetes (golang http)](https://dev.to/codehakase/building-small-containers-for-kubernetes-290j).
-   [c2go: A tool for transpiling C to Go.](https://github.com/elliotchance/c2go).
-   [Command vet (reports suspicious constructs)](https://godoc.org/golang.org/x/tools/cmd/vet).
-   [Complex json handling in Go](http://www.kotancode.com/2015/09/10/complex-json-handling-in-go/).
-   [Configr: abstraction on top of configuration sources](https://github.com/adrianduke/configr).
-   [Configuring emacs and evil mode for Go development (Part 1)](http://jen20.com/2015/02/06/configuring-emacs-for-go-part-1.html).
-   [Creating an API Client in Go](https://www.scaledrone.com/blog/posts/creating-an-api-client-in-go).
-   [Cross compilation with Go 1.5](http://dave.cheney.net/2015/08/22/cross-compilation-with-go-1-5).
-   [Custom transports and timeouts](http://biasedbit.com/blog/golang-custom-transports/).
-   [Dancing with Go’s Mutexes](https://medium.com/@deckarep/dancing-with-go-s-mutexes-92407ae927bf#.uixrkc790).
-   [Debug Go Like a Pro - Better Programming - Medium](https://medium.com/better-programming/debug-go-like-a-pro-213d4d74e940).
-   [Debugging Go programs with Delve](https://blog.gopheracademy.com/advent-2015/debugging-with-delve/).
-   [defaultproject (REST/web starter)](https://github.com/elcct/defaultproject).
-   [Defer, Panic, and Recover](https://blog.golang.org/defer-panic-and-recover).
-   [Emacs Go Mode (Isma details his Emacs Golang setup)](https://arenzana.org/2019/01/emacs-go-mode).
-   [End-user authentication for Go web applications](http://words.volant.is/articles/authentication-golang-web-applications/).
-   [ent · An entity framework for Go](https://entgo.io/).
-   [Error handling in Go](https://blog.golang.org/error-handling-and-go).
-   [Executing commands in Go](http://www.darrencoxall.com/golang/executing-commands-in-go/).
-   [Exploring Error Handling Patterns in Go (Hacker News)](https://news.ycombinator.com/item?id=17765413).
-   [Exploring Go's runtime](http://blog.matttproud.com/2015/02/exploring-gos-runtime-how-process.html).
-   [Face recognition with Go – Hacker Noon](https://hackernoon.com/face-recognition-with-go-676a555b8a7e).
-   [fasthttp: Fast HTTP implementation for Go](https://github.com/valyala/fasthttp).
-   [GitHub - gorilla/mux: A powerful URL router and dispatcher for golang.](https://github.com/gorilla/mux).
-   [GitHub - montanaflynn/stats: A well tested and comprehensive Golang statistics library package with no dependencies.](https://github.com/montanaflynn/stats).
-   [GitHub - ndabAP/vue-go-example: Vue.js and Go example project](https://github.com/ndabAP/vue-go-example).
-   [GitHub - Nerzal/gocloak: golang keycloak client](https://github.com/Nerzal/gocloak).
-   [GitHub - sethgrid/multibar: Display multiple progress bars in Go (golang).](https://github.com/sethgrid/multibar).
-   [Go best practices, six years in](https://peter.bourgon.org/go-best-practices-2016/).
-   [Go by Example](https://gobyexample.com/).
-   [Go Challenge 3 HN comments](https://news.ycombinator.com/item?id%3D9399286).
-   [Go Code Review Comments](https://github.com/golang/go/wiki/CodeReviewComments).
-   [Go command Line Flags](https://gotalks.googleplex.com/codelab/flag.article).
-   [Go Concurrency Patterns: Pipelines and cancellation](http://blog.golang.org/pipelines).
-   [Go grpc authentication](https://github.com/grpc/grpc-go/tree/master/examples/features/authentication).
-   [Go interfaces, the tricky parts](https://timr.co/go-interfaces-the-tricky-parts).
-   [Go library for downloading YouTube videos](https://github.com/otium/ytdl).
-   [Go Meta Linter](https://github.com/alecthomas/gometalinter).
-   [Go Proverbs Illustrated](http://www.gregosuri.com/2015/12/04/go-proverbs-illustrated/).
-   [Go Slice Gotcha](https://blog.jpalardy.com/posts/go-slice-gotcha/).
-   [Go Template Primer](http://gohugo.io/templates/go-templates).
-   [Go tooling essentials (useful flags in tooling)](http://golang.rakyll.org/go-tool-flags/).
-   [Go Tooling in Action - YouTube](https://www.youtube.com/watch?v=uBjoTxosSys).
-   [Go Walkthrough: encoding/json package](https://medium.com/go-walkthrough/go-walkthrough-encoding-json-package-9681d1d37a8f#.9rix3aqzg).
-   [Go Walkthrough: fmt (formatting strings)](https://medium.com/go-walkthrough/go-walkthrough-fmt-55a14bbbfc53#.egmp9nwqv).
-   [Go, gRPC and Docker](https://medium.com/@matzhouse/go-grpc-and-docker-c1fb2ec8e9f0).
-   [go-bootstrap to generate a lean and mean Go web project](http://go-bootstrap.io/).
-   [go-fuzz github.com/arolek/ase tutorial](https://medium.com/@dgryski/go-fuzz-github-com-arolek-ase-3c74d5a3150c#.5ybv38lzm).
-   [Go-miniLock: The Minilock File Encryption System, Ported to Pure Go](https://github.com/cathalgarvey/go-minilock).
-   go-rename.
-   [Go-restful](https://github.com/emicklei/go-restful).
-   [GOCUI - Go Console User Interface](https://github.com/jroimartin/gocui/blob/master/README.md).
-   [Goji: A web microframework for Golang](http://goji.io/).
-   [Golang concepts from an OOP point of view](https://github.com/luciotato/golang-notes/blob/master/OOP.md).
-   [Golang landmines](https://news.ycombinator.com/item?id=12522652).
-   [Golang toolbox (high quality Go packages)](http://golangtoolbox.com/).
-   [Golang Tutorial (Xah Lee's)](http://xahlee.info/golang/golang_index.html).
-   [Golang: Creating gRPC interceptors (David Bond)](https://davidsbond.github.io/2019/06/14/creating-grpc-interceptors-in-go.html).
-   [Golang: Rune](http://xahlee.info/golang/golang_rune.html).
-   [GopherCon 2015 videos](https://www.youtube.com/playlist?list=PL2ntRZ1ySWBf-_z-gHCOR2N156Nw930Hm).
-   [GopherCon 2016: Jack Lindamood - Practical Advice for Go Library Authors (YouTube)](https://www.youtube.com/watch?v=5v2fqm_8jYI).
-   [GopherCon 2016: Jack Lindamood - Practical Advice for Go Library Authors](https://www.youtube.com/watch?v=5v2fqm_8jYI).
-   [GopherCon 2018 - How to Write a Parser in Go](https://about.sourcegraph.com/go/gophercon-2018-how-to-write-a-parser-in-go/).
-   [Gopherjs: A compiler from Go to JavaScript](https://github.com/gopherjs/gopherjs).
-   [GoQt: golang Qt bindings](https://github.com/visualfc/goqt).
-   gorepl-mode.
-   [gosec - Golang Security Checker](https://github.com/securego/gosec).
-   [Go’s Features of Last Resort \| Hacker News](https://news.ycombinator.com/item?id=21603483).
-   [Graceful shutdown of a TCP server in Go - Eli Bendersky's website](https://eli.thegreenplace.net/2020/graceful-shutdown-of-a-tcp-server-in-go/).
-   [GRequests: A Go "clone" of the great and famous Requests library](https://github.com/levigross/grequests).
-   [gRPC authentication documentation](https://grpc.io/docs/guides/auth/).
-   [GuardRails is a GitHub app that provides security feedback in your pull requests](https://github.com/apps/guardrails).
-   [How to Hash and Verify Passwords With Argon2 in Go - Alex Edwards](https://www.alexedwards.net/blog/how-to-hash-and-verify-passwords-with-argon2-in-go).
-   [How to start a Go project in 2018 \| Hacker News](https://news.ycombinator.com/item?id=17061713).
-   [How to Write Go Code](https://golang.org/doc/code.html).
-   [How we use gRPC to build a client/server system in Go (auth and TLS included)](https://medium.com/pantomath/how-we-use-grpc-to-build-a-client-server-system-in-go-dd20045fa1c2).
-   [HUGO: a static website engine in Go](http://www.gohugo.io/).
-   [Interfaces and Composition for Effective Unit Testing in Golang](http://nathanleclaire.com/blog/2015/10/10/interfaces-and-composition-for-effective-unit-testing-in-golang/).
-   [Kubernetes godeps](https://github.com/kubernetes/kubernetes/blob/master/Godeps/Godeps.json).
-   [Less is exponentially more (Rob Pike's Go reasoning)](https://commandcenter.blogspot.com/2012/06/less-is-exponentially-more.html).
-   [Let's Go! Learn to Build Professional Web Applications With Golang](https://lets-go.alexedwards.net/).
-   [Let's talk about logging](http://dave.cheney.net/2015/11/05/lets-talk-about-logging).
-   [Making and Using HTTP Middleware in Go](http://www.alexedwards.net/blog/making-and-using-middleware).
-   [Match regular expressions into struct fields](https://github.com/alexflint/go-restructure).
-   [Monkey Patching in Go](http://bouk.co/blog/monkey-patching-in-go/).
-   [PanicAndRecover](https://github.com/golang/go/wiki/PanicAndRecover).
-   [Parsing HTML with Go using stream processing](http://maciekmm.net/html-golang-stream-processing/).
-   [Password authentication and storage in Go (Golang)](https://www.sohamkamani.com/blog/2018/02/25/golang-password-authentication-and-storage/).
-   [Peaceful Parent, Happy Kids: How to Stop Yelling and Start Connecting](https://www.amazon.com/Peaceful-Parent-Happy-Kids-Connecting/dp/0399160280/).
-   [Peter Bourgon · Go best practices, six years in](https://peter.bourgon.org/go-best-practices-2016/).
-   [Practical Go: Real-world advice for writing maintainable Go programs (Hacker News)](https://news.ycombinator.com/item?id=19218097).
-   [Problems with Go net/http Client API](https://github.com/bradfitz/exp-httpclient/blob/master/problems.md).
-   [Ran: a simple static web server written in Go](https://github.com/m3ng9i/ran).
-   [Reducing boilerplate with go generate](https://blog.gopheracademy.com/advent-2015/reducing-boilerplate-with-go-generate/).
-   [research!rsc: Go Data Structures: Interfaces](https://research.swtch.com/interfaces).
-   [RESTful Web API Basics in Go](https://www.youtube.com/watch?feature=youtu.be).
-   [Restful webservice using golang with sqlite](http://www.linkedin.com/pulse/restful-webservice-using-golang-sqlite-uttam-gandhi).
-   [Revel:](http://revel.github.io/) A high-productivity web framework for the Go language.
-   [rules_go/core.rst at master · bazelbuild/rules_go](https://github.com/bazelbuild/rules_go/blob/master/go/core.rst#go_binary).
-   [runtime.pprof for profiling](https://golang.org/pkg/runtime/pprof/).
-   [Sashay Go codegen](https://bitbucket.org/seanerussell/sashay).
-   [Seven steps to 100x faster Go](https://syslog.ravelin.com/making-something-faster-56dd6b772b83).
-   [Simple password authentication example · Issue #106 · grpc/grpc-go](https://github.com/grpc/grpc-go/issues/106).
-   [Sling: Go REST client library for creating and sending API requests](https://github.com/dghubble/sling).
-   [Small introduction to tags in Go](https://machiel.me/using-tags-in-go/).
-   [So you want to expose Go on the Internet (Hacker News)](https://news.ycombinator.com/item?id=13213902).
-   [Survey of Rounding Implementations in Go \| Cockroach Labs](https://www.cockroachlabs.com/blog/rounding-implementations-in-go/).
-   [Swagger Go documentation generator](https://github.com/yvasiyarov/swagger).
-   [Ten useful techniques in Go (HN comments)](https://news.ycombinator.com/item?id%3D9716964).
-   [Ten useful techniques in Go](http://arslan.io/ten-useful-techniques-in-go).
-   [termui, Go terminal dashboard](https://github.com/gizak/termui).
-   [Testing in Go - DEV Community](https://dev.to/dannypsnl/testing-in-go-35ei).
-   [The 5 stages of learning Go](https://sourcegraph.com/blog/live/gopherconindia/112025389257 ).
-   [The empty struct (Dave Cheney)](https://dave.cheney.net/2014/03/25/the-empty-struct).
-   [The Go Cookbook](http://golangcookbook.com/).
-   [The Hunt for a Logger Interface](http://go-talks.appspot.com/github.com/ChrisHines/talks/structured-logging/structured-logging.slide#1).
-   [There is no pass-by-reference in Go \| Dave Cheney](https://dave.cheney.net/2017/04/29/there-is-no-pass-by-reference-in-go).
-   [Things I wish someone told me about Go](http://openmymind.net/Things-I-Wish-Someone-Had-Told-Me-About-Go/).
-   [Time formatting in Go ❚ A Scripter's Notes](https://scripter.co/time-formatting-in-go/).
-   [Uber Go Style Guide (Hacker News)](https://news.ycombinator.com/item?id=21225401).
-   [Visualizing Concurrency in Go](http://divan.github.io/posts/go_concurrency_visualize/).
-   [What's So Bad About Stdlib's Log Package? (Groups discussion)](https://groups.google.com/forum/#!msg/golang-nuts/R7ryo7RdBPY/t7XFNGyRDQAJ).
-   [Writing Unit Tests for your net/http Handlers](https://www.youtube.com/watch?v=YmbbmyxSlcg).

# \[2015-03-06 Fri\] GitHub bookmarks
---
id: github-bookmarks
---

-   [Adding a CNAME file to your repository](https://help.github.com/articles/adding-a-cname-file-to-your-repository/).
-   [Tips for configuring a CNAME record with your DNS provider](https://help.github.com/articles/tips-for-configuring-a-cname-record-with-your-dns-provider/).
-   [Github pages basics](https://help.github.com/categories/github-pages-basics/).
-   [SO DNS response](http://stackoverflow.com/questions/23375422/how-to-setup-github-pages-to-redirect-dns-requests-from-subdomain-e-g-www-to).

# \[2015-03-06 Fri\] Courses bookmarks
---
id: courses-bookmarks
---



-   [Chessacademy](http://www.chesscademy.com).
-   [Compilers (Stanford Lagunita)](https://lagunita.stanford.edu/courses/Engineering/Compilers/Fall2014/about).
-   [Egghead.io](https://egghead.io/technologies/angular2).
-   [Gravity Circus Centre](http://www.gravitycircuscentre.com/).
-   [Idler courses](http://idler.co.uk/shop/live-courses/).
-   [Learning How to Learn: Powerful mental tools to help you master tough subjects (Coursera)](https://www.coursera.org/learn/learning-how-to-learn?ranMID=40328&ranEAID=4246lDpjhco&ranSiteID=4246lDpjhco-7V8Bq5eW0eb.NabcjrH6FA&siteID=4246lDpjhco-7V8Bq5eW0eb.NabcjrH6FA&utm_content=10&utm_medium=partners&utm_source=linkshare&utm_campaign=4246lDpjhco).
-   [lingua.ly](http://lingua.ly/).
-   [The Science of Well-Being (Coursera)](https://www.coursera.org/learn/the-science-of-well-being).
-   [Tuts+ courses](http://tutsplus.com/).

# \[2015-03-05 Thu\] Reload inputrc
---
id: reload-inputrc
---

Reload .iputrc from bash prompt: C-x C-r. [More at bashref manual](http://www.gnu.org/software/bash/manual/bashref.html#Miscellaneous-Commands).

# \[2015-03-05 Thu\] Learning Emacs lisp
---
id: learning-emacs-lisp
---



-   Use nreverse and nconc to operate on lists in-place.
-   Set buffer local variables:

``` {.commonlisp org-language="emacs-lisp"}
(setq-local my-clever-var)
```

-   Execute before saving buffer:

``` {.commonlisp org-language="emacs-lisp"}
(add-hook 'write-file-hooks
          (lambda ()
            (message "about to save!")))
```

-   Possibly use to start processes and send file content:

``` {.commonlisp org-language="emacs-lisp"}
(make-comint NAME PROGRAM &optional STARTFILE &rest SWITCHES)
```

-   Creating markers:

``` {.commonlisp org-language="emacs-lisp"}
(setq my-marker (copy-marker (point)))
  #<marker at 10251 in *ielm*>

(marker-buffer my-marker)
  #<buffer *ielm*>

(marker-position my-marker)
  10251 (#o24013, #x280b, ?⠋)
```

-   Get org heading at point:

``` {.commonlisp org-language="emacs-lisp"}
(org-get-heading 'no-tags 'no-todo)
```

-   Remove string text properties. From manual:

> (substring-no-properties STRING &optional FROM TO)
>
> Return a substring of STRING, without text properties. It starts at index FROM and ends before TO. TO may be nil or omitted; then the substring runs to the end of STRING. If FROM is nil or omitted, the substring starts at the beginning of STRING. If FROM or TO is negative, it counts from the end.

-   Skip org entry metadata/drawers:

``` {.commonlisp org-language="emacs-lisp"}
(org-end-of-meta-data-and-drawers)
```

-   Random access to org entry using id (or CUSTOM_ID):

``` {.commonlisp org-language="emacs-lisp"}
(org-open-link-from-string "[[#%exciting-custom-id]]")
```

-   From [Debugging Elisp Part 1: Earn your independence](http://endlessparentheses.com/debugging-emacs-lisp-part-1-earn-your-independence.html):

> -   Go to where the function is defined.
> -   Press C-u C-M-x. Edebug breakpoint for function.
> -   Invoke function in question.
> -   n/c will get you around.
> -   q when done.

-   Pretty printing objects:

``` {.commonlisp org-language="emacs-lisp"}
(let ((my-var (list "val1"
                    "val2"
                    "val3")))
  (pp-to-string my-var))
```

-   Search and/or replace in curent buffer:

``` {.commonlisp org-language="emacs-lisp"}
(re-search-forward "needle"
                   nil t)
(match-beginning 0) ;; Start location of match from last search.
(match-end 0) ;; End location of match from last search.
(replace-match "love")

;; needle-in-haystack
```

-   Restrict buffer editing to a region:

``` {.commonlisp org-language="emacs-lisp"}
(narrow-to-region (point)
                  (point-max))
```

-   Restore restriction:

``` {.commonlisp org-language="emacs-lisp"}
(save-restriction (narrow-to-region (point)
                                    (point-max))
```

-   Restore point, mark, and current buffer:

``` {.commonlisp org-language="emacs-lisp"}
(save-excursion (goto-char (point-max))
                (insert "Hello elisp."))
```

-   Concatenating strings:

``` {.commonlisp org-language="emacs-lisp"}
(concat "Hello " "elisp " "world.")
```

-   Grabbing thing at point:

``` {.commonlisp org-language="emacs-lisp"}
(thing-at-point 'word)
(thing-at-point 'symbol)
(thing-at-point 'line)
```

-   Unit test with ert.
-   Basic iteration with dolist:

``` {.commonlisp org-language="emacs-lisp"}
(dolist (v '("a" "b" "c"))
  (print v))
```

-   Output to other buffer:

``` {.commonlisp org-language="emacs-lisp"}
(with-current-buffer (get-buffer-create "*some buffer*")
  (princ '(some list to print)
         (current-buffer)))
```

-   For a temporary buffer, use with-temp-buffer:

``` {.commonlisp org-language="emacs-lisp"}
(with-temp-buffer
  (insert "abc")
  (point))
```

-   Cons cells [bookmark](http://emacslife.com/read-lisp-tweak-emacs/beginner-2-understand-emacs-lisp.html#sec-4-4).
-   Check for substring:

``` {.commonlisp org-language="emacs-lisp"}
(string-match-p REGEXP STRING &optional START)
```

-   Matching substrings and accessing groups:

``` {.commonlisp org-language="emacs-lisp"}
(setq haystack "Always click [[http://reddit.com/r/emacs][here]].")
(setq needle-re "\\[\\[\\(.*\\)]\\[\\(.*\\)]]")
  "\\[\\[\\(.*\\)]\\[\\(.*\\)]]"

(string-match needle-re haystack)
  13 (#o15, #xd, ?\C-m)

(match-string 0 haystack)
  "[[http://reddit.com/r/emacs][here]]"

(match-string 1 haystack)
  "http://reddit.com/r/emacs"

(match-string 2 haystack)
  "here"
```

-   Return argument unchanged (noop):

``` {.commonlisp org-language="emacs-lisp"}
(identity ARG)
```

-   Org insert today's timestamp

``` {.commonlisp org-language="emacs-lisp"}
(org-insert-time-stamp (current-time))
```

-   [OS version in .emacs](http://ergoemacs.org/emacs/elisp_determine_OS_version.html): Determine OS in emacs lisp.
-   First element

``` {.commonlisp org-language="emacs-lisp"}
(car LIST)
```

-   All but first element

``` {.commonlisp org-language="emacs-lisp"}
(cdr LIST)
```

-   Add NEWELT to front of PLACE

``` {.commonlisp org-language="emacs-lisp"}
(push NEWELT PLACE)
```

-   Invoke 'FUNCTION for each in SEQUENCE

``` {.commonlisp org-language="emacs-lisp"}
(mapcar FUNCTION SEQUENCE)
```

-   Search/replace

``` {.commonlisp org-language="emacs-lisp"}
(while (search-forward "Hello")
  (replace-match "Bonjour"))
```

-   Save to kill ring = copy.
-   Point = cursor position.
-   Mark = a buffer position.
-   Kill = cut text.
-   Yank = paste.
-   Buffer:File = 1:1.
-   Window:Buffer = 1:1.
-   Frame:Window = 1:many.
-   Font lock = syntax highlighting.

# \[2015-03-06 Fri\] Apple Watch bookmarks
---
id: apple-watch-bookmarks
---

-   [Swift, Apple Watch, and Dynamic Graphs](http://lionet.livejournal.com/137350.html).

# \[2015-03-05 Thu\] iOS bookmarks
---
id: ios-bookmarks
---



-   [11 Insanely Great iOS Developers Sites](https://medium.com/ios-apprentice/11-insanely-great-ios-developers-sites-95686a523ea8).
-   [30 great UI Kits for iOS engineers – Flawless App Stories – Medium](https://medium.com/flawless-app-stories/30-great-ui-kits-for-ios-engineers-41b2732896b9).
-   [A floating UIToolBar replacement as seen in the iOS 10 Maps app](https://github.com/iosphere/ISHHoverBar).
-   [Access mobile Safari via web inspector](http://phonegap-tips.com/articles/debugging-ios-phonegap-apps-with-safaris-web-inspector.html).
-   [Accessing Documents/Files (iOS)](https://developer.apple.com/library/archive/documentation/FileManagement/Conceptual/DocumentPickerProgrammingGuide/AccessingDocuments/AccessingDocuments.html).
-   [Adding in-app purchase](https://developer.apple.com/library/ios/technotes/tn2259/_index.html).
-   [An \@import-ant Change in Xcode](http://furbo.org/2015/05/11/an-import-ant-change-in-xcode/).
-   [An object that decodes GeoJSON objects into MapKit types](https://developer.apple.com/documentation/mapkit/mkgeojsondecoder).
-   [Animated Gifs with CGAnimateImageAtURLWithBlock](https://developer.apple.com/documentation/imageio/3333271-cganimateimageaturlwithblock).
-   [App IDs](https://developer.apple.com/library/ios/documentation/General/Conceptual/DevPedia-CocoaCore/AppID.html).
-   [App review guidelines (comic book)](https://devimages.apple.com.edgekey.net/app-store/review/guidelines/App-Review-Guidelines-The-Comic-Book.pdf).
-   [Apple docs](https://developer.apple.com/library/ios/documentation/general/conceptual/CocoaEncyclopedia/Introduction/Introduction.html#//apple_ref/doc/uid/TP40010810-CH1-SW1).
-   [Apple's coding guidelines for Cocoa](https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/CodingGuidelines/Articles/NamingMethods.html#//apple_ref/doc/uid/20001282-BCIGIJJF).
-   [Apple's Concepts in Objective-C programming](https://developer.apple.com/library/ios/documentation/general/conceptual/CocoaEncyclopedia/Initialization/Initialization.html#//apple_ref/doc/uid/TP40010810-CH6-SW3).
-   [Apple's mogile HIG guidelines](https://developer.apple.com/library/ios/documentation/userexperience/Conceptual/MobileHIG/index.html#//apple_ref/doc/uid/TP40006556).
-   [Apple's PhotoScroller](https://developer.apple.com/library/ios/samplecode/PhotoScroller/Introduction/Intro.html).
-   [Attributed String Programming Guide](https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/AttributedStrings/AttributedStrings.pdf).
-   [Autolayout Visual Format Language – Objective C Sample Code](http://www.knowstack.com/autolayout-visual-format-language-objective-c-sample-code/).
-   [AVCaptureSession](https://developer.apple.com/library/prerelease/ios//documentation/AVFoundation/Reference/AVCaptureSession_Class/index.html).
-   [AVCaptureVideoPreviewLayer](https://developer.apple.com/library/ios/documentation/AVFoundation/Reference/AVCaptureVideoPreviewLayer_Class/index.html).
-   [Beginning Core Image in iOS 6](http://www.raywenderlich.com/22167/beginning-core-image-in-ios-6).
-   [Beta testing your app](https://developer.apple.com/library/ios/documentation/IDEs/Conceptual/AppDistributionGuide/TestingYouriOSApp/TestingYouriOSApp.html#//apple_ref/doc/uid/TP40012582-CH8-SW1).
-   [Capturing video on iOS](http://www.objc.io/issues/23-video/capturing-video/).
-   [Cartool (Inspect car files)](https://github.com/steventroughtonsmith/cartool).
-   [CLAFluxDispatcher: A port of Facebook's Flux Dispatcher to Objective-C](https://github.com/clayallsopp/CLAFluxDispatcher).
-   [Clang 3.7 documentation BLOCK IMPLEMENTATION SPECIFICATION](http://clang.llvm.org/docs/Block-ABI-Apple.html).
-   [Clean architecture for iOS](https://github.com/luisobo/clean-architecture).
-   [Cocoa controls](https://www.cocoacontrols.com/).
-   [Cocoadocs](http://cocoadocs.org/).
-   [Cocoapods under the hood](http://www.objc.io/issue-6/cocoapods-under-the-hood.html).
-   [Cocoapods](http://cocoapods.org/).
-   [Code pilot](http://codepilot.cc).
-   [Code School iOS courses](https://www.codeschool.com/paths/ios).
-   [Codeschool iOS](https://www.codeschool.com/learn/ios).
-   [Color difference](http://en.wikipedia.org/wiki/Color_difference).
-   [ComponentKit is an Objective-C++ view framework for iOS that is heavily inspired by React](http://componentkit.org/).
-   [ComponentKit](http://componentkit.org/).
-   [Composing NSAttributedString with SwiftUI-style syntax](https://github.com/ethanhuang13/NSAttributedStringBuilder).
-   [Compressing data with Foundation APIs](https://developer.apple.com/documentation/foundation/nsdata/3174960-compressed).
-   [Create a CMSampleBufferRef from CGImageRef](http://www.cakesolutions.net/teamblogs/2014/03/08/cmsamplebufferref-from-cgimageref).
-   [Creating iTunes Connect Record](https://developer.apple.com/library/ios/documentation/LanguagesUtilities/Conceptual/iTunesConnect_Guide/Chapters/CreatingiTunesConnectRecord.html).
-   [css-layout: Facebook's layout transpiled to C, Java and C#](https://github.com/facebook/css-layout).
-   [Customizing Password AutoFill Rules](https://developer.apple.com/documentation/security/password_autofill/customizing_password_autofill_rules).
-   [DaveLots of iOS resources](http://www.davemark.com/?p=1829).
-   [Developing iOS 7 Apps for iPhone and iPad (Standford lectures)](https://itunes.apple.com/gb/course/developing-ios-7-apps-for/id733644550).
-   [Displaying Text Content in iOS](https://developer.apple.com/library/ios/documentation/StringsTextFonts/Conceptual/TextAndWebiPhoneOS/UsingTextClasses/UsingTextClasses.html).
-   [DJKFlipper](https://cocoapods.org/pods/DJKFlipper).
-   [Effective Objective-C](http://www.effectiveobjectivec.com/).
-   [Everything about bluetooth central (slideshare)](http://www.slideshare.net/j796160836/everything-about-bluetooth-40-central).
-   [Finding iOS memory leaks with Xcode's Instruments](http://spin.atomicobject.com/2016/01/25/ios-memory-leak-xcode/#.VqaGcF_w1AE.hackernews).
-   [Flux for iOS by Sergey Zenchenko](https://speakerdeck.com/sergeyzenchenko/flux-for-ios).
-   [FLUX implementation in Objective-C](https://github.com/techery/FLUX).
-   [FormatterKit: a collection of well-crafted NSFormatter subclasses for things like units of information, distance, and relative time intervals](https://github.com/mattt/FormatterKit).
-   [Getting to know TextKit](http://www.objc.io/issue-5/getting-to-know-textkit.html).
-   [Getting up to speed with UICollectionView layouts](https://www.kairadiagne.com/2019/04/27/getting-up-to-speed-with-uicollectionviewlayout.html).
-   [Giorgio Calderolla](http://giorgiocalderolla.com/blog.html).
-   [GitHub - WeTransfer/WeScan: Document Scanning Made Easy for iOS](https://github.com/WeTransfer/WeScan).
-   [Hacking UINavigationBar](http://www.emdentec.com/blog/2014/2/25/hacking-uinavigationbar).
-   [How (Not) to Write an iOS SDK](https://realm.io/news/altconf-conrad-kramer-writing-iOS-sdk/).
-   [How do I declare a block in Objcetive-C?](http://goshdarnblocksyntax.com/)
-   [How to detect dark mode in iOS](https://www.hackingwithswift.com/example-code/uikit/how-to-detect-dark-mode-in-ios).
-   [How to Integrate Your App with Files App in iOS 11 \| Swift Tutorial](https://www.appcoda.com/files-app-integration/).
-   [How to launch your app from the iOS 8 Share Menu – updated for iOS 8.4](http://easynativeextensions.com/how-to-launch-your-app-from-the-ios-8-share-menu/).
-   [How to make Auto Layout more convenient in iOS](https://medium.com/flawless-app-stories/how-to-make-auto-layout-more-convenient-in-ios-df3b42fed37f).
-   [I created my first CocoaPods library!](http://levibostian.com/blog/create-cocoapod/).
-   [Icon Matrix](https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/MobileHIG/IconMatrix.html).
-   [Image Processing in iOS Part 1: Raw Bitmap Modification](http://www.raywenderlich.com/69855/image-processing-in-ios-part-1-raw-bitmap-modification).
-   [Image Processing in iOS Part 2: Core Graphics, Core Image, and GPUImage](http://www.raywenderlich.com/71151/image-processing-ios-part-2-core-graphics-core-image-gpuimage).
-   [Image resizing techniques](http://nshipster.com/image-resizing/).
-   [INDANCSClient: Objective-C Apple Notification Center Service Implementation (Bluetooth LE)](https://github.com/indragiek/INDANCSClient).
-   [Info PList key reference](https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html#//apple_ref/doc/uid/TP40009249-SW10).
-   [Injection for Xcode](http://injectionforxcode.com).
-   [Introducing CwlViews](https://www.cocoawithlove.com/blog/introducing-cwlviews.html).
-   [Introduction to color spaces](http://www.colourphil.co.uk/lab_lch_colour_space.shtml).
-   [Introduction to Xcode (Apple WWDC 2016)](https://developer.apple.com/videos/play/wwdc2016/413).
-   [ios - how to merge two video with transparency - Stack Overflow](http://stackoverflow.com/questions/40904676/how-to-merge-two-video-with-transparency).
-   [iOS 10 UI](http://puzzles.design/).
-   [iOS 6 Programming Cookbook](https://www.safaribooksonline.com/library/view/ios-6-programming/9781449342746/ch03s03.html).
-   [iOS 9 programming cookbook](http://shop.oreilly.com/product/0636920044338.do).
-   [iOS Apprentice](https://medium.com/ios-apprentice/the-valuable-toolset-for-ios-development-ba312d12577d).
-   [iOS Dev Tools](https://iosdev.tools/).
-   [iOS Dev Tools](http://ios.devtools.me).
-   [iOS dev weekly](http://iosdevweekly.com).
-   [iOS Programming 101: How To Send Email in Your iPhone App](http://www.appcoda.com/ios-programming-101-send-email-iphone-app/).
-   [iOS Programming](http://www.bignerdranch.com/we-write/ios-programming.html).
-   [iOS Programming: The Big Nerd Ranch Guide (4th Edition)](https://www.bignerdranch.com/we-write/ios-programming/).
-   [iOS Programming: The Big Nerd Ranch Guide](https://www.bignerdranch.com/we-write/ios-programming/).
-   [iOS projects catalogues](https://github.com/stanislaw/iOS-Projects-Catalogue).
-   [iOS ScrollView Example with Paging](http://www.mysamplecode.com/2012/12/ios-scrollview-example-with-paging.html).
-   [iOS Security](https://www.apple.com/business/site/docs/iOS_Security_Guide.pdf).
-   [ios-deploy: Install and debug iOS apps without using Xcode](https://github.com/phonegap/ios-deploy).
-   [ios-goodies.com](http://ios-goodies.com).
-   [iosdevtips.co](http://iosdevtips.co).
-   [iso-8601-date-formatter: A Cocoa NSFormatter subclass converting to and from ISO-8601-formatted strings ](https://github.com/boredzo/iso-8601-date-formatter).
-   [JCTiledScrollView](https://github.com/jessedc/JCTiledScrollView).
-   [joppar.com](http://joppar.com/mobile-app-development-resources-guide/).
-   [KZFileWatchers (observer file changes)](https://github.com/krzysztofzablocki/KZFileWatchers).
-   [Lab color space](http://en.wikipedia.org/wiki/Lab_color_space).
-   [Laurine: Localization code generator](https://github.com/JiriTrecak/Laurine).
-   [Maintaining profiles](https://developer.apple.com/library/ios/documentation/IDEs/Conceptual/AppDistributionGuide/MaintainingProfiles/MaintainingProfiles.html).
-   [Many Controllers Make Light Work (Analytics)](http://khanlou.com/2016/02/many-controllers/).
-   [Meerli](http://iphone.meer.li/designs/featured?page=3).
-   [Mike Ash](https://www.mikeash.com/book.html).
-   [Modality changes in iOS13 \| Sarun](https://sarunw.com/posts/modality-changes-in-ios13/).
-   [More aggregation of awesomeness on github](https://github.com/2359media/ios-dev-guide/blob/master/iOS%20Topics%20and%20References.md).
-   [MUKContentRedux: provides a store for immutable data which can be updated only applying actions](https://github.com/muccy/MUKContentRedux).
-   [NSHipster's Xcode plugins post](http://nshipster.com/xcode-plugins/).
-   [NSNotificationCenter part 2: Implementing the observer pattern with notifications](http://www.hpique.com/2013/12/nsnotificationcenter-part-2/).
-   [NSScreencasts](http://nsscreencast.com/episodes).
-   [Objc-C Zen book](https://github.com/objc-zen/objc-zen-book).
-   [Objc.io](http://www.objc.io/).
-   [Objective-C linter](http://oclint.org/).
-   [Objective-C Programming: The Big Nerd Ranch Guide (Big Nerd Ranch Guides)](http://www.amazon.co.uk/Objective-C-Programming-Ranch-Guide-Guides/dp/032194206X).
-   [OSStatus: Lookup Apple API errors fast](http://www.osstatus.com/?utm_campaign=iOS%2BDev%2BWeekly&utm_medium=email&utm_source=iOS_Dev_Weekly_Issue_201).
-   [PaintCode - Turn your drawings into Objective-C or Swift drawing code](https://www.paintcodeapp.com/).
-   [phatblat's post on UISearchController](http://phatblat.com/2016/05/10/uisearchcontroller.html).
-   [Preserving Your App's UI Across Launches \| Apple Developer Documentation](https://developer.apple.com/documentation/uikit/view_controllers/preserving_your_app_s_ui_across_launches).
-   [Programatically send an email using CFNetwork and GMail](http://sugartin.info/2011/10/13/sending-a-mail-useing-gmail/).
-   [Programming iOS Book examples](https://github.com/mattneub/Programming-iOS-Book-Examples).
-   [Quick guide on supporting Dark Mode on iOS](https://tanaschita.com/posts/20191015-quick-guide-on-supporting-dark-mode-on-ios/).
-   [Ray Wendelich](http://www.raywenderlich.com/tutorials).
-   [realm (mobile database), plus map view, search list view, and grid view](https://realm.io/addons/).
-   [Replace Xcode with Neovim](https://medium.com/@alexdunn/replace-xcode-with-neovim-c81f89a50a23).
-   [ReSwift Redux-like implementation of the unidirectional data flow architecture in Swift](https://github.com/ReSwift/ReSwift).
-   [Reveal](http://revealapp.com).
-   [Ry’s Objective-C Tutorial: Functions](http://rypress.com/tutorials/objective-c/functions).
-   [Save your next app from rebuilding from scratch - Alexey Naumov](https://nalexn.github.io/save-your-next-app/).
-   [Scrollable UIStackView](https://blog.alltheflow.com/scrollable-uistackview/).
-   [Setting up a CloudKit Project – Frozen Fire Studios](https://blog.frozenfirestudios.com/setting-up-a-cloudkit-project-ca9ac1883511).
-   [Share data between iOS Apps & App Extensions across devices](https://blog.couchbase.com/sharing-data-ios-app-extensions-sync-capability/).
-   [ShareSDK is the most comprehensive Social SDK](https://github.com/ShareSDKPlatform/ShareSDK).
-   [Sharing data between iOS apps and app extensions](http://www.atomicbird.com/blog/sharing-with-app-extensions).
-   [Shimmer: Shimmer is an easy way to add a shimmering effect to any view in your app](https://github.com/facebook/Shimmer).
-   [simctl: Control iOS Simulators from Command Line - XCBlog - Medium](https://medium.com/xcblog/simctl-control-ios-simulators-from-command-line-78b9006a20dc).
-   [Simple Animation With SnapKit](https://blog.goposse.com/simpleanimatingwithsnapkit-e38ed2980ac2#.n6gzo6syp).
-   [SliceTool](https://github.com/jessedc/SliceTool/blob/master/SliceTool.m).
-   [Subduing CATiledLayer](http://www.cimgf.com/2011/03/01/subduing-catiledlayer/).
-   [Subjective-C](http://subjc.com).
-   [Syncing data on iOS devices with CoreData and CloudKit](https://medium.com/apple-developer-academy-federico-ii/syncing-data-on-ios-devices-with-coredata-and-cloudkit-bed296fc26e0).
-   [TETHR](http://www.invisionapp.com/tethr?utm_source=ios%20dev%20tools&utm_medium=website&utm_campaign=ios%20dev%20tools&at=11lvzs&ct=ios%20dev%20tools).
-   [The Complete Tutorial on iOS/iPhone Custom URL Schemes](http://iosdevelopertips.com/cocoa/launching-your-own-application-via-a-custom-url-scheme.html).
-   [The Ultimate Guide to Choosing Objective-C or Swift for Your Project](http://savvyapps.com/blog/ultimate-guide-choosing-objective-c-or-swift).
-   [Tile-Cutter](https://github.com/jlamarche/Tile-Cutter).
-   [Tools and tips to scale your iOS project along with your team](https://benoitpasquier.com/tools-tips-to-scale-ios-project-and-team/).
-   [Transitioning to ARC](https://developer.apple.com/library/mac/releasenotes/ObjectiveC/RN-TransitioningToARC/Introduction/Introduction.html).
-   [Translucid: Simple and light weight UIView that animate text with an image](https://github.com/Ekhoo/Translucid).
-   [Twitter GIF composer](https://github.com/zh-wang/TwitterGifComposer).
-   [UI Testing in Xcode 7](http://masilotti.com/ui-testing-xcode-7/).
-   [UICollectionViewCompositionalLayout - UIKit \| Apple Developer Documentation](https://developer.apple.com/documentation/uikit/uicollectionviewcompositionallayout).
-   [UIColor CMYK and Lab Values?](http://stackoverflow.com/questions/14912938/uicolor-cmyk-and-lab-values).
-   [UIImage has a new initializer, UIImage(systemName:) that takes a string and returns one of over 1500 different system icons.](https://twitter.com/twostraws/status/1135639902337478656).
-   [UIImage-Conversion](https://github.com/PaulSolt/UIImage-Conversion).
-   [UIScrollView with Content Layout Guides](https://spin.atomicobject.com/2020/03/23/uiscrollview-content-layout-guides/).
-   [UITableView and UICollectionView: update your data model **inside** the batch updates block](https://twitter.com/smileyborg/status/1115120700493144065).
-   [Ultimate guide to resolutions](http://www.paintcodeapp.com/news/ultimate-guide-to-iphone-resolutions).
-   [Using Application Loader](https://itunesconnect.apple.com/docs/UsingApplicationLoader.pdf).
-   [Using Text Kit to Draw and Manage Text](https://developer.apple.com/library/ios/documentation/StringsTextFonts/Conceptual/TextAndWebiPhoneOS/CustomTextProcessing/CustomTextProcessing.html).
-   [VCTransitionsLibrary](https://github.com/ColinEberhardt/VCTransitionsLibrary).
-   [View Controller Presentation Changes in iOS 13 - Geoff Hackworth - Medium](https://medium.com/@hacknicity/view-controller-presentation-changes-in-ios-13-ac8c901ebc4e).
-   [Visual Format laguange for Auto Layout](http://commandshift.co.uk/blog/2013/01/31/visual-format-language-for-autolayout/).
-   [Visual Format Language (Apple reference)](https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/AutolayoutPG/VisualFormatLanguage.html).
-   [Weekly bite-sized screencasts on iOS dev](http://nsscreencast.com).
-   [What's the best way to average two colors that define a linear gradient?](http://stackoverflow.com/questions/649454/what-is-the-best-way-to-average-two-colors-that-define-a-linear-gradient).
-   [When to use App ID wildcards](https://developer.apple.com/library/ios/qa/qa1713/_index.html).
-   [Working with blocks](https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/WorkingwithBlocks/WorkingwithBlocks.html).
-   [WWDC 2012 Xcode tips](https://developer.apple.com/videos/wwdc/2012/).
-   [WWDC 2014](https://developer.apple.com/videos/wwdc/2014/).
-   [WWDC 2015, 2014, 2013 and Tech-talks 2013 (videos and pdf downloader)](https://github.com/ohoachuck/wwdc-downloader).
-   [XCTest documentation](https://developer.apple.com/reference/xctest).
-   [YawImageViewer](https://github.com/KonradCLAPP/YawImageViewer).
-   [Yet another iOS Blog](http://bpoplauschi.wordpress.com).
-   [YouXianMing's animation collection](https://github.com/YouXianMing/Animations).
-   [Zero to BLE on iOS – Part Two](https://www.cloudcity.io/blog/2015/10/15/developing-ios-app-using-ble-standard/).
-   [ZHPopupView](https://github.com/zhhlmr/ZHPopupView).

# \[2015-03-05 Thu\] Kerala travel bookmarks
---
id: kerala-travel-bookmarks
---

-   Bagel Shop, 30 Pali Mala Road, off Carter Road, Bandra (W) (+91 22 2605-0178). Daily 9.00AM-10.00PM. Meal for two R500-R800.
-   Hotel Natraj, 22-24 City Station Road, Udaipur (near Bapu Bazaar), +91-294-2487488, +91-94147-57893,
-   Kala Ghoda Café,10 Ropewalk Lane, Kala Ghoda (+91 22 2263-3866). Daily 8.30AM-11.30PM. Meal for two R600.
-   Kochin (Fort Kochin) - old port town with Chinese, Portuguese, Dutch, British and Jewish heritage.
-   Munnar - hill station and centre of tea, coffee and spice growing. Great hiking and spectacular views.
-   Periyar Wildlife Sanctuary.
-   Suzette, Atlanta Building, Nariman Point (+91 22 2288-0055). Daily 9.00AM-11.00PM. Also at Bandra. Meal for two R600-R1,000.
-   Varkala - chilled out beach resort.
-   Yoga House, 53 Chimbai Road, behind St Andrew's Church, off Hill Road, Bandra (W)(+91 22 6554- 5001). Daily 7.00AM-10.30PM.

# \[2015-03-05 Thu\] India travel bookmarks
---
id: india-travel-bookmarks
---



-   [A Guide to the Breads of India (Hacker News)](https://news.ycombinator.com/item?id=13119986).
-   A route: blore - pune - mumbai - ahmedabad - mt abu - udaipur - jaipur - amritsar - chandigarh - jammu - srinagar - kargil - leh.
-   [Abandoned Bhangarh Fort, India \| Grounds View](https://www.abandonedamerica.us/abandoned-bhangarh-fort-india-grounds).
-   [Abandoned Bhangarh Fort, India \| Temple Detail](https://www.abandonedamerica.us/abandoned-bhangarh-fort-india-temple).
-   [Abandoned Bundi Palace, India \| Grand Wedge](https://www.abandonedamerica.us/abandoned-bundi-palace-india-grand).
-   [Abandoned Cannon Factory, India \| Elephant Columns](https://www.abandonedamerica.us/abandoned-cannon-factory-india-elephant).
-   [Abandoned Cannon Factory, India \| Interior Room](https://www.abandonedamerica.us/abandoned-cannon-factory-india-interior).
-   [Abandoned Jahangir Mahal Palace, Orchha India \| Lovely Symmetry](https://www.abandonedamerica.us/abandoned-jahangir-mahal-palace-orchha).
-   [Abandoned Laxminarayan Temple, Orchha India \| Hallway View](https://www.abandonedamerica.us/abandoned-laxminarayan-temple-orchha-india).
-   [Abandoned Raniji Ki Baori Stepwell, Bundi India \| Columns](https://www.abandonedamerica.us/abandoned-raniji-ki-baori-stepwell).
-   [Akshardham (Delhi)](https://en.wikipedia.org/wiki/Akshardham_%28Delhi%29).
-   [Archeological survey of india sites](https://www.google.com/culturalinstitute/browse/?f.media_type=museumview&q.8129907598665562501=139704082&q.openid=media_type).
-   [Belur temple mysore](https://duckduckgo.com/?q=belur+mysore&t=ffab&iax=images&ia=images).
-   [Bhaja caves, pune, maharashtra](https://en.wikipedia.org/wiki/bhaja_caves).
-   [Bhang](http://en.wikipedia.org/wiki/bhang).
-   [Bodh gaya](http://en.wikipedia.org/wiki/bodh_gaya).
-   [Budbudyanchi tali (bubbling pond) at netravali, sanguem, goa](http://joegoauk.blogspot.co.uk/2013/07/budbudyanchi-tali-bubbling-pond-at.html).
-   [Chand baori (Wikipedia)](https://en.wikipedia.org/wiki/chand_baori).
-   [Chand baori](http://www.amusingplanet.com/2012/10/chand-baori-step-well-in-rajasthan-india.html).
-   Chandipur Beach.
-   [Chittorgarh](https://duckduckgo.com/?q=Chittorgarh&t=ffab&ia=images).
-   [Darjeeling Himalayan Railway Toy Train: Essential Guide](https://www.tripsavvy.com/how-to-travel-on-the-darjeeling-himalayan-railway-toy-train-1539631).
-   [Daulatabad fort](https://en.wikipedia.org/wiki/Daulatabad,_Maharashtra).
-   [dawnoflife07's India trip/pictures](https://www.reddit.com/r/travel/comments/5cmc8e/girlfriend_and_i_traveled_around_asia_and_europe/).
-   [Descent of the Ganges (Mahabalipuram)](https://en.wikipedia.org/wiki/Descent_of_the_Ganges_(Mahabalipuram)).
-   [Dining with the Dead at the New Lucky Restaurant](http://www.odditycentral.com/pics/dining-with-the-dead-at-indias-new-lucky-restaurant.html).
-   [Dr. Bhau Daji Lad museum](http://www.bdlmuseum.org/).
-   Emergencies: +1-650-253-5555.
-   Gaya, Bihar.
-   [Gwalior](https://en.wikipedia.org/wiki/Gwalior).
-   [Halibid temple](https://duckduckgo.com/?q=halibid+temple&t=ffab&iax=images&ia=images).
-   [Hampi](https://en.wikipedia.org/wiki/Hampi).
-   [India on zeef](https://india.zeef.com/gautam.garg).
-   [India's most beautiful stepwells and how to visit them - Lonely Planet](https://www.lonelyplanet.com/articles/india-best-step-wells-to-visit).
-   [IRCTC Tourism (A government of India enterprise)](http://www.irctctourism.com/).
-   [Jil jil jigarthanda](https://en.m.wikipedia.org/wiki/Jil_jil_jigarthanda).
-   [Jodhpur](https://duckduckgo.com/?q=Jodhpur&t=ffsb&ia=images).
-   [Kalyani/Pushkarini at Hulikere near Halebeedu,KA built by Hoysalas](https://twitter.com/GiriShikhara/status/605754976959275011/photo/1).
-   [Karni Mata (rats temple)](https://en.wikipedia.org/wiki/Karni_Mata).
-   [Khajuraho](https://duckduckgo.com/?q=Khajuraho&t=ffab&ia=images).
-   Khandala.
-   [Khotachi Wadi](https://twitter.com/wrathofgnon/status/1268080568387817472).
-   [Kovalam beach](https://duckduckgo.com/?q=kovalam+beach&t=ffab&iax=1&ia=images).
-   Lonavala.
-   Mahabaleshwar.
-   [Mahabalipuram](https://en.wikipedia.org/wiki/Mahabalipuram).
-   [Manali travel \| India, Asia - Lonely Planet](https://www.lonelyplanet.com/india/himachal-pradesh/manali).
-   [Manali, Himachal Pradesh](https://en.wikipedia.org/wiki/Manali,_Himachal_Pradesh).
-   [Manali](https://en.wikipedia.org/wiki/Manali,_Himachal_Pradesh).
-   Mumbai - Bademita: chicken tikka.
-   Mumbai - Bagdadi restaurant.
-   Mumbai - Banaganga lake (Banganga cross lane).
-   Mumbai - Bhel puri (find in stalls).
-   Mumbai - Cafe Britannia (Kumtha St or Adi Murzaban Path with Shahid Bhaghat Singh Rd).
-   Mumbai - Crawford market: revivat Indian thali.
-   Mumbai - [Eat Mumbai – make the most of India's foodie capital](http://www.lonelyplanet.com/india/mumbai-bombay/travel-tips-and-articles/eat-mumbai-make-the-most-of-indias-foodie-capital).
-   Mumbai - Elephanta caves.
-   Mumbai - [Pali Market](http://www.finelychopped.net/2011/09/colours-of-bandras-pali-market-lallu.html).
-   Mumbai - The times of India: masala dosa.
-   Mumbai - University of Mumbai.
-   Mumbai - Vada pav (find in stalls).
-   Mumbai - Victoria station: chai.
-   Mumbai- [10 of the best food in Mumbai](http://www.theguardian.com/travel/2012/mar/01/10-best-street-food-mumbai-india).
-   [My India travel Bucket List](http://hippie-inheels.com/india-travel-bucket-list/).
-   Nagpur.
-   [New Taj Mahal cafe, Mangalore Buns (banana)](https://www.tripadvisor.co.uk/Restaurant_Review-g297630-d5326840-Reviews-New_Taj_Mahal_Cafe-Mangalore_Dakshina_Kannada_District_Karnataka.html).
-   [Orchha](https://duckduckgo.com/?q=Orchha&t=ffab&ia=images).
-   Panchgani.
-   [Pandavleni caves, nashik, maharashtra](https://en.wikipedia.org/wiki/pandavleni_caves).
-   [Radhanagar beach](https://en.wikipedia.org/wiki/havelock_island).
-   [Rishikesh](https://en.m.wikipedia.org/wiki/Rishikesh).
-   [Sabarmati Ashram](https://en.wikipedia.org/wiki/Sabarmati_Ashram).
-   [Satyagraha Ashram](http://satyagrahabali.org/Satyagraha_brochure_email_English.pdf) (founded by Gandhi).
-   [Shimla (forest/trees) - Lonely Planet](https://www.lonelyplanet.com/india/himachal-pradesh/shimla).
-   [Things to do in Pune (Quora)](https://www.quora.com/What-are-the-best-places-in-Pune-for-couples-to-spend-whole-day).
-   [Uttarakhand travel \| India, Asia - Lonely Planet](https://www.lonelyplanet.com/india/uttarakhand-uttaranchal).
-   Varanasi.
-   [Vijaya Nagara, India Centuries-old temples and statues surround Hampi, in southwest India, making up what’s left of the once-powerful city.](https://twitter.com/archpics/status/1016803768413949952).
-   [Vipassana pagoda](https://duckduckgo.com/?q%3dvipassana%2bpagoda&iax%3d1&ia%3dimages).
-   [Welcome Ajanta, India (Shishu's site)](http://ajantaali.blogspot.com/).
-   [Western Ghats](https://en.wikipedia.org/wiki/Western_Ghats).

# \[2015-03-05 Thu\] Git bookmarks
---
id: git-bookmarks
---



-   [10 Common Git Problems and How to Fix Them – citizen428.blog](https://citizen428.net/10-common-git-problems-and-how-to-fix-them-e8d809299f08).
-   [a hackers guide to git](http://wildlyinaccurate.com/a-hackers-guide-to-git)
-   [Better Git configuration \| Scott Nonnenberg](https://blog.scottnonnenberg.com/better-git-configuration/).
-   [delete last commit](http://nakkaya.com/2009/09/24/git-delete-last-commit/)
-   [Get up to speed with partial clone and shallow clone - The GitHub Blog](https://github.blog/2020-12-21-get-up-to-speed-with-partial-clone-and-shallow-clone/).
-   [Getting Started with Git & Github](http://jr0cket.co.uk/slides/getting-started-with-git.html#/).
-   [Git - Quickest Way to Resolve Most Merge Conflicts](https://easyengine.io/tutorials/git/git-resolve-merge-conflicts/).
-   [Git Common-Flow](https://commonflow.org/).
-   [git course](http://www.git-tower.com/learn/?utm_source=tower+blog&utm_medium=sidebar&utm_campaign=learn-git): another git online tutorial, by git-tower folks.
-   [Git from the Bottom Up](https://jwiegley.github.io/git-from-the-bottom-up/).
-   [Git from the inside out](https://codewords.recurse.com/issues/two/git-from-the-inside-out).
-   [git from the trenches](https://ochronus.com/git-tips-from-the-trenches/).
-   [Git Merging vs. Git Rebasing: The Beginner's Guide](https://spin.atomicobject.com/2019/01/10/git-merging-vs-rebasing/?utm_source=feedblitz&utm_medium=FeedBlitzRss&utm_campaign=atomicspin).
-   [git recipes for common mistakes and mishaps](http://caspervonb.com/tools/git-recipes-for-the-common-mistakes-and-mishaps/).
-   [Git Tips #6 - Using Git with Multiple Email Addresses](https://www.kevinkuszyk.com/2018/12/10/git-tips-6-using-git-with-multiple-email-addresses/).
-   [GitHub - k88hudson/git-flight-rules: Flight rules for git](https://github.com/k88hudson/git-flight-rules).
-   [GitHub - susam/gitpr: A quick reference guide on fork and pull request workflow](https://github.com/susam/gitpr).
-   [GitLab Annex solves the problem of versioning large binaries with git](https://about.gitlab.com/2015/02/17/gitlab-annex-solves-the-problem-of-versioning-large-binaries-with-git/).
-   [Ignoring bulk change commits with git blame - Moxio](https://www.moxio.com/blog/43/ignoring-bulk-change-commits-with-git-blame).
-   [kernel's git faq](https://git.wiki.kernel.org/index.php/git_faq).
-   [model git commit message](http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html)
-   [Multiple worktrees and triangular workflows (multiple branches checked out)](https://github.com/blog/2042-git-2-5-including-multiple-worktrees-and-triangular-workflows).
-   [ndp software's git cheatsheet](http://ndpsoftware.com/git-cheatsheet.html)
-   [Oh, shit, git!](https://ohshitgit.com/).
-   [Renaming Your Default Git Branch (Harry R. Schwartz)](https://harryrschwartz.com/2020/06/11/renaming-your-default-git-branch).
-   [rerere: reuse recorded resolution](http://git-scm.com/blog/2010/03/08/rerere.html).
-   [things you didn't know about git](http://www.matheuslima.com/things-you-didnt-know-about-git).
-   [TIL about git-subline-merge](https://twitter.com/dmartincy/status/1188604333430104064).
-   [Understanding Git Conceptually](https://www.sbf5.com/~cduan/technical/git/).
-   [Upcase's mastering Git course](https://upcase.com/mastering-git).
-   [Using Askgit (sql interface to your git repository)](https://willschenk.com/articles/2020/using_askgit/).

# \[2015-03-04 Wed\] Language learning bookmarks
---
id: language-learning-bookmarks
---



-   [Hacking Chinese: A Practical Guide to Learning Mandarin (Hacking Chinese)](https://www.hackingchinese.com/about/practical-guide-to-learning-mandarin/).
-   HN's comments on [learning laguages](https://news.ycombinator.com/item?id%3d8806678).
-   [How it Works - Language Learning with The Michel Thomas Method](https://www.michelthomas.com/how-it-works.php).
-   [How to learn (But Not Master) Any Language in 1 Hour (Plus: A Favor)](http://fourhourworkweek.com/2007/11/07/how-to-learn-but-not-master-any-language-in-1-hour-plus-a-favor/).
-   [Manabi Reader – Learn Japanese by Reading on iOS](https://reader.manabi.io/).
-   [Welcome - Woody Piano Shack](https://woodypianoshack.com/).

# \[2015-02-18 Wed\] Git conflict resolution déjà vu?
---
id: git-conflict-resolution-deja-vu
---

use git [rerere](http://git-scm.com/blog/2010/03/08/rerere.html). here's a [post](https://medium.com/@porteneuve/fix-conflicts-only-once-with-git-rerere-7d116b2cec67).

# \[2015-01-17 Sat\] Graphics design tools bookmarks
---
id: graphics-design-tools-bookmarks
---



-   [Alternatives to Adobe products on Linux, macOS and Windows](https://twitter.com/nixcraft/status/1413395599534088194).
-   [Aseprite](http://www.aseprite.org/).
-   [Awesome-Design-Tools: The best design tools for everything](https://github.com/LisaDziuba/Awesome-Design-Tools/).
-   [Contrast ratio](http://leaverou.github.io/contrast-ratio).
-   [Design+code](https://designcode.io).
-   [HTML5 animations](https://www.animatron.com/).
-   [Ios prototyping with flinto](http://blog.mengto.com/quick-ios-prototyping-flinto/).
-   [Krita](https://krita.org/).
-   [Leonardo](https://www.getleonardo.com/).
-   [MakeAppIcon - Generate app icons of all sizes with a click!](https://makeappicon.com/).
-   [Mischief](https://www.madewithmischief.com/).
-   [Mypaint](http://mypaint.intilinux.com/).
-   [Natron](https://natron.inria.fr/).
-   [Ormr](https://www.getormr.com/features/).
-   [Screen Guru - Take clean screenshot of any websites](https://screen.guru).
-   [Sketch for Mac](http://bohemiancoding.com/sketch/).
-   [Sketchup](http://www.sketchup.com/).
-   [TVPaint](http://www.tvpaint.com).

# \[2015-04-23 Thu\] Emacs key bindings and maps
---
id: emacs-key-bindings-and-maps
---

## based on [masteringemacs.org](http://www.masteringemacs.org/article/mastering-key-bindings-emacs).

## bonus tip

prefix key, followed by c-h, lists keys in prefix.

## keymap

maps key to action.

## keymap found in buffer and most major modes.

## keys

-   undefined: self explanatory.
-   prefix key: ie. c-x (part of complete key).
-   complete key: complete input executes associated command.

## mapping

-   (define-key keymap key def): add to current buffer map.
-   (local-set-key key command): add to active buffer (no map option).
-   (local-unset-key key)
-   (global-set-key key command): add to global keymap (all buffers).
-   (global-unset-key key)

## key codes

-   kbd: macro transaltes human-readable key to emacs readable.
-   function and navigation keys must be surrounded by \<\>.
-   example: (kbd "c-c p") or (kbd "\<f8\>") of (kbd "\<down\>").

## remapping

-   use remap to replace mapping (ie. kill-line with my/kill-line).
-   (define-key keymap \[remap original-function\] 'my-own-function).

## reserved keys

-   "c-c ?" generally reserved for you, but third party packages use it.
-   function keys (ie. f1-f12).
-   hyper and super (ancient).

## lookup order

-   in a nutshell: minor mode keys, local keys, global keys.
-   full order:
    1.  overriding-terminal-local-map: terminal-specific key binds.
    2.  overriding-local-map: override all other local keymaps (avoid if possible).
    3.  char property at point: useful for yasnippet.
    4.  emulation-mode-map-alists: advanced multi-mode keymap.
    5.  minor-mode-overriding-map-alist: minor modes in major modes.
    6.  minor-mode-map-alist: as previous (preferred for minor modes) \<—–
    7.  current-local-map: buffers current local map.
    8.  current-global-map: last place to look (ie. global).

## mode hooks

-   (local-set-key (kbd "c-c q") 'my-awesome-method)) in hook-method.
-   for key-chord-define, use current-local-map.

# \[2014-12-30 Tue\] Video backlog
---
id: online-video-backlog
---



[TODO]{.todo .TODO} [Frank Ostaseski: "Inviting the Wisdom of Death into Life"](https://www.youtube.com/watch?v=wBraurRo_bg).

[TODO]{.todo .TODO} [Adam Curtis HyperNormalisation HD - YouTube](https://www.youtube.com/watch?v=to72IJzQT5k&t=5s).

[TODO]{.todo .TODO} [YouTube’s top creators are burning out (Hacker News)](https://news.ycombinator.com/item?id=17210164).

[TODO]{.todo .TODO} [Donald Knuth Lectures - YouTube](https://www.youtube.com/playlist?list=PL94E35692EB9D36F3).

[TODO]{.todo .TODO} Rashomon by Akira Kurosawa.

[TODO]{.todo .TODO} [Seeing spaces](https://vimeo.com/97903574).

[TODO]{.todo .TODO} [An exclusive seminar with Julian Assange](https://www.youtube.com/watch?v=HHYs78uIx3M).

[TODO]{.todo .TODO} [The (Secret) City of London, Part 1: History](https://www.youtube.com/watch?v=LrObZ_HZZUc).

[TODO]{.todo .TODO} [The (Secret) City of London, Part 2: History](https://www.youtube.com/watch?v=z1ROpIKZe-c).

[TODO]{.todo .TODO} [The UK Gold](https://www.youtube.com/watch?v=kXBJLH2xrBM).

[TODO]{.todo .TODO} [Terra Plana - Learning the skill of barefoot running](https://www.youtube.com/watch?v=Jio7DK15Q1E&feature=youtu.be).

[TODO]{.todo .TODO} [The Science of Compassion ॐ Mata Amritanandamayi ॐ Documentary](https://www.youtube.com/watch?v=Zwx1PaWbD4U).

[TODO]{.todo .TODO} [Rich Hickey Talks (clojure)](https://www.youtube.com/playlist?list=PLZdCLR02grLrEwKaZv-5QbUzK0zGKOOcr).

[TODO]{.todo .TODO} [Redux: The Single Immutable State Tree screencast](https://egghead.io/lessons/javascript-redux-the-single-immutable-state-tree).

[TODO]{.todo .TODO} [Anders Hejlsberg and Lars Bak: TypeScript, JavaScript, and Dart](https://channel9.msdn.com/Shows/Going+Deep/Anders-Hejlsberg-and-Lars-Bak-TypeScript-JavaScript-and-Dart).

[TODO]{.todo .TODO} [How To Travel… The Slow Hustle Way](http://www.slowhustle.com/how-to-travel-the-slow-hustle-way-insights-from-50-episodes/).

[TODO]{.todo .TODO} [2015-12-10 Emacs Chat - John Wiegley](https://www.youtube.com/watch?time_continue%3D1&v%3DnUjgKoOYxos).

[TODO]{.todo .TODO} [How To Order Salads From Inside Emacs](http://emacsnyc.org/2015/03/02/how-i-use-org-capture-and-stuff.html).

[TODO]{.todo .TODO} [An introduction to Emacs Lisp](http://emacsnyc.org/2014/04/07/an-introduction-to-emacs-lisp.html).

[TODO]{.todo .TODO} [12 Challenging Steps to Being a Better Interviewer – Cate Huston at The Lead Developer 2015](https://vimeo.com/139910837?ref%3Dtw-share).

[TODO]{.todo .TODO} [Born Rich: Children Of The Insanely Wealthy](https://www.youtube.com/watch?v%3D8o46HH-TfNY).

[TODO]{.todo .TODO} [Emacs for writers](https://www.youtube.com/watch?v%3DFtieBc3KptU&feature%3Dyoutu.be&a).

[TODO]{.todo .TODO} [Frugal fire 002: justin mccurry (rootofgood)](https://www.youtube.com/watch?v%3dbkdt9bfh5gs).

[TODO]{.todo .TODO} Graham Hancock – The War on Consciousness.

[TODO]{.todo .TODO} [Griefwalker](http://www.nfb.ca/film/griefwalker?utm_content%3dbuffer24b02&utm_medium%3dsocial&utm_source%3dtwitter.com&utm_campaign%3dbuffer).

[TODO]{.todo .TODO} [How to win the loser's game](https://www.youtube.com/watch?v%3DSwkjqGd8NC4).

[TODO]{.todo .TODO} [John Green's "Crash Course History" videos](https://www.youtube.com/playlist?list%3DPLBDA2E52FB1EF80C9).

[TODO]{.todo .TODO} [Matthieu Ricard Leads a Meditation on Altruistic Love and Compassion](https://www.youtube.com/watch?v%3DunX4FQqM6vI).

[TODO]{.todo .TODO} [Matthieu Ricard: "Altruism" \| Talks at Google](https://www.youtube.com/watch?v%3DjUlWDxhSlt8).

[TODO]{.todo .TODO} Nick Hanauer – Rich People Don’t Create Jobs.

[TODO]{.todo .TODO} [Programming is terrible — Lessons learned from a life wasted](https://www.youtube.com/watch?v%3DcsyL9EC0S0c).

[TODO]{.todo .TODO} Rupert Sheldrake – The Science of Delusion.

[TODO]{.todo .TODO} [Surya Namaskar stretches](https://www.youtube.com/watch?v%3DVXTpTRuPiPQ).

[TODO]{.todo .TODO} [The Emacs of distros](http://audio-video.gnu.org/video/misc/2015-01__gnu_guix__the_emacs_of_distros.webm).

[TODO]{.todo .TODO} [The Known Universe by AMNH](https://www.youtube.com/watch?v%3D17jymDn0W6U&sns%3Dem).

[DONE]{.done .DONE} [Juliet Schor Iris Nights: Re-Thinking Materialism](https://www.youtube.com/watch?v=ttLgyKk7yMA).

[DONE]{.done .DONE} [The Internets own boy](https://archive.org/details/The.Internets.Own.Boy.The.Story.of.Aaron.Swartz.2014.WEBRiP.XViD.AC3LEGi0N).

[DONE]{.done .DONE} [BBC's secret of levitation](https://www.youtube.com/watch?v%3DFw8BV4VFOwM).

[DONE]{.done .DONE} [Hold Fast](https://vimeo.com/15351476).

[DONE]{.done .DONE} [This is water, commencement speech](https://www.youtube.com/watch?v=8crol-ydfmi).

[DONE]{.done .DONE} [This is water](https://www.youtube.com/watch?v=dkyjvv7huzw).

# \[2014-09-12 Wed\] Flight-booking bookmarks
---
id: flight-booking-bookmarks
---



-   [Azair: Budget air tickets from low-cost airlines](http://www.azair.com/).
-   [Google Flights](http://flights.google.com/).
-   [Matrix - ITA Software by Google](https://matrix.itasoftware.com).
-   [Travelzoo: Travel & entertainment deals: hotels, holidays, cruises, restaurants, shows](https://www.travelzoo.com/uk/).

# \[2014-09-18 Thu\] Frugal bookmarks
---
id: frugal-bookmarks
---



-   [9 Great Frugal Blogs in The UK - A Cornish Mum](https://www.acornishmum.com/9-great-frugal-blogs-in-the-uk/).
-   [Any tips for buying Cheap Red Wine? : UKFrugal](https://www.reddit.com/r/UKFrugal/comments/ha28n9/any_tips_for_buying_cheap_red_wine/).
-   [Asda Mobile \| Pay as you go SIM (Order your free SIM)](https://mobile.asda.com/).
-   [Beating the latte factor: My quest for the best cheap coffee](https://www.getrichslowly.org/best-cheap-coffee/).
-   [Big green smile (eco bulk buys)](https://www.biggreensmile.com/departments/dishwashing.aspx?deptid=DISHES).
-   [Broadband.co.uk Dedicated to finding the best broadband for you](https://www.broadband.co.uk).
-   [Buy it for life: Durable, Quality, Practical (Reddit)](https://www.reddit.com/r/BuyItForLife/).
-   [Check online store ratings and save money with deals at PriceGrabber.com](http://www.pricegrabber.com/).
-   [Emergency Fund Before YOLO - Frugal Money Man](https://frugalmoneyman.com/2018/03/23/emergency-fund-before-yolo/).
-   [FreeEBOOKS (subreddit)](https://www.reddit.com/r/FreeEBOOKS).
-   [Frugal Fun For Boys and Girls - Learning, Play, STEM Activities, and Thing to Do! (home experiments for kids)](https://frugalfun4boys.com/).
-   [Frugal Queen in France](https://www.frugalqueeninfrance.com/).
-   [Global Online Shopping for Apparel, Phones, Computers, Electronics, Fashion and more on Aliexpress](https://m.aliexpress.com/).
-   [How to Adopt a Wayward Plant (The Telegraph)](https://www.telegraph.co.uk/gardening/problem-solving/adopt-wayward-plant/).
-   [How to find the best quality for less, but it for life, (Get Rich Slowly)](https://www.getrichslowly.org/best-quality-for-less/).
-   [How to Make Your Own Sustainable Cleaning Products (ethical.net)](https://ethical.net/ethical/homemade-sustainable-cleaning-products/).
-   [How To Shop On A Budget &#8211; from A Girl Called Jack (Jack Monroe)](https://cookingonabootstrap.com/2015/11/12/how-to-shop-on-a-budget/).
-   [iForce marketzone](https://iforcemarketzone.com).
-   [Keeping your house cooled (video)](https://m.youtube.com/watch).
-   [Life After Money: My money saving tips](https://meanqueen-lifeaftermoney.blogspot.com/p/my-money-saving-tips.html).
-   [Mole Country Stores: Agricultural and Rural Retailer (clothing)](https://www.molecountrystores.co.uk).
-   [The Humble Penny (Create Financial Joy)](https://thehumblepenny.com/).
-   [Two together railcard](https://www.twotogether-railcard.co.uk/).
-   [UKFrugal: Health and Beauty list : UKFrugal](https://www.reddit.com/r/UKFrugal/comments/ctgzl6/ukfrugal_health_and_beauty_list/).
-   [Want To Buy It For Life? (lots of item suggestions)](https://www.choosefi.com/want-to-buy-it-for-life-consider-this/).
-   [What are the best bits about lidl? : UKPersonalFinance](https://www.reddit.com/r/UKPersonalFinance/comments/ekavj5/what_are_the_best_bits_about_lidl/).
-   [What should you not say when buying a car? - Quora](https://www.quora.com/What-should-you-not-say-when-buying-a-car).

# \[2014-09-18 Thu\] Charities bookmarks
---
id: charities-bookmarks
---

-   [Toilet paper that builds toilets (Who Gives A Crap UK)](https://uk.whogivesacrap.org).

# \[2014-09-18 Thu\] Origami bookmarks
---
id: origami-bookmarks
---



-   [Origami - How to make a WASTEBASKET](https://www.youtube.com/watch?v%3DlA5v3podPwo&feature%3Dem-subs_digest).
-   [Origami That's Fun And Easy](https://www.origami-fun.com/).

# \[2014-12-30 Tue\] Movie backlog
---
id: movie-backlog
---



[TODO]{.todo .TODO} [Watch The Åre Murders \| Netflix Official Site](https://www.netflix.com/title/81748580).

[TODO]{.todo .TODO} [Watch SAKAMOTO DAYS \| Netflix Official Site](https://www.netflix.com/title/81663325).

[TODO]{.todo .TODO} [Mishima: A Life in Four Chapters (1985) - IMDB](https://www.imdb.com/title/tt0089603/).

[TODO]{.todo .TODO} [Drive My Car (2021) - IMDb](https://www.imdb.com/title/tt14039582/).

[TODO]{.todo .TODO} [The Suicide Squad (2021) - IMDb](https://www.imdb.com/title/tt6334354/).

[TODO]{.todo .TODO} [Movies that feel like you're watching an adaptation of the Cyberpunk RPG?](https://old.reddit.com/r/Cyberpunk/comments/1e5vauh/movies_that_feel_like_youre_watching_an/).

[TODO]{.todo .TODO} [Movies that get better with more viewings](https://x.com/davidcinema/status/1853817051040673997).

[TODO]{.todo .TODO} [Zhang Yimou: China's Greatest Director \| Part 2 ](https://www.reddit.com/r/movies/comments/1gvzbi1/zhang_yimou_chinas_greatest_director_part_2/).

[TODO]{.todo .TODO} Take your pill.

[TODO]{.todo .TODO} [A handful of choices, but Hundreds of Beavers caught my attention](https://bsky.app/profile/jaafar.bsky.social/post/3ldfrkposdk22).

[TODO]{.todo .TODO} <https://www.metacritic.com>

[TODO]{.todo .TODO} Chalk line.

[TODO]{.todo .TODO} [Anime Scene Search Engine - trace.moe](https://trace.moe/).

[TODO]{.todo .TODO} [Poorly Drawn Lines](https://poorlydrawnlines.com/).

[TODO]{.todo .TODO} [VHYes (2019) - Rotten Tomatoes](https://www.rottentomatoes.com/m/vhyes).

[TODO]{.todo .TODO} [The Sandman (comic book) - Wikipedia](https://en.m.wikipedia.org/wiki/The_Sandman_(comic_book))

[TODO]{.todo .TODO} [The Sandman (TV Series 2021– ) - IMDb](https://m.imdb.com/title/tt1751634/)

[TODO]{.todo .TODO} Korean [films/shows to watch](https://www.reddit.com/r/squidgame/comments/pwjyum/god_bless_squid_game)

[TODO]{.todo .TODO} Gemini man.

[TODO]{.todo .TODO} [Tigertail (2020) - Rotten Tomatoes](https://www.rottentomatoes.com/m/tigertail).

[TODO]{.todo .TODO} [Buffaloed (2019) - Rotten Tomatoes](https://www.rottentomatoes.com/m/buffaloed).

[TODO]{.todo .TODO} [12 Hour Shift (2020) - Rotten Tomatoes](https://www.rottentomatoes.com/m/12_hour_shift).

[TODO]{.todo .TODO} [What's your favorite Kurosawa film?](https://twitter.com/ddoniolvalcroze/status/1347367344239042563).

[TODO]{.todo .TODO} [Korean Pork Belly Rhapsody \| Netflix](https://www.netflix.com/gb/title/81347666).

[TODO]{.todo .TODO} [Back to Life \| Netflix](https://www.netflix.com/gb/title/80202946).

[TODO]{.todo .TODO} [The Best Movies of 2020 – Best New Films of the Year](https://editorial.rottentomatoes.com/guide/the-best-movies-of-2020/).

[DONE]{.done .DONE} [if something happens](https://www.amazon.co.uk/If-Something-Happens-Lauren-Nieuwland).

[TODO]{.todo .TODO} [The Essentials Movie Recs - Google Sheets](https://docs.google.com/spreadsheets/d/1TrLhiplUxXgqe0Cc7T4MdibZVKF4yeLZ1ptHzkz6d48/edit#gid=256281926).

[TODO]{.todo .TODO} [Hipsters (2008) - IMDb](https://www.imdb.com/title/tt1239426/).

[TODO]{.todo .TODO} [Den radio (2008) - IMDb](https://www.imdb.com/title/tt1217565/).

[TODO]{.todo .TODO} [Alyosha Popovich i Tugarin Zmey (2004) - IMDb](https://www.imdb.com/title/tt0415481/).

[TODO]{.todo .TODO} [Brilliantovaya ruka (1969) - IMDb](https://www.imdb.com/title/tt0062759/).

[TODO]{.todo .TODO} [Stalker (1979) - IMDb](https://www.imdb.com/title/tt0079944/).

[TODO]{.todo .TODO} [Solaris (1972) - IMDb](https://www.imdb.com/title/tt0069293/).

[TODO]{.todo .TODO} [Miss Hokusai (2015) - IMDb](https://www.imdb.com/title/tt3689910/).

[TODO]{.todo .TODO} [The Hunt (2012) - IMDb](https://www.imdb.com/title/tt2106476/).

[TODO]{.todo .TODO} [Attack the Block: Trailer #2](https://www.imdb.com/video/vi3155205401).

[TODO]{.todo .TODO} [Upgrade (2018) - IMDb](https://www.imdb.com/title/tt6499752/).

[TODO]{.todo .TODO} [The Way Back (2011) - Rotten Tomatoes](https://www.rottentomatoes.com/m/the_way_back).

[TODO]{.todo .TODO} [Big Nothing (2006) - IMDb](https://www.imdb.com/title/tt0488085/).

[TODO]{.todo .TODO} [A Most Violent Year (2014) - IMDb](https://www.imdb.com/title/tt2937898/).

[TODO]{.todo .TODO} [The Peanut Butter Falcon (2019) - IMDb](https://www.imdb.com/title/tt4364194/).

[TODO]{.todo .TODO} [Technotise - Edit i ja (2009) - IMDb](https://www.imdb.com/title/tt1372301/).

[TODO]{.todo .TODO} [Tetsuo: The Bullet Man (2009) - IMDb](https://www.imdb.com/title/tt1176416/).

[TODO]{.todo .TODO} [Sleep Dealer](https://www.imdb.com/video/vi165218585).

[TODO]{.todo .TODO} [Sky Blue](https://www.imdb.com/title/tt0353014/).

[TODO]{.todo .TODO} [Paycheck (2003) - IMDb](https://www.imdb.com/title/tt0338337/).

[TODO]{.todo .TODO} [Returner (2002) - IMDb](https://www.imdb.com/title/tt0339579/).

[TODO]{.todo .TODO} [Cypher (2002) - IMDb](https://www.imdb.com/title/tt0284978/).

[TODO]{.todo .TODO} [The Little Shop of Horrors (1986) - IMDb](https://www.imdb.com/title/tt0091419/).

[TODO]{.todo .TODO} [To the Lake](https://www.netflix.com/gb/title/81302258).

[TODO]{.todo .TODO} [Throne of Blood (1957) - IMDb](https://www.imdb.com/title/tt0050613/).

[TODO]{.todo .TODO} [Raised by Wolves (TV Series 2020– ) - IMDb](https://www.imdb.com/title/tt9170108/).

[TODO]{.todo .TODO} [Untouchable (2011) - IMDb](https://www.imdb.com/title/tt1675434/).

[TODO]{.todo .TODO} [Midnight in Paris (2011) - IMDb](https://www.imdb.com/title/tt1605783/).

[TODO]{.todo .TODO} [Paris, je t'aime (2006) - IMDb](https://www.imdb.com/title/tt0401711/).

[TODO]{.todo .TODO} [Watch Alice in Paris \| Prime Video](https://www.amazon.com/Alice-in-Paris/dp/B077JDNP5Y).

[TODO]{.todo .TODO} [Plan Coeur (TV Series 2018– ) - IMDb](https://www.imdb.com/title/tt9170638/).

[TODO]{.todo .TODO} [what good shows are streaming rn?](https://twitter.com/ericajoy/status/1307432451304644609).

[TODO]{.todo .TODO} [First Cow \| Where to Stream and Watch \| Decider](https://decider.com/movie/first-cow/).

[TODO]{.todo .TODO} ['She Dies Tomorrow' Movie Review: A Person-to-Person Paranoia Pandemic](https://www.rollingstone.com/movies/movie-reviews/she-dies-tomorrow-movie-review-1034272/).

[TODO]{.todo .TODO} [‘Palm Springs,’ 2020’s Most Fun Movie](https://www.theringer.com/2020/7/14/21323785/palm-springs-the-years-most-fun-movie-plus-introducing-the-connect-shea-serrano-jason-concepcion).

[TODO]{.todo .TODO} ['Spaceship Earth': Why crazy new doc is must-watch quarantine viewing](https://eu.usatoday.com/story/entertainment/movies/2020/05/09/spaceship-earth-why-crazy-hulu-doc-must-watch-quarantine-viewing/3102031001/).

[TODO]{.todo .TODO} ['Don't Breathe' is latest movie to use Detroit as its scary setting](https://eu.freep.com/story/entertainment/movies/julie-hinds/2016/08/25/dont-breathe-horror-film-detroit/89304296/).

[TODO]{.todo .TODO} [Spaceship Earth (2020) - IMDb](https://www.imdb.com/title/tt11394188/).

[TODO]{.todo .TODO} [Reviews - zerokspot.com](https://zerokspot.com/reviews/).

[TODO]{.todo .TODO} [TSP2013: Only Lovers Left Alive – Random Thoughts](https://lars.ingebrigtsen.no/2015/08/07/tsp2013-only-lovers-left-alive/).

[TODO]{.todo .TODO} [TSP2008: Burn After Reading – Random Thoughts](https://lars.ingebrigtsen.no/2015/07/25/tsp2008-burn-after-reading/).

[TODO]{.todo .TODO} [TSP2009: The Limits of Control – Random Thoughts](https://lars.ingebrigtsen.no/2015/07/31/tsp2009-the-limits-of-control/).

[TODO]{.todo .TODO} [TSP2002: Adaptation. – Random Thoughts](https://lars.ingebrigtsen.no/2015/07/11/tsp2002-adaptation/).

[TODO]{.todo .TODO} [TSP2015: Trainwreck – Random Thoughts](https://lars.ingebrigtsen.no/2015/08/08/tsp2014-trainwreck/).

[TODO]{.todo .TODO} [If you could wave a wand and instantly have more episodes of one TV series that has already concluded, which series would you pick?](https://twitter.com/alixabeth/status/1290264151361761285).

[TODO]{.todo .TODO} [The Advisors Alliance - Wikipedia](https://en.wikipedia.org/wiki/The_Advisors_Alliance).

[TODO]{.todo .TODO} [The 300 Coda: My Top 50 Movies of 2018 and My Top 40](https://www.flixist.com/the-300-coda-my-top-50-movies-of-2018-and-my-top-40-first-time-watches-of-older-films/amp/).

[TODO]{.todo .TODO} [Green Room (film) - Wikipedia](https://en.wikipedia.org/wiki/Green_Room_(film)).

[TODO]{.todo .TODO} ['Relic' is a Masterclass in Independent Horror \| MovieBabble](https://moviebabble.com/2020/07/09/relic-is-a-masterclass-in-independent-horror/).

[TODO]{.todo .TODO} [Hidden (Caché) (2005) - IMDb](https://www.imdb.com/title/tt0387898/).

[TODO]{.todo .TODO} [OTB#1: Tokyo Story – Random Thoughts](https://lars.ingebrigtsen.no/2020/06/10/otb1-tokyo-story/).

[TODO]{.todo .TODO} [Into the Night \| Netflix Official Site](https://www.netflix.com/gb/title/81008221).

[TODO]{.todo .TODO} [Undone (TV Series 2019– ) - IMDb](https://www.imdb.com/title/tt8101850/).

[TODO]{.todo .TODO} [Quarantine Staff Picks: Part 7 \| MovieBabble](https://moviebabble.com/2020/05/20/quarantine-staff-picks-part-7/).

[TODO]{.todo .TODO} [Quarantine Staff Picks: Part 6 \| MovieBabble](https://moviebabble.com/2020/05/14/quarantine-staff-picks-part-6/).

[TODO]{.todo .TODO} [Quarantine Staff Picks: Part 5 \| MovieBabble](https://moviebabble.com/2020/05/07/quarantine-staff-picks-part-5-wolf-stalker-loaded-weapon/).

[TODO]{.todo .TODO} [Quarantine Staff Picks: Part 4 \| MovieBabble](https://moviebabble.com/2020/04/30/quarantine-staff-picks-part-4-the-player-my-friend-dahmer-gone-with-the-wind/).

[TODO]{.todo .TODO} [Quarantine Staff Picks: Part 3 \| MovieBabble](https://moviebabble.com/2020/04/23/quarantine-staff-picks-part-3/).

[TODO]{.todo .TODO} [Quarantine Staff Picks: Part 2 \| MovieBabble](https://moviebabble.com/2020/04/16/quarantine-staff-picks-part-2-once-upon-a-time-in-the-west-first-love-blue-ruin/).

[TODO]{.todo .TODO} [Quarantine Staff Picks: Part 1 \| MovieBabble](https://moviebabble.com/2020/04/08/quarantine-staff-picks-part-1/).

[TODO]{.todo .TODO} [Quarantine Staff Picks: Part 8 \| MovieBabble](https://moviebabble.com/2020/05/28/quarantine-staff-picks-part-8-little-women-blood-and-wine/).

[TODO]{.todo .TODO} [Gary Hustwit (filmography)](https://www.hustwit.com/about).

[TODO]{.todo .TODO} [Helvetica, a documentary on typography](https://news.ycombinator.com/item?id=23445245).

[TODO]{.todo .TODO} [twitter: black documentaries that assist in understanding racism, prejudice, police brutality, and more](https://twitter.com/FILMSHAWTY/status/1266029625626497031).

[TODO]{.todo .TODO} [MovieBabble - The Casual Way to Discuss Movies](https://moviebabble.com/).

[TODO]{.todo .TODO} [bitdepth](http://bitdepth.org/).

[TODO]{.todo .TODO} [Burning (2018) - IMDb](https://www.imdb.com/title/tt7282468/).

[TODO]{.todo .TODO} [American Honey (2016) - Rotten Tomatoes](https://www.rottentomatoes.com/m/american_honey).

[TODO]{.todo .TODO} Undone.

[TODO]{.todo .TODO} [The Wire - Wikipedia](https://en.wikipedia.org/wiki/The_Wire).

[TODO]{.todo .TODO} [Ajin: Demi-Human - Wikipedia](https://en.wikipedia.org/wiki/Ajin:_Demi-Human).

[TODO]{.todo .TODO} Halt and Catch Fire.

[TODO]{.todo .TODO} [A Beginner's Guide To Afrofuturism: 7 Titles To Watch And Read](https://www.essence.com/entertainment/a-beginners-guide-afrofuturism/).

[TODO]{.todo .TODO} [Sunbeam city wiki: Solarpunk](https://wiki.sunbeam.city/doku.php).

[TODO]{.todo .TODO} [Goldmund on Twitter: Watched Fight Club, thought about it, and realized why …](https://twitter.com/ShamanOfThe/status/1250056585281523713).

[TODO]{.todo .TODO} [Chance on Twitter: Post your favorite movie.](https://twitter.com/chancethedev/status/1247619377735675904).

[TODO]{.todo .TODO} [NFLX2019 January 4th: Lionheart – Random Thoughts](https://lars.ingebrigtsen.no/2019/03/22/nflx2019-january-4th-lionheart/).

[TODO]{.todo .TODO} [NFLX2019 January 18th: Soni – Random Thoughts](https://lars.ingebrigtsen.no/2019/03/22/nflx2019-january-18th-soni/).

[TODO]{.todo .TODO} [NFLX2019 December 31st: Ghost Stories – Random Thoughts](https://lars.ingebrigtsen.no/2020/01/04/nflx2019-december-31st-ghost-stories/).

[TODO]{.todo .TODO} [NFLX2019 November 15th: Klaus – Random Thoughts](https://lars.ingebrigtsen.no/2019/11/22/nflx2019-november-15th-klaus/).

[TODO]{.todo .TODO} [NFLX2019 October 18th: Seventeen – Random Thoughts](https://lars.ingebrigtsen.no/2019/10/18/nflx2019-october-18th-seventeen/).

[TODO]{.todo .TODO} [NFLX2019 August 2nd: Otherhood – Random Thoughts](https://lars.ingebrigtsen.no/2019/08/24/nflx2019-august-2nd-otherhood/).

[TODO]{.todo .TODO} [NFLX2019 May 30th: Chopsticks – Random Thoughts](https://lars.ingebrigtsen.no/2019/05/31/nflx2019-may-30th-chopsticks/).

[TODO]{.todo .TODO} [NFLX2019 May 24th: The Perfection – Random Thoughts](https://lars.ingebrigtsen.no/2019/05/25/nflx2019-may-24th-the-perfection/).

[TODO]{.todo .TODO} [NFLX2019 July 31st: The Red Sea Diving Resort – Random Thoughts](https://lars.ingebrigtsen.no/2019/08/23/nflx2019-july-31st-the-red-sea-diving-resort/).

[TODO]{.todo .TODO} [Paris is Us](https://www.imdb.com/video/vi2416359961).

[TODO]{.todo .TODO} [Directors’ top 100 \| BFI](https://www.bfi.org.uk/films-tv-people/sightandsoundpoll2012/directors).

[TODO]{.todo .TODO} [It Follows - Wikipedia](https://en.wikipedia.org/wiki/It_Follows).

[TODO]{.todo .TODO} [The 20 Best Cyberpunk Movies of All Time](http://www.tasteofcinema.com/2016/the-20-best-cyberpunk-movies-of-all-time/).

[TODO]{.todo .TODO} [Ragnarok \| Netflix Official Site](https://www.netflix.com/gb/title/80232926).

[TODO]{.todo .TODO} [Home – Neon Dystopia](https://www.neondystopia.com/).

[TODO]{.todo .TODO} Patriot (Amazon)

[TODO]{.todo .TODO} The Expanse (Amazon)

[TODO]{.todo .TODO} The Boys (Amazon)

[TODO]{.todo .TODO} The Last Kingdom (Netflix)

[TODO]{.todo .TODO} The Witcher (Netflix)

[TODO]{.todo .TODO} Travelers (Netflix)

[TODO]{.todo .TODO} If I Only Hadn’t Met You (Netflix)

[TODO]{.todo .TODO} Peaky Blinders (Netflix)

[TODO]{.todo .TODO} Catch-22 (Hulu)

[TODO]{.todo .TODO} [American Factory - Wikipedia](https://en.wikipedia.org/wiki/American_Factory).

[TODO]{.todo .TODO} [October Faction \| Netflix Official Site](https://www.netflix.com/gb/title/80221644).

[TODO]{.todo .TODO} [Transfers \| Netflix](https://www.netflix.com/gb/title/81016857).

[TODO]{.todo .TODO} [Ad Vitam \| Netflix Official Site](https://www.netflix.com/gb/Title/81082327).

[TODO]{.todo .TODO} [On Children \| Netflix Official Site](https://www.netflix.com/gb/title/81000509).

[TODO]{.todo .TODO} [Perfume \| Netflix Official Site](https://www.netflix.com/gb/title/80200596).

[TODO]{.todo .TODO} [The Gift \| Netflix Official Site](https://www.netflix.com/gb/title/81037848).

[TODO]{.todo .TODO} [Ares \| Netflix Official Site](https://www.netflix.com/gb/title/80995039).

[TODO]{.todo .TODO} [Demon Slayer: Kimetsu no Yaiba - Wikipedia](https://en.m.wikipedia.org/wiki/Demon_Slayer:_Kimetsu_no_Yaiba).

[TODO]{.todo .TODO} [Yuri on Ice](https://en.wikipedia.org/wiki/Yuri_on_Ice).

[TODO]{.todo .TODO} [Twitter: "Has anyone here seen Parasite?"](https://twitter.com/alicegoldfuss/status/1196527679127732224).

[TODO]{.todo .TODO} [White House Down (2013) - IMDb](https://www.imdb.com/title/tt2334879/).

[TODO]{.todo .TODO} [American Sniper (2014) - IMDb](https://www.imdb.com/title/tt2179136/).

[TODO]{.todo .TODO} Hannibal Burress, Hasan Minhaj, Neal Brennan, Dave Chappelle.

[TODO]{.todo .TODO} [The Insider (film) - Wikipedia](https://en.wikipedia.org/wiki/The_Insider_(film)).

[TODO]{.todo .TODO} [I need recommendations for shows/movies (preferably on Netflix)](https://twitter.com/alicegoldfuss/status/1166139660822663168).

[TODO]{.todo .TODO} [Taste of Tea](https://www.amazon.co.uk/gp/product/B000PE0H0E/).

[TODO]{.todo .TODO} [Japanology Episodes List](http://japanology.tv/).

[TODO]{.todo .TODO} [Japanology Plus - TV \| NHK WORLD-JAPAN Live & Programs](https://www3.nhk.or.jp/nhkworld/en/tv/japanologyplus/).

[TODO]{.todo .TODO} [David Attenborough's Our Planet](https://www.newyorker.com/culture/on-television/with-the-netflix-series-our-planet-david-attenborough-delivers-an-urgent-message).

[TODO]{.todo .TODO} [Infernal Affairs - Wikipedia](https://en.wikipedia.org/wiki/Infernal_Affairs).

[TODO]{.todo .TODO} [Victoria Aveyard on Twitter: "when your roommate asks for a Marvel watch list with commentary… "](https://twitter.com/VictoriaAveyard/status/1106965397729767424).

[TODO]{.todo .TODO} [ROMA](https://www.netflix.com/title/80240715?trkid=13710079&MSG_TITLE=80240715&lnktrk=EMP&g=34314DADF578FF8FA7BD72C94F6C8ED9645514B1&lkid=W2W_ROW_2_MDP_2).

[TODO]{.todo .TODO} [The Killing of a Sacred Deer (2017)](https://www.imdb.com/title/tt5715874/).

[TODO]{.todo .TODO} Private Life.

[TODO]{.todo .TODO} You Were Never Really Here.

[TODO]{.todo .TODO} Sorry to Bother You.

[TODO]{.todo .TODO} Game Night.

[TODO]{.todo .TODO} Support the Girls.

[TODO]{.todo .TODO} Steven Yeun, Burning.

[TODO]{.todo .TODO} A Simple Favor.

[TODO]{.todo .TODO} [Ask HN: Mind blowing documentaries?](https://news.ycombinator.com/item?id=18271167).

[TODO]{.todo .TODO} [The 21st Century’s Most Acclaimed Films (including films from 2000)](http://www.theyshootpictures.com/21stcentury.htm).

[TODO]{.todo .TODO} [Koyaanisqatsi](https://en.wikipedia.org/wiki/Koyaanisqatsi).

[TODO]{.todo .TODO} [Mifune: The Last Samurai (2015) - IMDb](https://www.imdb.com/title/tt4000670/).

[TODO]{.todo .TODO} [Sunshine Superman (2014) - IMDb](https://www.imdb.com/title/tt1322313/).

[TODO]{.todo .TODO} [Under the Sun (Netflix)](https://www.netflix.com/gb/title/80100869): "Under the Sun keeps forcing us to ponder why we watch representations of real life and what we think we’re learning about reality in the process".

[TODO]{.todo .TODO} [Peter and the Farm (Netflix)](https://www.netflix.com/gb/title/80107737).

[TODO]{.todo .TODO} [Lessons of Darkness - Wikipedia](https://en.wikipedia.org/wiki/Lessons_of_Darkness).

[TODO]{.todo .TODO} [The story of stuff](https://en.wikipedia.org/wiki/The_Story_of_Stuff).

[TODO]{.todo .TODO} [Immortality](https://www.imdb.com/title/tt0120894/?ref_=nm_flmg_act_42).

[TODO]{.todo .TODO} Ichi the killer.

[TODO]{.todo .TODO} Audition.

[TODO]{.todo .TODO} The Happiness of the Katakuris.

[TODO]{.todo .TODO} Agitator.

[TODO]{.todo .TODO} Gozu.

[TODO]{.todo .TODO} Outrage.

[TODO]{.todo .TODO} Minbo.

[TODO]{.todo .TODO} Blues harp.

[TODO]{.todo .TODO} Goyokin.

[TODO]{.todo .TODO} The hidden blade.

[TODO]{.todo .TODO} Wild Tales.

[TODO]{.todo .TODO} The Road.

[TODO]{.todo .TODO} Moon.

[TODO]{.todo .TODO} Who am I.

[TODO]{.todo .TODO} [Tarkovsky films](http://www.openculture.com/2010/07/tarkovksy.html).

[TODO]{.todo .TODO} [Snowpiercer](https://en.wikipedia.org/wiki/Snowpiercer).

[TODO]{.todo .TODO} [Kubo and the two strings](https://en.wikipedia.org/wiki/Kubo_and_the_Two_Strings).

[TODO]{.todo .TODO} Spotlight.

[TODO]{.todo .TODO} Creed.

[TODO]{.todo .TODO} Innocence of memories.

[TODO]{.todo .TODO} The revenant.

[TODO]{.todo .TODO} Big short.

[TODO]{.todo .TODO} Pressure Cooker.

[TODO]{.todo .TODO} Bob and David.

[TODO]{.todo .TODO} Akira kurosawa director.

[TODO]{.todo .TODO} [All About Eve](http://www.imdb.com/title/tt0042192/).

[TODO]{.todo .TODO} [Babadook](http://www.imdb.com/title/tt2321549/).

[TODO]{.todo .TODO} [Death to Smoochy](https://en.wikipedia.org/wiki/Death_to_Smoochy).

[TODO]{.todo .TODO} Enter the void, by gaspar noe.

[TODO]{.todo .TODO} [Four horsemen](http://www.imdb.com/title/tt1671513/).

[TODO]{.todo .TODO} Hirokazu koreeda director.

[TODO]{.todo .TODO} Naomi kawaze director.

[TODO]{.todo .TODO} Nostalghia.

[TODO]{.todo .TODO} Sion sono director.

[TODO]{.todo .TODO} Solyaris

[TODO]{.todo .TODO} Stalker

[TODO]{.todo .TODO} Takashi kitano director.

[TODO]{.todo .TODO} Takashi miike director.

[TODO]{.todo .TODO} [The connection](https://www.theconnection.tv/).

[TODO]{.todo .TODO} The mirror

[TODO]{.todo .TODO} [The Silent Partner](http://www.imdb.com/title/tt0078269/?ref_%3Dfn_al_tt_1).

[TODO]{.todo .TODO} Uncle boonmee who can recall his past lives, by apichatpong weerasethakul.

[TODO]{.todo .TODO} Waking life, by rickard linklater.

[TODO]{.todo .TODO} [Xah Lee's movie list](http://xaharts.org/movie/best_movies.html).

[DONE]{.done .DONE} [Halt and Catch Fire (TV Series 2014–2017) - IMDb](https://m.imdb.com/title/tt2543312/).

[DONE]{.done .DONE} Twinsters.

[DONE]{.done .DONE} Mindhunter (Netflix)

[DONE]{.done .DONE} Altered Carbon (Netflix)

OBSOLETE Narcos (Netflix)

[DONE]{.done .DONE} The Marvelous Mrs. Maisel (Amazon)

[DONE]{.done .DONE} Sneaky Pete (Amazon)

[DONE]{.done .DONE} Ozark (Netflix)

[DONE]{.done .DONE} Midnight Diner: Tokyo Stories (Netflix)

[DONE]{.done .DONE} Dark (Netflix)

[DONE]{.done .DONE} [Altered Carbon \| Netflix Official Site](https://www.netflix.com/gb/title/80097140).

[DONE]{.done .DONE} [The Men Who Made Us Spend - a really amazing 3 part documentary from the BBC on spending and consumerism](https://www.reddit.com/r/UKPersonalFinance/comments/b4jwo6/the_men_who_made_us_spend_a_really_amazing_3_part/).

[DONE]{.done .DONE} [Annihilation (film) - Wikipedia](https://en.wikipedia.org/wiki/Annihilation_(film)).

[DONE]{.done .DONE} 13 Assasins \<2018-12-27 Thu\>.

[DONE]{.done .DONE} 7 Samurai \<2018-12-27 Thu\>.

[DONE]{.done .DONE} [Dogs of Berlin (TV Series 2018– ) - IMDb](https://www.imdb.com/title/tt6839788/).

[DONE]{.done .DONE} [Tidying Up with Marie Kondo](https://www.netflix.com/title/80209379?trkid=13710079&MSG_TITLE=80209379&lnktrk=EMP&g=E58636EBA68F4FFCE4B16798136D42876455394E&lkid=W2W_ROW_2_MDP_1).

[DONE]{.done .DONE} The True cost.

[DONE]{.done .DONE} [Awake, the life of yogananda](http://www.awaketheyoganandamovie.com/).

[DONE]{.done .DONE} [Birdman](http://www.imdb.com/title/tt2562232/).

[DONE]{.done .DONE} [Boyhood](http://www.imdb.com/title/tt1065073/).

[DONE]{.done .DONE} She A Chinese.

[DONE]{.done .DONE} [Wet Hot American Summer](http://www.imdb.com/title/tt0243655/).

# \[2014-12-29 Mon\] Microservices bookmarks
---
id: microservices-bookmarks
---



-   [Creating a Microservice? Answer these 10 Questions First](https://datawire.io/creating-a-microservice-answer-these-10-questions-first/).
-   [How we ended up with microservices](http://philcalcado.com/2015/09/08/how_we_ended_up_with_microservices.html).
-   [HTTPie – command line HTTP client](https://httpie.org/).

# \[2014-12-30 Tue\] Books backlog
---
id: books-backlog
---



[TODO]{.todo .TODO} [Frank Bennett: "20 books that have had an impact on who you are. …" - Indiewe…](https://indieweb.social/@fgbjr/112761146059418752).

[TODO]{.todo .TODO} [‎Swift Secrets on Apple Books](https://books.apple.com/us/book/id1551005489).

[TODO]{.todo .TODO} [Island: Amazon.co.uk: Aldous Huxley: 9780099477778: Books](https://www.amazon.co.uk/Island-Aldous-Huxley/dp/0099477777).

[TODO]{.todo .TODO} [Amazon.com: Hieroglyph: Stories and Visions for a Better Future eBook](https://www.amazon.com/Hieroglyph-Stories-Visions-Better-Future-ebook/dp/B00H7LUR3K).

[TODO]{.todo .TODO} [Meredith: The Future of Silicon Valley (fiction)](https://www.amazon.com/Meredith-Silicon-David-Oliver-Doswell/dp/B088T2ZZG5).

[TODO]{.todo .TODO} [Working in Public: The Making and Maintenance of Open Source Software eBook](https://www.amazon.co.uk/Working-Public-Making-Maintenance-Software-ebook/dp/B08BDGXVK9/ref=sr_1_1).

[TODO]{.todo .TODO} [No More Mr Nice Guy: A Proven Plan for Getting What You Want](https://www.amazon.com/No-More-Mr-Nice-Guy/dp/0762415339).

[TODO]{.todo .TODO} [Thread on Wask Factory (more titles)](https://twitter.com/AllegedlyMiri/status/1301302388939259905).

[TODO]{.todo .TODO} [The Wasp Factory - Wikipedia](https://en.wikipedia.org/wiki/The_Wasp_Factory).

[TODO]{.todo .TODO} [Book recommendation thread by Maris Kreizman](https://twitter.com/mariskreizman/status/1305922866433724416).

[TODO]{.todo .TODO} [Extreme Privacy: What It Takes to Disappear: Bazzell, Michael: 9798643343707](https://www.amazon.com/dp/B0898YGR58).

[TODO]{.todo .TODO} ['You Are Not So Smart': Why We Can't Tell Good Wine From Bad - The Atlantic](https://www.theatlantic.com/health/archive/2011/10/you-are-not-so-smart-why-we-cant-tell-good-wine-from-bad/247240/).

[TODO]{.todo .TODO} [The Deficit Myth - Stephanie Kelton](https://stephaniekelton.com/book/).

[TODO]{.todo .TODO} [Metadata: Forty book recommendations](https://muratbuffalo.blogspot.com/2020/06/some-book-recommendations.html).

[TODO]{.todo .TODO} [Solarpunk (62 books)](https://www.goodreads.com/list/show/89580.Solarpunk).

[TODO]{.todo .TODO} [Bolo’bolo \| The Anarchist Library](https://theanarchistlibrary.org/library/p-m-bolo-bolo).

[TODO]{.todo .TODO} [The velvet monkey wrench : Muir, John, 1918-](https://archive.org/details/velvetmonkeywren00muir/page/260).

[TODO]{.todo .TODO} [Solarpunk Community Discord List (108 books)](https://www.goodreads.com/list/show/131328.Solarpunk_Community_Discord_List).

[TODO]{.todo .TODO} [Launch: An Internet Millionaire's Secret Formula to Sell Almost anything online](https://www.amazon.co.uk/Launch-Internet-Millionaires-Anything-Paperback/dp/B00N4E4HQC/ref=sr_1_1).

[TODO]{.todo .TODO} [The Psychology of Money: The Psychology of Money: Timeless lessons on wealth, greed, and happiness](https://www.amazon.com/Psychology-Money-Timeless-lessons-happiness/dp/0857197681/).

[TODO]{.todo .TODO} [Recommendations \| The Quill to Live](https://thequilltolive.com/recommendations-2/).

[TODO]{.todo .TODO} [My 2020 Reading List · FumbLing](https://fumbling.it/posts/my-2020-reading-list/).

[TODO]{.todo .TODO} [Norse Mythology by Neil Gaiman](https://www.goodreads.com/book/show/37903770-norse-mythology).

[TODO]{.todo .TODO} [Auto by David Wailing](https://www.goodreads.com/book/show/18216145-auto).

[TODO]{.todo .TODO} [Ask HN: Book recommendations for understanding financial systems? \| Hacker News](https://news.ycombinator.com/item?id=22573204).

[TODO]{.todo .TODO} [Andromeda (novel) - Wikipedia](https://en.wikipedia.org/wiki/Andromeda_(novel)).

[TODO]{.todo .TODO} [SOLARPUNK : A REFERENCE GUIDE - Solarpunks - Medium](https://medium.com/solarpunks/solarpunk-a-reference-guide-8bcf18871965).

[TODO]{.todo .TODO} [The Final Circle of Paradise - Wikipedia](https://en.wikipedia.org/wiki/The_Final_Circle_of_Paradise).

[TODO]{.todo .TODO} [Here's a visual of my 35 favorite books of the decade.](https://twitter.com/mariskreizman/status/1193898883153354752).

[TODO]{.todo .TODO} [Cyberpunk: Then and Now \| Hacker News](https://news.ycombinator.com/item?id=22559493).

[TODO]{.todo .TODO} [Accelerate: The Science of Lean Software and Devops](https://www.amazon.co.uk/Accelerate-Software-Performing-Technology-Organizations/dp/1942788339/ref=sr_1_1).

[TODO]{.todo .TODO} [Drive: The Surprising Truth About What Motivates Us \| Hacker News Books](https://hackernewsbooks.com/book/drive-the-surprising-truth-about-what-motivates-us/f10867f03ab0e2c362b3450119170a5a).

[TODO]{.todo .TODO} [Pachinko (novel) - Wikipedia](https://en.wikipedia.org/wiki/Pachinko_(novel)).

[TODO]{.todo .TODO} [Paul Hudson on Twitter: Can you recommend some manga?](https://twitter.com/twostraws/status/1205416072058490880).

[TODO]{.todo .TODO} [Dan Abramov: Please point me to a book about programming that isn't boring](https://twitter.com/dan_abramov/status/1190762799338790913).

[TODO]{.todo .TODO} [John's Amazon wishlist](https://www.amazon.com/gp/registry/wishlist/28JXH54TPGED7).

[TODO]{.todo .TODO} [Super Thinking: Upgrade Your Reasoning and Make Better Decisions with Mental Models](https://www.amazon.co.uk/Super-Thinking-Upgrade-Reasoning-Decisions-ebook/dp/B07FRXC3KN/ref=sr_1_2).

[TODO]{.todo .TODO} [Gut: the inside story of our body's most under-rated organ](https://www.amazon.co.uk/s?k=Giulia+Enders).

[TODO]{.todo .TODO} [Evan Sandhoefner on Twitter: Which books/papers/talks/etc have blown your mind / changed your worldview significantly?](https://twitter.com/evansandhoefner/status/1048426752404410368).

[TODO]{.todo .TODO} [JOY ON DEMAND: The Art of Discovering the Happiness Within](https://www.amazon.co.uk/Joy-Demand-Discovering-Happiness-Within/dp/0062378872/ref=sr_1_1).

[TODO]{.todo .TODO} [8 Minute Meditation Expanded : Quiet Your Mind. Change Your Life](https://www.amazon.co.uk/Minute-Meditation-Expanded-Quiet-Change/dp/0399173420/ref=sr_1_2).

[TODO]{.todo .TODO} [Mindfulness in Plain English: 20th Anniversary Edition: Amazon.co.uk](https://www.amazon.co.uk/Mindfulness-Plain-English-20th-Anniversary/dp/0861719069/ref=sr_1_1).

[TODO]{.todo .TODO} [Bettina Bauer: What is your favorite Science Fiction novel? (twitter)](https://twitter.com/bettina_bosch/status/1164430628852572161).

[TODO]{.todo .TODO} [Altered Traits: Science Reveals How Meditation Changes Your Mind, Brain, and Body](https://www.amazon.com/Altered-Traits-Science-Reveals-Meditation/dp/0399184384).

[TODO]{.todo .TODO} [Junk Food Japan: Addictive Food from Kurobuta](https://www.amazon.com/Junk-Food-Japan-Addictive-Kurobuta/dp/1472919920).

[TODO]{.todo .TODO} [Ask HN: Recommend one book I need to read this summer?](https://news.ycombinator.com/item?id=20332455).

[TODO]{.todo .TODO} I am a cat (Soseki Natsume).

[TODO]{.todo .TODO} [Thinking in Systems: A Primer: Amazon.co.uk: Diana Wright, Donella H. Meadows: 9781844077250: Books](https://www.amazon.co.uk/Thinking-Systems-Primer-Diana-Wright/dp/184407725X).

[TODO]{.todo .TODO} [Casting SPELs in Lisp (Emacs edition)](http://www.lisperati.com/casting-spels-emacs/html/casting-spels-emacs-1.html).

[TODO]{.todo .TODO} [Land of lisp](http://landoflisp.com/).

[TODO]{.todo .TODO} [Juggling for the Complete Klutz by John Cassidy](https://www.goodreads.com/book/show/558738.Juggling_for_the_Complete_Klutz).

[TODO]{.todo .TODO} [Positioning: The Battle for Your Mind](https://www.amazon.co.uk/Positioning-Battle-Your-Al-Ries-ebook/).

[TODO]{.todo .TODO} [Snow Crash - Wikipedia](https://en.wikipedia.org/wiki/Snow_Crash).

[TODO]{.todo .TODO} [The Little Book of Common Sense Investing, Updated and Revised](https://www.powells.com/book/-9781119404507).

[TODO]{.todo .TODO} [The Little LISPer, Third Edition: 9780023397639: Computer Science Books @ Amazon.com](https://www.amazon.com/Little-LISPer-Third-Daniel-Friedman/dp/0023397632).

[TODO]{.todo .TODO} [The Anatomy of Peace: Resolving the Heart of Conflict](https://www.amazon.com/Anatomy-Peace-Resolving-Heart-Conflict/dp/1626564310).

[TODO]{.todo .TODO} [Superfast Lead at speed](https://superfastthebook.com/).

[TODO]{.todo .TODO} [A company of one](https://ofone.co/).

[TODO]{.todo .TODO} [Shoe Dog: A Memoir by the Creator of NIKE](https://www.goodreads.com/book/show/27220736-shoe-dog).

[TODO]{.todo .TODO} [Caitlin Doughty's top 8 books from 2018](https://twitter.com/thegooddeath/status/1077325245940289537?s=12).

[TODO]{.todo .TODO} [Global Economy as you've never seen it](https://www.amazon.co.uk/Global-Economy-Youve-Never-Seen-ebook/dp/B07GVT67HB/ref=tmm_kin_swatch_0?_encoding=UTF8&qid=1545746296&sr=8-1).

[TODO]{.todo .TODO} [Replay](https://www.amazon.com/Replay-Ken-Grimwood/dp/068816112X).

[TODO]{.todo .TODO} [Siddhartha: A Novel](https://www.amazon.com/Siddhartha-Novel-Hermann-Hesse/dp/0553208845).

[TODO]{.todo .TODO} [Out (novel) by Natsuo Kirino](https://en.wikipedia.org/wiki/Out_(novel)).

[TODO]{.todo .TODO} [Folklore, Folktales, and Fairy Tales from Japan: A Digital Library](https://www.pitt.edu/~dash/japantales.html).

[TODO]{.todo .TODO} [A Tale for the Time Being by Ruth Ozeki](https://www.goodreads.com/book/show/15811545-a-tale-for-the-time-being).

[TODO]{.todo .TODO} [Kitchen by Banan Yashimoto](https://www.amazon.com/dp/0571171044/ref=rdr_ext_tmb).

[TODO]{.todo .TODO} [The Overspent American: Why We Want What We Don't Need Paperback](https://www.amazon.com/Overspent-American-Want-What-Dont/dp/0060977582/ref=sr_1_3/136-0317326-4068376?ie=UTF8&qid=1538250472&sr=8-3&keywords=juliet+schor&dpID=51%252BdTsv9XUL&preST=_SY291_BO1,204,203,200_QL40_&dpSrc=srch).

[TODO]{.todo .TODO} [Enough by Patrick Rhone](https://www.goodreads.com/book/show/13540802-enough).

[TODO]{.todo .TODO} [Hot Air has a nice selection](https://hotair.tech/about/).

[TODO]{.todo .TODO} [Domain-Driven Design: Tackling Complexity in the Heart of Software 1st Edition](https://www.amazon.com/Domain-Driven-Design-Tackling-Complexity-Software/dp/0321125215).

[TODO]{.todo .TODO} [Seeing like a State: How Certain Schemes to Improve the Human Condition Have Failed Paperback](https://www.amazon.com/Seeing-like-State-Certain-Condition/dp/0300078153).

[TODO]{.todo .TODO} [Conquest of Abundance: A Tale of Abstraction versus the Richness of Being 2nd Edition](https://www.amazon.com/Conquest-Abundance-Abstraction-versus-Richness/dp/0226245349).

[TODO]{.todo .TODO} [The Wisdom of No Escape: And the Path of Loving-Kindness](https://books.google.co.uk/books?id=a6sRdYLlmqIC&pg=PA6&lpg=PA6&redir_esc=y).

[TODO]{.todo .TODO} [The Anatomy of Peace: Resolving the Heart of Conflict](https://www.amazon.com/Anatomy-Peace-Resolving-Heart-Conflict/dp/1626564310).

[TODO]{.todo .TODO} [The Millionaire Next Door](https://en.wikipedia.org/wiki/The_Millionaire_Next_Door).

[TODO]{.todo .TODO} [Refactoring: Improving the Design of Existing Code](https://www.amazon.co.uk/Refactoring-Improving-Existing-Addison-Wesley-Technology-ebook/dp/B007WTFWJ6/ref=sr_1_1?s=digital-text&ie=UTF8&qid=1515533074&sr=1-1&keywords=refactoring+fowler).

[TODO]{.todo .TODO} [Touched by the Goddess: On Ramanujan (Hacker News)](https://news.ycombinator.com/item?id=12896313).

[TODO]{.todo .TODO} [Kundalini – An Untold Story: A Himalayan Mystic's Insight into the Power of Kundalini and Chakra Sadhana](https://www.amazon.com/Kundalini-Untold-Story-Himalayan/dp/0994002793).

[TODO]{.todo .TODO} [Show HN: Top books mentioned in comments on Hacker News](https://news.ycombinator.com/item?id=12365693).

[TODO]{.todo .TODO} [The Prime of Miss Jean Brodie (novel)](https://en.wikipedia.org/wiki/The_Prime_of_Miss_Jean_Brodie_%2528novel%2529).

[TODO]{.todo .TODO} [Plan B](https://www.goodreads.com/book/show/53849.Plan_B).

[TODO]{.todo .TODO} [Deskbound](http://www.amazon.com/Deskbound-Standing-Up-Sitting-World/dp/1628600586).

[TODO]{.todo .TODO} [The Way of Wanderlust: The Best Travel Writing of Don George (Travelers' Tales)](http://www.amazon.com/The-Way-Wanderlust-Writing-Travelers/dp/1609521056).

[TODO]{.todo .TODO} [We (novel)](https://en.m.wikipedia.org/wiki/We_%28novel%29).

[TODO]{.todo .TODO} [Top Books on Amazon Based on Links in Hacker News Comments (Hacker News)](http://ramiro.org/vis/hn-most-linked-books/).

[TODO]{.todo .TODO} I'm OK, You're OK (Thomas A. Harris).

[TODO]{.todo .TODO} Mistakes Were Made (but not by me) (Tavris/Aronson).

[TODO]{.todo .TODO} Crucial Conversations (Patterson, Kelly…).

[TODO]{.todo .TODO} When Prophecy Fails (Festinger).

[TODO]{.todo .TODO} Influence (Robert Cialdini).

[TODO]{.todo .TODO} The Seven Day Weekend (Ricardo Semler).

[TODO]{.todo .TODO} Elements of Style (various).

[TODO]{.todo .TODO} The Man Who Sold the Eiffel Tower (various).

[TODO]{.todo .TODO} How to talk to anyone (Leil Lowndes).

[TODO]{.todo .TODO} [On Heroes, Hero-Worship, and the Heroic in History by Thomas Carlyle](http://www.gutenberg.org/ebooks/1091?msg=welcome_stranger).

[TODO]{.todo .TODO} [Edwin Sir Arnold's The Light of Asia](http://www.amazon.com/Light-Asia-Sir-Edwin-Arnold/dp/1491290447/ref=sr_1_1?s=books&ie=UTF8&qid=1451846351&sr=1-1&keywords=the+light+of+asia+by+sir+edwin+arnold).

[TODO]{.todo .TODO} [Edwin Sir Arnold's The Song Celestial or Bhagavad-Gita](http://www.amazon.com/Song-Celestial-Bhagavad-Gita-From-Mahabharata/dp/1848301596).

[TODO]{.todo .TODO} [50 great curries of india](http://www.amazon.com/great-curries-india-camellia-panjabi/dp/1904920357).

[TODO]{.todo .TODO} [8 Week to optimum health](http://www.amazon.com/gp/product/034549802X?ie%3DUTF8&tag%3Doffsitoftimfe-20&linkCode%3Das2&camp%3D1789&creative%3D390957&creativeASIN%3D034549802X).

[TODO]{.todo .TODO} [A Guide to the Good Life: The Ancient Art of Stoic Joy](http://www.amazon.com/Guide-Good-Life-Ancient-Stoic/dp/0195374614).

[TODO]{.todo .TODO} [Building Microservices](http://www.amazon.co.uk/Building-Microservices-Sam-Newman/dp/1491950358/ref%3Dsr_1_1?ie%3DUTF8&qid%3D1442603949&sr%3D8-1&keywords%3Dbuilding%2Bmicroservices).

[TODO]{.todo .TODO} [First Opium War essay](http://ocw.mit.edu/ans7870/21f/21f.027/opium_wars_01/ow1_essay.pdf).

[TODO]{.todo .TODO} [Full catastrophe living](http://www.amazon.com/full-catastrophe-living-wisdom-illness/dp/0739358588).

[TODO]{.todo .TODO} [goodreads.com](https://www.goodreads.com/).

[TODO]{.todo .TODO} [Leaving Microsoft to Change the world](http://www.amazon.com/gp/product/0061121088?ie%3DUTF8&tag%3Doffsitoftimfe-20&linkCode%3Das2&camp%3D1789&creative%3D390957&creativeASIN%3D0061121088).

[TODO]{.todo .TODO} [Letters from a stoic](http://www.amazon.com/gp/product/0140442103?ie%3DUTF8&tag%3Doffsitoftimfe-20&linkCode%3Das2&camp%3D1789&creative%3D390957&creativeASIN%3D0140442103).

[TODO]{.todo .TODO} [Michael's bookshelf](http://www.goodreads.com/review/list/266149-michael?page=1&shelf=2014_read&view=covers).

[TODO]{.todo .TODO} [Neil degrasse tyson's reading list](http://www.brainpickings.org/2014/12/29/neil-degrasse-tyson-reading-list/).

[TODO]{.todo .TODO} [On the Road, by Jack Kerouac](https://en.wikipedia.org/wiki/On_the_Road).

[TODO]{.todo .TODO} [Public domain audio books](https://librivox.org/search?primary_key=0&search_category=title&search_page=1&search_form=get_results).

[TODO]{.todo .TODO} [Royal horticultural society's organic Gardening](http://www.amazon.co.uk/gp/product/1840001585/sr=8-1/qid=1419902519/ref=olp_product_details?ie=utf8&me=&qid=1419902519&sr=8-1).

[TODO]{.todo .TODO} [Salman Rushdie books](http://www.salmanrushdie.com/books/).

[TODO]{.todo .TODO} [Technopoly: The Surrender of Culture to Technology](http://www.amazon.com/Technopoly-The-Surrender-Culture-Technology/dp/0679745408).

[TODO]{.todo .TODO} The Songlines, Bruce Chatwin.

[TODO]{.todo .TODO} [The Walker's Guide to Outdoor Clues and Signs](http://www.amazon.co.uk/Walkers-Guide-Outdoor-Clues-Signs/dp/1444780085).

[TODO]{.todo .TODO} [Thing Explainer: Complicated Stuff in Simple Words](http://www.amazon.co.uk/Thing-Explainer-Complicated-Stuff-Simple/dp/1473620910).

[TODO]{.todo .TODO} [Ultimate curry bible](http://www.amazon.co.uk/madhur-jaffreys-ultimate-curry-bible/dp/0091874157/ref=sr_1_3?ie=utf8&qid=1419973767&sr=8-3&keywords=madhur+jaffrey+curry).

[TODO]{.todo .TODO} [Veg patch](http://www.amazon.co.uk/gp/product/1840001585/sr=8-1/qid=1419902519/ref=olp_product_details?ie=utf8&me=&qid=1419902519&sr=8-1).

[TODO]{.todo .TODO} [What Every JavaScript Developer Should Know About ECMAScript 2015](http://www.amazon.co.uk/JavaScript-Developer-ECMAScript-OdeToCode-Programming-ebook/dp/B018D12X0C).

[TODO]{.todo .TODO} [Cameron Desautels's 2016 reading list](http://camdez.com/blog/2016/01/02/2016-reading-list/).

[TODO]{.todo .TODO} Thinking Fast and Slow (Kahneman).

[DONE]{.done .DONE} [Autonomous by Annalee Newitz](https://www.goodreads.com/book/show/28209634-autonomous).

[DONE]{.done .DONE} [This Book Is Full of Spiders by David Wong](https://www.goodreads.com/book/show/12924261-this-book-is-full-of-spiders).

[DONE]{.done .DONE} [Why we sleep](https://www.amazon.com/Why-We-Sleep-Unlocking-Dreams/dp/1501144316) ([twitter outline](https://twitter.com/uberstuber/status/1138291707231887361?s=12)).

[DONE]{.done .DONE} [Flow: The Psychology of Optimal Experience](http://www.amazon.com/Flow-Psychology-Experience-Perennial-Classics/dp/0061339202/).

[DONE]{.done .DONE} [Haruki Murakami](http://www.harukimurakami.com/library/).

[DONE]{.done .DONE} [Vagabonding: An Uncommon Guide to the Art of Long-Term World Travel](http://www.amazon.com/gp/product/0812992180?ie%3DUTF8&tag%3Doffsitoftimfe-20&linkCode%3Das2&camp%3D1789&creative%3D390957&creativeASIN%3D0812992180).

# \[2014-12-29 Mon\] Gardening bookmarks
---
id: gardening-bookmarks
---



-   [Recommended times to plant vegetables in Santa Clara County](https://mastergardeners.org/warm-cool-veg-charts).
-   [We're the self-taught development team behind the #1 gardening app.](https://www.reddit.com/r/IAmA/comments/gc9agk/were_the_selftaught_development_team_behind_the_1/).

# \[2014-12-03 Wed\] Emacs tips backlog
---
id: emacs-tips-backlog
---



[TODO]{.todo .TODO} [Typit: typing game for Emacs](https://github.com/mrkkrp/typit).

[TODO]{.todo .TODO} [pyimports](https://github.com/Wilfred/pyimport).

[TODO]{.todo .TODO} [Sriram Krishnaswamy's init](http://sriramkswamy.github.io/dotemacs/).

[TODO]{.todo .TODO} [Using a Node repl in Emacs with nvm and npm](http://williambert.online/2014/02/using-a-node-repl-with-emacs/).

[TODO]{.todo .TODO} [arview](https://github.com/afainer/arview).

[TODO]{.todo .TODO} [company-flx: fuzzy matching to company](https://github.com/PythonNut/company-flx).

[TODO]{.todo .TODO} [Integration of the Go 'guru' analysis tool into Emacs](https://melpa.org/?utm_source=dlvr.it&utm_medium=twitter#/go-guru).

[TODO]{.todo .TODO} [company-mode/company-statistics: Sort completion candidates by previous completion choices](https://github.com/company-mode/company-statistics).

[TODO]{.todo .TODO} [Rewrite git history with Emacs, magit and git rebase](https://www.youtube.com/watch?v=mtliRYQd0j4&feature=youtu.be).

[TODO]{.todo .TODO} [Code coverage highlighting for Emacs](https://github.com/trezona-lecomte/coverage).

[TODO]{.todo .TODO} [tramp-theme](http://elpa.gnu.org/packages/tramp-theme.html).

[TODO]{.todo .TODO} [cstyle](https://github.com/alexmurray/cstyle).

[TODO]{.todo .TODO} [A go Emacs config](https://github.com/sigma/dotemacs/blob/master/lisp/config/go-config.el).

[TODO]{.todo .TODO} [Try out ox-twbs](http://clubctrl.com/org/prog/howto.html).

[TODO]{.todo .TODO} [Emacs Lisp function frequency](http://ergoemacs.org/emacs/function-frequency.html).

[TODO]{.todo .TODO} [How to make yasnippet and company work nicer? (Stack Exchange)](http://emacs.stackexchange.com/questions/7908/how-to-make-yasnippet-and-company-work-nicer).

[TODO]{.todo .TODO} [yasnippet-java-mode/java-snippets.el](https://github.com/nekop/yasnippet-java-mode/blob/master/java-snippets.el).

[TODO]{.todo .TODO} [font-lock-studio](https://github.com/Lindydancer/font-lock-studio).

[TODO]{.todo .TODO} [buttercup](https://github.com/jorgenschaefer/emacs-buttercup).

[TODO]{.todo .TODO} [markdown-preview-eww](https://github.com/niku/markdown-preview-eww).

[TODO]{.todo .TODO} [ediff-revision and magit-find-file to compare branches](http://puntoblogspot.blogspot.co.uk/2016/01/til-ediff-revision.html?m=1).

[TODO]{.todo .TODO} [Flycheck linter for sh using checkbashisms](https://github.com/Gnouc/flycheck-checkbashisms/blob/master/README.md).

[TODO]{.todo .TODO} [El Kanban Org: parse org-mode todo-states to use org-tables as Kanban tables](http://draketo.de/light/english/free-software/el-kanban-org-table).

[TODO]{.todo .TODO} [Emacs iOS development (qiita)](http://qiita.com/fujimisakari/items/a6ff082f0e8eddc09511).

[TODO]{.todo .TODO} [Emacs iOS development (fujimisakari)](http://blog.fujimisakari.com/Emacs%25E3%2581%25A6%25E3%2582%2599iOS%25E9%2596%258B%25E7%2599%25BA-objective-c-%25E3%2581%2599%25E3%2582%258B%25E3%2581%259F%25E3%2582%2581%25E3%2581%25AE%25E7%2592%25B0%25E5%25A2%2583%25E6%25A7%258B%25E7%25AF%2589/).

[TODO]{.todo .TODO} [encrypting org files](http://orgmode.org/worg/org-tutorials/encrypting-files.html).

[TODO]{.todo .TODO} [flycheck-pos-tip](https://github.com/flycheck/flycheck-pos-tip).

[TODO]{.todo .TODO} [Writing Python Docstrings with Emacs](http://tiborsimko.org/emacs-epydoc-snippets.html).

[TODO]{.todo .TODO} [Try Completion for Objective-C (Github diff)](https://github.com/To1ne/temacco/commit/6a084365ae137db2cdd035b7533847880d8c6cac).

[TODO]{.todo .TODO} [Emacs fasd support](https://github.com/steckerhalter/emacs-fasd).

[TODO]{.todo .TODO} [visual-regexp](https://github.com/benma/visual-regexp.el).

[TODO]{.todo .TODO} [Open large files](http://emacsredux.com/blog/2014/05/16/opening-large-files/).

[TODO]{.todo .TODO} [company-sourcekit](https://github.com/nathankot/company-sourcekit) (Swift completion): [sample config](https://github.com/wiruzx/dotfiles/blob/master/.emacs#L24).

[TODO]{.todo .TODO} [emacs-java-imports](https://github.com/dakrone/emacs-java-imports).

[TODO]{.todo .TODO} append-to-buffer.

[TODO]{.todo .TODO} [python-x: extras for interactive evaluation](https://github.com/wavexx/python-x.el).

[TODO]{.todo .TODO} [outlined-elisp-mode](https://github.com/emacsmirror/outlined-elisp-mode).

[TODO]{.todo .TODO} [outlien-magic](https://github.com/tj64/outline-magic).

[TODO]{.todo .TODO} Gutter and linum+ config (see [zvlex/dotfiles](https://github.com/zvlex/dotfiles)).

[TODO]{.todo .TODO} [kurecolor](https://github.com/emacsfodder/kurecolor): Editing color.

[TODO]{.todo .TODO} [auto-insert-mode](https://www.gnu.org/software/emacs/manual/html_node/autotype/Autoinserting.html).

[TODO]{.todo .TODO} Buffer local cursor color: [ccc](https://github.com/skk-dev/ddskk/blob/master/readmes/readme.ccc.org).

[TODO]{.todo .TODO} clang indexing tool: [clang-tags](http://ffevotte.github.io/clang-tags/).

[TODO]{.todo .TODO} Create custom theme: Trường's [post](http://truongtx.me/2013/03/31/color-theming-in-emacs-24/).

[TODO]{.todo .TODO} [dired-hacks](https://github.com/Fuco1/dired-hacks).

[TODO]{.todo .TODO} gtd emacs workflow: Charles cave's [notes](http://members.optusnet.com.au/~charles57/gtd/gtd_workflow.html).

[DONE]{.done .DONE} emacs-index-search (lookup subject in Emacs manual).

[DONE]{.done .DONE} info-apropos (lookup subject in all manuals).

[TODO]{.todo .TODO} Jumping around tips: [zerokspot](http://zerokspot.com/weblog/2015/01/07/jumping-around-in-emacs/).

[TODO]{.todo .TODO} Mac OS clipboard support (from terminal): [pbcopy](https://github.com/jkp/pbcopy.el).

OBSOLETE [Malabar mode](https://github.com/m0smith/malabar-mode): For Java.

[TODO]{.todo .TODO} Melpa recipe format:[format](https://github.com/milkypostman/melpa#recipe-format).

OBSOLETE Naturaldocs for javascript: [Vineet's post](http://naiquevin.github.io/naturaldocs-for-javascript-in-emacs.html).

[TODO]{.todo .TODO} Org protocol: see irreal's [post](http://irreal.org/blog/?p=3594) and oremacs's [part 1](http://oremacs.com/2015/01/07/org-protocol-1/) and [part 2](http://oremacs.com/2015/01/08/org-protocol-2/).

[TODO]{.todo .TODO} org-multiple-keymap. More at [org-multiple-keymap.el](https://github.com/myuhe/org-multiple-keymap.el).

[TODO]{.todo .TODO} [org-reveal](https://github.com/yjwen/org-reveal/tree/stable): Export org to reveal.js.

[TODO]{.todo .TODO} Practice touch/speed typing: [speedtype](https://github.com/hagleitn/speed-type).

[TODO]{.todo .TODO} private configuration: [private](https://github.com/cheunghy/private).

[TODO]{.todo .TODO} project management for C/C++: [malinka](https://github.com/lefterisjp/malinka).

[TODO]{.todo .TODO} Project templates: [skeletor](https://github.com/chrisbarrett/skeletor.el).

[TODO]{.todo .TODO} Rewrite git logs. See [emacs magit tutorial \| rewrite older commit](http://shingofukuyama.github.io/emacs-magit-reword-commit-messages/).

[TODO]{.todo .TODO} [Selective display](https://www.gnu.org/software/emacs/manual/html_node/emacs/Selective-Display.html): Hide lines longer than.

[TODO]{.todo .TODO} shell-command-on-region: Print inline with C-u M-\|.

[TODO]{.todo .TODO} shell-command: Print output inline with C-u M-!.

[TODO]{.todo .TODO} Simplify media file transformations: [make-it-so](https://github.com/abo-abo/make-it-so).

[TODO]{.todo .TODO} [yatemplate](https://github.com/mineo/yatemplate).

[TODO]{.todo .TODO} [emacs-helm-xcdoc](https://github.com/fujimisakari/emacs-helm-xcdoc).

OBSOLETE [Drill down org files using orgnav (helm-based)](https://github.com/facetframer/orgnav).

OBSOLETE [Prettier emacs](https://github.com/prettier/prettier-emacs). (use [reformatter.el](https://github.com/purcell/reformatter.el).)

OBSOLETE [Spaceline walkthrough](http://amitp.blogspot.co.uk/search/label/emacs).

OBSOLETE Try out emacs Android debug (see this [post](http://gregorygrubbs.com/development/tips-on-android-development-using-emacs/)).

OBSOLETE [quickrun.el](https://github.com/syohex/emacs-quickrun).

OBSOLETE [Emacs for JavaScript](https://github.com/zakame/emacs-for-javascript).

OBSOLETE [go-gopath](https://github.com/iced/go-gopath/blob/master/README.md).

OBSOLETE [shift-number.el](https://github.com/alezost/shift-number.el).

OBSOLETE [<https://github.com/xuchunyang/DevDocs.el>](https://github.com/xuchunyang/DevDocs.el).

OBSOLETE [select-themes](https://github.com/jasonm23/emacs-select-themes/blob/master/select-themes.el).

OBSOLETE [Emacs purpose](https://github.com/bmag/helm-purpose).

OBSOLETE [Why are you changing gc-cons-threshold?](http://bling.github.io/blog/2016/01/18/why-are-you-changing-gc-cons-threshold/).

OBSOLETE [Corral](https://github.com/nivekuil/corral).

OBSOLETE [xcode-mode](https://github.com/nicklanasa/xcode-mode/blob/master/README.md).

OBSOLETE [commenter](https://github.com/yuutayamada/commenter).

OBSOLETE [Emacs JavaScript helpers](https://github.com/ustun/emacs-helpers-for-js/blob/master/uojs.el).

OBSOLETE [yahoo-weather-mode](https://github.com/lujun9972/yahoo-weather-mode).

OBSOLETE [Peek at peteyy's Javascript config](https://github.com/peteyy/.emacs.d/blob/master/settings/language-javascript.el).

OBSOLETE [import-js](https://github.com/trotzig/import-js).

OBSOLETE [ES6 yasnippets](https://github.com/CodyReichert/es6-snippets).

OBSOLETE [swank-js](https://github.com/swank-js/swank-js).

OBSOLETE [TypeScript Interactive Development Environment for Emacs](https://github.com/ananthakumaran/tide).

[DONE]{.done .DONE} Try out [cquery](https://github.com/jacobdufault/cquery/blob/master/emacs/cquery.el), [emacs-lsp](https://github.com/emacs-lsp/lsp-mode), and [company-lsp](https://github.com/tigersoldier/company-lsp).

[DONE]{.done .DONE} (setq projectile-use-git-grep t). \<2018-12-27 Thu\>

[DONE]{.done .DONE} [Is there any easy way to make .org files password protected? (Reddit)](https://www.reddit.com/r/emacs/comments/46lv2q/is_there_any_easy_way_to_make_org_files_password/).

[DONE]{.done .DONE} use-package binding to different maps

``` {.commonlisp org-language="emacs-lisp"}
(use-package term
  :bind
  (:map
   term-mode-map
   ("M-p" . term-send-up)
   ("M-n" . term-send-down)
   :map term-raw-map
   ("M-o" . other-window)
   ("M-p" . term-send-up)
   ("M-n" . term-send-down)))
```

[DONE]{.done .DONE} [Emacs qrencode](https://github.com/syohex/emacs-qrencode/blob/master/README.md).

[DONE]{.done .DONE} [Smartparens](https://github.com/Fuco1/smartparens).

[DONE]{.done .DONE} [Hash region](https://gist.github.com/syohex/626af66ba3650252b0a2).

[DONE]{.done .DONE} [helm-ispell](https://github.com/syohex/emacs-helm-ispell).

[DONE]{.done .DONE} [Pack/unpack files with atool on dired](https://github.com/HKey/dired-atool).

[DONE]{.done .DONE} [company-shell](https://github.com/Alexander-Miller/company-shell).

[DONE]{.done .DONE} artbollocks-mode and writegood. More at Sacha's [post](http://sachachua.com/blog/2011/12/emacs-artbollocks-mode-el-and-writing-more-clearly/).

[DONE]{.done .DONE} comint-prompt-read-only for making shell prompts read-only.

[DONE]{.done .DONE} [org-page](https://github.com/kelvinh/org-page): Static blog.

[DONE]{.done .DONE} [I just realized Emacs has a fast infix calculator that's not calc or quick-calc… (Reddit)](https://www.reddit.com/r/emacs/comments/43b42y/i_just_realized_emacs_has_a_fast_infix_calculator/).

[DONE]{.done .DONE} [How to get emacs key bindings in Ubuntu](http://promberger.info/linux/2010/02/16/how-to-get-emacs-key-bindings-in-ubuntu/).

[DONE]{.done .DONE} [org-autolist](https://github.com/calvinwyoung/org-autolist).

[DONE]{.done .DONE} Move up by parens: More at the [manual](https://www.gnu.org/software/emacs/manual/html_node/emacs/Moving-by-Parens.html).

[DONE]{.done .DONE} sunrise-sunset.

[DONE]{.done .DONE} [ace-window](https://github.com/abo-abo/ace-window).

[DONE]{.done .DONE} Checkdoc.

[DONE]{.done .DONE} Choose magit repo c-u c-x g (magit-status).

[DONE]{.done .DONE} continue comment blocks: m-j (indent-new-comment-line).

[DONE]{.done .DONE} Debug expanded elisp macros: See Wisdom and Wonder's [post](http://www.wisdomandwonder.com/link/9316/how-to-debug-expanded-elisp-macros).

[DONE]{.done .DONE} delete-duplicate-lines

[DONE]{.done .DONE} Describe bindings: C-h b lists all bindings.

[DONE]{.done .DONE} Disable furniture

``` {.commonlisp org-language="emacs-lisp"}
(menu-bar-mode -1)
(toggle-scroll-bar -1)
(tool-bar-mode -1)
```

[DONE]{.done .DONE} [elmacro](https://github.com/silex/elmacro) shows keyboard as emacs lisp.

[DONE]{.done .DONE} yasnippet mirrors with transformations more at [snippet development](https://capitaomorte.github.io/yasnippet/snippet-development.html#sec-3-6).

For example:

``` {.bash org-language="sh"}
- (${1:id})${2:foo}
{
    return $2;
}

- (void)set${2:$(capitalize yas-text)}:($1)avalue
{
    [$2 autorelease];
    $2 = [avalue retain];
}
$0
```

[DONE]{.done .DONE} Emacs regex: [Emacs: text pattern matching (regex) tutorial](http://ergoemacs.org/emacs/emacs_regex.html).

[DONE]{.done .DONE} export ascii art: [artist mode](http://www.lysator.liu.se/~tab/artist/) + [ditaa](http://ditaa.sourceforge.net) for uml. demo [video](https://www.youtube.com/watch?v=ciux87xo8fc).

[DONE]{.done .DONE} [lispy](https://github.com/abo-abo/lispy).

[DONE]{.done .DONE} [minimal](https://github.com/dandavison/minimal): minimalist appearance.

[DONE]{.done .DONE} Narrowing regions

-   c-x n n (narrow-to-region).
-   c-x n w (Widen).

[DONE]{.done .DONE} [nxml-mode](https://www.gnu.org/software/emacs/manual/nxml-mode.html).

[DONE]{.done .DONE} [org-beautify-theme](https://github.com/jonnay/emagicians-starter-kit/blob/master/themes/org-beautify-theme.org): a sub-theme to make org-mode more beautiful.

[DONE]{.done .DONE} Recursive query/replace

-   M-x find-dired RET.
-   Navigate to location, RET.
-   Add find argument (omit for all files), RET.
-   t (select all).
-   Q (query-replace).
-   Enter search/replace terms.
-   y/n for each match.
-   C-x s ! (save all).

[DONE]{.done .DONE} Repeat last command: C-x z (and just z threreafter).

[DONE]{.done .DONE} Replace char with a newline

-   M-x replace-string RET ; RET C-q C-j.
-   C-q (quoted-insert).
-   C-j (newline).

[DONE]{.done .DONE} [smart-mode-line](https://github.com/bruce-connor/smart-mode-line), [sacha's sample usage](http://pages.sachachua.com/.emacs.d/sacha.html).

[DONE]{.done .DONE} Toggling key bingings: [ode to the toggle](http://oremacs.com/2014/12/25/ode-to-toggle/).

[DONE]{.done .DONE} [unify-opening](https://github.com/damiencassou/unify-opening)

[DONE]{.done .DONE} use-package: [lunaryorn](http://www.lunaryorn.com/2015/01/06/my-emacs-configuration-with-use-package.html).

[DONE]{.done .DONE} [sunshine.el](https://github.com/aaronbieber/sunshine.el).

[DONE]{.done .DONE} youtube-dl: [or emacs](http://oremacs.com/2015/01/05/youtube-dl/).

# \[2014-07-09 Wed\] Installing Emacs 24.4 on Linux
---
id: installing-emacs--on-linux
---

``` {.bash org-language="sh"}
sudo apt-get install texinfo build-essential xorg-dev libgtk-3-dev libjpeg-dev libncurses5-dev libgif-dev libtiff-dev libm17n-dev libpng12-dev librsvg2-dev libotf-dev
```

# \[2014-07-09 Wed\] Installing Emacs 24.4 on Mac OS X
---
id: installing-emacs-24-4-on-mac-os-x
---

See Yamamoto's Mac OS X [port](https://github.com/railwaycat/emacs-mac-port). To install:

``` {.bash org-language="sh"}
$ brew tap railwaycat/emacsmacport
$ brew install emacs-mac
```

# \[2014-11-02 Sun\] Xcode6 tips
---
id: xcode6-tips
---

From Ray Wenderlich's [tech talk](http://www.raywenderlich.com/85999/xcode-6-tips-tricks-tech-talk-video) And [supercharging Your Xcode Efficiency (by Jack Wu)](http://www.raywenderlich.com/72021/supercharging-xcode-efficiency).

## Shortcuts

-   ⌘⇧o Fuzzy file search.
-   ⌘⌥j Fuzzy file search (showing in Xcode project hierarchy).
-   ⌘⇧j Show file in Xcode project hierarchy.
-   ⌘⌥0 Show/hide utility area (right panel).
-   ⌘0 Show/hide navigation area (left panel).
-   ⇧⌘Y Show/hide debug area (bottom panel).
-   Ctrli Indent selection.
-   ⌘\\ Toggle breakpoint on line.
-   ⌘/ Toggle comment.
-   ⌘\[1-8\] Select tabs on left panel.
-   Ctrl\[1-x\] Select top file navigation menu items.

## Xcode features

-   Snippets.
-   Templates.
-   View debugging.
-   Simctl (send files to simulator).

## Plugins of interest

-   Fuzzy autocomplete.
-   Uncrustify for indentation.
-   xcs code switch expansion.
-   Org and order (for properties).

# \[2015-12-12 Sat\] Simple ssh tunnel
---
id: simple-ssh-tunnel
---

Via [\@climagic](https://twitter.com/climagic/status/674688454526136320?refsrc%3Demail&s%3D11), connections to tcp localhost:9909 will be made to 192.168.1.1:80 via SSH tunnel to home.

``` {.bash org-language="sh"}
ssh -L 9909:192.168.1.1:80 home
```

# \[2014-09-20 Sat\] gpg/pgp bookmarks
---
id: gpgpgp-bookmarks
---



-   [Backup or transfer your keys / GPG Keychain FAQ / Knowledge Base - GPGTools Support](https://gpgtools.tenderapp.com/kb/gpg-keychain-faq/backup-or-transfer-your-keys).
-   [Creating the perfect GPG keypair - Alex Cabal](https://alexcabal.com/creating-the-perfect-gpg-keypair).
-   [Gmail, Gnus and GPG guide](https://github.com/kensanata/ggg).
-   [GnuPG2 snippets - emacsist](https://emacsist.github.io/2019/01/01/gnupg2使用指北/).
-   [NIST Special Publication: Recommendation for Key Management](https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-57pt1r4.pdf).
-   [OpenPGP Best Practices - riseup.net](https://riseup.net/en/security/message-security/openpgp/best-practices).
-   [Securing My Digital Life: GPG, Yubikey, & SSH on macOS](https://medium.com/@ahawkins/securing-my-digital-life-gpg-yubikey-ssh-on-macos-5f115cb01266).
-   [The GNU Privacy handbook](https://www.gnupg.org/gph/en/manual.html).

# \[2025-02-04 Tue\] Raspberry Pi bookmarks
---
id: raspberry-pi-bookmarks
---

-   [Raspberry Pi 5: Getting Started - YouTubee](https://youtu.be/UtLyX72-688).

# \[2014-09-20 Sat\] Emacs lisp bookmarks
---
id: emacs-lisp-bookmarks
---



-   [(setq search-whitespace-regexp ".\*?") isearch "abc ghi" matches "abcdefghi"](https://twitter.com/kaushalmodi/status/1059873868175826946?s=12).
-   [A quick guide to Emacs Lisp programming](https://github.com/kinghom/elisp-guide).
-   [A snippet to try out fonts](https://github.com/alphapapa/unpackaged.el#font-compare).
-   Abo abo's [Emacs Lisp Guide](https://github.com/abo-abo/elisp-guide).
-   [Adding A New Language to Emacs (ie. writing a new major mode)](http://www.wilfred.me.uk/blog/2015/03/19/adding-a-new-language-to-emacs/).
-   [alphapapa's The Emacs Package Developer’s Handbook](https://github.com/alphapapa/emacs-package-dev-handbook).
-   [An Async / Await Library for Emacs Lisp « null program](https://nullprogram.com/blog/2019/03/10/).
-   [An introduction to emacs lisp](http://harryrschwartz.com/2014/04/08/an-introduction-to-emacs-lisp.html).
-   [An iterator for traversing a directory path](https://elpa.gnu.org/packages/path-iterator.html).
-   [Async autocompletion in Emacs – Kraken of Thought](https://www.badykov.com/emacs/2020/05/05/async-company-mode-backend/).
-   [Caio Rordrigues's Elisp Snippets](http://caiorss.github.io/Emacs-Elisp-Programming/Elisp_Snippets.html).
-   [Caio's Emacs - Programming and Customization](https://github.com/caiorss/Emacs-Elisp-Programming).
-   [Category:Emacs Lisp - Rosetta Code](https://rosettacode.org/wiki/Category:Emacs_Lisp).
-   [Common Lisp Loops – Tony Ballantyne Tech](https://tech.tonyballantyne.com/emacs/lisp-loops/).
-   [Date and Time – Tony Ballantyne Tech](https://tech.tonyballantyne.com/emacs/date-and-time/).
-   [eldoc-mode](http://www.emacswiki.org/emacs/ElDoc).
-   [elexandria/elexandria.el's with-file-buffer macro](https://github.com/alphapapa/elexandria/blob/a22b12f3472baa617545d2f247ea41f5ef70a488/elexandria.el#L103).
-   [ElispCheatSheet: Quick reference to the core language of Emacs —Editor MACroS.](https://github.com/alhassy/ElispCheatSheet).
-   [Emacs - Elisp Programming and Customization](https://github.com/caiorss/Emacs-Elisp-Programming).
-   [Emacs Elisp Programming guide](https://caiorss.github.io/Emacs-Elisp-Programming/Elisp_Programming.html).
-   [Emacs Lisp Guide, chrisdone/elisp-guide · GitHub](https://github.com/chrisdone/elisp-guide/blob/master/README.md).
-   [Emacs sqlite binding of Emacs Lisp inspired by mruby-sqlite3](https://github.com/larsmagne/emacs-sqlite3).
-   [Emacs symbol notation](http://www.emacswiki.org/emacs/EmacsSymbolNotation).
-   [emacs-bencode: Bencode package for Emacs Lisp (encoding losely structured data)](https://github.com/skeeto/emacs-bencode).
-   [Emacs: Pattern Matching with pcase](http://newartisans.com/2016/01/pattern-matching-with-pcase/).
-   [Error Handling in Emacs Lisp](https://curiousprogrammer.wordpress.com/2009/06/08/error-handling-in-emacs-lisp/).
-   [Example showing how useful the ample-regexps package is : emacs](https://www.reddit.com/r/emacs/comments/9auzla/example_showing_how_useful_the_ampleregexps/).
-   [find-library](http://www.emacswiki.org/emacs/find-library.el).
-   [format-table: Parse and reformat tabular data in emacs (Looks great for converting between org, json, and other RDBMS)](https://github.com/functionreturnfunction/format-table).
-   [GitHub - alphapapa/ts.el: Emacs date-time library](https://github.com/alphapapa/ts.el).
-   [GitHub - brandelune/nipel: New Introduction to Programming in Emacs Lisp](https://github.com/brandelune/nipel).
-   [GitHub - Lindydancer/face-explorer: Library and tools for faces and text properties](https://github.com/Lindydancer/face-explorer).
-   [GitHub - p3r7/awesome-elisp: A curated list of emacs-lisp development resources](https://github.com/p3r7/awesome-elisp).
-   [GitHub - Wilfred/ht.el: The missing hash table library for Emacs](https://github.com/Wilfred/ht.el).
-   [GitHub - xuchunyang/elisp-demos: Demonstrate Emacs Lisp APIs](https://github.com/xuchunyang/elisp-demos/).
-   [Good Style in modern Emacs Packages](http://ruzkuku.com/texts/emacs-style.html).
-   [Harry R. Schwartz's An Introduction to Emacs Lisp](https://harryrschwartz.com/2014/04/08/an-introduction-to-emacs-lisp.html).
-   [How to choose Emacs Lisp package namespace prefix](https://yoo2080.wordpress.com/2013/09/22/how-to-choose-emacs-lisp-package-namespace-prefix).
-   [How to Make an Emacs Minor Mode](http://nullprogram.com/blog/2013/02/06/).
-   [How to read emacs lisp](http://emacslife.com/how-to-read-emacs-lisp.html).
-   [It's not hard to edit Lisp code](https://yoo2080.wordpress.com/2014/07/20/it-is-not-hard-to-edit-lisp-code/).
-   [Learn elisp the hard way](https://github.com/hypernumbers/learn_elisp_the_hard_way/blob/master/contents/why-did-I-write-this-book.rst).
-   [Learn Emacs Lisp in 15 minutes - Bastien Guerry](https://bzg.fr/en/learn-emacs-lisp-in-15-minutes/).
-   [Learn emacs lisp in 15 minutes](http://bzg.fr/learn-emacs-lisp-in-15-minutes.html).
-   [Links and exported HTML](http://thewanderingcoder.com/2015/01/emacs-org-mode-links-and-exported-html/).
-   [Living with Emacs Lisp](https://yoo2080.wordpress.com/2013/08/07/living-with-emacs-lisp).
-   [LOOP for Black Belts](http://www.gigamonkeys.com/book/loop-for-black-belts.html).
-   [Marcin Borkowski: 2018-12-03 looking-back-p](http://mbork.pl/2018-12-03_looking-back-p).
-   [Marcin Borkowski: 2019-03-25 Using benchmark to measure speed of Elisp code](http://mbork.pl/2019-03-25_Using_benchmark_to_measure_speed_of_Elisp_code).
-   [Nongnu elisp guidelines](http://www.nongnu.org/emacs-tiny-tools/elisp-coding/).
-   [Pattern matching with pcase](http://newartisans.com/2016/01/pattern-matching-with-pcase/).
-   [Pattern Matching: pcase – Tony Ballantyne Tech](https://tech.tonyballantyne.com/emacs/pattern-matching-pcase/).
-   [Read Lisp, Tweak Emacs](http://emacslife.com/how-to-read-emacs-lisp.html).
-   [Reading from stdin and writing to stdout with Emacs batch](https://joelmccracken.github.io/entries/reading-writing-data-in-emacs-batch-via-stdin-stdout/).
-   [Refactoring “Beginning Emacs Lisp”: I: Adding Tests](http://thewanderingcoder.com/2015/02/refactoring-beginning-emacs-lisp-i-adding-tests/).
-   [Selecting and trying out different fonts in Emacs](https://gist.github.com/equwal/89b1ef5ac8d4d737cfd37f66e9ba4895).
-   [Slime-style navigation for Emacs Lisp](https://github.com/purcell/elisp-slime-nav).
-   [Split a List Into Batches Using Emacs Lisp - Hung-Yi’s Journal](https://hungyi.net/posts/split-list-into-batches-elisp/).
-   [Testing Emacs code that modifies buffers](https://zck.me/testing-buffer-modifying-emacs-code).
-   [Tips on Emacs Lisp programming](http://nic.ferrier.me.uk/blog/2012_07/tips-and-tricks-for-emacslisp).
-   [Understanding letf and how it replaces flet · Endless Parentheses](http://endlessparentheses.com/understanding-letf-and-how-it-replaces-flet.html).
-   [Variable Pitch Tables](https://github.com/larsmagne/vpt.el/blob/master/vpt.el).
-   [vpt.el: An Emacs package to display tabular data with variable pitch fonts](https://github.com/larsmagne/vpt.el).
-   [Watch a directory using elisp (larsmagne)](https://github.com/larsmagne/watch-directory.el/blob/master/watch-directory.el).
-   [watch-directory.el watches a directory for new files](https://github.com/larsmagne/watch-directory.el/blob/master/watch-directory.el).
-   [What's the best practice to write emacs-lisp (at 2016)? (Reddit)](https://www.reddit.com/r/emacs/comments/43nh3h/whats_the_best_practice_to_write_emacslispat_2016/).
-   [What's wrong with \`find-file-noselect\`? (Emacs Stack Exchange)](https://emacs.stackexchange.com/questions/2868/whats-wrong-with-find-file-noselect).
-   [Wikemacs's Emacs Lisp Cookbook](http://wikemacs.org/wiki/Emacs_Lisp_Cookbook).
-   [with-emacs · (Almost) All You Need to Know About Variables](https://with-emacs.com/posts/tutorials/almost-all-you-need-to-know-about-variables/).
-   [with-suppressed-message macro](https://qiita.com/itiut@github/items/d917eafd6ab255629346).
-   [Writing a Spotify Client](https://www.youtube.com/watch?v=XjKtkEMUYGc&feature=youtu.be).
-   [Writing Web apps in Emacs Lisp (simple-httpd)](https://iloveemacs.wordpress.com/2016/02/27/writing-web-apps-in-emacs-lisp/).
-   [Xah Lee's Emacs Lisp Symbol (tutorial)](http://ergoemacs.org/emacs/elisp_symbol.html).
-   [Xah's Common Emacs Lisp Functions](http://ergoemacs.org/emacs/elisp_common_functions.html).
-   [Xah's Emacs Lisp idioms for Text Processing in Batch Style](http://ergoemacs.org/emacs/elisp_idioms_batch.html).
-   [Xah's Emacs Lisp Tutorial](http://ergoemacs.org/emacs/elisp.html).
-   [XML utilities for Emacs lisp](https://github.com/bddean/xml-plus).
-   [Xu Chunyang's Elisp demos/examples/snippets ](https://github.com/xuchunyang/elisp-demos/blob/master/elisp-demos.org).

# \[2025-02-04 Tue\] Alzheimer bookmarks
---
id: alzheimer-bookmarks
---



-   [#NYC #Alzheimer's Association hybrid event (in-person and Zoom)](https://indieweb.social/@cindyweinstein@mastodon.world/112485121178707057).
-   [Dementia Training Australia (DTA), Free online courses and resources](https://dta.com.au/).
-   [Woman claims Alzheimer’s symptoms were reversed after five years \| CNN](https://www.cnn.com/2024/05/16/health/video/gupta-alzheimers-reversed-patient-digvid).

# \[2014-09-19 Fri\] Emacs bookmarks
---
id: emacs-bookmarks
---



-   [Multi-Monitor Compatible Code to Center Emacs Frames on Screen • Christian Tietze](https://christiantietze.de/posts/2021/06/emacs-center-window-on-current-monitor/).
-   [Bridging Islands in Emacs: re-builder and query-replace-regexp \| Karthinks](https://karthinks.com/software/bridging-islands-in-emacs-1/).
-   [Colin Woodbury - Contributing to Emacs](https://www.fosskers.ca/en/blog/contributing-to-emacs).
-   [Configuring Emacs and Eglot to work with Astro language server \| by Jayaram \|…](https://medium.com/@jrmjrm/configuring-emacs-and-eglot-to-work-with-astro-language-server-9408eb709ab0).
-   [Emacs Tramp tricks](https://willschenk.com/articles/2020/tramp_tricks/).
-   [Export an environment variable to Emacs \| Snippets and other bits](https://philjackson.github.io//emacs/shell/2021/07/26/export-an-environment-variable-to-emacs/).
-   [GitHub - federicotdn/verb: HTTP client for Emacs](https://github.com/federicotdn/verb) (alternative to restclient).
-   [How to Assign Copyright — Free Software Foundation](https://www.fsf.org/licensing/assigning.html).
-   [Lesser known functionalities in core Emacs (see setq-mode-local)](https://ruzkuku.com/texts/lesser-known.html#m-x-find-library-mode-local-ret-2004).
-   [Lesser known functionalities in core Emacs](https://ruzkuku.com/texts/lesser-known.html).
-   [Modern Emacs Typescript Web (React) Config with lsp-mode, treesitter, tailwin…](https://www.ovistoica.com/blog/2024-7-05-modern-emacs-typescript-web-tsx-config).
-   [Modern Emacs Typescript Web (React) Config with lsp-mode, treesitter, tailwind…](https://www.ovistoica.com/blog/2024-7-05-modern-emacs-typescript-web-tsx-config).
-   [Save all mu4e attachments \| Snippets and other bits](https://philjackson.github.io/emacs/mu4e/email/2021/08/30/save-all-mu4e-attachments/).
-   [Using Emacs for Container Development: Configuring Emacs for Podman and Docker](https://www.rahuljuliato.com/posts/emacs-docker-podman).

\]\[Christian Tietze: Emacs: center window on current monitor\]\].

-   [.emacs.d/gud-cdb.el (supports lldb)](https://github.com/junjiemars/.emacs.d/blob/master/config/gud-cdb.el).
-   [.emacs.d*gud-lldb.el at master · junjiemars*.emacs.d · GitHub](https://github.com/junjiemars/.emacs.d/blob/master/config/gud-lldb.el).
-   [A GNU Emacs Themes Gallery (great for previewing)](https://emacsthemes.com/).
-   [A Reminder About Macro Counters](http://irreal.org/blog/?p=5378).
-   [A Simple Guide to Writing & Publishing Emacs Packages](https://spin.atomicobject.com/2016/05/27/write-emacs-package/).
-   [A very minimal but elegant emacs (I think) : emacs](https://www.reddit.com/r/emacs/comments/ggnekq/a_very_minimal_but_elegant_emacs_i_think/).
-   [Aaron Bieber's blog](http://blog.aaronbieber.com).
-   [Absolute Beginner's Guide to Emacs](http://www.jesshamrick.com/2012/09/10/absolute-beginners-guide-to-emacs/).
-   [Accessing Devdocs from Emacs](https://scripter.co/accessing-devdocs-from-emacs/).
-   [Advanced Techniques for Reducing Emacs Startup Time](https://blog.d46.us/advanced-emacs-startup).
-   [Ajoke](https://github.com/baohaojun/ajoke).
-   [Amit's Thoughts: Emacs mode line simplified](https://amitp.blogspot.com/2019/07/emacs-mode-line-simplified.html).
-   [An introduction to Magit, an Emacs mode for Git](http://www.masteringemacs.org/article/introduction-magit-emacs-mode-git).
-   [Andrea Corallo: gccemacs Update 10 (July 16, 2020)](https://www.reddit.com/r/emacs/comments/htfwfa/andrea_corallo_gccemacs_update_10_july_16_2020/).
-   [Andrey's Opionated Emacs Guide](http://m00natic.github.io/emacs/emacs-wiki.html).
-   [Animated guide to paredit](http://danmidwood.com/content/2014/11/21/animated-paredit.html).
-   [Any package/solution to fix cursor 1/3 from top of buffer? (ie. alternatives to centered-cursor-mode)](https://www.reddit.com/r/emacs/comments/ehzxhn/any_packagesolution_to_fix_cursor_13_from_top_of/).
-   [Aspell 0.60.8 will have direct support for camelCase words (Update Emacs flyspell setup)](http://blog.binchen.org/posts/aspell-0-60-8-will-have-direct-support-for-camelcase-words.html).
-   [Asynchronous rsync with Emacs, dired and tramp. – vxlabs](https://vxlabs.com/2018/03/30/asynchronous-rsync-with-emacs-dired-and-tramp/).
-   [Automator to open files in Emacs clients by double-clicks](https://oracleyue.github.io/2018/05/13/emacs-setup-md/).
-   [Awesome Emacs](https://github.com/emacs-tw/awesome-emacs/blob/master/README.org).
-   [Awesome shell extension eshell with wonderful features](https://github.com/manateelazycat/aweshell).
-   [Bastien's Emacs training](https://github.com/bzg/emacs-training).
-   [Best practices/tip for Companymode and/or YASnippet](https://www.reddit.com/r/emacs/comments/3r9fic/best_practicestip_for_companymode_andor_yasnippet/).
-   [Blimp - Bustling Image Manipulation Package (Emacs)](https://github.com/walseb/blimp/blob/master/readme.org).
-   [Building Emacs on Macos for Linux Peeps – Random Thoughts](https://lars.ingebrigtsen.no/2020/08/02/emacs-on-macos-for-linux-peeps/).
-   [Building personal search infrastructure for your knowledge and code \| beepb00p](https://beepb00p.xyz/pkm-search.html).
-   [C++ Integration: rtags vs emacs-cquery vs irony-mode (Reddit)](https://www.reddit.com/r/emacs/comments/969wlv/c_integration_rtags_vs_emacsc=query_vs_ironymode/).
-   [C/C++ Completion in Emacs](http://cachestocaches.com/2015/8/c-completion-emacs/).
-   [Can't get Tern mode to work properly (Reddit)](https://www.reddit.com/r/emacs/comments/66pq04/cant_get_tern_mode_to_work_properly/).
-   [Capturing Code Snippets](http://irreal.org/blog/?p=7207).
-   [ccls-navigate: semantic navigation for C/C++/ObjC ](https://www.reddit.com/r/emacs/comments/9dg13i/cclsnavigate_semantic_navigat=ion_for_cc/).
-   [ccls: C/C++/ObjC language server supporting cross references, hierarchies, completion and semantic highlighting](https://github.com/MaskRay/ccls).
-   [Centered Cursor Mode in Vanilla Emacs](https://two-wrongs.com/centered-cursor-mode-in-vanilla-emacs).
-   [Chen Bin's councel/ctags/etags config](https://github.com/redguardtoo/emacs.d/issues/827).
-   [Clangd based Emacs C++ IDE (Doug Davis)](https://ddavis.fyi/blog/2018-07-07-emacs-cpp-ide/).
-   [Colors in emacs -nw (use \~/.Xresources)](https://twitter.com/magit_emacs/status/1284245544160952320).
-   [Compilation notifications in Emacs - Federico's Blog](https://people.gnome.org/~federico/blog/compilation-notifications-in-emacs.html).
-   [Configuring Emacs from Scratch — Intro - Suvrat Apte - Medium](https://medium.com/@suvratapte/configuring-emacs-from-scratch-intro-3157bed9d040).
-   [Configuring emacs to use eslint and babel with flycheck for javascript and React.js JSX](http://codewinds.com/blog/2015-04-02-emacs-flycheck-eslint-jsx.html).
-   [Content AND Presentation](http://mbork.pl/Content_AND_Presentation).
-   [counsel-etags: Fast, energy-saving, and powerful code navigation solution](https://github.com/redguardtoo/counsel-etags#ctags-setup).
-   [Creating an emacs formatter the easy way](https://erick.navarro.io/blog/creating-an-emacs-formatter-the-easy-way/).
-   [Cropping Images in Emacs (Lars Ingebrigtsen)](https://lars.ingebrigtsen.no/2018/11/12/cropping-images-in-emacs/).
-   [Curated list of packages by Ernst de Hart](https://emacs.zeef.com/ehartc).
-   [Custom REPL snippet](https://gist.github.com/maciejsmolinski/ea09a7b6dfabe70fac040915bc266b5e).
-   [Customizing emacs mode line](http://emacs-fu.blogspot.co.uk/2011/08/customizing-mode-line.html).
-   [Da's recipes on Emacs, IT, and more (Da Zhang's web notes)](https://zhangda.wordpress.com/).
-   [Deep diving into a major mode - Part 1 \| Modern Emacs](http://www.modernemacs.com/post/major-mode-part-1/) (handy for writing a REPL).
-   [Deep diving into a major mode - Part 2 (IDE Features) \| Modern Emacs](http://www.modernemacs.com/post/major-mode-part-2/).
-   [dimmer.el (highlights active window)](https://gonewest818.github.io/2020/02/dimmer.el-20200227.1712).
-   [Directory-Local Variables](http://irreal.org/blog/?p=5380).
-   [docker.el: Emacs integration for Docker](https://github.com/Silex/docker.el/blob/master/README.md).
-   [Ediff DWIM function by scripter.co](https://scripter.co/do-ediff-as-i-mean/).
-   [Editing HTML Textareas with Emacs: Bye, bye “It’s All Text! “, Hello “Textern"](https://emacsnotes.wordpress.com/2018/05/14/editing-html-textareas-with-emacs-bye-bye-its-all-text-hello-textern/).
-   [Editing remote code with Emacs (tramp tips) - Umar Ahmad](https://gleek.github.io/blog/2017/04/11/editing-remote-code-with-emacs/).
-   [Editing XML in Emacs](https://lgfang.github.io/mynotes/emacs/emacs-xml.html#sec-5).
-   [Effective editing I:Movement](http://www.masteringemacs.org/articles/2011/01/14/effective-editing-movement/)
-   [Effective emacs tips](http://ergoemacs.org/emacs/effective_emacs.html): From ergoemacs.
-   [Effective emacs](https://sites.google.com/site/steveyegge2/effective-emacs): Steve Yegge's effective emacs tips.
-   [Eglot based Emacs C++ IDE with clangd (ddavis.io)](https://ddavis.io/posts/eglot-cpp-ide/).
-   [elfeed-score: brings Gnus-style scoring to Elfeed](https://github.com/sp1ff/elfeed-score/blob/master/README.org).
-   [Emacs - the Best Python Editor?](https://realpython.com/blog/python/emacs-the-best-python-editor/?utm_content=buffer661a4&utm_medium=social&utm_source=twitter.com&utm_campaign=buffer).
-   [Emacs Advent Calendar 2019 - Qiita](https://qiita.com/advent-calendar/2019/emacs).
-   [Emacs and macOS Catalina issues (twitter)](https://twitter.com/sanityinc/status/1182877775746588672).
-   [Emacs and the Language Server Protocol - Morten's Dev](https://www.mortens.dev/blog/emacs-and-the-language-server-protocol/).
-   [Emacs as a C# development environment - Josh Wolfe](https://joshwolfe.ca/post/emacs-for-csharp/).
-   [Emacs as my UE4 IDE with intellisense](https://forums.unrealengine.com/showthread.php?52891-Emacs-as-my-UE4-IDE-with-intellisense).
-   [EMACS CAN HAZ FANCY MEME – Random Thoughts](https://lars.ingebrigtsen.no/2016/06/28/emacs-can-haz-fancy-meme/).
-   [Emacs configuration](http://www.swaroopch.com/2013/10/17/emacs-configuration-tutorial): Simplify package management with cask.
-   [Emacs Fodder](http://emacsfodder.github.io/).
-   [Emacs for Cocoa development](https://sites.google.com/site/drielsma/xcodeplusemacs).
-   [Emacs for developers](https://github.com/pierre-lecocq/emacs4developers).
-   [Emacs for the React developer (Patrick Skiba)](https://patrickskiba.com/emacs/2019/09/07/emacs-for-react-dev.html).
-   [Emacs for the React developer \| Patrick Skiba](https://patrickskiba.com/emacs/2019/09/07/emacs-for-react-dev.html).
-   [Emacs for Web/Javascript Dev: rjsx, web-mode, tide, js2…..etc?](https://www.reddit.com/r/emacs/comments/ca6q7v/emacs_for_web_dev_rjsx_webmode_tide_js2etc/).
-   [Emacs for Xcode+ios Development](http://roupam.github.io/).
-   [Emacs frame as a pop-up input - Noetic Nought](https://punchagan.muse-amuse.in/blog/emacs-frame-as-a-pop-up-input/).
-   [Emacs from scratch (huytd)](https://huytd.github.io/emacs-from-scratch.html).
-   [Emacs Gifts & Merchandise \| Redbubble](https://www.redbubble.com/shop/emacs).
-   [Emacs Go Mode – Revisited – arenzana.org](https://arenzana.org/2019/12/emacs-go-mode-revisited/).
-   [Emacs goodies](http://www.reddit.com/r/emacs/comments/1rck3u/what_do_you_use_to_navigate_code): Emacs post with tips for navigating code.
-   [Emacs horrors](http://emacshorrors.com).
-   [Emacs Hydra: Allow completion when I can't remember the command name](https://sachachua.com/blog/2021/04/emacs-hydra-allow-completion-when-i-can-t-remember-the-command-name/).
-   [Emacs in one year](https://github.com/redguardtoo/mastering-emacs-in-one-year-guide/blob/master/guide-en.org): Someone's emacs experience over a year.
-   [Emacs is sexy](http://emacs.sexy/).
-   [Emacs Keybindings for Mac OS X](http://irreal.org/blog/).
-   [Emacs keybindings for vimium](https://gist.github.com/avendael/7028579).
-   [Emacs live](http://overtone.github.io/emacs-live/).
-   [Emacs modules (Philipp’s documents)](https://phst.eu/emacs-modules).
-   [Emacs Nifty tricks](http://www.emacswiki.org/emacs/EmacsNiftyTricks): Another source of emacs goodness.
-   [Emacs NYC videos](http://emacsnyc.org/videos.html).
-   [Emacs package integrating khard, a console cardav client](https://gitea.petton.fr/DamienCassou/khardel).
-   [Emacs redux](http://emacsredux.com/).
-   [Emacs rocks](http://emacsrocks.com).
-   [Emacs Rust module](https://ubolonton.github.io/emacs-module-rs/0.8.0/).
-   [Emacs Setup (macOS) - Alexandru Nedelcu](https://alexn.org/wiki/emacs.html).
-   [Emacs snippet: Typescript with CSS in JS, JSX and graphql highlighing.](https://gist.github.com/rangeoshun/67cb17392c523579bc6cbd758b2315c1).
-   [Emacs striptease (removing furniture)](http://bzg.fr/emacs-strip-tease.html).
-   [Emacs Tramp tricks (including docker snippet)](https://willschenk.com/articles/2020/tramp_tricks/).
-   [Emacs Tramp very slow on connection (The FreeBSD Forums)](https://forums.freebsd.org/threads/emacs-tramp-very-slow-on-connection.64498/).
-   [Emacs workshop](http://planet.emacsen.org/).
-   [Emacs \| less](http://lavnir.be/wp/).
-   [Emacs – The Best Python Editor? – Real Python](https://realpython.com/emacs-the-best-python-editor/).
-   [Emacs, fonts and fontsets](https://idiocy.org/emacs-fonts-and-fontsets.html).
-   [Emacs, GnuPG and Pass \| jherrlin](https://jherrlin.github.io/posts/emacs-gnupg-and-pass/).
-   [emacs-launcher: A launcher for programs, files, folders, web pages and other, using Emacs (supersedes anything-launcher)](https://github.com/mathiasdahl/emacs-launcher).
-   [emacs-lsp/dap-mode: Debug Adapter Protocol for Emacs (Swift included)](https://github.com/emacs-lsp/dap-mode#swift).
-   [emacs-lsp/lsp-ivy: ivy workspace symbols offered by lsp-mode](https://github.com/emacs-lsp/lsp-ivy/tree/78c1429c62c19006058b89d462657e1448d1e595).
-   [emacs.d/nativecomp.md (gccemacs)](https://github.com/shshkn/emacs.d/blob/master/docs/nativecomp.md).
-   [Emacs: No modeline](https://www.alexgallego.org/emacs/productivity/2016/01/16/emacs-no-modeline.html).
-   [Emacs: The Best Python Editor? – Real Python](https://realpython.com/emacs-the-best-python-editor/).
-   [Emacsclient –eval with command line arguments? : emacs](https://www.reddit.com/r/emacs/comments/hhbcg7/emacsclient_eval_with_command_line_arguments/).
-   [Emacslife](http://emacslife.com/).
-   [emacsql-sqlite3: Yet another EmacSQL backend for SQLite](https://github.com/cireu/emacsql-sqlite3).
-   [EmacsWiki: Creating Your Own Compile Error Regexp](https://www.emacswiki.org/emacs/CreatingYourOwnCompileErrorRegexp).
-   [EmacsWiki: Eshell For Loop](https://www.emacswiki.org/emacs/EshellForLoop).
-   [Emagicians starter kit](https://github.com/jonnay/emagicians-starter-kit).
-   [emax64: 64-bit Emacs for Windows with ImageMagick 7](https://github.com/m-parashar/emax64).
-   [Endless parenthesis](http://endlessparentheses.com).
-   [Enterprise Java Development in Emacs](http://www.skybert.net/emacs/java/).
-   [Eshell as a main shell](https://ambrevar.xyz/emacs-eshell/).
-   [eshell-prompt-extras: Display extra information and color for your eshell prompt](https://github.com/kaihaosw/eshell-prompt-extras/blob/master/README.md).
-   [Evan Misshula (lots of great tutorials)](http://www.misshula.org/category/tutorials.html).
-   [Evgeni Kolev Blog - Travis CI integration for emacs packages](http://edkolev.github.io/posts/2017-09-10-travis-for-emacs-packages.html).
-   [Example of Syntax Highlighting](http://mitchfincher.blogspot.co.uk/2017/03/example-of-syntax-highlighting-with.html).
-   [Exploring Emacs chart Library (chart-bar-quickie)](https://francismurillo.github.io/2017-04-15-Exploring-Emacs-chart-Library/).
-   [extend #emacs to run an interactive REPL process](https://twitter.com/maciejsmolinski/status/1269886224774451200).
-   [feed-builder.el: An RSS (and Atom?) generator : emacs](https://www.reddit.com/r/emacs/comments/973418/feedbuilderel_an_rss_and_atom=_generator/).
-   [Find Commits Affecting a Function (Irreal)](http://irreal.org/blog/?p=7359).
-   [Fiplr](https://github.com/d11wtq/fiplr): An Emacs Fuzzy Find in Project Package.
-   [Fix Emacs permissions on macOS Catalina](https://gist.github.com/dive/f64c645a9086afce8e5dd2590071dbf9).
-   [Flx for emacs](https://github.com/lewang/flx): Sublime-style searching for emacs.
-   [Format XML like a pro](https://manuel-uberti.github.io//emacs/2019/07/18/reformatter/).
-   [From Vim to Emacs+Evil chaotic migration guide](https://juanjoalvarez.net/es/detail/2014/sep/19/vim-emacsevil-chaotic-migration-guide/).
-   [Fukuyama's Emacs/iOS](http://fukuyama.co).
-   [gccemacs on OSX (mikroskeem's gist)](https://gist.github.com/mikroskeem/0a5c909c1880408adf732ceba6d3f9ab#gistcomment-3294346).
-   [GCMH - the Garbage Collector Magic Hack](https://gitlab.com/koral/gcmh).
-   [Get desktop notifications from Emacs shell commands ·](https://blog.hoetzel.info/post/eshell-notifications).
-   [Get Stackoverflow answers with completion (without Helm) : emacs](https://www.reddit.com/r/emacs/comments/e8cm8x/get_stackoverflow_answers_with_completion_without/).
-   [GhostText: Use Emacs to write in your browser](https://github.com/GhostText/GhostText/blob/master/README.md).
-   [Git diffs using Emacs ediff](http://whatworks4me.wordpress.com/2011/04/13/view-git-diffs-in-emacs-using-ediff/).
-   [git-identity.el: Manage multiple Git identities from inside Emacs](https://github.com/akirak/git-identity.el).
-   [GitHub - alphapapa/yequake: Drop-down Emacs frames, like Yakuake (modal emacs frames)](https://github.com/alphapapa/yequake).
-   [GitHub - AndreaCrotti/yasnippet-snippets: a collection of yasnippet](https://github.com/AndreaCrotti/yasnippet-snippets).
-   [GitHub - bastibe/annotate.el: Annotate.el](https://github.com/bastibe/annotate.el).
-   [GitHub - bzg/emacs-training: Emacs training](https://github.com/bzg/emacs-training).
-   [GitHub - CeleritasCelery/company-async-files: company-files with an async banckend](https://github.com/CeleritasCelery/company-async-files).
-   [GitHub - chuntaro/epaint: A simple paint tool for Emacs](https://github.com/chuntaro/epaint).
-   [GitHub - dieggsy/esh-autosuggest: Fish-like autosuggestions in eshell.](https://github.com/dieggsy/esh-autosuggest).
-   [GitHub - emacs-jp/dmacro: Repeated detection and execution of key operationw](https://github.com/emacs-jp/dmacro).
-   [GitHub - gexplorer/simple-modeline: A simple mode-line for Emacs.](https://github.com/gexplorer/simple-modeline).
-   [GitHub - joaotavora/eglot: A client for Language Server Protocol servers](https://github.com/joaotavora/eglot).
-   [GitHub - mmontone/template-overlays: Emacs overlays for template files](https://github.com/mmontone/template-overlays).
-   [GitHub - p3r7/space-theming: A port of Spacemacs theming layer to vanilla Emacs](https://github.com/p3r7/space-theming).
-   [GitHub - politza/pdf-tools: Emacs support library for PDF files.](https://github.com/politza/pdf-tools).
-   [GitHub - rougier/elegant-emacs: A very minimal but elegant emacs (I think)](https://github.com/rougier/elegant-emacs).
-   [GitHub - sebastiencs/company-box: A company front-end with icons](https://github.com/sebastiencs/company-box).
-   [GitHub - takaxp/moom: A Moom port to Emacs - Make your dominant hand FREE from your mouse (easily move frames)](https://github.com/takaxp/moom).
-   [GitHub - wbolster/emacs-direnv: direnv integration for emacs](https://github.com/wbolster/emacs-direnv).
-   [GitHub - xuchunyang/another-emacs-server: An Emacs server built on HTTP and JSON](https://github.com/xuchunyang/another-emacs-server).
-   [GitHub - yyoncho/dap-mode: Debug Adapter Protocol for Emacs (Java/Python)](https://github.com/yyoncho/dap-mode/).
-   [GitHub - zk-phi/electric-case: automatic foo-bar to fooBar and foo_bar](https://github.com/zk-phi/electric-case).
-   [Github continuous integration for your Emacs init (yml config)](https://github.com/stapelberg/configfiles/blob/master/.github/workflows/emacs.yml).
-   [gnuplot Emacs config](https://github.com/rememberYou/.emacs.d/blob/b00402c2b51d0435ca8b0267ef71f5fa3558d41a/config.org#gnuplot).
-   [Go Delve - Debug Go programs interactively with the GUD](https://github.com/benma/go-dlv.el).
-   [GPG In Emacs \| Bytedude](https://www.bytedude.com/gpg-in-emacs/).
-   [Hardcore Freestyle Emacs](http://doc.rix.si/org/fsem.html).
-   [Helm Projectile](https://github.com/bbatsov/projectile): Is awesome for finding files in emacs.
-   [Help Plus: Enhancing Emacs help functions](https://www.emacswiki.org/emacs/HelpPlus).
-   [hidepw - an Emacs minor mode for hiding passwords](https://github.com/jekor/hidepw).
-   [Hot Air - Goodbye VSCode, Hello Emacs (Again) has handy JavaScript tips](https://hotair.tech/blog/goodbye-vscode).
-   [How I enqueue online videos in mpv with Emacs : emacs](https://www.reddit.com/r/emacs/comments/efsg0t/how_i_enqueue_online_videos_in_mpv_with_emacs/).
-   [How is Doom Emacs so damn fast? : emacs](https://www.reddit.com/r/emacs/comments/f3ed3r/how_is_doom_emacs_so_damn_fast/).
-   [How is Doom’s startup so fast?](https://github.com/hlissner/doom-emacs/wiki/FAQ#how-is-dooms-startup-so-fast)
-   [How to Create a Screencast GIF in Emacs](http://blog.yitang.uk/2015/09/24/how-to-create-a-screencast-gif-in-emacs/).
-   [How to Make an Emacs Minor Mode](https://nullprogram.com/blog/2013/02/06/).
-   [How to run a new instance of emacs from within emacs \| Yoo Box](https://yoo2080.wordpress.com/2011/12/01/how-to-run-a-new-instance-of-emacs-from-within-emacs-2/).
-   [How to write company-mode backends](https://sixty-north.com/blog/series/how-to-write-company-mode-backends.html).
-   [How We Wrote a Textbook & (Tim Wheeler)](http://tim.hibal.org/blog/how-we-wrote-a-textbook).
-   [Howard Abrams's Death to the Shell presentation](http://www.howardism.org/Technical/Emacs/piper-presentation-transcript.html).
-   [Howard Abrams's eshell config](https://github.com/howardabrams/dot-files/blob/master/emacs-eshell.org).
-   [hrisbarrett/swift-mode](https://github.com/chrisbarrett/swift-mode).
-   [iamleeg/swift-mode](https://github.com/iamleeg/swift-mode).
-   [Improve the plaintext email experience through format=flowed with long lines. - vxlabs (mu4e)](https://vxlabs.com/2019/08/25/format-flowed-with-long-lines/).
-   [interactive-align: Interactively align by regular expression in emacs](https://github.com/mkcms/interactive-align).
-   [investigating Emacs CPU usage](http://skybert.net/emacs/investigating-emacs-cpu-usage/).
-   [Ivan Malison's Go config ](http://ivanmalison.github.io/dotfiles/#go).
-   [Ivy completion at point in an overlay : emacs](https://www.reddit.com/r/emacs/comments/57fnar/ivy_completion_at_point_in_an_overlay/).
-   [Ivy, Counsel and Swiper (writequit.org)](https://writequit.org/denver-emacs/presentations/2017-04-11-ivy.html).
-   [ivy-rich: An ivy wrapper providing additional customizations ](https://github.com/Yevgnen/ivy-rich/).
-   [ivy-youtube: Search for an Youtube video inside Emacs with Ivy](https://github.com/squiter/ivy-youtube).
-   [javadoc-lookup](https://github.com/skeeto/javadoc-lookup).
-   [Javascript code navigation in counsel-etags (Chen's blog)](http://blog.binchen.org/posts/javascript-code-navigation-in-counsel-etags.html).
-   [Javascript development environment](http://truongtx.me/2014/02/23/set-up-javascript-development-environment-in-emacs/).
-   [jcs-elpa/parse-it: Basic Parser in Emacs Lisp (Swift and ObjC included)](https://github.com/jcs-elpa/parse-it).
-   [JI Xiang](http://www.xiangji.me/).
-   [jjzmajic / handle: A handle for major-mode generic functions.](https://gitlab.com/jjzmajic/handle).
-   [Learn Emacs - 2019 Most Recommended Emacs Tutorials \| Hackr.io](https://hackr.io/tutorials/learn-emacs).
-   [Ledger Emacs config](https://github.com/rememberYou/.emacs.d/blob/b00402c2b51d0435ca8b0267ef71f5fa3558d41a/config.org#ledger).
-   [Lunarsite](http://www.lunaryorn.com/).
-   [macOS Catalina: Fixing Emacs After an Upgrade](https://spin.atomicobject.com/2019/12/12/fixing-emacs-macos-catalina/).
-   [Magit User Manual: Wip Modes](https://magit.vc/manual/magit/Wip-Modes.html).
-   [Make it easier to send "flowed" email messages from Emacs (mu4e)](https://github.com/legoscia/messages-are-flowing).
-   [Make your Emacs Mode Line more useful - Sebastian Wiesner](http://www.lunaryorn.com/posts/make-your-emacs-mode-line-more-useful.html).
-   [Making Emacs work for me](http://zeekat.nl/articles/making-emacs-work-for-me.html).
-   [Managing Directories with Emacs (dired)](https://ebzzry.io/en/emacs-dired/).
-   [Marcin Borkowski: 2019-03-18 Free Emacs key bindings](http://mbork.pl/2019-03-18_Free_Emacs_key_bindings).
-   [Marcin Borkowski: 2019-07-08 Pausing an Emacs keyboard macro](http://mbork.pl/2019-07-08_Pausing_an_Emacs_keyboard_macro).
-   [Marcin Borkowski: C-x 4 bindings](http://mbork.pl/2015-07-04_C-x_4_bindings).
-   [Marquee header (scrolling text header/notification)](https://github.com/elpa-host/marquee-header).
-   [Mastering Emacs](http://www.masteringemacs.org).
-   [Meghanada-Mode: A Better Java Development Environment for Emacs](https://github.com/mopemope/meghanada-emacs).
-   [meme x giffy – Random Thoughts](https://lars.ingebrigtsen.no/2017/10/15/meme-x-giffy/).
-   [Migrating Away From Use-Package](https://two-wrongs.com/migrating-away-from-use-package.html).
-   [More emacs C++ goodness](http://truongtx.me/2013/03/10/emacs-setting-up-perfect-environment-for-cc-programming): More emacs dev environment tips.
-   [mu4e & xwidget / webkit snippet](https://groups.google.com/forum/m/#!topic/mu-discuss/JqHEGycEyKI).
-   [Multiple Email Signatures with mu4e](http://www.macs.hw.ac.uk/~rs46/posts/2014-11-16-mu4e-signatures.html).
-   [My company-posframe configuration displaying backend names](https://www.reddit.com/r/emacs/comments/e79l6c/my_companyposframe_configuration_displaying/).
-   [My Emacs Configuration with use-package](http://www.lunaryorn.com/2015/01/06/my-emacs-configuration-with-use-package.html).
-   [My emacs development workflow](https://gridsome.netlify.com/blog/2018/11/18/my-emacs-development-workflow/).
-   [My Java, Android and Eclim Setup](http://www.pygopar.com/my-java-android-and-eclim-setup/).
-   [myOS / email - Building the perfect email setup (Emacs/notmuch/mbsync)](https://admiralakber.github.io/2018/09/20/myos-email/).
-   [Name Emacs Daemons With the '–daemon=' Option](https://joelmccracken.github.io/entries/name-emacs-daemons-with-the-daemon-equals-option/).
-   [navigel: Emacs library to facilitate the creation of tabulated-list based UIs](https://github.com/DamienCassou/navigel).
-   [Nerdgasms's Emacs tips](http://bbbscarter.wordpress.com/category/coding/emacs/).
-   [Neri Marschik's bazel-mode: Basic Bazel support for Emacs](https://github.com/codesuki/bazel-mode).
-   [Nimble (markdown replacement)](http://was.tl/projects/nimble/).
-   [Nocturnal Artifice](http://angelic-sedition.github.io/).
-   [ns-playgrounds: Execute Swift and Objective C code snippets in Emacs (Extended org babel support)](https://github.com/danielmartin/ns-playgrounds).
-   [Nuclear weapon multi-editing via Ivy and Ag · Samuel Barreto](https://sam217pa.github.io/2016/09/11/nuclear-power-editing-via-ivy-and-ag/).
-   [o-blog](http://renard.github.io/o-blog-v2/).
-   [Objective-C snippets #1](https://github.com/al-skobelev/objc-yassnippets/tree/master/objc-mode).
-   [Objective-C snippets #2](https://github.com/altschuler/yas-objc).
-   [Objective-C snippets #3](https://github.com/al-skobelev/objc-yassnippets).
-   [Ohai Emacs](https://github.com/bodil/ohai-emacs).
-   [olc: Open Location Code support for Emacs](https://gitlab.liu.se/davby02/olc).
-   [Or Emacs](http://oremacs.com/).
-   [Organize Your Life With Org-Mode](https://karl-voit.at/orgmode/).
-   [Outlook-style HTML replies with mu4e](https://www.reddit.com/r/emacs/comments/c0bg27/outlookstyle_html_replies_with_mu4e/).
-   [Password Management with Pass and Emacs (Patrick Skiba)](https://patrickskiba.com/unix/tools/2019/09/18/password-management-with-pass.html).
-   [PeachMelpa (Browse Emacs themes from MELPA)](https://peach-melpa.org/).
-   [Phil Sung's Emacs slides](https://stuff.mit.edu/iap/2007/emacs/emacs-slides-1.pdf).
-   [Philip Potter Emacs blog](http://www.philandstuff.com/).
-   [Porthole: RPC servers for Emacs](https://github.com/jcaw/porthole).
-   [Power up Anki with Emacs, Org mode, anki-editor and more](https://yiufung.net/post/anki-org/).
-   [Prelude emacs distribution](https://github.com/bbatsov/prelude).
-   [prescient.el: simple but effective sorting and filtering for Emacs (ivy and company).](https://github.com/raxod502/prescient.el/blob/master/README.md).
-   [Presenting the Eshell](http://www.howardism.org/Technical/Emacs/eshell-present.html).
-   [Projects - Projectile: The Project Interaction Library for Emacs](https://www.projectile.mx/en/latest/projects/).
-   [Punchagan's blog](http://punchagan.muse-amuse.in/posts/index.html).
-   [Purcell's way to add downloaded repos to load-path](https://github.com/purcell/emacs.d/blob/4c81c50ba77d165df8008dd5905f8c49102793d4/lisp/init-site-lisp.el#L7-L22).
-   [Radix trees, Dash and Company mode](http://justinhj.github.io/2018/10/24/radix-trees-dash-and-company-mode.html).
-   [React contribution layer for Spacemacs](https://github.com/syl20bnr/spacemacs/blob/master/layers/%2Bframeworks/react/README.org).
-   [Read Lisp, Tweak Emacs: How to read Emacs Lisp so that you can customize Emacs](http://emacslife.com/how-to-read-emacs-lisp.html).
-   [Read your python module documentation from Emacs](http://draketo.de/light/english/free-software/read-your-python-module-documentation-emacs).
-   [Read your RSS feeds in emacs with elfeed](http://pragmaticemacs.com/category/elfeed/).
-   [reformatter.el: Define commands which run reformatters on the current Emacs buffer](https://github.com/purcell/reformatter.el/blob/master/README.md).
-   [Removing/Altering Key Bindings from Minor Mode Keymaps · Emacs Redux](https://emacsredux.com/blog/2013/09/25/removing-key-bindings-from-minor-mode-keymaps/).
-   [Robert Brown's bazel-mode: GNU Emacs mode for editing Bazel BUILD files](https://github.com/brown/bazel-mode).
-   [rougier/svg-lib: Emacs SVG libraries for creatings tags, icons and bars](https://github.com/rougier/svg-lib).
-   [rtags: Implement 'rename with multiple cursors'](https://github.com/Andersbakken/rtags/commit/ad3026cdd1d6c1e0a2728fb4992addcb76605487).
-   [Rubikitch](http://rubikitch.com/).
-   [Sachua Chua](http://sachachua.com).
-   [Sakito's Emacs Objective-C](http://sakito.jp/emacs/emacsobjectivec.html).
-   [Setting up Emacs for Qt (C++) development - LSP](http://lahtela.me/blog/2020/05/21/setting-up-emacs-for-qt-development.html).
-   [Setting up GPG for Emacs (Random Thoughts)](https://lars.ingebrigtsen.no/2019/08/26/setting-up-gpg-for-emacs/).
-   [Slow TRAMP mode in Emacs (Super User)](https://superuser.com/questions/432160/slow-tramp-mode-in-emacs).
-   [Smartparens: Emacs and Pairs article](https://ebzzry.io/en/emacs-pairs/).
-   [SO: How can I refactor C++ source code using emacs?](http://stackoverflow.com/questions/673554/how-can-i-refactor-c-source-code-using-emacs).
-   [Some Emacs macro tricks](http://psung.blogspot.co.uk/2010/03/some-emacs-macro-tricks.html).
-   [Spaceline for Emacs (Jack Baty's weblog)](https://www.baty.net/2019/spaceline-for-emacs/).
-   [Staying sane with Emacs (when facing drudge work) (Zwillingssterns Weltenwald)](https://www.draketo.de/english/emacs/staying-sane-drudge-work).
-   [Step-by-step guide to C++ navigation and completion with Emacs and the Clang-based rtags](https://vxlabs.com/2016/04/11/step-by-step-guide-to-c-navigation-and-completion-with-emacs-and-the-clang-based-rtags/).
-   [Stock Emacs tips (Reddit)](https://www.reddit.com/r/emacs/comments/370k9p/stock_emacs_tips/).
-   [Super spotlight search with ivy/counsel (Pragmatic Emacs)](http://pragmaticemacs.com/emacs/super-spotlight-search-with-counsel/).
-   [swift-helpful: A Self-Documenting Emacs Programming Environment for Swift](https://github.com/danielmartin/swift-helpful).
-   [Techne (Emacs Friendly Keyboard): Operations Keys \| Wisdom and Wonder](https://www.wisdomandwonder.com/article/10474/techne-emacs-friendly-keyboard-operations-keys).
-   [The Emacs Guru Guide to Key Bindings – Wilfred Hughes::Blog](http://www.wilfred.me.uk/blog/2018/01/06/the-emacs-guru-guide-to-key-bindings/).
-   [The Emacs Package Developer's Handbook](https://github.com/alphapapa/emacs-package-dev-handbook).
-   [The Ultimate Collection of Emacs Resources](http://batsov.com/articles/2011/11/30/the-ultimate-collection-of-emacs-resources/).
-   [thierryvolpiatto's mu4e config ](https://github.com/thierryvolpiatto/emacs-tv-config/blob/master/mu4e-config.el).
-   [Tide: TypeScript Interactive Development Environment for Emacs](https://github.com/ananthakumaran/tide).
-   [TIP: How to use a stable and fast environment to develop in C++ : emacs](https://www.reddit.com/r/emacs/comments/audffp/tip_how_to_use_a_stable_and_fast_environment_to/).
-   [TRAMP is unbearably slow (OSX, ssh) - Emacs Stack Exchange](https://emacs.stackexchange.com/questions/16489/tramp-is-unbearably-slow-osx-ssh).
-   [Tramp: Open file via SSH and Sudo with Emacs - Stack Overflow](https://stackoverflow.com/a/16408592).
-   [Trần Xuân Trường's Emacs posts](http://truongtx.me/categories.html#emacs-ref).
-   [tsmanip.el manipulate timestamps/dates anywhere like org shift up/down](https://github.com/MetroWind/dotfiles-mac/blob/6c5af32349edb2764876ed6c1392fe5fc5a6f6ca/emacs/files/.emacs-pkgs/tsmanip.el).
-   [Tuhdo's C/C++ dev on Emacs](http://tuhdo.github.io/c-ide.html).
-   [Tuhdo's Emacs Mini Manual (PART 3) - CUSTOMIZING AND EXTENDING EMACS](https://tuhdo.github.io/emacs-tutor3.html).
-   [Tutorial for building gccemacs on MacOS catalina](https://www.reddit.com/r/emacs/comments/hztv4a/tutorial_for_building_gccemacs_on_macos_catalina/).
-   [Universidad de Vigo's Emacs course](http://tv.uvigo.es/gl/serial/513.html).
-   [UOMF: My Emacs Key Binding Strategy](https://karl-voit.at/2018/07/08/emacs-key-bindings/).
-   [Uses of regular expressions in Emacs (John D. Cook)](https://www.johndcook.com/blog/2018/01/27/emacs-features-that-use-regular-expressions/).
-   [Uses of regular expressions in Emacs](https://www.johndcook.com/blog/2018/01/27/emacs-features-that-use-regular-expressions/).
-   [Using ctags on modern Javascript (handy for Emacs)](http://dance.computer.dance/posts/2015/04/using-ctags-on-modern-javascript.html).
-   [Using Emacs and Eclim for Android Development](http://www.pygopar.com/using-emacs-and-eclim-for-android-development/).
-   [Using Emacs as an IDE (The Common Lisp Cookbook)](https://lispcookbook.github.io/cl-cookbook/emacs-ide.html).
-   [Using view-mode for modal navigation : emacs](https://www.reddit.com/r/emacs/comments/fojc1y/using_viewmode_for_modal_navigation/).
-   [vdirel vdir (calendars and contacts) for Emacs](https://github.com/DamienCassou/vdirel).
-   [Vedang Manerikar \| Compiling and Running Emacs 28 from the native-comp](https://vedang.me/tinylog/emacs-28-native-comp-ubuntu-20-04/).
-   [View and annotate PDFs in Emacs with PDF-tools (Pragmatic Emacs)](http://pragmaticemacs.com/emacs/view-and-annotate-pdfs-in-emacs-with-pdf-tools/).
-   [Weekly tips/trick/etc/ thread : multiple-cursors-mode using helm/counsel](https://www.reddit.com/r/emacs/comments/eeyhdz/weekly_tipstricketc_thread/).
-   [What Emacs communities exist?](http://emacs.stackexchange.com/questions/2571/what-emacs-communities-exist)
-   [What the Emacsd](http://whattheemacsd.com/).
-   [which-key-posframe: Let emacs-which-key use posframe to show its popup.](https://github.com/yanghaoxie/which-key-posframe).
-   [WikEmacs - TRAMP](http://wikemacs.org/wiki/TRAMP).
-   [Wisdom and Wonder](http://www.wisdomandwonder.com/).
-   [Working with tramp mode on slow connection](https://emacs.stackexchange.com/questions/22306/working-with-tramp-mode-on-slow-connection-emacs-does-network-trip-when-i-start/22307).
-   [Writing company backends](https://github.com/company-mode/company-mode/wiki/Writing-backends).
-   [Writing yasnippets](https://joaotavora.github.io/yasnippet/snippet-development.html).
-   [Xah Lee's Emacs: Set Font](http://ergoemacs.org/emacs/emacs_list_and_set_font.html).
-   [Xrefactory: A C/C++ Refactoring Browser for Emacs and XEmacs](http://www.xref.sk/xrefactory/main.html).
-   [yankpad: Paste yasnippets from an org-mode file](https://github.com/Kungsgeten/yankpad).
-   [Yasnippet generator for Cocoa iphone SDK](https://github.com/zegal/yasobjc).
-   [Yet another completion engine powered by git grep](https://github.com/zk-phi/git-complete).
-   [Yet another introduction to Emacs](https://plomlompom.com/guides/emacs.html).
-   [Yi Tang's road to emacs documentation on readthedocs.io](http://emacs.readthedocs.io/en/latest/).
-   [yk-color: Elisp library for linear RGB color manipulation](https://github.com/yurikhan/yk-color).
-   [Yoo Box's Emacs category](https://yoo2080.wordpress.com/category/emacs/).
-   [Zen in the Art of Emacs](http://ericscrosson.wordpress.com).
-   [‎The Emacs Garbage Collection Magic Hack](http://akrl.sdf.org/).

# \[2014-09-11 Thu\] Resetting gnome-terminal preferences
---
id: resetting-gnome-terminal-preferences
---

## Resetting preferences

``` {.bash org-language="sh"}
gconftool --recursive-unset /apps/gnome-terminal
```

## Want 256 colors?

Edit .bash_profile

``` {.bash org-language="sh"}
export TERM="screen-256color"
```

## Ensure .bash_profile is loaded

From gnome-terminal window:

> gnome-terminal Edit Profiles… Edit Title and Command X Run command as login shell

## Solarized

Bonus: See [post](http://codefork.com/blog/index.php/2011/11/27/getting-the-solarized-theme-to-work-in-emacs) to get solarized on gnome-terminal.

# \[2014-10-09 Thu\] C++ bookmarks
---
id: cpp-bookmarks
---



-   [Additional C/C++ Tooling](http://nickdesaulniers.github.io/blog/2015/07/23/additional-c-slash-c-plus-plus-tooling/).
-   [C++ Best Practices](https://leanpub.com/cppbestpractices/c/release_799).
-   [C++ Core Guidelines](https://github.com/isocpp/CppCoreGuidelines).
-   [cppreference.com](http://cppreference.com).
-   [Fast directory listing](https://github.com/romkatv/gitstatus/blob/master/docs/listdir.md).
-   [FunctionalPlus: helps you write concise and readable C++ code](https://github.com/Dobiasd/FunctionalPlus).
-   [GitHub - mozilla/rr: Record and Replay Framework (debugging)](https://github.com/mozilla/rr).
-   [Modern C \| Hacker News](https://news.ycombinator.com/item?id=24361469).
-   [Modern C++: Variadic template parameters and tuples](http://www.murrayc.com/permalink/2015/12/05/modern-c-variadic-template-parameters-and-tuples/).
-   [My favorite C compiler flags during development \| Hacker News](https://news.ycombinator.com/item?id=35758898).
-   [My Most Important C++ Aha! Moments…Ever](http://www.artima.com/cppsource/top_cpp_aha_moments.html).
-   [Programming: Principles and Practice Using C++ Paperback](http://www.amazon.co.uk/Programming-Principles-Practice-Using-C/dp/0321992784).
-   [Some CMake tips](https://samthursfield.wordpress.com/2015/10/20/some-cmake-tips/).
-   [The ways to avoid complexity in modern C++](http://vitiy.info/Slides/MeetingCPP2015/MeetingCPP2015Complexity.pdf).

# \[2014-07-14 Mon\] Java bookmarks
---
id: java-bookmarks
---



-   [Better Java](https://github.com/cxxr/better-java).
-   [ExecutorService - 10 tips and tricks](http://www.nurkiewicz.com/2014/11/executorservice-10-tips-and-tricks.html?m=1).
-   [Java anti-patterns](http://www.odi.ch/prog/design/newbies.php#21).
-   [Java Generics FAQs](http://www.angelikalanger.com/GenericsFAQ/JavaGenericsFAQ.html).
-   [Lanterna](https://code.google.com/p/lanterna/), a text GUI (a la ncurses) written in Java.
-   [Modern Java - A Guide to Java 8](https://github.com/winterbe/java8-tutorial).

# \[2014-07-14 Mon\] Browser bookmarks
---
id: browser-bookmarks
---



-   [Dillo](http://www.dillo.org).
-   [Firefox: no window borders or other decoration](https://fingers.today/tech/firefox-app-mode).
-   [NetSurf](http://www.netsurf-browser.org/).
-   [SingleFile \| Save a page as a single HTML file](https://addons.mozilla.org/en-US/firefox/addon/single-file/).

# \[2014-07-14 Mon\] Node bookmarks
---
id: node-bookmarks
---

-   [How to use npm as a Build Tool](http://blog.keithcirkel.co.uk/how-to-use-npm-as-a-build-tool/).

# \[2014-07-14 Mon\] JavaScript bookmarks
---
id: javascript-bookmarks
---



-   [#javascript ES6 cheatsheet — Map & WeakMap – Mihai Serban – Medium](https://medium.com/@serbanmihai/javascript-es6-cheatsheet-map-weakmap-1339b7b80c13).
-   [A better way to lazy load responsive images](https://github.com/ivopetkov/responsively-lazy).
-   [Airbnb JavaScript Style Guide](https://news.ycombinator.com/item?id=9822975).
-   [An overview of JavaScript reactive frameworks](http://rrees.me/2015/06/04/overview-of-javascript-reactive-frameworks/).
-   [Babel Javascript compiler](https://babeljs.io/).
-   [Bootstrap 3 grid](http://www.helloerik.com/the-subtle-magic-behind-why-the-bootstrap-3-grid-works).
-   [Chrome DevTools](https://developers.google.com/web/tools/chrome-devtools).
-   [Concise JavaScript intro](https://slides.com/concise/js/fullscreen#/).
-   [DOMPurify: a DOM-only, super-fast, uber-tolerant XSS sanitizer for HTML, MathML and SVG](https://github.com/cure53/DOMPurify).
-   [ECMAScript parsing infrastructure for multipurpose analysis](http://esprima.org/).
-   [Eloquent JavaScript (Book)](http://eloquentjavascript.net).
-   [ES6 Overview in Bullet Points (Hacker News)](https://news.ycombinator.com/item?id%3D10638113).
-   [ES6 Overview in Bullet Points](https://github.com/bevacqua/es6).
-   [ES6-cheatsheet](https://github.com/DrkSephy/es6-cheatsheet).
-   [Essential JavaScript Links](https://github.com/ericelliott/essential-javascript-links).
-   [Essential Reading List for Getting Started With Service Workers](https://changelog.com/essential-reading-list-for-getting-started-with-service-workers/).
-   [Exploring ES6: Upgrade to the next version of JavaScript (Book)](http://exploringjs.com/).
-   [Famous Javascript library for animations & interfaces](http://famous.org/).
-   [Flexbox Cheatsheet](http://yoksel.github.io/flex-cheatsheet/).
-   [Front-End Developer Handbook](http://www.frontendhandbook.com/).
-   [Functional Programming Principles in Javascript - DEV Community](https://dev.to/leandrotk_/functional-programming-principles-in-javascript-26g7).
-   [Hidden gems in Chrome Developer Tools](http://www.sencha.com/blog/hidden-gems-in-chrome-developer-tools/).
-   [How do promises work](http://robotlolita.me/2015/11/15/how-do-promises-work.html).
-   [Immutable collections for JavaScript](http://facebook.github.io/immutable-js/).
-   [Introducing Pokedex.org: a progressive webapp for Pokémon fans](http://www.pocketjavascript.com/blog/2015/11/23/introducing-pokedex-org).
-   [Introducing the Famous framework](https://blog.famous.org/introducing-the-famous-framework/).
-   [JavaScript: Data Structures (Part 1) - DEV Community](https://dev.to/banesag/javascript-data-structures-part-1-4eb5).
-   [JavaScript: Iterator (ES2015)](http://xahlee.info/js/javascript_iterator.html).
-   [js.coach (Opinionated catalog of open source JS packages)](https://js.coach).
-   [jscodeshift, a toolkit for running codemods over multiple JS files](https://github.com/facebook/jscodeshift).
-   [JSCS linter](http://jscs.info/).
-   [Learning the Web (mozilla.org)](https://developer.mozilla.org/en-US/Learn).
-   [Ludicrously Fast Page Loads - A Guide for Full-Stack Devs](http://www.nateberkopec.com/2015/10/07/frontend-performance-chrome-timeline.html).
-   [Mancy: JavaScript REPL application based on Electron and React](http://www.mancy-re.pl/).
-   [Modern JavaScript: Develop and Design (book)](http://www.larryullman.com/books/modern-javascript-develop-and-design/table-of-contents/).
-   [Modern Javascript: ​Learning the foundational concepts and build tools for modern web applications](http://courses.angularclass.com/courses/modern-javascript).
-   [Must See JavaScript Dev Tools That Put Other Dev Tools to Shame](https://medium.com/javascript-scene/must-see-javascript-dev-tools-that-put-other-dev-tools-to-shame-aca6d3e3d925#.bcntoj3kq).
-   [new vs Object.create](http://mrale.ph/blog/2014/07/30/constructor-vs-objectcreate.html).
-   [No, you don’t need semicolons (Medium)](https://medium.com/@goatslacker/no-you-dont-need-semicolons-148d936b9cf2#.s5839x3mt).
-   [npm-shrinkwrap](https://github.com/uber/npm-shrinkwrap).
-   [Paged.js – Paged Media (book/blog publishing)](https://www.pagedmedia.org/paged-js/).
-   [pleaserotate.js](https://github.com/arscan/pleaserotate.js)
-   [PleaseWait.js](http://pathgather.github.io/please-wait/)
-   [React - ES6 tricks in Classes - DEV Community](https://dev.to/kozakrisz/react---es6-tricks-in-classes-33je).
-   [Redux: The Single Immutable State Tree](https://egghead.io/lessons/javascript-redux-the-single-immutable-state-tree).
-   [RxJS 5 Thinking Reactively \| Ben Lesh - YouTube](https://www.youtube.com/watch?v=3LKMwkuK0ZE&feature=youtu.be).
-   [RxJS Observable interop with Promises and Async-Await](https://medium.com/@benlesh/rxjs-observable-interop-with-promises-and-async-await-bebb05306875).
-   [Show HN: A visual guide to the most popular CSS properties (Hacker News)](https://news.ycombinator.com/item?id=13031492).
-   [Show HN: JavaScript books, free online (Hacker News)](https://news.ycombinator.com/item?id=12954540).
-   [Snap.svg: the JavaScript SVG library for the modern web](http://snapsvg.io/).
-   [The Hitchhiker's Guide to Modern JavaScript Tooling](http://reactkungfu.com/2015/07/the-hitchhikers-guide-to-modern-javascript-tooling/).
-   [Tools for cleaning up messy Javascript](https://github.com/focusaurus/data/blob/0aa94a91181d3a85b148375d24adca4a166c4be0/posts/problog/2015/10/tools-for-cleaning-up-messy-javascript.md).
-   [Tools to keep a consistent coding style in JavaScript](http://blog.kewah.com/2015/tools-to-keep-a-consistent-coding-style-in-javascript/).
-   [Two.js is a two-dimensional drawing api geared towards modern web browsers](http://jonobr1.github.io/two.js).
-   [Vorlon.JS: remotely debugging and testing your JavaScript](http://vorlonjs.com/).
-   [What you should know about JavaScript regular expressions](http://bjorn.tipling.com/state-and-regular-expressions-in-javascript).
-   [Why we should stop using Grunt & Gulp](http://blog.keithcirkel.co.uk/why-we-should-stop-using-grunt/).
-   [Xah Lee's JavaScript in Depth](http://xahlee.info/js/js.html).

# \[2014-07-14 Mon\] HTML bookmarks
---
id: html-bookmarks
---



-   [A few HTML tips (Mozilla)](https://hacks.mozilla.org/2016/08/a-few-html-tips/).
-   [awesome-motherfucking-website: An awesome list of websites about minimal web design and copious swearing](https://github.com/lyoshenka/awesome-motherfucking-website).
-   [Better Motherfucking Website](http://bettermotherfuckingwebsite.com/).
-   [Chrome Devtools Tips & Tricks](http://mo.github.io/2015/10/19/chrome-devtools.html).
-   [Chrome Devtools Tips and Tricks (Hacker News)](https://news.ycombinator.com/item?id=10416062).
-   [Chromium's web fundamentals and Web Starter Kit](http://blog.chromium.org/2014/06/web-fundamentals-and-web-starter-kit.html).
-   [CSS Grid Areas](https://ishadeed.com/article/css-grid-area/).
-   [CSS Layout cookbook - CSS: Cascading Style Sheets (MDN)](https://developer.mozilla.org/en-US/docs/Web/CSS/Layout_cookbook).
-   [Facebook Relay: An Evil And/Or Incompetent Attack On REST](https://www.pandastrike.com/posts/20151015-rest-vs-relay).
-   [HEAD - A free guide to \<head\> elements](https://htmlhead.dev/).
-   [HEAD – A guide to \<head\> elements (Hacker News)](https://news.ycombinator.com/item?id=21119553).
-   [How to Become a Great JavaScript Developer](http://blog.ustunozgur.com/javascript/programming/books/videos/2015/06/17/how_to_be_a_great_javascript_software_developer.html).
-   [How To Pick a Frontend Web Framework](http://www.fse.guru/how-to-pick-a-frontend-web-framework).
-   [HTML Tips (2020) - Marko Denic - Web Developer](https://markodenic.com/html-tips/).
-   [Learning the Web (mozilla.org)](https://developer.mozilla.org/en-US/Learn).
-   [Motherfucking Website](https://motherfuckingwebsite.com/).
-   [My Current HTML Boilerplate \| Hacker News](https://news.ycombinator.com/item?id=26952557).
-   [Perfect Motherfucking Website](https://perfectmotherfuckingwebsite.com/).
-   [Solved by Flexbox](https://philipwalton.github.io/solved-by-flexbox/).
-   [The Best Motherfucking Website](https://thebestmotherfucking.website/).
-   [Ultimate Motherfucking Website](https://ultimatemotherfuckingwebsite.com/).
-   [WAVE Report (web accessiblity evaluation tool)](http://wave.webaim.org/report#/).
-   [Web Design in 4 minutes](https://jgthms.com/web-design-in-4-minutes).
-   [What forces a layout / reflow](https://gist.github.com/paulirish/5d52fb081b3570c81e3a).
-   [What I’ve Learned From Working With HTML5 Video Over A Month](https://medium.com/yemeksepeti-teknoloji/what-ive-learned-from-working-with-html5-video-over-a-month-485c5d5c2045).
-   [Write HTML Like It's 1999](https://bradleytaunt.com/2019/06/08/html-like-1999).

# \[2014-07-14 Mon\] Networking bookmarks
---
id: networking-bookmarks
---



-   [Ask HN: Good books&#x2F;courses to learn networking essentials for web development](https://news.ycombinator.com/item?id=27650775).
-   [Command-line tools to look up DNS information](http://cr.yp.to/djbdns/tools.html).
-   [Stanford CS 144: Introduction to Computer Networking \| Hacker News](https://news.ycombinator.com/item?id=21794270).

# \[2014-07-13 Sun\] Python bookmarks
---
id: python-bookmarks
---



-   [12. Virtual Environments and Packages — Python 3.7.4 documentation (pipenv)](https://docs.python.org/3/tutorial/venv.html).
-   [A python command-line tool which draws basic graphs/charts in the terminal](https://github.com/mkaz/termgraph).
-   [Argparse cookbook](http://mkaz.com/2014/07/26/python-argparse-cookbook/): For simple python scripts.
-   [Best 50 Python Books for Programmers with All Skill Sets](https://linuxhint.com/best_50_python_books/).
-   [Code Like a Pythonista: Idiomatic Python](http://python.net/~goodger/projects/pycon/2007/idiomatic/handout.html).
-   [Dataset: databases for lazy people](https://github.com/pudo/dataset).
-   [Dive Into Python 3 book](http://www.diveintopython3.net/).
-   [Dive Into Python book](http://www.diveintopython.net/).
-   [Drawille](https://github.com/asciimoo/drawille/): Python drawing in ascii/unicode braille characters.
-   [Pandas visualization](https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html).
-   [PEP 20 – The Zen of Python](https://www.python.org/dev/peps/pep-0020/).
-   [Pudb](https://pypi.python.org/pypi/pudb): A tui python debugger.
-   [Pycoders weekly mailing list](http://pycoders.com/).
-   [Python Algorithms book](https://books.google.co.uk/books?id=9_AXCmGDiz8C&hl=en&redir_esc=y).
-   [Python patterns, Take One (Hacker News)](https://news.ycombinator.com/item?id=11240729).
-   [Python patterns, Take One](https://taoofmac.com/space/blog/2013/08/11/2300).
-   [Python Tips and Traps](https://www.airpair.com/python/posts/python-tips-and-traps).
-   [Python tools for Emacs](http://irreal.org/blog/?p=3860).
-   [Python’s Innards: Hello, ceval.c!](http://tech.blog.aknin.name/tag/internals/page/2/).
-   [Read Excel sheet with Python/Pandas (Twitter)](https://twitter.com/python_tip/status/1111349676106833920).
-   [Regular expressions in Python and Perl](http://www.johndcook.com/blog/python_regex/).
-   [Reversing an MD5 hash (python)](https://www.johndcook.com/blog/2019/01/24/reversing-an-md5-hash/).
-   [Textract](https://github.com/deanmalmgren/textract): Python util extracting text from a handful of document types.
-   [The definitive guide on how to use static, class or abstract methods in Python](https://julien.danjou.info/blog/2013/guide-python-static-class-abstract-methods).
-   [The Hacker's guide to python](https://julien.danjou.info/books/the-hacker-guide-to-python).
-   [The Little Book of Python Anti-Patterns](http://docs.quantifiedcode.com/python-anti-patterns/).
-   [Three Useful Python Libraries for Startups](http://blog.instavest.com/three-useful-python-libraries-for-startups).
-   [Understanding Python's "with" statement](http://effbot.org/zone/python-with-statement.htm).
-   [Watchdog](https://github.com/gorakhargosh/watchdog) (monitor filesystem in python).

# \[2014-07-13 Sun\] Development bookmarks
---
id: development-bookmarks
---



-   [Hexagonal Grids](https://www.redblobgames.com/grids/hexagons/).
-   [Big O Notation – Explained as easily as possible \| Hacker News](https://news.ycombinator.com/item?id=25803288).
-   [Comprehensive Big O Notation Guide in Plain English, using Javascript](https://dev.to/humblecoder00/comprehensive-big-o-notation-guide-in-plain-english-using-javascript-3n6m).
-   [Just Simply \| Stop saying how simple things are in our docs](https://justsimply.dev/).
-   [Show HN: DevBooks – Help Developers find indy books \| Hacker News](https://news.ycombinator.com/item?id=25698707).
-   [Writing Well-Documented Code - Learn from Examples - Code Catalog](https://codecatalog.org/2021/09/04/well-documented-code.html).
-   [(How to Write a (Lisp) Interpreter (in Python)): parse, tokenize, read from tokens, environments, eval, and repl ](http://norvig.com/lispy.html).
-   [12 Signs You’re Working in a Feature Factory - 3 Years Later](https://amplitude.com/blog/12-signs-youre-working-in-a-feature-factory-3-years-later).
-   [15 Fundamental Laws of Software Development](http://www.exceptionnotfound.net/fundamental-laws-of-software-development/).
-   [3 books that will take you to the next level – Gui Froes](https://guifroes.com/2018/03/23/3-books-that-will-take-you-to-the-next-level/).
-   [8 Tips To Get Started In An Existing Codebase](https://quickleft.com/blog/8-tips-get-started-existing-codebase/).
-   [9 Anti-Patterns](http://sahandsaba.com/nine-anti-patterns-every-programmer-should-be-aware-of-with-examples.html).
-   [A composable pattern for pure state machines with effects](https://gist.github.com/andymatuschak/d5f0a8730ad601bcccae97e8398e25b2).
-   [A crash course in compilers – Increment: Programming Languages](https://increment.com/programming-languages/crash-course-in-compilers/).
-   [Algorithms, Part I - Princeton University (Coursera)](https://www.coursera.org/learn/algorithms-part1#syllabus).
-   [All the UML you need to know](http://www.cs.bsu.edu/homepages/pvg/misc/uml/).
-   [All You Need to Know About Big O Notation {Python Examples}](https://skerritt.blog/big-o/).
-   [An intro to compilers](https://nicoleorchard.com/blog/compilers).
-   [Apprentice Alf’s Blog: Everything you ever wanted to know about DRM and ebooks](https://apprenticealf.wordpress.com/).
-   [Ask HN: How do I choose the right resource to learn CS fundamentals?](https://news.ycombinator.com/item?id=21919465).
-   [Ask HN: What is your favorite YouTube channel for developers? (Hacker News)](https://news.ycombinator.com/item?id=12702651).
-   [Ask HN: What's the most elegant piece of code you've seen? (Hacker News)](https://news.ycombinator.com/item?id=11005003).
-   [Automatic Language Bindings (via clang -ast-dump)](https://floooh.github.io/2020/08/23/sokol-bindgen.html).
-   [Awesome lists of everything (Github)](https://github.com/sindresorhus/awesome/blob/master/readme.md).
-   [AWS in plain English](https://www.expeditedssl.com/aws-in-plain-english).
-   [Better Bash scripting in 15 Minutes](http://robertmuth.blogspot.it/2012/08/better-bash-scripting-in-15-minutes.html).
-   [Beware of cute optimizations bearing gifts (building fuzzy search) · wincent.com](https://wincent.com/blog/optimization).
-   [Big-O Notation: Beginners Guide - DEV Community](https://dev.to/metcoder95/big-o-notation-beginners-guide-1h38).
-   [Bozhidar Batsov's presentation (lots of great books listed)](https://speakerdeck.com/bbatsov/knighitie-koito-vsieki-proghramist-triabva-da-prochietie).
-   [Brain, refactored: lots of wonderful dev learning references (Murray's Blog)](https://www.murrayc.com/permalink/2018/12/07/brain-refactored).
-   [Bytecode compilers and interpreters (Hacker News)](https://news.ycombinator.com/item?id=18821475).
-   [Catalog of Refactorings](https://refactoring.com/catalog).
-   [Clean code](http://arturoherrero.com/clean-code/).
-   [Code review best practices](http://kevinlondon.com/2015/05/05/code-review-best-practices.html).
-   [Code style rules that are actually useful (DEV Community)](https://dev.to/vonheikemen/code-style-rules-that-are-actually-useful-3igf).
-   [Command line interface best practices (Hacker News)](https://news.ycombinator.com/item?id=12687711).
-   [Confessions of an Abstraction Hater (Hacker News)](https://news.ycombinator.com/item?id=19010492).
-   [Could ImGUI be the future of GUIs?](https://games.greggman.com/game/imgui-future/).
-   [Data structure visualization](http://www.cs.usfca.edu/~galles/visualization/Algorithms.html).
-   [Database readings](https://github.com/rxin/db-readings).
-   [Designing and evaluating reusable components](http://mollyrocket.com/casey/stream_0028.html): Talk by Casey Muratori.
-   [Designing Qt-Style C++ APIs](http://doc.qt.digia.com/qq/qq13-apis.html).
-   [Diverse podcasts in \@ermmears's tweet comments](https://twitter.com/ermmears/status/1118929832103034881).
-   [Domain-driven design: Tackling Complexity in the Heart of Software (Book)](http://www.amazon.co.uk/Domain-driven-Design-Tackling-Complexity-Software/dp/0321125215/ref=sr_1_1?ie=UTF8&qid=1444472442&sr=8-1&keywords=domain+driven+design).
-   [Donald Knuth Lectures - YouTube](https://www.youtube.com/playlist?list=PL94E35692EB9D36F3).
-   [Font compare](http://s9w.io/font_compare).
-   [GitHub - fdiskyou/Zines: hacking Zines mirror for the lulz and nostalgy](https://github.com/fdiskyou/Zines).
-   [GitHub - kilimchoi/engineering-blogs: A curated list of engineering blogs](https://github.com/kilimchoi/engineering-blogs).
-   [Google shell style guide](https://google-styleguide.googlecode.com/svn/trunk/shell.xml).
-   [Hacker shelf: Free software dev books](http://hackershelf.com/browse/?popular=1).
-   [Hacking knowlege](http://oedb.org/ilibrarian/hacking-knowledge/).
-   [Happiness is… a freshly organized codebase - Several People Are Coding (aka feature-driven org)](https://slack.engineering/happiness-is-a-freshly-organized-codebase-7ffa6590a70d).
-   [Heap Exploitation Part 1: Understanding the Glibc Heap Implementation \| Azeria Labs](https://azeria-labs.com/heap-exploitation-part-1-understanding-the-glibc-heap-implementation/).
-   [How to pass a programming interview](http://blog.triplebyte.com/how-to-pass-a-programming-interview).
-   [How to Safely Implement Cryptography Features in Any Application](https://paragonie.com/blog/2015/09/how-to-safely-implement-cryptography-in-any-application).
-   [How to write your own compiler](http://staff.polito.it/silvano.rivoira/HowToWriteYourOwnCompiler.htm).
-   [Jeremy Mikkola - Rules for Autocomplete](http://jeremymikkola.com/posts/2019_03_19_rules_for_autocomplete.html).
-   [Joe Duffy - The Error Model](http://joeduffyblog.com/2016/02/07/the-error-model/).
-   [LibHunt - Find The Software You Need](https://www.libhunt.com).
-   [Linux workstation security checklist](https://github.com/lfit/itpol/blob/master/linux-workstation-security.md).
-   [Lost in Technopolis](http://newartisans.com/2011/04/letter-to-the-fsf/).
-   [Migrating bajillions of database records at Stripe](http://robertheaton.com/2015/08/31/migrating-bajillions-of-database-records-at-stripe/).
-   [OAuth diagram/explanation (Quora)](https://www.quora.com/How-does-Login-with-Facebook-option-work-on-third-party-websites).
-   [Over 500 Top PDFs posted to Hacker News in 2018](https://getpolarized.io/2019/01/08/top-pdfs-of-2018-hackernews.html).
-   [Please do not attempt to simplify this code: favors completeness, boilerplate, and documentation in the name of stability and long term maintenance (Hacker News)](https://news.ycombinator.com/item?id=18772873).
-   [README Love: Quick and easy tips](https://quickleft.com/blog/readme-love-quick-easy-tips/).
-   [Refactoring: Improving the design of existing code (Book)](http://www.amazon.co.uk/Refactoring-Improving-Design-Existing-Technology/dp/0201485672/ref=sr_1_1?ie=UTF8&qid=1444472751&sr=8-1&keywords=refactoring+improving+the+design+of+existing+code).
-   [Sarah Mei on livable coebases](https://twitter.com/sarahmei/status/783340259073335296).
-   [Semantic Versioning 2.0.0 (Semantic Versioning)](https://semver.org/).
-   [Show HN: I wrote a book on writing good developer resumes \| Hacker News](https://news.ycombinator.com/item?id=24777640).
-   [Signs you’re working in a feature factory \| Hacker News](https://news.ycombinator.com/item?id=22335738).
-   [Some REST best practices](https://bourgeois.me/rest/).
-   [Structure and Interpretation of Computer Programs](http://groups.csail.mit.edu/mac/classes/6.001/abelson-sussman-lectures/) (videos).
-   [Teach Yourself Programming in Ten Years](http://www.norvig.com/21-days.html).
-   [TechnoSophos: Be Nice And Write Stable Code (versioning scheme)](http://technosophos.com/2018/07/04/be-nice-and-write-stable-code.html).
-   [The art of command line](https://github.com/jlevy/the-art-of-command-line).
-   [The Debugging Mindset (Hacker News)](https://news.ycombinator.com/item?id=14020796).
-   [The Hardest Program I've Ever Written (a code formatter)](http://journal.stuffwithstuff.com/2015/09/08/the-hardest-program-ive-ever-written).
-   [The passionate programmer](https://speakerdeck.com/bbatsov/knighitie-koito-vsieki-proghramist-triabva-da-prochietie).
-   [Things I’ve learned in 20 years of programming \| Hacker News](https://news.ycombinator.com/item?id=21603920).
-   [TIL: today I learned](https://github.com/jbranchaud/til).
-   [Tmux crash course](http://robots.thoughtbot.com/a-tmux-crash-course): By Josh Clayton.
-   [UI Engineering Questions](https://medium.com/@johanstn/initiating-ui-engineering-conversations-946906b4c710#.9vkrt6xzi).
-   [Use long flags when scripting (2013) \| Hacker News](https://news.ycombinator.com/item?id=24518682).
-   [VisuAlgo.net](http://www.comp.nus.edu.sg/~stevenha/visualization/): Visualising data structures and algorithms through animation.
-   [When management tells you to build a specific thing (junior vs mid vs senior eng)](https://twitter.com/kwyntastic/status/1281639369359544322).
-   [Wizard zines (programming by Julia Evans)](https://wizardzines.com/).
-   [WTF Is Big O Notation? (Hacker News)](https://news.ycombinator.com/item?id=19487848).
-   [Your calendrical fallacy is thinking…](https://yourcalendricalfallacyis.com/).

# \[2014-07-13 Sun\] Paswordless ssh with authorized keys
---
id: passwordless-ssh-with-authorized-keys
---

## On local host

``` {.bash org-language="sh"}
ssh-keygen
cat ~/.ssh/id_dsa.pub | ssh user@remotehost 'cat >> ~/.ssh/authorized_keys'
```

## On remote host

``` {.bash org-language="sh"}
chmod 700 ~/.ssh
chmod 600 ~/.ssh/authorized_keys
```

UPDATE: [Add "AddKeysToAgent yes" to .ssh/config and enter password only once](https://stuff-things.net/2020/01/24/not-stupid-ssh-tricks-automatic-ssh-add).

# \[2013-11-04 Mon\] Some python idioms
---
id: some-python-idioms
---

-   Prefer double quotes if escaping single quotes.
-   Prefer string interpolation over join. Eg. "'%s'" % member_default.
-   Prefer double underscore for privates.
-   Prefer with statement to implicitly close file.

``` python
with open(path, 'r') as text_file:
    text = text_file.read()
```

-   Prefer list comprehensions to filter.
-   Prefer using separate modules over classes if only using for separation.
-   Keep in mind: "eafp vs lbyl" (ie. just let it throw).
-   Prefer exceptions over assertions.
-   Throw ValueError for wrong input.
-   Return explicit False if remaining case is always false.

[^1]: Been using powder milk since lockdown, end-result's been tasty.

[^2]: The app's been fairly stable, but who knows… please backup your org file before feeding it to the lion.

[^3]: The app's been fairly stable, but who knows… please backup your org file before feeding it to the lion.

[^4]: The app's been fairly stable, but who knows… please backup your org file before feeding it to the lion.

[^5]: Yes, this post was written in [org mode](https://orgmode.org/).

[^6]: Been using powder milk since lockdown, end-result's been tasty.

[^7]: Only tried raw honey so far.

[^8]: Can likely use ground cardamom. I enjoy the scents while crushing.
